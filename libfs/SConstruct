from configure import configure
import os, sys
mainEnv = Environment()

configure(mainEnv)

sys.path.append(os.path.join(Dir('#').abspath, 'tool'))

AddOption("--test",
	action="store_true", dest="run_tests",
	default = False,
	help="run tests")

AddOption("--test-clean",
	action="store_true", dest="clean_tests",
	default = False,
	help="force a clean run of tests")

AddOption("--test-integration",
	action="store_true", dest="run_integration_tests",
	default = False,
	help="run integration tests")

AddOption("--test-gdb",
	action="store_true", dest="test_attach_gdb",
	default = False,
	help="attach gdb")

AddOption("--test-stdout",
	dest="test_stdout",
	type='string',
	nargs = 1,
	action="store", 
	default = 'none',
	help="Set tests' stdout: none, deferred, single-term, multi-term")

AddOption("--test-stderr",
	dest="test_stderr",
	type='string',
	nargs = 1,
	action="store", 
	default = 'none',
	help="Set tests' stdout: none, deferred, single-term, multi-term")

AddOption('--test-filter',
	action="store", dest='test_filter',
	type='string',
	metavar='NAME',
	help='a regular expression used to match tests to run')

AddOption('--test-name',
	action="store", dest='test_name',
	type='string',
	metavar='NAME',
	help='the name of the test to run')

AddOption('--test-debug',
	action="store_true", dest="test_print_debug",
	default = False,
	help="print debugging output")

AddOption('--test-extra-args',
	dest='test_extra_args',
	type='string',
	nargs = 1,
	action="store", 
	default = '',
	help='a regular expression used to match tests to run')


mainEnv['TEST_ATTACH_GDB'] = GetOption('test_attach_gdb')
mainEnv['TEST_FILTER'] = GetOption('test_filter')
mainEnv['TEST_NAME'] = GetOption('test_name')
mainEnv['TEST_STDOUT'] = GetOption('test_stdout')
mainEnv['TEST_STDERR'] = GetOption('test_stderr')
mainEnv['TEST_EXTRA_ARGS'] = GetOption('test_extra_args')

#mainEnv.Append(LIBS = ['tcmalloc'])
#mainEnv.Append(LIBS = ['hoard'])
#mainEnv.Append(CCFLAGS=' -g -O0')
#mainEnv.Append(CCFLAGS=' -g -O2 -finstrument-functions')
mainEnv.Append(CCFLAGS='-g -O3')
#mainEnv.Append(CCFLAGS=' -g -O2 -Wall -Wno-unused-function -Wno-unused-parameter -Wno-unused-label')
#mainEnv.Append(CCFLAGS = '-fno-omit-frame-pointer', LINKFLAGS= '/home/hvolos/workspace/tools/google-perftools-1.7/.libs/libprofiler.so')

if ARGUMENTS.get('VERBOSE') != "1":
	mainEnv['CCCOMSTR']     = "(COMPILE)  $TARGET"
	mainEnv['CXXCOMSTR']    = "(COMPILE)  $TARGET"
	mainEnv['SHCCCOMSTR']   = "(COMPILE)  $TARGET"
	mainEnv['SHCXXCOMSTR']  = "(COMPILE)  $TARGET"
	mainEnv['ASPPCOMSTR']   = "(ASSEMBLE) $TARGET"
	mainEnv['ARCOMSTR']     = "(BUILD)    $TARGET"
	mainEnv['RANLIBCOMSTR'] = "(INDEX)    $TARGET"
	mainEnv['LINKCOMSTR']   = "(LINK)     $TARGET"
	mainEnv['SHLINKCOMSTR'] = "(LINK)     $TARGET"


if mainEnv['GOOGLE_SPARSEHASH']:
	mainEnv.Append(CPPPATH = [mainEnv['GOOGLE_SPARSEHASH']])
if mainEnv['LIBCONFIG']:
	mainEnv.Append(CPPPATH = [mainEnv['LIBCONFIG']])
	mainEnv.Append(LIBPATH = [os.path.join(mainEnv['LIBCONFIG'], '.libs')])
	mainEnv.Append(RPATH = [os.path.join(mainEnv['LIBCONFIG'], '.libs/')])


Export('mainEnv')

# Build stuff 
SConscript('src/SConscript', variant_dir = 'build/src')

# Run tests
SConscript('test/SConscript', variant_dir = os.path.join('build/test'))
