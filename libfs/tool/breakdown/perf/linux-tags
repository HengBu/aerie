!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCT_TIMEOUT	kernel/acct.c	73;"	d	file:
AIO_EVENTS_FIRST_PAGE	fs/aio.c	176;"	d	file:
AIO_EVENTS_OFFSET	fs/aio.c	177;"	d	file:
AIO_EVENTS_PER_PAGE	fs/aio.c	175;"	d	file:
ALLOC_CMA	mm/internal.h	375;"	d
ALLOC_CPUSET	mm/internal.h	374;"	d
ALLOC_HARDER	mm/internal.h	372;"	d
ALLOC_HIGH	mm/internal.h	373;"	d
ALLOC_NO_WATERMARKS	mm/internal.h	367;"	d
ALLOC_WMARK_HIGH	mm/internal.h	366;"	d
ALLOC_WMARK_LOW	mm/internal.h	365;"	d
ALLOC_WMARK_MASK	mm/internal.h	370;"	d
ALLOC_WMARK_MIN	mm/internal.h	364;"	d
ARCH_DLINFO	fs/compat_binfmt_elf.c	92;"	d	file:
ARCH_DLINFO	fs/compat_binfmt_elf.c	93;"	d	file:
ARCH_HAS_SETUP_ADDITIONAL_PAGES	fs/compat_binfmt_elf.c	122;"	d	file:
ARCH_HAS_SETUP_ADDITIONAL_PAGES	fs/compat_binfmt_elf.c	123;"	d	file:
ARCH_KMALLOC_FLAGS	mm/slab.c	157;"	d	file:
ARCH_LOW_ADDRESS_LIMIT	mm/bootmem.c	814;"	d	file:
ARCH_LOW_ADDRESS_LIMIT	mm/nobootmem.c	372;"	d	file:
ARCH_MIN_MMSTRUCT_ALIGN	kernel/fork.c	1694;"	d	file:
ARCH_MIN_TASKALIGN	kernel/fork.c	256;"	d	file:
ARCH_SHF_SMALL	kernel/module.c	71;"	d	file:
ASCII_FLAG	fs/binfmt_flat.c	173;"	d	file:
ASM_SYMBOL	kernel/modsign_certificate.S	/^#define ASM_SYMBOL(sym) PASTE(SYMBOL_PREFIX, sym)$/;"	d
ASM_SYMBOL	kernel/modsign_certificate.S	/^#define ASM_SYMBOL(sym) sym$/;"	d
ASYNC_COOKIE_MAX	kernel/async.c	65;"	d	file:
AS_BALLOON_MAP	include/linux/pagemap.h	/^	AS_BALLOON_MAP  = __GFP_BITS_SHIFT + 4, \/* balloon page special map *\/$/;"	e	enum:mapping_flags
AS_EIO	include/linux/pagemap.h	/^	AS_EIO		= __GFP_BITS_SHIFT + 0,	\/* IO error on async write *\/$/;"	e	enum:mapping_flags
AS_ENOSPC	include/linux/pagemap.h	/^	AS_ENOSPC	= __GFP_BITS_SHIFT + 1,	\/* ENOSPC on async write *\/$/;"	e	enum:mapping_flags
AS_MM_ALL_LOCKS	include/linux/pagemap.h	/^	AS_MM_ALL_LOCKS	= __GFP_BITS_SHIFT + 2,	\/* under mm_take_all_locks() *\/$/;"	e	enum:mapping_flags
AS_UNEVICTABLE	include/linux/pagemap.h	/^	AS_UNEVICTABLE	= __GFP_BITS_SHIFT + 3,	\/* e.g., ramdisk, SHM_LOCK *\/$/;"	e	enum:mapping_flags
ATTRIB_NORET	fs/ext3/ext3.h	987;"	d
AUDITSC_FAILURE	kernel/auditsc.c	77;"	d	file:
AUDITSC_INVALID	kernel/auditsc.c	75;"	d	file:
AUDITSC_SUCCESS	kernel/auditsc.c	76;"	d	file:
AUDIT_AUX_IPCPERM	kernel/auditsc.c	136;"	d	file:
AUDIT_AUX_PIDS	kernel/auditsc.c	139;"	d	file:
AUDIT_BUFSIZ	kernel/audit.c	147;"	d	file:
AUDIT_BUILD_CONTEXT	kernel/audit.h	/^	AUDIT_BUILD_CONTEXT,	\/* Create the per-task audit_context,$/;"	e	enum:audit_state
AUDIT_DEBUG	kernel/audit.h	30;"	d
AUDIT_DISABLED	kernel/audit.c	70;"	d	file:
AUDIT_DISABLED	kernel/audit.h	/^	AUDIT_DISABLED,		\/* Do not create per-task audit_context.$/;"	e	enum:audit_state
AUDIT_FS_WATCH	kernel/audit_watch.c	66;"	d	file:
AUDIT_INITIALIZED	kernel/audit.c	72;"	d	file:
AUDIT_INODE_BUCKETS	kernel/audit.h	69;"	d
AUDIT_LOCKED	kernel/audit.c	77;"	d	file:
AUDIT_MAXFREE	kernel/audit.c	151;"	d	file:
AUDIT_NAMES	kernel/auditsc.c	82;"	d	file:
AUDIT_NAME_FULL	kernel/audit.h	78;"	d
AUDIT_OFF	kernel/audit.c	75;"	d	file:
AUDIT_ON	kernel/audit.c	76;"	d	file:
AUDIT_RECORD_CONTEXT	kernel/audit.h	/^	AUDIT_RECORD_CONTEXT	\/* Create the per-task audit_context,$/;"	e	enum:audit_state
AUDIT_UNINITIALIZED	kernel/audit.c	71;"	d	file:
BAD_ADDR	fs/binfmt_aout.c	126;"	d	file:
BAD_ADDR	fs/binfmt_elf.c	85;"	d	file:
BAD_ALIEN_MAGIC	mm/slab.c	563;"	d	file:
BANDWIDTH_INTERVAL	mm/page-writeback.c	55;"	d	file:
BATCHREFILL_LIMIT	mm/slab.c	379;"	d	file:
BDEV_I	fs/block_dev.c	/^static inline struct bdev_inode *BDEV_I(struct inode *inode)$/;"	f	file:
BDI_SHOW	mm/backing-dev.c	175;"	d	file:
BFIRST	fs/ext3/xattr.c	61;"	d	file:
BHDR	fs/ext3/xattr.c	59;"	d	file:
BH_ENTRY	fs/buffer.c	48;"	d	file:
BH_LRU_SIZE	fs/buffer.c	1217;"	d	file:
BIO_INLINE_VECS	fs/bio.c	38;"	d	file:
BITS	fs/select.c	338;"	d	file:
BITS_PER_PAGE	kernel/pid.c	54;"	d	file:
BITS_PER_PAGE	kernel/pid_namespace.c	22;"	d	file:
BITS_PER_PAGE_MASK	kernel/pid.c	55;"	d	file:
BLOCKS_PER_PAGE	mm/shmem.c	71;"	d	file:
BLOCK_HASH_SHIFT	fs/ext3/xattr.c	1285;"	d	file:
BLOCK_HASH_SHIFT	fs/ext3/xattr.c	1314;"	d	file:
BNEPCONNADD	fs/compat_ioctl.c	570;"	d	file:
BNEPCONNDEL	fs/compat_ioctl.c	571;"	d	file:
BNEPGETCONNINFO	fs/compat_ioctl.c	573;"	d	file:
BNEPGETCONNLIST	fs/compat_ioctl.c	572;"	d	file:
BOGO_DIRENT_SIZE	mm/shmem.c	75;"	d	file:
BOOT_CPUCACHE_ENTRIES	mm/slab.c	282;"	d	file:
BPF_DATA	kernel/seccomp.c	83;"	d	file:
BUFCTL_ACTIVE	mm/slab.c	188;"	d	file:
BUFCTL_END	mm/slab.c	186;"	d	file:
BUFCTL_FREE	mm/slab.c	187;"	d	file:
BUFSZ	kernel/sysctl_binary.c	39;"	d	file:
BUILD_EMBED_FIRST_CHUNK	mm/percpu.c	1410;"	d	file:
BUILD_LOCK_OPS	kernel/spinlock.c	46;"	d	file:
BUILD_PAGE_FIRST_CHUNK	mm/percpu.c	1415;"	d	file:
BUSY_WORKER_HASH_ORDER	kernel/workqueue.c	/^	BUSY_WORKER_HASH_ORDER	= 6,		\/* 64 pointers *\/$/;"	e	enum:__anon65	file:
BV	fs/bio.c	47;"	d	file:
BV	fs/bio.c	51;"	d	file:
BYTES_PER_POINTER	mm/kmemleak.c	114;"	d	file:
BYTES_PER_WORD	mm/slab.c	153;"	d	file:
Bad_file	mm/swapfile.c	/^static const char Bad_file[] = "Bad swap file entry ";$/;"	v	file:
Bad_offset	mm/swapfile.c	/^static const char Bad_offset[] = "Bad swap offset entry ";$/;"	v	file:
CACHE	mm/slab.c	332;"	d	file:
CACHE	mm/slab.c	338;"	d	file:
CACHE	mm/slab.c	531;"	d	file:
CACHE	mm/slab.c	534;"	d	file:
CACHE	mm/slab.c	545;"	d	file:
CACHE	mm/slab.c	548;"	d	file:
CACHE_CACHE	mm/slab.c	310;"	d	file:
CACHE_CREATE_MASK	mm/slab.h	82;"	d
CAP_BSET	kernel/kmod.c	57;"	d	file:
CAP_PI	kernel/kmod.c	58;"	d	file:
CFLAGS_REMOVE_cgroup-debug.o	kernel/Makefile	/^CFLAGS_REMOVE_cgroup-debug.o = -pg$/;"	m
CFLAGS_REMOVE_irq_work.o	kernel/Makefile	/^CFLAGS_REMOVE_irq_work.o = -pg$/;"	m
CFLAGS_REMOVE_lockdep.o	kernel/Makefile	/^CFLAGS_REMOVE_lockdep.o = -pg$/;"	m
CFLAGS_REMOVE_lockdep_proc.o	kernel/Makefile	/^CFLAGS_REMOVE_lockdep_proc.o = -pg$/;"	m
CFLAGS_REMOVE_mutex-debug.o	kernel/Makefile	/^CFLAGS_REMOVE_mutex-debug.o = -pg$/;"	m
CFLAGS_REMOVE_rtmutex-debug.o	kernel/Makefile	/^CFLAGS_REMOVE_rtmutex-debug.o = -pg$/;"	m
CFLGS_OFF_SLAB	mm/slab.c	376;"	d	file:
CGROUP_FILE_GENERIC_PREFIX	kernel/cgroup.c	3991;"	d	file:
CGROUP_FILE_PROCS	kernel/cgroup.c	/^	CGROUP_FILE_PROCS,$/;"	e	enum:cgroup_filetype	file:
CGROUP_FILE_TASKS	kernel/cgroup.c	/^	CGROUP_FILE_TASKS,$/;"	e	enum:cgroup_filetype	file:
CGROUP_FREEZER_ONLINE	kernel/cgroup_freezer.c	/^	CGROUP_FREEZER_ONLINE	= (1 << 0), \/* freezer is fully online *\/$/;"	e	enum:freezer_state_flags	file:
CGROUP_FREEZING	kernel/cgroup_freezer.c	/^	CGROUP_FREEZING		= CGROUP_FREEZING_SELF | CGROUP_FREEZING_PARENT,$/;"	e	enum:freezer_state_flags	file:
CGROUP_FREEZING_PARENT	kernel/cgroup_freezer.c	/^	CGROUP_FREEZING_PARENT	= (1 << 2), \/* the parent freezer is freezing *\/$/;"	e	enum:freezer_state_flags	file:
CGROUP_FREEZING_SELF	kernel/cgroup_freezer.c	/^	CGROUP_FREEZING_SELF	= (1 << 1), \/* this freezer is freezing *\/$/;"	e	enum:freezer_state_flags	file:
CGROUP_FROZEN	kernel/cgroup_freezer.c	/^	CGROUP_FROZEN		= (1 << 3), \/* this and its descendants frozen *\/$/;"	e	enum:freezer_state_flags	file:
CGROUP_LOCAL_BUFFER_SIZE	kernel/cgroup.c	2320;"	d	file:
CHAINHASH_BITS	kernel/lockdep.c	301;"	d	file:
CHAINHASH_SIZE	kernel/lockdep.c	302;"	d	file:
CHARGE_BATCH	mm/memcontrol.c	2231;"	d	file:
CHARGE_NOMEM	mm/memcontrol.c	/^	CHARGE_NOMEM,		\/* we can't do more. return -ENOMEM *\/$/;"	e	enum:__anon11	file:
CHARGE_OK	mm/memcontrol.c	/^	CHARGE_OK,		\/* success *\/$/;"	e	enum:__anon11	file:
CHARGE_OOM_DIE	mm/memcontrol.c	/^	CHARGE_OOM_DIE,		\/* the current is killed because of OOM *\/$/;"	e	enum:__anon11	file:
CHARGE_RETRY	mm/memcontrol.c	/^	CHARGE_RETRY,		\/* need to retry but retry is not bad *\/$/;"	e	enum:__anon11	file:
CHARGE_WOULDBLOCK	mm/memcontrol.c	/^	CHARGE_WOULDBLOCK,	\/* GFP_WAIT wasn't set and no enough res. *\/$/;"	e	enum:__anon11	file:
CLASSHASH_BITS	kernel/lockdep.c	290;"	d	file:
CLASSHASH_SIZE	kernel/lockdep.c	291;"	d	file:
CLEAR_MNT_SHARED	fs/pnode.h	17;"	d
CLUSTER_MASK	mm/rmap.c	1334;"	d	file:
CLUSTER_SIZE	mm/rmap.c	1333;"	d	file:
CL_COPY_ALL	fs/pnode.h	22;"	d
CL_EXPIRE	fs/pnode.h	20;"	d
CL_MAKE_SHARED	fs/pnode.h	23;"	d
CL_PRIVATE	fs/pnode.h	24;"	d
CL_SHARED_TO_SLAVE	fs/pnode.h	25;"	d
CL_SLAVE	fs/pnode.h	21;"	d
CL_UNPRIVILEGED	fs/pnode.h	26;"	d
CMTPCONNADD	fs/compat_ioctl.c	575;"	d	file:
CMTPCONNDEL	fs/compat_ioctl.c	576;"	d	file:
CMTPGETCONNINFO	fs/compat_ioctl.c	578;"	d	file:
CMTPGETCONNLIST	fs/compat_ioctl.c	577;"	d	file:
COMMENT	fs/binfmt_flat.c	177;"	d	file:
COMPATIBLE_IOCTL	fs/compat_ioctl.c	814;"	d	file:
COMPAT_SYSCALL_DEFINE2	fs/open.c	/^COMPAT_SYSCALL_DEFINE2(ftruncate, unsigned int, fd, compat_ulong_t, length)$/;"	f
COMPAT_SYSCALL_DEFINE2	fs/open.c	/^COMPAT_SYSCALL_DEFINE2(truncate, const char __user *, path, compat_off_t, length)$/;"	f
COMPAT_SYSCALL_DEFINE2	fs/timerfd.c	/^COMPAT_SYSCALL_DEFINE2(timerfd_gettime, int, ufd,$/;"	f
COMPAT_SYSCALL_DEFINE2	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE2(getitimer, int, which,$/;"	f
COMPAT_SYSCALL_DEFINE2	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE2(sched_rr_get_interval,$/;"	f
COMPAT_SYSCALL_DEFINE2	kernel/futex_compat.c	/^COMPAT_SYSCALL_DEFINE2(set_robust_list,$/;"	f
COMPAT_SYSCALL_DEFINE2	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user *, uset,$/;"	f
COMPAT_SYSCALL_DEFINE2	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE2(rt_sigsuspend, compat_sigset_t __user *, unewset, compat_size_t, sigsetsize)$/;"	f
COMPAT_SYSCALL_DEFINE2	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE2(sigaltstack,$/;"	f
COMPAT_SYSCALL_DEFINE3	fs/compat.c	/^COMPAT_SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)$/;"	f
COMPAT_SYSCALL_DEFINE3	fs/compat.c	/^COMPAT_SYSCALL_DEFINE3(open_by_handle_at, int, mountdirfd,$/;"	f
COMPAT_SYSCALL_DEFINE3	fs/read_write.c	/^COMPAT_SYSCALL_DEFINE3(lseek, unsigned int, fd, compat_off_t, offset, unsigned int, whence)$/;"	f
COMPAT_SYSCALL_DEFINE3	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE3(setitimer, int, which,$/;"	f
COMPAT_SYSCALL_DEFINE3	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE3(sigprocmask, int, how,$/;"	f
COMPAT_SYSCALL_DEFINE3	kernel/futex_compat.c	/^COMPAT_SYSCALL_DEFINE3(get_robust_list, int, pid,$/;"	f
COMPAT_SYSCALL_DEFINE3	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE3(rt_sigqueueinfo,$/;"	f
COMPAT_SYSCALL_DEFINE3	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE3(sigaction, int, sig,$/;"	f
COMPAT_SYSCALL_DEFINE4	fs/compat.c	/^COMPAT_SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags, umode_t, mode)$/;"	f
COMPAT_SYSCALL_DEFINE4	fs/timerfd.c	/^COMPAT_SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,$/;"	f
COMPAT_SYSCALL_DEFINE4	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE4(rt_sigtimedwait, compat_sigset_t __user *, uthese,$/;"	f
COMPAT_SYSCALL_DEFINE4	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE4(wait4,$/;"	f
COMPAT_SYSCALL_DEFINE4	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE4(rt_sigaction, int, sig,$/;"	f
COMPAT_SYSCALL_DEFINE4	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE4(rt_sigprocmask, int, how, compat_sigset_t __user *, nset,$/;"	f
COMPAT_SYSCALL_DEFINE4	kernel/signal.c	/^COMPAT_SYSCALL_DEFINE4(rt_tgsigqueueinfo,$/;"	f
COMPAT_SYSCALL_DEFINE5	kernel/compat.c	/^COMPAT_SYSCALL_DEFINE5(waitid,$/;"	f
COMPAT_SYSCALL_DEFINE6	kernel/futex_compat.c	/^COMPAT_SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,$/;"	f
CONTIGERROR	mm/scm.h	26;"	d
CONTINUATION	fs/binfmt_flat.c	174;"	d	file:
CPUSET_NAME_LEN	kernel/cpuset.c	272;"	d	file:
CPUSET_NODELIST_LEN	kernel/cpuset.c	273;"	d	file:
CPU_DONT_CARE	kernel/taskstats.c	/^	CPU_DONT_CARE$/;"	e	enum:actions	file:
CQ_MASK	kernel/lockdep.c	880;"	d	file:
CREATE_COOLDOWN	kernel/workqueue.c	/^	CREATE_COOLDOWN		= HZ,		\/* time to breath after fail *\/$/;"	e	enum:__anon65	file:
CREATE_TRACE_POINTS	fs/ext3/super.c	33;"	d	file:
CREATE_TRACE_POINTS	fs/fs-writeback.c	88;"	d	file:
CREATE_TRACE_POINTS	kernel/fork.c	83;"	d	file:
CREATE_TRACE_POINTS	kernel/lockdep.c	53;"	d	file:
CREATE_TRACE_POINTS	kernel/module.c	67;"	d	file:
CREATE_TRACE_POINTS	kernel/printk.c	49;"	d	file:
CREATE_TRACE_POINTS	kernel/rcupdate.c	51;"	d	file:
CREATE_TRACE_POINTS	kernel/signal.c	35;"	d	file:
CREATE_TRACE_POINTS	kernel/softirq.c	29;"	d	file:
CREATE_TRACE_POINTS	kernel/timer.c	51;"	d	file:
CREATE_TRACE_POINTS	kernel/workqueue.c	247;"	d	file:
CREATE_TRACE_POINTS	mm/compaction.c	38;"	d	file:
CREATE_TRACE_POINTS	mm/migrate.c	42;"	d	file:
CREATE_TRACE_POINTS	mm/oom_kill.c	39;"	d	file:
CREATE_TRACE_POINTS	mm/util.c	14;"	d	file:
CREATE_TRACE_POINTS	mm/vmscan.c	53;"	d	file:
CSD_FLAG_LOCK	kernel/smp.c	/^	CSD_FLAG_LOCK		= 0x01,$/;"	e	enum:__anon63	file:
CSS_DEACT_BIAS	kernel/cgroup.c	68;"	d	file:
CSS_ID_MAX	kernel/cgroup.c	171;"	d	file:
CSS_SET_HASH_BITS	kernel/cgroup.c	378;"	d	file:
CS_CPU_EXCLUSIVE	kernel/cpuset.c	/^	CS_CPU_EXCLUSIVE,$/;"	e	enum:__anon56	file:
CS_MEMORY_MIGRATE	kernel/cpuset.c	/^	CS_MEMORY_MIGRATE,$/;"	e	enum:__anon56	file:
CS_MEM_EXCLUSIVE	kernel/cpuset.c	/^	CS_MEM_EXCLUSIVE,$/;"	e	enum:__anon56	file:
CS_MEM_HARDWALL	kernel/cpuset.c	/^	CS_MEM_HARDWALL,$/;"	e	enum:__anon56	file:
CS_ONLINE	kernel/cpuset.c	/^	CS_ONLINE,$/;"	e	enum:__anon56	file:
CS_SCHED_LOAD_BALANCE	kernel/cpuset.c	/^	CS_SCHED_LOAD_BALANCE,$/;"	e	enum:__anon56	file:
CS_SPREAD_PAGE	kernel/cpuset.c	/^	CS_SPREAD_PAGE,$/;"	e	enum:__anon56	file:
CS_SPREAD_SLAB	kernel/cpuset.c	/^	CS_SPREAD_SLAB,$/;"	e	enum:__anon56	file:
CTL_DIR	kernel/sysctl_binary.c	32;"	d	file:
CTL_DNADR	kernel/sysctl_binary.c	37;"	d	file:
CTL_INT	kernel/sysctl_binary.c	34;"	d	file:
CTL_STR	kernel/sysctl_binary.c	33;"	d	file:
CTL_ULONG	kernel/sysctl_binary.c	35;"	d	file:
CTL_UUID	kernel/sysctl_binary.c	36;"	d	file:
CURMAPERROR	mm/scm.h	25;"	d
C_A_D	kernel/sys.c	/^int C_A_D = 1;$/;"	v
DBG_FLT	fs/binfmt_flat.c	52;"	d	file:
DBG_FLT	fs/binfmt_flat.c	54;"	d	file:
DEBUG	fs/aio.c	21;"	d	file:
DEBUG	mm/slab.c	143;"	d	file:
DEBUG	mm/slab.c	147;"	d	file:
DEBUG_DEFAULT_FLAGS	mm/slub.c	152;"	d	file:
DEBUG_METADATA_FLAGS	mm/slub.c	160;"	d	file:
DECLARE_TASKLET	kernel/backtracetest.c	/^static DECLARE_TASKLET(backtrace_tasklet, &backtrace_test_irq_callback, 0);$/;"	v	file:
DEFAULT_CONSOLE_LOGLEVEL	kernel/printk.c	64;"	d	file:
DEFAULT_MESSAGE_LOGLEVEL	kernel/printk.c	60;"	d	file:
DEFINE_RCU_RANDOM	kernel/rcutorture.c	322;"	d	file:
DELAYED	mm/memory-failure.c	/^	DELAYED,	\/* Will be handled later *\/$/;"	e	enum:outcome	file:
DELTA	fs/ext3/hash.c	15;"	d	file:
DEREGISTER	kernel/taskstats.c	/^	DEREGISTER,$/;"	e	enum:actions	file:
DIO_CREDITS	fs/ext3/inode.c	1017;"	d	file:
DIO_MAX_BLOCKS	fs/ext3/inode.c	1009;"	d	file:
DIO_PAGES	fs/direct-io.c	45;"	d	file:
DIRTY_POLL_THRESH	mm/page-writeback.c	50;"	d	file:
DISABLE_BRANCH_PROFILING	kernel/lockdep.c	28;"	d	file:
DLINFO_ITEMS	fs/binfmt_elf_fdpic.c	567;"	d	file:
DMAPOOL_DEBUG	mm/dmapool.c	42;"	d	file:
DOWN	mm/slab.h	/^	DOWN,			\/* No slab functionality yet *\/$/;"	e	enum:slab_state
DO_NUMA	mm/ksm.c	46;"	d	file:
DO_NUMA	mm/ksm.c	49;"	d	file:
DO_PAGES_STAT_CHUNK_NR	mm/migrate.c	1320;"	d	file:
DUMP_WRITE	fs/binfmt_elf.c	1226;"	d	file:
DUMP_WRITE	fs/binfmt_elf.c	1254;"	d	file:
DUMP_WRITE	fs/binfmt_elf_fdpic.c	1273;"	d	file:
DUMP_WRITE	fs/binfmt_elf_fdpic.c	1301;"	d	file:
DX_HASH_HALF_MD4	fs/ext3/ext3.h	908;"	d
DX_HASH_HALF_MD4_UNSIGNED	fs/ext3/ext3.h	911;"	d
DX_HASH_LEGACY	fs/ext3/ext3.h	907;"	d
DX_HASH_LEGACY_UNSIGNED	fs/ext3/ext3.h	910;"	d
DX_HASH_TEA	fs/ext3/ext3.h	909;"	d
DX_HASH_TEA_UNSIGNED	fs/ext3/ext3.h	912;"	d
DYNTICK_TASK_EXIT_IDLE	kernel/rcu.h	55;"	d
DYNTICK_TASK_FLAG	kernel/rcu.h	53;"	d
DYNTICK_TASK_MASK	kernel/rcu.h	54;"	d
DYNTICK_TASK_NEST_MASK	kernel/rcu.h	52;"	d
DYNTICK_TASK_NEST_VALUE	kernel/rcu.h	51;"	d
DYNTICK_TASK_NEST_WIDTH	kernel/rcu.h	50;"	d
D_COMP_NOMATCH	fs/dcache.c	/^	D_COMP_NOMATCH,$/;"	e	enum:slow_d_compare	file:
D_COMP_OK	fs/dcache.c	/^	D_COMP_OK,$/;"	e	enum:slow_d_compare	file:
D_COMP_SEQRETRY	fs/dcache.c	/^	D_COMP_SEQRETRY,$/;"	e	enum:slow_d_compare	file:
D_HASHBITS	fs/dcache.c	99;"	d	file:
D_HASHMASK	fs/dcache.c	100;"	d	file:
E3FSBLK	fs/ext3/ext3.h	498;"	d
ELF_ARCH	fs/compat_binfmt_elf.c	77;"	d	file:
ELF_BASE_PLATFORM	fs/binfmt_elf.c	140;"	d	file:
ELF_BASE_PLATFORM	fs/binfmt_elf_fdpic.c	468;"	d	file:
ELF_CLASS	fs/compat_binfmt_elf.c	26;"	d	file:
ELF_CLASS	fs/compat_binfmt_elf.c	27;"	d	file:
ELF_CORE_EFLAGS	fs/binfmt_elf.c	70;"	d	file:
ELF_ET_DYN_BASE	fs/compat_binfmt_elf.c	97;"	d	file:
ELF_ET_DYN_BASE	fs/compat_binfmt_elf.c	98;"	d	file:
ELF_EXEC_PAGESIZE	fs/compat_binfmt_elf.c	102;"	d	file:
ELF_EXEC_PAGESIZE	fs/compat_binfmt_elf.c	103;"	d	file:
ELF_HWCAP	fs/compat_binfmt_elf.c	87;"	d	file:
ELF_HWCAP	fs/compat_binfmt_elf.c	88;"	d	file:
ELF_MIN_ALIGN	fs/binfmt_elf.c	64;"	d	file:
ELF_MIN_ALIGN	fs/binfmt_elf.c	66;"	d	file:
ELF_PAGEALIGN	fs/binfmt_elf.c	75;"	d	file:
ELF_PAGEOFFSET	fs/binfmt_elf.c	74;"	d	file:
ELF_PAGESTART	fs/binfmt_elf.c	73;"	d	file:
ELF_PLATFORM	fs/compat_binfmt_elf.c	82;"	d	file:
ELF_PLATFORM	fs/compat_binfmt_elf.c	83;"	d	file:
ELF_PLAT_INIT	fs/compat_binfmt_elf.c	107;"	d	file:
ELF_PLAT_INIT	fs/compat_binfmt_elf.c	108;"	d	file:
EM86_INTERP	fs/binfmt_em86.c	22;"	d	file:
EM86_I_NAME	fs/binfmt_em86.c	23;"	d	file:
EMBEDDED_NAME_MAX	fs/namei.c	130;"	d	file:
ENANOSLEEP_NOTSUP	kernel/posix-timers.c	89;"	d	file:
ENANOSLEEP_NOTSUP	kernel/posix-timers.c	91;"	d	file:
ENCRYPTED	fs/binfmt_flat.c	178;"	d	file:
ENTRY	fs/ext3/xattr.c	60;"	d	file:
EP_ITEM_COST	fs/eventpoll.c	102;"	d	file:
EP_MAX_EVENTS	fs/eventpoll.c	98;"	d	file:
EP_MAX_NESTS	fs/eventpoll.c	96;"	d	file:
EP_PRIVATE_BITS	fs/eventpoll.c	93;"	d	file:
EP_UNACTIVE_PTR	fs/eventpoll.c	100;"	d	file:
ERR_BAD_DX_DIR	fs/ext3/ext3.h	976;"	d
EXPSIZE	kernel/acct.c	349;"	d	file:
EXPSIZE2	kernel/acct.c	390;"	d	file:
EXT2_FLAGS_SIGNED_HASH	fs/ext3/ext3.h	335;"	d
EXT2_FLAGS_TEST_FILESYS	fs/ext3/ext3.h	337;"	d
EXT2_FLAGS_UNSIGNED_HASH	fs/ext3/ext3.h	336;"	d
EXT2_MOUNT_ABORT	fs/ext3/ext3.h	376;"	d
EXT2_MOUNT_DATA_FLAGS	fs/ext3/ext3.h	377;"	d
EXT2_MOUNT_NOLOAD	fs/ext3/ext3.h	375;"	d
EXT3FS_DEBUG	fs/ext3/ext3.h	35;"	d
EXT3FS_DEBUG	fs/ext3/resize.c	12;"	d	file:
EXT3_ACL_VERSION	fs/ext3/acl.h	9;"	d
EXT3_ADDR_PER_BLOCK	fs/ext3/ext3.h	84;"	d
EXT3_ADDR_PER_BLOCK_BITS	fs/ext3/ext3.h	86;"	d
EXT3_APPEND_FL	fs/ext3/ext3.h	139;"	d
EXT3_BAD_INO	fs/ext3/ext3.h	62;"	d
EXT3_BLOCKS_PER_GROUP	fs/ext3/ext3.h	117;"	d
EXT3_BLOCK_SIZE	fs/ext3/ext3.h	83;"	d
EXT3_BLOCK_SIZE_BITS	fs/ext3/ext3.h	85;"	d
EXT3_BOOT_LOADER_INO	fs/ext3/ext3.h	64;"	d
EXT3_CLEAR_COMPAT_FEATURE	fs/ext3/ext3.h	764;"	d
EXT3_CLEAR_INCOMPAT_FEATURE	fs/ext3/ext3.h	768;"	d
EXT3_CLEAR_RO_COMPAT_FEATURE	fs/ext3/ext3.h	766;"	d
EXT3_COMPRBLK_FL	fs/ext3/ext3.h	144;"	d
EXT3_COMPR_FL	fs/ext3/ext3.h	136;"	d
EXT3_CURRENT_REV	fs/ext3/ext3.h	743;"	d
EXT3_DATA_TRANS_BLOCKS	fs/ext3/ext3.h	1142;"	d
EXT3_DEFAULT_RESERVE_BLOCKS	fs/ext3/ext3.h	40;"	d
EXT3_DEFM_ACL	fs/ext3/ext3.h	808;"	d
EXT3_DEFM_BSDGROUPS	fs/ext3/ext3.h	806;"	d
EXT3_DEFM_DEBUG	fs/ext3/ext3.h	805;"	d
EXT3_DEFM_JMODE	fs/ext3/ext3.h	810;"	d
EXT3_DEFM_JMODE_DATA	fs/ext3/ext3.h	811;"	d
EXT3_DEFM_JMODE_ORDERED	fs/ext3/ext3.h	812;"	d
EXT3_DEFM_JMODE_WBACK	fs/ext3/ext3.h	813;"	d
EXT3_DEFM_UID16	fs/ext3/ext3.h	809;"	d
EXT3_DEFM_XATTR_USER	fs/ext3/ext3.h	807;"	d
EXT3_DEF_RESGID	fs/ext3/ext3.h	800;"	d
EXT3_DEF_RESUID	fs/ext3/ext3.h	799;"	d
EXT3_DELETE_TRANS_BLOCKS	fs/ext3/ext3.h	1150;"	d
EXT3_DESC_PER_BLOCK	fs/ext3/ext3.h	118;"	d
EXT3_DESC_PER_BLOCK_BITS	fs/ext3/ext3.h	120;"	d
EXT3_DFL_CHECKINTERVAL	fs/ext3/ext3.h	391;"	d
EXT3_DFL_MAX_MNT_COUNT	fs/ext3/ext3.h	390;"	d
EXT3_DIND_BLOCK	fs/ext3/ext3.h	127;"	d
EXT3_DIRSYNC_FL	fs/ext3/ext3.h	152;"	d
EXT3_DIRTY_FL	fs/ext3/ext3.h	143;"	d
EXT3_DIR_LINK_EMPTY	fs/ext3/ext3.h	903;"	d
EXT3_DIR_LINK_MAX	fs/ext3/ext3.h	902;"	d
EXT3_DIR_PAD	fs/ext3/ext3.h	861;"	d
EXT3_DIR_REC_LEN	fs/ext3/ext3.h	863;"	d
EXT3_DIR_ROUND	fs/ext3/ext3.h	862;"	d
EXT3_DYNAMIC_REV	fs/ext3/ext3.h	741;"	d
EXT3_ECOMPR_FL	fs/ext3/ext3.h	146;"	d
EXT3_ERRORS_CONTINUE	fs/ext3/ext3.h	396;"	d
EXT3_ERRORS_DEFAULT	fs/ext3/ext3.h	399;"	d
EXT3_ERRORS_PANIC	fs/ext3/ext3.h	398;"	d
EXT3_ERRORS_RO	fs/ext3/ext3.h	397;"	d
EXT3_ERROR_FS	fs/ext3/ext3.h	329;"	d
EXT3_FEATURE_COMPAT_DIR_INDEX	fs/ext3/ext3.h	776;"	d
EXT3_FEATURE_COMPAT_DIR_PREALLOC	fs/ext3/ext3.h	771;"	d
EXT3_FEATURE_COMPAT_EXT_ATTR	fs/ext3/ext3.h	774;"	d
EXT3_FEATURE_COMPAT_HAS_JOURNAL	fs/ext3/ext3.h	773;"	d
EXT3_FEATURE_COMPAT_IMAGIC_INODES	fs/ext3/ext3.h	772;"	d
EXT3_FEATURE_COMPAT_RESIZE_INODE	fs/ext3/ext3.h	775;"	d
EXT3_FEATURE_COMPAT_SUPP	fs/ext3/ext3.h	788;"	d
EXT3_FEATURE_INCOMPAT_COMPRESSION	fs/ext3/ext3.h	782;"	d
EXT3_FEATURE_INCOMPAT_FILETYPE	fs/ext3/ext3.h	783;"	d
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV	fs/ext3/ext3.h	785;"	d
EXT3_FEATURE_INCOMPAT_META_BG	fs/ext3/ext3.h	786;"	d
EXT3_FEATURE_INCOMPAT_RECOVER	fs/ext3/ext3.h	784;"	d
EXT3_FEATURE_INCOMPAT_SUPP	fs/ext3/ext3.h	789;"	d
EXT3_FEATURE_RO_COMPAT_BTREE_DIR	fs/ext3/ext3.h	780;"	d
EXT3_FEATURE_RO_COMPAT_LARGE_FILE	fs/ext3/ext3.h	779;"	d
EXT3_FEATURE_RO_COMPAT_SPARSE_SUPER	fs/ext3/ext3.h	778;"	d
EXT3_FEATURE_RO_COMPAT_SUPP	fs/ext3/ext3.h	792;"	d
EXT3_FIRST_INO	fs/ext3/ext3.h	88;"	d
EXT3_FL_INHERITED	fs/ext3/ext3.h	160;"	d
EXT3_FL_USER_MODIFIABLE	fs/ext3/ext3.h	157;"	d
EXT3_FL_USER_VISIBLE	fs/ext3/ext3.h	156;"	d
EXT3_FRAGS_PER_BLOCK	fs/ext3/ext3.h	97;"	d
EXT3_FRAG_SIZE	fs/ext3/ext3.h	96;"	d
EXT3_FT_BLKDEV	fs/ext3/ext3.h	849;"	d
EXT3_FT_CHRDEV	fs/ext3/ext3.h	848;"	d
EXT3_FT_DIR	fs/ext3/ext3.h	847;"	d
EXT3_FT_FIFO	fs/ext3/ext3.h	850;"	d
EXT3_FT_MAX	fs/ext3/ext3.h	854;"	d
EXT3_FT_REG_FILE	fs/ext3/ext3.h	846;"	d
EXT3_FT_SOCK	fs/ext3/ext3.h	851;"	d
EXT3_FT_SYMLINK	fs/ext3/ext3.h	852;"	d
EXT3_FT_UNKNOWN	fs/ext3/ext3.h	845;"	d
EXT3_GOOD_OLD_FIRST_INO	fs/ext3/ext3.h	70;"	d
EXT3_GOOD_OLD_INODE_SIZE	fs/ext3/ext3.h	746;"	d
EXT3_GOOD_OLD_REV	fs/ext3/ext3.h	740;"	d
EXT3_HAS_COMPAT_FEATURE	fs/ext3/ext3.h	752;"	d
EXT3_HAS_INCOMPAT_FEATURE	fs/ext3/ext3.h	756;"	d
EXT3_HAS_RO_COMPAT_FEATURE	fs/ext3/ext3.h	754;"	d
EXT3_HTREE_EOF_32BIT	fs/ext3/ext3.h	925;"	d
EXT3_HTREE_EOF_64BIT	fs/ext3/ext3.h	926;"	d
EXT3_I	fs/ext3/ext3.h	/^static inline struct ext3_inode_info *EXT3_I(struct inode *inode)$/;"	f
EXT3_IMAGIC_FL	fs/ext3/ext3.h	149;"	d
EXT3_IMMUTABLE_FL	fs/ext3/ext3.h	138;"	d
EXT3_INDEX_EXTRA_TRANS_BLOCKS	fs/ext3/ext3.h	1169;"	d
EXT3_INDEX_FL	fs/ext3/ext3.h	148;"	d
EXT3_IND_BLOCK	fs/ext3/ext3.h	126;"	d
EXT3_INODES_PER_GROUP	fs/ext3/ext3.h	119;"	d
EXT3_INODE_SIZE	fs/ext3/ext3.h	87;"	d
EXT3_IOC32_GETFLAGS	fs/ext3/ext3.h	227;"	d
EXT3_IOC32_GETRSVSZ	fs/ext3/ext3.h	231;"	d
EXT3_IOC32_GETVERSION	fs/ext3/ext3.h	229;"	d
EXT3_IOC32_GETVERSION_OLD	fs/ext3/ext3.h	237;"	d
EXT3_IOC32_GROUP_EXTEND	fs/ext3/ext3.h	233;"	d
EXT3_IOC32_SETFLAGS	fs/ext3/ext3.h	228;"	d
EXT3_IOC32_SETRSVSZ	fs/ext3/ext3.h	232;"	d
EXT3_IOC32_SETVERSION	fs/ext3/ext3.h	230;"	d
EXT3_IOC32_SETVERSION_OLD	fs/ext3/ext3.h	238;"	d
EXT3_IOC32_WAIT_FOR_READONLY	fs/ext3/ext3.h	235;"	d
EXT3_IOC_GETFLAGS	fs/ext3/ext3.h	210;"	d
EXT3_IOC_GETRSVSZ	fs/ext3/ext3.h	221;"	d
EXT3_IOC_GETVERSION	fs/ext3/ext3.h	212;"	d
EXT3_IOC_GETVERSION_OLD	fs/ext3/ext3.h	216;"	d
EXT3_IOC_GROUP_ADD	fs/ext3/ext3.h	215;"	d
EXT3_IOC_GROUP_EXTEND	fs/ext3/ext3.h	214;"	d
EXT3_IOC_SETFLAGS	fs/ext3/ext3.h	211;"	d
EXT3_IOC_SETRSVSZ	fs/ext3/ext3.h	222;"	d
EXT3_IOC_SETVERSION	fs/ext3/ext3.h	213;"	d
EXT3_IOC_SETVERSION_OLD	fs/ext3/ext3.h	217;"	d
EXT3_IOC_WAIT_FOR_READONLY	fs/ext3/ext3.h	219;"	d
EXT3_JOURNAL	fs/ext3/ext3.h	1119;"	d
EXT3_JOURNAL_DATA_FL	fs/ext3/ext3.h	150;"	d
EXT3_JOURNAL_INO	fs/ext3/ext3.h	67;"	d
EXT3_LINK_MAX	fs/ext3/ext3.h	75;"	d
EXT3_MAXQUOTAS_DEL_BLOCKS	fs/ext3/ext3.h	1188;"	d
EXT3_MAXQUOTAS_INIT_BLOCKS	fs/ext3/ext3.h	1187;"	d
EXT3_MAXQUOTAS_TRANS_BLOCKS	fs/ext3/ext3.h	1186;"	d
EXT3_MAX_BLOCK_SIZE	fs/ext3/ext3.h	81;"	d
EXT3_MAX_FRAG_SIZE	fs/ext3/ext3.h	94;"	d
EXT3_MAX_REC_LEN	fs/ext3/ext3.h	865;"	d
EXT3_MAX_RESERVE_BLOCKS	fs/ext3/ext3.h	42;"	d
EXT3_MAX_SUPP_REV	fs/ext3/ext3.h	744;"	d
EXT3_MAX_TRANS_DATA	fs/ext3/ext3.h	1158;"	d
EXT3_MIN_BLOCK_LOG_SIZE	fs/ext3/ext3.h	82;"	d
EXT3_MIN_BLOCK_SIZE	fs/ext3/ext3.h	80;"	d
EXT3_MIN_FRAG_LOG_SIZE	fs/ext3/ext3.h	95;"	d
EXT3_MIN_FRAG_SIZE	fs/ext3/ext3.h	93;"	d
EXT3_MOUNT_ABORT	fs/ext3/ext3.h	351;"	d
EXT3_MOUNT_BARRIER	fs/ext3/ext3.h	361;"	d
EXT3_MOUNT_CHECK	fs/ext3/ext3.h	342;"	d
EXT3_MOUNT_DATA_ERR_ABORT	fs/ext3/ext3.h	365;"	d
EXT3_MOUNT_DATA_FLAGS	fs/ext3/ext3.h	352;"	d
EXT3_MOUNT_DEBUG	fs/ext3/ext3.h	345;"	d
EXT3_MOUNT_DEFAULT_DATA_MODE	fs/ext3/super.c	41;"	d	file:
EXT3_MOUNT_DEFAULT_DATA_MODE	fs/ext3/super.c	43;"	d	file:
EXT3_MOUNT_ERRORS_CONT	fs/ext3/ext3.h	346;"	d
EXT3_MOUNT_ERRORS_PANIC	fs/ext3/ext3.h	348;"	d
EXT3_MOUNT_ERRORS_RO	fs/ext3/ext3.h	347;"	d
EXT3_MOUNT_GRPID	fs/ext3/ext3.h	344;"	d
EXT3_MOUNT_GRPQUOTA	fs/ext3/ext3.h	364;"	d
EXT3_MOUNT_JOURNAL_DATA	fs/ext3/ext3.h	353;"	d
EXT3_MOUNT_MINIX_DF	fs/ext3/ext3.h	349;"	d
EXT3_MOUNT_NOLOAD	fs/ext3/ext3.h	350;"	d
EXT3_MOUNT_NO_UID32	fs/ext3/ext3.h	357;"	d
EXT3_MOUNT_ORDERED_DATA	fs/ext3/ext3.h	354;"	d
EXT3_MOUNT_POSIX_ACL	fs/ext3/ext3.h	359;"	d
EXT3_MOUNT_QUOTA	fs/ext3/ext3.h	362;"	d
EXT3_MOUNT_RESERVATION	fs/ext3/ext3.h	360;"	d
EXT3_MOUNT_UPDATE_JOURNAL	fs/ext3/ext3.h	356;"	d
EXT3_MOUNT_USRQUOTA	fs/ext3/ext3.h	363;"	d
EXT3_MOUNT_WRITEBACK_DATA	fs/ext3/ext3.h	355;"	d
EXT3_MOUNT_XATTR_USER	fs/ext3/ext3.h	358;"	d
EXT3_NAME_LEN	fs/ext3/ext3.h	818;"	d
EXT3_NDIR_BLOCKS	fs/ext3/ext3.h	125;"	d
EXT3_NOATIME_FL	fs/ext3/ext3.h	141;"	d
EXT3_NOCOMPR_FL	fs/ext3/ext3.h	145;"	d
EXT3_NODUMP_FL	fs/ext3/ext3.h	140;"	d
EXT3_NOTAIL_FL	fs/ext3/ext3.h	151;"	d
EXT3_N_BLOCKS	fs/ext3/ext3.h	129;"	d
EXT3_ORPHAN_FS	fs/ext3/ext3.h	330;"	d
EXT3_OS_FREEBSD	fs/ext3/ext3.h	734;"	d
EXT3_OS_HURD	fs/ext3/ext3.h	732;"	d
EXT3_OS_LINUX	fs/ext3/ext3.h	731;"	d
EXT3_OS_LITES	fs/ext3/ext3.h	735;"	d
EXT3_OS_MASIX	fs/ext3/ext3.h	733;"	d
EXT3_OTHER_FLMASK	fs/ext3/ext3.h	170;"	d
EXT3_QUOTA_DEL_BLOCKS	fs/ext3/ext3.h	1179;"	d
EXT3_QUOTA_DEL_BLOCKS	fs/ext3/ext3.h	1184;"	d
EXT3_QUOTA_INIT_BLOCKS	fs/ext3/ext3.h	1177;"	d
EXT3_QUOTA_INIT_BLOCKS	fs/ext3/ext3.h	1183;"	d
EXT3_QUOTA_TRANS_BLOCKS	fs/ext3/ext3.h	1174;"	d
EXT3_QUOTA_TRANS_BLOCKS	fs/ext3/ext3.h	1182;"	d
EXT3_REG_FLMASK	fs/ext3/ext3.h	167;"	d
EXT3_RESERVED_FL	fs/ext3/ext3.h	154;"	d
EXT3_RESERVE_TRANS_BLOCKS	fs/ext3/ext3.h	1167;"	d
EXT3_RESERVE_WINDOW_NOT_ALLOCATED	fs/ext3/ext3.h	43;"	d
EXT3_RESIZE_INO	fs/ext3/ext3.h	66;"	d
EXT3_ROOT_INO	fs/ext3/ext3.h	63;"	d
EXT3_SB	fs/ext3/ext3.h	/^static inline struct ext3_sb_info * EXT3_SB(struct super_block *sb)$/;"	f
EXT3_SECRM_FL	fs/ext3/ext3.h	134;"	d
EXT3_SET_COMPAT_FEATURE	fs/ext3/ext3.h	758;"	d
EXT3_SET_INCOMPAT_FEATURE	fs/ext3/ext3.h	762;"	d
EXT3_SET_RO_COMPAT_FEATURE	fs/ext3/ext3.h	760;"	d
EXT3_SINGLEDATA_TRANS_BLOCKS	fs/ext3/ext3.h	1128;"	d
EXT3_STATE_FLUSH_ON_CLOSE	fs/ext3/ext3.h	/^	EXT3_STATE_FLUSH_ON_CLOSE,	\/* flush dirty pages on close *\/$/;"	e	enum:__anon39
EXT3_STATE_JDATA	fs/ext3/ext3.h	/^	EXT3_STATE_JDATA,		\/* journaled data exists *\/$/;"	e	enum:__anon39
EXT3_STATE_NEW	fs/ext3/ext3.h	/^	EXT3_STATE_NEW,			\/* inode is newly created *\/$/;"	e	enum:__anon39
EXT3_STATE_XATTR	fs/ext3/ext3.h	/^	EXT3_STATE_XATTR,		\/* has in-inode xattrs *\/$/;"	e	enum:__anon39
EXT3_SYNC_FL	fs/ext3/ext3.h	137;"	d
EXT3_TIND_BLOCK	fs/ext3/ext3.h	128;"	d
EXT3_TOPDIR_FL	fs/ext3/ext3.h	153;"	d
EXT3_UNDEL_DIR_INO	fs/ext3/ext3.h	65;"	d
EXT3_UNRM_FL	fs/ext3/ext3.h	135;"	d
EXT3_VALID_FS	fs/ext3/ext3.h	328;"	d
EXT3_XATTR_INDEX_LUSTRE	fs/ext3/xattr.h	22;"	d
EXT3_XATTR_INDEX_POSIX_ACL_ACCESS	fs/ext3/xattr.h	19;"	d
EXT3_XATTR_INDEX_POSIX_ACL_DEFAULT	fs/ext3/xattr.h	20;"	d
EXT3_XATTR_INDEX_SECURITY	fs/ext3/xattr.h	23;"	d
EXT3_XATTR_INDEX_TRUSTED	fs/ext3/xattr.h	21;"	d
EXT3_XATTR_INDEX_USER	fs/ext3/xattr.h	18;"	d
EXT3_XATTR_LEN	fs/ext3/xattr.h	50;"	d
EXT3_XATTR_MAGIC	fs/ext3/xattr.h	12;"	d
EXT3_XATTR_NEXT	fs/ext3/xattr.h	53;"	d
EXT3_XATTR_PAD	fs/ext3/xattr.h	48;"	d
EXT3_XATTR_PAD_BITS	fs/ext3/xattr.h	47;"	d
EXT3_XATTR_REFCOUNT_MAX	fs/ext3/xattr.h	15;"	d
EXT3_XATTR_ROUND	fs/ext3/xattr.h	49;"	d
EXT3_XATTR_SIZE	fs/ext3/xattr.h	56;"	d
EXT3_XATTR_TRANS_BLOCKS	fs/ext3/ext3.h	1134;"	d
EXTENTSIZE	mm/scm.h	18;"	d
EXTENT_SHIFT	mm/scm.h	19;"	d
EXTRA_FIELD	fs/binfmt_flat.c	175;"	d	file:
Enabled	fs/binfmt_misc.c	/^enum {Enabled, Magic};$/;"	e	enum:__anon24	file:
FAILED	mm/memory-failure.c	/^	FAILED,		\/* Error: handling failed *\/$/;"	e	enum:outcome	file:
FDS_EX	fs/select.c	336;"	d	file:
FDS_IN	fs/select.c	334;"	d	file:
FDS_OUT	fs/select.c	335;"	d	file:
FIEMAP_MAX_EXTENTS	fs/ioctl.c	22;"	d	file:
FILE_CPULIST	kernel/cpuset.c	/^	FILE_CPULIST,$/;"	e	enum:__anon57	file:
FILE_CPU_EXCLUSIVE	kernel/cpuset.c	/^	FILE_CPU_EXCLUSIVE,$/;"	e	enum:__anon57	file:
FILE_MEMLIST	kernel/cpuset.c	/^	FILE_MEMLIST,$/;"	e	enum:__anon57	file:
FILE_MEMORY_MIGRATE	kernel/cpuset.c	/^	FILE_MEMORY_MIGRATE,$/;"	e	enum:__anon57	file:
FILE_MEMORY_PRESSURE	kernel/cpuset.c	/^	FILE_MEMORY_PRESSURE,$/;"	e	enum:__anon57	file:
FILE_MEMORY_PRESSURE_ENABLED	kernel/cpuset.c	/^	FILE_MEMORY_PRESSURE_ENABLED,$/;"	e	enum:__anon57	file:
FILE_MEM_EXCLUSIVE	kernel/cpuset.c	/^	FILE_MEM_EXCLUSIVE,$/;"	e	enum:__anon57	file:
FILE_MEM_HARDWALL	kernel/cpuset.c	/^	FILE_MEM_HARDWALL,$/;"	e	enum:__anon57	file:
FILE_SCHED_LOAD_BALANCE	kernel/cpuset.c	/^	FILE_SCHED_LOAD_BALANCE,$/;"	e	enum:__anon57	file:
FILE_SCHED_RELAX_DOMAIN_LEVEL	kernel/cpuset.c	/^	FILE_SCHED_RELAX_DOMAIN_LEVEL,$/;"	e	enum:__anon57	file:
FILE_SPREAD_PAGE	kernel/cpuset.c	/^	FILE_SPREAD_PAGE,$/;"	e	enum:__anon57	file:
FILE_SPREAD_SLAB	kernel/cpuset.c	/^	FILE_SPREAD_SLAB,$/;"	e	enum:__anon57	file:
FILTER	fs/binfmt_elf.c	1125;"	d	file:
FILTER	fs/binfmt_elf.c	1198;"	d	file:
FLAGS_CLOCKRT	kernel/futex.c	78;"	d	file:
FLAGS_HAS_TIMEOUT	kernel/futex.c	79;"	d	file:
FLAGS_SHARED	kernel/futex.c	77;"	d	file:
FLAT_DATA_ALIGN	fs/binfmt_flat.c	63;"	d	file:
FLAT_STACK_ALIGN	fs/binfmt_flat.c	70;"	d	file:
FLUSHING_CACHED_CHARGE	mm/memcontrol.c	2237;"	d	file:
FM_COEF	kernel/cpuset.c	1323;"	d	file:
FM_MAXCNT	kernel/cpuset.c	1325;"	d	file:
FM_MAXTICKS	kernel/cpuset.c	1324;"	d	file:
FM_SCALE	kernel/cpuset.c	1326;"	d	file:
FNV32_OFFSET	kernel/sysctl_binary.c	1376;"	d	file:
FNV32_PRIME	kernel/sysctl_binary.c	1377;"	d	file:
FORCED_DEBUG	mm/slab.c	145;"	d	file:
FORCED_DEBUG	mm/slab.c	149;"	d	file:
FRACTION_OF_NODE_MEM	mm/quicklist.c	24;"	d	file:
FS_IOC_RESVSP64_32	fs/compat_ioctl.c	787;"	d	file:
FS_IOC_RESVSP_32	fs/compat_ioctl.c	786;"	d	file:
FULL	mm/slab.h	/^	FULL			\/* Everything is working *\/$/;"	e	enum:slab_state
FULLSTOP_DONTSTOP	kernel/rcutorture.c	237;"	d	file:
FULLSTOP_RMMOD	kernel/rcutorture.c	239;"	d	file:
FULLSTOP_SHUTDOWN	kernel/rcutorture.c	238;"	d	file:
FUTEX_HASHBITS	kernel/futex.c	71;"	d	file:
GET_ENDIAN	kernel/sys.c	79;"	d	file:
GET_FPEMU_CTL	kernel/sys.c	70;"	d	file:
GET_FPEXC_CTL	kernel/sys.c	76;"	d	file:
GET_TSC_CTL	kernel/sys.c	85;"	d	file:
GET_UNALIGN_CTL	kernel/sys.c	64;"	d	file:
GFP_VMALLOC32	mm/vmalloc.c	1864;"	d	file:
GFP_VMALLOC32	mm/vmalloc.c	1866;"	d	file:
GFP_VMALLOC32	mm/vmalloc.c	1868;"	d	file:
GLOBAL	kernel/modsign_certificate.S	/^#define GLOBAL(name)	\\$/;"	d
HALF_LONG_BITS	fs/read_write.c	848;"	d	file:
HARDIRQ_VERBOSE	kernel/lockdep.c	339;"	d	file:
HARDIRQ_VERBOSE	kernel/lockdep.c	343;"	d	file:
HARDIRQ_verbose	kernel/lockdep.c	/^static int HARDIRQ_verbose(struct lock_class *class)$/;"	f	file:
HASH_NB_ALWAYS	fs/ext3/ext3.h	932;"	d
HASH_SHIFT	fs/namespace.c	28;"	d	file:
HASH_SIZE	fs/namespace.c	29;"	d	file:
HASH_SIZE	kernel/audit_tree.c	/^enum {HASH_SIZE = 128};$/;"	e	enum:__anon52	file:
HAVE_PTE_SPECIAL	mm/memory.c	785;"	d	file:
HAVE_PTE_SPECIAL	mm/memory.c	787;"	d	file:
HCIUARTGETDEVICE	fs/compat_ioctl.c	566;"	d	file:
HCIUARTGETFLAGS	fs/compat_ioctl.c	568;"	d	file:
HCIUARTGETPROTO	fs/compat_ioctl.c	565;"	d	file:
HCIUARTSETFLAGS	fs/compat_ioctl.c	567;"	d	file:
HCIUARTSETPROTO	fs/compat_ioctl.c	564;"	d	file:
HEX_ASCII	mm/kmemleak.c	177;"	d	file:
HEX_GROUP_SIZE	mm/kmemleak.c	175;"	d	file:
HEX_MAX_LINES	mm/kmemleak.c	179;"	d	file:
HEX_ROW_SIZE	mm/kmemleak.c	173;"	d	file:
HIDPCONNADD	fs/compat_ioctl.c	580;"	d	file:
HIDPCONNDEL	fs/compat_ioctl.c	581;"	d	file:
HIDPGETCONNINFO	fs/compat_ioctl.c	583;"	d	file:
HIDPGETCONNLIST	fs/compat_ioctl.c	582;"	d	file:
HIGHPRI_NICE_LEVEL	kernel/workqueue.c	/^	HIGHPRI_NICE_LEVEL	= -20,$/;"	e	enum:__anon65	file:
HLIST_HEAD	include/linux/list.h	568;"	d
HLIST_HEAD_INIT	include/linux/list.h	567;"	d
HOTPLUGERROR	mm/scm.h	24;"	d
HPAGE_RESV_MASK	mm/hugetlb.c	346;"	d	file:
HPAGE_RESV_OWNER	mm/hugetlb.c	344;"	d	file:
HPAGE_RESV_UNMAPPED	mm/hugetlb.c	345;"	d	file:
HP_THREAD_ACTIVE	kernel/smpboot.c	/^	HP_THREAD_ACTIVE,$/;"	e	enum:__anon62	file:
HP_THREAD_NONE	kernel/smpboot.c	/^	HP_THREAD_NONE = 0,$/;"	e	enum:__anon62	file:
HP_THREAD_PARKED	kernel/smpboot.c	/^	HP_THREAD_PARKED,$/;"	e	enum:__anon62	file:
HSTATE_ATTR	mm/hugetlb.c	1463;"	d	file:
HSTATE_ATTR_RO	mm/hugetlb.c	1460;"	d	file:
HUNG_TASK_BATCHING	kernel/hung_task.c	31;"	d	file:
HZ_TO_MSEC_ADJ32	kernel/timeconst.h	15;"	d
HZ_TO_MSEC_DEN	kernel/timeconst.h	21;"	d
HZ_TO_MSEC_MUL32	kernel/timeconst.h	14;"	d
HZ_TO_MSEC_NUM	kernel/timeconst.h	20;"	d
HZ_TO_MSEC_SHR32	kernel/timeconst.h	16;"	d
HZ_TO_USEC_ADJ32	kernel/timeconst.h	26;"	d
HZ_TO_USEC_DEN	kernel/timeconst.h	32;"	d
HZ_TO_USEC_MUL32	kernel/timeconst.h	25;"	d
HZ_TO_USEC_NUM	kernel/timeconst.h	31;"	d
HZ_TO_USEC_SHR32	kernel/timeconst.h	27;"	d
IDLE_WORKER_TIMEOUT	kernel/workqueue.c	/^	IDLE_WORKER_TIMEOUT	= 300 * HZ,	\/* keep idle ones for 5 mins *\/$/;"	e	enum:__anon65	file:
ID_STR_LENGTH	mm/slub.c	5227;"	d	file:
IFIRST	fs/ext3/xattr.c	69;"	d	file:
IGNORED	mm/memory-failure.c	/^	IGNORED,	\/* Error: cannot be handled *\/$/;"	e	enum:outcome	file:
IGNORE_IOCTL	fs/compat_ioctl.c	822;"	d	file:
IHDR	fs/ext3/xattr.c	64;"	d	file:
INC_CACHE_INFO	mm/swap_state.c	47;"	d	file:
INDEX	kernel/timer.c	1132;"	d	file:
INDEX_AC	mm/slab.c	347;"	d	file:
INDEX_L3	mm/slab.c	348;"	d	file:
INIT_BW	mm/backing-dev.c	631;"	d	file:
INIT_HLIST_HEAD	include/linux/list.h	569;"	d
INIT_HLIST_NODE	include/linux/list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	include/linux/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INIT_MM_CONTEXT	mm/init-mm.c	13;"	d	file:
INIT_OFFSET_MASK	kernel/module.c	95;"	d	file:
INIT_STRUCT_STAT64_PADDING	fs/stat.c	341;"	d	file:
INIT_STRUCT_STAT_PADDING	fs/stat.c	207;"	d	file:
INTERPRETER_ELF	fs/binfmt_elf.c	544;"	d	file:
INTERPRETER_NONE	fs/binfmt_elf.c	543;"	d	file:
IS	fs/bio-integrity.c	36;"	d	file:
IS	fs/bio-integrity.c	40;"	d	file:
ISA_POOL_SIZE	mm/bounce.c	23;"	d	file:
ISOLATE_ABORT	mm/compaction.c	/^	ISOLATE_ABORT,		\/* Abort compaction now *\/$/;"	e	enum:__anon1	file:
ISOLATE_NONE	mm/compaction.c	/^	ISOLATE_NONE,		\/* No pages isolated, continue scanning *\/$/;"	e	enum:__anon1	file:
ISOLATE_SUCCESS	mm/compaction.c	/^	ISOLATE_SUCCESS,	\/* Pages isolated, migrate *\/$/;"	e	enum:__anon1	file:
IS_FLOCK	fs/locks.c	133;"	d	file:
IS_LAST_ENTRY	fs/ext3/xattr.c	62;"	d	file:
IS_LEASE	fs/locks.c	134;"	d	file:
IS_MNT_NEW	fs/pnode.h	16;"	d
IS_MNT_SHARED	fs/pnode.h	14;"	d
IS_MNT_SLAVE	fs/pnode.h	15;"	d
IS_MNT_UNBINDABLE	fs/pnode.h	18;"	d
IS_POSIX	fs/locks.c	132;"	d	file:
IS_SUBSYS_ENABLED	kernel/cgroup.c	96;"	d	file:
IT_ID_NOT_SET	kernel/posix-timers.c	502;"	d	file:
IT_ID_SET	kernel/posix-timers.c	501;"	d	file:
I_BDEV	fs/block_dev.c	/^EXPORT_SYMBOL(I_BDEV);$/;"	v
I_BDEV	fs/block_dev.c	/^inline struct block_device *I_BDEV(struct inode *inode)$/;"	f
Indirect	fs/ext3/inode.c	/^} Indirect;$/;"	t	typeref:struct:__anon40	file:
K	mm/backing-dev.c	114;"	d	file:
K	mm/backing-dev.c	173;"	d	file:
K	mm/backing-dev.c	87;"	d	file:
K	mm/memcontrol.c	1541;"	d	file:
K	mm/oom_kill.c	397;"	d	file:
K	mm/oom_kill.c	508;"	d	file:
K	mm/page_alloc.c	2940;"	d	file:
KB	kernel/tsacct.c	121;"	d	file:
KB	kernel/tsacct.c	87;"	d	file:
KB_MASK	kernel/tsacct.c	89;"	d	file:
KERNEL_ATTR_RO	kernel/ksysfs.c	22;"	d	file:
KERNEL_ATTR_RW	kernel/ksysfs.c	25;"	d	file:
KERNEL_TIMECONST_H	kernel/timeconst.h	5;"	d
KIMAGE_NO_DEST	kernel/kexec.c	115;"	d	file:
KIOCB_BATCH_SIZE	fs/aio.c	439;"	d	file:
KMEMLEAK_ALLOC	mm/kmemleak.c	/^	KMEMLEAK_ALLOC,$/;"	e	enum:__anon3	file:
KMEMLEAK_ALLOC_PERCPU	mm/kmemleak.c	/^	KMEMLEAK_ALLOC_PERCPU,$/;"	e	enum:__anon3	file:
KMEMLEAK_BLACK	mm/kmemleak.c	129;"	d	file:
KMEMLEAK_FREE	mm/kmemleak.c	/^	KMEMLEAK_FREE,$/;"	e	enum:__anon3	file:
KMEMLEAK_FREE_PART	mm/kmemleak.c	/^	KMEMLEAK_FREE_PART,$/;"	e	enum:__anon3	file:
KMEMLEAK_FREE_PERCPU	mm/kmemleak.c	/^	KMEMLEAK_FREE_PERCPU,$/;"	e	enum:__anon3	file:
KMEMLEAK_GREY	mm/kmemleak.c	128;"	d	file:
KMEMLEAK_IGNORE	mm/kmemleak.c	/^	KMEMLEAK_IGNORE,$/;"	e	enum:__anon3	file:
KMEMLEAK_NOT_LEAK	mm/kmemleak.c	/^	KMEMLEAK_NOT_LEAK,$/;"	e	enum:__anon3	file:
KMEMLEAK_NO_SCAN	mm/kmemleak.c	/^	KMEMLEAK_NO_SCAN$/;"	e	enum:__anon3	file:
KMEMLEAK_SCAN_AREA	mm/kmemleak.c	/^	KMEMLEAK_SCAN_AREA,$/;"	e	enum:__anon3	file:
KMEM_ACCOUNTED_ACTIVATED	mm/memcontrol.c	/^	KMEM_ACCOUNTED_ACTIVATED, \/* static key enabled. *\/$/;"	e	enum:__anon10	file:
KMEM_ACCOUNTED_ACTIVE	mm/memcontrol.c	/^	KMEM_ACCOUNTED_ACTIVE = 0, \/* accounted by this cgroup itself *\/$/;"	e	enum:__anon10	file:
KMEM_ACCOUNTED_DEAD	mm/memcontrol.c	/^	KMEM_ACCOUNTED_DEAD, \/* dead memcg with pending kmem charges *\/$/;"	e	enum:__anon10	file:
KMEM_ACCOUNTED_MASK	mm/memcontrol.c	380;"	d	file:
KPROBE_HASH_BITS	kernel/kprobes.c	57;"	d	file:
KPROBE_INSN_PAGE_SIZE	kernel/kprobes.c	120;"	d	file:
KPROBE_TABLE_SIZE	kernel/kprobes.c	58;"	d	file:
KSM_ATTR	mm/ksm.c	2180;"	d	file:
KSM_ATTR_RO	mm/ksm.c	2178;"	d	file:
KSM_KMEM_CACHE	mm/ksm.c	246;"	d	file:
KSM_RUN_MERGE	mm/ksm.c	236;"	d	file:
KSM_RUN_OFFLINE	mm/ksm.c	238;"	d	file:
KSM_RUN_STOP	mm/ksm.c	235;"	d	file:
KSM_RUN_UNMERGE	mm/ksm.c	237;"	d	file:
KTHREAD_BITS	kernel/kthread.c	/^enum KTHREAD_BITS {$/;"	g	file:
KTHREAD_IS_PARKED	kernel/kthread.c	/^	KTHREAD_IS_PARKED,$/;"	e	enum:KTHREAD_BITS	file:
KTHREAD_IS_PER_CPU	kernel/kthread.c	/^	KTHREAD_IS_PER_CPU = 0,$/;"	e	enum:KTHREAD_BITS	file:
KTHREAD_SHOULD_PARK	kernel/kthread.c	/^	KTHREAD_SHOULD_PARK,$/;"	e	enum:KTHREAD_BITS	file:
KTHREAD_SHOULD_STOP	kernel/kthread.c	/^	KTHREAD_SHOULD_STOP,$/;"	e	enum:KTHREAD_BITS	file:
LAST_INO_BATCH	fs/inode.c	871;"	d	file:
LATENCY_LIMIT	mm/mremap.c	143;"	d	file:
LATENCY_LIMIT	mm/swapfile.c	185;"	d	file:
LBUFSIZE	fs/binfmt_flat.c	170;"	d	file:
LIST_HEAD	include/linux/list.h	21;"	d
LIST_HEAD_INIT	include/linux/list.h	19;"	d
LOCKDEP_STATE	kernel/lockdep.c	1581;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1584;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1588;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1591;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1653;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1657;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2425;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2428;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2493;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2495;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2910;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2916;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	459;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	461;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	494;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	498;"	d	file:
LOCKDEP_STATE	kernel/lockdep_internals.h	13;"	d
LOCKDEP_STATE	kernel/lockdep_internals.h	19;"	d
LOCKDEP_STATE	kernel/lockdep_internals.h	30;"	d
LOCKDEP_STATE	kernel/lockdep_internals.h	36;"	d
LOCKF_ENABLED_IRQ	kernel/lockdep_internals.h	40;"	d
LOCKF_ENABLED_IRQ_READ	kernel/lockdep_internals.h	43;"	d
LOCKF_USED_IN_IRQ	kernel/lockdep_internals.h	41;"	d
LOCKF_USED_IN_IRQ_READ	kernel/lockdep_internals.h	45;"	d
LOCK_SECTION_END	include/linux/spinlock.h	73;"	d
LOCK_SECTION_NAME	include/linux/spinlock.h	64;"	d
LOCK_SECTION_START	include/linux/spinlock.h	66;"	d
LOCK_USAGE_CHARS	kernel/lockdep_internals.h	73;"	d
LOCK_USAGE_STATES	kernel/lockdep_internals.h	/^	LOCK_USAGE_STATES$/;"	e	enum:lock_usage_bit
LOCK_USED	kernel/lockdep_internals.h	/^	LOCK_USED,$/;"	e	enum:lock_usage_bit
LOG_ALIGN	kernel/printk.c	254;"	d	file:
LOG_ALIGN	kernel/printk.c	256;"	d	file:
LOG_CONT	kernel/printk.c	/^	LOG_CONT	= 8,	\/* text is a fragment of a continuation line *\/$/;"	e	enum:log_flags	file:
LOG_LINE_MAX	kernel/printk.c	1699;"	d	file:
LOG_LINE_MAX	kernel/printk.c	1701;"	d	file:
LOG_LINE_MAX	kernel/printk.c	250;"	d	file:
LOG_NEWLINE	kernel/printk.c	/^	LOG_NEWLINE	= 2,	\/* text ended with a newline *\/$/;"	e	enum:log_flags	file:
LOG_NOCONS	kernel/printk.c	/^	LOG_NOCONS	= 1,	\/* already flushed, do not print to console *\/$/;"	e	enum:log_flags	file:
LOG_PREFIX	kernel/printk.c	/^	LOG_PREFIX	= 4,	\/* text started with a prefix *\/$/;"	e	enum:log_flags	file:
LONG_ALIGN	mm/page_alloc.c	3800;"	d	file:
MAGIC_END	kernel/configs.c	47;"	d	file:
MAGIC_SIZE	kernel/configs.c	51;"	d	file:
MAGIC_START	kernel/configs.c	46;"	d	file:
MAKE_ALL_LISTS	mm/slab.c	369;"	d	file:
MAKE_LIST	mm/slab.c	363;"	d	file:
MANTSIZE	kernel/acct.c	348;"	d	file:
MANTSIZE2	kernel/acct.c	389;"	d	file:
MASK_DECLARE_1	kernel/cpu.c	652;"	d	file:
MASK_DECLARE_2	kernel/cpu.c	653;"	d	file:
MASK_DECLARE_4	kernel/cpu.c	654;"	d	file:
MASK_DECLARE_8	kernel/cpu.c	655;"	d	file:
MAXEXP2	kernel/acct.c	392;"	d	file:
MAXFRACT	kernel/acct.c	350;"	d	file:
MAXFRACT2	kernel/acct.c	391;"	d	file:
MAXLR	kernel/latencytop.c	63;"	d	file:
MAXRESERVE	kernel/resource.c	1079;"	d	file:
MAXUSERS	mm/scm.h	20;"	d
MAXVIRTBLOCKS	mm/scm.h	29;"	d
MAX_AIO_SUBMITS	fs/compat.c	620;"	d	file:
MAX_CGROUP_ROOT_NAMELEN	kernel/cgroup.c	101;"	d	file:
MAX_CIRCULAR_QUEUE_SIZE	kernel/lockdep.c	879;"	d	file:
MAX_CMDLINECONSOLES	kernel/printk.c	123;"	d	file:
MAX_DEADLK_ITERATIONS	fs/locks.c	672;"	d	file:
MAX_EXECVE_AUDIT_LEN	kernel/auditsc.c	85;"	d	file:
MAX_FILE_NOTE_SIZE	fs/binfmt_elf.c	1402;"	d	file:
MAX_IDLE_WORKERS_RATIO	kernel/workqueue.c	/^	MAX_IDLE_WORKERS_RATIO	= 4,		\/* 1\/4 of busy can be idle *\/$/;"	e	enum:__anon65	file:
MAX_INSNS_PER_PATH	kernel/seccomp.c	62;"	d	file:
MAX_IORES_LEVEL	kernel/resource.c	/^enum { MAX_IORES_LEVEL = 5 };$/;"	e	enum:__anon61	file:
MAX_KMOD_CONCURRENT	kernel/kmod.c	131;"	d	file:
MAX_LOCKDEP_CHAINS	kernel/lockdep_internals.h	60;"	d
MAX_LOCKDEP_CHAINS_BITS	kernel/lockdep_internals.h	59;"	d
MAX_LOCKDEP_CHAIN_HLOCKS	kernel/lockdep_internals.h	62;"	d
MAX_LOCKDEP_ENTRIES	kernel/lockdep_internals.h	57;"	d
MAX_MEMBLOCKS	mm/scm.c	44;"	d	file:
MAX_MEMBLOCKS_RND	mm/scm.c	43;"	d	file:
MAX_NODE_LOAD	mm/page_alloc.c	3272;"	d	file:
MAX_OBJS_PER_PAGE	mm/slub.c	174;"	d	file:
MAX_OBJ_NUM	kernel/padata.c	34;"	d	file:
MAX_PARTIAL	mm/slub.c	150;"	d	file:
MAX_PAUSE	mm/page-writeback.c	44;"	d	file:
MAX_PID_NS_LEVEL	kernel/pid_namespace.c	82;"	d	file:
MAX_RCU_LVLS	kernel/rcutree.h	38;"	d
MAX_RT_TEST_MUTEXES	kernel/rtmutex-tester.c	21;"	d	file:
MAX_RT_TEST_THREADS	kernel/rtmutex-tester.c	20;"	d	file:
MAX_SCAN_SIZE	mm/kmemleak.c	112;"	d	file:
MAX_SLABINFO_WRITE	mm/slab.c	4379;"	d	file:
MAX_SLACK	fs/select.c	46;"	d	file:
MAX_SOFTIRQ_TIME	kernel/softirq.c	206;"	d	file:
MAX_STACK_TRACE_ENTRIES	kernel/lockdep_internals.h	68;"	d
MAX_TASKS_SHOWN_PER_CSS	kernel/cgroup.c	5559;"	d	file:
MAX_TRACE	mm/kmemleak.c	108;"	d	file:
MAX_TVAL	kernel/timer.c	67;"	d	file:
MAX_WORK	kernel/async.c	64;"	d	file:
MAYDAY_INITIAL_TIMEOUT	kernel/workqueue.c	/^	MAYDAY_INITIAL_TIMEOUT  = HZ \/ 100 >= 2 ? HZ \/ 100 : 2,$/;"	e	enum:__anon65	file:
MAYDAY_INTERVAL	kernel/workqueue.c	/^	MAYDAY_INTERVAL		= HZ \/ 10,	\/* and then every 100ms *\/$/;"	e	enum:__anon65	file:
MB	kernel/tsacct.c	122;"	d	file:
MB	kernel/tsacct.c	88;"	d	file:
MB_CACHE_WRITER	fs/mbcache.c	58;"	d	file:
MC_TARGET_NONE	mm/memcontrol.c	/^	MC_TARGET_NONE = 0,$/;"	e	enum:mc_target_type	file:
MC_TARGET_PAGE	mm/memcontrol.c	/^	MC_TARGET_PAGE,$/;"	e	enum:mc_target_type	file:
MC_TARGET_SWAP	mm/memcontrol.c	/^	MC_TARGET_SWAP,$/;"	e	enum:mc_target_type	file:
MEMBLOCKS_BMAPSZ	mm/scm.c	42;"	d	file:
MEMCG_CACHES_MAX_SIZE	mm/memcontrol.c	614;"	d	file:
MEMCG_CACHES_MIN_SIZE	mm/memcontrol.c	613;"	d	file:
MEMFILE_ATTR	mm/hugetlb_cgroup.c	31;"	d	file:
MEMFILE_ATTR	mm/memcontrol.c	479;"	d	file:
MEMFILE_IDX	mm/hugetlb_cgroup.c	30;"	d	file:
MEMFILE_PRIVATE	mm/hugetlb_cgroup.c	29;"	d	file:
MEMFILE_PRIVATE	mm/memcontrol.c	477;"	d	file:
MEMFILE_TYPE	mm/memcontrol.c	478;"	d	file:
MEMORY_FAILURE_FIFO_ORDER	mm/memory-failure.c	1218;"	d	file:
MEMORY_FAILURE_FIFO_SIZE	mm/memory-failure.c	1219;"	d	file:
MEM_CGROUP_CHARGE_TYPE_ANON	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_ANON,$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_CACHE	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_CACHE = 0,$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_DROP	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_DROP,	\/* a page was unused swap cache *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_SWAPOUT	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_SWAPOUT,	\/* for accounting swapcache *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_EVENTS_NSTATS	mm/memcontrol.c	/^	MEM_CGROUP_EVENTS_NSTATS,$/;"	e	enum:mem_cgroup_events_index	file:
MEM_CGROUP_EVENTS_PGFAULT	mm/memcontrol.c	/^	MEM_CGROUP_EVENTS_PGFAULT,	\/* # of page-faults *\/$/;"	e	enum:mem_cgroup_events_index	file:
MEM_CGROUP_EVENTS_PGMAJFAULT	mm/memcontrol.c	/^	MEM_CGROUP_EVENTS_PGMAJFAULT,	\/* # of major page-faults *\/$/;"	e	enum:mem_cgroup_events_index	file:
MEM_CGROUP_EVENTS_PGPGIN	mm/memcontrol.c	/^	MEM_CGROUP_EVENTS_PGPGIN,	\/* # of pages paged in *\/$/;"	e	enum:mem_cgroup_events_index	file:
MEM_CGROUP_EVENTS_PGPGOUT	mm/memcontrol.c	/^	MEM_CGROUP_EVENTS_PGPGOUT,	\/* # of pages paged out *\/$/;"	e	enum:mem_cgroup_events_index	file:
MEM_CGROUP_MAX_RECLAIM_LOOPS	mm/memcontrol.c	458;"	d	file:
MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS	mm/memcontrol.c	459;"	d	file:
MEM_CGROUP_NTARGETS	mm/memcontrol.c	/^	MEM_CGROUP_NTARGETS,$/;"	e	enum:mem_cgroup_events_target	file:
MEM_CGROUP_RECLAIM_NOSWAP	mm/memcontrol.c	487;"	d	file:
MEM_CGROUP_RECLAIM_NOSWAP_BIT	mm/memcontrol.c	486;"	d	file:
MEM_CGROUP_RECLAIM_RETRIES	mm/memcontrol.c	68;"	d	file:
MEM_CGROUP_RECLAIM_SHRINK	mm/memcontrol.c	489;"	d	file:
MEM_CGROUP_RECLAIM_SHRINK_BIT	mm/memcontrol.c	488;"	d	file:
MEM_CGROUP_STAT_CACHE	mm/memcontrol.c	/^	MEM_CGROUP_STAT_CACHE, 	   \/* # of pages charged as cache *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_FILE_MAPPED	mm/memcontrol.c	/^	MEM_CGROUP_STAT_FILE_MAPPED,  \/* # of pages charged as file rss *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_NSTATS	mm/memcontrol.c	/^	MEM_CGROUP_STAT_NSTATS,$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_RSS	mm/memcontrol.c	/^	MEM_CGROUP_STAT_RSS,	   \/* # of pages charged as anon rss *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_SWAP	mm/memcontrol.c	/^	MEM_CGROUP_STAT_SWAP, \/* # of pages, swapped out *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_TARGET_NUMAINFO	mm/memcontrol.c	/^	MEM_CGROUP_TARGET_NUMAINFO,$/;"	e	enum:mem_cgroup_events_target	file:
MEM_CGROUP_TARGET_SOFTLIMIT	mm/memcontrol.c	/^	MEM_CGROUP_TARGET_SOFTLIMIT,$/;"	e	enum:mem_cgroup_events_target	file:
MEM_CGROUP_TARGET_THRESH	mm/memcontrol.c	/^	MEM_CGROUP_TARGET_THRESH,$/;"	e	enum:mem_cgroup_events_target	file:
MINIMUM_CONSOLE_LOGLEVEL	kernel/printk.c	63;"	d	file:
MIN_PARTIAL	mm/slub.c	143;"	d	file:
MIN_WRITEBACK_PAGES	fs/fs-writeback.c	35;"	d	file:
MISC_FMT_CREDENTIALS	fs/binfmt_misc.c	45;"	d	file:
MISC_FMT_OPEN_BINARY	fs/binfmt_misc.c	44;"	d	file:
MISC_FMT_PRESERVE_ARGV0	fs/binfmt_misc.c	43;"	d	file:
MMAP_LOTSAMISS	mm/filemap.c	1509;"	d	file:
MMINIT_TRACE	mm/internal.h	/^	MMINIT_TRACE$/;"	e	enum:mminit_level
MMINIT_VERIFY	mm/internal.h	/^	MMINIT_VERIFY,$/;"	e	enum:mminit_level
MMINIT_WARNING	mm/internal.h	/^	MMINIT_WARNING,$/;"	e	enum:mminit_level
MM_SLAB_H	mm/slab.h	2;"	d
MM_SLOTS_HASH_BITS	mm/huge_memory.c	68;"	d	file:
MM_SLOTS_HASH_BITS	mm/ksm.c	194;"	d	file:
MNT_NS_INTERNAL	fs/mount.h	54;"	d
MNT_WRITER_UNDERFLOW_LIMIT	fs/namespace.c	64;"	d	file:
MODINFO_ATTR	kernel/module.c	591;"	d	file:
MOD_NUMBER_OF_PAGES	kernel/module.c	89;"	d	file:
MOVE_CHARGE_TYPE_ANON	mm/memcontrol.c	/^	MOVE_CHARGE_TYPE_ANON,	\/* private anonymous page and swap of it *\/$/;"	e	enum:move_type	file:
MOVE_CHARGE_TYPE_FILE	mm/memcontrol.c	/^	MOVE_CHARGE_TYPE_FILE,	\/* file page(including tmpfs) and swap of it *\/$/;"	e	enum:move_type	file:
MPOL_MF_DISCONTIG_OK	mm/mempolicy.c	102;"	d	file:
MPOL_MF_INVERT	mm/mempolicy.c	103;"	d	file:
MSECS_MIN_AGE	mm/kmemleak.c	109;"	d	file:
MSEC_TO_HZ_ADJ32	kernel/timeconst.h	18;"	d
MSEC_TO_HZ_DEN	kernel/timeconst.h	23;"	d
MSEC_TO_HZ_MUL32	kernel/timeconst.h	17;"	d
MSEC_TO_HZ_NUM	kernel/timeconst.h	22;"	d
MSEC_TO_HZ_SHR32	kernel/timeconst.h	19;"	d
MTIOCGET32	fs/compat_ioctl.c	509;"	d	file:
MTIOCPOS32	fs/compat_ioctl.c	514;"	d	file:
Magic	fs/binfmt_misc.c	/^enum {Enabled, Magic};$/;"	e	enum:__anon24	file:
NAMEI_RA_BLOCKS	fs/ext3/namei.c	37;"	d	file:
NAMEI_RA_CHUNKS	fs/ext3/namei.c	36;"	d	file:
NAMEI_RA_SIZE	fs/ext3/namei.c	38;"	d	file:
NAME_HASH_SHIFT	fs/ext3/xattr.c	1248;"	d	file:
NAME_HASH_SHIFT	fs/ext3/xattr.c	1282;"	d	file:
NCPFS_NAME	fs/compat.c	772;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf.c	213;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf.c	255;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf_fdpic.c	585;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf_fdpic.c	645;"	d	file:
NEXT_ORPHAN	fs/ext3/ext3.h	726;"	d
NFS4_NAME	fs/compat.c	773;"	d	file:
NOALIGN	mm/scm.c	45;"	d	file:
NORET_AND	fs/ext3/ext3.h	988;"	d
NORET_TYPE	fs/ext3/ext3.h	986;"	d
NOUSERERROR	mm/scm.h	28;"	d
NR_CHARGE_TYPE	mm/memcontrol.c	/^	NR_CHARGE_TYPE,$/;"	e	enum:charge_type	file:
NR_DIRTY_BG_THRESHOLD	mm/vmstat.c	/^	NR_DIRTY_BG_THRESHOLD,$/;"	e	enum:writeback_stat_item	file:
NR_DIRTY_THRESHOLD	mm/vmstat.c	/^	NR_DIRTY_THRESHOLD,$/;"	e	enum:writeback_stat_item	file:
NR_MOVE_TYPE	mm/memcontrol.c	/^	NR_MOVE_TYPE,$/;"	e	enum:move_type	file:
NR_OFFLINE_AT_ONCE_PAGES	mm/memory_hotplug.c	1235;"	d	file:
NR_PROFILE_GRP	kernel/profile.c	38;"	d	file:
NR_PROFILE_HIT	kernel/profile.c	37;"	d	file:
NR_STD_WORKER_POOLS	kernel/workqueue.c	/^	NR_STD_WORKER_POOLS	= 2,		\/* # standard pools per cpu *\/$/;"	e	enum:__anon65	file:
NR_VM_WRITEBACK_STAT_ITEMS	mm/vmstat.c	/^	NR_VM_WRITEBACK_STAT_ITEMS,$/;"	e	enum:writeback_stat_item	file:
NUMA	mm/ksm.c	45;"	d	file:
NUMA	mm/ksm.c	48;"	d	file:
NUMAINFO_EVENTS_TARGET	mm/memcontrol.c	145;"	d	file:
NUMA_ZONELIST_ORDER_LEN	mm/page_alloc.c	3191;"	d	file:
NUM_INIT_LISTS	mm/slab.c	308;"	d	file:
NUM_NOTES	fs/binfmt_elf_fdpic.c	1587;"	d	file:
NUM_NOTES	fs/binfmt_elf_fdpic.c	1862;"	d	file:
NUM_RCU_LVL_0	kernel/rcutree.h	46;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	53;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	60;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	67;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	47;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	54;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	61;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	68;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	48;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	55;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	62;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	69;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	49;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	56;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	63;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	70;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	50;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	57;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	64;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	71;"	d
NUM_RCU_NODES	kernel/rcutree.h	77;"	d
N_STACK_PPS	fs/select.c	814;"	d	file:
Node	fs/binfmt_misc.c	/^} Node;$/;"	t	typeref:struct:__anon25	file:
OBJECT_ALLOCATED	mm/kmemleak.c	166;"	d	file:
OBJECT_NO_SCAN	mm/kmemleak.c	170;"	d	file:
OBJECT_REPORTED	mm/kmemleak.c	168;"	d	file:
OFF_SLAB	mm/slab.c	377;"	d	file:
OOM_CONTROL	mm/memcontrol.c	481;"	d	file:
OO_MASK	mm/slub.c	173;"	d	file:
OO_SHIFT	mm/slub.c	172;"	d	file:
OPTIMIZE_DELAY	kernel/kprobes.c	473;"	d	file:
ORIG_NAME	fs/binfmt_flat.c	176;"	d	file:
Opt_abort	fs/ext3/super.c	/^	Opt_abort, Opt_data_journal, Opt_data_ordered, Opt_data_writeback,$/;"	e	enum:__anon41	file:
Opt_acl	fs/ext3/super.c	/^	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl,$/;"	e	enum:__anon41	file:
Opt_barrier	fs/ext3/super.c	/^	Opt_noquota, Opt_ignore, Opt_barrier, Opt_nobarrier, Opt_err,$/;"	e	enum:__anon41	file:
Opt_bh	fs/ext3/super.c	/^	Opt_reservation, Opt_noreservation, Opt_noload, Opt_nobh, Opt_bh,$/;"	e	enum:__anon41	file:
Opt_bsd_df	fs/ext3/super.c	/^	Opt_bsd_df, Opt_minix_df, Opt_grpid, Opt_nogrpid,$/;"	e	enum:__anon41	file:
Opt_commit	fs/ext3/super.c	/^	Opt_commit, Opt_journal_update, Opt_journal_inum, Opt_journal_dev,$/;"	e	enum:__anon41	file:
Opt_data_err_abort	fs/ext3/super.c	/^	Opt_data_err_abort, Opt_data_err_ignore,$/;"	e	enum:__anon41	file:
Opt_data_err_ignore	fs/ext3/super.c	/^	Opt_data_err_abort, Opt_data_err_ignore,$/;"	e	enum:__anon41	file:
Opt_data_journal	fs/ext3/super.c	/^	Opt_abort, Opt_data_journal, Opt_data_ordered, Opt_data_writeback,$/;"	e	enum:__anon41	file:
Opt_data_ordered	fs/ext3/super.c	/^	Opt_abort, Opt_data_journal, Opt_data_ordered, Opt_data_writeback,$/;"	e	enum:__anon41	file:
Opt_data_writeback	fs/ext3/super.c	/^	Opt_abort, Opt_data_journal, Opt_data_ordered, Opt_data_writeback,$/;"	e	enum:__anon41	file:
Opt_debug	fs/ext3/super.c	/^	Opt_nouid32, Opt_nocheck, Opt_debug, Opt_oldalloc, Opt_orlov,$/;"	e	enum:__anon41	file:
Opt_err	fs/ext3/super.c	/^	Opt_noquota, Opt_ignore, Opt_barrier, Opt_nobarrier, Opt_err,$/;"	e	enum:__anon41	file:
Opt_err_cont	fs/ext3/super.c	/^	Opt_resgid, Opt_resuid, Opt_sb, Opt_err_cont, Opt_err_panic, Opt_err_ro,$/;"	e	enum:__anon41	file:
Opt_err_panic	fs/ext3/super.c	/^	Opt_resgid, Opt_resuid, Opt_sb, Opt_err_cont, Opt_err_panic, Opt_err_ro,$/;"	e	enum:__anon41	file:
Opt_err_ro	fs/ext3/super.c	/^	Opt_resgid, Opt_resuid, Opt_sb, Opt_err_cont, Opt_err_panic, Opt_err_ro,$/;"	e	enum:__anon41	file:
Opt_grpid	fs/ext3/super.c	/^	Opt_bsd_df, Opt_minix_df, Opt_grpid, Opt_nogrpid,$/;"	e	enum:__anon41	file:
Opt_grpjquota	fs/ext3/super.c	/^	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,$/;"	e	enum:__anon41	file:
Opt_grpquota	fs/ext3/super.c	/^	Opt_resize, Opt_usrquota, Opt_grpquota$/;"	e	enum:__anon41	file:
Opt_ignore	fs/ext3/super.c	/^	Opt_noquota, Opt_ignore, Opt_barrier, Opt_nobarrier, Opt_err,$/;"	e	enum:__anon41	file:
Opt_journal_dev	fs/ext3/super.c	/^	Opt_commit, Opt_journal_update, Opt_journal_inum, Opt_journal_dev,$/;"	e	enum:__anon41	file:
Opt_journal_inum	fs/ext3/super.c	/^	Opt_commit, Opt_journal_update, Opt_journal_inum, Opt_journal_dev,$/;"	e	enum:__anon41	file:
Opt_journal_update	fs/ext3/super.c	/^	Opt_commit, Opt_journal_update, Opt_journal_inum, Opt_journal_dev,$/;"	e	enum:__anon41	file:
Opt_jqfmt_vfsold	fs/ext3/super.c	/^	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0, Opt_jqfmt_vfsv1, Opt_quota,$/;"	e	enum:__anon41	file:
Opt_jqfmt_vfsv0	fs/ext3/super.c	/^	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0, Opt_jqfmt_vfsv1, Opt_quota,$/;"	e	enum:__anon41	file:
Opt_jqfmt_vfsv1	fs/ext3/super.c	/^	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0, Opt_jqfmt_vfsv1, Opt_quota,$/;"	e	enum:__anon41	file:
Opt_minix_df	fs/ext3/super.c	/^	Opt_bsd_df, Opt_minix_df, Opt_grpid, Opt_nogrpid,$/;"	e	enum:__anon41	file:
Opt_noacl	fs/ext3/super.c	/^	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl,$/;"	e	enum:__anon41	file:
Opt_nobarrier	fs/ext3/super.c	/^	Opt_noquota, Opt_ignore, Opt_barrier, Opt_nobarrier, Opt_err,$/;"	e	enum:__anon41	file:
Opt_nobh	fs/ext3/super.c	/^	Opt_reservation, Opt_noreservation, Opt_noload, Opt_nobh, Opt_bh,$/;"	e	enum:__anon41	file:
Opt_nocheck	fs/ext3/super.c	/^	Opt_nouid32, Opt_nocheck, Opt_debug, Opt_oldalloc, Opt_orlov,$/;"	e	enum:__anon41	file:
Opt_nogrpid	fs/ext3/super.c	/^	Opt_bsd_df, Opt_minix_df, Opt_grpid, Opt_nogrpid,$/;"	e	enum:__anon41	file:
Opt_noload	fs/ext3/super.c	/^	Opt_reservation, Opt_noreservation, Opt_noload, Opt_nobh, Opt_bh,$/;"	e	enum:__anon41	file:
Opt_noquota	fs/ext3/super.c	/^	Opt_noquota, Opt_ignore, Opt_barrier, Opt_nobarrier, Opt_err,$/;"	e	enum:__anon41	file:
Opt_noreservation	fs/ext3/super.c	/^	Opt_reservation, Opt_noreservation, Opt_noload, Opt_nobh, Opt_bh,$/;"	e	enum:__anon41	file:
Opt_nouid32	fs/ext3/super.c	/^	Opt_nouid32, Opt_nocheck, Opt_debug, Opt_oldalloc, Opt_orlov,$/;"	e	enum:__anon41	file:
Opt_nouser_xattr	fs/ext3/super.c	/^	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl,$/;"	e	enum:__anon41	file:
Opt_offgrpjquota	fs/ext3/super.c	/^	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,$/;"	e	enum:__anon41	file:
Opt_offusrjquota	fs/ext3/super.c	/^	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,$/;"	e	enum:__anon41	file:
Opt_oldalloc	fs/ext3/super.c	/^	Opt_nouid32, Opt_nocheck, Opt_debug, Opt_oldalloc, Opt_orlov,$/;"	e	enum:__anon41	file:
Opt_orlov	fs/ext3/super.c	/^	Opt_nouid32, Opt_nocheck, Opt_debug, Opt_oldalloc, Opt_orlov,$/;"	e	enum:__anon41	file:
Opt_quota	fs/ext3/super.c	/^	Opt_jqfmt_vfsold, Opt_jqfmt_vfsv0, Opt_jqfmt_vfsv1, Opt_quota,$/;"	e	enum:__anon41	file:
Opt_reservation	fs/ext3/super.c	/^	Opt_reservation, Opt_noreservation, Opt_noload, Opt_nobh, Opt_bh,$/;"	e	enum:__anon41	file:
Opt_resgid	fs/ext3/super.c	/^	Opt_resgid, Opt_resuid, Opt_sb, Opt_err_cont, Opt_err_panic, Opt_err_ro,$/;"	e	enum:__anon41	file:
Opt_resize	fs/ext3/super.c	/^	Opt_resize, Opt_usrquota, Opt_grpquota$/;"	e	enum:__anon41	file:
Opt_resuid	fs/ext3/super.c	/^	Opt_resgid, Opt_resuid, Opt_sb, Opt_err_cont, Opt_err_panic, Opt_err_ro,$/;"	e	enum:__anon41	file:
Opt_sb	fs/ext3/super.c	/^	Opt_resgid, Opt_resuid, Opt_sb, Opt_err_cont, Opt_err_panic, Opt_err_ro,$/;"	e	enum:__anon41	file:
Opt_user_xattr	fs/ext3/super.c	/^	Opt_user_xattr, Opt_nouser_xattr, Opt_acl, Opt_noacl,$/;"	e	enum:__anon41	file:
Opt_usrjquota	fs/ext3/super.c	/^	Opt_usrjquota, Opt_grpjquota, Opt_offusrjquota, Opt_offgrpjquota,$/;"	e	enum:__anon41	file:
Opt_usrquota	fs/ext3/super.c	/^	Opt_resize, Opt_usrquota, Opt_grpquota$/;"	e	enum:__anon41	file:
PADATA_ATTR_RO	kernel/padata.c	974;"	d	file:
PADATA_ATTR_RW	kernel/padata.c	971;"	d	file:
PAGEREF_ACTIVATE	mm/vmscan.c	/^	PAGEREF_ACTIVATE,$/;"	e	enum:page_references	file:
PAGEREF_KEEP	mm/vmscan.c	/^	PAGEREF_KEEP,$/;"	e	enum:page_references	file:
PAGEREF_RECLAIM	mm/vmscan.c	/^	PAGEREF_RECLAIM,$/;"	e	enum:page_references	file:
PAGEREF_RECLAIM_CLEAN	mm/vmscan.c	/^	PAGEREF_RECLAIM_CLEAN,$/;"	e	enum:page_references	file:
PAGESIZE	mm/scm.h	17;"	d
PAGES_PER_WAITQUEUE	mm/page_alloc.c	3745;"	d	file:
PAGE_ACTIVATE	mm/vmscan.c	/^	PAGE_ACTIVATE,$/;"	e	enum:__anon21	file:
PAGE_CACHE_ALIGN	include/linux/pagemap.h	98;"	d
PAGE_CACHE_MASK	include/linux/pagemap.h	97;"	d
PAGE_CACHE_SHIFT	include/linux/pagemap.h	95;"	d
PAGE_CACHE_SIZE	include/linux/pagemap.h	96;"	d
PAGE_CLEAN	mm/vmscan.c	/^	PAGE_CLEAN,$/;"	e	enum:__anon21	file:
PAGE_KEEP	mm/vmscan.c	/^	PAGE_KEEP,$/;"	e	enum:__anon21	file:
PAGE_KERNEL_EXEC	mm/nommu.c	370;"	d	file:
PAGE_KERNEL_EXEC	mm/vmalloc.c	1842;"	d	file:
PAGE_SUCCESS	mm/vmscan.c	/^	PAGE_SUCCESS,$/;"	e	enum:__anon21	file:
PANIC_BLINK_SPD	kernel/panic.c	28;"	d	file:
PANIC_TIMER_STEP	kernel/panic.c	27;"	d	file:
PARENT_INO	fs/ext3/namei.c	2331;"	d	file:
PARTIAL	mm/slab.h	/^	PARTIAL,		\/* SLUB: kmem_cache_node available *\/$/;"	e	enum:slab_state
PARTIAL_ARRAYCACHE	mm/slab.h	/^	PARTIAL_ARRAYCACHE,	\/* SLAB: kmalloc size for arraycache available *\/$/;"	e	enum:slab_state
PARTIAL_L3	mm/slab.h	/^	PARTIAL_L3,		\/* SLAB: kmalloc size for l3 struct available *\/$/;"	e	enum:slab_state
PASTE	kernel/modsign_certificate.S	/^#define PASTE(x,y) PASTE2(x,y)$/;"	d
PASTE2	kernel/modsign_certificate.S	/^#define PASTE2(x,y) x##y$/;"	d
PATH_ARR_SIZE	fs/eventpoll.c	1053;"	d	file:
PA_HASH_ORDER	mm/highmem.c	316;"	d	file:
PCGF_NOCOPY_AT_SPLIT	mm/memcontrol.c	3595;"	d	file:
PCPU_DFL_MAP_ALLOC	mm/percpu.c	78;"	d	file:
PCPU_SETUP_BUG_ON	mm/percpu.c	1225;"	d	file:
PCPU_SETUP_BUG_ON	mm/percpu.c	1293;"	d	file:
PCPU_SLOT_BASE_SHIFT	mm/percpu.c	77;"	d	file:
PENDING	kernel/signal.c	127;"	d	file:
PERS_SPACE	mm/scm.h	16;"	d
PERS_START	mm/scm.h	15;"	d
PIDLIST_REALLOC_DIFFERENCE	kernel/cgroup.c	3388;"	d	file:
PIDLIST_TOO_LARGE	kernel/cgroup.c	3350;"	d	file:
PLURAL	fs/ext3/super.c	1548;"	d	file:
POLLEX_SET	fs/select.c	384;"	d	file:
POLLFD_PER_PAGE	fs/select.c	711;"	d	file:
POLLIN_SET	fs/select.c	382;"	d	file:
POLLOUT_SET	fs/select.c	383;"	d	file:
POLL_TABLE_FULL	fs/select.c	99;"	d	file:
POOL_DISASSOCIATED	kernel/workqueue.c	/^	POOL_DISASSOCIATED	= 1 << 2,	\/* cpu can't serve workers *\/$/;"	e	enum:__anon65	file:
POOL_FREEZING	kernel/workqueue.c	/^	POOL_FREEZING		= 1 << 3,	\/* freeze in progress *\/$/;"	e	enum:__anon65	file:
POOL_MANAGE_WORKERS	kernel/workqueue.c	/^	POOL_MANAGE_WORKERS	= 1 << 0,	\/* need to manage workers *\/$/;"	e	enum:__anon65	file:
POOL_MANAGING_WORKERS	kernel/workqueue.c	/^	POOL_MANAGING_WORKERS   = 1 << 1,       \/* managing workers *\/$/;"	e	enum:__anon65	file:
POOL_SIZE	mm/bounce.c	22;"	d	file:
PPPIOCGIDLE32	fs/compat_ioctl.c	453;"	d	file:
PPPIOCSACTIVE32	fs/compat_ioctl.c	414;"	d	file:
PPPIOCSCOMPRESS32	fs/compat_ioctl.c	447;"	d	file:
PPPIOCSPASS32	fs/compat_ioctl.c	413;"	d	file:
PRECHARGE_COUNT_AT_ONCE	mm/memcontrol.c	6206;"	d	file:
PREFIX_MAX	kernel/printk.c	1700;"	d	file:
PREFIX_MAX	kernel/printk.c	249;"	d	file:
PRINTK_BUF_SIZE	kernel/printk.c	2424;"	d	file:
PRINTK_PENDING_SCHED	kernel/printk.c	2427;"	d	file:
PRINTK_PENDING_WAKEUP	kernel/printk.c	2426;"	d	file:
PRINTK_STRING	kernel/rcutorture.c	123;"	d	file:
PROCESS_CLOCK	kernel/posix-cpu-timers.c	1537;"	d	file:
PROFILE_GRPSHIFT	kernel/profile.c	35;"	d	file:
PROFILE_GRPSZ	kernel/profile.c	36;"	d	file:
PRSTATUS_SIZE	fs/binfmt_elf.c	1527;"	d	file:
PR_REG_PTR	fs/binfmt_elf.c	1531;"	d	file:
PR_REG_SIZE	fs/binfmt_elf.c	1523;"	d	file:
PVM_MAX_KMALLOC_PAGES	mm/process_vm_access.c	152;"	d	file:
PVM_MAX_PP_ARRAY_COUNT	mm/process_vm_access.c	226;"	d	file:
PageHuge	mm/hugetlb.c	/^EXPORT_SYMBOL_GPL(PageHuge);$/;"	v
PageHuge	mm/hugetlb.c	/^int PageHuge(struct page *page)$/;"	f
QTYPE2MOPT	fs/ext3/super.c	744;"	d	file:
QTYPE2NAME	fs/ext3/super.c	743;"	d	file:
RADIX_TREE_INDEX_BITS	lib/radix-tree.c	60;"	d	file:
RADIX_TREE_MAP_MASK	lib/radix-tree.c	44;"	d	file:
RADIX_TREE_MAP_SHIFT	lib/radix-tree.c	38;"	d	file:
RADIX_TREE_MAP_SHIFT	lib/radix-tree.c	40;"	d	file:
RADIX_TREE_MAP_SIZE	lib/radix-tree.c	43;"	d	file:
RADIX_TREE_MAX_PATH	lib/radix-tree.c	61;"	d	file:
RADIX_TREE_PRELOAD_SIZE	lib/radix-tree.c	86;"	d	file:
RADIX_TREE_TAG_LONGS	lib/radix-tree.c	46;"	d	file:
RATELIMIT_CALC_SHIFT	mm/page-writeback.c	57;"	d	file:
RCUTORTURE_RUNNABLE_INIT	kernel/rcutorture.c	197;"	d	file:
RCUTORTURE_RUNNABLE_INIT	kernel/rcutorture.c	199;"	d	file:
RCU_BOOST_DELAY_JIFFIES	kernel/rcutiny_plugin.h	407;"	d
RCU_BOOST_DELAY_JIFFIES	kernel/rcutree_plugin.h	1304;"	d
RCU_BOOST_PRIO	kernel/rcutiny_plugin.h	307;"	d
RCU_BOOST_PRIO	kernel/rcutree_plugin.h	35;"	d
RCU_BOOST_PRIO	kernel/rcutree_plugin.h	37;"	d
RCU_DONE_TAIL	kernel/rcutree.h	230;"	d
RCU_FANOUT_1	kernel/rcutree.h	39;"	d
RCU_FANOUT_2	kernel/rcutree.h	40;"	d
RCU_FANOUT_3	kernel/rcutree.h	41;"	d
RCU_FANOUT_4	kernel/rcutree.h	42;"	d
RCU_FORCE_QS	kernel/rcutree.h	339;"	d
RCU_GP_FLAG_FQS	kernel/rcutree.h	451;"	d
RCU_GP_FLAG_INIT	kernel/rcutree.h	450;"	d
RCU_GP_IDLE	kernel/rcutree.h	336;"	d
RCU_GP_INIT	kernel/rcutree.h	337;"	d
RCU_IDLE_FLUSHES	kernel/rcutree_plugin.h	1605;"	d
RCU_IDLE_GP_DELAY	kernel/rcutree_plugin.h	1607;"	d
RCU_IDLE_LAZY_GP_DELAY	kernel/rcutree_plugin.h	1608;"	d
RCU_IDLE_OPT_FLUSHES	kernel/rcutree_plugin.h	1606;"	d
RCU_JIFFIES_TILL_FORCE_QS	kernel/rcutree.h	342;"	d
RCU_KTHREAD_MAX	kernel/rcutree.h	113;"	d
RCU_KTHREAD_OFFCPU	kernel/rcutree.h	111;"	d
RCU_KTHREAD_PRIO	kernel/rcutree_plugin.h	32;"	d
RCU_KTHREAD_RUNNING	kernel/rcutree.h	109;"	d
RCU_KTHREAD_STOPPED	kernel/rcutree.h	108;"	d
RCU_KTHREAD_WAITING	kernel/rcutree.h	110;"	d
RCU_KTHREAD_YIELDING	kernel/rcutree.h	112;"	d
RCU_NEXT_READY_TAIL	kernel/rcutree.h	232;"	d
RCU_NEXT_SIZE	kernel/rcutree.h	234;"	d
RCU_NEXT_TAIL	kernel/rcutree.h	233;"	d
RCU_NUM_LVLS	kernel/rcutree.h	45;"	d
RCU_NUM_LVLS	kernel/rcutree.h	52;"	d
RCU_NUM_LVLS	kernel/rcutree.h	59;"	d
RCU_NUM_LVLS	kernel/rcutree.h	66;"	d
RCU_OFL_TASKS_EXP_GP	kernel/rcutree.h	463;"	d
RCU_OFL_TASKS_NORM_GP	kernel/rcutree.h	461;"	d
RCU_RANDOM_ADD	kernel/rcutorture.c	319;"	d	file:
RCU_RANDOM_MULT	kernel/rcutorture.c	318;"	d	file:
RCU_RANDOM_REFRESH	kernel/rcutorture.c	320;"	d	file:
RCU_SAVE_DYNTICK	kernel/rcutree.h	338;"	d
RCU_SIGNAL_INIT	kernel/rcutree.h	340;"	d
RCU_STALL_DELAY_DELTA	kernel/rcupdate.c	422;"	d	file:
RCU_STALL_DELAY_DELTA	kernel/rcupdate.c	424;"	d	file:
RCU_STALL_RAT_DELAY	kernel/rcutree.h	344;"	d
RCU_STATE_INITIALIZER	kernel/rcutree.c	67;"	d	file:
RCU_SUM	kernel/rcutree.h	76;"	d
RCU_TORTURE_PIPE_LEN	kernel/rcutorture.c	149;"	d	file:
RCU_TRACE	kernel/rcu.h	27;"	d
RCU_TRACE	kernel/rcu.h	29;"	d
RCU_TREE_NONCORE	kernel/rcutree_trace.c	46;"	d	file:
RCU_WAIT_TAIL	kernel/rcutree.h	231;"	d
REAPTIMEOUT_CPUC	mm/slab.c	387;"	d	file:
REAPTIMEOUT_LIST3	mm/slab.c	388;"	d	file:
RECLAIM_FS_verbose	kernel/lockdep.c	/^static int RECLAIM_FS_verbose(struct lock_class *class)$/;"	f	file:
RECLAIM_OFF	mm/vmscan.c	3234;"	d	file:
RECLAIM_SWAP	mm/vmscan.c	3237;"	d	file:
RECLAIM_VERBOSE	kernel/lockdep.c	341;"	d	file:
RECLAIM_VERBOSE	kernel/lockdep.c	345;"	d	file:
RECLAIM_WRITE	mm/vmscan.c	3236;"	d	file:
RECLAIM_ZONE	mm/vmscan.c	3235;"	d	file:
RECOVERED	mm/memory-failure.c	/^	RECOVERED,	\/* Successfully recovered *\/$/;"	e	enum:outcome	file:
REDZONE_ALIGN	mm/slab.c	154;"	d	file:
REGISTER	kernel/taskstats.c	/^	REGISTER,$/;"	e	enum:actions	file:
RELOC_FAILED	fs/binfmt_flat.c	72;"	d	file:
RESCUER_NICE_LEVEL	kernel/workqueue.c	/^	RESCUER_NICE_LEVEL	= -20,$/;"	e	enum:__anon65	file:
RESERVED	fs/binfmt_flat.c	179;"	d	file:
RESERVED_PIDS	kernel/pid.c	49;"	d	file:
RESUME	kernel/acct.c	71;"	d	file:
ROOT_NOPREFIX	kernel/cgroup.c	/^	ROOT_NOPREFIX,	\/* mounted subsystems have no named prefix *\/$/;"	e	enum:__anon53	file:
ROOT_XATTR	kernel/cgroup.c	/^	ROOT_XATTR,	\/* supports extended attributes *\/$/;"	e	enum:__anon53	file:
RTC_EPOCH_READ32	fs/compat_ioctl.c	742;"	d	file:
RTC_EPOCH_SET32	fs/compat_ioctl.c	743;"	d	file:
RTC_IRQP_READ32	fs/compat_ioctl.c	740;"	d	file:
RTC_IRQP_SET32	fs/compat_ioctl.c	741;"	d	file:
RTTEST_LOCK	kernel/rtmutex-tester.c	/^	RTTEST_LOCK,		\/* 3 Lock uninterruptible, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKCONT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKCONT,	\/* 7 Continue locking after the wakeup delay *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKINT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKINT,		\/* 5 Lock interruptible, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKINTNOWAIT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKINTNOWAIT,	\/* 6 Lock interruptible no wait in wakeup, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKNOWAIT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKNOWAIT,	\/* 4 Lock uninterruptible no wait in wakeup, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_NOP	kernel/rtmutex-tester.c	/^	RTTEST_NOP = 0,$/;"	e	enum:test_opcodes	file:
RTTEST_RESET	kernel/rtmutex-tester.c	/^	RTTEST_RESET = 99,	\/* 99 Reset all pending operations *\/$/;"	e	enum:test_opcodes	file:
RTTEST_RESETEVENT	kernel/rtmutex-tester.c	/^	RTTEST_RESETEVENT = 98,	\/* 98 Reset event counter *\/$/;"	e	enum:test_opcodes	file:
RTTEST_SCHEDOT	kernel/rtmutex-tester.c	/^	RTTEST_SCHEDOT,		\/* 1 Sched other, data = nice *\/$/;"	e	enum:test_opcodes	file:
RTTEST_SCHEDRT	kernel/rtmutex-tester.c	/^	RTTEST_SCHEDRT,		\/* 2 Sched fifo, data = prio *\/$/;"	e	enum:test_opcodes	file:
RTTEST_SIGNAL	kernel/rtmutex-tester.c	/^	RTTEST_SIGNAL = 11,	\/* 11 Signal other test thread, data = thread id *\/$/;"	e	enum:test_opcodes	file:
RTTEST_UNLOCK	kernel/rtmutex-tester.c	/^	RTTEST_UNLOCK,		\/* 8 Unlock, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RT_MUTEX_HAS_WAITERS	kernel/rtmutex_common.h	94;"	d
RT_MUTEX_OWNER_MASKALL	kernel/rtmutex_common.h	95;"	d
RUNNING_HELPERS_TIMEOUT	kernel/kmod.c	374;"	d	file:
RWSEM_WAITING_FOR_READ	lib/rwsem-spinlock.c	16;"	d	file:
RWSEM_WAITING_FOR_WRITE	lib/rwsem-spinlock.c	17;"	d	file:
SCAN_ANON	mm/vmscan.c	/^	SCAN_ANON,$/;"	e	enum:scan_balance	file:
SCAN_EQUAL	mm/vmscan.c	/^	SCAN_EQUAL,$/;"	e	enum:scan_balance	file:
SCAN_FILE	mm/vmscan.c	/^	SCAN_FILE,$/;"	e	enum:scan_balance	file:
SCAN_FRACT	mm/vmscan.c	/^	SCAN_FRACT,$/;"	e	enum:scan_balance	file:
SC_PER_PAGE	mm/page_cgroup.c	337;"	d	file:
SECS_FIRST_SCAN	mm/kmemleak.c	110;"	d	file:
SECS_SCAN_WAIT	mm/kmemleak.c	111;"	d	file:
SECTIONS_SHIFT	mm/mm_init.c	18;"	d	file:
SEQNR_MASK	mm/ksm.c	181;"	d	file:
SETFL_MASK	fs/fcntl.c	29;"	d	file:
SET_ENDIAN	kernel/sys.c	82;"	d	file:
SET_FPEMU_CTL	kernel/sys.c	67;"	d	file:
SET_FPEXC_CTL	kernel/sys.c	73;"	d	file:
SET_NOT_ALIGNED_FLAGS	fs/ioctl.c	84;"	d	file:
SET_NO_UNMOUNTED_IO_FLAGS	fs/ioctl.c	83;"	d	file:
SET_PERSONALITY	fs/compat_binfmt_elf.c	112;"	d	file:
SET_PERSONALITY	fs/compat_binfmt_elf.c	113;"	d	file:
SET_PR_FPVALID	fs/binfmt_elf.c	1535;"	d	file:
SET_TSC_CTL	kernel/sys.c	88;"	d	file:
SET_UNALIGN_CTL	kernel/sys.c	61;"	d	file:
SET_UNKNOWN_FLAGS	fs/ioctl.c	82;"	d	file:
SGP_CACHE	mm/shmem.c	/^	SGP_CACHE,	\/* don't exceed i_size, may allocate page *\/$/;"	e	enum:sgp_type	file:
SGP_DIRTY	mm/shmem.c	/^	SGP_DIRTY,	\/* like SGP_CACHE, but set new page dirty *\/$/;"	e	enum:sgp_type	file:
SGP_FALLOC	mm/shmem.c	/^	SGP_FALLOC,	\/* like SGP_WRITE, but make existing page Uptodate *\/$/;"	e	enum:sgp_type	file:
SGP_READ	mm/shmem.c	/^	SGP_READ,	\/* don't exceed i_size, don't allocate page *\/$/;"	e	enum:sgp_type	file:
SGP_WRITE	mm/shmem.c	/^	SGP_WRITE,	\/* may exceed i_size, may allocate !Uptodate page *\/$/;"	e	enum:sgp_type	file:
SHMEM_SB	mm/shmem.c	/^static inline struct shmem_sb_info *SHMEM_SB(struct super_block *sb)$/;"	f	file:
SHORT_SYMLINK_LEN	mm/shmem.c	78;"	d	file:
SHRINK_BATCH	mm/vmscan.c	187;"	d	file:
SIZE_AC	mm/slab.c	311;"	d	file:
SIZE_L3	mm/slab.c	312;"	d	file:
SLAB_ATTR	mm/slub.c	4512;"	d	file:
SLAB_ATTR_RO	mm/slub.c	4508;"	d	file:
SLAB_CACHE_FLAGS	mm/slab.h	73;"	d
SLAB_CACHE_FLAGS	mm/slab.h	76;"	d
SLAB_CACHE_FLAGS	mm/slab.h	79;"	d
SLAB_CORE_FLAGS	mm/slab.h	60;"	d
SLAB_DEBUG_FLAGS	mm/slab.h	64;"	d
SLAB_DEBUG_FLAGS	mm/slab.h	66;"	d
SLAB_DEBUG_FLAGS	mm/slab.h	69;"	d
SLAB_LIMIT	mm/slab.c	189;"	d	file:
SLAB_MAX_ORDER_HI	mm/slab.c	489;"	d	file:
SLAB_MAX_ORDER_LO	mm/slab.c	490;"	d	file:
SLAB_OBJ_PFMEMALLOC	mm/slab.c	261;"	d	file:
SLOB_BREAK1	mm/slob.c	98;"	d	file:
SLOB_BREAK2	mm/slob.c	99;"	d	file:
SLOB_UNIT	mm/slob.c	124;"	d	file:
SLOB_UNITS	mm/slob.c	125;"	d	file:
SLOT_CLEAN	kernel/kprobes.c	/^	SLOT_CLEAN = 0,$/;"	e	enum:kprobe_slot_state	file:
SLOT_DIRTY	kernel/kprobes.c	/^	SLOT_DIRTY = 1,$/;"	e	enum:kprobe_slot_state	file:
SLOT_USED	kernel/kprobes.c	/^	SLOT_USED = 2,$/;"	e	enum:kprobe_slot_state	file:
SLUB_DEBUG_CMPXCHG	mm/slub.c	137;"	d	file:
SLUB_MERGE_SAME	mm/slub.c	169;"	d	file:
SLUB_NEVER_MERGE	mm/slub.c	165;"	d	file:
SLUB_RESILIENCY_TEST	mm/slub.c	134;"	d	file:
SL_ALL	mm/slub.c	/^	SL_ALL,			\/* All slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_CPU	mm/slub.c	/^	SL_CPU,			\/* Only slabs used for cpu caches *\/$/;"	e	enum:slab_stat_type	file:
SL_OBJECTS	mm/slub.c	/^	SL_OBJECTS,		\/* Determine allocated objects not slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_PARTIAL	mm/slub.c	/^	SL_PARTIAL,		\/* Only partially allocated slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_TOTAL	mm/slub.c	/^	SL_TOTAL		\/* Determine object capacity not slabs *\/$/;"	e	enum:slab_stat_type	file:
SMPBOOT_H	kernel/smpboot.h	2;"	d
SOFTIRQ_VERBOSE	kernel/lockdep.c	340;"	d	file:
SOFTIRQ_VERBOSE	kernel/lockdep.c	344;"	d	file:
SOFTIRQ_verbose	kernel/lockdep.c	/^static int SOFTIRQ_verbose(struct lock_class *class)$/;"	f	file:
SOFTLIMIT_EVENTS_TARGET	mm/memcontrol.c	144;"	d	file:
SOM_PAGEALIGN	fs/binfmt_som.c	53;"	d	file:
SOM_PAGEOFFSET	fs/binfmt_som.c	52;"	d	file:
SOM_PAGESTART	fs/binfmt_som.c	51;"	d	file:
SO_ALL	mm/slub.c	4381;"	d	file:
SO_CPU	mm/slub.c	4383;"	d	file:
SO_OBJECTS	mm/slub.c	4384;"	d	file:
SO_PARTIAL	mm/slub.c	4382;"	d	file:
SO_TOTAL	mm/slub.c	4385;"	d	file:
SRCU_CALLBACK_BATCH	kernel/srcu.c	514;"	d	file:
SRCU_INTERVAL	kernel/srcu.c	515;"	d	file:
SRCU_RETRY_CHECK_DELAY	kernel/srcu.c	332;"	d	file:
STABLE_FLAG	mm/ksm.c	183;"	d	file:
STACK_ADD	fs/binfmt_elf.c	121;"	d	file:
STACK_ADD	fs/binfmt_elf.c	128;"	d	file:
STACK_ALLOC	fs/binfmt_elf.c	124;"	d	file:
STACK_ALLOC	fs/binfmt_elf.c	131;"	d	file:
STACK_RND_MASK	fs/binfmt_elf.c	547;"	d	file:
STACK_ROUND	fs/binfmt_elf.c	122;"	d	file:
STACK_ROUND	fs/binfmt_elf.c	129;"	d	file:
STANDARD_PARAM_DEF	kernel/params.c	230;"	d	file:
START_DATA	fs/binfmt_aout.c	55;"	d	file:
START_STACK	fs/binfmt_aout.c	60;"	d	file:
STATE_RCU_HEAD_QUEUED	kernel/rcu.h	66;"	d
STATE_RCU_HEAD_READY	kernel/rcu.h	65;"	d
STATS	mm/slab.c	144;"	d	file:
STATS	mm/slab.c	148;"	d	file:
STATS_ADD_REAPED	mm/slab.c	395;"	d	file:
STATS_ADD_REAPED	mm/slab.c	419;"	d	file:
STATS_DEC_ACTIVE	mm/slab.c	392;"	d	file:
STATS_DEC_ACTIVE	mm/slab.c	416;"	d	file:
STATS_INC_ACOVERFLOW	mm/slab.c	404;"	d	file:
STATS_INC_ACOVERFLOW	mm/slab.c	424;"	d	file:
STATS_INC_ACTIVE	mm/slab.c	391;"	d	file:
STATS_INC_ACTIVE	mm/slab.c	415;"	d	file:
STATS_INC_ALLOCED	mm/slab.c	393;"	d	file:
STATS_INC_ALLOCED	mm/slab.c	417;"	d	file:
STATS_INC_ALLOCHIT	mm/slab.c	410;"	d	file:
STATS_INC_ALLOCHIT	mm/slab.c	426;"	d	file:
STATS_INC_ALLOCMISS	mm/slab.c	411;"	d	file:
STATS_INC_ALLOCMISS	mm/slab.c	427;"	d	file:
STATS_INC_ERR	mm/slab.c	401;"	d	file:
STATS_INC_ERR	mm/slab.c	421;"	d	file:
STATS_INC_FREEHIT	mm/slab.c	412;"	d	file:
STATS_INC_FREEHIT	mm/slab.c	428;"	d	file:
STATS_INC_FREEMISS	mm/slab.c	413;"	d	file:
STATS_INC_FREEMISS	mm/slab.c	429;"	d	file:
STATS_INC_GROWN	mm/slab.c	394;"	d	file:
STATS_INC_GROWN	mm/slab.c	418;"	d	file:
STATS_INC_NODEALLOCS	mm/slab.c	402;"	d	file:
STATS_INC_NODEALLOCS	mm/slab.c	422;"	d	file:
STATS_INC_NODEFREES	mm/slab.c	403;"	d	file:
STATS_INC_NODEFREES	mm/slab.c	423;"	d	file:
STATS_SET_FREEABLE	mm/slab.c	405;"	d	file:
STATS_SET_FREEABLE	mm/slab.c	425;"	d	file:
STATS_SET_HIGH	mm/slab.c	396;"	d	file:
STATS_SET_HIGH	mm/slab.c	420;"	d	file:
STAT_ATTR	mm/slub.c	4960;"	d	file:
STOPMACHINE_DISABLE_IRQ	kernel/stop_machine.c	/^	STOPMACHINE_DISABLE_IRQ,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_EXIT	kernel/stop_machine.c	/^	STOPMACHINE_EXIT,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_NONE	kernel/stop_machine.c	/^	STOPMACHINE_NONE,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_PREPARE	kernel/stop_machine.c	/^	STOPMACHINE_PREPARE,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_RUN	kernel/stop_machine.c	/^	STOPMACHINE_RUN,$/;"	e	enum:stopmachine_state	file:
STRICT_READ_CHECKS	kernel/lockdep.c	2422;"	d	file:
SUBSYS	kernel/cgroup.c	95;"	d	file:
SUCCESS	mm/scm.h	22;"	d
SUFFIX_HIGH	kernel/kexec.c	1371;"	d	file:
SUFFIX_LOW	kernel/kexec.c	1372;"	d	file:
SUFFIX_NULL	kernel/kexec.c	1373;"	d	file:
SUSPEND	kernel/acct.c	72;"	d	file:
SWAPFILE_CLUSTER	mm/swapfile.c	184;"	d	file:
SYNCHRONIZE_SRCU_EXP_TRYCOUNT	kernel/srcu.c	334;"	d	file:
SYNCHRONIZE_SRCU_TRYCOUNT	kernel/srcu.c	333;"	d	file:
SYNCHRONOUS_MASK	kernel/signal.c	164;"	d	file:
SYSCALL_DEFINE0	fs/notify/inotify/inotify_user.c	/^SYSCALL_DEFINE0(inotify_init)$/;"	f
SYSCALL_DEFINE0	fs/open.c	/^SYSCALL_DEFINE0(vhangup)$/;"	f
SYSCALL_DEFINE0	fs/sync.c	/^SYSCALL_DEFINE0(sync)$/;"	f
SYSCALL_DEFINE0	kernel/fork.c	/^SYSCALL_DEFINE0(fork)$/;"	f
SYSCALL_DEFINE0	kernel/fork.c	/^SYSCALL_DEFINE0(vfork)$/;"	f
SYSCALL_DEFINE0	kernel/signal.c	/^SYSCALL_DEFINE0(pause)$/;"	f
SYSCALL_DEFINE0	kernel/signal.c	/^SYSCALL_DEFINE0(restart_syscall)$/;"	f
SYSCALL_DEFINE0	kernel/signal.c	/^SYSCALL_DEFINE0(sgetmask)$/;"	f
SYSCALL_DEFINE0	kernel/sys.c	/^SYSCALL_DEFINE0(getpgrp)$/;"	f
SYSCALL_DEFINE0	kernel/sys.c	/^SYSCALL_DEFINE0(setsid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getegid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(geteuid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getgid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getpid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getppid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(gettid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getuid)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(getegid16)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(geteuid16)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(getgid16)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(getuid16)$/;"	f
SYSCALL_DEFINE0	mm/mlock.c	/^SYSCALL_DEFINE0(munlockall)$/;"	f
SYSCALL_DEFINE1	fs/aio.c	/^SYSCALL_DEFINE1(io_destroy, aio_context_t, ctx)$/;"	f
SYSCALL_DEFINE1	fs/eventfd.c	/^SYSCALL_DEFINE1(eventfd, unsigned int, count)$/;"	f
SYSCALL_DEFINE1	fs/eventpoll.c	/^SYSCALL_DEFINE1(epoll_create, int, size)$/;"	f
SYSCALL_DEFINE1	fs/eventpoll.c	/^SYSCALL_DEFINE1(epoll_create1, int, flags)$/;"	f
SYSCALL_DEFINE1	fs/exec.c	/^SYSCALL_DEFINE1(uselib, const char __user *, library)$/;"	f
SYSCALL_DEFINE1	fs/file.c	/^SYSCALL_DEFINE1(dup, unsigned int, fildes)$/;"	f
SYSCALL_DEFINE1	fs/namei.c	/^SYSCALL_DEFINE1(rmdir, const char __user *, pathname)$/;"	f
SYSCALL_DEFINE1	fs/namei.c	/^SYSCALL_DEFINE1(unlink, const char __user *, pathname)$/;"	f
SYSCALL_DEFINE1	fs/namespace.c	/^SYSCALL_DEFINE1(oldumount, char __user *, name)$/;"	f
SYSCALL_DEFINE1	fs/notify/inotify/inotify_user.c	/^SYSCALL_DEFINE1(inotify_init1, int, flags)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(chdir, const char __user *, filename)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(chroot, const char __user *, filename)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(close, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(fchdir, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/pipe.c	/^SYSCALL_DEFINE1(pipe, int __user *, fildes)$/;"	f
SYSCALL_DEFINE1	fs/select.c	/^SYSCALL_DEFINE1(old_select, struct sel_arg_struct __user *, arg)$/;"	f
SYSCALL_DEFINE1	fs/sync.c	/^SYSCALL_DEFINE1(fdatasync, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/sync.c	/^SYSCALL_DEFINE1(fsync, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/sync.c	/^SYSCALL_DEFINE1(syncfs, int, fd)$/;"	f
SYSCALL_DEFINE1	kernel/acct.c	/^SYSCALL_DEFINE1(acct, const char __user *, name)$/;"	f
SYSCALL_DEFINE1	kernel/exec_domain.c	/^SYSCALL_DEFINE1(personality, unsigned int, personality)$/;"	f
SYSCALL_DEFINE1	kernel/exit.c	/^SYSCALL_DEFINE1(exit, int, error_code)$/;"	f
SYSCALL_DEFINE1	kernel/exit.c	/^SYSCALL_DEFINE1(exit_group, int, error_code)$/;"	f
SYSCALL_DEFINE1	kernel/fork.c	/^SYSCALL_DEFINE1(set_tid_address, int __user *, tidptr)$/;"	f
SYSCALL_DEFINE1	kernel/fork.c	/^SYSCALL_DEFINE1(unshare, unsigned long, unshare_flags)$/;"	f
SYSCALL_DEFINE1	kernel/posix-timers.c	/^SYSCALL_DEFINE1(timer_delete, timer_t, timer_id)$/;"	f
SYSCALL_DEFINE1	kernel/posix-timers.c	/^SYSCALL_DEFINE1(timer_getoverrun, timer_t, timer_id)$/;"	f
SYSCALL_DEFINE1	kernel/signal.c	/^SYSCALL_DEFINE1(sigpending, old_sigset_t __user *, set)$/;"	f
SYSCALL_DEFINE1	kernel/signal.c	/^SYSCALL_DEFINE1(sigsuspend, old_sigset_t, mask)$/;"	f
SYSCALL_DEFINE1	kernel/signal.c	/^SYSCALL_DEFINE1(ssetmask, int, newmask)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(getpgid, pid_t, pid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(getsid, pid_t, pid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(olduname, struct oldold_utsname __user *, name)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setfsgid, gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setfsuid, uid_t, uid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setgid, gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setuid, uid_t, uid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(times, struct tms __user *, tbuf)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(umask, int, mask)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(uname, struct old_utsname __user *, name)$/;"	f
SYSCALL_DEFINE1	kernel/sysctl_binary.c	/^SYSCALL_DEFINE1(sysctl, struct __sysctl_args __user *, args)$/;"	f
SYSCALL_DEFINE1	kernel/time.c	/^SYSCALL_DEFINE1(adjtimex, struct timex __user *, txc_p)$/;"	f
SYSCALL_DEFINE1	kernel/time.c	/^SYSCALL_DEFINE1(stime, time_t __user *, tptr)$/;"	f
SYSCALL_DEFINE1	kernel/time.c	/^SYSCALL_DEFINE1(time, time_t __user *, tloc)$/;"	f
SYSCALL_DEFINE1	kernel/timer.c	/^SYSCALL_DEFINE1(alarm, unsigned int, seconds)$/;"	f
SYSCALL_DEFINE1	kernel/timer.c	/^SYSCALL_DEFINE1(sysinfo, struct sysinfo __user *, info)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setfsgid16, old_gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setfsuid16, old_uid_t, uid)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setgid16, old_gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setuid16, old_uid_t, uid)$/;"	f
SYSCALL_DEFINE1	mm/mlock.c	/^SYSCALL_DEFINE1(mlockall, int, flags)$/;"	f
SYSCALL_DEFINE1	mm/mmap.c	/^SYSCALL_DEFINE1(brk, unsigned long, brk)$/;"	f
SYSCALL_DEFINE1	mm/mmap.c	/^SYSCALL_DEFINE1(old_mmap, struct mmap_arg_struct __user *, arg)$/;"	f
SYSCALL_DEFINE1	mm/nommu.c	/^SYSCALL_DEFINE1(brk, unsigned long, brk)$/;"	f
SYSCALL_DEFINE1	mm/nommu.c	/^SYSCALL_DEFINE1(old_mmap, struct mmap_arg_struct __user *, arg)$/;"	f
SYSCALL_DEFINE1	mm/scm.c	/^SYSCALL_DEFINE1(flush_pg, int, flush_all)$/;"	f
SYSCALL_DEFINE1	mm/swapfile.c	/^SYSCALL_DEFINE1(swapoff, const char __user *, specialfile)$/;"	f
SYSCALL_DEFINE2	fs/aio.c	/^SYSCALL_DEFINE2(io_setup, unsigned, nr_events, aio_context_t __user *, ctxp)$/;"	f
SYSCALL_DEFINE2	fs/buffer.c	/^SYSCALL_DEFINE2(bdflush, int, func, long, data)$/;"	f
SYSCALL_DEFINE2	fs/dcache.c	/^SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)$/;"	f
SYSCALL_DEFINE2	fs/eventfd.c	/^SYSCALL_DEFINE2(eventfd2, unsigned int, count, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/file.c	/^SYSCALL_DEFINE2(dup2, unsigned int, oldfd, unsigned int, newfd)$/;"	f
SYSCALL_DEFINE2	fs/ioprio.c	/^SYSCALL_DEFINE2(ioprio_get, int, which, int, who)$/;"	f
SYSCALL_DEFINE2	fs/locks.c	/^SYSCALL_DEFINE2(flock, unsigned int, fd, unsigned int, cmd)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(link, const char __user *, oldname, const char __user *, newname)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(mkdir, const char __user *, pathname, umode_t, mode)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(rename, const char __user *, oldname, const char __user *, newname)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(symlink, const char __user *, oldname, const char __user *, newname)$/;"	f
SYSCALL_DEFINE2	fs/namespace.c	/^SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,$/;"	f
SYSCALL_DEFINE2	fs/namespace.c	/^SYSCALL_DEFINE2(umount, char __user *, name, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/notify/inotify/inotify_user.c	/^SYSCALL_DEFINE2(inotify_rm_watch, int, fd, __s32, wd)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(access, const char __user *, filename, int, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(chmod, const char __user *, filename, umode_t, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(creat, const char __user *, pathname, umode_t, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(fchmod, unsigned int, fd, umode_t, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(ftruncate, unsigned int, fd, unsigned long, length)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(truncate, const char __user *, path, long, length)$/;"	f
SYSCALL_DEFINE2	fs/pipe.c	/^SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(fstat, unsigned int, fd, struct __old_kernel_stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(fstat64, unsigned long, fd, struct stat64 __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(lstat, const char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(lstat64, const char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(newfstat, unsigned int, fd, struct stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(newlstat, const char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(newstat, const char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(stat, const char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(stat64, const char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/statfs.c	/^SYSCALL_DEFINE2(fstatfs, unsigned int, fd, struct statfs __user *, buf)$/;"	f
SYSCALL_DEFINE2	fs/statfs.c	/^SYSCALL_DEFINE2(statfs, const char __user *, pathname, struct statfs __user *, buf)$/;"	f
SYSCALL_DEFINE2	fs/statfs.c	/^SYSCALL_DEFINE2(ustat, unsigned, dev, struct ustat __user *, ubuf)$/;"	f
SYSCALL_DEFINE2	fs/timerfd.c	/^SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/timerfd.c	/^SYSCALL_DEFINE2(timerfd_gettime, int, ufd, struct itimerspec __user *, otmr)$/;"	f
SYSCALL_DEFINE2	fs/utimes.c	/^SYSCALL_DEFINE2(utime, char __user *, filename, struct utimbuf __user *, times)$/;"	f
SYSCALL_DEFINE2	fs/utimes.c	/^SYSCALL_DEFINE2(utimes, char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/xattr.c	/^SYSCALL_DEFINE2(fremovexattr, int, fd, const char __user *, name)$/;"	f
SYSCALL_DEFINE2	fs/xattr.c	/^SYSCALL_DEFINE2(lremovexattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE2	fs/xattr.c	/^SYSCALL_DEFINE2(removexattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE2	kernel/capability.c	/^SYSCALL_DEFINE2(capget, cap_user_header_t, header, cap_user_data_t, dataptr)$/;"	f
SYSCALL_DEFINE2	kernel/capability.c	/^SYSCALL_DEFINE2(capset, cap_user_header_t, header, const cap_user_data_t, data)$/;"	f
SYSCALL_DEFINE2	kernel/futex.c	/^SYSCALL_DEFINE2(set_robust_list, struct robust_list_head __user *, head,$/;"	f
SYSCALL_DEFINE2	kernel/groups.c	/^SYSCALL_DEFINE2(getgroups, int, gidsetsize, gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/groups.c	/^SYSCALL_DEFINE2(setgroups, int, gidsetsize, gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/hrtimer.c	/^SYSCALL_DEFINE2(nanosleep, struct timespec __user *, rqtp,$/;"	f
SYSCALL_DEFINE2	kernel/itimer.c	/^SYSCALL_DEFINE2(getitimer, int, which, struct itimerval __user *, value)$/;"	f
SYSCALL_DEFINE2	kernel/module.c	/^SYSCALL_DEFINE2(delete_module, const char __user *, name_user,$/;"	f
SYSCALL_DEFINE2	kernel/nsproxy.c	/^SYSCALL_DEFINE2(setns, int, fd, int, nstype)$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_adjtime, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_getres, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_gettime, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_settime, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(timer_gettime, timer_t, timer_id,$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(rt_sigpending, sigset_t __user *, uset, size_t, sigsetsize)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(rt_sigsuspend, sigset_t __user *, unewset, size_t, sigsetsize)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(sigaltstack,const stack_t __user *,uss, stack_t __user *,uoss)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(signal, int, sig, __sighandler_t, handler)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(tkill, pid_t, pid, int, sig)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(gethostname, char __user *, name, int, len)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(getpriority, int, which, int, who)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(getrlimit, unsigned int, resource, struct rlimit __user *, rlim)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(getrusage, int, who, struct rusage __user *, ru)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(old_getrlimit, unsigned int, resource,$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setdomainname, char __user *, name, int, len)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(sethostname, char __user *, name, int, len)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setpgid, pid_t, pid, pid_t, pgid)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setregid, gid_t, rgid, gid_t, egid)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setreuid, uid_t, ruid, uid_t, euid)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setrlimit, unsigned int, resource, struct rlimit __user *, rlim)$/;"	f
SYSCALL_DEFINE2	kernel/time.c	/^SYSCALL_DEFINE2(gettimeofday, struct timeval __user *, tv,$/;"	f
SYSCALL_DEFINE2	kernel/time.c	/^SYSCALL_DEFINE2(settimeofday, struct timeval __user *, tv,$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(getgroups16, int, gidsetsize, old_gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(setgroups16, int, gidsetsize, old_gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(setregid16, old_gid_t, rgid, old_gid_t, egid)$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(setreuid16, old_uid_t, ruid, old_uid_t, euid)$/;"	f
SYSCALL_DEFINE2	mm/mlock.c	/^SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/mlock.c	/^SYSCALL_DEFINE2(munlock, unsigned long, start, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/mmap.c	/^SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/nommu.c	/^SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/scm.c	/^SYSCALL_DEFINE2(alloc_persistent, unsigned long, v_addr, unsigned long, size_mb)$/;"	f
SYSCALL_DEFINE2	mm/swapfile.c	/^SYSCALL_DEFINE2(swapon, const char __user *, specialfile, int, swap_flags)$/;"	f
SYSCALL_DEFINE3	fs/aio.c	/^SYSCALL_DEFINE3(io_cancel, aio_context_t, ctx_id, struct iocb __user *, iocb,$/;"	f
SYSCALL_DEFINE3	fs/aio.c	/^SYSCALL_DEFINE3(io_submit, aio_context_t, ctx_id, long, nr,$/;"	f
SYSCALL_DEFINE3	fs/exec.c	/^SYSCALL_DEFINE3(execve,$/;"	f
SYSCALL_DEFINE3	fs/fcntl.c	/^SYSCALL_DEFINE3(fcntl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)$/;"	f
SYSCALL_DEFINE3	fs/fcntl.c	/^SYSCALL_DEFINE3(fcntl64, unsigned int, fd, unsigned int, cmd,$/;"	f
SYSCALL_DEFINE3	fs/fhandle.c	/^SYSCALL_DEFINE3(open_by_handle_at, int, mountdirfd,$/;"	f
SYSCALL_DEFINE3	fs/file.c	/^SYSCALL_DEFINE3(dup3, unsigned int, oldfd, unsigned int, newfd, int, flags)$/;"	f
SYSCALL_DEFINE3	fs/filesystems.c	/^SYSCALL_DEFINE3(sysfs, int, option, unsigned long, arg1, unsigned long, arg2)$/;"	f
SYSCALL_DEFINE3	fs/ioctl.c	/^SYSCALL_DEFINE3(ioctl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)$/;"	f
SYSCALL_DEFINE3	fs/ioprio.c	/^SYSCALL_DEFINE3(ioprio_set, int, which, int, who, int, ioprio)$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(mknod, const char __user *, filename, umode_t, mode, unsigned, dev)$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(symlinkat, const char __user *, oldname,$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(unlinkat, int, dfd, const char __user *, pathname, int, flag)$/;"	f
SYSCALL_DEFINE3	fs/notify/inotify/inotify_user.c	/^SYSCALL_DEFINE3(inotify_add_watch, int, fd, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(chown, const char __user *, filename, uid_t, user, gid_t, group)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(fchmodat, int, dfd, const char __user *, filename, umode_t, mode)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(fchown, unsigned int, fd, uid_t, user, gid_t, group)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(lchown, const char __user *, filename, uid_t, user, gid_t, group)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(lseek, unsigned int, fd, off_t, offset, unsigned int, whence)$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(readv, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(writev, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE3	fs/readdir.c	/^SYSCALL_DEFINE3(getdents, unsigned int, fd,$/;"	f
SYSCALL_DEFINE3	fs/readdir.c	/^SYSCALL_DEFINE3(getdents64, unsigned int, fd,$/;"	f
SYSCALL_DEFINE3	fs/readdir.c	/^SYSCALL_DEFINE3(old_readdir, unsigned int, fd,$/;"	f
SYSCALL_DEFINE3	fs/select.c	/^SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,$/;"	f
SYSCALL_DEFINE3	fs/signalfd.c	/^SYSCALL_DEFINE3(signalfd, int, ufd, sigset_t __user *, user_mask,$/;"	f
SYSCALL_DEFINE3	fs/stat.c	/^SYSCALL_DEFINE3(readlink, const char __user *, path, char __user *, buf,$/;"	f
SYSCALL_DEFINE3	fs/statfs.c	/^SYSCALL_DEFINE3(fstatfs64, unsigned int, fd, size_t, sz, struct statfs64 __user *, buf)$/;"	f
SYSCALL_DEFINE3	fs/statfs.c	/^SYSCALL_DEFINE3(statfs64, const char __user *, pathname, size_t, sz, struct statfs64 __user *, buf)$/;"	f
SYSCALL_DEFINE3	fs/utimes.c	/^SYSCALL_DEFINE3(futimesat, int, dfd, const char __user *, filename,$/;"	f
SYSCALL_DEFINE3	fs/xattr.c	/^SYSCALL_DEFINE3(flistxattr, int, fd, char __user *, list, size_t, size)$/;"	f
SYSCALL_DEFINE3	fs/xattr.c	/^SYSCALL_DEFINE3(listxattr, const char __user *, pathname, char __user *, list,$/;"	f
SYSCALL_DEFINE3	fs/xattr.c	/^SYSCALL_DEFINE3(llistxattr, const char __user *, pathname, char __user *, list,$/;"	f
SYSCALL_DEFINE3	kernel/exit.c	/^SYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)$/;"	f
SYSCALL_DEFINE3	kernel/futex.c	/^SYSCALL_DEFINE3(get_robust_list, int, pid,$/;"	f
SYSCALL_DEFINE3	kernel/itimer.c	/^SYSCALL_DEFINE3(setitimer, int, which, struct itimerval __user *, value,$/;"	f
SYSCALL_DEFINE3	kernel/module.c	/^SYSCALL_DEFINE3(finit_module, int, fd, const char __user *, uargs, int, flags)$/;"	f
SYSCALL_DEFINE3	kernel/module.c	/^SYSCALL_DEFINE3(init_module, void __user *, umod,$/;"	f
SYSCALL_DEFINE3	kernel/posix-timers.c	/^SYSCALL_DEFINE3(timer_create, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE3	kernel/printk.c	/^SYSCALL_DEFINE3(syslog, int, type, char __user *, buf, int, len)$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(rt_sigqueueinfo, pid_t, pid, int, sig,$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(sigaction, int, sig,$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(sigprocmask, int, how, old_sigset_t __user *, nset,$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(sigsuspend, int, unused1, int, unused2, old_sigset_t, mask)$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid_t, pid, int, sig)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(getcpu, unsigned __user *, cpup, unsigned __user *, nodep,$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(getresgid, gid_t __user *, rgidp, gid_t __user *, egidp, gid_t __user *, sgidp)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(getresuid, uid_t __user *, ruidp, uid_t __user *, euidp, uid_t __user *, suidp)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(setresgid, gid_t, rgid, gid_t, egid, gid_t, sgid)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(setresuid, uid_t, ruid, uid_t, euid, uid_t, suid)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(chown16, const char __user *, filename, old_uid_t, user, old_gid_t, group)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(fchown16, unsigned int, fd, old_uid_t, user, old_gid_t, group)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(getresgid16, old_gid_t __user *, rgidp, old_gid_t __user *, egidp, old_gid_t __user *, sgidp)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(getresuid16, old_uid_t __user *, ruidp, old_uid_t __user *, euidp, old_uid_t __user *, suidp)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(lchown16, const char __user *, filename, old_uid_t, user, old_gid_t, group)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(setresgid16, old_gid_t, rgid, old_gid_t, egid, old_gid_t, sgid)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(setresuid16, old_uid_t, ruid, old_uid_t, euid, old_uid_t, suid)$/;"	f
SYSCALL_DEFINE3	mm/madvise.c	/^SYSCALL_DEFINE3(madvise, unsigned long, start, size_t, len_in, int, behavior)$/;"	f
SYSCALL_DEFINE3	mm/mempolicy.c	/^SYSCALL_DEFINE3(set_mempolicy, int, mode, unsigned long __user *, nmask,$/;"	f
SYSCALL_DEFINE3	mm/mincore.c	/^SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE3	mm/mprotect.c	/^SYSCALL_DEFINE3(mprotect, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE3	mm/msync.c	/^SYSCALL_DEFINE3(msync, unsigned long, start, size_t, len, int, flags)$/;"	f
SYSCALL_DEFINE3	mm/scm.c	/^SYSCALL_DEFINE3(mpprotect, void *, extseg, void *, rights, int, count)$/;"	f
SYSCALL_DEFINE4	fs/eventpoll.c	/^SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,$/;"	f
SYSCALL_DEFINE4	fs/eventpoll.c	/^SYSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events,$/;"	f
SYSCALL_DEFINE4	fs/namei.c	/^SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, umode_t, mode,$/;"	f
SYSCALL_DEFINE4	fs/namei.c	/^SYSCALL_DEFINE4(renameat, int, olddfd, const char __user *, oldname,$/;"	f
SYSCALL_DEFINE4	fs/open.c	/^SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags,$/;"	f
SYSCALL_DEFINE4	fs/read_write.c	/^SYSCALL_DEFINE4(sendfile, int, out_fd, int, in_fd, off_t __user *, offset, size_t, count)$/;"	f
SYSCALL_DEFINE4	fs/read_write.c	/^SYSCALL_DEFINE4(sendfile64, int, out_fd, int, in_fd, loff_t __user *, offset, size_t, count)$/;"	f
SYSCALL_DEFINE4	fs/signalfd.c	/^SYSCALL_DEFINE4(signalfd4, int, ufd, sigset_t __user *, user_mask,$/;"	f
SYSCALL_DEFINE4	fs/splice.c	/^SYSCALL_DEFINE4(tee, int, fdin, int, fdout, size_t, len, unsigned int, flags)$/;"	f
SYSCALL_DEFINE4	fs/splice.c	/^SYSCALL_DEFINE4(vmsplice, int, fd, const struct iovec __user *, iov,$/;"	f
SYSCALL_DEFINE4	fs/stat.c	/^SYSCALL_DEFINE4(fstatat64, int, dfd, const char __user *, filename,$/;"	f
SYSCALL_DEFINE4	fs/stat.c	/^SYSCALL_DEFINE4(newfstatat, int, dfd, const char __user *, filename,$/;"	f
SYSCALL_DEFINE4	fs/stat.c	/^SYSCALL_DEFINE4(readlinkat, int, dfd, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE4	fs/timerfd.c	/^SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,$/;"	f
SYSCALL_DEFINE4	fs/utimes.c	/^SYSCALL_DEFINE4(utimensat, int, dfd, const char __user *, filename,$/;"	f
SYSCALL_DEFINE4	fs/xattr.c	/^SYSCALL_DEFINE4(fgetxattr, int, fd, const char __user *, name,$/;"	f
SYSCALL_DEFINE4	fs/xattr.c	/^SYSCALL_DEFINE4(getxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE4	fs/xattr.c	/^SYSCALL_DEFINE4(lgetxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE4	kernel/exit.c	/^SYSCALL_DEFINE4(wait4, pid_t, upid, int __user *, stat_addr,$/;"	f
SYSCALL_DEFINE4	kernel/kexec.c	/^SYSCALL_DEFINE4(kexec_load, unsigned long, entry, unsigned long, nr_segments,$/;"	f
SYSCALL_DEFINE4	kernel/posix-timers.c	/^SYSCALL_DEFINE4(clock_nanosleep, const clockid_t, which_clock, int, flags,$/;"	f
SYSCALL_DEFINE4	kernel/posix-timers.c	/^SYSCALL_DEFINE4(timer_settime, timer_t, timer_id, int, flags,$/;"	f
SYSCALL_DEFINE4	kernel/ptrace.c	/^SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_sigaction, int, sig,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_sigprocmask, int, how, sigset_t __user *, nset,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_sigtimedwait, const sigset_t __user *, uthese,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_tgsigqueueinfo, pid_t, tgid, pid_t, pid, int, sig,$/;"	f
SYSCALL_DEFINE4	kernel/sys.c	/^SYSCALL_DEFINE4(prlimit64, pid_t, pid, unsigned int, resource,$/;"	f
SYSCALL_DEFINE4	kernel/sys.c	/^SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,$/;"	f
SYSCALL_DEFINE4	mm/mempolicy.c	/^SYSCALL_DEFINE4(migrate_pages, pid_t, pid, unsigned long, maxnode,$/;"	f
SYSCALL_DEFINE5	fs/aio.c	/^SYSCALL_DEFINE5(io_getevents, aio_context_t, ctx_id,$/;"	f
SYSCALL_DEFINE5	fs/fhandle.c	/^SYSCALL_DEFINE5(name_to_handle_at, int, dfd, const char __user *, name,$/;"	f
SYSCALL_DEFINE5	fs/namei.c	/^SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,$/;"	f
SYSCALL_DEFINE5	fs/namespace.c	/^SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,$/;"	f
SYSCALL_DEFINE5	fs/open.c	/^SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user,$/;"	f
SYSCALL_DEFINE5	fs/read_write.c	/^SYSCALL_DEFINE5(llseek, unsigned int, fd, unsigned long, offset_high,$/;"	f
SYSCALL_DEFINE5	fs/read_write.c	/^SYSCALL_DEFINE5(preadv, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE5	fs/read_write.c	/^SYSCALL_DEFINE5(pwritev, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE5	fs/select.c	/^SYSCALL_DEFINE5(ppoll, struct pollfd __user *, ufds, unsigned int, nfds,$/;"	f
SYSCALL_DEFINE5	fs/select.c	/^SYSCALL_DEFINE5(select, int, n, fd_set __user *, inp, fd_set __user *, outp,$/;"	f
SYSCALL_DEFINE5	fs/xattr.c	/^SYSCALL_DEFINE5(fsetxattr, int, fd, const char __user *, name,$/;"	f
SYSCALL_DEFINE5	fs/xattr.c	/^SYSCALL_DEFINE5(lsetxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE5	fs/xattr.c	/^SYSCALL_DEFINE5(setxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE5	kernel/exit.c	/^SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,$/;"	f
SYSCALL_DEFINE5	kernel/fork.c	/^SYSCALL_DEFINE5(clone, unsigned long, clone_flags, unsigned long, newsp,$/;"	f
SYSCALL_DEFINE5	kernel/kcmp.c	/^SYSCALL_DEFINE5(kcmp, pid_t, pid1, pid_t, pid2, int, type,$/;"	f
SYSCALL_DEFINE5	kernel/sys.c	/^SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,$/;"	f
SYSCALL_DEFINE5	mm/fremap.c	/^SYSCALL_DEFINE5(remap_file_pages, unsigned long, start, unsigned long, size,$/;"	f
SYSCALL_DEFINE5	mm/mempolicy.c	/^SYSCALL_DEFINE5(get_mempolicy, int __user *, policy,$/;"	f
SYSCALL_DEFINE5	mm/mremap.c	/^SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,$/;"	f
SYSCALL_DEFINE5	mm/nommu.c	/^SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,$/;"	f
SYSCALL_DEFINE6	fs/eventpoll.c	/^SYSCALL_DEFINE6(epoll_pwait, int, epfd, struct epoll_event __user *, events,$/;"	f
SYSCALL_DEFINE6	fs/select.c	/^SYSCALL_DEFINE6(pselect6, int, n, fd_set __user *, inp, fd_set __user *, outp,$/;"	f
SYSCALL_DEFINE6	fs/splice.c	/^SYSCALL_DEFINE6(splice, int, fd_in, loff_t __user *, off_in,$/;"	f
SYSCALL_DEFINE6	kernel/futex.c	/^SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,$/;"	f
SYSCALL_DEFINE6	mm/mempolicy.c	/^SYSCALL_DEFINE6(mbind, unsigned long, start, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	mm/migrate.c	/^SYSCALL_DEFINE6(move_pages, pid_t, pid, unsigned long, nr_pages,$/;"	f
SYSCALL_DEFINE6	mm/mmap.c	/^SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	mm/nommu.c	/^SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	mm/process_vm_access.c	/^SYSCALL_DEFINE6(process_vm_readv, pid_t, pid, const struct iovec __user *, lvec,$/;"	f
SYSCALL_DEFINE6	mm/process_vm_access.c	/^SYSCALL_DEFINE6(process_vm_writev, pid_t, pid,$/;"	f
SZALIGNERROR	mm/scm.h	27;"	d
S_SHIFT	fs/ext3/namei.c	1070;"	d	file:
SyS_fadvise64	mm/fadvise.c	/^asmlinkage long SyS_fadvise64(long fd, loff_t offset, long len, long advice)$/;"	f
SyS_fadvise64_64	mm/fadvise.c	/^asmlinkage long SyS_fadvise64_64(long fd, loff_t offset, loff_t len, long advice)$/;"	f
SyS_fallocate	fs/open.c	/^asmlinkage long SyS_fallocate(long fd, long mode, loff_t offset, loff_t len)$/;"	f
SyS_ftruncate64	fs/open.c	/^asmlinkage long SyS_ftruncate64(long fd, loff_t length)$/;"	f
SyS_lookup_dcookie	fs/dcookies.c	/^asmlinkage long SyS_lookup_dcookie(u64 cookie64, long buf, long len)$/;"	f
SyS_pread64	fs/read_write.c	/^asmlinkage long SyS_pread64(long fd, long buf, long count, loff_t pos)$/;"	f
SyS_pwrite64	fs/read_write.c	/^asmlinkage long SyS_pwrite64(long fd, long buf, long count, loff_t pos)$/;"	f
SyS_readahead	mm/readahead.c	/^asmlinkage long SyS_readahead(long fd, loff_t offset, long count)$/;"	f
SyS_sync_file_range	fs/sync.c	/^asmlinkage long SyS_sync_file_range(long fd, loff_t offset, loff_t nbytes,$/;"	f
SyS_sync_file_range2	fs/sync.c	/^asmlinkage long SyS_sync_file_range2(long fd, long flags,$/;"	f
SyS_truncate64	fs/open.c	/^asmlinkage long SyS_truncate64(long path, loff_t length)$/;"	f
TASKSTATS_CPUMASK_MAXLEN	kernel/taskstats.c	38;"	d	file:
TASKSTATS_NEEDS_PADDING	kernel/taskstats.c	368;"	d	file:
TASK_RSS_EVENTS_THRESH	mm/memory.c	161;"	d	file:
TEA_transform	fs/ext3/hash.c	/^static void TEA_transform(__u32 buf[4], __u32 const in[])$/;"	f	file:
TEXTS_FOR_ZONES	mm/vmstat.c	698;"	d	file:
TEXT_FOR_DMA	mm/vmstat.c	681;"	d	file:
TEXT_FOR_DMA	mm/vmstat.c	683;"	d	file:
TEXT_FOR_DMA32	mm/vmstat.c	687;"	d	file:
TEXT_FOR_DMA32	mm/vmstat.c	689;"	d	file:
TEXT_FOR_HIGHMEM	mm/vmstat.c	693;"	d	file:
TEXT_FOR_HIGHMEM	mm/vmstat.c	695;"	d	file:
THREAD_CLOCK	kernel/posix-cpu-timers.c	1538;"	d	file:
THRESHOLDS_EVENTS_TARGET	mm/memcontrol.c	143;"	d	file:
TID_STEP	mm/slub.c	1669;"	d	file:
TID_STEP	mm/slub.c	1675;"	d	file:
TMPBUFLEN	kernel/sysctl.c	1755;"	d	file:
TMPBUFLEN	kernel/sysctl.c	1847;"	d	file:
TOP_OF_ARGS	fs/binfmt_flat.c	880;"	d	file:
TORTURE_FLAG	kernel/rcutorture.c	122;"	d	file:
TRACEPOINT_HASH_BITS	kernel/tracepoint.c	51;"	d	file:
TRACEPOINT_TABLE_SIZE	kernel/tracepoint.c	52;"	d	file:
TRACK_ADDRS_COUNT	mm/slub.c	187;"	d	file:
TRACK_ALLOC	mm/slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	e	enum:track_item	file:
TRACK_FREE	mm/slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	e	enum:track_item	file:
TVN_BITS	kernel/timer.c	61;"	d	file:
TVN_MASK	kernel/timer.c	65;"	d	file:
TVN_SIZE	kernel/timer.c	63;"	d	file:
TVR_BITS	kernel/timer.c	62;"	d	file:
TVR_MASK	kernel/timer.c	66;"	d	file:
TVR_SIZE	kernel/timer.c	64;"	d	file:
UIDHASH_BITS	kernel/user.c	64;"	d	file:
UIDHASH_MASK	kernel/user.c	66;"	d	file:
UIDHASH_SZ	kernel/user.c	65;"	d	file:
UNLOADED_LIB	fs/binfmt_flat.c	73;"	d	file:
UNSTABLE_FLAG	mm/ksm.c	182;"	d	file:
UP	mm/slab.h	/^	UP,			\/* Slab caches usable but not all extras yet *\/$/;"	e	enum:slab_state
USEC_TO_HZ_ADJ32	kernel/timeconst.h	29;"	d
USEC_TO_HZ_DEN	kernel/timeconst.h	34;"	d
USEC_TO_HZ_MUL32	kernel/timeconst.h	28;"	d
USEC_TO_HZ_NUM	kernel/timeconst.h	33;"	d
USEC_TO_HZ_SHR32	kernel/timeconst.h	30;"	d
Unused_file	mm/swapfile.c	/^static const char Unused_file[] = "Unused swap file entry ";$/;"	v	file:
Unused_offset	mm/swapfile.c	/^static const char Unused_offset[] = "Unused swap offset entry ";$/;"	v	file:
VALID_FLAGS	fs/sync.c	20;"	d	file:
VALUE_HASH_SHIFT	fs/ext3/xattr.c	1249;"	d	file:
VALUE_HASH_SHIFT	fs/ext3/xattr.c	1283;"	d	file:
VERBOSE	kernel/lockdep.c	335;"	d	file:
VERBOSE_PRINTK_ERRSTRING	kernel/rcutorture.c	127;"	d	file:
VERBOSE_PRINTK_STRING	kernel/rcutorture.c	125;"	d	file:
VERBOSE_STATUS	fs/binfmt_misc.c	/^	VERBOSE_STATUS = 1 \/* make it zero to save 400 bytes kernel memory *\/$/;"	e	enum:__anon23	file:
VERY_VERBOSE	kernel/lockdep.c	336;"	d	file:
VFAT_IOCTL_READDIR_BOTH32	fs/compat_ioctl.c	1409;"	d	file:
VFAT_IOCTL_READDIR_SHORT32	fs/compat_ioctl.c	1410;"	d	file:
VIRTADDROLAP	mm/scm.h	23;"	d
VMALLOC_PAGES	mm/vmalloc.c	730;"	d	file:
VMALLOC_SPACE	mm/vmalloc.c	725;"	d	file:
VMALLOC_SPACE	mm/vmalloc.c	727;"	d	file:
VMAP_BBMAP_BITS	mm/vmalloc.c	736;"	d	file:
VMAP_BBMAP_BITS_MAX	mm/vmalloc.c	732;"	d	file:
VMAP_BBMAP_BITS_MIN	mm/vmalloc.c	733;"	d	file:
VMAP_BLOCK_SIZE	mm/vmalloc.c	741;"	d	file:
VMAP_MAX	mm/vmalloc.c	735;"	d	file:
VMAP_MAX_ALLOC	mm/vmalloc.c	731;"	d	file:
VMAP_MIN	mm/vmalloc.c	734;"	d	file:
VM_ACCT	mm/shmem.c	72;"	d	file:
VM_COMPLETIONS_PERIOD_LEN	mm/page-writeback.c	153;"	d	file:
VM_LAZY_FREE	mm/vmalloc.c	256;"	d	file:
VM_LAZY_FREEING	mm/vmalloc.c	257;"	d	file:
VM_NO_THP	mm/huge_memory.c	1838;"	d	file:
VM_VM_AREA	mm/vmalloc.c	258;"	d	file:
WARN_ONCE_HASH_BITS	kernel/sysctl_binary.c	1371;"	d	file:
WARN_ONCE_HASH_SIZE	kernel/sysctl_binary.c	1372;"	d	file:
WORKER_CPU_INTENSIVE	kernel/workqueue.c	/^	WORKER_CPU_INTENSIVE	= 1 << 6,	\/* cpu intensive *\/$/;"	e	enum:__anon65	file:
WORKER_DIE	kernel/workqueue.c	/^	WORKER_DIE		= 1 << 1,	\/* die die die *\/$/;"	e	enum:__anon65	file:
WORKER_IDLE	kernel/workqueue.c	/^	WORKER_IDLE		= 1 << 2,	\/* is idle *\/$/;"	e	enum:__anon65	file:
WORKER_NOT_RUNNING	kernel/workqueue.c	/^	WORKER_NOT_RUNNING	= WORKER_PREP | WORKER_UNBOUND |$/;"	e	enum:__anon65	file:
WORKER_PREP	kernel/workqueue.c	/^	WORKER_PREP		= 1 << 3,	\/* preparing to run works *\/$/;"	e	enum:__anon65	file:
WORKER_STARTED	kernel/workqueue.c	/^	WORKER_STARTED		= 1 << 0,	\/* started *\/$/;"	e	enum:__anon65	file:
WORKER_UNBOUND	kernel/workqueue.c	/^	WORKER_UNBOUND		= 1 << 7,	\/* worker is unbound *\/$/;"	e	enum:__anon65	file:
WRITEBACK_TAG_BATCH	mm/page-writeback.c	1688;"	d	file:
XFORM	fs/compat_ioctl.c	812;"	d	file:
ZONELIST_ORDER_DEFAULT	mm/page_alloc.c	3176;"	d	file:
ZONELIST_ORDER_NODE	mm/page_alloc.c	3177;"	d	file:
ZONELIST_ORDER_ZONE	mm/page_alloc.c	3178;"	d	file:
ZONE_RECLAIM_FULL	mm/internal.h	343;"	d
ZONE_RECLAIM_NOSCAN	mm/internal.h	342;"	d
ZONE_RECLAIM_PRIORITY	mm/vmscan.c	3244;"	d	file:
ZONE_RECLAIM_SOME	mm/internal.h	344;"	d
ZONE_RECLAIM_SUCCESS	mm/internal.h	345;"	d
_FS_COREDUMP_H	fs/coredump.h	2;"	d
_KERNEL_WORKQUEUE_INTERNAL_H	kernel/workqueue_internal.h	8;"	d
_KMEM	mm/memcontrol.c	/^	_KMEM,$/;"	e	enum:res_type	file:
_LINUX_LIST_H	include/linux/list.h	2;"	d
_LINUX_PAGEMAP_H	include/linux/pagemap.h	2;"	d
_LINUX_PNODE_H	fs/pnode.h	9;"	d
_MEM	mm/memcontrol.c	/^	_MEM,$/;"	e	enum:res_type	file:
_MEMSWAP	mm/memcontrol.c	/^	_MEMSWAP,$/;"	e	enum:res_type	file:
_OOM_TYPE	mm/memcontrol.c	/^	_OOM_TYPE,$/;"	e	enum:res_type	file:
__ATTR_RW	mm/backing-dev.c	234;"	d	file:
__CMPXCHG_DOUBLE	mm/slub.c	178;"	d	file:
__COMPAT_NFDBITS	fs/compat.c	1294;"	d	file:
__DVB_CORE__	fs/compat_ioctl.c	107;"	d	file:
__GENERATING_BOUNDS_H	kernel/bounds.c	7;"	d	file:
__KERNEL_RTMUTEX_COMMON_H	kernel/rtmutex_common.h	13;"	d
__LINUX_RCU_H	kernel/rcu.h	24;"	d
__LINUX_SPINLOCK_H	include/linux/spinlock.h	2;"	d
__LOCKF	kernel/lockdep_internals.h	/^	__LOCKF(USED)$/;"	e	enum:__anon59
__LOCKF	kernel/lockdep_internals.h	27;"	d
__LOG_BUF_LEN	kernel/printk.c	258;"	d	file:
__MM_INTERNAL_H	mm/internal.h	12;"	d
__OBJECT_POISON	mm/slub.c	177;"	d	file:
__USAGE	kernel/lockdep.c	451;"	d	file:
____cache_alloc	mm/slab.c	/^static inline void *____cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
____cache_alloc_node	mm/slab.c	/^static inline void *____cache_alloc_node(struct kmem_cache *cachep,$/;"	f	file:
____cache_alloc_node	mm/slab.c	/^static void *____cache_alloc_node(struct kmem_cache *cachep, gfp_t flags,$/;"	f	file:
____cacheline_aligned	kernel/softirq.c	/^irq_cpustat_t irq_stat[NR_CPUS] ____cacheline_aligned;$/;"	v
____cacheline_aligned	kernel/timer.c	/^} ____cacheline_aligned;$/;"	v	typeref:struct:tvec_base
____cacheline_aligned_in_smp	fs/direct-io.c	/^} ____cacheline_aligned_in_smp;$/;"	v	typeref:struct:dio
____cacheline_aligned_in_smp	kernel/kprobes.c	/^	raw_spinlock_t lock ____cacheline_aligned_in_smp;$/;"	m	struct:__anon58	file:
____cacheline_aligned_in_smp	kernel/workqueue.c	/^	atomic_t		nr_running ____cacheline_aligned_in_smp;$/;"	m	struct:worker_pool	file:
____cacheline_aligned_in_smp	kernel/workqueue.c	/^} ____cacheline_aligned_in_smp;$/;"	v	typeref:struct:worker_pool
____cacheline_aligned_in_smp	mm/mmap.c	/^struct percpu_counter vm_committed_as ____cacheline_aligned_in_smp;$/;"	v	typeref:struct:vm_committed_as
____cacheline_internodealigned_in_smp	kernel/rcutree.h	/^	raw_spinlock_t fqslock ____cacheline_internodealigned_in_smp;$/;"	m	struct:rcu_node
____cacheline_internodealigned_in_smp	kernel/rcutree.h	/^	raw_spinlock_t orphan_lock ____cacheline_internodealigned_in_smp;$/;"	m	struct:rcu_state
____cacheline_internodealigned_in_smp	kernel/rcutree.h	/^	u8	fqs_state ____cacheline_internodealigned_in_smp;$/;"	m	struct:rcu_state
____cacheline_internodealigned_in_smp	kernel/rcutree.h	/^} ____cacheline_internodealigned_in_smp;$/;"	v	typeref:struct:rcu_node
____cacheline_internodealigned_in_smp	mm/sparse.c	/^	____cacheline_internodealigned_in_smp;$/;"	v	typeref:struct:mem_section
____call_usermodehelper	kernel/kmod.c	/^static int ____call_usermodehelper(void *data)$/;"	f	file:
____fput	fs/file_table.c	/^static void ____fput(struct callback_head *work)$/;"	f	file:
___alloc_bootmem	mm/bootmem.c	/^static void * __init ___alloc_bootmem(unsigned long size, unsigned long align,$/;"	f	file:
___alloc_bootmem	mm/nobootmem.c	/^static void * __init ___alloc_bootmem(unsigned long size, unsigned long align,$/;"	f	file:
___alloc_bootmem_node	mm/bootmem.c	/^void * __init ___alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,$/;"	f
___alloc_bootmem_node	mm/nobootmem.c	/^void * __init ___alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,$/;"	f
___alloc_bootmem_node_nopanic	mm/bootmem.c	/^void * __init ___alloc_bootmem_node_nopanic(pg_data_t *pgdat,$/;"	f
___alloc_bootmem_node_nopanic	mm/nobootmem.c	/^void * __init ___alloc_bootmem_node_nopanic(pg_data_t *pgdat,$/;"	f
___alloc_bootmem_nopanic	mm/bootmem.c	/^static void * __init ___alloc_bootmem_nopanic(unsigned long size,$/;"	f	file:
___alloc_bootmem_nopanic	mm/nobootmem.c	/^static void * __init ___alloc_bootmem_nopanic(unsigned long size,$/;"	f	file:
__absent_pages_in_range	mm/page_alloc.c	/^unsigned long __meminit __absent_pages_in_range(int nid,$/;"	f
__ac_get_obj	mm/slab.c	/^static void *__ac_get_obj(struct kmem_cache *cachep, struct array_cache *ac,$/;"	f	file:
__ac_put_obj	mm/slab.c	/^static void *__ac_put_obj(struct kmem_cache *cachep, struct array_cache *ac,$/;"	f	file:
__access_remote_vm	mm/memory.c	/^static int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,$/;"	f	file:
__access_remote_vm	mm/nommu.c	/^static int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,$/;"	f	file:
__account_scheduler_latency	kernel/latencytop.c	/^__account_scheduler_latency(struct task_struct *tsk, int usecs, int inter)$/;"	f
__acct_update_integrals	kernel/tsacct.c	/^static void __acct_update_integrals(struct task_struct *tsk,$/;"	f	file:
__acquires	include/linux/spinlock.h	/^do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags) __acquires(lock)$/;"	f
__acquires	include/linux/spinlock.h	/^static inline void do_raw_spin_lock(raw_spinlock_t *lock) __acquires(lock)$/;"	f
__acquires	kernel/cgroup.c	/^	__acquires(css_set_lock)$/;"	f
__acquires	kernel/kprobes.c	/^__acquires(hlist_lock)$/;"	f
__acquires	kernel/rcutorture.c	/^static int rcu_bh_torture_read_lock(void) __acquires(RCU_BH)$/;"	f
__acquires	kernel/rcutorture.c	/^static int rcu_torture_read_lock(void) __acquires(RCU)$/;"	f
__acquires	kernel/resource.c	/^	__acquires(resource_lock)$/;"	f
__activate_page	mm/swap.c	/^static void __activate_page(struct page *page, struct lruvec *lruvec,$/;"	f	file:
__add_pages	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__add_pages);$/;"	v
__add_pages	mm/memory_hotplug.c	/^int __ref __add_pages(int nid, struct zone *zone, unsigned long phys_start_pfn,$/;"	f
__add_preferred_console	kernel/printk.c	/^static int __add_preferred_console(char *name, int idx, char *options,$/;"	f	file:
__add_section	mm/memory_hotplug.c	/^static int __meminit __add_section(int nid, struct zone *zone,$/;"	f	file:
__add_to_swap_cache	mm/swap_state.c	/^static int __add_to_swap_cache(struct page *page, swp_entry_t entry)$/;"	f	file:
__add_zone	mm/memory_hotplug.c	/^static int __meminit __add_zone(struct zone *zone, unsigned long phys_start_pfn)$/;"	f	file:
__addr_to_pcpu_ptr	mm/percpu.c	83;"	d	file:
__addr_to_pcpu_ptr	mm/percpu.c	96;"	d	file:
__aio_get_req	fs/aio.c	/^static struct kiocb *__aio_get_req(struct kioctx *ctx)$/;"	f	file:
__aio_put_req	fs/aio.c	/^static int __aio_put_req(struct kioctx *ctx, struct kiocb *req)$/;"	f	file:
__aio_run_iocbs	fs/aio.c	/^static int __aio_run_iocbs(struct kioctx *ctx)$/;"	f	file:
__alloc_bootmem	mm/bootmem.c	/^void * __init __alloc_bootmem(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem	mm/nobootmem.c	/^void * __init __alloc_bootmem(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem_low	mm/bootmem.c	/^void * __init __alloc_bootmem_low(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem_low	mm/nobootmem.c	/^void * __init __alloc_bootmem_low(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem_low_node	mm/bootmem.c	/^void * __init __alloc_bootmem_low_node(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_low_node	mm/nobootmem.c	/^void * __init __alloc_bootmem_low_node(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_low_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_low_nopanic(unsigned long size,$/;"	f
__alloc_bootmem_low_nopanic	mm/nobootmem.c	/^void * __init __alloc_bootmem_low_nopanic(unsigned long size,$/;"	f
__alloc_bootmem_node	mm/bootmem.c	/^void * __init __alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node	mm/nobootmem.c	/^void * __init __alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node_high	mm/bootmem.c	/^void * __init __alloc_bootmem_node_high(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node_high	mm/nobootmem.c	/^void * __init __alloc_bootmem_node_high(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_node_nopanic(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node_nopanic	mm/nobootmem.c	/^void * __init __alloc_bootmem_node_nopanic(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_nopanic(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem_nopanic	mm/nobootmem.c	/^void * __init __alloc_bootmem_nopanic(unsigned long size, unsigned long align,$/;"	f
__alloc_contig_migrate_range	mm/page_alloc.c	/^static int __alloc_contig_migrate_range(struct compact_control *cc,$/;"	f	file:
__alloc_fd	fs/file.c	/^int __alloc_fd(struct files_struct *files,$/;"	f
__alloc_memory_core_early	mm/nobootmem.c	/^static void * __init __alloc_memory_core_early(int nid, u64 size, u64 align,$/;"	f	file:
__alloc_pages_direct_compact	mm/page_alloc.c	/^__alloc_pages_direct_compact(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_direct_reclaim	mm/page_alloc.c	/^__alloc_pages_direct_reclaim(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_high_priority	mm/page_alloc.c	/^__alloc_pages_high_priority(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_may_oom	mm/page_alloc.c	/^__alloc_pages_may_oom(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_nodemask	mm/page_alloc.c	/^EXPORT_SYMBOL(__alloc_pages_nodemask);$/;"	v
__alloc_pages_nodemask	mm/page_alloc.c	/^__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,$/;"	f
__alloc_pages_slowpath	mm/page_alloc.c	/^__alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_percpu	mm/percpu.c	/^EXPORT_SYMBOL_GPL(__alloc_percpu);$/;"	v
__alloc_percpu	mm/percpu.c	/^void __percpu *__alloc_percpu(size_t size, size_t align)$/;"	f
__alloc_reserved_percpu	mm/percpu.c	/^void __percpu *__alloc_reserved_percpu(size_t size, size_t align)$/;"	f
__alloc_workqueue_key	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(__alloc_workqueue_key);$/;"	v
__alloc_workqueue_key	kernel/workqueue.c	/^struct workqueue_struct *__alloc_workqueue_key(const char *fmt,$/;"	f
__arm_kprobe	kernel/kprobes.c	/^static void __kprobes __arm_kprobe(struct kprobe *p)$/;"	f	file:
__arm_kprobe	kernel/kprobes.c	909;"	d	file:
__async_schedule	kernel/async.c	/^static async_cookie_t __async_schedule(async_func_ptr *ptr, void *data, struct async_domain *domain)$/;"	f	file:
__atomic_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__atomic_notifier_call_chain);$/;"	v
__atomic_notifier_call_chain	kernel/notifier.c	/^int __kprobes __atomic_notifier_call_chain(struct atomic_notifier_head *nh,$/;"	f
__audit_bprm	kernel/auditsc.c	/^int __audit_bprm(struct linux_binprm *bprm)$/;"	f
__audit_fd_pair	kernel/auditsc.c	/^void __audit_fd_pair(int fd1, int fd2)$/;"	f
__audit_free	kernel/auditsc.c	/^void __audit_free(struct task_struct *tsk)$/;"	f
__audit_getname	kernel/auditsc.c	/^void __audit_getname(struct filename *name)$/;"	f
__audit_inode	kernel/auditsc.c	/^void __audit_inode(struct filename *name, const struct dentry *dentry,$/;"	f
__audit_inode_child	kernel/auditsc.c	/^EXPORT_SYMBOL_GPL(__audit_inode_child);$/;"	v
__audit_inode_child	kernel/auditsc.c	/^void __audit_inode_child(const struct inode *parent,$/;"	f
__audit_ipc_obj	kernel/auditsc.c	/^void __audit_ipc_obj(struct kern_ipc_perm *ipcp)$/;"	f
__audit_ipc_set_perm	kernel/auditsc.c	/^void __audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, umode_t mode)$/;"	f
__audit_log_bprm_fcaps	kernel/auditsc.c	/^int __audit_log_bprm_fcaps(struct linux_binprm *bprm,$/;"	f
__audit_log_capset	kernel/auditsc.c	/^void __audit_log_capset(pid_t pid,$/;"	f
__audit_mmap_fd	kernel/auditsc.c	/^void __audit_mmap_fd(int fd, int flags)$/;"	f
__audit_mq_getsetattr	kernel/auditsc.c	/^void __audit_mq_getsetattr(mqd_t mqdes, struct mq_attr *mqstat)$/;"	f
__audit_mq_notify	kernel/auditsc.c	/^void __audit_mq_notify(mqd_t mqdes, const struct sigevent *notification)$/;"	f
__audit_mq_open	kernel/auditsc.c	/^void __audit_mq_open(int oflag, umode_t mode, struct mq_attr *attr)$/;"	f
__audit_mq_sendrecv	kernel/auditsc.c	/^void __audit_mq_sendrecv(mqd_t mqdes, size_t msg_len, unsigned int msg_prio,$/;"	f
__audit_ptrace	kernel/auditsc.c	/^void __audit_ptrace(struct task_struct *t)$/;"	f
__audit_reusename	kernel/auditsc.c	/^__audit_reusename(const __user char *uptr)$/;"	f
__audit_seccomp	kernel/auditsc.c	/^void __audit_seccomp(unsigned long syscall, long signr, int code)$/;"	f
__audit_signal_info	kernel/auditsc.c	/^int __audit_signal_info(int sig, struct task_struct *t)$/;"	f
__audit_sockaddr	kernel/auditsc.c	/^int __audit_sockaddr(int len, void *a)$/;"	f
__audit_socketcall	kernel/auditsc.c	/^void __audit_socketcall(int nargs, unsigned long *args)$/;"	f
__audit_syscall_entry	kernel/auditsc.c	/^void __audit_syscall_entry(int arch, int major,$/;"	f
__audit_syscall_exit	kernel/auditsc.c	/^void __audit_syscall_exit(int success, long return_code)$/;"	f
__bd_forget	fs/block_dev.c	/^static inline void __bd_forget(struct inode *inode)$/;"	f	file:
__bdi_start_writeback	fs/fs-writeback.c	/^__bdi_start_writeback(struct backing_dev_info *bdi, long nr_pages,$/;"	f	file:
__bdi_update_bandwidth	mm/page-writeback.c	/^void __bdi_update_bandwidth(struct backing_dev_info *bdi,$/;"	f
__bdi_writeout_inc	mm/page-writeback.c	/^static inline void __bdi_writeout_inc(struct backing_dev_info *bdi)$/;"	f	file:
__bforget	fs/buffer.c	/^EXPORT_SYMBOL(__bforget);$/;"	v
__bforget	fs/buffer.c	/^void __bforget(struct buffer_head *bh)$/;"	f
__bfs	kernel/lockdep.c	/^static int __bfs(struct lock_list *source_entry,$/;"	f	file:
__bfs_backwards	kernel/lockdep.c	/^static inline int __bfs_backwards(struct lock_list *src_entry,$/;"	f	file:
__bfs_forwards	kernel/lockdep.c	/^static inline int __bfs_forwards(struct lock_list *src_entry,$/;"	f	file:
__bio_add_page	fs/bio.c	/^static int __bio_add_page(struct request_queue *q, struct bio *bio, struct page$/;"	f	file:
__bio_clone	fs/bio.c	/^EXPORT_SYMBOL(__bio_clone);$/;"	v
__bio_clone	fs/bio.c	/^void __bio_clone(struct bio *bio, struct bio *bio_src)$/;"	f
__bio_copy_iov	fs/bio.c	/^static int __bio_copy_iov(struct bio *bio, struct bio_vec *iovecs,$/;"	f	file:
__bio_free	fs/bio.c	/^static void __bio_free(struct bio *bio)$/;"	f	file:
__bio_map_kern	fs/bio.c	/^static struct bio *__bio_map_kern(struct request_queue *q, void *data,$/;"	f	file:
__bio_map_user_iov	fs/bio.c	/^static struct bio *__bio_map_user_iov(struct request_queue *q,$/;"	f	file:
__bio_unmap_user	fs/bio.c	/^static void __bio_unmap_user(struct bio *bio)$/;"	f	file:
__blk_queue_bounce	mm/bounce.c	/^static void __blk_queue_bounce(struct request_queue *q, struct bio **bio_orig,$/;"	f	file:
__blkdev_get	fs/block_dev.c	/^static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)$/;"	f	file:
__blkdev_put	fs/block_dev.c	/^static int __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part)$/;"	f	file:
__block_commit_write	fs/buffer.c	/^static int __block_commit_write(struct inode *inode, struct page *page,$/;"	f	file:
__block_page_mkwrite	fs/buffer.c	/^EXPORT_SYMBOL(__block_page_mkwrite);$/;"	v
__block_page_mkwrite	fs/buffer.c	/^int __block_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf,$/;"	f
__block_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(__block_write_begin);$/;"	v
__block_write_begin	fs/buffer.c	/^int __block_write_begin(struct page *page, loff_t pos, unsigned len,$/;"	f
__block_write_full_page	fs/buffer.c	/^static int __block_write_full_page(struct inode *inode, struct page *page,$/;"	f	file:
__blockdev_direct_IO	fs/direct-io.c	/^EXPORT_SYMBOL(__blockdev_direct_IO);$/;"	v
__blockdev_direct_IO	fs/direct-io.c	/^__blockdev_direct_IO(int rw, struct kiocb *iocb, struct inode *inode,$/;"	f
__blocking_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__blocking_notifier_call_chain);$/;"	v
__blocking_notifier_call_chain	kernel/notifier.c	/^int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,$/;"	f
__bounce_end_io_read	mm/bounce.c	/^static void __bounce_end_io_read(struct bio *bio, mempool_t *pool, int err)$/;"	f	file:
__bprm_mm_init	fs/exec.c	/^static int __bprm_mm_init(struct linux_binprm *bprm)$/;"	f	file:
__bread	fs/buffer.c	/^EXPORT_SYMBOL(__bread);$/;"	v
__bread	fs/buffer.c	/^__bread(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__bread_slow	fs/buffer.c	/^static struct buffer_head *__bread_slow(struct buffer_head *bh)$/;"	f	file:
__breadahead	fs/buffer.c	/^EXPORT_SYMBOL(__breadahead);$/;"	v
__breadahead	fs/buffer.c	/^void __breadahead(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__break_lease	fs/locks.c	/^EXPORT_SYMBOL(__break_lease);$/;"	v
__break_lease	fs/locks.c	/^int __break_lease(struct inode *inode, unsigned int mode)$/;"	f
__brelse	fs/buffer.c	/^EXPORT_SYMBOL(__brelse);$/;"	v
__brelse	fs/buffer.c	/^void __brelse(struct buffer_head * buf)$/;"	f
__build_all_zonelists	mm/page_alloc.c	/^static int __build_all_zonelists(void *data)$/;"	f	file:
__cache_free	mm/slab.c	/^static inline void __cache_free(struct kmem_cache *cachep, void *objp,$/;"	f	file:
__cache_shrink	mm/slab.c	/^static int __cache_shrink(struct kmem_cache *cachep)$/;"	f	file:
__cacheline_aligned	mm/sparse.c	/^static u16 section_to_node_table[NR_MEM_SECTIONS] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned	mm/sparse.c	/^static u8 section_to_node_table[NR_MEM_SECTIONS] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned_in_smp	fs/file_table.c	/^static struct percpu_counter nr_files __cacheline_aligned_in_smp;$/;"	v	typeref:struct:nr_files	file:
__cacheline_aligned_in_smp	kernel/softirq.c	/^static struct softirq_action softirq_vec[NR_SOFTIRQS] __cacheline_aligned_in_smp;$/;"	v	typeref:struct:softirq_vec	file:
__cacheline_aligned_in_smp	kernel/timer.c	/^u64 jiffies_64 __cacheline_aligned_in_smp = INITIAL_JIFFIES;$/;"	v
__cacheline_aligned_in_smp	mm/vmstat.c	/^atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS] __cacheline_aligned_in_smp;$/;"	v
__call_rcu	kernel/rcutiny.c	/^static void __call_rcu(struct rcu_head *head,$/;"	f	file:
__call_rcu	kernel/rcutree.c	/^__call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu),$/;"	f	file:
__call_rcu_core	kernel/rcutree.c	/^static void __call_rcu_core(struct rcu_state *rsp, struct rcu_data *rdp,$/;"	f	file:
__call_rcu_nocb	kernel/rcutree_plugin.h	/^static bool __call_rcu_nocb(struct rcu_data *rdp, struct rcu_head *rhp,$/;"	f
__call_rcu_nocb_enqueue	kernel/rcutree_plugin.h	/^static void __call_rcu_nocb_enqueue(struct rcu_data *rdp,$/;"	f
__call_usermodehelper	kernel/kmod.c	/^static void __call_usermodehelper(struct work_struct *work)$/;"	f	file:
__cancel_work_timer	kernel/workqueue.c	/^static bool __cancel_work_timer(struct work_struct *work, bool is_dwork)$/;"	f	file:
__cap_empty_set	kernel/capability.c	/^EXPORT_SYMBOL(__cap_empty_set);$/;"	v
__cap_empty_set	kernel/capability.c	/^const kernel_cap_t __cap_empty_set = CAP_EMPTY_SET;$/;"	v
__chainhashfn	kernel/lockdep.c	303;"	d	file:
__change_pid	kernel/pid.c	/^static void __change_pid(struct task_struct *task, enum pid_type type,$/;"	f	file:
__check_region	kernel/resource.c	/^EXPORT_SYMBOL(__check_region);$/;"	v
__check_region	kernel/resource.c	/^int __check_region(struct resource *parent, resource_size_t start,$/;"	f
__classhashfn	kernel/lockdep.c	292;"	d	file:
__cleancache_get_page	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_get_page);$/;"	v
__cleancache_get_page	mm/cleancache.c	/^int __cleancache_get_page(struct page *page)$/;"	f
__cleancache_init_fs	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_init_fs);$/;"	v
__cleancache_init_fs	mm/cleancache.c	/^void __cleancache_init_fs(struct super_block *sb)$/;"	f
__cleancache_init_shared_fs	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_init_shared_fs);$/;"	v
__cleancache_init_shared_fs	mm/cleancache.c	/^void __cleancache_init_shared_fs(char *uuid, struct super_block *sb)$/;"	f
__cleancache_invalidate_fs	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_invalidate_fs);$/;"	v
__cleancache_invalidate_fs	mm/cleancache.c	/^void __cleancache_invalidate_fs(struct super_block *sb)$/;"	f
__cleancache_invalidate_inode	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_invalidate_inode);$/;"	v
__cleancache_invalidate_inode	mm/cleancache.c	/^void __cleancache_invalidate_inode(struct address_space *mapping)$/;"	f
__cleancache_invalidate_page	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_invalidate_page);$/;"	v
__cleancache_invalidate_page	mm/cleancache.c	/^void __cleancache_invalidate_page(struct address_space *mapping,$/;"	f
__cleancache_put_page	mm/cleancache.c	/^EXPORT_SYMBOL(__cleancache_put_page);$/;"	v
__cleancache_put_page	mm/cleancache.c	/^void __cleancache_put_page(struct page *page)$/;"	f
__cleanup_sighand	kernel/fork.c	/^void __cleanup_sighand(struct sighand_struct *sighand)$/;"	f
__clear_close_on_exec	fs/file.c	/^static inline void __clear_close_on_exec(int fd, struct fdtable *fdt)$/;"	f	file:
__clear_open_fd	fs/file.c	/^static inline void __clear_open_fd(int fd, struct fdtable *fdt)$/;"	f	file:
__clear_page_buffers	fs/buffer.c	/^__clear_page_buffers(struct page *page)$/;"	f	file:
__clear_page_locked	include/linux/pagemap.h	/^static inline void __clear_page_locked(struct page *page)$/;"	f
__close_fd	fs/file.c	/^int __close_fd(struct files_struct *files, unsigned fd)$/;"	f
__cmpxchg_double_slab	mm/slub.c	/^static inline bool __cmpxchg_double_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
__collapse_huge_page_copy	mm/huge_memory.c	/^static void __collapse_huge_page_copy(pte_t *pte, struct page *page,$/;"	f	file:
__collapse_huge_page_isolate	mm/huge_memory.c	/^static int __collapse_huge_page_isolate(struct vm_area_struct *vma,$/;"	f	file:
__compact_pgdat	mm/compaction.c	/^static void __compact_pgdat(pg_data_t *pgdat, struct compact_control *cc)$/;"	f	file:
__compat_save_altstack	kernel/signal.c	/^int __compat_save_altstack(compat_stack_t __user *uss, unsigned long sp)$/;"	f
__cpu_notify	kernel/cpu.c	/^static int __cpu_notify(unsigned long val, void *v, int nr_to_call,$/;"	f	file:
__cpuset_memory_pressure_bump	kernel/cpuset.c	/^void __cpuset_memory_pressure_bump(void)$/;"	f
__cpuset_node_allowed_hardwall	kernel/cpuset.c	/^int __cpuset_node_allowed_hardwall(int node, gfp_t gfp_mask)$/;"	f
__cpuset_node_allowed_softwall	kernel/cpuset.c	/^int __cpuset_node_allowed_softwall(int node, gfp_t gfp_mask)$/;"	f
__cq_dequeue	kernel/lockdep.c	/^static inline int __cq_dequeue(struct circular_queue *cq, unsigned long *elem)$/;"	f	file:
__cq_empty	kernel/lockdep.c	/^static inline int __cq_empty(struct circular_queue *cq)$/;"	f	file:
__cq_enqueue	kernel/lockdep.c	/^static inline int __cq_enqueue(struct circular_queue *cq, unsigned long elem)$/;"	f	file:
__cq_full	kernel/lockdep.c	/^static inline int __cq_full(struct circular_queue *cq)$/;"	f	file:
__cq_get_elem_count	kernel/lockdep.c	/^static inline unsigned int  __cq_get_elem_count(struct circular_queue *cq)$/;"	f	file:
__cq_init	kernel/lockdep.c	/^static inline void __cq_init(struct circular_queue *cq)$/;"	f	file:
__css_put	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(__css_put);$/;"	v
__css_put	kernel/cgroup.c	/^void __css_put(struct cgroup_subsys_state *css)$/;"	f
__css_tryget	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(__css_tryget);$/;"	v
__css_tryget	kernel/cgroup.c	/^bool __css_tryget(struct cgroup_subsys_state *css)$/;"	f
__d_alloc	fs/dcache.c	/^struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name)$/;"	f
__d_cfe	kernel/cgroup.c	/^static inline struct cfent *__d_cfe(struct dentry *dentry)$/;"	f	file:
__d_cft	kernel/cgroup.c	/^static inline struct cftype *__d_cft(struct dentry *dentry)$/;"	f	file:
__d_cgrp	kernel/cgroup.c	/^static inline struct cgroup *__d_cgrp(struct dentry *dentry)$/;"	f	file:
__d_drop	fs/dcache.c	/^EXPORT_SYMBOL(__d_drop);$/;"	v
__d_drop	fs/dcache.c	/^void __d_drop(struct dentry *dentry)$/;"	f
__d_find_alias	fs/dcache.c	/^static struct dentry *__d_find_alias(struct inode *inode, int want_discon)$/;"	f	file:
__d_find_any_alias	fs/dcache.c	/^static struct dentry * __d_find_any_alias(struct inode *inode)$/;"	f	file:
__d_free	fs/dcache.c	/^static void __d_free(struct rcu_head *head)$/;"	f	file:
__d_instantiate	fs/dcache.c	/^static void __d_instantiate(struct dentry *dentry, struct inode *inode)$/;"	f	file:
__d_instantiate_unique	fs/dcache.c	/^static struct dentry *__d_instantiate_unique(struct dentry *entry,$/;"	f	file:
__d_lookup	fs/dcache.c	/^struct dentry *__d_lookup(const struct dentry *parent, const struct qstr *name)$/;"	f
__d_lookup_rcu	fs/dcache.c	/^struct dentry *__d_lookup_rcu(const struct dentry *parent,$/;"	f
__d_materialise_dentry	fs/dcache.c	/^static void __d_materialise_dentry(struct dentry *dentry, struct dentry *anon)$/;"	f	file:
__d_move	fs/dcache.c	/^static void __d_move(struct dentry * dentry, struct dentry * target)$/;"	f	file:
__d_path	fs/dcache.c	/^char *__d_path(const struct path *path,$/;"	f
__d_rehash	fs/dcache.c	/^static void __d_rehash(struct dentry * entry, struct hlist_bl_head *b)$/;"	f	file:
__d_shrink	fs/dcache.c	/^static void __d_shrink(struct dentry *dentry)$/;"	f	file:
__d_unalias	fs/dcache.c	/^static struct dentry *__d_unalias(struct inode *inode,$/;"	f	file:
__d_xattrs	kernel/cgroup.c	/^static struct simple_xattrs *__d_xattrs(struct dentry *dentry)$/;"	f	file:
__debug_atomic_inc	kernel/lockdep_internals.h	142;"	d
__debug_atomic_inc	kernel/lockdep_internals.h	166;"	d
__dec_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(__dec_zone_page_state);$/;"	v
__dec_zone_page_state	mm/vmstat.c	/^void __dec_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
__dec_zone_state	mm/vmstat.c	/^void __dec_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
__delayacct_add_tsk	kernel/delayacct.c	/^int __delayacct_add_tsk(struct taskstats *d, struct task_struct *tsk)$/;"	f
__delayacct_blkio_end	kernel/delayacct.c	/^void __delayacct_blkio_end(void)$/;"	f
__delayacct_blkio_start	kernel/delayacct.c	/^void __delayacct_blkio_start(void)$/;"	f
__delayacct_blkio_ticks	kernel/delayacct.c	/^__u64 __delayacct_blkio_ticks(struct task_struct *tsk)$/;"	f
__delayacct_freepages_end	kernel/delayacct.c	/^void __delayacct_freepages_end(void)$/;"	f
__delayacct_freepages_start	kernel/delayacct.c	/^void __delayacct_freepages_start(void)$/;"	f
__delayacct_tsk_init	kernel/delayacct.c	/^void __delayacct_tsk_init(struct task_struct *tsk)$/;"	f
__delete_from_page_cache	mm/filemap.c	/^void __delete_from_page_cache(struct page *page)$/;"	f
__delete_from_swap_cache	mm/swap_state.c	/^void __delete_from_swap_cache(struct page *page)$/;"	f
__delete_object	mm/kmemleak.c	/^static void __delete_object(struct kmemleak_object *object)$/;"	f	file:
__dentry_lru_del	fs/dcache.c	/^static void __dentry_lru_del(struct dentry *dentry)$/;"	f	file:
__dentry_path	fs/dcache.c	/^static char *__dentry_path(struct dentry *dentry, char *buf, int buflen)$/;"	f	file:
__dequeue_signal	kernel/signal.c	/^static int __dequeue_signal(struct sigpending *pending, sigset_t *mask,$/;"	f	file:
__destroy_inode	fs/inode.c	/^EXPORT_SYMBOL(__destroy_inode);$/;"	v
__destroy_inode	fs/inode.c	/^void __destroy_inode(struct inode *inode)$/;"	f
__devm_release_region	kernel/resource.c	/^EXPORT_SYMBOL(__devm_release_region);$/;"	v
__devm_release_region	kernel/resource.c	/^void __devm_release_region(struct device *dev, struct resource *parent,$/;"	f
__devm_request_region	kernel/resource.c	/^EXPORT_SYMBOL(__devm_request_region);$/;"	v
__devm_request_region	kernel/resource.c	/^struct resource * __devm_request_region(struct device *dev,$/;"	f
__dget	fs/dcache.c	/^static inline void __dget(struct dentry *dentry)$/;"	f	file:
__dget_dlock	fs/dcache.c	/^static inline void __dget_dlock(struct dentry *dentry)$/;"	f	file:
__disable_kprobe	kernel/kprobes.c	/^static struct kprobe *__kprobes __disable_kprobe(struct kprobe *p)$/;"	f	file:
__disarm_kprobe	kernel/kprobes.c	/^static void __kprobes __disarm_kprobe(struct kprobe *p, bool reopt)$/;"	f	file:
__disarm_kprobe	kernel/kprobes.c	910;"	d	file:
__do_cache_alloc	mm/slab.c	/^__do_cache_alloc(struct kmem_cache *cache, gfp_t flags)$/;"	f	file:
__do_cache_alloc	mm/slab.c	/^__do_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
__do_fault	mm/memory.c	/^static int __do_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__do_huge_pmd_anonymous_page	mm/huge_memory.c	/^static int __do_huge_pmd_anonymous_page(struct mm_struct *mm,$/;"	f	file:
__do_kmalloc	mm/slab.c	/^static __always_inline void *__do_kmalloc(size_t size, gfp_t flags,$/;"	f	file:
__do_kmalloc_node	mm/slab.c	/^__do_kmalloc_node(size_t size, gfp_t flags, int node, unsigned long caller)$/;"	f	file:
__do_kmalloc_node	mm/slob.c	/^__do_kmalloc_node(size_t size, gfp_t gfp, int node, unsigned long caller)$/;"	f	file:
__do_krealloc	mm/util.c	/^static __always_inline void *__do_krealloc(const void *p, size_t new_size,$/;"	f	file:
__do_page_cache_readahead	mm/readahead.c	/^__do_page_cache_readahead(struct address_space *mapping, struct file *filp,$/;"	f	file:
__do_pipe_flags	fs/pipe.c	/^static int __do_pipe_flags(int *fd, struct file **files, int flags)$/;"	f	file:
__do_proc_dointvec	kernel/sysctl.c	/^static int __do_proc_dointvec(void *tbl_data, struct ctl_table *table,$/;"	f	file:
__do_proc_doulongvec_minmax	kernel/sysctl.c	/^static int __do_proc_doulongvec_minmax(void *data, struct ctl_table *table, int write,$/;"	f	file:
__do_softirq	kernel/softirq.c	/^asmlinkage void __do_softirq(void)$/;"	f
__do_tune_cpucache	mm/slab.c	/^static int __do_tune_cpucache(struct kmem_cache *cachep, int limit,$/;"	f	file:
__down	kernel/semaphore.c	/^static noinline void __sched __down(struct semaphore *sem)$/;"	f	file:
__down_common	kernel/semaphore.c	/^static inline int __sched __down_common(struct semaphore *sem, long state,$/;"	f	file:
__down_interruptible	kernel/semaphore.c	/^static noinline int __sched __down_interruptible(struct semaphore *sem)$/;"	f	file:
__down_killable	kernel/semaphore.c	/^static noinline int __sched __down_killable(struct semaphore *sem)$/;"	f	file:
__down_read	lib/rwsem-spinlock.c	/^void __sched __down_read(struct rw_semaphore *sem)$/;"	f
__down_read_trylock	lib/rwsem-spinlock.c	/^int __down_read_trylock(struct rw_semaphore *sem)$/;"	f
__down_timeout	kernel/semaphore.c	/^static noinline int __sched __down_timeout(struct semaphore *sem, long jiffies)$/;"	f	file:
__down_write	lib/rwsem-spinlock.c	/^void __sched __down_write(struct rw_semaphore *sem)$/;"	f
__down_write_nested	lib/rwsem-spinlock.c	/^void __sched __down_write_nested(struct rw_semaphore *sem, int subclass)$/;"	f
__down_write_trylock	lib/rwsem-spinlock.c	/^int __down_write_trylock(struct rw_semaphore *sem)$/;"	f
__downgrade_write	lib/rwsem-spinlock.c	/^void __downgrade_write(struct rw_semaphore *sem)$/;"	f
__drain_alien_cache	mm/slab.c	/^static void __drain_alien_cache(struct kmem_cache *cachep,$/;"	f	file:
__early_pfn_to_nid	mm/page_alloc.c	/^int __meminit __early_pfn_to_nid(unsigned long pfn)$/;"	f
__earlyonly_bootmem_alloc	mm/sparse-vmemmap.c	/^static void * __init_refok __earlyonly_bootmem_alloc(int node,$/;"	f	file:
__end_buffer_read_notouch	fs/buffer.c	/^static void __end_buffer_read_notouch(struct buffer_head *bh, int uptodate)$/;"	f	file:
__estimate_accuracy	fs/select.c	/^static long __estimate_accuracy(struct timespec *tv)$/;"	f	file:
__exit_signal	kernel/exit.c	/^static void __exit_signal(struct task_struct *tsk)$/;"	f	file:
__ext3_get_inode_loc	fs/ext3/inode.c	/^static int __ext3_get_inode_loc(struct inode *inode,$/;"	f	file:
__ext3_journal_dirty_metadata	fs/ext3/ext3_jbd.c	/^int __ext3_journal_dirty_metadata(const char *where,$/;"	f
__ext3_journal_forget	fs/ext3/ext3_jbd.c	/^int __ext3_journal_forget(const char *where, handle_t *handle,$/;"	f
__ext3_journal_get_create_access	fs/ext3/ext3_jbd.c	/^int __ext3_journal_get_create_access(const char *where,$/;"	f
__ext3_journal_get_undo_access	fs/ext3/ext3_jbd.c	/^int __ext3_journal_get_undo_access(const char *where, handle_t *handle,$/;"	f
__ext3_journal_get_write_access	fs/ext3/ext3_jbd.c	/^int __ext3_journal_get_write_access(const char *where, handle_t *handle,$/;"	f
__ext3_journal_revoke	fs/ext3/ext3_jbd.c	/^int __ext3_journal_revoke(const char *where, handle_t *handle,$/;"	f
__ext3_journal_stop	fs/ext3/super.c	/^int __ext3_journal_stop(const char *where, handle_t *handle)$/;"	f
__ext3_std_error	fs/ext3/super.c	/^void __ext3_std_error (struct super_block * sb, const char * function,$/;"	f
__f_setown	fs/fcntl.c	/^EXPORT_SYMBOL(__f_setown);$/;"	v
__f_setown	fs/fcntl.c	/^int __f_setown(struct file *filp, struct pid *pid, enum pid_type type,$/;"	f
__fd_install	fs/file.c	/^void __fd_install(struct files_struct *files, unsigned int fd,$/;"	f
__file_cft	kernel/cgroup.c	/^static inline struct cftype *__file_cft(struct file *file)$/;"	f	file:
__file_sb_list_add	fs/file_table.c	/^static inline void __file_sb_list_add(struct file *file, struct super_block *sb)$/;"	f	file:
__filemap_fdatawrite	mm/filemap.c	/^static inline int __filemap_fdatawrite(struct address_space *mapping,$/;"	f	file:
__filemap_fdatawrite_range	mm/filemap.c	/^int __filemap_fdatawrite_range(struct address_space *mapping, loff_t start,$/;"	f
__find_buddy_index	mm/page_alloc.c	/^__find_buddy_index(unsigned long page_idx, unsigned int order)$/;"	f	file:
__find_general_cachep	mm/slab.c	/^static inline struct kmem_cache *__find_general_cachep(size_t size,$/;"	f	file:
__find_get_block	fs/buffer.c	/^EXPORT_SYMBOL(__find_get_block);$/;"	v
__find_get_block	fs/buffer.c	/^__find_get_block(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__find_get_block_slow	fs/buffer.c	/^__find_get_block_slow(struct block_device *bdev, sector_t block)$/;"	f	file:
__find_resource	kernel/resource.c	/^static int __find_resource(struct resource *root, struct resource *old,$/;"	f	file:
__find_vmap_area	mm/vmalloc.c	/^static struct vmap_area *__find_vmap_area(unsigned long addr)$/;"	f	file:
__first_valid_page	mm/page_isolation.c	/^__first_valid_page(unsigned long pfn, unsigned long nr_pages)$/;"	f	file:
__flush_cpu_slab	mm/slub.c	/^static inline void __flush_cpu_slab(struct kmem_cache *s, int cpu)$/;"	f	file:
__flush_itimer_signals	kernel/signal.c	/^static void __flush_itimer_signals(struct sigpending *pending)$/;"	f	file:
__flush_signals	kernel/signal.c	/^void __flush_signals(struct task_struct *t)$/;"	f
__follow_mount_rcu	fs/namei.c	/^static bool __follow_mount_rcu(struct nameidata *nd, struct path *path,$/;"	f	file:
__follow_pte	mm/memory.c	/^static int __follow_pte(struct mm_struct *mm, unsigned long address,$/;"	f	file:
__fput	fs/file_table.c	/^static void __fput(struct file *file)$/;"	f	file:
__fput_sync	fs/file_table.c	/^void __fput_sync(struct file *file)$/;"	f
__fragmentation_index	mm/vmstat.c	/^static int __fragmentation_index(unsigned int order, struct contig_page_info *info)$/;"	f	file:
__free	mm/bootmem.c	/^static void __init __free(bootmem_data_t *bdata,$/;"	f	file:
__free_fdtable	fs/file.c	/^static void __free_fdtable(struct fdtable *fdt)$/;"	f	file:
__free_insn_slot	kernel/kprobes.c	/^static void __kprobes __free_insn_slot(struct kprobe_insn_cache *c,$/;"	f	file:
__free_memcg_kmem_pages	mm/page_alloc.c	/^void __free_memcg_kmem_pages(struct page *page, unsigned int order)$/;"	f
__free_memory_core	mm/nobootmem.c	/^static unsigned long __init __free_memory_core(phys_addr_t start,$/;"	f	file:
__free_one_page	mm/page_alloc.c	/^static inline void __free_one_page(struct page *page,$/;"	f	file:
__free_page_cgroup	mm/page_cgroup.c	/^void __free_page_cgroup(unsigned long pfn)$/;"	f
__free_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(__free_pages);$/;"	v
__free_pages	mm/page_alloc.c	/^void __free_pages(struct page *page, unsigned int order)$/;"	f
__free_pages_bootmem	mm/page_alloc.c	/^void __meminit __free_pages_bootmem(struct page *page, unsigned int order)$/;"	f
__free_pages_memory	mm/nobootmem.c	/^static void __init __free_pages_memory(unsigned long start, unsigned long end)$/;"	f	file:
__free_pages_ok	mm/page_alloc.c	/^static void __free_pages_ok(struct page *page, unsigned int order)$/;"	f	file:
__free_pipe_info	fs/pipe.c	/^void __free_pipe_info(struct pipe_inode_info *pipe)$/;"	f
__free_slab	mm/slub.c	/^static void __free_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
__free_vmap_area	mm/vmalloc.c	/^static void __free_vmap_area(struct vmap_area *va)$/;"	f	file:
__frontswap_clear	mm/frontswap.c	/^static inline void __frontswap_clear(struct swap_info_struct *sis, pgoff_t offset)$/;"	f	file:
__frontswap_curr_pages	mm/frontswap.c	/^static unsigned long __frontswap_curr_pages(void)$/;"	f	file:
__frontswap_init	mm/frontswap.c	/^EXPORT_SYMBOL(__frontswap_init);$/;"	v
__frontswap_init	mm/frontswap.c	/^void __frontswap_init(unsigned type)$/;"	f
__frontswap_invalidate_area	mm/frontswap.c	/^EXPORT_SYMBOL(__frontswap_invalidate_area);$/;"	v
__frontswap_invalidate_area	mm/frontswap.c	/^void __frontswap_invalidate_area(unsigned type)$/;"	f
__frontswap_invalidate_page	mm/frontswap.c	/^EXPORT_SYMBOL(__frontswap_invalidate_page);$/;"	v
__frontswap_invalidate_page	mm/frontswap.c	/^void __frontswap_invalidate_page(unsigned type, pgoff_t offset)$/;"	f
__frontswap_load	mm/frontswap.c	/^EXPORT_SYMBOL(__frontswap_load);$/;"	v
__frontswap_load	mm/frontswap.c	/^int __frontswap_load(struct page *page)$/;"	f
__frontswap_shrink	mm/frontswap.c	/^static int __frontswap_shrink(unsigned long target_pages,$/;"	f	file:
__frontswap_store	mm/frontswap.c	/^EXPORT_SYMBOL(__frontswap_store);$/;"	v
__frontswap_store	mm/frontswap.c	/^int __frontswap_store(struct page *page)$/;"	f
__frontswap_unuse_pages	mm/frontswap.c	/^static int __frontswap_unuse_pages(unsigned long total, unsigned long *unused,$/;"	f	file:
__fsnotify_inode_delete	fs/notify/fsnotify.c	/^EXPORT_SYMBOL_GPL(__fsnotify_inode_delete);$/;"	v
__fsnotify_inode_delete	fs/notify/fsnotify.c	/^void __fsnotify_inode_delete(struct inode *inode)$/;"	f
__fsnotify_parent	fs/notify/fsnotify.c	/^EXPORT_SYMBOL_GPL(__fsnotify_parent);$/;"	v
__fsnotify_parent	fs/notify/fsnotify.c	/^int __fsnotify_parent(struct path *path, struct dentry *dentry, __u32 mask)$/;"	f
__fsnotify_update_child_dentry_flags	fs/notify/fsnotify.c	/^void __fsnotify_update_child_dentry_flags(struct inode *inode)$/;"	f
__fsnotify_vfsmount_delete	fs/notify/fsnotify.c	/^void __fsnotify_vfsmount_delete(struct vfsmount *mnt)$/;"	f
__generic_block_fiemap	fs/ioctl.c	/^EXPORT_SYMBOL(__generic_block_fiemap);$/;"	v
__generic_block_fiemap	fs/ioctl.c	/^int __generic_block_fiemap(struct inode *inode,$/;"	f
__generic_file_aio_write	mm/filemap.c	/^EXPORT_SYMBOL(__generic_file_aio_write);$/;"	v
__generic_file_aio_write	mm/filemap.c	/^ssize_t __generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
__generic_file_splice_read	fs/splice.c	/^__generic_file_splice_read(struct file *in, loff_t *ppos,$/;"	f	file:
__get_any_page	mm/memory-failure.c	/^static int __get_any_page(struct page *p, unsigned long pfn, int flags)$/;"	f	file:
__get_dumpable	fs/exec.c	/^int __get_dumpable(unsigned long mm_flags)$/;"	f
__get_file_write_access	fs/open.c	/^static inline int __get_file_write_access(struct inode *inode,$/;"	f	file:
__get_free_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(__get_free_pages);$/;"	v
__get_free_pages	mm/page_alloc.c	/^unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)$/;"	f
__get_fs_type	fs/filesystems.c	/^static struct file_system_type *__get_fs_type(const char *name, int len)$/;"	f	file:
__get_insn_slot	kernel/kprobes.c	/^static kprobe_opcode_t __kprobes *__get_insn_slot(struct kprobe_insn_cache *c)$/;"	f	file:
__get_key_name	kernel/lockdep.c	/^const char * __get_key_name(struct lockdep_subclass_key *key, char *str)$/;"	f
__get_locked_pte	mm/memory.c	/^pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,$/;"	f
__get_page_tail	mm/swap.c	/^EXPORT_SYMBOL(__get_page_tail);$/;"	v
__get_page_tail	mm/swap.c	/^bool __get_page_tail(struct page *page)$/;"	f
__get_page_tail_foll	mm/internal.h	/^static inline void __get_page_tail_foll(struct page *page,$/;"	f
__get_user_pages	mm/memory.c	/^EXPORT_SYMBOL(__get_user_pages);$/;"	v
__get_user_pages	mm/memory.c	/^long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
__get_user_pages	mm/nommu.c	/^long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
__get_user_pages_fast	mm/util.c	/^EXPORT_SYMBOL_GPL(__get_user_pages_fast);$/;"	v
__get_user_pages_fast	mm/util.c	/^int __attribute__((weak)) __get_user_pages_fast(unsigned long start,$/;"	f
__get_valid_kprobe	kernel/kprobes.c	/^static struct kprobe * __kprobes __get_valid_kprobe(struct kprobe *p)$/;"	f	file:
__get_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(__get_vm_area);$/;"	v
__get_vm_area	mm/vmalloc.c	/^struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,$/;"	f
__get_vm_area_caller	mm/vmalloc.c	/^struct vm_struct *__get_vm_area_caller(unsigned long size, unsigned long flags,$/;"	f
__get_vm_area_node	mm/vmalloc.c	/^static struct vm_struct *__get_vm_area_node(unsigned long size,$/;"	f	file:
__getblk	fs/buffer.c	/^EXPORT_SYMBOL(__getblk);$/;"	v
__getblk	fs/buffer.c	/^__getblk(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__getblk_slow	fs/buffer.c	/^__getblk_slow(struct block_device *bdev, sector_t block, int size)$/;"	f	file:
__group_send_sig_info	kernel/signal.c	/^__group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)$/;"	f
__hlist_del	include/linux/list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__hrtimer_init	kernel/hrtimer.c	/^static void __hrtimer_init(struct hrtimer *timer, clockid_t clock_id,$/;"	f	file:
__hrtimer_peek_ahead_timers	kernel/hrtimer.c	/^static inline void __hrtimer_peek_ahead_timers(void) { }$/;"	f	file:
__hrtimer_peek_ahead_timers	kernel/hrtimer.c	/^static void __hrtimer_peek_ahead_timers(void)$/;"	f	file:
__hrtimer_start_range_ns	kernel/hrtimer.c	/^int __hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,$/;"	f
__hrtimer_tasklet_trampoline	kernel/softirq.c	/^static enum hrtimer_restart __hrtimer_tasklet_trampoline(struct hrtimer *timer)$/;"	f	file:
__hugepage_set_anon_rmap	mm/rmap.c	/^static void __hugepage_set_anon_rmap(struct page *page,$/;"	f	file:
__hugetlb_cgroup_file_init	mm/hugetlb_cgroup.c	/^static void __init __hugetlb_cgroup_file_init(int idx)$/;"	f	file:
__iget	fs/inode.c	/^void __iget(struct inode *inode)$/;"	f
__inc_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(__inc_zone_page_state);$/;"	v
__inc_zone_page_state	mm/vmstat.c	/^void __inc_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
__inc_zone_state	mm/vmstat.c	/^void __inc_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
__init_kthread_worker	kernel/kthread.c	/^EXPORT_SYMBOL_GPL(__init_kthread_worker);$/;"	v
__init_kthread_worker	kernel/kthread.c	/^void __init_kthread_worker(struct kthread_worker *worker,$/;"	f
__init_rwsem	lib/rwsem-spinlock.c	/^EXPORT_SYMBOL(__init_rwsem);$/;"	v
__init_rwsem	lib/rwsem-spinlock.c	/^void __init_rwsem(struct rw_semaphore *sem, const char *name,$/;"	f
__init_srcu_struct	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(__init_srcu_struct);$/;"	v
__init_srcu_struct	kernel/srcu.c	/^int __init_srcu_struct(struct srcu_struct *sp, const char *name,$/;"	f
__init_waitqueue_head	kernel/wait.c	/^EXPORT_SYMBOL(__init_waitqueue_head);$/;"	v
__init_waitqueue_head	kernel/wait.c	/^void __init_waitqueue_head(wait_queue_head_t *q, const char *name, struct lock_class_key *key)$/;"	f
__init_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(__init_work);$/;"	v
__init_work	kernel/workqueue.c	/^void __init_work(struct work_struct *work, int onstack)$/;"	f
__initconst	mm/percpu.c	/^const char * const pcpu_fc_names[PCPU_FC_NR] __initconst = {$/;"	v
__initdata	mm/bootmem.c	/^bootmem_data_t bootmem_node_data[MAX_NUMNODES] __initdata;$/;"	v
__initdata	mm/bootmem.c	/^static struct list_head bdata_list __initdata = LIST_HEAD_INIT(bdata_list);$/;"	v	typeref:struct:bdata_list	file:
__initdata	mm/kmemleak.c	/^	early_log[CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE] __initdata;$/;"	v	typeref:struct:early_log	file:
__initdata	mm/kmemleak.c	/^static int crt_early_log __initdata;$/;"	v	file:
__initdata	mm/memcontrol.c	/^static int really_do_swap_account __initdata = 0;$/;"	v	file:
__initdata	mm/memcontrol.c	/^static int really_do_swap_account __initdata = 1;$/;"	v	file:
__initdata	mm/percpu.c	/^enum pcpu_fc pcpu_chosen_fc __initdata = PCPU_FC_AUTO;$/;"	v	typeref:enum:pcpu_chosen_fc
__initdata	mm/slab.c	/^static bool slab_max_order_set __initdata;$/;"	v	file:
__initdata_memblock	mm/memblock.c	/^int memblock_debug __initdata_memblock;$/;"	v
__initdata_memblock	mm/memblock.c	/^static int memblock_can_resize __initdata_memblock;$/;"	v	file:
__initdata_memblock	mm/memblock.c	/^static int memblock_memory_in_slab __initdata_memblock = 0;$/;"	v	file:
__initdata_memblock	mm/memblock.c	/^static int memblock_reserved_in_slab __initdata_memblock = 0;$/;"	v	file:
__initdata_memblock	mm/memblock.c	/^static struct memblock_region memblock_memory_init_regions[INIT_MEMBLOCK_REGIONS] __initdata_memblock;$/;"	v	typeref:struct:memblock_memory_init_regions	file:
__initdata_memblock	mm/memblock.c	/^static struct memblock_region memblock_reserved_init_regions[INIT_MEMBLOCK_REGIONS] __initdata_memblock;$/;"	v	typeref:struct:memblock_reserved_init_regions	file:
__initdata_memblock	mm/memblock.c	/^struct memblock memblock __initdata_memblock = {$/;"	v	typeref:struct:memblock
__inode_add_bytes	fs/stat.c	/^void __inode_add_bytes(struct inode *inode, loff_t bytes)$/;"	f
__inode_dio_wait	fs/inode.c	/^static void __inode_dio_wait(struct inode *inode)$/;"	f	file:
__inode_permission	fs/namei.c	/^int __inode_permission(struct inode *inode, int mask)$/;"	f
__insert_inode_hash	fs/inode.c	/^EXPORT_SYMBOL(__insert_inode_hash);$/;"	v
__insert_inode_hash	fs/inode.c	/^void __insert_inode_hash(struct inode *inode, unsigned long hashval)$/;"	f
__insert_resource	kernel/resource.c	/^static struct resource * __insert_resource(struct resource *parent, struct resource *new)$/;"	f	file:
__insert_vm_struct	mm/mmap.c	/^static void __insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
__insert_vmap_area	mm/vmalloc.c	/^static void __insert_vmap_area(struct vmap_area *va)$/;"	f	file:
__internal_add_timer	kernel/timer.c	/^__internal_add_timer(struct tvec_base *base, struct timer_list *timer)$/;"	f	file:
__invalid_creds	kernel/cred.c	/^EXPORT_SYMBOL(__invalid_creds);$/;"	v
__invalid_creds	kernel/cred.c	/^void __invalid_creds(const struct cred *cred, const char *file, unsigned line)$/;"	f
__invalidate_device	fs/block_dev.c	/^EXPORT_SYMBOL(__invalidate_device);$/;"	v
__invalidate_device	fs/block_dev.c	/^int __invalidate_device(struct block_device *bdev, bool kill_dirty)$/;"	f
__iovec_copy_from_user_inatomic	mm/filemap.c	/^static size_t __iovec_copy_from_user_inatomic(char *vaddr,$/;"	f	file:
__irq_work_run	kernel/irq_work.c	/^static void __irq_work_run(void)$/;"	f	file:
__is_ram	kernel/resource.c	/^static int __is_ram(unsigned long pfn, unsigned long nr_pages, void *arg)$/;"	f	file:
__isolate_balloon_page	mm/balloon_compaction.c	/^static inline void __isolate_balloon_page(struct page *page)$/;"	f	file:
__isolate_free_page	mm/page_alloc.c	/^static int __isolate_free_page(struct page *page, unsigned int order)$/;"	f	file:
__isolate_lru_page	mm/vmscan.c	/^int __isolate_lru_page(struct page *page, isolate_mode_t mode)$/;"	f
__jump_label_mod_text_reserved	kernel/jump_label.c	/^static int __jump_label_mod_text_reserved(void *start, void *end)$/;"	f	file:
__jump_label_mod_update	kernel/jump_label.c	/^static void __jump_label_mod_update(struct static_key *key, int enable)$/;"	f	file:
__jump_label_text_reserved	kernel/jump_label.c	/^static int __jump_label_text_reserved(struct jump_entry *iter_start,$/;"	f	file:
__jump_label_update	kernel/jump_label.c	/^static void __jump_label_update(struct static_key *key,$/;"	f	file:
__kernel_param_lock	kernel/params.c	/^EXPORT_SYMBOL(__kernel_param_lock);$/;"	v
__kernel_param_lock	kernel/params.c	/^void __kernel_param_lock(void)$/;"	f
__kernel_param_unlock	kernel/params.c	/^EXPORT_SYMBOL(__kernel_param_unlock);$/;"	v
__kernel_param_unlock	kernel/params.c	/^void __kernel_param_unlock(void)$/;"	f
__kernel_text_address	kernel/extable.c	/^int __kernel_text_address(unsigned long addr)$/;"	f
__kernel_write	fs/read_write.c	/^ssize_t __kernel_write(struct file *file, const char *buf, size_t count, loff_t *pos)$/;"	f
__kfree_section_memmap	mm/sparse.c	/^static void __kfree_section_memmap(struct page *memmap, unsigned long nr_pages)$/;"	f	file:
__khugepaged_enter	mm/huge_memory.c	/^int __khugepaged_enter(struct mm_struct *mm)$/;"	f
__khugepaged_exit	mm/huge_memory.c	/^void __khugepaged_exit(struct mm_struct *mm)$/;"	f
__kill_pgrp_info	kernel/signal.c	/^int __kill_pgrp_info(int sig, struct siginfo *info, struct pid *pgrp)$/;"	f
__kmalloc	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	mm/slab.c	/^void *__kmalloc(size_t size, gfp_t flags)$/;"	f
__kmalloc	mm/slub.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	mm/slub.c	/^void *__kmalloc(size_t size, gfp_t flags)$/;"	f
__kmalloc_node	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	mm/slab.c	/^void *__kmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
__kmalloc_node	mm/slob.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	mm/slob.c	/^void *__kmalloc_node(size_t size, gfp_t gfp, int node)$/;"	f
__kmalloc_node	mm/slub.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	mm/slub.c	/^void *__kmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
__kmalloc_node_track_caller	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc_node_track_caller);$/;"	v
__kmalloc_node_track_caller	mm/slab.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t flags,$/;"	f
__kmalloc_node_track_caller	mm/slob.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t gfp,$/;"	f
__kmalloc_node_track_caller	mm/slub.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t gfpflags,$/;"	f
__kmalloc_section_memmap	mm/sparse.c	/^static struct page *__kmalloc_section_memmap(unsigned long nr_pages)$/;"	f	file:
__kmalloc_section_usemap	mm/sparse.c	/^static unsigned long *__kmalloc_section_usemap(void)$/;"	f	file:
__kmalloc_track_caller	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc_track_caller);$/;"	v
__kmalloc_track_caller	mm/slab.c	/^void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)$/;"	f
__kmalloc_track_caller	mm/slob.c	/^void *__kmalloc_track_caller(size_t size, gfp_t gfp, unsigned long caller)$/;"	f
__kmalloc_track_caller	mm/slub.c	/^void *__kmalloc_track_caller(size_t size, gfp_t gfpflags, unsigned long caller)$/;"	f
__kmap_atomic_idx	mm/highmem.c	/^EXPORT_PER_CPU_SYMBOL(__kmap_atomic_idx);$/;"	v
__kmem_cache_alias	mm/slab.h	/^__kmem_cache_alias(struct mem_cgroup *memcg, const char *name, size_t size,$/;"	f
__kmem_cache_alias	mm/slub.c	/^__kmem_cache_alias(struct mem_cgroup *memcg, const char *name, size_t size,$/;"	f
__kmem_cache_create	mm/slab.c	/^__kmem_cache_create (struct kmem_cache *cachep, unsigned long flags)$/;"	f
__kmem_cache_create	mm/slob.c	/^int __kmem_cache_create(struct kmem_cache *c, unsigned long flags)$/;"	f
__kmem_cache_create	mm/slub.c	/^int __kmem_cache_create(struct kmem_cache *s, unsigned long flags)$/;"	f
__kmem_cache_free	mm/slob.c	/^static void __kmem_cache_free(void *b, int size)$/;"	f	file:
__kmem_cache_shutdown	mm/slab.c	/^int __kmem_cache_shutdown(struct kmem_cache *cachep)$/;"	f
__kmem_cache_shutdown	mm/slob.c	/^int __kmem_cache_shutdown(struct kmem_cache *c)$/;"	f
__kmem_cache_shutdown	mm/slub.c	/^int __kmem_cache_shutdown(struct kmem_cache *s)$/;"	f
__krealloc	mm/util.c	/^EXPORT_SYMBOL(__krealloc);$/;"	v
__krealloc	mm/util.c	/^void *__krealloc(const void *p, size_t new_size, gfp_t flags)$/;"	f
__ksm_enter	mm/ksm.c	/^int __ksm_enter(struct mm_struct *mm)$/;"	f
__ksm_exit	mm/ksm.c	/^void __ksm_exit(struct mm_struct *mm)$/;"	f
__kthread_bind	kernel/kthread.c	/^static void __kthread_bind(struct task_struct *p, unsigned int cpu, long state)$/;"	f	file:
__kthread_parkme	kernel/kthread.c	/^static void __kthread_parkme(struct kthread *self)$/;"	f	file:
__kthread_unpark	kernel/kthread.c	/^static void __kthread_unpark(struct task_struct *k, struct kthread *kthread)$/;"	f	file:
__list_add	include/linux/list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_cut_position	include/linux/list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	include/linux/list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_del_entry	include/linux/list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f
__list_for_each	include/linux/list.h	380;"	d
__list_splice	include/linux/list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
__local_bh_disable	kernel/softirq.c	/^static inline void __local_bh_disable(unsigned long ip, unsigned int cnt)$/;"	f	file:
__local_bh_disable	kernel/softirq.c	/^static void __local_bh_disable(unsigned long ip, unsigned int cnt)$/;"	f	file:
__local_bh_enable	kernel/softirq.c	/^static void __local_bh_enable(unsigned int cnt)$/;"	f	file:
__local_trigger	kernel/softirq.c	/^static void __local_trigger(struct call_single_data *cp, int softirq)$/;"	f	file:
__locate	lib/radix-tree.c	/^static unsigned long __locate(struct radix_tree_node *slot, void *item,$/;"	f	file:
__lock_acquire	kernel/lockdep.c	/^static int __lock_acquire(struct lockdep_map *lock, unsigned int subclass,$/;"	f	file:
__lock_acquired	kernel/lockdep.c	/^__lock_acquired(struct lockdep_map *lock, unsigned long ip)$/;"	f	file:
__lock_buffer	fs/buffer.c	/^EXPORT_SYMBOL(__lock_buffer);$/;"	v
__lock_buffer	fs/buffer.c	/^void __lock_buffer(struct buffer_head *bh)$/;"	f
__lock_contended	kernel/lockdep.c	/^__lock_contended(struct lockdep_map *lock, unsigned long ip)$/;"	f	file:
__lock_is_held	kernel/lockdep.c	/^static int __lock_is_held(struct lockdep_map *lock)$/;"	f	file:
__lock_page	mm/filemap.c	/^EXPORT_SYMBOL(__lock_page);$/;"	v
__lock_page	mm/filemap.c	/^void __lock_page(struct page *page)$/;"	f
__lock_page_killable	mm/filemap.c	/^EXPORT_SYMBOL_GPL(__lock_page_killable);$/;"	v
__lock_page_killable	mm/filemap.c	/^int __lock_page_killable(struct page *page)$/;"	f
__lock_page_or_retry	mm/filemap.c	/^int __lock_page_or_retry(struct page *page, struct mm_struct *mm,$/;"	f
__lock_release	kernel/lockdep.c	/^__lock_release(struct lockdep_map *lock, int nested, unsigned long ip)$/;"	f	file:
__lock_set_class	kernel/lockdep.c	/^__lock_set_class(struct lockdep_map *lock, const char *name,$/;"	f	file:
__lock_task_sighand	kernel/signal.c	/^struct sighand_struct *__lock_task_sighand(struct task_struct *tsk,$/;"	f
__lock_timer	kernel/posix-timers.c	/^static struct k_itimer *__lock_timer(timer_t timer_id, unsigned long *flags)$/;"	f	file:
__lockdep_count_backward_deps	kernel/lockdep.c	/^unsigned long __lockdep_count_backward_deps(struct lock_list *this)$/;"	f
__lockdep_count_forward_deps	kernel/lockdep.c	/^unsigned long __lockdep_count_forward_deps(struct lock_list *this)$/;"	f
__lockdep_no_validate__	kernel/lockdep.c	/^struct lock_class_key __lockdep_no_validate__;$/;"	v	typeref:struct:lock_class_key
__lockdep_trace_alloc	kernel/lockdep.c	/^static void __lockdep_trace_alloc(gfp_t gfp_mask, unsigned long flags)$/;"	f	file:
__lockfunc	include/linux/spinlock.h	76;"	d
__locks_copy_lock	fs/locks.c	/^EXPORT_SYMBOL(__locks_copy_lock);$/;"	v
__locks_copy_lock	fs/locks.c	/^void __locks_copy_lock(struct file_lock *new, const struct file_lock *fl)$/;"	f
__locks_delete_block	fs/locks.c	/^static void __locks_delete_block(struct file_lock *waiter)$/;"	f	file:
__lookup_hash	fs/namei.c	/^static struct dentry *__lookup_hash(struct qstr *name,$/;"	f	file:
__lookup_mnt	fs/namespace.c	/^struct mount *__lookup_mnt(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
__lru_cache_add	mm/swap.c	/^EXPORT_SYMBOL(__lru_cache_add);$/;"	v
__lru_cache_add	mm/swap.c	/^void __lru_cache_add(struct page *page, enum lru_list lru)$/;"	f
__mark_inode_dirty	fs/fs-writeback.c	/^EXPORT_SYMBOL(__mark_inode_dirty);$/;"	v
__mark_inode_dirty	fs/fs-writeback.c	/^void __mark_inode_dirty(struct inode *inode, int flags)$/;"	f
__maxindex	lib/radix-tree.c	/^static __init unsigned long __maxindex(unsigned int height)$/;"	f	file:
__mb_cache_entry_find	fs/mbcache.c	/^__mb_cache_entry_find(struct list_head *l, struct list_head *head,$/;"	f	file:
__mb_cache_entry_forget	fs/mbcache.c	/^__mb_cache_entry_forget(struct mb_cache_entry *ce, gfp_t gfp_mask)$/;"	f	file:
__mb_cache_entry_is_hashed	fs/mbcache.c	/^__mb_cache_entry_is_hashed(struct mb_cache_entry *ce)$/;"	f	file:
__mb_cache_entry_unhash	fs/mbcache.c	/^__mb_cache_entry_unhash(struct mb_cache_entry *ce)$/;"	f	file:
__mem_cgroup_begin_update_page_stat	mm/memcontrol.c	/^void __mem_cgroup_begin_update_page_stat(struct page *page,$/;"	f
__mem_cgroup_cancel_charge	mm/memcontrol.c	/^static void __mem_cgroup_cancel_charge(struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_cancel_local_charge	mm/memcontrol.c	/^static void __mem_cgroup_cancel_local_charge(struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_clear_mc	mm/memcontrol.c	/^static void __mem_cgroup_clear_mc(void)$/;"	f	file:
__mem_cgroup_commit_charge	mm/memcontrol.c	/^static void __mem_cgroup_commit_charge(struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_commit_charge_swapin	mm/memcontrol.c	/^__mem_cgroup_commit_charge_swapin(struct page *page, struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_count_vm_event	mm/memcontrol.c	/^EXPORT_SYMBOL(__mem_cgroup_count_vm_event);$/;"	v
__mem_cgroup_count_vm_event	mm/memcontrol.c	/^void __mem_cgroup_count_vm_event(struct mm_struct *mm, enum vm_event_item idx)$/;"	f
__mem_cgroup_end_update_page_stat	mm/memcontrol.c	/^void __mem_cgroup_end_update_page_stat(struct page *page, unsigned long *flags)$/;"	f
__mem_cgroup_free	mm/memcontrol.c	/^static void __mem_cgroup_free(struct mem_cgroup *memcg)$/;"	f	file:
__mem_cgroup_insert_exceeded	mm/memcontrol.c	/^__mem_cgroup_insert_exceeded(struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_largest_soft_limit_node	mm/memcontrol.c	/^__mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_zone *mctz)$/;"	f	file:
__mem_cgroup_put	mm/memcontrol.c	/^static void __mem_cgroup_put(struct mem_cgroup *memcg, int count)$/;"	f	file:
__mem_cgroup_remove_exceeded	mm/memcontrol.c	/^__mem_cgroup_remove_exceeded(struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_same_or_subtree	mm/memcontrol.c	/^bool __mem_cgroup_same_or_subtree(const struct mem_cgroup *root_memcg,$/;"	f
__mem_cgroup_threshold	mm/memcontrol.c	/^static void __mem_cgroup_threshold(struct mem_cgroup *memcg, bool swap)$/;"	f	file:
__mem_cgroup_try_charge	mm/memcontrol.c	/^static int __mem_cgroup_try_charge(struct mm_struct *mm,$/;"	f	file:
__mem_cgroup_try_charge_swapin	mm/memcontrol.c	/^static int __mem_cgroup_try_charge_swapin(struct mm_struct *mm,$/;"	f	file:
__mem_cgroup_uncharge_common	mm/memcontrol.c	/^__mem_cgroup_uncharge_common(struct page *page, enum charge_type ctype,$/;"	f	file:
__memblock_alloc_base	mm/memblock.c	/^phys_addr_t __init __memblock_alloc_base(phys_addr_t size, phys_addr_t align, phys_addr_t max_addr)$/;"	f
__memblock_dump_all	mm/memblock.c	/^void __init_memblock __memblock_dump_all(void)$/;"	f
__memblock_remove	mm/memblock.c	/^static int __init_memblock __memblock_remove(struct memblock_type *type,$/;"	f	file:
__memcg_create_cache_enqueue	mm/memcontrol.c	/^static void __memcg_create_cache_enqueue(struct mem_cgroup *memcg,$/;"	f	file:
__memcg_has_children	mm/memcontrol.c	/^static inline bool __memcg_has_children(struct mem_cgroup *memcg)$/;"	f	file:
__memcg_kmem_commit_charge	mm/memcontrol.c	/^void __memcg_kmem_commit_charge(struct page *page, struct mem_cgroup *memcg,$/;"	f
__memcg_kmem_get_cache	mm/memcontrol.c	/^EXPORT_SYMBOL(__memcg_kmem_get_cache);$/;"	v
__memcg_kmem_get_cache	mm/memcontrol.c	/^struct kmem_cache *__memcg_kmem_get_cache(struct kmem_cache *cachep,$/;"	f
__memcg_kmem_newpage_charge	mm/memcontrol.c	/^__memcg_kmem_newpage_charge(gfp_t gfp, struct mem_cgroup **_memcg, int order)$/;"	f
__memcg_kmem_uncharge_pages	mm/memcontrol.c	/^void __memcg_kmem_uncharge_pages(struct page *page, int order)$/;"	f
__migrate_balloon_page	mm/balloon_compaction.c	/^static inline int __migrate_balloon_page(struct address_space *mapping,$/;"	f	file:
__mlock_posix_error_return	mm/mlock.c	/^static int __mlock_posix_error_return(long retval)$/;"	f	file:
__mlock_vma_pages_range	mm/mlock.c	/^long __mlock_vma_pages_range(struct vm_area_struct *vma,$/;"	f
__mm_populate	mm/mlock.c	/^int __mm_populate(unsigned long start, unsigned long len, int ignore_errors)$/;"	f
__mmdrop	kernel/fork.c	/^EXPORT_SYMBOL_GPL(__mmdrop);$/;"	v
__mmdrop	kernel/fork.c	/^void __mmdrop(struct mm_struct *mm)$/;"	f
__mmu_notifier_change_pte	mm/mmu_notifier.c	/^void __mmu_notifier_change_pte(struct mm_struct *mm, unsigned long address,$/;"	f
__mmu_notifier_clear_flush_young	mm/mmu_notifier.c	/^int __mmu_notifier_clear_flush_young(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_page	mm/mmu_notifier.c	/^void __mmu_notifier_invalidate_page(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_range_end	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(__mmu_notifier_invalidate_range_end);$/;"	v
__mmu_notifier_invalidate_range_end	mm/mmu_notifier.c	/^void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_range_start	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(__mmu_notifier_invalidate_range_start);$/;"	v
__mmu_notifier_invalidate_range_start	mm/mmu_notifier.c	/^void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,$/;"	f
__mmu_notifier_mm_destroy	mm/mmu_notifier.c	/^void __mmu_notifier_mm_destroy(struct mm_struct *mm)$/;"	f
__mmu_notifier_register	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(__mmu_notifier_register);$/;"	v
__mmu_notifier_register	mm/mmu_notifier.c	/^int __mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
__mmu_notifier_release	mm/mmu_notifier.c	/^void __mmu_notifier_release(struct mm_struct *mm)$/;"	f
__mmu_notifier_test_young	mm/mmu_notifier.c	/^int __mmu_notifier_test_young(struct mm_struct *mm,$/;"	f
__mnt_drop_write	fs/namespace.c	/^void __mnt_drop_write(struct vfsmount *mnt)$/;"	f
__mnt_drop_write_file	fs/namespace.c	/^void __mnt_drop_write_file(struct file *file)$/;"	f
__mnt_is_readonly	fs/namespace.c	/^EXPORT_SYMBOL_GPL(__mnt_is_readonly);$/;"	v
__mnt_is_readonly	fs/namespace.c	/^int __mnt_is_readonly(struct vfsmount *mnt)$/;"	f
__mnt_unmake_readonly	fs/namespace.c	/^static void __mnt_unmake_readonly(struct mount *mnt)$/;"	f	file:
__mnt_want_write	fs/namespace.c	/^int __mnt_want_write(struct vfsmount *m)$/;"	f
__mnt_want_write_file	fs/namespace.c	/^int __mnt_want_write_file(struct file *file)$/;"	f
__mod_timer	kernel/timer.c	/^__mod_timer(struct timer_list *timer, unsigned long expires,$/;"	f	file:
__mod_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(__mod_zone_page_state);$/;"	v
__mod_zone_page_state	mm/vmstat.c	/^void __mod_zone_page_state(struct zone *zone, enum zone_stat_item item,$/;"	f
__modinit	kernel/params.c	564;"	d	file:
__modinit	kernel/params.c	566;"	d	file:
__module_address	kernel/module.c	/^EXPORT_SYMBOL_GPL(__module_address);$/;"	v
__module_address	kernel/module.c	/^struct module *__module_address(unsigned long addr)$/;"	f
__module_get	kernel/module.c	/^EXPORT_SYMBOL(__module_get);$/;"	v
__module_get	kernel/module.c	/^void __module_get(struct module *module)$/;"	f
__module_put_and_exit	kernel/module.c	/^EXPORT_SYMBOL(__module_put_and_exit);$/;"	v
__module_put_and_exit	kernel/module.c	/^void __module_put_and_exit(struct module *mod, long code)$/;"	f
__module_text_address	kernel/module.c	/^EXPORT_SYMBOL_GPL(__module_text_address);$/;"	v
__module_text_address	kernel/module.c	/^struct module *__module_text_address(unsigned long addr)$/;"	f
__modver_version_show	kernel/params.c	/^ssize_t __modver_version_show(struct module_attribute *mattr,$/;"	f
__mpage_writepage	fs/mpage.c	/^static int __mpage_writepage(struct page *page, struct writeback_control *wbc,$/;"	f	file:
__mpol_dup	mm/mempolicy.c	/^struct mempolicy *__mpol_dup(struct mempolicy *old)$/;"	f
__mpol_equal	mm/mempolicy.c	/^bool __mpol_equal(struct mempolicy *a, struct mempolicy *b)$/;"	f
__mpol_put	mm/mempolicy.c	/^void __mpol_put(struct mempolicy *p)$/;"	f
__mutex_init	kernel/mutex.c	/^EXPORT_SYMBOL(__mutex_init);$/;"	v
__mutex_init	kernel/mutex.c	/^__mutex_init(struct mutex *lock, const char *name, struct lock_class_key *key)$/;"	f
__mutex_lock_common	kernel/mutex.c	/^__mutex_lock_common(struct mutex *lock, long state, unsigned int subclass,$/;"	f	file:
__mutex_lock_interruptible_slowpath	kernel/mutex.c	/^__mutex_lock_interruptible_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_lock_killable_slowpath	kernel/mutex.c	/^__mutex_lock_killable_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_lock_slowpath	kernel/mutex.c	/^__mutex_lock_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_trylock_slowpath	kernel/mutex.c	/^static inline int __mutex_trylock_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_unlock_common_slowpath	kernel/mutex.c	/^__mutex_unlock_common_slowpath(atomic_t *lock_count, int nested)$/;"	f	file:
__mutex_unlock_slowpath	kernel/mutex.c	/^__mutex_unlock_slowpath(atomic_t *lock_count)$/;"	f	file:
__need_more_worker	kernel/workqueue.c	/^static bool __need_more_worker(struct worker_pool *pool)$/;"	f	file:
__next_free_mem_range	mm/memblock.c	/^void __init_memblock __next_free_mem_range(u64 *idx, int nid,$/;"	f
__next_free_mem_range_rev	mm/memblock.c	/^void __init_memblock __next_free_mem_range_rev(u64 *idx, int nid,$/;"	f
__next_mem_pfn_range	mm/memblock.c	/^void __init_memblock __next_mem_pfn_range(int *idx, int nid,$/;"	f
__next_pwq_cpu	kernel/workqueue.c	/^static inline int __next_pwq_cpu(int cpu, const struct cpumask *mask,$/;"	f	file:
__next_timer_interrupt	kernel/timer.c	/^static unsigned long __next_timer_interrupt(struct tvec_base *base)$/;"	f	file:
__next_wq_cpu	kernel/workqueue.c	/^static inline int __next_wq_cpu(int cpu, const struct cpumask *mask,$/;"	f	file:
__note_new_gpnum	kernel/rcutree.c	/^static void __note_new_gpnum(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)$/;"	f	file:
__offline_isolated_pages	mm/page_alloc.c	/^__offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
__offline_pages	mm/memory_hotplug.c	/^static int __ref __offline_pages(unsigned long start_pfn,$/;"	f	file:
__online_page_free	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__online_page_free);$/;"	v
__online_page_free	mm/memory_hotplug.c	/^void __online_page_free(struct page *page)$/;"	f
__online_page_increment_counters	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__online_page_increment_counters);$/;"	v
__online_page_increment_counters	mm/memory_hotplug.c	/^void __online_page_increment_counters(struct page *page)$/;"	f
__online_page_set_limits	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__online_page_set_limits);$/;"	v
__online_page_set_limits	mm/memory_hotplug.c	/^void __online_page_set_limits(struct page *page)$/;"	f
__orderly_poweroff	kernel/sys.c	/^static int __orderly_poweroff(bool force)$/;"	f	file:
__pad	kernel/module_signing.c	/^	u8	__pad[3];$/;"	m	struct:module_signature	file:
__padata_add_cpu	kernel/padata.c	/^static int __padata_add_cpu(struct padata_instance *pinst, int cpu)$/;"	f	file:
__padata_free	kernel/padata.c	/^static void __padata_free(struct padata_instance *pinst)$/;"	f	file:
__padata_list_init	kernel/padata.c	/^static void __padata_list_init(struct padata_list *pd_list)$/;"	f	file:
__padata_remove_cpu	kernel/padata.c	/^static int __padata_remove_cpu(struct padata_instance *pinst, int cpu)$/;"	f	file:
__padata_set_cpumasks	kernel/padata.c	/^static int __padata_set_cpumasks(struct padata_instance *pinst,$/;"	f	file:
__padata_start	kernel/padata.c	/^static void __padata_start(struct padata_instance *pinst)$/;"	f	file:
__padata_stop	kernel/padata.c	/^static void __padata_stop(struct padata_instance *pinst)$/;"	f	file:
__page_cache_alloc	include/linux/pagemap.h	/^static inline struct page *__page_cache_alloc(gfp_t gfp)$/;"	f
__page_cache_alloc	mm/filemap.c	/^EXPORT_SYMBOL(__page_cache_alloc);$/;"	v
__page_cache_alloc	mm/filemap.c	/^struct page *__page_cache_alloc(gfp_t gfp)$/;"	f
__page_cache_release	mm/swap.c	/^static void __page_cache_release(struct page *page)$/;"	f	file:
__page_check_address	mm/rmap.c	/^pte_t *__page_check_address(struct page *page, struct mm_struct *mm,$/;"	f
__page_check_anon_rmap	mm/rmap.c	/^static void __page_check_anon_rmap(struct page *page,$/;"	f	file:
__page_file_index	mm/swapfile.c	/^EXPORT_SYMBOL_GPL(__page_file_index);$/;"	v
__page_file_index	mm/swapfile.c	/^pgoff_t __page_file_index(struct page *page)$/;"	f
__page_file_mapping	mm/swapfile.c	/^EXPORT_SYMBOL_GPL(__page_file_mapping);$/;"	v
__page_file_mapping	mm/swapfile.c	/^struct address_space *__page_file_mapping(struct page *page)$/;"	f
__page_set_anon_rmap	mm/rmap.c	/^static void __page_set_anon_rmap(struct page *page,$/;"	f	file:
__page_symlink	fs/namei.c	/^EXPORT_SYMBOL(__page_symlink);$/;"	v
__page_symlink	fs/namei.c	/^int __page_symlink(struct inode *inode, const char *symname, int len, int nofs)$/;"	f
__pagevec_lru_add	mm/swap.c	/^EXPORT_SYMBOL(__pagevec_lru_add);$/;"	v
__pagevec_lru_add	mm/swap.c	/^void __pagevec_lru_add(struct pagevec *pvec, enum lru_list lru)$/;"	f
__pagevec_lru_add_fn	mm/swap.c	/^static void __pagevec_lru_add_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
__pagevec_release	mm/swap.c	/^EXPORT_SYMBOL(__pagevec_release);$/;"	v
__pagevec_release	mm/swap.c	/^void __pagevec_release(struct pagevec *pvec)$/;"	f
__paginginit	mm/internal.h	281;"	d
__paginginit	mm/internal.h	283;"	d
__paint_it	mm/kmemleak.c	/^static void __paint_it(struct kmemleak_object *object, int color)$/;"	f	file:
__parse_crashkernel	kernel/kexec.c	/^static int __init __parse_crashkernel(char *cmdline,$/;"	f	file:
__parse_numa_zonelist_order	mm/page_alloc.c	/^static int __parse_numa_zonelist_order(char *s)$/;"	f	file:
__pcpu_map_pages	mm/percpu-vm.c	/^static int __pcpu_map_pages(unsigned long addr, struct page **pages,$/;"	f	file:
__pcpu_ptr_to_addr	mm/percpu.c	89;"	d	file:
__pcpu_ptr_to_addr	mm/percpu.c	97;"	d	file:
__pcpu_size_to_slot	mm/percpu.c	/^static int __pcpu_size_to_slot(int size)$/;"	f	file:
__pcpu_unmap_pages	mm/percpu-vm.c	/^static void __pcpu_unmap_pages(unsigned long addr, int nr_pages)$/;"	f	file:
__per_cpu_offset	mm/percpu.c	/^EXPORT_SYMBOL(__per_cpu_offset);$/;"	v
__perform_reclaim	mm/page_alloc.c	/^__perform_reclaim(gfp_t gfp_mask, unsigned int order, struct zonelist *zonelist,$/;"	f	file:
__pmd_alloc	mm/memory.c	/^int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)$/;"	f
__pmd_trans_huge_lock	mm/huge_memory.c	/^int __pmd_trans_huge_lock(pmd_t *pmd, struct vm_area_struct *vma)$/;"	f
__pollwait	fs/select.c	/^static void __pollwait(struct file *filp, wait_queue_head_t *wait_address,$/;"	f	file:
__pollwake	fs/select.c	/^static int __pollwake(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
__posix_lock_file	fs/locks.c	/^static int __posix_lock_file(struct inode *inode, struct file_lock *request, struct file_lock *conflock)$/;"	f	file:
__print_lock_name	kernel/lockdep.c	/^static void __print_lock_name(struct lock_class *class)$/;"	f	file:
__print_symbol	kernel/kallsyms.c	/^EXPORT_SYMBOL(__print_symbol);$/;"	v
__print_symbol	kernel/kallsyms.c	/^void __print_symbol(const char *fmt, unsigned long address)$/;"	f
__printk_ratelimit	kernel/printk.c	/^EXPORT_SYMBOL(__printk_ratelimit);$/;"	v
__printk_ratelimit	kernel/printk.c	/^int __printk_ratelimit(const char *func)$/;"	f
__probe_kernel_read	mm/maccess.c	/^long __probe_kernel_read(void *dst, const void *src, size_t size)$/;"	f
__probe_kernel_write	mm/maccess.c	/^long __probe_kernel_write(void *dst, const void *src, size_t size)$/;"	f
__profile_flip_buffers	kernel/profile.c	/^static void __profile_flip_buffers(void *unused)$/;"	f	file:
__propagate_umount	fs/pnode.c	/^static void __propagate_umount(struct mount *mnt)$/;"	f	file:
__pte_alloc	mm/memory.c	/^int __pte_alloc(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__pte_alloc_kernel	mm/memory.c	/^int __pte_alloc_kernel(pmd_t *pmd, unsigned long address)$/;"	f
__ptrace_detach	kernel/ptrace.c	/^static bool __ptrace_detach(struct task_struct *tracer, struct task_struct *p)$/;"	f	file:
__ptrace_link	kernel/ptrace.c	/^void __ptrace_link(struct task_struct *child, struct task_struct *new_parent)$/;"	f
__ptrace_may_access	kernel/ptrace.c	/^static int __ptrace_may_access(struct task_struct *task, unsigned int mode)$/;"	f	file:
__ptrace_unlink	kernel/ptrace.c	/^void __ptrace_unlink(struct task_struct *child)$/;"	f
__pud_alloc	mm/memory.c	/^int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)$/;"	f
__purge_vmap_area_lazy	mm/vmalloc.c	/^static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,$/;"	f	file:
__put_anon_vma	mm/rmap.c	/^void __put_anon_vma(struct anon_vma *anon_vma)$/;"	f
__put_chunk	kernel/audit_tree.c	/^static void __put_chunk(struct rcu_head *rcu)$/;"	f	file:
__put_compound_page	mm/swap.c	/^static void __put_compound_page(struct page *page)$/;"	f	file:
__put_cred	kernel/cred.c	/^EXPORT_SYMBOL(__put_cred);$/;"	v
__put_cred	kernel/cred.c	/^void __put_cred(struct cred *cred)$/;"	f
__put_css_set	kernel/cgroup.c	/^static void __put_css_set(struct css_set *cg, int taskexit)$/;"	f	file:
__put_ioctx	fs/aio.c	/^static void __put_ioctx(struct kioctx *ctx)$/;"	f	file:
__put_page	mm/internal.h	/^static inline void __put_page(struct page *page)$/;"	f
__put_single_page	mm/swap.c	/^static void __put_single_page(struct page *page)$/;"	f	file:
__put_super	fs/super.c	/^static void __put_super(struct super_block *sb)$/;"	f	file:
__put_task_struct	kernel/fork.c	/^EXPORT_SYMBOL_GPL(__put_task_struct);$/;"	v
__put_task_struct	kernel/fork.c	/^void __put_task_struct(struct task_struct *tsk)$/;"	f
__put_unused_fd	fs/file.c	/^static void __put_unused_fd(struct files_struct *files, unsigned int fd)$/;"	f	file:
__putback_balloon_page	mm/balloon_compaction.c	/^static inline void __putback_balloon_page(struct page *page)$/;"	f	file:
__queue_delayed_work	kernel/workqueue.c	/^static void __queue_delayed_work(int cpu, struct workqueue_struct *wq,$/;"	f	file:
__queue_kicked_iocb	fs/aio.c	/^static inline int __queue_kicked_iocb(struct kiocb *iocb)$/;"	f	file:
__queue_work	kernel/workqueue.c	/^static void __queue_work(unsigned int cpu, struct workqueue_struct *wq,$/;"	f	file:
__raise_softirq_irqoff	kernel/softirq.c	/^void __raise_softirq_irqoff(unsigned int nr)$/;"	f
__raw_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__raw_notifier_call_chain);$/;"	v
__raw_notifier_call_chain	kernel/notifier.c	/^int __raw_notifier_call_chain(struct raw_notifier_head *nh,$/;"	f
__rcu_cpu_has_nonlazy_callbacks	kernel/rcutree_plugin.h	/^static bool __rcu_cpu_has_nonlazy_callbacks(struct rcu_data *rdp)$/;"	f
__rcu_init_preempt	kernel/rcutree_plugin.h	/^static void __init __rcu_init_preempt(void)$/;"	f
__rcu_pending	kernel/rcutree.c	/^static int __rcu_pending(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
__rcu_process_callbacks	kernel/rcutiny.c	/^static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp)$/;"	f	file:
__rcu_process_callbacks	kernel/rcutree.c	/^__rcu_process_callbacks(struct rcu_state *rsp)$/;"	f	file:
__rcu_process_gp_end	kernel/rcutree.c	/^__rcu_process_gp_end(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)$/;"	f	file:
__rcu_read_lock	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(__rcu_read_lock);$/;"	v
__rcu_read_lock	kernel/rcupdate.c	/^void __rcu_read_lock(void)$/;"	f
__rcu_read_unlock	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(__rcu_read_unlock);$/;"	v
__rcu_read_unlock	kernel/rcupdate.c	/^void __rcu_read_unlock(void)$/;"	f
__rcu_reclaim	kernel/rcu.h	/^static inline bool __rcu_reclaim(char *rn, struct rcu_head *head)$/;"	f
__read_cache_page	mm/filemap.c	/^static struct page *__read_cache_page(struct address_space *mapping,$/;"	f	file:
__read_mostly	fs/anon_inodes.c	/^static struct vfsmount *anon_inode_mnt __read_mostly;$/;"	v	typeref:struct:anon_inode_mnt	file:
__read_mostly	fs/bio-integrity.c	/^struct integrity_slab bip_slab[BIOVEC_NR_POOLS] __read_mostly = {$/;"	v	typeref:struct:bip_slab
__read_mostly	fs/bio.c	/^static mempool_t *bio_split_pool __read_mostly;$/;"	v	file:
__read_mostly	fs/bio.c	/^static struct biovec_slab bvec_slabs[BIOVEC_NR_POOLS] __read_mostly = {$/;"	v	typeref:struct:bvec_slabs	file:
__read_mostly	fs/block_dev.c	/^static struct kmem_cache * bdev_cachep __read_mostly;$/;"	v	typeref:struct:bdev_cachep	file:
__read_mostly	fs/block_dev.c	/^static struct super_block *blockdev_superblock __read_mostly;$/;"	v	typeref:struct:blockdev_superblock	file:
__read_mostly	fs/buffer.c	/^static struct kmem_cache *bh_cachep __read_mostly;$/;"	v	typeref:struct:bh_cachep	file:
__read_mostly	fs/dcache.c	/^int sysctl_vfs_cache_pressure __read_mostly = 100;$/;"	v
__read_mostly	fs/dcache.c	/^static struct hlist_bl_head *dentry_hashtable __read_mostly;$/;"	v	typeref:struct:dentry_hashtable	file:
__read_mostly	fs/dcache.c	/^static struct kmem_cache *dentry_cache __read_mostly;$/;"	v	typeref:struct:dentry_cache	file:
__read_mostly	fs/dcache.c	/^static unsigned int d_hash_mask __read_mostly;$/;"	v	file:
__read_mostly	fs/dcache.c	/^static unsigned int d_hash_shift __read_mostly;$/;"	v	file:
__read_mostly	fs/dcache.c	/^struct kmem_cache *names_cachep __read_mostly;$/;"	v	typeref:struct:names_cachep
__read_mostly	fs/dcookies.c	/^static size_t hash_size __read_mostly;$/;"	v	file:
__read_mostly	fs/dcookies.c	/^static struct kmem_cache *dcookie_cache __read_mostly;$/;"	v	typeref:struct:dcookie_cache	file:
__read_mostly	fs/dcookies.c	/^static struct list_head *dcookie_hashtable __read_mostly;$/;"	v	typeref:struct:dcookie_hashtable	file:
__read_mostly	fs/direct-io.c	/^static struct kmem_cache *dio_cache __read_mostly;$/;"	v	typeref:struct:dio_cache	file:
__read_mostly	fs/eventpoll.c	/^static long max_user_watches __read_mostly;$/;"	v	file:
__read_mostly	fs/eventpoll.c	/^static struct kmem_cache *epi_cache __read_mostly;$/;"	v	typeref:struct:epi_cache	file:
__read_mostly	fs/eventpoll.c	/^static struct kmem_cache *pwq_cache __read_mostly;$/;"	v	typeref:struct:pwq_cache	file:
__read_mostly	fs/fcntl.c	/^static struct kmem_cache *fasync_cache __read_mostly;$/;"	v	typeref:struct:fasync_cache	file:
__read_mostly	fs/file.c	/^int sysctl_nr_open __read_mostly = 1024*1024;$/;"	v
__read_mostly	fs/file_table.c	/^static struct kmem_cache *filp_cachep __read_mostly;$/;"	v	typeref:struct:filp_cachep	file:
__read_mostly	fs/inode.c	/^static struct hlist_head *inode_hashtable __read_mostly;$/;"	v	typeref:struct:inode_hashtable	file:
__read_mostly	fs/inode.c	/^static struct kmem_cache *inode_cachep __read_mostly;$/;"	v	typeref:struct:inode_cachep	file:
__read_mostly	fs/inode.c	/^static unsigned int i_hash_mask __read_mostly;$/;"	v	file:
__read_mostly	fs/inode.c	/^static unsigned int i_hash_shift __read_mostly;$/;"	v	file:
__read_mostly	fs/locks.c	/^static struct kmem_cache *filelock_cache __read_mostly;$/;"	v	typeref:struct:filelock_cache	file:
__read_mostly	fs/namei.c	/^int sysctl_protected_hardlinks __read_mostly = 0;$/;"	v
__read_mostly	fs/namei.c	/^int sysctl_protected_symlinks __read_mostly = 0;$/;"	v
__read_mostly	fs/namespace.c	/^static struct kmem_cache *mnt_cache __read_mostly;$/;"	v	typeref:struct:mnt_cache	file:
__read_mostly	fs/namespace.c	/^static struct list_head *mount_hashtable __read_mostly;$/;"	v	typeref:struct:mount_hashtable	file:
__read_mostly	fs/notify/inotify/inotify_user.c	/^static int inotify_max_queued_events __read_mostly;$/;"	v	file:
__read_mostly	fs/notify/inotify/inotify_user.c	/^static int inotify_max_user_instances __read_mostly;$/;"	v	file:
__read_mostly	fs/notify/inotify/inotify_user.c	/^static int inotify_max_user_watches __read_mostly;$/;"	v	file:
__read_mostly	fs/notify/inotify/inotify_user.c	/^static struct kmem_cache *inotify_inode_mark_cachep __read_mostly;$/;"	v	typeref:struct:inotify_inode_mark_cachep	file:
__read_mostly	fs/notify/inotify/inotify_user.c	/^struct kmem_cache *event_priv_cachep __read_mostly;$/;"	v	typeref:struct:event_priv_cachep
__read_mostly	fs/pipe.c	/^static struct vfsmount *pipe_mnt __read_mostly;$/;"	v	typeref:struct:pipe_mnt	file:
__read_mostly	kernel/cgroup.c	/^static int need_forkexit_callback __read_mostly;$/;"	v	file:
__read_mostly	kernel/cgroup.c	/^static int use_task_css_set_links __read_mostly;$/;"	v	file:
__read_mostly	kernel/cpuset.c	/^int cpuset_memory_pressure_enabled __read_mostly;$/;"	v
__read_mostly	kernel/cpuset.c	/^int number_of_cpusets __read_mostly;$/;"	v
__read_mostly	kernel/delayacct.c	/^int delayacct_on __read_mostly = 1;	\/* Delay accounting turned on\/off *\/$/;"	v
__read_mostly	kernel/hrtimer.c	/^static int hrtimer_hres_enabled __read_mostly  = 1;$/;"	v	file:
__read_mostly	kernel/kcmp.c	/^static unsigned long cookies[KCMP_TYPES][2] __read_mostly;$/;"	v	file:
__read_mostly	kernel/kprobes.c	/^static struct ftrace_ops kprobe_ftrace_ops __read_mostly = {$/;"	v	typeref:struct:kprobe_ftrace_ops	file:
__read_mostly	kernel/printk.c	/^int printk_delay_msec __read_mostly;$/;"	v
__read_mostly	kernel/profile.c	/^int prof_on __read_mostly;$/;"	v
__read_mostly	kernel/rcupdate.c	/^int rcu_cpu_stall_suppress __read_mostly; \/* 1 = suppress stall warnings. *\/$/;"	v
__read_mostly	kernel/rcupdate.c	/^int rcu_cpu_stall_timeout __read_mostly = CONFIG_RCU_CPU_STALL_TIMEOUT;$/;"	v
__read_mostly	kernel/rcutiny_plugin.h	/^int rcu_scheduler_active __read_mostly;$/;"	v
__read_mostly	kernel/rcutiny_plugin.h	/^static int rcu_scheduler_fully_active __read_mostly;$/;"	v
__read_mostly	kernel/rcutree.c	/^int rcu_num_lvls __read_mostly = RCU_NUM_LVLS;$/;"	v
__read_mostly	kernel/rcutree.c	/^int rcu_num_nodes __read_mostly = NUM_RCU_NODES; \/* Total # rcu_nodes in use. *\/$/;"	v
__read_mostly	kernel/rcutree.c	/^int rcu_scheduler_active __read_mostly;$/;"	v
__read_mostly	kernel/rcutree.c	/^static int rcu_scheduler_fully_active __read_mostly;$/;"	v	file:
__read_mostly	kernel/signal.c	/^int print_fatal_signals __read_mostly;$/;"	v
__read_mostly	kernel/smp.c	/^int nr_cpu_ids __read_mostly = NR_CPUS;$/;"	v
__read_mostly	kernel/user_namespace.c	/^static struct kmem_cache *user_ns_cachep __read_mostly;$/;"	v	typeref:struct:user_ns_cachep	file:
__read_mostly	kernel/workqueue.c	/^struct workqueue_struct *system_freezable_wq __read_mostly;$/;"	v	typeref:struct:system_freezable_wq
__read_mostly	kernel/workqueue.c	/^struct workqueue_struct *system_highpri_wq __read_mostly;$/;"	v	typeref:struct:system_highpri_wq
__read_mostly	kernel/workqueue.c	/^struct workqueue_struct *system_long_wq __read_mostly;$/;"	v	typeref:struct:system_long_wq
__read_mostly	kernel/workqueue.c	/^struct workqueue_struct *system_unbound_wq __read_mostly;$/;"	v	typeref:struct:system_unbound_wq
__read_mostly	kernel/workqueue.c	/^struct workqueue_struct *system_wq __read_mostly;$/;"	v	typeref:struct:system_wq
__read_mostly	lib/radix-tree.c	/^static unsigned long height_to_maxindex[RADIX_TREE_MAX_PATH + 1] __read_mostly;$/;"	v	file:
__read_mostly	mm/cleancache.c	/^int cleancache_enabled __read_mostly;$/;"	v
__read_mostly	mm/cleancache.c	/^static struct cleancache_ops cleancache_ops __read_mostly;$/;"	v	typeref:struct:cleancache_ops	file:
__read_mostly	mm/frontswap.c	/^bool frontswap_enabled __read_mostly;$/;"	v
__read_mostly	mm/frontswap.c	/^static bool frontswap_tmem_exclusive_gets_enabled __read_mostly;$/;"	v	file:
__read_mostly	mm/frontswap.c	/^static bool frontswap_writethrough_enabled __read_mostly;$/;"	v	file:
__read_mostly	mm/frontswap.c	/^static struct frontswap_ops frontswap_ops __read_mostly;$/;"	v	typeref:struct:frontswap_ops	file:
__read_mostly	mm/highmem.c	/^unsigned long totalhigh_pages __read_mostly;$/;"	v
__read_mostly	mm/huge_memory.c	/^static struct kmem_cache *mm_slot_cache __read_mostly;$/;"	v	typeref:struct:mm_slot_cache	file:
__read_mostly	mm/huge_memory.c	/^static struct task_struct *khugepaged_thread __read_mostly;$/;"	v	typeref:struct:khugepaged_thread	file:
__read_mostly	mm/huge_memory.c	/^static unsigned int khugepaged_alloc_sleep_millisecs __read_mostly = 60000;$/;"	v	file:
__read_mostly	mm/huge_memory.c	/^static unsigned int khugepaged_max_ptes_none __read_mostly = HPAGE_PMD_NR-1;$/;"	v	file:
__read_mostly	mm/huge_memory.c	/^static unsigned int khugepaged_pages_to_scan __read_mostly = HPAGE_PMD_NR*8;$/;"	v	file:
__read_mostly	mm/huge_memory.c	/^static unsigned int khugepaged_scan_sleep_millisecs __read_mostly = 10000;$/;"	v	file:
__read_mostly	mm/huge_memory.c	/^static unsigned long huge_zero_pfn __read_mostly;$/;"	v	file:
__read_mostly	mm/huge_memory.c	/^unsigned long transparent_hugepage_flags __read_mostly =$/;"	v
__read_mostly	mm/hugetlb.c	/^int hugetlb_max_hstate __read_mostly;$/;"	v
__read_mostly	mm/hugetlb_cgroup.c	/^static struct hugetlb_cgroup *root_h_cgroup __read_mostly;$/;"	v	typeref:struct:root_h_cgroup	file:
__read_mostly	mm/hugetlb_cgroup.c	/^struct cgroup_subsys hugetlb_subsys __read_mostly;$/;"	v	typeref:struct:hugetlb_subsys
__read_mostly	mm/memcontrol.c	/^atomic_t memcg_moving __read_mostly;$/;"	v
__read_mostly	mm/memcontrol.c	/^int do_swap_account __read_mostly;$/;"	v
__read_mostly	mm/memcontrol.c	/^static struct mem_cgroup *root_mem_cgroup __read_mostly;$/;"	v	typeref:struct:root_mem_cgroup	file:
__read_mostly	mm/memcontrol.c	/^static struct mem_cgroup_tree soft_limit_tree __read_mostly;$/;"	v	typeref:struct:soft_limit_tree	file:
__read_mostly	mm/memcontrol.c	/^struct cgroup_subsys mem_cgroup_subsys __read_mostly;$/;"	v	typeref:struct:mem_cgroup_subsys
__read_mostly	mm/memory-failure.c	/^atomic_long_t num_poisoned_pages __read_mostly = ATOMIC_LONG_INIT(0);$/;"	v
__read_mostly	mm/memory-failure.c	/^int sysctl_memory_failure_early_kill __read_mostly = 0;$/;"	v
__read_mostly	mm/memory-failure.c	/^int sysctl_memory_failure_recovery __read_mostly = 1;$/;"	v
__read_mostly	mm/memory.c	/^int randomize_va_space __read_mostly =$/;"	v
__read_mostly	mm/memory.c	/^unsigned long highest_memmap_pfn __read_mostly;$/;"	v
__read_mostly	mm/memory.c	/^unsigned long zero_pfn __read_mostly;$/;"	v
__read_mostly	mm/migrate.c	/^static unsigned int migrate_interval_millisecs __read_mostly = 100;$/;"	v	file:
__read_mostly	mm/migrate.c	/^static unsigned int pteupdate_interval_millisecs __read_mostly = 1000;$/;"	v	file:
__read_mostly	mm/migrate.c	/^static unsigned int ratelimit_pages __read_mostly = 128 << (20 - PAGE_SHIFT);$/;"	v	file:
__read_mostly	mm/mmap.c	/^int sysctl_max_map_count __read_mostly = DEFAULT_MAX_MAP_COUNT;$/;"	v
__read_mostly	mm/mmap.c	/^int sysctl_overcommit_memory __read_mostly = OVERCOMMIT_GUESS;  \/* heuristic overcommit *\/$/;"	v
__read_mostly	mm/mmap.c	/^int sysctl_overcommit_ratio __read_mostly = 50;	\/* default is 50% *\/$/;"	v
__read_mostly	mm/page_alloc.c	/^bool oom_killer_disabled __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^gfp_t gfp_allowed_mask __read_mostly = GFP_BOOT_MASK;$/;"	v
__read_mostly	mm/page_alloc.c	/^int nr_node_ids __read_mostly = MAX_NUMNODES;$/;"	v
__read_mostly	mm/page_alloc.c	/^int nr_online_nodes __read_mostly = 1;$/;"	v
__read_mostly	mm/page_alloc.c	/^int page_group_by_mobility_disabled __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^int pageblock_order __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^nodemask_t node_states[NR_NODE_STATES] __read_mostly = {$/;"	v
__read_mostly	mm/page_alloc.c	/^unsigned long dirty_balance_reserve __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^unsigned long totalram_pages __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^unsigned long totalreserve_pages __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^const unsigned long *pcpu_unit_offsets __read_mostly;	\/* cpu -> unit offset *\/$/;"	v
__read_mostly	mm/percpu.c	/^static const int *pcpu_unit_map __read_mostly;		\/* cpu -> unit *\/$/;"	v	file:
__read_mostly	mm/percpu.c	/^static const size_t *pcpu_group_sizes __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static const unsigned long *pcpu_group_offsets __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_atom_size __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_nr_groups __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_nr_slots __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_nr_units __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_unit_pages __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_unit_size __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static size_t pcpu_chunk_struct_size __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static struct list_head *pcpu_slot __read_mostly; \/* chunk list slots *\/$/;"	v	typeref:struct:pcpu_slot	file:
__read_mostly	mm/percpu.c	/^static unsigned int pcpu_high_unit_cpu __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static unsigned int pcpu_low_unit_cpu __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^unsigned long __per_cpu_offset[NR_CPUS] __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^void *pcpu_base_addr __read_mostly;$/;"	v
__read_mostly	mm/shmem.c	/^static struct backing_dev_info shmem_backing_dev_info  __read_mostly = {$/;"	v	typeref:struct:shmem_backing_dev_info	file:
__read_mostly	mm/slab.c	/^static bool pfmemalloc_active __read_mostly;$/;"	v	file:
__read_mostly	mm/slab.c	/^static int use_alien_caches __read_mostly = 1;$/;"	v	file:
__read_mostly	mm/vmalloc.c	/^static bool vmap_initialized __read_mostly = false;$/;"	v	file:
__read_mostly	mm/vmstat.c	/^int sysctl_stat_interval __read_mostly = HZ;$/;"	v
__refrigerator	kernel/freezer.c	/^EXPORT_SYMBOL(__refrigerator);$/;"	v
__refrigerator	kernel/freezer.c	/^bool __refrigerator(bool check_kthr_stop)$/;"	f
__register_binfmt	fs/exec.c	/^EXPORT_SYMBOL(__register_binfmt);$/;"	v
__register_binfmt	fs/exec.c	/^void __register_binfmt(struct linux_binfmt * fmt, int insert)$/;"	f
__register_chrdev	fs/char_dev.c	/^EXPORT_SYMBOL(__register_chrdev);$/;"	v
__register_chrdev	fs/char_dev.c	/^int __register_chrdev(unsigned int major, unsigned int baseminor,$/;"	f
__register_chrdev_region	fs/char_dev.c	/^__register_chrdev_region(unsigned int major, unsigned int baseminor,$/;"	f	file:
__relay_reset	kernel/relay.c	/^static void __relay_reset(struct rchan_buf *buf, unsigned int init)$/;"	f	file:
__relay_set_buf_dentry	kernel/relay.c	/^static void __relay_set_buf_dentry(void *info)$/;"	f	file:
__release_child_resources	kernel/resource.c	/^static void __release_child_resources(struct resource *r)$/;"	f	file:
__release_region	kernel/resource.c	/^EXPORT_SYMBOL(__release_region);$/;"	v
__release_region	kernel/resource.c	/^void __release_region(struct resource *parent, resource_size_t start,$/;"	f
__release_resource	kernel/resource.c	/^static int __release_resource(struct resource *old)$/;"	f	file:
__releases	fs/mbcache.c	/^	__releases(mb_cache_spinlock)$/;"	f
__releases	fs/super.c	/^static int grab_super(struct super_block *s) __releases(sb_lock)$/;"	f
__releases	include/linux/spinlock.h	/^static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)$/;"	f
__releases	kernel/cgroup.c	/^	__releases(css_set_lock)$/;"	f
__releases	kernel/kprobes.c	/^__releases(hlist_lock)$/;"	f
__releases	kernel/rcutorture.c	/^static void rcu_bh_torture_read_unlock(int idx) __releases(RCU_BH)$/;"	f
__releases	kernel/rcutorture.c	/^static void rcu_torture_read_unlock(int idx) __releases(RCU)$/;"	f
__releases	kernel/resource.c	/^	__releases(resource_lock)$/;"	f
__releases	mm/memory.c	/^	__releases(ptl)$/;"	f
__releases	mm/nommu.c	/^	__releases(nommu_region_sem)$/;"	f
__remove_assoc_queue	fs/buffer.c	/^static void __remove_assoc_queue(struct buffer_head *bh)$/;"	f	file:
__remove_hrtimer	kernel/hrtimer.c	/^static void __remove_hrtimer(struct hrtimer *timer,$/;"	f	file:
__remove_inode_hash	fs/inode.c	/^EXPORT_SYMBOL(__remove_inode_hash);$/;"	v
__remove_inode_hash	fs/inode.c	/^void __remove_inode_hash(struct inode *inode)$/;"	f
__remove_mapping	mm/vmscan.c	/^static int __remove_mapping(struct address_space *mapping, struct page *page)$/;"	f	file:
__remove_pages	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__remove_pages);$/;"	v
__remove_pages	mm/memory_hotplug.c	/^int __remove_pages(struct zone *zone, unsigned long phys_start_pfn,$/;"	f
__remove_section	mm/memory_hotplug.c	/^static int __remove_section(struct zone *zone, struct mem_section *ms)$/;"	f	file:
__remove_shared_vm_struct	mm/mmap.c	/^static void __remove_shared_vm_struct(struct vm_area_struct *vma,$/;"	f	file:
__remove_suid	fs/inode.c	/^static int __remove_suid(struct dentry *dentry, int kill)$/;"	f	file:
__remove_zone	mm/memory_hotplug.c	/^static void __remove_zone(struct zone *zone, unsigned long start_pfn)$/;"	f	file:
__request_module	kernel/kmod.c	/^EXPORT_SYMBOL(__request_module);$/;"	v
__request_module	kernel/kmod.c	/^int __request_module(bool wait, const char *fmt, ...)$/;"	f
__request_region	kernel/resource.c	/^EXPORT_SYMBOL(__request_region);$/;"	v
__request_region	kernel/resource.c	/^struct resource * __request_region(struct resource *parent,$/;"	f
__request_resource	kernel/resource.c	/^static struct resource * __request_resource(struct resource *root, struct resource *new)$/;"	f	file:
__res_counter_charge	kernel/res_counter.c	/^static int __res_counter_charge(struct res_counter *counter, unsigned long val,$/;"	f	file:
__reserve	mm/bootmem.c	/^static int __init __reserve(bootmem_data_t *bdata, unsigned long sidx,$/;"	f	file:
__reserve_region_with_split	kernel/resource.c	/^static void __init __reserve_region_with_split(struct resource *root,$/;"	f	file:
__reset_isolation_suitable	mm/compaction.c	/^static void __reset_isolation_suitable(struct zone *zone)$/;"	f	file:
__rmqueue	mm/page_alloc.c	/^static struct page *__rmqueue(struct zone *zone, unsigned int order,$/;"	f	file:
__rmqueue_fallback	mm/page_alloc.c	/^__rmqueue_fallback(struct zone *zone, int order, int start_migratetype)$/;"	f	file:
__rmqueue_smallest	mm/page_alloc.c	/^struct page *__rmqueue_smallest(struct zone *zone, unsigned int order,$/;"	f	file:
__round_jiffies	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies);$/;"	v
__round_jiffies	kernel/timer.c	/^unsigned long __round_jiffies(unsigned long j, int cpu)$/;"	f
__round_jiffies_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies_relative);$/;"	v
__round_jiffies_relative	kernel/timer.c	/^unsigned long __round_jiffies_relative(unsigned long j, int cpu)$/;"	f
__round_jiffies_up	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies_up);$/;"	v
__round_jiffies_up	kernel/timer.c	/^unsigned long __round_jiffies_up(unsigned long j, int cpu)$/;"	f
__round_jiffies_up_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies_up_relative);$/;"	v
__round_jiffies_up_relative	kernel/timer.c	/^unsigned long __round_jiffies_up_relative(unsigned long j, int cpu)$/;"	f
__rsv_window_dump	fs/ext3/balloc.c	/^static void __rsv_window_dump(struct rb_root *root, int verbose,$/;"	f	file:
__rt_mutex_adjust_prio	kernel/rtmutex.c	/^static void __rt_mutex_adjust_prio(struct task_struct *task)$/;"	f	file:
__rt_mutex_init	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(__rt_mutex_init);$/;"	v
__rt_mutex_init	kernel/rtmutex.c	/^void __rt_mutex_init(struct rt_mutex *lock, const char *name)$/;"	f
__rt_mutex_slowlock	kernel/rtmutex.c	/^__rt_mutex_slowlock(struct rt_mutex *lock, int state,$/;"	f	file:
__run_hrtimer	kernel/hrtimer.c	/^static void __run_hrtimer(struct hrtimer *timer, ktime_t *now)$/;"	f	file:
__run_timers	kernel/timer.c	/^static inline void __run_timers(struct tvec_base *base)$/;"	f	file:
__rwsem_do_wake	lib/rwsem-spinlock.c	/^__rwsem_do_wake(struct rw_semaphore *sem, int wakewrite)$/;"	f	file:
__rwsem_wake_one_writer	lib/rwsem-spinlock.c	/^__rwsem_wake_one_writer(struct rw_semaphore *sem)$/;"	f	file:
__save_altstack	kernel/signal.c	/^int __save_altstack(stack_t __user *uss, unsigned long sp)$/;"	f
__save_stack_trace	mm/kmemleak.c	/^static int __save_stack_trace(unsigned long *trace)$/;"	f	file:
__sb_end_write	fs/super.c	/^EXPORT_SYMBOL(__sb_end_write);$/;"	v
__sb_end_write	fs/super.c	/^void __sb_end_write(struct super_block *sb, int level)$/;"	f
__sb_start_write	fs/super.c	/^EXPORT_SYMBOL(__sb_start_write);$/;"	v
__sb_start_write	fs/super.c	/^int __sb_start_write(struct super_block *sb, int level, bool wait)$/;"	f
__section_nr	mm/sparse.c	/^int __section_nr(struct mem_section* ms)$/;"	f
__secure_computing	kernel/seccomp.c	/^int __secure_computing(int this_syscall)$/;"	f
__send_remote_softirq	kernel/softirq.c	/^EXPORT_SYMBOL(__send_remote_softirq);$/;"	v
__send_remote_softirq	kernel/softirq.c	/^void __send_remote_softirq(struct call_single_data *cp, int cpu, int this_cpu, int softirq)$/;"	f
__send_signal	kernel/signal.c	/^static int __send_signal(int sig, struct siginfo *info, struct task_struct *t,$/;"	f	file:
__seq_open_private	fs/seq_file.c	/^EXPORT_SYMBOL(__seq_open_private);$/;"	v
__seq_open_private	fs/seq_file.c	/^void *__seq_open_private(struct file *f, const struct seq_operations *ops,$/;"	f
__set_close_on_exec	fs/file.c	/^static inline void __set_close_on_exec(int fd, struct fdtable *fdt)$/;"	f	file:
__set_current_blocked	kernel/signal.c	/^void __set_current_blocked(const sigset_t *newset)$/;"	f
__set_open_fd	fs/file.c	/^static inline void __set_open_fd(int fd, struct fdtable *fdt)$/;"	f	file:
__set_page_dirty	fs/buffer.c	/^static void __set_page_dirty(struct page *page,$/;"	f	file:
__set_page_dirty_buffers	fs/buffer.c	/^EXPORT_SYMBOL(__set_page_dirty_buffers);$/;"	v
__set_page_dirty_buffers	fs/buffer.c	/^int __set_page_dirty_buffers(struct page *page)$/;"	f
__set_page_dirty_no_writeback	mm/page-writeback.c	/^int __set_page_dirty_no_writeback(struct page *page)$/;"	f
__set_page_dirty_nobuffers	mm/page-writeback.c	/^EXPORT_SYMBOL(__set_page_dirty_nobuffers);$/;"	v
__set_page_dirty_nobuffers	mm/page-writeback.c	/^int __set_page_dirty_nobuffers(struct page *page)$/;"	f
__set_page_locked	include/linux/pagemap.h	/^static inline void __set_page_locked(struct page *page)$/;"	f
__set_personality	kernel/exec_domain.c	/^EXPORT_SYMBOL(__set_personality);$/;"	v
__set_personality	kernel/exec_domain.c	/^int __set_personality(unsigned int personality)$/;"	f
__set_special_pids	kernel/exit.c	/^void __set_special_pids(struct pid *pid)$/;"	f
__set_task_blocked	kernel/signal.c	/^static void __set_task_blocked(struct task_struct *tsk, const sigset_t *newset)$/;"	f	file:
__setup_per_zone_wmarks	mm/page_alloc.c	/^static void __setup_per_zone_wmarks(void)$/;"	f	file:
__si_special	kernel/signal.c	1485;"	d	file:
__sigqueue_alloc	kernel/signal.c	/^__sigqueue_alloc(int sig, struct task_struct *t, gfp_t flags, int override_rlimit)$/;"	f	file:
__sigqueue_free	kernel/signal.c	/^static void __sigqueue_free(struct sigqueue *q)$/;"	f	file:
__simple_xattr_set	fs/xattr.c	/^static int __simple_xattr_set(struct simple_xattrs *xattrs, const char *name,$/;"	f	file:
__slab_alloc	mm/slub.c	/^static void *__slab_alloc(struct kmem_cache *s, gfp_t gfpflags, int node,$/;"	f	file:
__slab_cover_slab_rcu	mm/slab.c	/^		struct slab_rcu __slab_cover_slab_rcu;$/;"	m	union:slab::__anon18	typeref:struct:slab::__anon18::slab_rcu	file:
__slab_error	mm/slab.c	/^static void __slab_error(const char *function, struct kmem_cache *cachep,$/;"	f	file:
__slab_free	mm/slub.c	/^static void __slab_free(struct kmem_cache *s, struct page *page,$/;"	f	file:
__smp_call_function_single	kernel/smp.c	/^void __smp_call_function_single(int cpu, struct call_single_data *data,$/;"	f
__smpboot_create_thread	kernel/smpboot.c	/^__smpboot_create_thread(struct smp_hotplug_thread *ht, unsigned int cpu)$/;"	f	file:
__soft_offline_page	mm/memory-failure.c	/^static int __soft_offline_page(struct page *page, int flags)$/;"	f	file:
__splice_from_pipe	fs/splice.c	/^EXPORT_SYMBOL(__splice_from_pipe);$/;"	v
__splice_from_pipe	fs/splice.c	/^ssize_t __splice_from_pipe(struct pipe_inode_info *pipe, struct splice_desc *sd,$/;"	f
__split_huge_page	mm/huge_memory.c	/^static void __split_huge_page(struct page *page,$/;"	f	file:
__split_huge_page_map	mm/huge_memory.c	/^static int __split_huge_page_map(struct page *page,$/;"	f	file:
__split_huge_page_pmd	mm/huge_memory.c	/^void __split_huge_page_pmd(struct vm_area_struct *vma, unsigned long address,$/;"	f
__split_huge_page_refcount	mm/huge_memory.c	/^static void __split_huge_page_refcount(struct page *page)$/;"	f	file:
__split_huge_page_splitting	mm/huge_memory.c	/^static int __split_huge_page_splitting(struct page *page,$/;"	f	file:
__split_huge_zero_page_pmd	mm/huge_memory.c	/^static void __split_huge_zero_page_pmd(struct vm_area_struct *vma,$/;"	f	file:
__split_vma	mm/mmap.c	/^static int __split_vma(struct mm_struct * mm, struct vm_area_struct * vma,$/;"	f	file:
__sprint_symbol	kernel/kallsyms.c	/^static int __sprint_symbol(char *buffer, unsigned long address,$/;"	f	file:
__srcu_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__srcu_notifier_call_chain);$/;"	v
__srcu_notifier_call_chain	kernel/notifier.c	/^int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,$/;"	f
__srcu_read_lock	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(__srcu_read_lock);$/;"	v
__srcu_read_lock	kernel/srcu.c	/^int __srcu_read_lock(struct srcu_struct *sp)$/;"	f
__srcu_read_unlock	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(__srcu_read_unlock);$/;"	v
__srcu_read_unlock	kernel/srcu.c	/^void __srcu_read_unlock(struct srcu_struct *sp, int idx)$/;"	f
__stack_chk_fail	kernel/panic.c	/^EXPORT_SYMBOL(__stack_chk_fail);$/;"	v
__stack_chk_fail	kernel/panic.c	/^void __stack_chk_fail(void)$/;"	f
__static_key_slow_dec	kernel/jump_label.c	/^static void __static_key_slow_dec(struct static_key *key,$/;"	f	file:
__stop_cpus	kernel/stop_machine.c	/^static int __stop_cpus(const struct cpumask *cpumask,$/;"	f	file:
__stop_machine	kernel/stop_machine.c	/^int __stop_machine(int (*fn)(void *), void *data, const struct cpumask *cpus)$/;"	f
__swap_duplicate	mm/swapfile.c	/^static int __swap_duplicate(swp_entry_t entry, unsigned char usage)$/;"	f	file:
__symbol_get	kernel/module.c	/^EXPORT_SYMBOL_GPL(__symbol_get);$/;"	v
__symbol_get	kernel/module.c	/^void *__symbol_get(const char *symbol)$/;"	f
__symbol_put	kernel/module.c	/^EXPORT_SYMBOL(__symbol_put);$/;"	v
__symbol_put	kernel/module.c	/^void __symbol_put(const char *symbol)$/;"	f
__sync_blockdev	fs/block_dev.c	/^int __sync_blockdev(struct block_device *bdev, int wait)$/;"	f
__sync_blockdev	fs/internal.h	/^static inline int __sync_blockdev(struct block_device *bdev, int wait)$/;"	f
__sync_dirty_buffer	fs/buffer.c	/^EXPORT_SYMBOL(__sync_dirty_buffer);$/;"	v
__sync_dirty_buffer	fs/buffer.c	/^int __sync_dirty_buffer(struct buffer_head *bh, int rw)$/;"	f
__sync_filesystem	fs/sync.c	/^static int __sync_filesystem(struct super_block *sb, int wait)$/;"	f	file:
__synchronize_srcu	kernel/srcu.c	/^static void __synchronize_srcu(struct srcu_struct *sp, int trycount)$/;"	f	file:
__sysrq_enabled	kernel/sysctl.c	/^static int __sysrq_enabled = SYSRQ_DEFAULT_ENABLE;$/;"	v	file:
__task_pid_nr_ns	kernel/pid.c	/^EXPORT_SYMBOL(__task_pid_nr_ns);$/;"	v
__task_pid_nr_ns	kernel/pid.c	/^pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type,$/;"	f
__tasklet_hi_schedule	kernel/softirq.c	/^EXPORT_SYMBOL(__tasklet_hi_schedule);$/;"	v
__tasklet_hi_schedule	kernel/softirq.c	/^void __tasklet_hi_schedule(struct tasklet_struct *t)$/;"	f
__tasklet_hi_schedule_first	kernel/softirq.c	/^EXPORT_SYMBOL(__tasklet_hi_schedule_first);$/;"	v
__tasklet_hi_schedule_first	kernel/softirq.c	/^void __tasklet_hi_schedule_first(struct tasklet_struct *t)$/;"	f
__tasklet_hrtimer_trampoline	kernel/softirq.c	/^static void __tasklet_hrtimer_trampoline(unsigned long data)$/;"	f	file:
__tasklet_schedule	kernel/softirq.c	/^EXPORT_SYMBOL(__tasklet_schedule);$/;"	v
__tasklet_schedule	kernel/softirq.c	/^void __tasklet_schedule(struct tasklet_struct *t)$/;"	f
__test_page_isolated_in_pageblock	mm/page_isolation.c	/^__test_page_isolated_in_pageblock(unsigned long pfn, unsigned long end_pfn,$/;"	f	file:
__thaw_task	kernel/freezer.c	/^void __thaw_task(struct task_struct *p)$/;"	f
__this_module	fs/binfmt_misc.mod.c	/^struct module __this_module$/;"	v	typeref:struct:module
__timer_stats_timer_set_start_info	kernel/timer.c	/^void __timer_stats_timer_set_start_info(struct timer_list *timer, void *addr)$/;"	f
__tlb_remove_page	mm/memory.c	/^int __tlb_remove_page(struct mmu_gather *tlb, struct page *page)$/;"	f
__touch_mnt_namespace	fs/namespace.c	/^static void __touch_mnt_namespace(struct mnt_namespace *ns)$/;"	f	file:
__touch_watchdog	kernel/watchdog.c	/^static void __touch_watchdog(void)$/;"	f	file:
__trace_hardirqs_on_caller	kernel/lockdep.c	/^static void __trace_hardirqs_on_caller(unsigned long ip)$/;"	f	file:
__try_remote_softirq	kernel/softirq.c	/^static int __try_remote_softirq(struct call_single_data *cp, int cpu, int softirq)$/;"	f	file:
__try_stop_module	kernel/module.c	/^static int __try_stop_module(void *_sref)$/;"	f	file:
__try_to_reclaim_swap	mm/swapfile.c	/^__try_to_reclaim_swap(struct swap_info_struct *si, unsigned long offset)$/;"	f	file:
__uidhashfn	kernel/user.c	67;"	d	file:
__unhash_process	kernel/exit.c	/^static void __unhash_process(struct task_struct *p, bool group_dead)$/;"	f	file:
__unlink_module	kernel/module.c	/^static int __unlink_module(void *_mod)$/;"	f	file:
__unmap_and_move	mm/migrate.c	/^static int __unmap_and_move(struct page *page, struct page *newpage,$/;"	f	file:
__unmap_hugepage_range	mm/hugetlb.c	/^void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
__unmap_hugepage_range_final	mm/hugetlb.c	/^void __unmap_hugepage_range_final(struct mmu_gather *tlb,$/;"	f
__unmap_xip_hugetlb_range	mm/memory.c	/^static void __unmap_xip_hugetlb_range(struct vm_area_struct *vma,$/;"	f	file:
__unqueue_futex	kernel/futex.c	/^static void __unqueue_futex(struct futex_q *q)$/;"	f	file:
__unregister_chrdev	fs/char_dev.c	/^EXPORT_SYMBOL(__unregister_chrdev);$/;"	v
__unregister_chrdev	fs/char_dev.c	/^void __unregister_chrdev(unsigned int major, unsigned int baseminor,$/;"	f
__unregister_chrdev_region	fs/char_dev.c	/^__unregister_chrdev_region(unsigned major, unsigned baseminor, int minorct)$/;"	f	file:
__unregister_kprobe_bottom	kernel/kprobes.c	/^static void __kprobes __unregister_kprobe_bottom(struct kprobe *p)$/;"	f	file:
__unregister_kprobe_top	kernel/kprobes.c	/^static int __kprobes __unregister_kprobe_top(struct kprobe *p)$/;"	f	file:
__unused	kernel/sysctl_binary.c	/^	compat_ulong_t	__unused[4];$/;"	m	struct:compat_sysctl_args	file:
__up	kernel/semaphore.c	/^static noinline void __sched __up(struct semaphore *sem)$/;"	f	file:
__up_read	lib/rwsem-spinlock.c	/^void __up_read(struct rw_semaphore *sem)$/;"	f
__up_write	lib/rwsem-spinlock.c	/^void __up_write(struct rw_semaphore *sem)$/;"	f
__used	fs/binfmt_misc.mod.c	/^__used$/;"	v	file:
__used	fs/binfmt_misc.mod.c	/^__used$/;"	v	typeref:struct:____versions	file:
__usermodehelper_disable	kernel/kmod.c	/^int __usermodehelper_disable(enum umh_disable_depth depth)$/;"	f
__usermodehelper_set_disable_depth	kernel/kmod.c	/^void __usermodehelper_set_disable_depth(enum umh_disable_depth depth)$/;"	f
__validate_process_creds	kernel/cred.c	/^EXPORT_SYMBOL(__validate_process_creds);$/;"	v
__validate_process_creds	kernel/cred.c	/^void __validate_process_creds(struct task_struct *tsk,$/;"	f
__vfs_follow_link	fs/namei.c	/^static __always_inline int __vfs_follow_link(struct nameidata *nd, const char *link)$/;"	f	file:
__vfs_setlease	fs/locks.c	/^static int __vfs_setlease(struct file *filp, long arg, struct file_lock **lease)$/;"	f	file:
__vfs_setxattr_noperm	fs/xattr.c	/^int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,$/;"	f
__vm_enough_memory	mm/mmap.c	/^int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)$/;"	f
__vm_enough_memory	mm/nommu.c	/^int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)$/;"	f
__vma_address	mm/rmap.c	/^__vma_address(struct page *page, struct vm_area_struct *vma)$/;"	f	file:
__vma_adjust_trans_huge	mm/huge_memory.c	/^void __vma_adjust_trans_huge(struct vm_area_struct *vma,$/;"	f
__vma_link	mm/mmap.c	/^__vma_link(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__vma_link_file	mm/mmap.c	/^static void __vma_link_file(struct vm_area_struct *vma)$/;"	f	file:
__vma_link_list	mm/util.c	/^void __vma_link_list(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__vma_link_rb	mm/mmap.c	/^void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__vma_unlink	mm/mmap.c	/^__vma_unlink(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__vmalloc	mm/nommu.c	/^EXPORT_SYMBOL(__vmalloc);$/;"	v
__vmalloc	mm/nommu.c	/^void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc	mm/vmalloc.c	/^EXPORT_SYMBOL(__vmalloc);$/;"	v
__vmalloc	mm/vmalloc.c	/^void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc_area_node	mm/vmalloc.c	/^static void *__vmalloc_area_node(struct vm_struct *area, gfp_t gfp_mask,$/;"	f	file:
__vmalloc_node	mm/vmalloc.c	/^static void *__vmalloc_node(unsigned long size, unsigned long align,$/;"	f	file:
__vmalloc_node_flags	mm/vmalloc.c	/^static inline void *__vmalloc_node_flags(unsigned long size,$/;"	f	file:
__vmalloc_node_range	mm/vmalloc.c	/^void *__vmalloc_node_range(unsigned long size, unsigned long align,$/;"	f
__vunmap	mm/vmalloc.c	/^static void __vunmap(const void *addr, int deallocate_pages)$/;"	f	file:
__wait_on_bit	kernel/wait.c	/^EXPORT_SYMBOL(__wait_on_bit);$/;"	v
__wait_on_bit	kernel/wait.c	/^__wait_on_bit(wait_queue_head_t *wq, struct wait_bit_queue *q,$/;"	f
__wait_on_bit_lock	kernel/wait.c	/^EXPORT_SYMBOL(__wait_on_bit_lock);$/;"	v
__wait_on_bit_lock	kernel/wait.c	/^__wait_on_bit_lock(wait_queue_head_t *wq, struct wait_bit_queue *q,$/;"	f
__wait_on_buffer	fs/buffer.c	/^EXPORT_SYMBOL(__wait_on_buffer);$/;"	v
__wait_on_buffer	fs/buffer.c	/^void __wait_on_buffer(struct buffer_head * bh)$/;"	f
__wait_on_freeing_inode	fs/inode.c	/^static void __wait_on_freeing_inode(struct inode *inode)$/;"	f	file:
__wake_up_bit	kernel/wait.c	/^EXPORT_SYMBOL(__wake_up_bit);$/;"	v
__wake_up_bit	kernel/wait.c	/^void __wake_up_bit(wait_queue_head_t *wq, void *word, int bit)$/;"	f
__wake_up_parent	kernel/exit.c	/^void __wake_up_parent(struct task_struct *p, struct task_struct *parent)$/;"	f
__writeback_inodes_wb	fs/fs-writeback.c	/^static long __writeback_inodes_wb(struct bdi_writeback *wb,$/;"	f	file:
__writeback_single_inode	fs/fs-writeback.c	/^__writeback_single_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f	file:
__writepage	mm/page-writeback.c	/^static int __writepage(struct page *page, struct writeback_control *wbc,$/;"	f	file:
__xip_file_write	mm/filemap_xip.c	/^__xip_file_write(struct file *filp, const char __user *buf,$/;"	f	file:
__xip_sparse_page	mm/filemap_xip.c	/^static struct page *__xip_sparse_page;$/;"	v	typeref:struct:page	file:
__xip_unmap	mm/filemap_xip.c	/^__xip_unmap (struct address_space * mapping,$/;"	f	file:
__zone_pcp_update	mm/page_alloc.c	/^static int __meminit __zone_pcp_update(void *data)$/;"	f	file:
__zone_reclaim	mm/vmscan.c	/^static int __zone_reclaim(struct zone *zone, gfp_t gfp_mask, unsigned int order)$/;"	f	file:
__zone_watermark_ok	mm/page_alloc.c	/^static bool __zone_watermark_ok(struct zone *z, int order, unsigned long mark,$/;"	f	file:
_cpu_down	kernel/cpu.c	/^static int __ref _cpu_down(unsigned int cpu, int tasks_frozen)$/;"	f	file:
_cpu_up	kernel/cpu.c	/^static int __cpuinit _cpu_up(unsigned int cpu, int tasks_frozen)$/;"	f	file:
_d_rehash	fs/dcache.c	/^static void _d_rehash(struct dentry * entry)$/;"	f	file:
_debug_guardpage_minorder	mm/page_alloc.c	/^unsigned int _debug_guardpage_minorder;$/;"	v
_down_write_nest_lock	kernel/rwsem.c	/^EXPORT_SYMBOL(_down_write_nest_lock);$/;"	v
_down_write_nest_lock	kernel/rwsem.c	/^void _down_write_nest_lock(struct rw_semaphore *sem, struct lockdep_map *nest)$/;"	f
_enable_swap_info	mm/swapfile.c	/^static void _enable_swap_info(struct swap_info_struct *p, int prio,$/;"	f	file:
_f	kernel/compat.c	/^	char _f[20-2*sizeof(u32)-sizeof(int)];$/;"	m	struct:compat_sysinfo	file:
_local_bh_enable	kernel/softirq.c	/^EXPORT_SYMBOL(_local_bh_enable);$/;"	v
_local_bh_enable	kernel/softirq.c	/^void _local_bh_enable(void)$/;"	f
_local_bh_enable_ip	kernel/softirq.c	/^static inline void _local_bh_enable_ip(unsigned long ip)$/;"	f	file:
_mutex_lock_nest_lock	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(_mutex_lock_nest_lock);$/;"	v
_mutex_lock_nest_lock	kernel/mutex.c	/^_mutex_lock_nest_lock(struct mutex *lock, struct lockdep_map *nest)$/;"	f
_numa_mem_	mm/page_alloc.c	/^EXPORT_PER_CPU_SYMBOL(_numa_mem_);$/;"	v
_proc_do_string	kernel/sysctl.c	/^static int _proc_do_string(void* data, int maxlen, int write,$/;"	f	file:
_raw_read_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock);$/;"	v
_raw_read_lock	kernel/spinlock.c	/^void __lockfunc _raw_read_lock(rwlock_t *lock)$/;"	f
_raw_read_lock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock_bh);$/;"	v
_raw_read_lock_bh	kernel/spinlock.c	/^void __lockfunc _raw_read_lock_bh(rwlock_t *lock)$/;"	f
_raw_read_lock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock_irq);$/;"	v
_raw_read_lock_irq	kernel/spinlock.c	/^void __lockfunc _raw_read_lock_irq(rwlock_t *lock)$/;"	f
_raw_read_lock_irqsave	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock_irqsave);$/;"	v
_raw_read_lock_irqsave	kernel/spinlock.c	/^unsigned long __lockfunc _raw_read_lock_irqsave(rwlock_t *lock)$/;"	f
_raw_read_trylock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_trylock);$/;"	v
_raw_read_trylock	kernel/spinlock.c	/^int __lockfunc _raw_read_trylock(rwlock_t *lock)$/;"	f
_raw_read_unlock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock);$/;"	v
_raw_read_unlock	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock(rwlock_t *lock)$/;"	f
_raw_read_unlock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock_bh);$/;"	v
_raw_read_unlock_bh	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock_bh(rwlock_t *lock)$/;"	f
_raw_read_unlock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock_irq);$/;"	v
_raw_read_unlock_irq	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock_irq(rwlock_t *lock)$/;"	f
_raw_read_unlock_irqrestore	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock_irqrestore);$/;"	v
_raw_read_unlock_irqrestore	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)$/;"	f
_raw_spin_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock);$/;"	v
_raw_spin_lock	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_bh);$/;"	v
_raw_spin_lock_bh	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_bh(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_irq);$/;"	v
_raw_spin_lock_irq	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_irq(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_irqsave	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_irqsave);$/;"	v
_raw_spin_lock_irqsave	kernel/spinlock.c	/^unsigned long __lockfunc _raw_spin_lock_irqsave(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_irqsave_nested	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_irqsave_nested);$/;"	v
_raw_spin_lock_irqsave_nested	kernel/spinlock.c	/^unsigned long __lockfunc _raw_spin_lock_irqsave_nested(raw_spinlock_t *lock,$/;"	f
_raw_spin_lock_nest_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_nest_lock);$/;"	v
_raw_spin_lock_nest_lock	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_nest_lock(raw_spinlock_t *lock,$/;"	f
_raw_spin_lock_nested	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_nested);$/;"	v
_raw_spin_lock_nested	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)$/;"	f
_raw_spin_trylock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_trylock);$/;"	v
_raw_spin_trylock	kernel/spinlock.c	/^int __lockfunc _raw_spin_trylock(raw_spinlock_t *lock)$/;"	f
_raw_spin_trylock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_trylock_bh);$/;"	v
_raw_spin_trylock_bh	kernel/spinlock.c	/^int __lockfunc _raw_spin_trylock_bh(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock);$/;"	v
_raw_spin_unlock	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock_bh);$/;"	v
_raw_spin_unlock_bh	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock_bh(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock_irq);$/;"	v
_raw_spin_unlock_irq	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock_irq(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock_irqrestore	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock_irqrestore);$/;"	v
_raw_spin_unlock_irqrestore	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)$/;"	f
_raw_write_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock);$/;"	v
_raw_write_lock	kernel/spinlock.c	/^void __lockfunc _raw_write_lock(rwlock_t *lock)$/;"	f
_raw_write_lock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock_bh);$/;"	v
_raw_write_lock_bh	kernel/spinlock.c	/^void __lockfunc _raw_write_lock_bh(rwlock_t *lock)$/;"	f
_raw_write_lock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock_irq);$/;"	v
_raw_write_lock_irq	kernel/spinlock.c	/^void __lockfunc _raw_write_lock_irq(rwlock_t *lock)$/;"	f
_raw_write_lock_irqsave	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock_irqsave);$/;"	v
_raw_write_lock_irqsave	kernel/spinlock.c	/^unsigned long __lockfunc _raw_write_lock_irqsave(rwlock_t *lock)$/;"	f
_raw_write_trylock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_trylock);$/;"	v
_raw_write_trylock	kernel/spinlock.c	/^int __lockfunc _raw_write_trylock(rwlock_t *lock)$/;"	f
_raw_write_unlock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock);$/;"	v
_raw_write_unlock	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock(rwlock_t *lock)$/;"	f
_raw_write_unlock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock_bh);$/;"	v
_raw_write_unlock_bh	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock_bh(rwlock_t *lock)$/;"	f
_raw_write_unlock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock_irq);$/;"	v
_raw_write_unlock_irq	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock_irq(rwlock_t *lock)$/;"	f
_raw_write_unlock_irqrestore	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock_irqrestore);$/;"	v
_raw_write_unlock_irqrestore	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)$/;"	f
_rcu_barrier	kernel/rcutree.c	/^static void _rcu_barrier(struct rcu_state *rsp)$/;"	f	file:
_rcu_barrier_trace	kernel/rcutree.c	/^static void _rcu_barrier_trace(struct rcu_state *rsp, char *s,$/;"	f	file:
_rsv_end	fs/ext3/ext3.h	/^	ext3_fsblk_t	_rsv_end;	\/* Last byte reserved or 0 *\/$/;"	m	struct:ext3_reserve_window
_rsv_start	fs/ext3/ext3.h	/^	ext3_fsblk_t	_rsv_start;	\/* First byte reserved *\/$/;"	m	struct:ext3_reserve_window
a_version	fs/ext3/acl.h	/^	__le32		a_version;$/;"	m	struct:__anon30
abort_creds	kernel/cred.c	/^EXPORT_SYMBOL(abort_creds);$/;"	v
abort_creds	kernel/cred.c	/^void abort_creds(struct cred *new)$/;"	f
abort_exclusive_wait	kernel/wait.c	/^EXPORT_SYMBOL(abort_exclusive_wait);$/;"	v
abort_exclusive_wait	kernel/wait.c	/^void abort_exclusive_wait(wait_queue_head_t *q, wait_queue_t *wait,$/;"	f
abs_timeout	kernel/auditsc.c	/^			struct timespec		abs_timeout;$/;"	m	struct:audit_context::__anon43::__anon48	typeref:struct:audit_context::__anon43::__anon48::timespec	file:
absent_pages_in_range	mm/page_alloc.c	/^unsigned long __init absent_pages_in_range(unsigned long start_pfn,$/;"	f
ac_get_obj	mm/slab.c	/^static inline void *ac_get_obj(struct kmem_cache *cachep,$/;"	f	file:
ac_put_obj	mm/slab.c	/^static inline void ac_put_obj(struct kmem_cache *cachep, struct array_cache *ac,$/;"	f	file:
acc_mode	fs/internal.h	/^	int acc_mode;$/;"	m	struct:open_flags
access_process_vm	mm/memory.c	/^int access_process_vm(struct task_struct *tsk, unsigned long addr,$/;"	f
access_process_vm	mm/nommu.c	/^int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write)$/;"	f
access_remote_vm	mm/memory.c	/^int access_remote_vm(struct mm_struct *mm, unsigned long addr,$/;"	f
access_remote_vm	mm/nommu.c	/^int access_remote_vm(struct mm_struct *mm, unsigned long addr,$/;"	f
account_global_scheduler_latency	kernel/latencytop.c	/^account_global_scheduler_latency(struct task_struct *tsk, struct latency_record *lat)$/;"	f	file:
account_kernel_stack	kernel/fork.c	/^static void account_kernel_stack(struct thread_info *ti, int account)$/;"	f	file:
account_page_dirtied	mm/page-writeback.c	/^EXPORT_SYMBOL(account_page_dirtied);$/;"	v
account_page_dirtied	mm/page-writeback.c	/^void account_page_dirtied(struct page *page, struct address_space *mapping)$/;"	f
account_page_redirty	mm/page-writeback.c	/^EXPORT_SYMBOL(account_page_redirty);$/;"	v
account_page_redirty	mm/page-writeback.c	/^void account_page_redirty(struct page *page)$/;"	f
account_page_writeback	mm/page-writeback.c	/^EXPORT_SYMBOL(account_page_writeback);$/;"	v
account_page_writeback	mm/page-writeback.c	/^void account_page_writeback(struct page *page)$/;"	f
accountable_mapping	mm/mmap.c	/^static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)$/;"	f	file:
acct_account_cputime	kernel/tsacct.c	/^void acct_account_cputime(struct task_struct *tsk)$/;"	f
acct_arg_size	fs/exec.c	/^static inline void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)$/;"	f	file:
acct_arg_size	fs/exec.c	/^static void acct_arg_size(struct linux_binprm *bprm, unsigned long pages)$/;"	f	file:
acct_auto_close	kernel/acct.c	/^void acct_auto_close(struct super_block *sb)$/;"	f
acct_auto_close_mnt	kernel/acct.c	/^void acct_auto_close_mnt(struct vfsmount *m)$/;"	f
acct_clear_integrals	kernel/tsacct.c	/^void acct_clear_integrals(struct task_struct *tsk)$/;"	f
acct_collect	kernel/acct.c	/^void acct_collect(long exitcode, int group_dead)$/;"	f
acct_exit_ns	kernel/acct.c	/^void acct_exit_ns(struct pid_namespace *ns)$/;"	f
acct_file_reopen	kernel/acct.c	/^static void acct_file_reopen(struct bsd_acct_struct *acct, struct file *file,$/;"	f	file:
acct_isolated	mm/compaction.c	/^static void acct_isolated(struct zone *zone, bool locked, struct compact_control *cc)$/;"	f	file:
acct_on	kernel/acct.c	/^static int acct_on(struct filename *pathname)$/;"	f	file:
acct_parm	kernel/acct.c	/^int acct_parm[3] = {4, 2, 30};$/;"	v
acct_process	kernel/acct.c	/^void acct_process(void)$/;"	f
acct_process_in_ns	kernel/acct.c	/^static void acct_process_in_ns(struct pid_namespace *ns)$/;"	f	file:
acct_stack_growth	mm/mmap.c	/^static int acct_stack_growth(struct vm_area_struct *vma, unsigned long size, unsigned long grow)$/;"	f	file:
acct_update_integrals	kernel/tsacct.c	/^void acct_update_integrals(struct task_struct *tsk)$/;"	f
accumulate_thread_rusage	kernel/sys.c	/^static void accumulate_thread_rusage(struct task_struct *t, struct rusage *r)$/;"	f	file:
acdirmax	fs/compat.c	/^	compat_int_t acdirmax;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
acdirmin	fs/compat.c	/^	compat_int_t acdirmin;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
ack_state	kernel/stop_machine.c	/^static void ack_state(struct stop_machine_data *smdata)$/;"	f	file:
acl_permission_check	fs/namei.c	/^static int acl_permission_check(struct inode *inode, int mask)$/;"	f	file:
acquire_freeze_lock	fs/super.c	/^static void acquire_freeze_lock(struct super_block *sb, int level, bool trylock,$/;"	f	file:
acquire_slab	mm/slub.c	/^static inline void *acquire_slab(struct kmem_cache *s,$/;"	f	file:
acregmax	fs/compat.c	/^	compat_int_t acregmax;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
acregmin	fs/compat.c	/^	compat_int_t acregmin;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
action	mm/memory-failure.c	/^	int (*action)(struct page *p, unsigned long pfn);$/;"	m	struct:page_state	file:
action_name	mm/memory-failure.c	/^static const char *action_name[] = {$/;"	v	file:
action_result	mm/memory-failure.c	/^static void action_result(unsigned long pfn, char *msg, int result)$/;"	f	file:
actions	kernel/taskstats.c	/^enum actions {$/;"	g	file:
activate_page	mm/swap.c	/^void activate_page(struct page *page)$/;"	f
activate_page_drain	mm/swap.c	/^static inline void activate_page_drain(int cpu)$/;"	f	file:
activate_page_drain	mm/swap.c	/^static void activate_page_drain(int cpu)$/;"	f	file:
active	kernel/acct.c	/^	int			active;$/;"	m	struct:bsd_acct_struct	file:
active_cpus	kernel/stop_machine.c	/^	const struct cpumask	*active_cpus;$/;"	m	struct:stop_machine_data	typeref:struct:stop_machine_data::cpumask	file:
active_mapping	mm/scm.c	/^virt_phys_map *active_mapping;$/;"	v
active_objs	mm/slab.h	/^	unsigned long active_objs;$/;"	m	struct:slabinfo
active_slabs	mm/slab.h	/^	unsigned long active_slabs;$/;"	m	struct:slabinfo
active_timers	kernel/timer.c	/^	unsigned long active_timers;$/;"	m	struct:tvec_base	file:
active_writer	kernel/cpu.c	/^	struct task_struct *active_writer;$/;"	m	struct:__anon55	typeref:struct:__anon55::task_struct	file:
actual_subsys_mask	kernel/cgroup.c	/^	unsigned long actual_subsys_mask;$/;"	m	struct:cgroupfs_root	file:
add_caller	mm/slab.c	/^static inline int add_caller(unsigned long *n, unsigned long v)$/;"	f	file:
add_chain	fs/ext3/inode.c	/^static inline void add_chain(Indirect *p, struct buffer_head *bh, __le32 *v)$/;"	f	file:
add_del_listener	kernel/taskstats.c	/^static int add_del_listener(pid_t pid, const struct cpumask *mask, int isadd)$/;"	f	file:
add_dirent_to_buf	fs/ext3/namei.c	/^static int add_dirent_to_buf(handle_t *handle, struct dentry *dentry,$/;"	f	file:
add_element	mm/mempool.c	/^static void add_element(mempool_t *pool, void *element)$/;"	f	file:
add_full	mm/slub.c	/^static inline void add_full(struct kmem_cache *s, struct kmem_cache_node *n,$/;"	f	file:
add_full	mm/slub.c	/^static void add_full(struct kmem_cache *s,$/;"	f	file:
add_kallsyms	kernel/module.c	/^static void add_kallsyms(struct module *mod, const struct load_info *info)$/;"	f	file:
add_location	mm/slub.c	/^static int add_location(struct loc_track *t, struct kmem_cache *s,$/;"	f	file:
add_lock_to_list	kernel/lockdep.c	/^static int add_lock_to_list(struct lock_class *class, struct lock_class *this,$/;"	f	file:
add_memory	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(add_memory);$/;"	v
add_memory	mm/memory_hotplug.c	/^int __ref add_memory(int nid, u64 start, u64 size)$/;"	f
add_mm_counter_fast	mm/memory.c	/^static void add_mm_counter_fast(struct mm_struct *mm, int member, int val)$/;"	f	file:
add_mm_rss_vec	mm/memory.c	/^static inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)$/;"	f	file:
add_module_usage	kernel/module.c	/^static int add_module_usage(struct module *a, struct module *b)$/;"	f	file:
add_new_gdb	fs/ext3/resize.c	/^static int add_new_gdb(handle_t *handle, struct inode *inode,$/;"	f	file:
add_new_kprobe	kernel/kprobes.c	/^static int __kprobes add_new_kprobe(struct kprobe *ap, struct kprobe *p)$/;"	f	file:
add_nommu_region	mm/nommu.c	/^static void add_nommu_region(struct vm_region *region)$/;"	f	file:
add_notes_attrs	kernel/module.c	/^static inline void add_notes_attrs(struct module *mod,$/;"	f	file:
add_notes_attrs	kernel/module.c	/^static void add_notes_attrs(struct module *mod, const struct load_info *info)$/;"	f	file:
add_page_to_unevictable_list	mm/swap.c	/^void add_page_to_unevictable_list(struct page *page)$/;"	f
add_page_wait_queue	mm/filemap.c	/^EXPORT_SYMBOL_GPL(add_page_wait_queue);$/;"	v
add_page_wait_queue	mm/filemap.c	/^void add_page_wait_queue(struct page *page, wait_queue_t *waiter)$/;"	f
add_partial	mm/slub.c	/^static inline void add_partial(struct kmem_cache_node *n,$/;"	f	file:
add_preferred_console	kernel/printk.c	/^int add_preferred_console(char *name, int idx, char *options)$/;"	f
add_range	kernel/range.c	/^int add_range(struct range *range, int az, int nr_range, u64 start, u64 end)$/;"	f
add_range_with_merge	kernel/range.c	/^int add_range_with_merge(struct range *range, int az, int nr_range,$/;"	f
add_scan_area	mm/kmemleak.c	/^static void add_scan_area(unsigned long ptr, size_t size, gfp_t gfp)$/;"	f	file:
add_sect_attrs	kernel/module.c	/^static inline void add_sect_attrs(struct module *mod,$/;"	f	file:
add_sect_attrs	kernel/module.c	/^static void add_sect_attrs(struct module *mod, const struct load_info *info)$/;"	f	file:
add_swap_count_continuation	mm/swapfile.c	/^int add_swap_count_continuation(swp_entry_t entry, gfp_t gfp_mask)$/;"	f
add_swap_extent	mm/swapfile.c	/^add_swap_extent(struct swap_info_struct *sis, unsigned long start_page,$/;"	f
add_symlink	fs/block_dev.c	/^static int add_symlink(struct kobject *from, struct kobject *to)$/;"	f	file:
add_sysfs_param	kernel/params.c	/^static __modinit int add_sysfs_param(struct module_kobject *mk,$/;"	f	file:
add_taint	kernel/panic.c	/^EXPORT_SYMBOL(add_taint);$/;"	v
add_taint	kernel/panic.c	/^void add_taint(unsigned flag, enum lockdep_ok lockdep_ok)$/;"	f
add_taint_module	kernel/module.c	/^static inline void add_taint_module(struct module *mod, unsigned flag,$/;"	f	file:
add_timer	kernel/timer.c	/^EXPORT_SYMBOL(add_timer);$/;"	v
add_timer	kernel/timer.c	/^void add_timer(struct timer_list *timer)$/;"	f
add_timer_on	kernel/timer.c	/^EXPORT_SYMBOL_GPL(add_timer_on);$/;"	v
add_timer_on	kernel/timer.c	/^void add_timer_on(struct timer_list *timer, int cpu)$/;"	f
add_to_kill	mm/memory-failure.c	/^static void add_to_kill(struct task_struct *tsk, struct page *p,$/;"	f	file:
add_to_page_cache	include/linux/pagemap.h	/^static inline int add_to_page_cache(struct page *page,$/;"	f
add_to_page_cache_locked	mm/filemap.c	/^EXPORT_SYMBOL(add_to_page_cache_locked);$/;"	v
add_to_page_cache_locked	mm/filemap.c	/^int add_to_page_cache_locked(struct page *page, struct address_space *mapping,$/;"	f
add_to_page_cache_lru	mm/filemap.c	/^EXPORT_SYMBOL_GPL(add_to_page_cache_lru);$/;"	v
add_to_page_cache_lru	mm/filemap.c	/^int add_to_page_cache_lru(struct page *page, struct address_space *mapping,$/;"	f
add_to_swap	mm/swap_state.c	/^int add_to_swap(struct page *page)$/;"	f
add_to_swap_cache	mm/swap_state.c	/^int add_to_swap_cache(struct page *page, swp_entry_t entry, gfp_t gfp_mask)$/;"	f
add_total	mm/swap_state.c	/^	unsigned long add_total;$/;"	m	struct:__anon20	file:
add_tracepoint	kernel/tracepoint.c	/^static struct tracepoint_entry *add_tracepoint(const char *name)$/;"	f	file:
add_unformed_module	kernel/module.c	/^static int add_unformed_module(struct module *mod)$/;"	f	file:
add_usage_links	kernel/module.c	/^static void add_usage_links(struct module *mod)$/;"	f	file:
add_vma_to_mm	mm/nommu.c	/^static void add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
add_wait_queue	kernel/wait.c	/^EXPORT_SYMBOL(add_wait_queue);$/;"	v
add_wait_queue	kernel/wait.c	/^void add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
add_wait_queue_exclusive	kernel/wait.c	/^EXPORT_SYMBOL(add_wait_queue_exclusive);$/;"	v
add_wait_queue_exclusive	kernel/wait.c	/^void add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
addr	fs/compat_ioctl.c	/^	u16 addr;$/;"	m	struct:i2c_msg32	file:
addr	mm/memory-failure.c	/^	unsigned long addr;$/;"	m	struct:to_kill	file:
addr	mm/migrate.c	/^	unsigned long addr;$/;"	m	struct:page_to_node	file:
addr	mm/mmap.c	/^	unsigned long addr;$/;"	m	struct:mmap_arg_struct	file:
addr	mm/nommu.c	/^	unsigned long addr;$/;"	m	struct:mmap_arg_struct	file:
addr	mm/slab.c	/^	void *addr;$/;"	m	struct:slab_rcu	file:
addr	mm/slub.c	/^	unsigned long addr;	\/* Called from address *\/$/;"	m	struct:track	file:
addr	mm/slub.c	/^	unsigned long addr;$/;"	m	struct:location	file:
addr_conflict	kernel/jump_label.c	/^static int addr_conflict(struct jump_entry *entry, void *start, void *end)$/;"	f	file:
addr_to_vb_idx	mm/vmalloc.c	/^static unsigned long addr_to_vb_idx(unsigned long addr)$/;"	f	file:
addr_valid	mm/memory-failure.c	/^	char addr_valid;$/;"	m	struct:to_kill	file:
address	kernel/module.c	/^	unsigned long address;$/;"	m	struct:module_sect_attr	file:
address	mm/huge_memory.c	/^	unsigned long address;$/;"	m	struct:khugepaged_scan	file:
address	mm/ksm.c	/^	unsigned long address;		\/* + low bits used for flags below *\/$/;"	m	struct:rmap_item	file:
address	mm/ksm.c	/^	unsigned long address;$/;"	m	struct:ksm_scan	file:
address_space_init_once	fs/inode.c	/^EXPORT_SYMBOL(address_space_init_once);$/;"	v
address_space_init_once	fs/inode.c	/^void address_space_init_once(struct address_space *mapping)$/;"	f
addrs	mm/slub.c	/^	unsigned long addrs[TRACK_ADDRS_COUNT];	\/* Called from address *\/$/;"	m	struct:track	file:
adjust_pool_surplus	mm/hugetlb.c	/^static int adjust_pool_surplus(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
adjust_resource	kernel/resource.c	/^EXPORT_SYMBOL(adjust_resource);$/;"	v
adjust_resource	kernel/resource.c	/^int adjust_resource(struct resource *res, resource_size_t start, resource_size_t size)$/;"	f
adjust_zone_range_for_zone_movable	mm/page_alloc.c	/^static void __meminit adjust_zone_range_for_zone_movable(int nid,$/;"	f	file:
age_active_anon	mm/vmscan.c	/^static void age_active_anon(struct zone *zone, struct scan_control *sc)$/;"	f	file:
aggr_break_handler	kernel/kprobes.c	/^static int __kprobes aggr_break_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
aggr_fault_handler	kernel/kprobes.c	/^static int __kprobes aggr_fault_handler(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
aggr_kprobe_disabled	kernel/kprobes.c	/^static int __kprobes aggr_kprobe_disabled(struct kprobe *ap)$/;"	f	file:
aggr_post_handler	kernel/kprobes.c	/^static void __kprobes aggr_post_handler(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
aggr_pre_handler	kernel/kprobes.c	/^static int __kprobes aggr_pre_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
aio_advance_iovec	fs/aio.c	/^static void aio_advance_iovec(struct kiocb *iocb, ssize_t ret)$/;"	f	file:
aio_complete	fs/aio.c	/^EXPORT_SYMBOL(aio_complete);$/;"	v
aio_complete	fs/aio.c	/^int aio_complete(struct kiocb *iocb, long res, long res2)$/;"	f
aio_fdsync	fs/aio.c	/^static ssize_t aio_fdsync(struct kiocb *iocb)$/;"	f	file:
aio_free_ring	fs/aio.c	/^static void aio_free_ring(struct kioctx *ctx)$/;"	f	file:
aio_fsync	fs/aio.c	/^static ssize_t aio_fsync(struct kiocb *iocb)$/;"	f	file:
aio_get_req	fs/aio.c	/^static inline struct kiocb *aio_get_req(struct kioctx *ctx,$/;"	f	file:
aio_kick_handler	fs/aio.c	/^static void aio_kick_handler(struct work_struct *work)$/;"	f	file:
aio_max_nr	fs/aio.c	/^unsigned long aio_max_nr = 0x10000; \/* system wide maximum number of aio requests *\/$/;"	v
aio_nr	fs/aio.c	/^unsigned long aio_nr;		\/* current system wide number of aio requests *\/$/;"	v
aio_put_req	fs/aio.c	/^EXPORT_SYMBOL(aio_put_req);$/;"	v
aio_put_req	fs/aio.c	/^int aio_put_req(struct kiocb *req)$/;"	f
aio_queue_work	fs/aio.c	/^static void aio_queue_work(struct kioctx * ctx)$/;"	f	file:
aio_read_evt	fs/aio.c	/^static int aio_read_evt(struct kioctx *ioctx, struct io_event *ent)$/;"	f	file:
aio_ring_event	fs/aio.c	179;"	d	file:
aio_run_all_iocbs	fs/aio.c	/^static inline void aio_run_all_iocbs(struct kioctx *ctx)$/;"	f	file:
aio_run_iocb	fs/aio.c	/^static ssize_t aio_run_iocb(struct kiocb *iocb)$/;"	f	file:
aio_rw_vect_retry	fs/aio.c	/^static ssize_t aio_rw_vect_retry(struct kiocb *iocb)$/;"	f	file:
aio_setup	fs/aio.c	/^__initcall(aio_setup);$/;"	v
aio_setup	fs/aio.c	/^static int __init aio_setup(void)$/;"	f	file:
aio_setup_iocb	fs/aio.c	/^static ssize_t aio_setup_iocb(struct kiocb *kiocb, bool compat)$/;"	f	file:
aio_setup_ring	fs/aio.c	/^static int aio_setup_ring(struct kioctx *ctx)$/;"	f	file:
aio_setup_single_vector	fs/aio.c	/^static ssize_t aio_setup_single_vector(int type, struct file * file, struct kiocb *kiocb)$/;"	f	file:
aio_setup_vectored_rw	fs/aio.c	/^static ssize_t aio_setup_vectored_rw(int type, struct kiocb *kiocb, bool compat)$/;"	f	file:
aio_timeout	fs/aio.c	/^struct aio_timeout {$/;"	s	file:
aio_wq	fs/aio.c	/^static struct workqueue_struct *aio_wq;$/;"	v	typeref:struct:workqueue_struct	file:
alarm_setitimer	kernel/itimer.c	/^unsigned int alarm_setitimer(unsigned int seconds)$/;"	f
algo	kernel/module_signing.c	/^	u8	algo;		\/* Public-key crypto algorithm [enum pkey_algo] *\/$/;"	m	struct:module_signature	file:
alias_list	mm/slub.c	/^static struct saved_alias *alias_list;$/;"	v	typeref:struct:saved_alias	file:
aliases	mm/slub.c	/^SLAB_ATTR_RO(aliases);$/;"	v
aliases_show	mm/slub.c	/^static ssize_t aliases_show(struct kmem_cache *s, char *buf)$/;"	f	file:
alien	mm/slab.c	/^	struct array_cache **alien;	\/* on other nodes *\/$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::array_cache	file:
align	kernel/resource.c	/^	resource_size_t min, max, align;$/;"	m	struct:resource_constraint	file:
align	mm/slub.c	/^SLAB_ATTR_RO(align);$/;"	v
align_idx	mm/bootmem.c	/^static unsigned long __init align_idx(struct bootmem_data *bdata,$/;"	f	file:
align_off	mm/bootmem.c	/^static unsigned long __init align_off(struct bootmem_data *bdata,$/;"	f	file:
align_show	mm/slub.c	/^static ssize_t align_show(struct kmem_cache *s, char *buf)$/;"	f	file:
aligned_vread	mm/vmalloc.c	/^static int aligned_vread(char *buf, char *addr, unsigned long count)$/;"	f	file:
aligned_vwrite	mm/vmalloc.c	/^static int aligned_vwrite(char *buf, char *addr, unsigned long count)$/;"	f	file:
alignf	kernel/resource.c	/^	resource_size_t (*alignf)(void *, const struct resource *,$/;"	m	struct:resource_constraint	file:
alignf_data	kernel/resource.c	/^	void *alignf_data;$/;"	m	struct:resource_constraint	file:
alignfile	fs/binfmt_elf.c	/^static int alignfile(struct file *file, loff_t *foffset)$/;"	f	file:
alignfile	fs/binfmt_elf_fdpic.c	/^static int alignfile(struct file *file, loff_t *foffset)$/;"	f	file:
all_lock_classes	kernel/lockdep.c	/^LIST_HEAD(all_lock_classes);$/;"	v
all_unreclaimable	mm/vmscan.c	/^static bool all_unreclaimable(struct zonelist *zonelist,$/;"	f	file:
all_var	kernel/kallsyms.c	30;"	d	file:
all_var	kernel/kallsyms.c	32;"	d	file:
all_vm_events	mm/vmstat.c	/^EXPORT_SYMBOL_GPL(all_vm_events);$/;"	v
all_vm_events	mm/vmstat.c	/^void all_vm_events(unsigned long *ret)$/;"	f
all_zeroes	fs/ext3/inode.c	/^static inline int all_zeroes(__le32 *p, __le32 *q)$/;"	f	file:
allcg_list	kernel/cgroup.c	/^	struct list_head allcg_list;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::list_head	file:
alloc_aggr_kprobe	kernel/kprobes.c	/^static __kprobes struct kprobe *alloc_aggr_kprobe(struct kprobe *p)$/;"	f	file:
alloc_alien_cache	mm/slab.c	/^static inline struct array_cache **alloc_alien_cache(int node, int limit, gfp_t gfp)$/;"	f	file:
alloc_alien_cache	mm/slab.c	/^static struct array_cache **alloc_alien_cache(int node, int limit, gfp_t gfp)$/;"	f	file:
alloc_arraycache	mm/slab.c	/^static struct array_cache *alloc_arraycache(int node, int entries,$/;"	f	file:
alloc_bootmem_bdata	mm/bootmem.c	/^static void * __init alloc_bootmem_bdata(struct bootmem_data *bdata,$/;"	f	file:
alloc_bootmem_core	mm/bootmem.c	/^static void * __init alloc_bootmem_core(unsigned long size,$/;"	f	file:
alloc_bootmem_huge_page	mm/hugetlb.c	/^int __weak alloc_bootmem_huge_page(struct hstate *h)$/;"	f
alloc_buddy_huge_page	mm/hugetlb.c	/^static struct page *alloc_buddy_huge_page(struct hstate *h, int nid)$/;"	f	file:
alloc_buffer_head	fs/buffer.c	/^EXPORT_SYMBOL(alloc_buffer_head);$/;"	v
alloc_buffer_head	fs/buffer.c	/^struct buffer_head *alloc_buffer_head(gfp_t gfp_flags)$/;"	f
alloc_calls	mm/slub.c	/^SLAB_ATTR_RO(alloc_calls);$/;"	v
alloc_calls_show	mm/slub.c	/^static ssize_t alloc_calls_show(struct kmem_cache *s, char *buf)$/;"	f	file:
alloc_chrdev_region	fs/char_dev.c	/^EXPORT_SYMBOL(alloc_chrdev_region);$/;"	v
alloc_chrdev_region	fs/char_dev.c	/^int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,$/;"	f
alloc_chunk	kernel/audit_tree.c	/^static struct audit_chunk *alloc_chunk(int count)$/;"	f	file:
alloc_contig_range	mm/page_alloc.c	/^int alloc_contig_range(unsigned long start, unsigned long end,$/;"	f
alloc_css_id	kernel/cgroup.c	/^static int alloc_css_id(struct cgroup_subsys *ss, struct cgroup *parent,$/;"	f	file:
alloc_dcookie	fs/dcookies.c	/^static struct dcookie_struct *alloc_dcookie(struct path *path)$/;"	f	file:
alloc_debug_processing	mm/slub.c	/^static inline int alloc_debug_processing(struct kmem_cache *s,$/;"	f	file:
alloc_debug_processing	mm/slub.c	/^static noinline int alloc_debug_processing(struct kmem_cache *s, struct page *page,$/;"	f	file:
alloc_fd	fs/file.c	/^static int alloc_fd(unsigned start, unsigned flags)$/;"	f	file:
alloc_fdmem	fs/file.c	/^static void *alloc_fdmem(size_t size)$/;"	f	file:
alloc_fdtable	fs/file.c	/^static struct fdtable * alloc_fdtable(unsigned int nr)$/;"	f	file:
alloc_file	fs/file_table.c	/^EXPORT_SYMBOL(alloc_file);$/;"	v
alloc_file	fs/file_table.c	/^struct file *alloc_file(struct path *path, fmode_t mode,$/;"	f
alloc_fresh_huge_page	mm/hugetlb.c	/^static int alloc_fresh_huge_page(struct hstate *h, nodemask_t *nodes_allowed)$/;"	f	file:
alloc_fresh_huge_page_node	mm/hugetlb.c	/^static struct page *alloc_fresh_huge_page_node(struct hstate *h, int nid)$/;"	f	file:
alloc_frozen_cpus	kernel/cpu.c	/^core_initcall(alloc_frozen_cpus);$/;"	v
alloc_frozen_cpus	kernel/cpu.c	/^static int __init alloc_frozen_cpus(void)$/;"	f	file:
alloc_huge_page	mm/hugetlb.c	/^static struct page *alloc_huge_page(struct vm_area_struct *vma,$/;"	f	file:
alloc_huge_page_node	mm/hugetlb.c	/^struct page *alloc_huge_page_node(struct hstate *h, int nid)$/;"	f
alloc_hugepage	mm/huge_memory.c	/^static inline struct page *alloc_hugepage(int defrag)$/;"	f	file:
alloc_hugepage_gfpmask	mm/huge_memory.c	/^static inline gfp_t alloc_hugepage_gfpmask(int defrag, gfp_t extra_gfp)$/;"	f	file:
alloc_hugepage_vma	mm/huge_memory.c	/^static inline struct page *alloc_hugepage_vma(int defrag,$/;"	f	file:
alloc_inode	fs/inode.c	/^static struct inode *alloc_inode(struct super_block *sb)$/;"	f	file:
alloc_kmem_cache_cpus	mm/slub.c	/^static inline int alloc_kmem_cache_cpus(struct kmem_cache *s)$/;"	f	file:
alloc_kmemlist	mm/slab.c	/^static int alloc_kmemlist(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
alloc_large_system_hash	mm/page_alloc.c	/^void *__init alloc_large_system_hash(const char *tablename,$/;"	f
alloc_list_entry	kernel/lockdep.c	/^static struct lock_list *alloc_list_entry(void)$/;"	f	file:
alloc_loc_track	mm/slub.c	/^static int alloc_loc_track(struct loc_track *t, unsigned long max, gfp_t flags)$/;"	f	file:
alloc_mayday_mask	kernel/workqueue.c	193;"	d	file:
alloc_mayday_mask	kernel/workqueue.c	200;"	d	file:
alloc_mem_cgroup_per_zone_info	mm/memcontrol.c	/^static int alloc_mem_cgroup_per_zone_info(struct mem_cgroup *memcg, int node)$/;"	f	file:
alloc_migrate_target	mm/page_isolation.c	/^struct page *alloc_migrate_target(struct page *page, unsigned long private,$/;"	f
alloc_misplaced_dst_page	mm/migrate.c	/^static struct page *alloc_misplaced_dst_page(struct page *page,$/;"	f	file:
alloc_mm_slot	mm/huge_memory.c	/^static inline struct mm_slot *alloc_mm_slot(void)$/;"	f	file:
alloc_mm_slot	mm/ksm.c	/^static inline struct mm_slot *alloc_mm_slot(void)$/;"	f	file:
alloc_mnt_ns	fs/namespace.c	/^static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *user_ns)$/;"	f	file:
alloc_new_pmd	mm/mremap.c	/^static pmd_t *alloc_new_pmd(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
alloc_new_reservation	fs/ext3/balloc.c	/^static int alloc_new_reservation(struct ext3_reserve_window_node *my_rsv,$/;"	f	file:
alloc_node_mem_map	mm/page_alloc.c	/^static void __init_refok alloc_node_mem_map(struct pglist_data *pgdat)$/;"	f	file:
alloc_node_page_cgroup	mm/page_cgroup.c	/^static int __init alloc_node_page_cgroup(int nid)$/;"	f	file:
alloc_page_buffers	fs/buffer.c	/^EXPORT_SYMBOL_GPL(alloc_page_buffers);$/;"	v
alloc_page_buffers	fs/buffer.c	/^struct buffer_head *alloc_page_buffers(struct page *page, unsigned long size,$/;"	f
alloc_page_cgroup	mm/page_cgroup.c	/^static void *__meminit alloc_page_cgroup(size_t size, int nid)$/;"	f	file:
alloc_page_interleave	mm/mempolicy.c	/^static struct page *alloc_page_interleave(gfp_t gfp, unsigned order,$/;"	f	file:
alloc_pages_current	mm/mempolicy.c	/^EXPORT_SYMBOL(alloc_pages_current);$/;"	v
alloc_pages_current	mm/mempolicy.c	/^struct page *alloc_pages_current(gfp_t gfp, unsigned order)$/;"	f
alloc_pages_exact	mm/page_alloc.c	/^EXPORT_SYMBOL(alloc_pages_exact);$/;"	v
alloc_pages_exact	mm/page_alloc.c	/^void *alloc_pages_exact(size_t size, gfp_t gfp_mask)$/;"	f
alloc_pages_exact_nid	mm/page_alloc.c	/^EXPORT_SYMBOL(alloc_pages_exact_nid);$/;"	v
alloc_pages_exact_nid	mm/page_alloc.c	/^void *alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask)$/;"	f
alloc_pages_vma	mm/mempolicy.c	/^alloc_pages_vma(gfp_t gfp, int order, struct vm_area_struct *vma,$/;"	f
alloc_pi_state	kernel/futex.c	/^static struct futex_pi_state * alloc_pi_state(void)$/;"	f	file:
alloc_pid	kernel/pid.c	/^struct pid *alloc_pid(struct pid_namespace *ns)$/;"	f
alloc_pidmap	kernel/pid.c	/^static int alloc_pidmap(struct pid_namespace *pid_ns)$/;"	f	file:
alloc_pipe_info	fs/pipe.c	/^struct pipe_inode_info * alloc_pipe_info(struct inode *inode)$/;"	f
alloc_posix_timer	kernel/posix-timers.c	/^static struct k_itimer * alloc_posix_timer(void)$/;"	f	file:
alloc_pwqs	kernel/workqueue.c	/^static int alloc_pwqs(struct workqueue_struct *wq)$/;"	f	file:
alloc_rmap_item	mm/ksm.c	/^static inline struct rmap_item *alloc_rmap_item(void)$/;"	f	file:
alloc_slab_page	mm/slub.c	/^static inline struct page *alloc_slab_page(gfp_t flags, int node,$/;"	f	file:
alloc_slabmgmt	mm/slab.c	/^static struct slab *alloc_slabmgmt(struct kmem_cache *cachep, void *objp,$/;"	f	file:
alloc_sleep_millisecs_attr	mm/huge_memory.c	/^static struct kobj_attribute alloc_sleep_millisecs_attr =$/;"	v	typeref:struct:kobj_attribute	file:
alloc_sleep_millisecs_show	mm/huge_memory.c	/^static ssize_t alloc_sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
alloc_sleep_millisecs_store	mm/huge_memory.c	/^static ssize_t alloc_sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
alloc_stable_node	mm/ksm.c	/^static inline struct stable_node *alloc_stable_node(void)$/;"	f	file:
alloc_super	fs/super.c	/^static struct super_block *alloc_super(struct file_system_type *type, int flags)$/;"	f	file:
alloc_swap_info	mm/swapfile.c	/^static struct swap_info_struct *alloc_swap_info(void)$/;"	f	file:
alloc_task_struct_node	kernel/fork.c	/^static inline struct task_struct *alloc_task_struct_node(int node)$/;"	f	file:
alloc_thread_info_node	kernel/fork.c	/^static struct thread_info *alloc_thread_info_node(struct task_struct *tsk,$/;"	f	file:
alloc_tree	kernel/audit_tree.c	/^static struct audit_tree *alloc_tree(const char *s)$/;"	f	file:
alloc_trial_cpuset	kernel/cpuset.c	/^static struct cpuset *alloc_trial_cpuset(const struct cpuset *cs)$/;"	f	file:
alloc_uid	kernel/user.c	/^struct user_struct *alloc_uid(kuid_t uid)$/;"	f
alloc_vfsmnt	fs/namespace.c	/^static struct mount *alloc_vfsmnt(const char *name)$/;"	f	file:
alloc_vm_area	mm/nommu.c	/^EXPORT_SYMBOL_GPL(alloc_vm_area);$/;"	v
alloc_vm_area	mm/nommu.c	/^struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)$/;"	f
alloc_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(alloc_vm_area);$/;"	v
alloc_vm_area	mm/vmalloc.c	/^struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)$/;"	f
alloc_vmap_area	mm/vmalloc.c	/^static struct vmap_area *alloc_vmap_area(unsigned long size,$/;"	f	file:
alloc_worker	kernel/workqueue.c	/^static struct worker *alloc_worker(void)$/;"	f	file:
allocate_cg_links	kernel/cgroup.c	/^static int allocate_cg_links(int count, struct list_head *tmp)$/;"	f	file:
allocate_mm	kernel/fork.c	506;"	d	file:
allocate_persistent_chunk	mm/scm.c	/^long allocate_persistent_chunk(unsigned long *p_index, unsigned long size_mb)$/;"	f
allocate_probes	kernel/tracepoint.c	/^static inline void *allocate_probes(int count)$/;"	f	file:
allocate_resource	kernel/resource.c	/^EXPORT_SYMBOL(allocate_resource);$/;"	v
allocate_resource	kernel/resource.c	/^int allocate_resource(struct resource *root, struct resource *new,$/;"	f
allocate_slab	mm/slub.c	/^static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
allocation	mm/dmapool.c	/^	size_t allocation;$/;"	m	struct:dma_pool	file:
allow_signal	kernel/exit.c	/^EXPORT_SYMBOL(allow_signal);$/;"	v
allow_signal	kernel/exit.c	/^int allow_signal(int sig)$/;"	f
already_uses	kernel/module.c	/^static int already_uses(struct module *a, struct module *b)$/;"	f	file:
alter_cred_subscribers	kernel/cred.c	/^static inline void alter_cred_subscribers(const struct cred *_cred, int n)$/;"	f	file:
alternate_node_alloc	mm/slab.c	/^static inline void *alternate_node_alloc(struct kmem_cache *cachep,$/;"	f	file:
alternate_node_alloc	mm/slab.c	/^static void *alternate_node_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
always_dump_vma	fs/binfmt_elf.c	/^static bool always_dump_vma(struct vm_area_struct *vma)$/;"	f	file:
always_kmsg_dump	kernel/printk.c	/^static bool always_kmsg_dump;$/;"	v	file:
annoy_ccache	kernel/modsign_pubkey.c	/^static __initdata const char annoy_ccache[] = __TIME__ "foo";$/;"	v	file:
anon_aops	fs/anon_inodes.c	/^static const struct address_space_operations anon_aops = {$/;"	v	typeref:struct:address_space_operations	file:
anon_inode_fops	fs/anon_inodes.c	/^static const struct file_operations anon_inode_fops;$/;"	v	typeref:struct:file_operations	file:
anon_inode_fs_type	fs/anon_inodes.c	/^static struct file_system_type anon_inode_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
anon_inode_getfd	fs/anon_inodes.c	/^EXPORT_SYMBOL_GPL(anon_inode_getfd);$/;"	v
anon_inode_getfd	fs/anon_inodes.c	/^int anon_inode_getfd(const char *name, const struct file_operations *fops,$/;"	f
anon_inode_getfile	fs/anon_inodes.c	/^EXPORT_SYMBOL_GPL(anon_inode_getfile);$/;"	v
anon_inode_getfile	fs/anon_inodes.c	/^struct file *anon_inode_getfile(const char *name,$/;"	f
anon_inode_init	fs/anon_inodes.c	/^fs_initcall(anon_inode_init);$/;"	v
anon_inode_init	fs/anon_inodes.c	/^static int __init anon_inode_init(void)$/;"	f	file:
anon_inode_inode	fs/anon_inodes.c	/^static struct inode *anon_inode_inode;$/;"	v	typeref:struct:inode	file:
anon_inode_mkinode	fs/anon_inodes.c	/^static struct inode *anon_inode_mkinode(struct super_block *s)$/;"	f	file:
anon_inodefs_dentry_operations	fs/anon_inodes.c	/^static const struct dentry_operations anon_inodefs_dentry_operations = {$/;"	v	typeref:struct:dentry_operations	file:
anon_inodefs_dname	fs/anon_inodes.c	/^static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen)$/;"	f	file:
anon_inodefs_mount	fs/anon_inodes.c	/^static struct dentry *anon_inodefs_mount(struct file_system_type *fs_type,$/;"	f	file:
anon_ops	mm/shmem.c	/^static struct dentry_operations anon_ops = {$/;"	v	typeref:struct:dentry_operations	file:
anon_pipe_buf_ops	fs/pipe.c	/^static const struct pipe_buf_operations anon_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
anon_pipe_buf_release	fs/pipe.c	/^static void anon_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f	file:
anon_set_page_dirty	fs/anon_inodes.c	/^static int anon_set_page_dirty(struct page *page)$/;"	f	file:
anon_vma	mm/ksm.c	/^		struct anon_vma *anon_vma;	\/* when stable *\/$/;"	m	union:rmap_item::__anon6	typeref:struct:rmap_item::__anon6::anon_vma	file:
anon_vma_alloc	mm/rmap.c	/^static inline struct anon_vma *anon_vma_alloc(void)$/;"	f	file:
anon_vma_cachep	mm/rmap.c	/^static struct kmem_cache *anon_vma_cachep;$/;"	v	typeref:struct:kmem_cache	file:
anon_vma_chain_alloc	mm/rmap.c	/^static inline struct anon_vma_chain *anon_vma_chain_alloc(gfp_t gfp)$/;"	f	file:
anon_vma_chain_cachep	mm/rmap.c	/^static struct kmem_cache *anon_vma_chain_cachep;$/;"	v	typeref:struct:kmem_cache	file:
anon_vma_chain_free	mm/rmap.c	/^static void anon_vma_chain_free(struct anon_vma_chain *anon_vma_chain)$/;"	f	file:
anon_vma_chain_link	mm/rmap.c	/^static void anon_vma_chain_link(struct vm_area_struct *vma,$/;"	f	file:
anon_vma_clone	mm/rmap.c	/^int anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)$/;"	f
anon_vma_compatible	mm/mmap.c	/^static int anon_vma_compatible(struct vm_area_struct *a, struct vm_area_struct *b)$/;"	f	file:
anon_vma_ctor	mm/rmap.c	/^static void anon_vma_ctor(void *data)$/;"	f	file:
anon_vma_fork	mm/rmap.c	/^int anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)$/;"	f
anon_vma_free	mm/rmap.c	/^static inline void anon_vma_free(struct anon_vma *anon_vma)$/;"	f	file:
anon_vma_init	mm/rmap.c	/^void __init anon_vma_init(void)$/;"	f
anon_vma_interval_tree_insert	mm/interval_tree.c	/^void anon_vma_interval_tree_insert(struct anon_vma_chain *node,$/;"	f
anon_vma_interval_tree_iter_first	mm/interval_tree.c	/^anon_vma_interval_tree_iter_first(struct rb_root *root,$/;"	f
anon_vma_interval_tree_iter_next	mm/interval_tree.c	/^anon_vma_interval_tree_iter_next(struct anon_vma_chain *node,$/;"	f
anon_vma_interval_tree_post_update_vma	mm/mmap.c	/^anon_vma_interval_tree_post_update_vma(struct vm_area_struct *vma)$/;"	f	file:
anon_vma_interval_tree_pre_update_vma	mm/mmap.c	/^anon_vma_interval_tree_pre_update_vma(struct vm_area_struct *vma)$/;"	f	file:
anon_vma_interval_tree_remove	mm/interval_tree.c	/^void anon_vma_interval_tree_remove(struct anon_vma_chain *node,$/;"	f
anon_vma_interval_tree_verify	mm/interval_tree.c	/^void anon_vma_interval_tree_verify(struct anon_vma_chain *node)$/;"	f
anon_vma_prepare	mm/rmap.c	/^int anon_vma_prepare(struct vm_area_struct *vma)$/;"	f
any_slab_objects	mm/slub.c	/^static int any_slab_objects(struct kmem_cache *s)$/;"	f	file:
any_tag_set	lib/radix-tree.c	/^static inline int any_tag_set(struct radix_tree_node *node, unsigned int tag)$/;"	f	file:
aout_core_dump	fs/binfmt_aout.c	/^static int aout_core_dump(struct coredump_params *cprm)$/;"	f	file:
aout_core_dump	fs/binfmt_aout.c	115;"	d	file:
aout_format	fs/binfmt_aout.c	/^static struct linux_binfmt aout_format = {$/;"	v	typeref:struct:linux_binfmt	file:
append_elf_note	kernel/kexec.c	/^static u32 *append_elf_note(u32 *buf, char *name, unsigned type, void *data,$/;"	f	file:
apply_policy_zone	mm/mempolicy.c	/^static int apply_policy_zone(struct mempolicy *policy, enum zone_type zone)$/;"	f	file:
apply_relocations	kernel/module.c	/^static int apply_relocations(struct module *mod, const struct load_info *info)$/;"	f	file:
apply_slack	kernel/timer.c	/^unsigned long apply_slack(struct timer_list *timer, unsigned long expires)$/;"	f	file:
apply_to_page_range	mm/memory.c	/^EXPORT_SYMBOL_GPL(apply_to_page_range);$/;"	v
apply_to_page_range	mm/memory.c	/^int apply_to_page_range(struct mm_struct *mm, unsigned long addr,$/;"	f
apply_to_pmd_range	mm/memory.c	/^static int apply_to_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
apply_to_pte_range	mm/memory.c	/^static int apply_to_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
apply_to_pud_range	mm/memory.c	/^static int apply_to_pud_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
arch	kernel/auditsc.c	/^	int		    arch;$/;"	m	struct:audit_context	file:
arch_crash_save_vmcoreinfo	kernel/kexec.c	/^void __attribute__ ((weak)) arch_crash_save_vmcoreinfo(void)$/;"	f
arch_deref_entry_point	kernel/kprobes.c	/^unsigned long __weak arch_deref_entry_point(void *entry)$/;"	f
arch_disable_smp_support	kernel/smp.c	/^void __weak arch_disable_smp_support(void) { }$/;"	f
arch_dup_task_struct	kernel/fork.c	/^int __attribute__((weak)) arch_dup_task_struct(struct task_struct *dst,$/;"	f
arch_early_irq_init	kernel/softirq.c	/^int __init __weak arch_early_irq_init(void)$/;"	f
arch_enable_nonboot_cpus_begin	kernel/cpu.c	/^void __weak arch_enable_nonboot_cpus_begin(void)$/;"	f
arch_enable_nonboot_cpus_end	kernel/cpu.c	/^void __weak arch_enable_nonboot_cpus_end(void)$/;"	f
arch_get_unmapped_area	mm/mmap.c	/^arch_get_unmapped_area(struct file *filp, unsigned long addr,$/;"	f
arch_get_unmapped_area	mm/nommu.c	/^unsigned long arch_get_unmapped_area(struct file *file, unsigned long addr,$/;"	f
arch_get_unmapped_area_topdown	mm/mmap.c	/^arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,$/;"	f
arch_irq_work_raise	kernel/irq_work.c	/^void __weak arch_irq_work_raise(void)$/;"	f
arch_jump_label_transform_static	kernel/jump_label.c	/^void __weak __init_or_module arch_jump_label_transform_static(struct jump_entry *entry,$/;"	f
arch_mmap_check	mm/mmap.c	46;"	d	file:
arch_mod_section_prepend	kernel/module.c	/^unsigned int __weak arch_mod_section_prepend(struct module *mod,$/;"	f
arch_pick_mmap_layout	mm/util.c	/^void arch_pick_mmap_layout(struct mm_struct *mm)$/;"	f
arch_probe_nr_irqs	kernel/softirq.c	/^int __init __weak arch_probe_nr_irqs(void)$/;"	f
arch_ptrace_attach	kernel/ptrace.c	909;"	d	file:
arch_rebalance_pgtables	mm/mmap.c	50;"	d	file:
arch_release_task_struct	kernel/fork.c	/^void __weak arch_release_task_struct(struct task_struct *tsk)$/;"	f
arch_release_thread_info	kernel/fork.c	/^void __weak arch_release_thread_info(struct thread_info *ti)$/;"	f
arch_remove_reservations	kernel/resource.c	/^void __weak arch_remove_reservations(struct resource *avail)$/;"	f
arch_setup_additional_pages	fs/compat_binfmt_elf.c	124;"	d	file:
arch_setup_additional_pages	fs/compat_binfmt_elf.c	125;"	d	file:
arch_task_cache_init	kernel/fork.c	/^void __init __weak arch_task_cache_init(void) { }$/;"	f
arch_unmap_area	mm/mmap.c	/^void arch_unmap_area(struct mm_struct *mm, unsigned long addr)$/;"	f
arch_unmap_area	mm/nommu.c	/^void arch_unmap_area(struct mm_struct *mm, unsigned long addr)$/;"	f
arch_unmap_area_topdown	mm/mmap.c	/^void arch_unmap_area_topdown(struct mm_struct *mm, unsigned long addr)$/;"	f
arch_vma_name	kernel/signal.c	/^__attribute__((weak)) const char *arch_vma_name(struct vm_area_struct *vma)$/;"	f
arch_zone_highest_possible_pfn	mm/page_alloc.c	/^static unsigned long __meminitdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$/;"	v	file:
arch_zone_lowest_possible_pfn	mm/page_alloc.c	/^static unsigned long __meminitdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$/;"	v	file:
area_list	mm/kmemleak.c	/^	struct hlist_head area_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::hlist_head	file:
arg	kernel/workqueue.c	/^	void *arg;$/;"	m	struct:work_for_cpu	file:
argc	kernel/auditsc.c	/^	int argc;$/;"	m	struct:audit_aux_data_execve	file:
args	kernel/auditsc.c	/^			long args[6];$/;"	m	struct:audit_context::__anon43::__anon44	file:
args	kernel/panic.c	/^	va_list args;$/;"	m	struct:slowpath_args	file:
argv	kernel/auditsc.c	/^	unsigned long	    argv[4];    \/* syscall arguments *\/$/;"	m	struct:audit_context	file:
arm_all_kprobes	kernel/kprobes.c	/^static void __kprobes arm_all_kprobes(void)$/;"	f	file:
arm_kprobe	kernel/kprobes.c	/^static void __kprobes arm_kprobe(struct kprobe *kp)$/;"	f	file:
arm_kprobe_ftrace	kernel/kprobes.c	/^static void __kprobes arm_kprobe_ftrace(struct kprobe *p)$/;"	f	file:
arm_kprobe_ftrace	kernel/kprobes.c	980;"	d	file:
arm_timer	kernel/posix-cpu-timers.c	/^static void arm_timer(struct k_itimer *timer)$/;"	f	file:
array_cache	mm/slab.c	/^struct array_cache {$/;"	s	file:
arraycache_init	mm/slab.c	/^struct arraycache_init {$/;"	s	file:
assert	fs/ext3/namei.c	61;"	d	file:
assert_spin_locked	include/linux/spinlock.h	378;"	d
assign_type	fs/locks.c	/^static int assign_type(struct file_lock *fl, long type)$/;"	f	file:
assoc_mutex	kernel/workqueue.c	/^	struct mutex		assoc_mutex;	\/* protect POOL_DISASSOCIATED *\/$/;"	m	struct:worker_pool	typeref:struct:worker_pool::mutex	file:
async_entry	kernel/async.c	/^struct async_entry {$/;"	s	file:
async_run_entry_fn	kernel/async.c	/^static void async_run_entry_fn(struct work_struct *work)$/;"	f	file:
async_schedule	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_schedule);$/;"	v
async_schedule	kernel/async.c	/^async_cookie_t async_schedule(async_func_ptr *ptr, void *data)$/;"	f
async_schedule_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_schedule_domain);$/;"	v
async_schedule_domain	kernel/async.c	/^async_cookie_t async_schedule_domain(async_func_ptr *ptr, void *data,$/;"	f
async_synchronize_cookie	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_cookie);$/;"	v
async_synchronize_cookie	kernel/async.c	/^void async_synchronize_cookie(async_cookie_t cookie)$/;"	f
async_synchronize_cookie_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_cookie_domain);$/;"	v
async_synchronize_cookie_domain	kernel/async.c	/^void async_synchronize_cookie_domain(async_cookie_t cookie, struct async_domain *domain)$/;"	f
async_synchronize_full	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_full);$/;"	v
async_synchronize_full	kernel/async.c	/^void async_synchronize_full(void)$/;"	f
async_synchronize_full_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_full_domain);$/;"	v
async_synchronize_full_domain	kernel/async.c	/^void async_synchronize_full_domain(struct async_domain *domain)$/;"	f
async_unregister_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_unregister_domain);$/;"	v
async_unregister_domain	kernel/async.c	/^void async_unregister_domain(struct async_domain *domain)$/;"	f
at	fs/ext3/namei.c	/^	struct dx_entry *at;$/;"	m	struct:dx_frame	typeref:struct:dx_frame::dx_entry	file:
atomic_dec_and_lock	include/linux/spinlock.h	394;"	d
atomic_dec_and_mutex_lock	kernel/mutex.c	/^EXPORT_SYMBOL(atomic_dec_and_mutex_lock);$/;"	v
atomic_dec_and_mutex_lock	kernel/mutex.c	/^int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock)$/;"	f
atomic_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(atomic_notifier_call_chain);$/;"	v
atomic_notifier_call_chain	kernel/notifier.c	/^int __kprobes atomic_notifier_call_chain(struct atomic_notifier_head *nh,$/;"	f
atomic_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(atomic_notifier_chain_register);$/;"	v
atomic_notifier_chain_register	kernel/notifier.c	/^int atomic_notifier_chain_register(struct atomic_notifier_head *nh,$/;"	f
atomic_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(atomic_notifier_chain_unregister);$/;"	v
atomic_notifier_chain_unregister	kernel/notifier.c	/^int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,$/;"	f
atomic_open	fs/namei.c	/^static int atomic_open(struct nameidata *nd, struct dentry *dentry,$/;"	f	file:
attach_in_progress	kernel/cpuset.c	/^	int attach_in_progress;$/;"	m	struct:cpuset	file:
attach_mnt	fs/namespace.c	/^static void attach_mnt(struct mount *mnt, struct path *path)$/;"	f	file:
attach_nobh_buffers	fs/buffer.c	/^static void attach_nobh_buffers(struct page *page, struct buffer_head *head)$/;"	f	file:
attach_pid	kernel/pid.c	/^void attach_pid(struct task_struct *task, enum pid_type type,$/;"	f
attach_recursive_mnt	fs/namespace.c	/^static int attach_recursive_mnt(struct mount *source_mnt,$/;"	f	file:
attach_task_by_pid	kernel/cgroup.c	/^static int attach_task_by_pid(struct cgroup *cgrp, u64 pid, bool threadgroup)$/;"	f	file:
attr	kernel/auditsc.c	/^			struct mq_attr		attr;$/;"	m	struct:audit_context::__anon43::__anon49	typeref:struct:audit_context::__anon43::__anon49::mq_attr	file:
attr	kernel/padata.c	/^	struct attribute attr;$/;"	m	struct:padata_sysfs_entry	typeref:struct:padata_sysfs_entry::attribute	file:
attr	mm/failslab.c	/^	struct fault_attr attr;$/;"	m	struct:__anon2	typeref:struct:__anon2::fault_attr	file:
attr	mm/page_alloc.c	/^	struct fault_attr attr;$/;"	m	struct:__anon12	typeref:struct:__anon12::fault_attr	file:
attr	mm/slub.c	/^	struct attribute attr;$/;"	m	struct:slab_attribute	typeref:struct:slab_attribute::attribute	file:
attr2pentry	kernel/padata.c	905;"	d	file:
attrs	kernel/module.c	/^	struct bin_attribute attrs[0];$/;"	m	struct:module_notes_attrs	typeref:struct:module_notes_attrs::bin_attribute	file:
attrs	kernel/module.c	/^	struct module_sect_attr attrs[0];$/;"	m	struct:module_sect_attrs	typeref:struct:module_sect_attrs::module_sect_attr	file:
attrs	kernel/params.c	/^	struct param_attribute attrs[0];$/;"	m	struct:module_param_attrs	typeref:struct:module_param_attrs::param_attribute	file:
audit_add_rule	kernel/auditfilter.c	/^static inline int audit_add_rule(struct audit_entry *entry)$/;"	f	file:
audit_add_to_parent	kernel/audit_watch.c	/^static void audit_add_to_parent(struct audit_krule *krule,$/;"	f	file:
audit_add_tree_rule	kernel/audit.h	140;"	d
audit_add_tree_rule	kernel/audit_tree.c	/^int audit_add_tree_rule(struct audit_krule *rule)$/;"	f
audit_add_watch	kernel/audit.h	119;"	d
audit_add_watch	kernel/audit_watch.c	/^int audit_add_watch(struct audit_krule *krule, struct list_head **list)$/;"	f
audit_alloc	kernel/auditsc.c	/^int audit_alloc(struct task_struct *tsk)$/;"	f
audit_alloc_context	kernel/auditsc.c	/^static inline struct audit_context *audit_alloc_context(enum audit_state state)$/;"	f	file:
audit_alloc_name	kernel/auditsc.c	/^static struct audit_names *audit_alloc_name(struct audit_context *context,$/;"	f	file:
audit_aux_data	kernel/auditsc.c	/^struct audit_aux_data {$/;"	s	file:
audit_aux_data_bprm_fcaps	kernel/auditsc.c	/^struct audit_aux_data_bprm_fcaps {$/;"	s	file:
audit_aux_data_capset	kernel/auditsc.c	/^struct audit_aux_data_capset {$/;"	s	file:
audit_aux_data_execve	kernel/auditsc.c	/^struct audit_aux_data_execve {$/;"	s	file:
audit_aux_data_pids	kernel/auditsc.c	/^struct audit_aux_data_pids {$/;"	s	file:
audit_backlog_limit	kernel/audit.c	/^static int	audit_backlog_limit = 64;$/;"	v	file:
audit_backlog_wait_overflow	kernel/audit.c	/^static int	audit_backlog_wait_overflow = 0;$/;"	v	file:
audit_backlog_wait_time	kernel/audit.c	/^static int	audit_backlog_wait_time = 60 * HZ;$/;"	v	file:
audit_buffer	kernel/audit.c	/^struct audit_buffer {$/;"	s	file:
audit_buffer_alloc	kernel/audit.c	/^static struct audit_buffer * audit_buffer_alloc(struct audit_context *ctx,$/;"	f	file:
audit_buffer_free	kernel/audit.c	/^static void audit_buffer_free(struct audit_buffer *ab)$/;"	f	file:
audit_cap_data	kernel/auditsc.c	/^struct audit_cap_data {$/;"	s	file:
audit_chunk	kernel/audit_tree.c	/^struct audit_chunk {$/;"	s	file:
audit_cmd_mutex	kernel/audit.c	/^DEFINE_MUTEX(audit_cmd_mutex);$/;"	v
audit_comparator	kernel/auditfilter.c	/^int audit_comparator(u32 left, u32 op, u32 right)$/;"	f
audit_compare_dname_path	kernel/auditfilter.c	/^int audit_compare_dname_path(const char *dname, const char *path, int parentlen)$/;"	f
audit_compare_gid	kernel/auditsc.c	/^static int audit_compare_gid(kgid_t gid,$/;"	f	file:
audit_compare_rule	kernel/auditfilter.c	/^static int audit_compare_rule(struct audit_krule *a, struct audit_krule *b)$/;"	f	file:
audit_compare_uid	kernel/auditsc.c	/^static int audit_compare_uid(kuid_t uid,$/;"	f	file:
audit_context	kernel/auditsc.c	/^struct audit_context {$/;"	s	file:
audit_copy_fcaps	kernel/auditsc.c	/^static inline int audit_copy_fcaps(struct audit_names *name, const struct dentry *dentry)$/;"	f	file:
audit_copy_inode	kernel/auditsc.c	/^static void audit_copy_inode(struct audit_names *name, const struct dentry *dentry,$/;"	f	file:
audit_core_dumps	kernel/auditsc.c	/^void audit_core_dumps(long signr)$/;"	f
audit_data_to_entry	kernel/auditfilter.c	/^static struct audit_entry *audit_data_to_entry(struct audit_rule_data *data,$/;"	f	file:
audit_default	kernel/audit.c	/^static int	audit_default;$/;"	v	file:
audit_del_rule	kernel/auditfilter.c	/^static inline int audit_del_rule(struct audit_entry *entry)$/;"	f	file:
audit_do_config_change	kernel/audit.c	/^static int audit_do_config_change(char *function_name, int *to_change,$/;"	f	file:
audit_dupe_lsm_field	kernel/auditfilter.c	/^static inline int audit_dupe_lsm_field(struct audit_field *df,$/;"	f	file:
audit_dupe_rule	kernel/auditfilter.c	/^struct audit_entry *audit_dupe_rule(struct audit_krule *old)$/;"	f
audit_dupe_watch	kernel/audit_watch.c	/^static struct audit_watch *audit_dupe_watch(struct audit_watch *old)$/;"	f	file:
audit_enable	kernel/audit.c	/^static int __init audit_enable(char *str)$/;"	f	file:
audit_enabled	kernel/audit.c	/^EXPORT_SYMBOL_GPL(audit_enabled);$/;"	v
audit_enabled	kernel/audit.c	/^int		audit_enabled;$/;"	v
audit_entry	kernel/audit.h	/^struct audit_entry {$/;"	s
audit_ever_enabled	kernel/audit.c	/^int		audit_ever_enabled;$/;"	v
audit_expand	kernel/audit.c	/^static inline int audit_expand(struct audit_buffer *ab, int extra)$/;"	f	file:
audit_failure	kernel/audit.c	/^static int	audit_failure = AUDIT_FAIL_PRINTK;$/;"	v	file:
audit_field_compare	kernel/auditsc.c	/^static int audit_field_compare(struct task_struct *tsk,$/;"	f	file:
audit_filter_inode_name	kernel/auditsc.c	/^static int audit_filter_inode_name(struct task_struct *tsk,$/;"	f	file:
audit_filter_inodes	kernel/audit.h	168;"	d
audit_filter_inodes	kernel/auditsc.c	/^void audit_filter_inodes(struct task_struct *tsk, struct audit_context *ctx)$/;"	f
audit_filter_list	kernel/auditfilter.c	/^struct list_head audit_filter_list[AUDIT_NR_FILTERS] = {$/;"	v	typeref:struct:list_head
audit_filter_mutex	kernel/auditfilter.c	/^DEFINE_MUTEX(audit_filter_mutex);$/;"	v
audit_filter_rules	kernel/auditsc.c	/^static int audit_filter_rules(struct task_struct *tsk,$/;"	f	file:
audit_filter_syscall	kernel/auditsc.c	/^static enum audit_state audit_filter_syscall(struct task_struct *tsk,$/;"	f	file:
audit_filter_task	kernel/auditsc.c	/^static enum audit_state audit_filter_task(struct task_struct *tsk, char **key)$/;"	f	file:
audit_filter_type	kernel/auditfilter.c	/^int audit_filter_type(int type)$/;"	f
audit_filter_user	kernel/auditfilter.c	/^int audit_filter_user(void)$/;"	f
audit_filter_user_rules	kernel/auditfilter.c	/^static int audit_filter_user_rules(struct audit_krule *rule,$/;"	f	file:
audit_find_parent	kernel/audit_watch.c	/^static inline struct audit_parent *audit_find_parent(struct inode *inode)$/;"	f	file:
audit_find_rule	kernel/auditfilter.c	/^static struct audit_entry *audit_find_rule(struct audit_entry *entry,$/;"	f	file:
audit_free_aux	kernel/auditsc.c	/^static inline void audit_free_aux(struct audit_context *context)$/;"	f	file:
audit_free_context	kernel/auditsc.c	/^static inline void audit_free_context(struct audit_context *context)$/;"	f	file:
audit_free_names	kernel/auditsc.c	/^static inline void audit_free_names(struct audit_context *context)$/;"	f	file:
audit_free_parent	kernel/audit_watch.c	/^static void audit_free_parent(struct audit_parent *parent)$/;"	f	file:
audit_free_rule	kernel/auditfilter.c	/^static inline void audit_free_rule(struct audit_entry *e)$/;"	f	file:
audit_free_rule_rcu	kernel/auditfilter.c	/^void audit_free_rule_rcu(struct rcu_head *head)$/;"	f
audit_freelist_count	kernel/audit.c	/^static int	   audit_freelist_count;$/;"	v	file:
audit_get_context	kernel/auditsc.c	/^static inline struct audit_context *audit_get_context(struct task_struct *tsk,$/;"	f	file:
audit_get_nd	kernel/audit_watch.c	/^static int audit_get_nd(struct audit_watch *watch, struct path *parent)$/;"	f	file:
audit_get_parent	kernel/audit_watch.c	/^static void audit_get_parent(struct audit_parent *parent)$/;"	f	file:
audit_get_stamp	kernel/audit.c	/^static inline void audit_get_stamp(struct audit_context *ctx,$/;"	f	file:
audit_get_watch	kernel/audit.h	117;"	d
audit_get_watch	kernel/audit_watch.c	/^void audit_get_watch(struct audit_watch *watch)$/;"	f
audit_gid_comparator	kernel/auditfilter.c	/^int audit_gid_comparator(kgid_t left, u32 op, kgid_t right)$/;"	f
audit_hash_ino	kernel/audit.h	/^static inline int audit_hash_ino(u32 ino)$/;"	f
audit_hold_skb	kernel/audit.c	/^static void audit_hold_skb(struct sk_buff *skb)$/;"	f	file:
audit_init	kernel/audit.c	/^__initcall(audit_init);$/;"	v
audit_init	kernel/audit.c	/^static int __init audit_init(void)$/;"	f	file:
audit_init_entry	kernel/auditfilter.c	/^static inline struct audit_entry *audit_init_entry(u32 field_count)$/;"	f	file:
audit_init_parent	kernel/audit_watch.c	/^static struct audit_parent *audit_init_parent(struct path *path)$/;"	f	file:
audit_init_watch	kernel/audit_watch.c	/^static struct audit_watch *audit_init_watch(char *path)$/;"	f	file:
audit_initialized	kernel/audit.c	/^static int	audit_initialized;$/;"	v	file:
audit_inode_hash	kernel/audit.c	/^struct list_head audit_inode_hash[AUDIT_INODE_BUCKETS];$/;"	v	typeref:struct:list_head
audit_kill_trees	kernel/audit.h	146;"	d
audit_kill_trees	kernel/audit_tree.c	/^void audit_kill_trees(struct list_head *list)$/;"	f
audit_killed_trees	kernel/auditsc.c	/^struct list_head *audit_killed_trees(void)$/;"	f
audit_krule_to_data	kernel/auditfilter.c	/^static struct audit_rule_data *audit_krule_to_data(struct audit_krule *krule)$/;"	f	file:
audit_krule_to_rule	kernel/auditfilter.c	/^static struct audit_rule *audit_krule_to_rule(struct audit_krule *krule)$/;"	f	file:
audit_list	kernel/auditfilter.c	/^static void audit_list(int pid, int seq, struct sk_buff_head *q)$/;"	f	file:
audit_list_rules	kernel/auditfilter.c	/^static void audit_list_rules(int pid, int seq, struct sk_buff_head *q)$/;"	f	file:
audit_log	kernel/audit.c	/^EXPORT_SYMBOL(audit_log);$/;"	v
audit_log	kernel/audit.c	/^void audit_log(struct audit_context *ctx, gfp_t gfp_mask, int type,$/;"	f
audit_log_abend	kernel/auditsc.c	/^static void audit_log_abend(struct audit_buffer *ab, char *reason, long signr)$/;"	f	file:
audit_log_cap	kernel/auditsc.c	/^static void audit_log_cap(struct audit_buffer *ab, char *prefix, kernel_cap_t *cap)$/;"	f	file:
audit_log_common_recv_msg	kernel/audit.c	/^static int audit_log_common_recv_msg(struct audit_buffer **ab, u16 msg_type,$/;"	f	file:
audit_log_config_change	kernel/audit.c	/^static int audit_log_config_change(char *function_name, int new, int old,$/;"	f	file:
audit_log_d_path	kernel/audit.c	/^void audit_log_d_path(struct audit_buffer *ab, const char *prefix,$/;"	f
audit_log_end	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_end);$/;"	v
audit_log_end	kernel/audit.c	/^void audit_log_end(struct audit_buffer *ab)$/;"	f
audit_log_execve_info	kernel/auditsc.c	/^static void audit_log_execve_info(struct audit_context *context,$/;"	f	file:
audit_log_exit	kernel/auditsc.c	/^static void audit_log_exit(struct audit_context *context, struct task_struct *tsk)$/;"	f	file:
audit_log_fcaps	kernel/auditsc.c	/^static void audit_log_fcaps(struct audit_buffer *ab, struct audit_names *name)$/;"	f	file:
audit_log_format	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_format);$/;"	v
audit_log_format	kernel/audit.c	/^void audit_log_format(struct audit_buffer *ab, const char *fmt, ...)$/;"	f
audit_log_key	kernel/audit.c	/^void audit_log_key(struct audit_buffer *ab, char *key)$/;"	f
audit_log_link_denied	kernel/audit.c	/^void audit_log_link_denied(const char *operation, struct path *link)$/;"	f
audit_log_lost	kernel/audit.c	/^void audit_log_lost(const char *message)$/;"	f
audit_log_n_hex	kernel/audit.c	/^void audit_log_n_hex(struct audit_buffer *ab, const unsigned char *buf,$/;"	f
audit_log_n_string	kernel/audit.c	/^void audit_log_n_string(struct audit_buffer *ab, const char *string,$/;"	f
audit_log_n_untrustedstring	kernel/audit.c	/^void audit_log_n_untrustedstring(struct audit_buffer *ab, const char *string,$/;"	f
audit_log_name	kernel/auditsc.c	/^static void audit_log_name(struct audit_context *context, struct audit_names *n,$/;"	f	file:
audit_log_pid_context	kernel/auditsc.c	/^static int audit_log_pid_context(struct audit_context *context, pid_t pid,$/;"	f	file:
audit_log_remove_rule	kernel/audit_tree.c	/^static void audit_log_remove_rule(struct audit_krule *rule)$/;"	f	file:
audit_log_rule_change	kernel/auditfilter.c	/^static void audit_log_rule_change(kuid_t loginuid, u32 sessionid, u32 sid,$/;"	f	file:
audit_log_secctx	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_secctx);$/;"	v
audit_log_secctx	kernel/audit.c	/^void audit_log_secctx(struct audit_buffer *ab, u32 secid)$/;"	f
audit_log_single_execve_arg	kernel/auditsc.c	/^static int audit_log_single_execve_arg(struct audit_context *context,$/;"	f	file:
audit_log_start	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_start);$/;"	v
audit_log_start	kernel/audit.c	/^struct audit_buffer *audit_log_start(struct audit_context *ctx, gfp_t gfp_mask,$/;"	f
audit_log_task	kernel/auditsc.c	/^static void audit_log_task(struct audit_buffer *ab)$/;"	f	file:
audit_log_task_context	kernel/auditsc.c	/^EXPORT_SYMBOL(audit_log_task_context);$/;"	v
audit_log_task_context	kernel/auditsc.c	/^void audit_log_task_context(struct audit_buffer *ab)$/;"	f
audit_log_task_info	kernel/auditsc.c	/^EXPORT_SYMBOL(audit_log_task_info);$/;"	v
audit_log_task_info	kernel/auditsc.c	/^void audit_log_task_info(struct audit_buffer *ab, struct task_struct *tsk)$/;"	f
audit_log_untrustedstring	kernel/audit.c	/^void audit_log_untrustedstring(struct audit_buffer *ab, const char *string)$/;"	f
audit_log_vformat	kernel/audit.c	/^static void audit_log_vformat(struct audit_buffer *ab, const char *fmt,$/;"	f	file:
audit_lost	kernel/audit.c	/^static atomic_t    audit_lost = ATOMIC_INIT(0);$/;"	v	file:
audit_make_reply	kernel/audit.c	/^struct sk_buff *audit_make_reply(int pid, int seq, int type, int done,$/;"	f
audit_make_tree	kernel/audit.h	141;"	d
audit_make_tree	kernel/audit_tree.c	/^int audit_make_tree(struct audit_krule *rule, char *pathname, u32 op)$/;"	f
audit_match_class	kernel/auditfilter.c	/^int audit_match_class(int class, unsigned syscall)$/;"	f
audit_match_class_bits	kernel/auditfilter.c	/^static inline int audit_match_class_bits(int class, u32 *mask)$/;"	f	file:
audit_match_filetype	kernel/auditsc.c	/^static int audit_match_filetype(struct audit_context *ctx, int val)$/;"	f	file:
audit_match_perm	kernel/auditsc.c	/^static int audit_match_perm(struct audit_context *ctx, int mask)$/;"	f	file:
audit_match_signal	kernel/auditfilter.c	/^static int audit_match_signal(struct audit_entry *entry)$/;"	f	file:
audit_n_rules	kernel/auditsc.c	/^int audit_n_rules;$/;"	v
audit_names	kernel/auditsc.c	/^struct audit_names {$/;"	s	file:
audit_netlink_list	kernel/audit.h	/^struct audit_netlink_list {$/;"	s
audit_netlink_ok	kernel/audit.c	/^static int audit_netlink_ok(struct sk_buff *skb, u16 msg_type)$/;"	f	file:
audit_nlk_portid	kernel/audit.c	/^static int	audit_nlk_portid;$/;"	v	file:
audit_ops	kernel/auditfilter.c	/^static u32 audit_ops[] =$/;"	v	file:
audit_pack_string	kernel/auditfilter.c	/^static inline size_t audit_pack_string(void **bufp, const char *str)$/;"	f	file:
audit_panic	kernel/audit.c	/^void audit_panic(const char *message)$/;"	f
audit_parent	kernel/audit_watch.c	/^struct audit_parent {$/;"	s	file:
audit_pid	kernel/audit.c	/^int		audit_pid;$/;"	v
audit_printk_skb	kernel/audit.c	/^static void audit_printk_skb(struct sk_buff *skb)$/;"	f	file:
audit_put_chunk	kernel/audit_tree.c	/^void audit_put_chunk(struct audit_chunk *chunk)$/;"	f
audit_put_parent	kernel/audit_watch.c	/^static void audit_put_parent(struct audit_parent *parent)$/;"	f	file:
audit_put_tree	kernel/audit.h	143;"	d
audit_put_tree	kernel/audit_tree.c	/^void audit_put_tree(struct audit_tree *tree)$/;"	f
audit_put_watch	kernel/audit.h	116;"	d
audit_put_watch	kernel/audit_watch.c	/^void audit_put_watch(struct audit_watch *watch)$/;"	f
audit_putname	kernel/auditsc.c	/^void audit_putname(struct filename *name)$/;"	f
audit_rate_check	kernel/audit.c	/^static inline int audit_rate_check(void)$/;"	f	file:
audit_rate_limit	kernel/audit.c	/^static int	audit_rate_limit;$/;"	v	file:
audit_receive	kernel/audit.c	/^static void audit_receive(struct sk_buff  *skb)$/;"	f	file:
audit_receive_filter	kernel/auditfilter.c	/^int audit_receive_filter(int type, int pid, int seq, void *data,$/;"	f
audit_receive_msg	kernel/audit.c	/^static int audit_receive_msg(struct sk_buff *skb, struct nlmsghdr *nlh)$/;"	f	file:
audit_receive_skb	kernel/audit.c	/^static void audit_receive_skb(struct sk_buff *skb)$/;"	f	file:
audit_register_class	kernel/auditfilter.c	/^int __init audit_register_class(int class, unsigned *list)$/;"	f
audit_remove_parent_watches	kernel/audit_watch.c	/^static void audit_remove_parent_watches(struct audit_parent *parent)$/;"	f	file:
audit_remove_tree_rule	kernel/audit.h	139;"	d
audit_remove_tree_rule	kernel/audit_tree.c	/^int audit_remove_tree_rule(struct audit_krule *rule)$/;"	f
audit_remove_watch	kernel/audit_watch.c	/^static void audit_remove_watch(struct audit_watch *watch)$/;"	f	file:
audit_remove_watch_rule	kernel/audit.h	120;"	d
audit_remove_watch_rule	kernel/audit_watch.c	/^void audit_remove_watch_rule(struct audit_krule *krule)$/;"	f
audit_reply	kernel/audit.c	/^struct audit_reply {$/;"	s	file:
audit_rule_to_entry	kernel/auditfilter.c	/^static struct audit_entry *audit_rule_to_entry(struct audit_rule *rule)$/;"	f	file:
audit_rules_list	kernel/auditfilter.c	/^static struct list_head audit_rules_list[AUDIT_NR_FILTERS] = {$/;"	v	typeref:struct:list_head	file:
audit_schedule_prune	kernel/audit_tree.c	/^static void audit_schedule_prune(void)$/;"	f	file:
audit_send_list	kernel/audit.c	/^int audit_send_list(void *_dest)$/;"	f
audit_send_reply	kernel/audit.c	/^static void audit_send_reply(int pid, int seq, int type, int done, int multi,$/;"	f	file:
audit_send_reply_thread	kernel/audit.c	/^static int audit_send_reply_thread(void *arg)$/;"	f	file:
audit_serial	kernel/audit.c	/^unsigned int audit_serial(void)$/;"	f
audit_set_auditable	kernel/auditsc.c	/^static void audit_set_auditable(struct audit_context *ctx)$/;"	f	file:
audit_set_backlog_limit	kernel/audit.c	/^static int audit_set_backlog_limit(int limit, kuid_t loginuid, u32 sessionid,$/;"	f	file:
audit_set_enabled	kernel/audit.c	/^static int audit_set_enabled(int state, kuid_t loginuid, u32 sessionid, u32 sid)$/;"	f	file:
audit_set_failure	kernel/audit.c	/^static int audit_set_failure(int state, kuid_t loginuid, u32 sessionid, u32 sid)$/;"	f	file:
audit_set_loginuid	kernel/auditsc.c	/^int audit_set_loginuid(kuid_t loginuid)$/;"	f
audit_set_pid	kernel/audit.c	/^static void audit_set_pid(struct audit_buffer *ab, pid_t pid)$/;"	f	file:
audit_set_rate_limit	kernel/audit.c	/^static int audit_set_rate_limit(int limit, kuid_t loginuid, u32 sessionid,$/;"	f	file:
audit_sig_pid	kernel/audit.c	/^pid_t		audit_sig_pid = -1;$/;"	v
audit_sig_sid	kernel/audit.c	/^u32		audit_sig_sid = 0;$/;"	v
audit_sig_uid	kernel/audit.c	/^kuid_t		audit_sig_uid = INVALID_UID;$/;"	v
audit_signal_info	kernel/audit.h	/^static inline int audit_signal_info(int sig, struct task_struct *t)$/;"	f
audit_signal_info	kernel/audit.h	167;"	d
audit_signals	kernel/auditsc.c	/^int audit_signals;$/;"	v
audit_skb_hold_queue	kernel/audit.c	/^static struct sk_buff_head audit_skb_hold_queue;$/;"	v	typeref:struct:sk_buff_head	file:
audit_skb_queue	kernel/audit.c	/^static struct sk_buff_head audit_skb_queue;$/;"	v	typeref:struct:sk_buff_head	file:
audit_sock	kernel/audit.c	/^static struct sock *audit_sock;$/;"	v	typeref:struct:sock	file:
audit_state	kernel/audit.h	/^enum audit_state {$/;"	g
audit_string_contains_control	kernel/audit.c	/^int audit_string_contains_control(const char *string, size_t len)$/;"	f
audit_tag_tree	kernel/audit.h	144;"	d
audit_tag_tree	kernel/audit_tree.c	/^int audit_tag_tree(char *old, char *new)$/;"	f
audit_to_entry_common	kernel/auditfilter.c	/^static inline struct audit_entry *audit_to_entry_common(struct audit_rule *rule)$/;"	f	file:
audit_to_inode	kernel/auditfilter.c	/^static inline int audit_to_inode(struct audit_krule *krule,$/;"	f	file:
audit_to_op	kernel/auditfilter.c	/^static u32 audit_to_op(u32 op)$/;"	f	file:
audit_to_watch	kernel/audit.h	118;"	d
audit_to_watch	kernel/audit_watch.c	/^int audit_to_watch(struct audit_krule *krule, char *path, int len, u32 op)$/;"	f
audit_tree	kernel/audit_tree.c	/^struct audit_tree {$/;"	s	file:
audit_tree_destroy_watch	kernel/audit_tree.c	/^static void audit_tree_destroy_watch(struct fsnotify_mark *entry)$/;"	f	file:
audit_tree_freeing_mark	kernel/audit_tree.c	/^static void audit_tree_freeing_mark(struct fsnotify_mark *entry, struct fsnotify_group *group)$/;"	f	file:
audit_tree_group	kernel/audit_tree.c	/^static struct fsnotify_group *audit_tree_group;$/;"	v	typeref:struct:fsnotify_group	file:
audit_tree_handle_event	kernel/audit_tree.c	/^static int audit_tree_handle_event(struct fsnotify_group *group,$/;"	f	file:
audit_tree_init	kernel/audit_tree.c	/^__initcall(audit_tree_init);$/;"	v
audit_tree_init	kernel/audit_tree.c	/^static int __init audit_tree_init(void)$/;"	f	file:
audit_tree_lookup	kernel/audit_tree.c	/^struct audit_chunk *audit_tree_lookup(const struct inode *inode)$/;"	f
audit_tree_match	kernel/audit_tree.c	/^int audit_tree_match(struct audit_chunk *chunk, struct audit_tree *tree)$/;"	f
audit_tree_ops	kernel/audit_tree.c	/^static const struct fsnotify_ops audit_tree_ops = {$/;"	v	typeref:struct:fsnotify_ops	file:
audit_tree_path	kernel/audit.h	145;"	d
audit_tree_path	kernel/audit_tree.c	/^const char *audit_tree_path(struct audit_tree *tree)$/;"	f
audit_tree_refs	kernel/auditsc.c	/^struct audit_tree_refs {$/;"	s	file:
audit_tree_send_event	kernel/audit_tree.c	/^static bool audit_tree_send_event(struct fsnotify_group *group, struct inode *inode,$/;"	f	file:
audit_trim_trees	kernel/audit.h	142;"	d
audit_trim_trees	kernel/audit_tree.c	/^void audit_trim_trees(void)$/;"	f
audit_uid_comparator	kernel/auditfilter.c	/^int audit_uid_comparator(kuid_t left, u32 op, kuid_t right)$/;"	f
audit_unpack_string	kernel/auditfilter.c	/^char *audit_unpack_string(void **bufp, size_t *remain, size_t len)$/;"	f
audit_update_lsm_rules	kernel/auditfilter.c	/^int audit_update_lsm_rules(void)$/;"	f
audit_update_watch	kernel/audit_watch.c	/^static void audit_update_watch(struct audit_parent *parent,$/;"	f	file:
audit_watch	kernel/audit_watch.c	/^struct audit_watch {$/;"	s	file:
audit_watch_compare	kernel/audit.h	122;"	d
audit_watch_compare	kernel/audit_watch.c	/^int audit_watch_compare(struct audit_watch *watch, unsigned long ino, dev_t dev)$/;"	f
audit_watch_free_mark	kernel/audit_watch.c	/^static void audit_watch_free_mark(struct fsnotify_mark *entry)$/;"	f	file:
audit_watch_fsnotify_ops	kernel/audit_watch.c	/^static const struct fsnotify_ops audit_watch_fsnotify_ops = {$/;"	v	typeref:struct:fsnotify_ops	file:
audit_watch_group	kernel/audit_watch.c	/^static struct fsnotify_group *audit_watch_group;$/;"	v	typeref:struct:fsnotify_group	file:
audit_watch_handle_event	kernel/audit_watch.c	/^static int audit_watch_handle_event(struct fsnotify_group *group,$/;"	f	file:
audit_watch_init	kernel/audit_watch.c	/^device_initcall(audit_watch_init);$/;"	v
audit_watch_init	kernel/audit_watch.c	/^static int __init audit_watch_init(void)$/;"	f	file:
audit_watch_log_rule_change	kernel/audit_watch.c	/^static void audit_watch_log_rule_change(struct audit_krule *r, struct audit_watch *w, char *op)$/;"	f	file:
audit_watch_path	kernel/audit.h	121;"	d
audit_watch_path	kernel/audit_watch.c	/^char *audit_watch_path(struct audit_watch *watch)$/;"	f
audit_watch_should_send_event	kernel/audit_watch.c	/^static bool audit_watch_should_send_event(struct fsnotify_group *group, struct inode *inode,$/;"	f	file:
audit_zero_context	kernel/auditsc.c	/^static inline void audit_zero_context(struct audit_context *context,$/;"	f	file:
auditsc_get_stamp	kernel/auditsc.c	/^int auditsc_get_stamp(struct audit_context *ctx,$/;"	f
auth_flavourlen	fs/compat.c	/^	compat_int_t auth_flavourlen;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
auth_flavours	fs/compat.c	/^	compat_uptr_t auth_flavours;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
autoremove_wake_function	kernel/wait.c	/^EXPORT_SYMBOL(autoremove_wake_function);$/;"	v
autoremove_wake_function	kernel/wait.c	/^int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f
aux	kernel/auditsc.c	/^	struct audit_aux_data *aux;$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_aux_data	file:
aux_pids	kernel/auditsc.c	/^	struct audit_aux_data *aux_pids;$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_aux_data	file:
auxv	fs/binfmt_elf.c	/^	struct memelfnote auxv;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
avail	mm/slab.c	/^	unsigned int avail;$/;"	m	struct:array_cache	file:
avc_last_pgoff	mm/interval_tree.c	/^static inline unsigned long avc_last_pgoff(struct anon_vma_chain *avc)$/;"	f	file:
avc_start_pgoff	mm/interval_tree.c	/^static inline unsigned long avc_start_pgoff(struct anon_vma_chain *avc)$/;"	f	file:
bacct_add_tsk	kernel/tsacct.c	/^void bacct_add_tsk(struct user_namespace *user_ns,$/;"	f
backtrace_regression_test	kernel/backtracetest.c	/^module_init(backtrace_regression_test);$/;"	v
backtrace_regression_test	kernel/backtracetest.c	/^static int backtrace_regression_test(void)$/;"	f	file:
backtrace_test_irq	kernel/backtracetest.c	/^static void backtrace_test_irq(void)$/;"	f	file:
backtrace_test_irq_callback	kernel/backtracetest.c	/^static void backtrace_test_irq_callback(unsigned long data)$/;"	f	file:
backtrace_test_normal	kernel/backtracetest.c	/^static void backtrace_test_normal(void)$/;"	f	file:
backtrace_test_saved	kernel/backtracetest.c	/^static void backtrace_test_saved(void)$/;"	f	file:
bad_file_aio_fsync	fs/bad_inode.c	/^static int bad_file_aio_fsync(struct kiocb *iocb, int datasync)$/;"	f	file:
bad_file_aio_read	fs/bad_inode.c	/^static ssize_t bad_file_aio_read(struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
bad_file_aio_write	fs/bad_inode.c	/^static ssize_t bad_file_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
bad_file_check_flags	fs/bad_inode.c	/^static int bad_file_check_flags(int flags)$/;"	f	file:
bad_file_compat_ioctl	fs/bad_inode.c	/^static long bad_file_compat_ioctl(struct file *file, unsigned int cmd,$/;"	f	file:
bad_file_fasync	fs/bad_inode.c	/^static int bad_file_fasync(int fd, struct file *filp, int on)$/;"	f	file:
bad_file_flock	fs/bad_inode.c	/^static int bad_file_flock(struct file *filp, int cmd, struct file_lock *fl)$/;"	f	file:
bad_file_flush	fs/bad_inode.c	/^static int bad_file_flush(struct file *file, fl_owner_t id)$/;"	f	file:
bad_file_fsync	fs/bad_inode.c	/^static int bad_file_fsync(struct file *file, loff_t start, loff_t end,$/;"	f	file:
bad_file_get_unmapped_area	fs/bad_inode.c	/^static unsigned long bad_file_get_unmapped_area(struct file *file,$/;"	f	file:
bad_file_llseek	fs/bad_inode.c	/^static loff_t bad_file_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
bad_file_lock	fs/bad_inode.c	/^static int bad_file_lock(struct file *file, int cmd, struct file_lock *fl)$/;"	f	file:
bad_file_mmap	fs/bad_inode.c	/^static int bad_file_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
bad_file_open	fs/bad_inode.c	/^static int bad_file_open(struct inode *inode, struct file *filp)$/;"	f	file:
bad_file_ops	fs/bad_inode.c	/^static const struct file_operations bad_file_ops =$/;"	v	typeref:struct:file_operations	file:
bad_file_poll	fs/bad_inode.c	/^static unsigned int bad_file_poll(struct file *filp, poll_table *wait)$/;"	f	file:
bad_file_read	fs/bad_inode.c	/^static ssize_t bad_file_read(struct file *filp, char __user *buf,$/;"	f	file:
bad_file_readdir	fs/bad_inode.c	/^static int bad_file_readdir(struct file *filp, void *dirent, filldir_t filldir)$/;"	f	file:
bad_file_release	fs/bad_inode.c	/^static int bad_file_release(struct inode *inode, struct file *filp)$/;"	f	file:
bad_file_sendpage	fs/bad_inode.c	/^static ssize_t bad_file_sendpage(struct file *file, struct page *page,$/;"	f	file:
bad_file_splice_read	fs/bad_inode.c	/^static ssize_t bad_file_splice_read(struct file *in, loff_t *ppos,$/;"	f	file:
bad_file_splice_write	fs/bad_inode.c	/^static ssize_t bad_file_splice_write(struct pipe_inode_info *pipe,$/;"	f	file:
bad_file_unlocked_ioctl	fs/bad_inode.c	/^static long bad_file_unlocked_ioctl(struct file *file, unsigned cmd,$/;"	f	file:
bad_file_write	fs/bad_inode.c	/^static ssize_t bad_file_write(struct file *filp, const char __user *buf,$/;"	f	file:
bad_inode_create	fs/bad_inode.c	/^static int bad_inode_create (struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_getattr	fs/bad_inode.c	/^static int bad_inode_getattr(struct vfsmount *mnt, struct dentry *dentry,$/;"	f	file:
bad_inode_getxattr	fs/bad_inode.c	/^static ssize_t bad_inode_getxattr(struct dentry *dentry, const char *name,$/;"	f	file:
bad_inode_link	fs/bad_inode.c	/^static int bad_inode_link (struct dentry *old_dentry, struct inode *dir,$/;"	f	file:
bad_inode_listxattr	fs/bad_inode.c	/^static ssize_t bad_inode_listxattr(struct dentry *dentry, char *buffer,$/;"	f	file:
bad_inode_lookup	fs/bad_inode.c	/^static struct dentry *bad_inode_lookup(struct inode *dir,$/;"	f	file:
bad_inode_mkdir	fs/bad_inode.c	/^static int bad_inode_mkdir(struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_mknod	fs/bad_inode.c	/^static int bad_inode_mknod (struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_ops	fs/bad_inode.c	/^static const struct inode_operations bad_inode_ops =$/;"	v	typeref:struct:inode_operations	file:
bad_inode_permission	fs/bad_inode.c	/^static int bad_inode_permission(struct inode *inode, int mask)$/;"	f	file:
bad_inode_readlink	fs/bad_inode.c	/^static int bad_inode_readlink(struct dentry *dentry, char __user *buffer,$/;"	f	file:
bad_inode_removexattr	fs/bad_inode.c	/^static int bad_inode_removexattr(struct dentry *dentry, const char *name)$/;"	f	file:
bad_inode_rename	fs/bad_inode.c	/^static int bad_inode_rename (struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
bad_inode_rmdir	fs/bad_inode.c	/^static int bad_inode_rmdir (struct inode *dir, struct dentry *dentry)$/;"	f	file:
bad_inode_setattr	fs/bad_inode.c	/^static int bad_inode_setattr(struct dentry *direntry, struct iattr *attrs)$/;"	f	file:
bad_inode_setxattr	fs/bad_inode.c	/^static int bad_inode_setxattr(struct dentry *dentry, const char *name,$/;"	f	file:
bad_inode_symlink	fs/bad_inode.c	/^static int bad_inode_symlink (struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_unlink	fs/bad_inode.c	/^static int bad_inode_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
bad_page	mm/page_alloc.c	/^static void bad_page(struct page *page)$/;"	f	file:
bad_pipe_r	fs/pipe.c	/^bad_pipe_r(struct file *filp, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
bad_pipe_w	fs/pipe.c	/^bad_pipe_w(struct file *filp, const char __user *buf, size_t count,$/;"	f	file:
bad_range	mm/page_alloc.c	/^static inline int bad_range(struct zone *zone, struct page *page)$/;"	f	file:
bad_range	mm/page_alloc.c	/^static int bad_range(struct zone *zone, struct page *page)$/;"	f	file:
balance_dirty_pages	mm/page-writeback.c	/^static void balance_dirty_pages(struct address_space *mapping,$/;"	f	file:
balance_dirty_pages_ratelimited	mm/page-writeback.c	/^EXPORT_SYMBOL(balance_dirty_pages_ratelimited);$/;"	v
balance_dirty_pages_ratelimited	mm/page-writeback.c	/^void balance_dirty_pages_ratelimited(struct address_space *mapping)$/;"	f
balance_pgdat	mm/vmscan.c	/^static unsigned long balance_pgdat(pg_data_t *pgdat, int order,$/;"	f	file:
balloon_devinfo_alloc	mm/balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_devinfo_alloc);$/;"	v
balloon_devinfo_alloc	mm/balloon_compaction.c	/^struct balloon_dev_info *balloon_devinfo_alloc(void *balloon_dev_descriptor)$/;"	f
balloon_mapping_alloc	mm/balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_mapping_alloc);$/;"	v
balloon_mapping_alloc	mm/balloon_compaction.c	/^struct address_space *balloon_mapping_alloc(struct balloon_dev_info *b_dev_info,$/;"	f
balloon_page_dequeue	mm/balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_dequeue);$/;"	v
balloon_page_dequeue	mm/balloon_compaction.c	/^struct page *balloon_page_dequeue(struct balloon_dev_info *b_dev_info)$/;"	f
balloon_page_enqueue	mm/balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_enqueue);$/;"	v
balloon_page_enqueue	mm/balloon_compaction.c	/^struct page *balloon_page_enqueue(struct balloon_dev_info *b_dev_info)$/;"	f
balloon_page_isolate	mm/balloon_compaction.c	/^bool balloon_page_isolate(struct page *page)$/;"	f
balloon_page_migrate	mm/balloon_compaction.c	/^int balloon_page_migrate(struct page *newpage,$/;"	f
balloon_page_putback	mm/balloon_compaction.c	/^void balloon_page_putback(struct page *page)$/;"	f
band_table	fs/fcntl.c	/^static const long band_table[NSIGPOLL] = {$/;"	v	file:
barrier_cbs_count	kernel/rcutorture.c	/^static atomic_t barrier_cbs_count;	\/* Barrier callbacks registered. *\/$/;"	v	file:
barrier_cbs_invoked	kernel/rcutorture.c	/^static atomic_t barrier_cbs_invoked;	\/* Barrier callbacks invoked. *\/$/;"	v	file:
barrier_cbs_tasks	kernel/rcutorture.c	/^static struct task_struct **barrier_cbs_tasks;$/;"	v	typeref:struct:task_struct	file:
barrier_cbs_wq	kernel/rcutorture.c	/^static wait_queue_head_t *barrier_cbs_wq; \/* Coordinate barrier testing. *\/$/;"	v	file:
barrier_completion	kernel/rcutree.h	/^	struct completion barrier_completion;	\/* Wake at barrier end. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::completion
barrier_cpu_count	kernel/rcutree.h	/^	atomic_t barrier_cpu_count;		\/* # CPUs waiting on. *\/$/;"	m	struct:rcu_state
barrier_head	kernel/rcutree.h	/^	struct rcu_head barrier_head;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
barrier_mutex	kernel/rcutree.h	/^	struct mutex barrier_mutex;		\/* Guards barrier fields. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::mutex
barrier_phase	kernel/rcutorture.c	/^static bool barrier_phase;		\/* Test phase. *\/$/;"	v	file:
barrier_task	kernel/rcutorture.c	/^static struct task_struct *barrier_task;$/;"	v	typeref:struct:task_struct	file:
base	fs/eventpoll.c	/^	struct epitem *base;$/;"	m	struct:eppoll_entry	typeref:struct:eppoll_entry::epitem	file:
base	fs/ext3/xattr.c	/^	void *base;$/;"	m	struct:ext3_xattr_search	file:
base	mm/scm.h	/^	unsigned long base;$/;"	m	struct:__anon16
base_addr	mm/percpu.c	/^	void			*base_addr;	\/* base address of this chunk *\/$/;"	m	struct:pcpu_chunk	file:
base_probe	fs/char_dev.c	/^static struct kobject *base_probe(dev_t dev, int *part, void *data)$/;"	f	file:
baseminor	fs/char_dev.c	/^	unsigned int baseminor;$/;"	m	struct:char_device_struct	file:
batchcount	mm/slab.c	/^	unsigned int batchcount;$/;"	m	struct:array_cache	file:
batchcount	mm/slab.h	/^	unsigned int batchcount;$/;"	m	struct:slabinfo
baud_base	fs/compat_ioctl.c	/^        compat_int_t    baud_base;$/;"	m	struct:serial_struct32	file:
bclean	fs/ext3/resize.c	/^static struct buffer_head *bclean(handle_t *handle, struct super_block *sb,$/;"	f	file:
bcount	fs/ext3/namei.c	/^	unsigned bcount;$/;"	m	struct:stats	file:
bd_acquire	fs/block_dev.c	/^static struct block_device *bd_acquire(struct inode *inode)$/;"	f	file:
bd_find_holder_disk	fs/block_dev.c	/^static struct bd_holder_disk *bd_find_holder_disk(struct block_device *bdev,$/;"	f	file:
bd_forget	fs/block_dev.c	/^void bd_forget(struct inode *inode)$/;"	f
bd_holder_disk	fs/block_dev.c	/^struct bd_holder_disk {$/;"	s	file:
bd_link_disk_holder	fs/block_dev.c	/^EXPORT_SYMBOL_GPL(bd_link_disk_holder);$/;"	v
bd_link_disk_holder	fs/block_dev.c	/^int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk)$/;"	f
bd_may_claim	fs/block_dev.c	/^static bool bd_may_claim(struct block_device *bdev, struct block_device *whole,$/;"	f	file:
bd_mount	fs/block_dev.c	/^static struct dentry *bd_mount(struct file_system_type *fs_type,$/;"	f	file:
bd_prepare_to_claim	fs/block_dev.c	/^static int bd_prepare_to_claim(struct block_device *bdev,$/;"	f	file:
bd_set_size	fs/block_dev.c	/^EXPORT_SYMBOL(bd_set_size);$/;"	v
bd_set_size	fs/block_dev.c	/^void bd_set_size(struct block_device *bdev, loff_t size)$/;"	f
bd_start_claiming	fs/block_dev.c	/^static struct block_device *bd_start_claiming(struct block_device *bdev,$/;"	f	file:
bd_type	fs/block_dev.c	/^static struct file_system_type bd_type = {$/;"	v	typeref:struct:file_system_type	file:
bd_unlink_disk_holder	fs/block_dev.c	/^EXPORT_SYMBOL_GPL(bd_unlink_disk_holder);$/;"	v
bd_unlink_disk_holder	fs/block_dev.c	/^void bd_unlink_disk_holder(struct block_device *bdev, struct gendisk *disk)$/;"	f
bdebug	mm/bootmem.c	50;"	d	file:
bdev	fs/block_dev.c	/^	struct block_device bdev;$/;"	m	struct:bdev_inode	typeref:struct:bdev_inode::block_device	file:
bdev_alloc_inode	fs/block_dev.c	/^static struct inode *bdev_alloc_inode(struct super_block *sb)$/;"	f	file:
bdev_cache_init	fs/block_dev.c	/^void __init bdev_cache_init(void)$/;"	f
bdev_cache_init	fs/internal.h	/^static inline void bdev_cache_init(void)$/;"	f
bdev_destroy_inode	fs/block_dev.c	/^static void bdev_destroy_inode(struct inode *inode)$/;"	f	file:
bdev_evict_inode	fs/block_dev.c	/^static void bdev_evict_inode(struct inode *inode)$/;"	f	file:
bdev_i_callback	fs/block_dev.c	/^static void bdev_i_callback(struct rcu_head *head)$/;"	f	file:
bdev_inode	fs/block_dev.c	/^struct bdev_inode {$/;"	s	file:
bdev_inode_switch_bdi	fs/block_dev.c	/^static void bdev_inode_switch_bdi(struct inode *inode,$/;"	f	file:
bdev_integrity_enabled	fs/bio-integrity.c	/^static int bdev_integrity_enabled(struct block_device *bdev, int rw)$/;"	f	file:
bdev_set	fs/block_dev.c	/^static int bdev_set(struct inode *inode, void *data)$/;"	f	file:
bdev_sops	fs/block_dev.c	/^static const struct super_operations bdev_sops = {$/;"	v	typeref:struct:super_operations	file:
bdev_test	fs/block_dev.c	/^static int bdev_test(struct inode *inode, void *data)$/;"	f	file:
bdev_try_to_free_page	fs/ext3/super.c	/^static int bdev_try_to_free_page(struct super_block *sb, struct page *page,$/;"	f	file:
bdget	fs/block_dev.c	/^EXPORT_SYMBOL(bdget);$/;"	v
bdget	fs/block_dev.c	/^struct block_device *bdget(dev_t dev)$/;"	f
bdgrab	fs/block_dev.c	/^EXPORT_SYMBOL(bdgrab);$/;"	v
bdgrab	fs/block_dev.c	/^struct block_device *bdgrab(struct block_device *bdev)$/;"	f
bdi_class	mm/backing-dev.c	/^static struct class *bdi_class;$/;"	v	typeref:struct:class	file:
bdi_class_init	mm/backing-dev.c	/^postcore_initcall(bdi_class_init);$/;"	v
bdi_class_init	mm/backing-dev.c	/^static __init int bdi_class_init(void)$/;"	f	file:
bdi_clear_pending	mm/backing-dev.c	/^static void bdi_clear_pending(struct backing_dev_info *bdi)$/;"	f	file:
bdi_debug_init	mm/backing-dev.c	/^static inline void bdi_debug_init(void)$/;"	f	file:
bdi_debug_init	mm/backing-dev.c	/^static void bdi_debug_init(void)$/;"	f	file:
bdi_debug_register	mm/backing-dev.c	/^static inline void bdi_debug_register(struct backing_dev_info *bdi,$/;"	f	file:
bdi_debug_register	mm/backing-dev.c	/^static void bdi_debug_register(struct backing_dev_info *bdi, const char *name)$/;"	f	file:
bdi_debug_root	mm/backing-dev.c	/^static struct dentry *bdi_debug_root;$/;"	v	typeref:struct:dentry	file:
bdi_debug_stats_fops	mm/backing-dev.c	/^static const struct file_operations bdi_debug_stats_fops = {$/;"	v	typeref:struct:file_operations	file:
bdi_debug_stats_open	mm/backing-dev.c	/^static int bdi_debug_stats_open(struct inode *inode, struct file *file)$/;"	f	file:
bdi_debug_stats_show	mm/backing-dev.c	/^static int bdi_debug_stats_show(struct seq_file *m, void *v)$/;"	f	file:
bdi_debug_unregister	mm/backing-dev.c	/^static inline void bdi_debug_unregister(struct backing_dev_info *bdi)$/;"	f	file:
bdi_debug_unregister	mm/backing-dev.c	/^static void bdi_debug_unregister(struct backing_dev_info *bdi)$/;"	f	file:
bdi_destroy	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_destroy);$/;"	v
bdi_destroy	mm/backing-dev.c	/^void bdi_destroy(struct backing_dev_info *bdi)$/;"	f
bdi_dev_attrs	mm/backing-dev.c	/^static struct device_attribute bdi_dev_attrs[] = {$/;"	v	typeref:struct:device_attribute	file:
bdi_dirty_limit	mm/page-writeback.c	/^unsigned long bdi_dirty_limit(struct backing_dev_info *bdi, unsigned long dirty)$/;"	f
bdi_forker_thread	mm/backing-dev.c	/^static int bdi_forker_thread(void *ptr)$/;"	f	file:
bdi_has_dirty_io	mm/backing-dev.c	/^int bdi_has_dirty_io(struct backing_dev_info *bdi)$/;"	f
bdi_init	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_init);$/;"	v
bdi_init	mm/backing-dev.c	/^int bdi_init(struct backing_dev_info *bdi)$/;"	f
bdi_list	mm/backing-dev.c	/^LIST_HEAD(bdi_list);$/;"	v
bdi_lock	mm/backing-dev.c	/^DEFINE_SPINLOCK(bdi_lock);$/;"	v
bdi_lock_two	mm/backing-dev.c	/^void bdi_lock_two(struct bdi_writeback *wb1, struct bdi_writeback *wb2)$/;"	f
bdi_longest_inactive	mm/backing-dev.c	/^static unsigned long bdi_longest_inactive(void)$/;"	f	file:
bdi_max_pause	mm/page-writeback.c	/^static long bdi_max_pause(struct backing_dev_info *bdi,$/;"	f	file:
bdi_min_pause	mm/page-writeback.c	/^static long bdi_min_pause(struct backing_dev_info *bdi,$/;"	f	file:
bdi_min_ratio	mm/page-writeback.c	/^static unsigned int bdi_min_ratio;$/;"	v	file:
bdi_pending_list	mm/backing-dev.c	/^LIST_HEAD(bdi_pending_list);$/;"	v
bdi_position_ratio	mm/page-writeback.c	/^static unsigned long bdi_position_ratio(struct backing_dev_info *bdi,$/;"	f	file:
bdi_prune_sb	mm/backing-dev.c	/^static void bdi_prune_sb(struct backing_dev_info *bdi)$/;"	f	file:
bdi_queue_work	fs/fs-writeback.c	/^static void bdi_queue_work(struct backing_dev_info *bdi,$/;"	f	file:
bdi_register	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_register);$/;"	v
bdi_register	mm/backing-dev.c	/^int bdi_register(struct backing_dev_info *bdi, struct device *parent,$/;"	f
bdi_register_dev	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_register_dev);$/;"	v
bdi_register_dev	mm/backing-dev.c	/^int bdi_register_dev(struct backing_dev_info *bdi, dev_t dev)$/;"	f
bdi_remove_from_list	mm/backing-dev.c	/^static void bdi_remove_from_list(struct backing_dev_info *bdi)$/;"	f	file:
bdi_seq	mm/backing-dev.c	/^static atomic_long_t bdi_seq = ATOMIC_LONG_INIT(0);$/;"	v	file:
bdi_set_max_ratio	mm/page-writeback.c	/^EXPORT_SYMBOL(bdi_set_max_ratio);$/;"	v
bdi_set_max_ratio	mm/page-writeback.c	/^int bdi_set_max_ratio(struct backing_dev_info *bdi, unsigned max_ratio)$/;"	f
bdi_set_min_ratio	mm/page-writeback.c	/^int bdi_set_min_ratio(struct backing_dev_info *bdi, unsigned int min_ratio)$/;"	f
bdi_setup_and_register	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_setup_and_register);$/;"	v
bdi_setup_and_register	mm/backing-dev.c	/^int bdi_setup_and_register(struct backing_dev_info *bdi, char *name,$/;"	f
bdi_start_background_writeback	fs/fs-writeback.c	/^void bdi_start_background_writeback(struct backing_dev_info *bdi)$/;"	f
bdi_start_writeback	fs/fs-writeback.c	/^void bdi_start_writeback(struct backing_dev_info *bdi, long nr_pages,$/;"	f
bdi_unregister	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_unregister);$/;"	v
bdi_unregister	mm/backing-dev.c	/^void bdi_unregister(struct backing_dev_info *bdi)$/;"	f
bdi_update_bandwidth	mm/page-writeback.c	/^static void bdi_update_bandwidth(struct backing_dev_info *bdi,$/;"	f	file:
bdi_update_dirty_ratelimit	mm/page-writeback.c	/^static void bdi_update_dirty_ratelimit(struct backing_dev_info *bdi,$/;"	f	file:
bdi_update_write_bandwidth	mm/page-writeback.c	/^static void bdi_update_write_bandwidth(struct backing_dev_info *bdi,$/;"	f	file:
bdi_wakeup_flusher	fs/fs-writeback.c	/^static void bdi_wakeup_flusher(struct backing_dev_info *bdi)$/;"	f	file:
bdi_wakeup_thread_delayed	mm/backing-dev.c	/^void bdi_wakeup_thread_delayed(struct backing_dev_info *bdi)$/;"	f
bdi_wb_init	mm/backing-dev.c	/^static void bdi_wb_init(struct bdi_writeback *wb, struct backing_dev_info *bdi)$/;"	f	file:
bdi_wb_shutdown	mm/backing-dev.c	/^static void bdi_wb_shutdown(struct backing_dev_info *bdi)$/;"	f	file:
bdi_writeback_thread	fs/fs-writeback.c	/^int bdi_writeback_thread(void *data)$/;"	f
bdi_writeout_fraction	mm/page-writeback.c	/^static void bdi_writeout_fraction(struct backing_dev_info *bdi,$/;"	f	file:
bdi_writeout_inc	mm/page-writeback.c	/^EXPORT_SYMBOL_GPL(bdi_writeout_inc);$/;"	v
bdi_writeout_inc	mm/page-writeback.c	/^void bdi_writeout_inc(struct backing_dev_info *bdi)$/;"	f
bdput	fs/block_dev.c	/^EXPORT_SYMBOL(bdput);$/;"	v
bdput	fs/block_dev.c	/^void bdput(struct block_device *bdev)$/;"	f
beenonline	kernel/rcutree.h	/^	bool		beenonline;	\/* CPU online at least once. *\/$/;"	m	struct:rcu_data
bg_block_bitmap	fs/ext3/ext3.h	/^	__le32	bg_block_bitmap;		\/* Blocks bitmap block *\/$/;"	m	struct:ext3_group_desc
bg_free_blocks_count	fs/ext3/ext3.h	/^	__le16	bg_free_blocks_count;	\/* Free blocks count *\/$/;"	m	struct:ext3_group_desc
bg_free_inodes_count	fs/ext3/ext3.h	/^	__le16	bg_free_inodes_count;	\/* Free inodes count *\/$/;"	m	struct:ext3_group_desc
bg_inode_bitmap	fs/ext3/ext3.h	/^	__le32	bg_inode_bitmap;		\/* Inodes bitmap block *\/$/;"	m	struct:ext3_group_desc
bg_inode_table	fs/ext3/ext3.h	/^	__le32	bg_inode_table;		\/* Inodes table block *\/$/;"	m	struct:ext3_group_desc
bg_pad	fs/ext3/ext3.h	/^	__u16	bg_pad;$/;"	m	struct:ext3_group_desc
bg_reserved	fs/ext3/ext3.h	/^	__le32	bg_reserved[3];$/;"	m	struct:ext3_group_desc
bg_used_dirs_count	fs/ext3/ext3.h	/^	__le16	bg_used_dirs_count;	\/* Directories count *\/$/;"	m	struct:ext3_group_desc
bget_one	fs/ext3/inode.c	/^static int bget_one(handle_t *handle, struct buffer_head *bh)$/;"	f	file:
bh	fs/ext3/ext3.h	/^	struct buffer_head *bh;$/;"	m	struct:ext3_iloc	typeref:struct:ext3_iloc::buffer_head
bh	fs/ext3/inode.c	/^	struct buffer_head *bh;$/;"	m	struct:__anon40	typeref:struct:__anon40::buffer_head	file:
bh	fs/ext3/namei.c	/^	struct buffer_head *bh;$/;"	m	struct:dx_frame	typeref:struct:dx_frame::buffer_head	file:
bh	fs/ext3/xattr.c	/^	struct buffer_head *bh;$/;"	m	struct:ext3_xattr_block_find	typeref:struct:ext3_xattr_block_find::buffer_head	file:
bh_accounting	fs/buffer.c	/^struct bh_accounting {$/;"	s	file:
bh_lru	fs/buffer.c	/^struct bh_lru {$/;"	s	file:
bh_lru_install	fs/buffer.c	/^static void bh_lru_install(struct buffer_head *bh)$/;"	f	file:
bh_lru_lock	fs/buffer.c	1226;"	d	file:
bh_lru_lock	fs/buffer.c	1229;"	d	file:
bh_lru_unlock	fs/buffer.c	1227;"	d	file:
bh_lru_unlock	fs/buffer.c	1230;"	d	file:
bh_submit_read	fs/buffer.c	/^EXPORT_SYMBOL(bh_submit_read);$/;"	v
bh_submit_read	fs/buffer.c	/^int bh_submit_read(struct buffer_head *bh)$/;"	f
bh_uptodate_or_lock	fs/buffer.c	/^EXPORT_SYMBOL(bh_uptodate_or_lock);$/;"	v
bh_uptodate_or_lock	fs/buffer.c	/^int bh_uptodate_or_lock(struct buffer_head *bh)$/;"	f
bhs	fs/buffer.c	/^	struct buffer_head *bhs[BH_LRU_SIZE];$/;"	m	struct:bh_lru	typeref:struct:bh_lru::buffer_head	file:
bin_bus_isa_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_bus_isa_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_bus_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_bus_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_convert_t	kernel/sysctl_binary.c	/^typedef ssize_t bin_convert_t(struct file *file,$/;"	t	file:
bin_dev_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_dev_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_dir	kernel/sysctl_binary.c	/^static bin_convert_t bin_dir;$/;"	v	file:
bin_dir	kernel/sysctl_binary.c	/^static ssize_t bin_dir(struct file *file,$/;"	f	file:
bin_dn_node_address	kernel/sysctl_binary.c	/^static bin_convert_t bin_dn_node_address;$/;"	v	file:
bin_dn_node_address	kernel/sysctl_binary.c	/^static ssize_t bin_dn_node_address(struct file *file,$/;"	f	file:
bin_fs_ocfs2_nm_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_ocfs2_nm_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_ocfs2_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_ocfs2_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_quota_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_quota_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_xfs_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_xfs_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_inotify_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_inotify_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_intvec	kernel/sysctl_binary.c	/^static bin_convert_t bin_intvec;$/;"	v	file:
bin_intvec	kernel/sysctl_binary.c	/^static ssize_t bin_intvec(struct file *file,$/;"	f	file:
bin_ipmi_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_ipmi_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_kern_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_kern_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_mac_hid_files	kernel/sysctl_binary.c	/^static const struct bin_table bin_mac_hid_files[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_atalk_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_atalk_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ax25_param_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ax25_param_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ax25_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ax25_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_core_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_core_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_decnet_conf	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_decnet_conf[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_decnet_conf_vars	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_decnet_conf_vars[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_decnet_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_decnet_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_conf_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_conf_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_conf_vars_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_conf_vars_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_netfilter_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_netfilter_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_route_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_route_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_conf_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_conf_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_conf_var_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_conf_var_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_icmp_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_icmp_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_route_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_route_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipx_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipx_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_irda_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_irda_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_llc2_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_llc2_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_llc2_timeout_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_llc2_timeout_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_station_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_station_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_neigh_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_neigh_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_neigh_vars_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_neigh_vars_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_netfilter_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_netfilter_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_netrom_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_netrom_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_rose_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_rose_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_sctp_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_sctp_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_tr_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_tr_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_unix_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_unix_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_x25_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_x25_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_pm_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_pm_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_pty_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_pty_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_raid_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_raid_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_random_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_random_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_root_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_root_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_s390dbf_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_s390dbf_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_scsi_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_scsi_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_string	kernel/sysctl_binary.c	/^static bin_convert_t bin_string;$/;"	v	file:
bin_string	kernel/sysctl_binary.c	/^static ssize_t bin_string(struct file *file,$/;"	f	file:
bin_sunrpc_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_sunrpc_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_table	kernel/sysctl_binary.c	/^struct bin_table {$/;"	s	file:
bin_ulongvec	kernel/sysctl_binary.c	/^static bin_convert_t bin_ulongvec;$/;"	v	file:
bin_ulongvec	kernel/sysctl_binary.c	/^static ssize_t bin_ulongvec(struct file *file,$/;"	f	file:
bin_uuid	kernel/sysctl_binary.c	/^static bin_convert_t bin_uuid;$/;"	v	file:
bin_uuid	kernel/sysctl_binary.c	/^static ssize_t bin_uuid(struct file *file,$/;"	f	file:
bin_vm_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_vm_table[] = {$/;"	v	typeref:struct:bin_table	file:
binary_sysctl	kernel/sysctl_binary.c	/^static ssize_t binary_sysctl(const int *name, int nlen,$/;"	f	file:
binfmt_misc_table	kernel/sysctl.c	/^static struct ctl_table binfmt_misc_table[] = {$/;"	v	typeref:struct:ctl_table	file:
bio	fs/direct-io.c	/^	struct bio *bio;		\/* bio under assembly *\/$/;"	m	struct:dio_submit	typeref:struct:dio_submit::bio	file:
bio	fs/mpage.c	/^	struct bio *bio;$/;"	m	struct:mpage_data	typeref:struct:mpage_data::bio	file:
bio_add_page	fs/bio.c	/^EXPORT_SYMBOL(bio_add_page);$/;"	v
bio_add_page	fs/bio.c	/^int bio_add_page(struct bio *bio, struct page *page, unsigned int len,$/;"	f
bio_add_pc_page	fs/bio.c	/^EXPORT_SYMBOL(bio_add_pc_page);$/;"	v
bio_add_pc_page	fs/bio.c	/^int bio_add_pc_page(struct request_queue *q, struct bio *bio, struct page *page,$/;"	f
bio_alloc_bioset	fs/bio.c	/^EXPORT_SYMBOL(bio_alloc_bioset);$/;"	v
bio_alloc_bioset	fs/bio.c	/^struct bio *bio_alloc_bioset(gfp_t gfp_mask, int nr_iovecs, struct bio_set *bs)$/;"	f
bio_alloc_map_data	fs/bio.c	/^static struct bio_map_data *bio_alloc_map_data(int nr_segs,$/;"	f	file:
bio_associate_current	fs/bio.c	/^int bio_associate_current(struct bio *bio)$/;"	f
bio_check_pages_dirty	fs/bio.c	/^void bio_check_pages_dirty(struct bio *bio)$/;"	f
bio_clone_bioset	fs/bio.c	/^EXPORT_SYMBOL(bio_clone_bioset);$/;"	v
bio_clone_bioset	fs/bio.c	/^struct bio *bio_clone_bioset(struct bio *bio, gfp_t gfp_mask,$/;"	f
bio_copy_kern	fs/bio.c	/^EXPORT_SYMBOL(bio_copy_kern);$/;"	v
bio_copy_kern	fs/bio.c	/^struct bio *bio_copy_kern(struct request_queue *q, void *data, unsigned int len,$/;"	f
bio_copy_kern_endio	fs/bio.c	/^static void bio_copy_kern_endio(struct bio *bio, int err)$/;"	f	file:
bio_copy_user	fs/bio.c	/^EXPORT_SYMBOL(bio_copy_user);$/;"	v
bio_copy_user	fs/bio.c	/^struct bio *bio_copy_user(struct request_queue *q, struct rq_map_data *map_data,$/;"	f
bio_copy_user_iov	fs/bio.c	/^struct bio *bio_copy_user_iov(struct request_queue *q,$/;"	f
bio_dirty_fn	fs/bio.c	/^static void bio_dirty_fn(struct work_struct *work)$/;"	f	file:
bio_dirty_list	fs/bio.c	/^static struct bio *bio_dirty_list;$/;"	v	typeref:struct:bio	file:
bio_disassociate_task	fs/bio.c	/^void bio_disassociate_task(struct bio *bio)$/;"	f
bio_endio	fs/bio.c	/^EXPORT_SYMBOL(bio_endio);$/;"	v
bio_endio	fs/bio.c	/^void bio_endio(struct bio *bio, int error)$/;"	f
bio_find_or_create_slab	fs/bio.c	/^static struct kmem_cache *bio_find_or_create_slab(unsigned int extra_size)$/;"	f	file:
bio_flush_dcache_pages	fs/bio.c	/^EXPORT_SYMBOL(bio_flush_dcache_pages);$/;"	v
bio_flush_dcache_pages	fs/bio.c	/^void bio_flush_dcache_pages(struct bio *bi)$/;"	f
bio_free	fs/bio.c	/^static void bio_free(struct bio *bio)$/;"	f	file:
bio_free_map_data	fs/bio.c	/^static void bio_free_map_data(struct bio_map_data *bmd)$/;"	f	file:
bio_get_nr_vecs	fs/bio.c	/^EXPORT_SYMBOL(bio_get_nr_vecs);$/;"	v
bio_get_nr_vecs	fs/bio.c	/^int bio_get_nr_vecs(struct block_device *bdev)$/;"	f
bio_init	fs/bio.c	/^EXPORT_SYMBOL(bio_init);$/;"	v
bio_init	fs/bio.c	/^void bio_init(struct bio *bio)$/;"	f
bio_integrity_add_page	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_add_page);$/;"	v
bio_integrity_add_page	fs/bio-integrity.c	/^int bio_integrity_add_page(struct bio *bio, struct page *page,$/;"	f
bio_integrity_advance	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_advance);$/;"	v
bio_integrity_advance	fs/bio-integrity.c	/^void bio_integrity_advance(struct bio *bio, unsigned int bytes_done)$/;"	f
bio_integrity_alloc	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_alloc);$/;"	v
bio_integrity_alloc	fs/bio-integrity.c	/^struct bio_integrity_payload *bio_integrity_alloc(struct bio *bio,$/;"	f
bio_integrity_clone	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_clone);$/;"	v
bio_integrity_clone	fs/bio-integrity.c	/^int bio_integrity_clone(struct bio *bio, struct bio *bio_src,$/;"	f
bio_integrity_enabled	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_enabled);$/;"	v
bio_integrity_enabled	fs/bio-integrity.c	/^int bio_integrity_enabled(struct bio *bio)$/;"	f
bio_integrity_endio	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_endio);$/;"	v
bio_integrity_endio	fs/bio-integrity.c	/^void bio_integrity_endio(struct bio *bio, int error)$/;"	f
bio_integrity_free	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_free);$/;"	v
bio_integrity_free	fs/bio-integrity.c	/^void bio_integrity_free(struct bio *bio)$/;"	f
bio_integrity_generate	fs/bio-integrity.c	/^static void bio_integrity_generate(struct bio *bio)$/;"	f	file:
bio_integrity_get_tag	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_get_tag);$/;"	v
bio_integrity_get_tag	fs/bio-integrity.c	/^int bio_integrity_get_tag(struct bio *bio, void *tag_buf, unsigned int len)$/;"	f
bio_integrity_hw_sectors	fs/bio-integrity.c	/^static inline unsigned int bio_integrity_hw_sectors(struct blk_integrity *bi,$/;"	f	file:
bio_integrity_init	fs/bio-integrity.c	/^void __init bio_integrity_init(void)$/;"	f
bio_integrity_mark_head	fs/bio-integrity.c	/^void bio_integrity_mark_head(struct bio_integrity_payload *bip,$/;"	f
bio_integrity_mark_tail	fs/bio-integrity.c	/^void bio_integrity_mark_tail(struct bio_integrity_payload *bip,$/;"	f
bio_integrity_prep	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_prep);$/;"	v
bio_integrity_prep	fs/bio-integrity.c	/^int bio_integrity_prep(struct bio *bio)$/;"	f
bio_integrity_set_tag	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_set_tag);$/;"	v
bio_integrity_set_tag	fs/bio-integrity.c	/^int bio_integrity_set_tag(struct bio *bio, void *tag_buf, unsigned int len)$/;"	f
bio_integrity_split	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_split);$/;"	v
bio_integrity_split	fs/bio-integrity.c	/^void bio_integrity_split(struct bio *bio, struct bio_pair *bp, int sectors)$/;"	f
bio_integrity_tag	fs/bio-integrity.c	/^int bio_integrity_tag(struct bio *bio, void *tag_buf, unsigned int len, int set)$/;"	f
bio_integrity_tag_size	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_tag_size);$/;"	v
bio_integrity_tag_size	fs/bio-integrity.c	/^unsigned int bio_integrity_tag_size(struct bio *bio)$/;"	f
bio_integrity_trim	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_trim);$/;"	v
bio_integrity_trim	fs/bio-integrity.c	/^void bio_integrity_trim(struct bio *bio, unsigned int offset,$/;"	f
bio_integrity_verify	fs/bio-integrity.c	/^static int bio_integrity_verify(struct bio *bio)$/;"	f	file:
bio_integrity_verify_fn	fs/bio-integrity.c	/^static void bio_integrity_verify_fn(struct work_struct *work)$/;"	f	file:
bio_list	fs/direct-io.c	/^	struct bio *bio_list;		\/* singly linked via bi_private *\/$/;"	m	struct:dio	typeref:struct:dio::bio	file:
bio_lock	fs/direct-io.c	/^	spinlock_t bio_lock;		\/* protects BIO fields below *\/$/;"	m	struct:dio	file:
bio_map_data	fs/bio.c	/^struct bio_map_data {$/;"	s	file:
bio_map_kern	fs/bio.c	/^EXPORT_SYMBOL(bio_map_kern);$/;"	v
bio_map_kern	fs/bio.c	/^struct bio *bio_map_kern(struct request_queue *q, void *data, unsigned int len,$/;"	f
bio_map_kern_endio	fs/bio.c	/^static void bio_map_kern_endio(struct bio *bio, int err)$/;"	f	file:
bio_map_user	fs/bio.c	/^EXPORT_SYMBOL(bio_map_user);$/;"	v
bio_map_user	fs/bio.c	/^struct bio *bio_map_user(struct request_queue *q, struct block_device *bdev,$/;"	f
bio_map_user_iov	fs/bio.c	/^struct bio *bio_map_user_iov(struct request_queue *q, struct block_device *bdev,$/;"	f
bio_pair_end_1	fs/bio.c	/^static void bio_pair_end_1(struct bio *bi, int err)$/;"	f	file:
bio_pair_end_2	fs/bio.c	/^static void bio_pair_end_2(struct bio *bi, int err)$/;"	f	file:
bio_pair_release	fs/bio.c	/^EXPORT_SYMBOL(bio_pair_release);$/;"	v
bio_pair_release	fs/bio.c	/^void bio_pair_release(struct bio_pair *bp)$/;"	f
bio_phys_segments	fs/bio.c	/^EXPORT_SYMBOL(bio_phys_segments);$/;"	v
bio_phys_segments	fs/bio.c	/^inline int bio_phys_segments(struct request_queue *q, struct bio *bio)$/;"	f
bio_put	fs/bio.c	/^EXPORT_SYMBOL(bio_put);$/;"	v
bio_put	fs/bio.c	/^void bio_put(struct bio *bio)$/;"	f
bio_put_slab	fs/bio.c	/^static void bio_put_slab(struct bio_set *bs)$/;"	f	file:
bio_release_pages	fs/bio.c	/^static void bio_release_pages(struct bio *bio)$/;"	f	file:
bio_reset	fs/bio.c	/^EXPORT_SYMBOL(bio_reset);$/;"	v
bio_reset	fs/bio.c	/^void bio_reset(struct bio *bio)$/;"	f
bio_sector_offset	fs/bio.c	/^EXPORT_SYMBOL(bio_sector_offset);$/;"	v
bio_sector_offset	fs/bio.c	/^sector_t bio_sector_offset(struct bio *bio, unsigned short index,$/;"	f
bio_set_map_data	fs/bio.c	/^static void bio_set_map_data(struct bio_map_data *bmd, struct bio *bio,$/;"	f	file:
bio_set_pages_dirty	fs/bio.c	/^void bio_set_pages_dirty(struct bio *bio)$/;"	f
bio_slab	fs/bio.c	/^struct bio_slab {$/;"	s	file:
bio_slab_max	fs/bio.c	/^static unsigned int bio_slab_nr, bio_slab_max;$/;"	v	file:
bio_slab_nr	fs/bio.c	/^static unsigned int bio_slab_nr, bio_slab_max;$/;"	v	file:
bio_slabs	fs/bio.c	/^static struct bio_slab *bio_slabs;$/;"	v	typeref:struct:bio_slab	file:
bio_split	fs/bio.c	/^EXPORT_SYMBOL(bio_split);$/;"	v
bio_split	fs/bio.c	/^struct bio_pair *bio_split(struct bio *bi, int first_sectors)$/;"	f
bio_uncopy_user	fs/bio.c	/^EXPORT_SYMBOL(bio_uncopy_user);$/;"	v
bio_uncopy_user	fs/bio.c	/^int bio_uncopy_user(struct bio *bio)$/;"	f
bio_unmap_user	fs/bio.c	/^EXPORT_SYMBOL(bio_unmap_user);$/;"	v
bio_unmap_user	fs/bio.c	/^void bio_unmap_user(struct bio *bio)$/;"	f
bioset_create	fs/bio.c	/^EXPORT_SYMBOL(bioset_create);$/;"	v
bioset_create	fs/bio.c	/^struct bio_set *bioset_create(unsigned int pool_size, unsigned int front_pad)$/;"	f
bioset_free	fs/bio.c	/^EXPORT_SYMBOL(bioset_free);$/;"	v
bioset_free	fs/bio.c	/^void bioset_free(struct bio_set *bs)$/;"	f
bioset_integrity_create	fs/bio-integrity.c	/^EXPORT_SYMBOL(bioset_integrity_create);$/;"	v
bioset_integrity_create	fs/bio-integrity.c	/^int bioset_integrity_create(struct bio_set *bs, int pool_size)$/;"	f
bioset_integrity_free	fs/bio-integrity.c	/^EXPORT_SYMBOL(bioset_integrity_free);$/;"	v
bioset_integrity_free	fs/bio-integrity.c	/^void bioset_integrity_free(struct bio_set *bs)$/;"	f
biovec_create_pools	fs/bio.c	/^static int biovec_create_pools(struct bio_set *bs, int pool_entries)$/;"	f	file:
biovec_free_pools	fs/bio.c	/^static void biovec_free_pools(struct bio_set *bs)$/;"	f	file:
biovec_init_slabs	fs/bio.c	/^static void __init biovec_init_slabs(void)$/;"	f	file:
bit	kernel/panic.c	/^	u8	bit;$/;"	m	struct:tnt	file:
bit_waitqueue	kernel/wait.c	/^EXPORT_SYMBOL(bit_waitqueue);$/;"	v
bit_waitqueue	kernel/wait.c	/^wait_queue_head_t *bit_waitqueue(void *word, int bit)$/;"	f
bitmap_search_next_usable_block	fs/ext3/balloc.c	/^bitmap_search_next_usable_block(ext3_grpblk_t start, struct buffer_head *bh,$/;"	f	file:
bitset	kernel/futex.c	/^	u32 bitset;$/;"	m	struct:futex_q	file:
blimit	kernel/rcutree.c	/^static long blimit = 10;	\/* Maximum callbacks per rcu_do_batch. *\/$/;"	v	file:
blimit	kernel/rcutree.h	/^	long		blimit;		\/* Upper limit on a processed batch *\/$/;"	m	struct:rcu_data
blk_integrity_tuple_size	fs/bio-integrity.c	/^static inline unsigned short blk_integrity_tuple_size(struct blk_integrity *bi)$/;"	f	file:
blk_queue_bounce	mm/bounce.c	/^EXPORT_SYMBOL(blk_queue_bounce);$/;"	v
blk_queue_bounce	mm/bounce.c	/^void blk_queue_bounce(struct request_queue *q, struct bio **bio_orig)$/;"	f
blk_to_logical	fs/ioctl.c	/^static inline loff_t blk_to_logical(struct inode *inode, sector_t blk)$/;"	f	file:
blkbits	fs/direct-io.c	/^	unsigned blkbits;		\/* doesn't change *\/$/;"	m	struct:dio_submit	file:
blkd_tasks	kernel/rcutiny_plugin.h	/^	struct list_head blkd_tasks;$/;"	m	struct:rcu_preempt_ctrlblk	typeref:struct:rcu_preempt_ctrlblk::list_head
blkd_tasks	kernel/rcutree.h	/^	struct list_head blkd_tasks;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::list_head
blkdev_aio_read	fs/block_dev.c	/^static ssize_t blkdev_aio_read(struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
blkdev_aio_write	fs/block_dev.c	/^EXPORT_SYMBOL_GPL(blkdev_aio_write);$/;"	v
blkdev_aio_write	fs/block_dev.c	/^ssize_t blkdev_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
blkdev_close	fs/block_dev.c	/^static int blkdev_close(struct inode * inode, struct file * filp)$/;"	f	file:
blkdev_direct_IO	fs/block_dev.c	/^blkdev_direct_IO(int rw, struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
blkdev_fsync	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_fsync);$/;"	v
blkdev_fsync	fs/block_dev.c	/^int blkdev_fsync(struct file *filp, loff_t start, loff_t end, int datasync)$/;"	f
blkdev_get	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_get);$/;"	v
blkdev_get	fs/block_dev.c	/^int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)$/;"	f
blkdev_get_block	fs/block_dev.c	/^blkdev_get_block(struct inode *inode, sector_t iblock,$/;"	f	file:
blkdev_get_by_dev	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_get_by_dev);$/;"	v
blkdev_get_by_dev	fs/block_dev.c	/^struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode, void *holder)$/;"	f
blkdev_get_by_path	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_get_by_path);$/;"	v
blkdev_get_by_path	fs/block_dev.c	/^struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,$/;"	f
blkdev_max_block	fs/buffer.c	/^static sector_t blkdev_max_block(struct block_device *bdev, unsigned int size)$/;"	f	file:
blkdev_open	fs/block_dev.c	/^static int blkdev_open(struct inode * inode, struct file * filp)$/;"	f	file:
blkdev_put	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_put);$/;"	v
blkdev_put	fs/block_dev.c	/^int blkdev_put(struct block_device *bdev, fmode_t mode)$/;"	f
blkdev_readpage	fs/block_dev.c	/^static int blkdev_readpage(struct file * file, struct page * page)$/;"	f	file:
blkdev_releasepage	fs/block_dev.c	/^static int blkdev_releasepage(struct page *page, gfp_t wait)$/;"	f	file:
blkdev_write_begin	fs/block_dev.c	/^static int blkdev_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
blkdev_write_end	fs/block_dev.c	/^static int blkdev_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
blkdev_writepage	fs/block_dev.c	/^static int blkdev_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
blkfactor	fs/direct-io.c	/^	unsigned blkfactor;		\/* When we're using an alignment which$/;"	m	struct:dio_submit	file:
block	fs/ext3/namei.c	/^	__le32 block;$/;"	m	struct:dx_entry	file:
block_all_signals	kernel/signal.c	/^EXPORT_SYMBOL(block_all_signals);$/;"	v
block_all_signals	kernel/signal.c	/^block_all_signals(int (*notifier)(void *priv), void *priv, sigset_t *mask)$/;"	f
block_bitmap	fs/ext3/ext3.h	/^	__u32 block_bitmap;     \/* Absolute block number of block bitmap *\/$/;"	m	struct:ext3_new_group_input
block_bitmap	fs/ext3/ext3.h	/^	__u32 block_bitmap;$/;"	m	struct:ext3_new_group_data
block_commit_write	fs/buffer.c	/^EXPORT_SYMBOL(block_commit_write);$/;"	v
block_commit_write	fs/buffer.c	/^int block_commit_write(struct page *page, unsigned from, unsigned to)$/;"	f
block_dump	mm/page-writeback.c	/^int block_dump;$/;"	v
block_dump___mark_inode_dirty	fs/fs-writeback.c	/^static noinline void block_dump___mark_inode_dirty(struct inode *inode)$/;"	f	file:
block_group	fs/ext3/ext3.h	/^	unsigned long block_group;$/;"	m	struct:ext3_iloc
block_in_file	fs/direct-io.c	/^	sector_t block_in_file;		\/* Current offset into the underlying$/;"	m	struct:dio_submit	file:
block_invalidatepage	fs/buffer.c	/^EXPORT_SYMBOL(block_invalidatepage);$/;"	v
block_invalidatepage	fs/buffer.c	/^void block_invalidatepage(struct page *page, unsigned long offset)$/;"	f
block_ioctl	fs/block_dev.c	/^static long block_ioctl(struct file *file, unsigned cmd, unsigned long arg)$/;"	f	file:
block_is_partially_uptodate	fs/buffer.c	/^EXPORT_SYMBOL(block_is_partially_uptodate);$/;"	v
block_is_partially_uptodate	fs/buffer.c	/^int block_is_partially_uptodate(struct page *page, read_descriptor_t *desc,$/;"	f
block_llseek	fs/block_dev.c	/^static loff_t block_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
block_page_mkwrite	fs/buffer.c	/^EXPORT_SYMBOL(block_page_mkwrite);$/;"	v
block_page_mkwrite	fs/buffer.c	/^int block_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf,$/;"	f
block_read_full_page	fs/buffer.c	/^EXPORT_SYMBOL(block_read_full_page);$/;"	v
block_read_full_page	fs/buffer.c	/^int block_read_full_page(struct page *page, get_block_t *get_block)$/;"	f
block_size_bits	fs/buffer.c	/^static inline int block_size_bits(unsigned int blocksize)$/;"	f	file:
block_truncate_page	fs/buffer.c	/^EXPORT_SYMBOL(block_truncate_page);$/;"	v
block_truncate_page	fs/buffer.c	/^int block_truncate_page(struct address_space *mapping,$/;"	f
block_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(block_write_begin);$/;"	v
block_write_begin	fs/buffer.c	/^int block_write_begin(struct address_space *mapping, loff_t pos, unsigned len,$/;"	f
block_write_end	fs/buffer.c	/^EXPORT_SYMBOL(block_write_end);$/;"	v
block_write_end	fs/buffer.c	/^int block_write_end(struct file *file, struct address_space *mapping,$/;"	f
block_write_full_page	fs/buffer.c	/^EXPORT_SYMBOL(block_write_full_page);$/;"	v
block_write_full_page	fs/buffer.c	/^int block_write_full_page(struct page *page, get_block_t *get_block,$/;"	f
block_write_full_page_endio	fs/buffer.c	/^EXPORT_SYMBOL(block_write_full_page_endio);$/;"	v
block_write_full_page_endio	fs/buffer.c	/^int block_write_full_page_endio(struct page *page, get_block_t *get_block,$/;"	f
blocking_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_call_chain);$/;"	v
blocking_notifier_call_chain	kernel/notifier.c	/^int blocking_notifier_call_chain(struct blocking_notifier_head *nh,$/;"	f
blocking_notifier_chain_cond_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_chain_cond_register);$/;"	v
blocking_notifier_chain_cond_register	kernel/notifier.c	/^int blocking_notifier_chain_cond_register(struct blocking_notifier_head *nh,$/;"	f
blocking_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_chain_register);$/;"	v
blocking_notifier_chain_register	kernel/notifier.c	/^int blocking_notifier_chain_register(struct blocking_notifier_head *nh,$/;"	f
blocking_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_chain_unregister);$/;"	v
blocking_notifier_chain_unregister	kernel/notifier.c	/^int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,$/;"	f
blocks_available	fs/direct-io.c	/^	unsigned blocks_available;	\/* At block_in_file.  changes *\/$/;"	m	struct:dio_submit	file:
blocks_count	fs/ext3/ext3.h	/^	__u32 blocks_count;     \/* Total number of blocks in this group *\/$/;"	m	struct:ext3_new_group_input
blocks_count	fs/ext3/ext3.h	/^	__u32 blocks_count;$/;"	m	struct:ext3_new_group_data
blocks_for_truncate	fs/ext3/inode.c	/^static unsigned long blocks_for_truncate(struct inode *inode)$/;"	f	file:
bm_entry_operations	fs/binfmt_misc.c	/^static const struct file_operations bm_entry_operations = {$/;"	v	typeref:struct:file_operations	file:
bm_entry_read	fs/binfmt_misc.c	/^bm_entry_read(struct file * file, char __user * buf, size_t nbytes, loff_t *ppos)$/;"	f	file:
bm_entry_write	fs/binfmt_misc.c	/^static ssize_t bm_entry_write(struct file *file, const char __user *buffer,$/;"	f	file:
bm_evict_inode	fs/binfmt_misc.c	/^static void bm_evict_inode(struct inode *inode)$/;"	f	file:
bm_fill_super	fs/binfmt_misc.c	/^static int bm_fill_super(struct super_block * sb, void * data, int silent)$/;"	f	file:
bm_fs_type	fs/binfmt_misc.c	/^static struct file_system_type bm_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
bm_fs_type	fs/binfmt_misc.c	/^static struct file_system_type bm_fs_type;$/;"	v	typeref:struct:file_system_type	file:
bm_get_inode	fs/binfmt_misc.c	/^static struct inode *bm_get_inode(struct super_block *sb, int mode)$/;"	f	file:
bm_mnt	fs/binfmt_misc.c	/^static struct vfsmount *bm_mnt;$/;"	v	typeref:struct:vfsmount	file:
bm_mount	fs/binfmt_misc.c	/^static struct dentry *bm_mount(struct file_system_type *fs_type,$/;"	f	file:
bm_register_operations	fs/binfmt_misc.c	/^static const struct file_operations bm_register_operations = {$/;"	v	typeref:struct:file_operations	file:
bm_register_write	fs/binfmt_misc.c	/^static ssize_t bm_register_write(struct file *file, const char __user *buffer,$/;"	f	file:
bm_status_operations	fs/binfmt_misc.c	/^static const struct file_operations bm_status_operations = {$/;"	v	typeref:struct:file_operations	file:
bm_status_read	fs/binfmt_misc.c	/^bm_status_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)$/;"	f	file:
bm_status_write	fs/binfmt_misc.c	/^static ssize_t bm_status_write(struct file * file, const char __user * buffer,$/;"	f	file:
bmap	fs/inode.c	/^EXPORT_SYMBOL(bmap);$/;"	v
bmap	fs/inode.c	/^sector_t bmap(struct inode *inode, sector_t block)$/;"	f
boost	kernel/rcutree.h	/^	u8	boost;				\/* Subject to priority boost. *\/$/;"	m	struct:rcu_state
boost_kthread_status	kernel/rcutree.h	/^	unsigned int boost_kthread_status;$/;"	m	struct:rcu_node
boost_kthread_task	kernel/rcutree.h	/^	struct task_struct *boost_kthread_task;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::task_struct
boost_mutex	kernel/rcutorture.c	/^DEFINE_MUTEX(boost_mutex);		\/* protect setting boost_starttime *\/$/;"	v
boost_starttime	kernel/rcutorture.c	/^static unsigned long boost_starttime;	\/* jiffies of next boost test start. *\/$/;"	v	file:
boost_tasks	kernel/rcutiny_plugin.h	/^	struct list_head *boost_tasks;$/;"	m	struct:rcu_preempt_ctrlblk	typeref:struct:rcu_preempt_ctrlblk::list_head
boost_tasks	kernel/rcutorture.c	/^static struct task_struct *boost_tasks[NR_CPUS];$/;"	v	typeref:struct:task_struct	file:
boost_tasks	kernel/rcutree.h	/^	struct list_head *boost_tasks;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::list_head
boost_time	kernel/rcutiny_plugin.h	/^	unsigned long boost_time; \/* When to start boosting (jiffies) *\/$/;"	m	struct:rcu_preempt_ctrlblk
boost_time	kernel/rcutree.h	/^	unsigned long boost_time;$/;"	m	struct:rcu_node
boot_delay	kernel/printk.c	/^static int boot_delay; \/* msecs delay after each printk during bootup *\/$/;"	v	file:
boot_delay_msec	kernel/printk.c	/^static inline void boot_delay_msec(int level)$/;"	f	file:
boot_delay_msec	kernel/printk.c	/^static void boot_delay_msec(int level)$/;"	f	file:
boot_delay_setup	kernel/printk.c	/^static int __init boot_delay_setup(char *str)$/;"	f	file:
boot_tvec_bases	kernel/timer.c	/^EXPORT_SYMBOL(boot_tvec_bases);$/;"	v
boot_tvec_bases	kernel/timer.c	/^struct tvec_base boot_tvec_bases;$/;"	v	typeref:struct:tvec_base
bootmap_bytes	mm/bootmem.c	/^static unsigned long __init bootmap_bytes(unsigned long pages)$/;"	f	file:
bootmem_bootmap_pages	mm/bootmem.c	/^unsigned long __init bootmem_bootmap_pages(unsigned long pages)$/;"	f
bootmem_debug	mm/bootmem.c	/^static int bootmem_debug;$/;"	v	file:
bootmem_debug_setup	mm/bootmem.c	/^static int __init bootmem_debug_setup(char *buf)$/;"	f	file:
bootstrap	mm/slub.c	/^static struct kmem_cache * __init bootstrap(struct kmem_cache *static_cache)$/;"	f	file:
bounce_copy_vec	mm/bounce.c	/^static void bounce_copy_vec(struct bio_vec *to, unsigned char *vfrom)$/;"	f	file:
bounce_copy_vec	mm/bounce.c	63;"	d	file:
bounce_end_io	mm/bounce.c	/^static void bounce_end_io(struct bio *bio, mempool_t *pool, int err)$/;"	f	file:
bounce_end_io_read	mm/bounce.c	/^static void bounce_end_io_read(struct bio *bio, int err)$/;"	f	file:
bounce_end_io_read_isa	mm/bounce.c	/^static void bounce_end_io_read_isa(struct bio *bio, int err)$/;"	f	file:
bounce_end_io_write	mm/bounce.c	/^static void bounce_end_io_write(struct bio *bio, int err)$/;"	f	file:
bounce_end_io_write_isa	mm/bounce.c	/^static void bounce_end_io_write_isa(struct bio *bio, int err)$/;"	f	file:
boundary	fs/direct-io.c	/^	int boundary;			\/* prev block is at a boundary *\/$/;"	m	struct:dio_submit	file:
boundary	mm/dmapool.c	/^	size_t boundary;$/;"	m	struct:dma_pool	file:
bprm_change_interp	fs/exec.c	/^EXPORT_SYMBOL(bprm_change_interp);$/;"	v
bprm_change_interp	fs/exec.c	/^int bprm_change_interp(char *interp, struct linux_binprm *bprm)$/;"	f
bprm_mm_init	fs/exec.c	/^static int bprm_mm_init(struct linux_binprm *bprm)$/;"	f	file:
bput_one	fs/ext3/inode.c	/^static int bput_one(handle_t *handle, struct buffer_head *bh)$/;"	f	file:
break_cow	mm/ksm.c	/^static void break_cow(struct rmap_item *rmap_item)$/;"	f	file:
break_ksm	mm/ksm.c	/^static int break_ksm(struct vm_area_struct *vma, unsigned long addr)$/;"	f	file:
brl_options	kernel/printk.c	/^	char	*brl_options;			\/* Options for braille driver *\/$/;"	m	struct:console_cmdline	file:
browse_rb	mm/mmap.c	/^static int browse_rb(struct rb_root *root)$/;"	f	file:
bsd_acct_struct	kernel/acct.c	/^struct bsd_acct_struct {$/;"	s	file:
buf	fs/compat_ioctl.c	/^	compat_caddr_t buf;$/;"	m	struct:i2c_msg32	file:
buf	kernel/printk.c	/^	char buf[8192];$/;"	m	struct:devkmsg_user	file:
buf	kernel/printk.c	/^	char buf[LOG_LINE_MAX];$/;"	m	struct:cont	file:
buf	kernel/relay.c	/^	struct rchan_buf *buf;$/;"	m	struct:rchan_percpu_buf_dispatcher	typeref:struct:rchan_percpu_buf_dispatcher::rchan_buf	file:
buf_mapped_default_callback	kernel/relay.c	/^static void buf_mapped_default_callback(struct rchan_buf *buf,$/;"	f	file:
buf_unmapped_default_callback	kernel/relay.c	/^static void buf_unmapped_default_callback(struct rchan_buf *buf,$/;"	f	file:
buffer_busy	fs/buffer.c	/^static inline int buffer_busy(struct buffer_head *bh)$/;"	f	file:
buffer_cpu_notify	fs/buffer.c	/^static int buffer_cpu_notify(struct notifier_block *self,$/;"	f	file:
buffer_exit_cpu	fs/buffer.c	/^static void buffer_exit_cpu(int cpu)$/;"	f	file:
buffer_heads_over_limit	fs/buffer.c	/^int buffer_heads_over_limit;$/;"	v
buffer_init	fs/buffer.c	/^void __init buffer_init(void)$/;"	f
buffer_io_error	fs/buffer.c	/^static void buffer_io_error(struct buffer_head *bh)$/;"	f	file:
buffer_migrate_lock_buffers	mm/migrate.c	/^static bool buffer_migrate_lock_buffers(struct buffer_head *head,$/;"	f	file:
buffer_migrate_lock_buffers	mm/migrate.c	/^static inline bool buffer_migrate_lock_buffers(struct buffer_head *head,$/;"	f	file:
buffer_migrate_page	mm/migrate.c	/^EXPORT_SYMBOL(buffer_migrate_page);$/;"	v
buffer_migrate_page	mm/migrate.c	/^int buffer_migrate_page(struct address_space *mapping,$/;"	f
buffer_unmapped	fs/ext3/inode.c	/^static int buffer_unmapped(handle_t *handle, struct buffer_head *bh)$/;"	f	file:
buffered_rmqueue	mm/page_alloc.c	/^struct page *buffered_rmqueue(struct zone *preferred_zone,$/;"	f	file:
bufferram	kernel/compat.c	/^	u32 bufferram;$/;"	m	struct:compat_sysinfo	file:
build_all_zonelists	mm/page_alloc.c	/^void __ref build_all_zonelists(pg_data_t *pgdat, struct zone *zone)$/;"	f
build_date	fs/binfmt_flat.c	/^		unsigned long build_date;		\/* When this one was compiled *\/$/;"	m	struct:lib_info::__anon22	file:
build_open_flags	fs/open.c	/^static inline int build_open_flags(int flags, umode_t mode, struct open_flags *op)$/;"	f	file:
build_thisnode_zonelists	mm/page_alloc.c	/^static void build_thisnode_zonelists(pg_data_t *pgdat)$/;"	f	file:
build_zonelist_cache	mm/page_alloc.c	/^static void build_zonelist_cache(pg_data_t *pgdat)$/;"	f	file:
build_zonelists	mm/page_alloc.c	/^static void build_zonelists(pg_data_t *pgdat)$/;"	f	file:
build_zonelists_in_node_order	mm/page_alloc.c	/^static void build_zonelists_in_node_order(pg_data_t *pgdat, int node)$/;"	f	file:
build_zonelists_in_zone_order	mm/page_alloc.c	/^static void build_zonelists_in_zone_order(pg_data_t *pgdat, int nr_nodes)$/;"	f	file:
build_zonelists_node	mm/page_alloc.c	/^static int build_zonelists_node(pg_data_t *pgdat, struct zonelist *zonelist,$/;"	f	file:
bump_cpu_timer	kernel/posix-cpu-timers.c	/^static void bump_cpu_timer(struct k_itimer *timer,$/;"	f	file:
busy_worker_rebind_fn	kernel/workqueue.c	/^static void busy_worker_rebind_fn(struct work_struct *work)$/;"	f	file:
bvec_alloc_bs	fs/bio.c	/^struct bio_vec *bvec_alloc_bs(gfp_t gfp_mask, int nr, unsigned long *idx,$/;"	f
bvec_free_bs	fs/bio.c	/^void bvec_free_bs(struct bio_set *bs, struct bio_vec *bv, unsigned int idx)$/;"	f
bvec_nr_vecs	fs/bio.c	/^unsigned int bvec_nr_vecs(unsigned short idx)$/;"	f
c	kernel/auditsc.c	/^	struct audit_chunk *c[31];$/;"	m	struct:audit_tree_refs	typeref:struct:audit_tree_refs::audit_chunk	file:
cache	mm/slab.c	/^	struct array_cache cache;$/;"	m	struct:arraycache_init	typeref:struct:arraycache_init::array_cache	file:
cache_alloc_debugcheck_after	mm/slab.c	/^static void *cache_alloc_debugcheck_after(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_debugcheck_after	mm/slab.c	3240;"	d	file:
cache_alloc_debugcheck_before	mm/slab.c	/^static inline void cache_alloc_debugcheck_before(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_refill	mm/slab.c	/^static void *cache_alloc_refill(struct kmem_cache *cachep, gfp_t flags,$/;"	f	file:
cache_dma	mm/slub.c	/^SLAB_ATTR_RO(cache_dma);$/;"	v
cache_dma_show	mm/slub.c	/^static ssize_t cache_dma_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cache_estimate	mm/slab.c	/^static void cache_estimate(unsigned long gfporder, size_t buffer_size,$/;"	f	file:
cache_filter	mm/failslab.c	/^	int cache_filter;$/;"	m	struct:__anon2	file:
cache_flusharray	mm/slab.c	/^static void cache_flusharray(struct kmem_cache *cachep, struct array_cache *ac)$/;"	f	file:
cache_free_alien	mm/slab.c	/^static inline int cache_free_alien(struct kmem_cache *cachep, void *objp)$/;"	f	file:
cache_free_debugcheck	mm/slab.c	/^static void *cache_free_debugcheck(struct kmem_cache *cachep, void *objp,$/;"	f	file:
cache_free_debugcheck	mm/slab.c	3071;"	d	file:
cache_from_memcg	mm/slab.h	/^static inline struct kmem_cache *cache_from_memcg(struct kmem_cache *s, int idx)$/;"	f
cache_from_obj	mm/slab.h	/^static inline struct kmem_cache *cache_from_obj(struct kmem_cache *s, void *x)$/;"	f
cache_grow	mm/slab.c	/^static int cache_grow(struct kmem_cache *cachep,$/;"	f	file:
cache_init_objs	mm/slab.c	/^static void cache_init_objs(struct kmem_cache *cachep,$/;"	f	file:
cache_match_memcg	mm/slab.h	/^static inline bool cache_match_memcg(struct kmem_cache *cachep,$/;"	f
cache_name	mm/slab.h	/^static inline const char *cache_name(struct kmem_cache *s)$/;"	f
cache_names	mm/slab.c	/^static struct cache_names __initdata cache_names[] = {$/;"	v	typeref:struct:__initdata	file:
cache_names	mm/slab.c	/^struct cache_names {$/;"	s	file:
cache_order	mm/slab.h	/^	unsigned int cache_order;$/;"	m	struct:slabinfo
cache_reap	mm/slab.c	/^static void cache_reap(struct work_struct *w)$/;"	f	file:
cache_show	mm/slab_common.c	/^int cache_show(struct kmem_cache *s, struct seq_file *m)$/;"	f
cached	mm/memcontrol.c	/^	struct mem_cgroup *cached; \/* this never be root cgroup *\/$/;"	m	struct:memcg_stock_pcp	typeref:struct:memcg_stock_pcp::mem_cgroup	file:
cached_align	mm/vmalloc.c	/^static unsigned long cached_align;$/;"	v	file:
cached_hole_size	mm/vmalloc.c	/^static unsigned long cached_hole_size;$/;"	v	file:
cached_vstart	mm/vmalloc.c	/^static unsigned long cached_vstart;$/;"	v	file:
cachep	kernel/pid_namespace.c	/^	struct kmem_cache *cachep;$/;"	m	struct:pid_cache	typeref:struct:pid_cache::kmem_cache	file:
cachep	mm/memcontrol.c	/^	struct kmem_cache *cachep;$/;"	m	struct:create_work	typeref:struct:create_work::kmem_cache	file:
cachep	mm/slab.c	/^	struct kmem_cache *cachep;$/;"	m	struct:ccupdate_struct	typeref:struct:ccupdate_struct::kmem_cache	file:
cachep	mm/slab.c	/^	struct kmem_cache *cachep;$/;"	m	struct:slab_rcu	typeref:struct:slab_rcu::kmem_cache	file:
cad_pid	kernel/sys.c	/^EXPORT_SYMBOL(cad_pid);$/;"	v
cad_pid	kernel/sys.c	/^struct pid *cad_pid;$/;"	v	typeref:struct:pid
calc_checksum	mm/ksm.c	/^static u32 calc_checksum(struct page *page)$/;"	f	file:
calc_memmap_size	mm/page_alloc.c	/^static unsigned long __paginginit calc_memmap_size(unsigned long spanned_pages,$/;"	f	file:
calc_reloc	fs/binfmt_flat.c	/^calc_reloc(unsigned long r, struct lib_info *p, int curid, int internalp)$/;"	f	file:
calculate_alignment	mm/slab_common.c	/^unsigned long calculate_alignment(unsigned long flags,$/;"	f
calculate_f_flags	fs/statfs.c	/^static int calculate_f_flags(struct vfsmount *mnt)$/;"	f	file:
calculate_node_totalpages	mm/page_alloc.c	/^static void __meminit calculate_node_totalpages(struct pglist_data *pgdat,$/;"	f	file:
calculate_normal_threshold	mm/vmstat.c	/^int calculate_normal_threshold(struct zone *zone)$/;"	f
calculate_order	mm/slub.c	/^static inline int calculate_order(int size, int reserved)$/;"	f	file:
calculate_pressure_threshold	mm/vmstat.c	/^int calculate_pressure_threshold(struct zone *zone)$/;"	f
calculate_sizes	mm/slub.c	/^static int calculate_sizes(struct kmem_cache *s, int forced_order)$/;"	f	file:
calculate_slab_order	mm/slab.c	/^static size_t calculate_slab_order(struct kmem_cache *cachep,$/;"	f	file:
calculate_totalreserve_pages	mm/page_alloc.c	/^static void calculate_totalreserve_pages(void)$/;"	f	file:
calculate_zone_inactive_ratio	mm/page_alloc.c	/^static void __meminit calculate_zone_inactive_ratio(struct zone *zone)$/;"	f	file:
call	kernel/rcutorture.c	/^	void (*call)(struct rcu_head *head, void (*func)(struct rcu_head *rcu));$/;"	m	struct:rcu_torture_ops	file:
call	kernel/rcutree.h	/^	void (*call)(struct rcu_head *head,	\/* call_rcu() flavor. *\/$/;"	m	struct:rcu_state
call_console_drivers	kernel/printk.c	/^static void call_console_drivers(int level, const char *text, size_t len) {}$/;"	f	file:
call_console_drivers	kernel/printk.c	/^static void call_console_drivers(int level, const char *text, size_t len)$/;"	f	file:
call_count	fs/coredump.c	/^static atomic_t call_count = ATOMIC_INIT(1);$/;"	v	file:
call_filldir	fs/ext3/dir.c	/^static int call_filldir(struct file * filp, void * dirent,$/;"	f	file:
call_function_data	kernel/smp.c	/^struct call_function_data {$/;"	s	file:
call_function_init	kernel/smp.c	/^void __init call_function_init(void)$/;"	f
call_helper	kernel/kmod.c	/^static int call_helper(void *data)$/;"	f	file:
call_modprobe	kernel/kmod.c	/^static int call_modprobe(char *module_name, int wait)$/;"	f	file:
call_rcu	kernel/rcutiny_plugin.h	/^EXPORT_SYMBOL_GPL(call_rcu);$/;"	v
call_rcu	kernel/rcutiny_plugin.h	/^void call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(call_rcu);$/;"	v
call_rcu	kernel/rcutree_plugin.h	/^void call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_bh	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(call_rcu_bh);$/;"	v
call_rcu_bh	kernel/rcutiny.c	/^void call_rcu_bh(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(call_rcu_bh);$/;"	v
call_rcu_bh	kernel/rcutree.c	/^void call_rcu_bh(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_bh_remote	kernel/rcutree_plugin.h	/^static void call_rcu_bh_remote(struct rcu_head *rhp,$/;"	f
call_rcu_local	kernel/rcutree_plugin.h	/^static void call_rcu_local(void *arg)$/;"	f
call_rcu_preempt_remote	kernel/rcutree_plugin.h	/^call_rcu_preempt_remote(struct rcu_head *rhp,$/;"	f
call_rcu_sched	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(call_rcu_sched);$/;"	v
call_rcu_sched	kernel/rcutiny.c	/^void call_rcu_sched(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(call_rcu_sched);$/;"	v
call_rcu_sched	kernel/rcutree.c	/^void call_rcu_sched(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_sched_remote	kernel/rcutree_plugin.h	/^static void call_rcu_sched_remote(struct rcu_head *rhp,$/;"	f
call_remote	kernel/rcutree.h	/^	void (*call_remote)(struct rcu_head *head,$/;"	m	struct:rcu_state
call_single_queue	kernel/smp.c	/^struct call_single_queue {$/;"	s	file:
call_srcu	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(call_srcu);$/;"	v
call_srcu	kernel/srcu.c	/^void call_srcu(struct srcu_struct *sp, struct rcu_head *head,$/;"	f
call_timer_fn	kernel/timer.c	/^static void call_timer_fn(struct timer_list *timer, void (*fn)(unsigned long),$/;"	f	file:
call_usermodehelper_exec	kernel/kmod.c	/^int call_usermodehelper_exec(struct subprocess_info *sub_info, int wait)$/;"	f	file:
call_usermodehelper_fns	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_fns);$/;"	v
call_usermodehelper_fns	kernel/kmod.c	/^int call_usermodehelper_fns($/;"	f
call_usermodehelper_freeinfo	kernel/kmod.c	/^static void call_usermodehelper_freeinfo(struct subprocess_info *info)$/;"	f	file:
call_usermodehelper_setfns	kernel/kmod.c	/^void call_usermodehelper_setfns(struct subprocess_info *info,$/;"	f	file:
call_usermodehelper_setup	kernel/kmod.c	/^struct subprocess_info *call_usermodehelper_setup(char *path, char **argv,$/;"	f	file:
can_boost	kernel/rcutorture.c	/^	int can_boost;$/;"	m	struct:rcu_torture_ops	file:
can_do_mlock	mm/mlock.c	/^EXPORT_SYMBOL(can_do_mlock);$/;"	v
can_do_mlock	mm/mlock.c	/^int can_do_mlock(void)$/;"	f
can_lookup	fs/namei.c	/^static inline int can_lookup(struct inode *inode)$/;"	f	file:
can_offline_normal	mm/memory_hotplug.c	/^static bool can_offline_normal(struct zone *zone, unsigned long nr_pages)$/;"	f	file:
can_online_high_movable	mm/memory_hotplug.c	/^static bool can_online_high_movable(struct zone *zone)$/;"	f	file:
can_unuse	fs/inode.c	/^static int can_unuse(struct inode *inode)$/;"	f	file:
can_use_console	kernel/printk.c	/^static inline int can_use_console(unsigned int cpu)$/;"	f	file:
can_vma_merge_after	mm/mmap.c	/^can_vma_merge_after(struct vm_area_struct *vma, unsigned long vm_flags,$/;"	f	file:
can_vma_merge_before	mm/mmap.c	/^can_vma_merge_before(struct vm_area_struct *vma, unsigned long vm_flags,$/;"	f	file:
cancel_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL(cancel_delayed_work);$/;"	v
cancel_delayed_work	kernel/workqueue.c	/^bool cancel_delayed_work(struct delayed_work *dwork)$/;"	f
cancel_delayed_work_sync	kernel/workqueue.c	/^EXPORT_SYMBOL(cancel_delayed_work_sync);$/;"	v
cancel_delayed_work_sync	kernel/workqueue.c	/^bool cancel_delayed_work_sync(struct delayed_work *dwork)$/;"	f
cancel_dirty_page	mm/truncate.c	/^EXPORT_SYMBOL(cancel_dirty_page);$/;"	v
cancel_dirty_page	mm/truncate.c	/^void cancel_dirty_page(struct page *page, unsigned int account_size)$/;"	f
cancel_work_sync	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(cancel_work_sync);$/;"	v
cancel_work_sync	kernel/workqueue.c	/^bool cancel_work_sync(struct work_struct *work)$/;"	f
cap	kernel/auditsc.c	/^			struct audit_cap_data	cap;$/;"	m	struct:audit_context::__anon43::__anon50	typeref:struct:audit_context::__anon43::__anon50::audit_cap_data	file:
cap	kernel/auditsc.c	/^	struct audit_cap_data	cap;$/;"	m	struct:audit_aux_data_capset	typeref:struct:audit_aux_data_capset::audit_cap_data	file:
cap_get_target_pid	kernel/capability.c	/^static inline int cap_get_target_pid(pid_t pid, kernel_cap_t *pEp,$/;"	f	file:
cap_last_cap	kernel/sysctl.c	/^static const int cap_last_cap = CAP_LAST_CAP;$/;"	v	file:
cap_validate_magic	kernel/capability.c	/^static int cap_validate_magic(cap_user_header_t header, unsigned *tocopy)$/;"	f	file:
capable	kernel/capability.c	/^EXPORT_SYMBOL(capable);$/;"	v
capable	kernel/capability.c	/^bool capable(int cap)$/;"	f
capset	kernel/auditsc.c	/^		} capset;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon50	file:
cascade	kernel/timer.c	/^static int cascade(struct tvec_base *base, struct tvec *tv, int index)$/;"	f	file:
cb_barrier	kernel/rcutorture.c	/^	void (*cb_barrier)(void);$/;"	m	struct:rcu_torture_ops	file:
ccupdate_struct	mm/slab.c	/^struct ccupdate_struct {$/;"	s	file:
cd_forget	fs/char_dev.c	/^void cd_forget(struct inode *inode)$/;"	f
cdev	fs/char_dev.c	/^	struct cdev *cdev;		\/* will die *\/$/;"	m	struct:char_device_struct	typeref:struct:char_device_struct::cdev	file:
cdev_add	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_add);$/;"	v
cdev_add	fs/char_dev.c	/^int cdev_add(struct cdev *p, dev_t dev, unsigned count)$/;"	f
cdev_alloc	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_alloc);$/;"	v
cdev_alloc	fs/char_dev.c	/^struct cdev *cdev_alloc(void)$/;"	f
cdev_default_release	fs/char_dev.c	/^static void cdev_default_release(struct kobject *kobj)$/;"	f	file:
cdev_del	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_del);$/;"	v
cdev_del	fs/char_dev.c	/^void cdev_del(struct cdev *p)$/;"	f
cdev_dynamic_release	fs/char_dev.c	/^static void cdev_dynamic_release(struct kobject *kobj)$/;"	f	file:
cdev_get	fs/char_dev.c	/^static struct kobject *cdev_get(struct cdev *p)$/;"	f	file:
cdev_init	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_init);$/;"	v
cdev_init	fs/char_dev.c	/^void cdev_init(struct cdev *cdev, const struct file_operations *fops)$/;"	f
cdev_map	fs/char_dev.c	/^static struct kobj_map *cdev_map;$/;"	v	typeref:struct:kobj_map	file:
cdev_purge	fs/char_dev.c	/^static void cdev_purge(struct cdev *cdev)$/;"	f	file:
cdev_put	fs/char_dev.c	/^void cdev_put(struct cdev *p)$/;"	f
cdev_unmap	fs/char_dev.c	/^static void cdev_unmap(dev_t dev, unsigned count)$/;"	f	file:
cfent	kernel/cgroup.c	/^struct cfent {$/;"	s	file:
cft	kernel/cgroup.c	/^	struct cftype *cft;$/;"	m	struct:cgroup_event	typeref:struct:cgroup_event::cftype	file:
cft	kernel/cgroup.c	/^	struct cftype *cft;$/;"	m	struct:cgroup_seqfile_state	typeref:struct:cgroup_seqfile_state::cftype	file:
cg	kernel/cgroup.c	/^	struct css_set		*cg;$/;"	m	struct:task_and_cgroup	typeref:struct:task_and_cgroup::css_set	file:
cg	kernel/cgroup.c	/^	struct css_set *cg;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::css_set	file:
cg_cgroup_link	kernel/cgroup.c	/^struct cg_cgroup_link {$/;"	s	file:
cg_link_list	kernel/cgroup.c	/^	struct list_head cg_link_list;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::list_head	file:
cgroup	kernel/cgroup.c	/^	struct cgroup *cgroup;$/;"	m	struct:cgroup_seqfile_state	typeref:struct:cgroup_seqfile_state::cgroup	file:
cgroup_add_cftypes	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_add_cftypes);$/;"	v
cgroup_add_cftypes	kernel/cgroup.c	/^int cgroup_add_cftypes(struct cgroup_subsys *ss, struct cftype *cfts)$/;"	f
cgroup_add_file	kernel/cgroup.c	/^static int cgroup_add_file(struct cgroup *cgrp, struct cgroup_subsys *subsys,$/;"	f	file:
cgroup_addrm_files	kernel/cgroup.c	/^static int cgroup_addrm_files(struct cgroup *cgrp, struct cgroup_subsys *subsys,$/;"	f	file:
cgroup_advance_iter	kernel/cgroup.c	/^static void cgroup_advance_iter(struct cgroup *cgrp,$/;"	f	file:
cgroup_attach_proc	kernel/cgroup.c	/^static int cgroup_attach_proc(struct cgroup *cgrp, struct task_struct *leader)$/;"	f	file:
cgroup_attach_task	kernel/cgroup.c	/^int cgroup_attach_task(struct cgroup *cgrp, struct task_struct *tsk)$/;"	f
cgroup_attach_task_all	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_attach_task_all);$/;"	v
cgroup_attach_task_all	kernel/cgroup.c	/^int cgroup_attach_task_all(struct task_struct *from, struct task_struct *tsk)$/;"	f
cgroup_backing_dev_info	kernel/cgroup.c	/^static struct backing_dev_info cgroup_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info	file:
cgroup_clear_directory	kernel/cgroup.c	/^static void cgroup_clear_directory(struct dentry *dir, bool base_files,$/;"	f	file:
cgroup_clone_children_read	kernel/cgroup.c	/^static u64 cgroup_clone_children_read(struct cgroup *cgrp,$/;"	f	file:
cgroup_clone_children_write	kernel/cgroup.c	/^static int cgroup_clone_children_write(struct cgroup *cgrp,$/;"	f	file:
cgroup_create	kernel/cgroup.c	/^static long cgroup_create(struct cgroup *parent, struct dentry *dentry,$/;"	f	file:
cgroup_create_file	kernel/cgroup.c	/^static int cgroup_create_file(struct dentry *dentry, umode_t mode,$/;"	f	file:
cgroup_cs	kernel/cpuset.c	/^static inline struct cpuset *cgroup_cs(struct cgroup *cont)$/;"	f	file:
cgroup_css_from_dir	kernel/cgroup.c	/^struct cgroup_subsys_state *cgroup_css_from_dir(struct file *f, int id)$/;"	f
cgroup_css_links_read	kernel/cgroup.c	/^static int cgroup_css_links_read(struct cgroup *cont,$/;"	f	file:
cgroup_d_remove_dir	kernel/cgroup.c	/^static void cgroup_d_remove_dir(struct dentry *dentry)$/;"	f	file:
cgroup_delete	kernel/cgroup.c	/^static int cgroup_delete(const struct dentry *d)$/;"	f	file:
cgroup_diput	kernel/cgroup.c	/^static void cgroup_diput(struct dentry *dentry, struct inode *inode)$/;"	f	file:
cgroup_dir_inode_operations	kernel/cgroup.c	/^static const struct inode_operations cgroup_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
cgroup_dir_inode_operations	kernel/cgroup.c	/^static const struct inode_operations cgroup_dir_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
cgroup_disable	kernel/cgroup.c	/^static int __init cgroup_disable(char *str)$/;"	f	file:
cgroup_drop_root	kernel/cgroup.c	/^static void cgroup_drop_root(struct cgroupfs_root *root)$/;"	f	file:
cgroup_enable_task_cg_lists	kernel/cgroup.c	/^static void cgroup_enable_task_cg_lists(void)$/;"	f	file:
cgroup_event	kernel/cgroup.c	/^struct cgroup_event {$/;"	s	file:
cgroup_event_ptable_queue_proc	kernel/cgroup.c	/^static void cgroup_event_ptable_queue_proc(struct file *file,$/;"	f	file:
cgroup_event_remove	kernel/cgroup.c	/^static void cgroup_event_remove(struct work_struct *work)$/;"	f	file:
cgroup_event_wake	kernel/cgroup.c	/^static int cgroup_event_wake(wait_queue_t *wait, unsigned mode,$/;"	f	file:
cgroup_exit	kernel/cgroup.c	/^void cgroup_exit(struct task_struct *tsk, int run_callbacks)$/;"	f
cgroup_file_inode_operations	kernel/cgroup.c	/^static const struct inode_operations cgroup_file_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
cgroup_file_mode	kernel/cgroup.c	/^static umode_t cgroup_file_mode(const struct cftype *cft)$/;"	f	file:
cgroup_file_open	kernel/cgroup.c	/^static int cgroup_file_open(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_file_operations	kernel/cgroup.c	/^static const struct file_operations cgroup_file_operations = {$/;"	v	typeref:struct:file_operations	file:
cgroup_file_read	kernel/cgroup.c	/^static ssize_t cgroup_file_read(struct file *file, char __user *buf,$/;"	f	file:
cgroup_file_release	kernel/cgroup.c	/^static int cgroup_file_release(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_file_write	kernel/cgroup.c	/^static ssize_t cgroup_file_write(struct file *file, const char __user *buf,$/;"	f	file:
cgroup_filetype	kernel/cgroup.c	/^enum cgroup_filetype {$/;"	g	file:
cgroup_fork	kernel/cgroup.c	/^void cgroup_fork(struct task_struct *child)$/;"	f
cgroup_free_fn	kernel/cgroup.c	/^static void cgroup_free_fn(struct work_struct *work)$/;"	f	file:
cgroup_free_rcu	kernel/cgroup.c	/^static void cgroup_free_rcu(struct rcu_head *head)$/;"	f	file:
cgroup_freezer	kernel/cgroup_freezer.c	/^static inline struct freezer *cgroup_freezer(struct cgroup *cgroup)$/;"	f	file:
cgroup_freezing	kernel/cgroup_freezer.c	/^bool cgroup_freezing(struct task_struct *task)$/;"	f
cgroup_fs_type	kernel/cgroup.c	/^static struct file_system_type cgroup_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
cgroup_get_rootdir	kernel/cgroup.c	/^static int cgroup_get_rootdir(struct super_block *sb)$/;"	f	file:
cgroup_getxattr	kernel/cgroup.c	/^static ssize_t cgroup_getxattr(struct dentry *dentry, const char *name,$/;"	f	file:
cgroup_has_css_refs	kernel/cgroup.c	/^static int cgroup_has_css_refs(struct cgroup *cgrp)$/;"	f	file:
cgroup_ida	kernel/cgroup.c	/^	struct ida cgroup_ida;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::ida	file:
cgroup_init	kernel/cgroup.c	/^int __init cgroup_init(void)$/;"	f
cgroup_init_cftsets	kernel/cgroup.c	/^static void __init_or_module cgroup_init_cftsets(struct cgroup_subsys *ss)$/;"	f	file:
cgroup_init_early	kernel/cgroup.c	/^int __init cgroup_init_early(void)$/;"	f
cgroup_init_idr	kernel/cgroup.c	/^static int __init_or_module cgroup_init_idr(struct cgroup_subsys *ss,$/;"	f	file:
cgroup_init_subsys	kernel/cgroup.c	/^static void __init cgroup_init_subsys(struct cgroup_subsys *ss)$/;"	f	file:
cgroup_is_descendant	kernel/cgroup.c	/^int cgroup_is_descendant(const struct cgroup *cgrp, struct task_struct *task)$/;"	f
cgroup_is_releasable	kernel/cgroup.c	/^static int cgroup_is_releasable(const struct cgroup *cgrp)$/;"	f	file:
cgroup_is_removed	kernel/cgroup.c	/^inline int cgroup_is_removed(const struct cgroup *cgrp)$/;"	f
cgroup_iter_next	kernel/cgroup.c	/^struct task_struct *cgroup_iter_next(struct cgroup *cgrp,$/;"	f
cgroup_kill_sb	kernel/cgroup.c	/^static void cgroup_kill_sb(struct super_block *sb) {$/;"	f	file:
cgroup_kobj	kernel/cgroup.c	/^static struct kobject *cgroup_kobj;$/;"	v	typeref:struct:kobject	file:
cgroup_leftmost_descendant	kernel/cgroup.c	/^static struct cgroup *cgroup_leftmost_descendant(struct cgroup *pos)$/;"	f	file:
cgroup_listxattr	kernel/cgroup.c	/^static ssize_t cgroup_listxattr(struct dentry *dentry, char *buf, size_t size)$/;"	f	file:
cgroup_load_subsys	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_load_subsys);$/;"	v
cgroup_load_subsys	kernel/cgroup.c	/^int __init_or_module cgroup_load_subsys(struct cgroup_subsys *ss)$/;"	f
cgroup_lock	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_lock);$/;"	v
cgroup_lock	kernel/cgroup.c	/^void cgroup_lock(void)$/;"	f
cgroup_lock_is_held	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_lock_is_held);$/;"	v
cgroup_lock_is_held	kernel/cgroup.c	/^int cgroup_lock_is_held(void)$/;"	f
cgroup_lock_live_group	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_lock_live_group);$/;"	v
cgroup_lock_live_group	kernel/cgroup.c	/^bool cgroup_lock_live_group(struct cgroup *cgrp)$/;"	f
cgroup_lookup	kernel/cgroup.c	/^static struct dentry *cgroup_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags)$/;"	f	file:
cgroup_map_add	kernel/cgroup.c	/^static int cgroup_map_add(struct cgroup_map_cb *cb, const char *key, u64 value)$/;"	f	file:
cgroup_mkdir	kernel/cgroup.c	/^static int cgroup_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
cgroup_mount	kernel/cgroup.c	/^static struct dentry *cgroup_mount(struct file_system_type *fs_type,$/;"	f	file:
cgroup_new_inode	kernel/cgroup.c	/^static struct inode *cgroup_new_inode(umode_t mode, struct super_block *sb)$/;"	f	file:
cgroup_next_descendant_post	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_next_descendant_post);$/;"	v
cgroup_next_descendant_post	kernel/cgroup.c	/^struct cgroup *cgroup_next_descendant_post(struct cgroup *pos,$/;"	f
cgroup_next_descendant_pre	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_next_descendant_pre);$/;"	v
cgroup_next_descendant_pre	kernel/cgroup.c	/^struct cgroup *cgroup_next_descendant_pre(struct cgroup *pos,$/;"	f
cgroup_open	kernel/cgroup.c	/^static int cgroup_open(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_ops	kernel/cgroup.c	/^static const struct super_operations cgroup_ops = {$/;"	v	typeref:struct:super_operations	file:
cgroup_path	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_path);$/;"	v
cgroup_path	kernel/cgroup.c	/^int cgroup_path(const struct cgroup *cgrp, char *buf, int buflen)$/;"	f
cgroup_pidlist	kernel/cgroup.c	/^struct cgroup_pidlist {$/;"	s	file:
cgroup_pidlist_find	kernel/cgroup.c	/^static struct cgroup_pidlist *cgroup_pidlist_find(struct cgroup *cgrp,$/;"	f	file:
cgroup_pidlist_next	kernel/cgroup.c	/^static void *cgroup_pidlist_next(struct seq_file *s, void *v, loff_t *pos)$/;"	f	file:
cgroup_pidlist_open	kernel/cgroup.c	/^static int cgroup_pidlist_open(struct file *file, enum cgroup_filetype type)$/;"	f	file:
cgroup_pidlist_operations	kernel/cgroup.c	/^static const struct file_operations cgroup_pidlist_operations = {$/;"	v	typeref:struct:file_operations	file:
cgroup_pidlist_release	kernel/cgroup.c	/^static int cgroup_pidlist_release(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_pidlist_seq_operations	kernel/cgroup.c	/^static const struct seq_operations cgroup_pidlist_seq_operations = {$/;"	v	typeref:struct:seq_operations	file:
cgroup_pidlist_show	kernel/cgroup.c	/^static int cgroup_pidlist_show(struct seq_file *s, void *v)$/;"	f	file:
cgroup_pidlist_start	kernel/cgroup.c	/^static void *cgroup_pidlist_start(struct seq_file *s, loff_t *pos)$/;"	f	file:
cgroup_pidlist_stop	kernel/cgroup.c	/^static void cgroup_pidlist_stop(struct seq_file *s, void *v)$/;"	f	file:
cgroup_populate_dir	kernel/cgroup.c	/^static int cgroup_populate_dir(struct cgroup *cgrp, bool base_files,$/;"	f	file:
cgroup_post_fork	kernel/cgroup.c	/^void cgroup_post_fork(struct task_struct *child)$/;"	f
cgroup_procs_open	kernel/cgroup.c	/^static int cgroup_procs_open(struct inode *unused, struct file *file)$/;"	f	file:
cgroup_procs_write	kernel/cgroup.c	/^static int cgroup_procs_write(struct cgroup *cgrp, struct cftype *cft, u64 tgid)$/;"	f	file:
cgroup_read_notify_on_release	kernel/cgroup.c	/^static u64 cgroup_read_notify_on_release(struct cgroup *cgrp,$/;"	f	file:
cgroup_read_s64	kernel/cgroup.c	/^static ssize_t cgroup_read_s64(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_read_u64	kernel/cgroup.c	/^static ssize_t cgroup_read_u64(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_refcount_read	kernel/cgroup.c	/^static u64 cgroup_refcount_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
cgroup_release_agent	kernel/cgroup.c	/^static void cgroup_release_agent(struct work_struct *work)$/;"	f	file:
cgroup_release_agent_show	kernel/cgroup.c	/^static int cgroup_release_agent_show(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_release_agent_write	kernel/cgroup.c	/^static int cgroup_release_agent_write(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_release_pid_array	kernel/cgroup.c	/^static void cgroup_release_pid_array(struct cgroup_pidlist *l)$/;"	f	file:
cgroup_remount	kernel/cgroup.c	/^static int cgroup_remount(struct super_block *sb, int *flags, char *data)$/;"	f	file:
cgroup_removexattr	kernel/cgroup.c	/^static int cgroup_removexattr(struct dentry *dentry, const char *name)$/;"	f	file:
cgroup_rename	kernel/cgroup.c	/^static int cgroup_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
cgroup_rightmost_descendant	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_rightmost_descendant);$/;"	v
cgroup_rightmost_descendant	kernel/cgroup.c	/^struct cgroup *cgroup_rightmost_descendant(struct cgroup *pos)$/;"	f
cgroup_rm_cftypes	kernel/cgroup.c	/^int cgroup_rm_cftypes(struct cgroup_subsys *ss, struct cftype *cfts)$/;"	f
cgroup_rm_file	kernel/cgroup.c	/^static void cgroup_rm_file(struct cgroup *cgrp, const struct cftype *cft)$/;"	f	file:
cgroup_rmdir	kernel/cgroup.c	/^static int cgroup_rmdir(struct inode *unused_dir, struct dentry *dentry)$/;"	f	file:
cgroup_root_from_opts	kernel/cgroup.c	/^static struct cgroupfs_root *cgroup_root_from_opts(struct cgroup_sb_opts *opts)$/;"	f	file:
cgroup_sb_opts	kernel/cgroup.c	/^struct cgroup_sb_opts {$/;"	s	file:
cgroup_scan_tasks	kernel/cgroup.c	/^int cgroup_scan_tasks(struct cgroup_scanner *scan)$/;"	f
cgroup_seqfile_operations	kernel/cgroup.c	/^static const struct file_operations cgroup_seqfile_operations = {$/;"	v	typeref:struct:file_operations	file:
cgroup_seqfile_release	kernel/cgroup.c	/^static int cgroup_seqfile_release(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_seqfile_show	kernel/cgroup.c	/^static int cgroup_seqfile_show(struct seq_file *m, void *arg)$/;"	f	file:
cgroup_seqfile_state	kernel/cgroup.c	/^struct cgroup_seqfile_state {$/;"	s	file:
cgroup_set_super	kernel/cgroup.c	/^static int cgroup_set_super(struct super_block *sb, void *data)$/;"	f	file:
cgroup_setxattr	kernel/cgroup.c	/^static int cgroup_setxattr(struct dentry *dentry, const char *name,$/;"	f	file:
cgroup_show_options	kernel/cgroup.c	/^static int cgroup_show_options(struct seq_file *seq, struct dentry *dentry)$/;"	f	file:
cgroup_task_count	kernel/cgroup.c	/^int cgroup_task_count(const struct cgroup *cgrp)$/;"	f
cgroup_task_migrate	kernel/cgroup.c	/^static void cgroup_task_migrate(struct cgroup *cgrp, struct cgroup *oldcgrp,$/;"	f	file:
cgroup_tasks_open	kernel/cgroup.c	/^static int cgroup_tasks_open(struct inode *unused, struct file *file)$/;"	f	file:
cgroup_tasks_write	kernel/cgroup.c	/^static int cgroup_tasks_write(struct cgroup *cgrp, struct cftype *cft, u64 pid)$/;"	f	file:
cgroup_taskset	kernel/cgroup.c	/^struct cgroup_taskset {$/;"	s	file:
cgroup_taskset_cur_cgroup	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_taskset_cur_cgroup);$/;"	v
cgroup_taskset_cur_cgroup	kernel/cgroup.c	/^struct cgroup *cgroup_taskset_cur_cgroup(struct cgroup_taskset *tset)$/;"	f
cgroup_taskset_first	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_taskset_first);$/;"	v
cgroup_taskset_first	kernel/cgroup.c	/^struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset)$/;"	f
cgroup_taskset_next	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_taskset_next);$/;"	v
cgroup_taskset_next	kernel/cgroup.c	/^struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset)$/;"	f
cgroup_taskset_size	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_taskset_size);$/;"	v
cgroup_taskset_size	kernel/cgroup.c	/^int cgroup_taskset_size(struct cgroup_taskset *tset)$/;"	f
cgroup_test_super	kernel/cgroup.c	/^static int cgroup_test_super(struct super_block *sb, void *data)$/;"	f	file:
cgroup_unload_subsys	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_unload_subsys);$/;"	v
cgroup_unload_subsys	kernel/cgroup.c	/^void cgroup_unload_subsys(struct cgroup_subsys *ss)$/;"	f
cgroup_unlock	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(cgroup_unlock);$/;"	v
cgroup_unlock	kernel/cgroup.c	/^void cgroup_unlock(void)$/;"	f
cgroup_write_X64	kernel/cgroup.c	/^static ssize_t cgroup_write_X64(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_write_event_control	kernel/cgroup.c	/^static int cgroup_write_event_control(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_write_notify_on_release	kernel/cgroup.c	/^static int cgroup_write_notify_on_release(struct cgroup *cgrp,$/;"	f	file:
cgroup_write_string	kernel/cgroup.c	/^static ssize_t cgroup_write_string(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroupfs_root	kernel/cgroup.c	/^struct cgroupfs_root {$/;"	s	file:
cgroupstats_build	kernel/cgroup.c	/^int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry)$/;"	f
cgroupstats_cmd_get_policy	kernel/taskstats.c	/^static const struct nla_policy cgroupstats_cmd_get_policy[CGROUPSTATS_CMD_ATTR_MAX+1] = {$/;"	v	typeref:struct:nla_policy	file:
cgroupstats_open	kernel/cgroup.c	/^static int cgroupstats_open(struct inode *inode, struct file *file)$/;"	f	file:
cgroupstats_ops	kernel/taskstats.c	/^static struct genl_ops cgroupstats_ops = {$/;"	v	typeref:struct:genl_ops	file:
cgroupstats_user_cmd	kernel/taskstats.c	/^static int cgroupstats_user_cmd(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
cgrp	kernel/cgroup.c	/^	struct cgroup		*cgrp;$/;"	m	struct:task_and_cgroup	typeref:struct:task_and_cgroup::cgroup	file:
cgrp	kernel/cgroup.c	/^	struct cgroup *cgrp;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::cgroup	file:
cgrp	kernel/cgroup.c	/^	struct cgroup *cgrp;$/;"	m	struct:cgroup_event	typeref:struct:cgroup_event::cgroup	file:
cgrp_link_list	kernel/cgroup.c	/^	struct list_head cgrp_link_list;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::list_head	file:
chain	kernel/futex.c	/^	struct plist_head chain;$/;"	m	struct:futex_hash_bucket	typeref:struct:futex_hash_bucket::plist_head	file:
chain_hlocks	kernel/lockdep.c	/^static u16 chain_hlocks[MAX_LOCKDEP_CHAIN_HLOCKS];$/;"	v	file:
chain_lookup_hits	kernel/lockdep_internals.h	/^	int	chain_lookup_hits;$/;"	m	struct:lockdep_stats
chain_lookup_misses	kernel/lockdep_internals.h	/^	int	chain_lookup_misses;$/;"	m	struct:lockdep_stats
chainhash_table	kernel/lockdep.c	/^static struct list_head chainhash_table[CHAINHASH_SIZE];$/;"	v	typeref:struct:list_head	file:
chainhashentry	kernel/lockdep.c	304;"	d	file:
change_huge_pmd	mm/huge_memory.c	/^int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f
change_mnt_propagation	fs/pnode.c	/^void change_mnt_propagation(struct mount *mnt, int type)$/;"	f
change_mount_flags	fs/namespace.c	/^static int change_mount_flags(struct vfsmount *mnt, int ms_flags)$/;"	f	file:
change_pageblock_range	mm/page_alloc.c	/^static void change_pageblock_range(struct page *pageblock_page,$/;"	f	file:
change_pid	kernel/pid.c	/^void change_pid(struct task_struct *task, enum pid_type type,$/;"	f
change_pmd_protnuma	mm/mprotect.c	/^static inline void change_pmd_protnuma(struct mm_struct *mm, unsigned long addr,$/;"	f	file:
change_pmd_range	mm/mprotect.c	/^static inline unsigned long change_pmd_range(struct vm_area_struct *vma,$/;"	f	file:
change_prot_numa	mm/mempolicy.c	/^static unsigned long change_prot_numa(struct vm_area_struct *vma,$/;"	f	file:
change_prot_numa	mm/mempolicy.c	/^unsigned long change_prot_numa(struct vm_area_struct *vma,$/;"	f
change_protection	mm/mprotect.c	/^unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,$/;"	f
change_protection_range	mm/mprotect.c	/^static unsigned long change_protection_range(struct vm_area_struct *vma,$/;"	f	file:
change_pte_range	mm/mprotect.c	/^static unsigned long change_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
change_pud_range	mm/mprotect.c	/^static inline unsigned long change_pud_range(struct vm_area_struct *vma,$/;"	f	file:
char_device_struct	fs/char_dev.c	/^static struct char_device_struct {$/;"	s	file:
charge_type	mm/memcontrol.c	/^enum charge_type {$/;"	g	file:
check_acl	fs/namei.c	/^static int check_acl(struct inode *inode, int mask)$/;"	f	file:
check_and_unmap_cpu_on_node	mm/memory_hotplug.c	/^static int check_and_unmap_cpu_on_node(void *data)$/;"	f	file:
check_bytes8	lib/string.c	/^static void *check_bytes8(const u8 *start, u8 value, unsigned int bytes)$/;"	f	file:
check_bytes_and_report	mm/slub.c	/^static int check_bytes_and_report(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_chain_key	kernel/lockdep.c	/^static void check_chain_key(struct task_struct *curr)$/;"	f	file:
check_clock	kernel/posix-cpu-timers.c	/^static int check_clock(const clockid_t which_clock)$/;"	f	file:
check_cpu_itimer	kernel/posix-cpu-timers.c	/^static void check_cpu_itimer(struct task_struct *tsk, struct cpu_itimer *it,$/;"	f	file:
check_cpu_on_node	mm/memory_hotplug.c	/^static int check_cpu_on_node(void *data)$/;"	f	file:
check_cpu_stall	kernel/rcutiny_plugin.h	/^static void check_cpu_stall(struct rcu_ctrlblk *rcp)$/;"	f
check_cpu_stall	kernel/rcutree.c	/^static void check_cpu_stall(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
check_cpu_stall_init	kernel/rcupdate.c	/^early_initcall(check_cpu_stall_init);$/;"	v
check_cpu_stall_init	kernel/rcupdate.c	/^static int __init check_cpu_stall_init(void)$/;"	f	file:
check_cpu_stall_preempt	kernel/rcutiny_plugin.h	/^static void check_cpu_stall_preempt(void)$/;"	f
check_cpu_stalls	kernel/rcutiny_plugin.h	/^static void check_cpu_stalls(void)$/;"	f
check_deadlock	kernel/lockdep.c	/^check_deadlock(struct task_struct *curr, struct held_lock *next,$/;"	f	file:
check_disk_change	fs/block_dev.c	/^EXPORT_SYMBOL(check_disk_change);$/;"	v
check_disk_change	fs/block_dev.c	/^int check_disk_change(struct block_device *bdev)$/;"	f
check_disk_size_change	fs/block_dev.c	/^EXPORT_SYMBOL(check_disk_size_change);$/;"	v
check_disk_size_change	fs/block_dev.c	/^void check_disk_size_change(struct gendisk *disk, struct block_device *bdev)$/;"	f
check_fcntl_cmd	fs/fcntl.c	/^static int check_fcntl_cmd(unsigned cmd)$/;"	f	file:
check_file	fs/binfmt_misc.c	/^static Node *check_file(struct linux_binprm *bprm)$/;"	f	file:
check_flags	kernel/lockdep.c	/^static void check_flags(unsigned long flags)$/;"	f	file:
check_for_memory	mm/page_alloc.c	/^static void check_for_memory(pg_data_t *pgdat, int nid)$/;"	f	file:
check_for_new_grace_period	kernel/rcutree.c	/^check_for_new_grace_period(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
check_for_release	kernel/cgroup.c	/^static void check_for_release(struct cgroup *cgrp)$/;"	f	file:
check_for_tasks	kernel/cpu.c	/^static inline void check_for_tasks(int cpu)$/;"	f	file:
check_free_space	kernel/acct.c	/^static int check_free_space(struct bsd_acct_struct *acct, struct file *file)$/;"	f	file:
check_hung_task	kernel/hung_task.c	/^static void check_hung_task(struct task_struct *t, unsigned long timeout)$/;"	f	file:
check_hung_uninterruptible_tasks	kernel/hung_task.c	/^static void check_hung_uninterruptible_tasks(unsigned long timeout)$/;"	f	file:
check_irq_off	mm/slab.c	/^static void check_irq_off(void)$/;"	f	file:
check_irq_off	mm/slab.c	2561;"	d	file:
check_irq_on	mm/slab.c	/^static void check_irq_on(void)$/;"	f	file:
check_irq_on	mm/slab.c	2562;"	d	file:
check_irq_usage	kernel/lockdep.c	/^static int check_irq_usage(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_irqs_on	fs/buffer.c	/^static inline void check_irqs_on(void)$/;"	f	file:
check_kill_permission	kernel/signal.c	/^static int check_kill_permission(int sig, struct siginfo *info,$/;"	f	file:
check_kprobe_address_safe	kernel/kprobes.c	/^static __kprobes int check_kprobe_address_safe(struct kprobe *p,$/;"	f	file:
check_kprobe_rereg	kernel/kprobes.c	/^static inline int check_kprobe_rereg(struct kprobe *p)$/;"	f	file:
check_mm	kernel/fork.c	/^static void check_mm(struct mm_struct *mm)$/;"	f	file:
check_mnt	fs/namespace.c	/^static inline int check_mnt(struct mount *mnt)$/;"	f	file:
check_modinfo	kernel/module.c	/^static int check_modinfo(struct module *mod, struct load_info *info, int flags)$/;"	f	file:
check_modstruct_version	kernel/module.c	/^static inline int check_modstruct_version(Elf_Shdr *sechdrs,$/;"	f	file:
check_module_license_and_versions	kernel/module.c	/^static int check_module_license_and_versions(struct module *mod)$/;"	f	file:
check_move_unevictable_pages	mm/vmscan.c	/^void check_move_unevictable_pages(struct page **pages, int nr_pages)$/;"	f
check_new_page	mm/page_alloc.c	/^static inline int check_new_page(struct page *page)$/;"	f	file:
check_noncircular	kernel/lockdep.c	/^check_noncircular(struct lock_list *root, struct lock_class *target,$/;"	f	file:
check_numabalancing_enable	mm/mempolicy.c	/^static inline void __init check_numabalancing_enable(void)$/;"	f	file:
check_numabalancing_enable	mm/mempolicy.c	/^static void __init check_numabalancing_enable(void)$/;"	f	file:
check_object	mm/slub.c	/^static inline int check_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_object	mm/slub.c	/^static int check_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_pad_bytes	mm/slub.c	/^static int check_pad_bytes(struct kmem_cache *s, struct page *page, u8 *p)$/;"	f	file:
check_pages_isolated	mm/memory_hotplug.c	/^check_pages_isolated(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
check_pages_isolated_cb	mm/memory_hotplug.c	/^check_pages_isolated_cb(unsigned long start_pfn, unsigned long nr_pages,$/;"	f	file:
check_panic_on_oom	mm/oom_kill.c	/^void check_panic_on_oom(enum oom_constraint constraint, gfp_t gfp_mask,$/;"	f
check_pgd_range	mm/mempolicy.c	/^static inline int check_pgd_range(struct vm_area_struct *vma,$/;"	f	file:
check_pmd_range	mm/mempolicy.c	/^static inline int check_pmd_range(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
check_poison_mem	mm/debug-pagealloc.c	/^static void check_poison_mem(unsigned char *mem, size_t bytes)$/;"	f	file:
check_poison_obj	mm/slab.c	/^static void check_poison_obj(struct kmem_cache *cachep, void *objp)$/;"	f	file:
check_prev_add	kernel/lockdep.c	/^check_prev_add(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_prev_add_irq	kernel/lockdep.c	/^check_prev_add_irq(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_prevs_add	kernel/lockdep.c	/^check_prevs_add(struct task_struct *curr, struct held_lock *next)$/;"	f	file:
check_prlimit_permission	kernel/sys.c	/^static int check_prlimit_permission(struct task_struct *task)$/;"	f	file:
check_process_timers	kernel/posix-cpu-timers.c	/^static void check_process_timers(struct task_struct *tsk,$/;"	f	file:
check_pte_range	mm/mempolicy.c	/^static int check_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
check_pud_range	mm/mempolicy.c	/^static inline int check_pud_range(struct vm_area_struct *vma, pgd_t *pgd,$/;"	f	file:
check_range	mm/mempolicy.c	/^check_range(struct mm_struct *mm, unsigned long start, unsigned long end,$/;"	f	file:
check_slab	mm/slub.c	/^static int check_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
check_slabp	mm/slab.c	/^static void check_slabp(struct kmem_cache *cachep, struct slab *slabp)$/;"	f	file:
check_slabp	mm/slab.c	3072;"	d	file:
check_som_header	fs/binfmt_som.c	/^static int check_som_header(struct som_hdr *som_ex)$/;"	f	file:
check_special_flags	fs/binfmt_misc.c	/^static char * check_special_flags (char * sfs, Node * e)$/;"	f	file:
check_spinlock_acquired	mm/slab.c	/^static void check_spinlock_acquired(struct kmem_cache *cachep)$/;"	f	file:
check_spinlock_acquired	mm/slab.c	2563;"	d	file:
check_spinlock_acquired_node	mm/slab.c	/^static void check_spinlock_acquired_node(struct kmem_cache *cachep, int node)$/;"	f	file:
check_spinlock_acquired_node	mm/slab.c	2564;"	d	file:
check_stack_guard_page	mm/memory.c	/^static inline int check_stack_guard_page(struct vm_area_struct *vma, unsigned long address)$/;"	f	file:
check_stack_usage	kernel/exit.c	/^static inline void check_stack_usage(void) {}$/;"	f	file:
check_stack_usage	kernel/exit.c	/^static void check_stack_usage(void)$/;"	f	file:
check_sticky	fs/namei.c	/^static inline int check_sticky(struct inode *dir, struct inode *inode)$/;"	f	file:
check_symbol	kernel/module.c	/^static bool check_symbol(const struct symsearch *syms,$/;"	f	file:
check_sync_rss_stat	mm/memory.c	/^static void check_sync_rss_stat(struct task_struct *task)$/;"	f	file:
check_syslog_permissions	kernel/printk.c	/^static int check_syslog_permissions(int type, bool from_file)$/;"	f	file:
check_thread_timers	kernel/posix-cpu-timers.c	/^static void check_thread_timers(struct task_struct *tsk,$/;"	f	file:
check_unlock	kernel/lockdep.c	/^static int check_unlock(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
check_unsafe_exec	fs/exec.c	/^static int check_unsafe_exec(struct linux_binprm *bprm)$/;"	f	file:
check_unshare_flags	kernel/fork.c	/^static int check_unshare_flags(unsigned long unshare_flags)$/;"	f	file:
check_usage	kernel/lockdep.c	/^check_usage(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_usage_backwards	kernel/lockdep.c	/^check_usage_backwards(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
check_usage_f	kernel/lockdep.c	/^typedef int (*check_usage_f)(struct task_struct *, struct held_lock *,$/;"	t	file:
check_usage_forwards	kernel/lockdep.c	/^check_usage_forwards(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
check_usemap_section_nr	mm/sparse.c	/^static void __init check_usemap_section_nr(int nid, unsigned long *usemap)$/;"	f	file:
check_valid_pointer	mm/slub.c	/^static inline int check_valid_pointer(struct kmem_cache *s,$/;"	f	file:
check_version	kernel/module.c	/^static inline int check_version(Elf_Shdr *sechdrs,$/;"	f	file:
check_version	kernel/module.c	/^static int check_version(Elf_Shdr *sechdrs,$/;"	f	file:
checksum	mm/kmemleak.c	/^	u32 checksum;$/;"	m	struct:kmemleak_object	file:
child	kernel/sysctl_binary.c	/^	const struct bin_table	*child;$/;"	m	struct:bin_table	typeref:struct:bin_table::bin_table	file:
child_wait	kernel/exit.c	/^	wait_queue_t		child_wait;$/;"	m	struct:wait_opts	file:
child_wait_callback	kernel/exit.c	/^static int child_wait_callback(wait_queue_t *wait, unsigned mode,$/;"	f	file:
chmod_common	fs/open.c	/^static int chmod_common(struct path *path, umode_t mode)$/;"	f	file:
choose_32_64	fs/stat.c	198;"	d	file:
choose_32_64	fs/stat.c	200;"	d	file:
chown_common	fs/open.c	/^static int chown_common(struct path *path, uid_t user, gid_t group)$/;"	f	file:
chrdev_init	fs/char_dev.c	/^void __init chrdev_init(void)$/;"	f
chrdev_open	fs/char_dev.c	/^static int chrdev_open(struct inode *inode, struct file *filp)$/;"	f	file:
chrdev_show	fs/char_dev.c	/^void chrdev_show(struct seq_file *f, off_t offset)$/;"	f
chrdevs	fs/char_dev.c	/^} *chrdevs[CHRDEV_MAJOR_HASH_SIZE];$/;"	v	typeref:struct:char_device_struct	file:
chroot_fs_refs	fs/fs_struct.c	/^void chroot_fs_refs(const struct path *old_root, const struct path *new_root)$/;"	f
chunk_hash	kernel/audit_tree.c	/^static inline struct list_head *chunk_hash(const struct inode *inode)$/;"	f	file:
chunk_hash_heads	kernel/audit_tree.c	/^static struct list_head chunk_hash_heads[HASH_SIZE];$/;"	v	typeref:struct:list_head	file:
chunks	kernel/audit_tree.c	/^	struct list_head chunks;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
circular_queue	kernel/lockdep.c	/^struct circular_queue {$/;"	s	file:
claim_block	fs/ext3/balloc.c	/^claim_block(spinlock_t *lock, ext3_grpblk_t block, struct buffer_head *bh)$/;"	f	file:
claim_swapfile	mm/swapfile.c	/^static int claim_swapfile(struct swap_info_struct *p, struct inode *inode)$/;"	f	file:
class	kernel/lockdep_proc.c	/^	struct lock_class *class;$/;"	m	struct:lock_stat_data	typeref:struct:lock_stat_data::lock_class	file:
class_equal	kernel/lockdep.c	/^static inline int class_equal(struct lock_list *entry, void *data)$/;"	f	file:
class_filter	kernel/lockdep.c	/^static int class_filter(struct lock_class *class)$/;"	f	file:
classes	kernel/auditfilter.c	/^static __u32 *classes[AUDIT_SYSCALL_CLASSES];$/;"	v	file:
classhash_table	kernel/lockdep.c	/^static struct list_head classhash_table[CLASSHASH_SIZE];$/;"	v	typeref:struct:list_head	file:
classhashentry	kernel/lockdep.c	293;"	d	file:
clean_blockdev_aliases	fs/direct-io.c	/^static void clean_blockdev_aliases(struct dio *dio, struct buffer_head *map_bh)$/;"	f	file:
clean_sort_range	kernel/range.c	/^int clean_sort_range(struct range *range, int az)$/;"	f
cleancache_enabled	mm/cleancache.c	/^EXPORT_SYMBOL(cleancache_enabled);$/;"	v
cleancache_failed_gets	mm/cleancache.c	/^static u64 cleancache_failed_gets;$/;"	v	file:
cleancache_get_key	mm/cleancache.c	/^static int cleancache_get_key(struct inode *inode,$/;"	f	file:
cleancache_invalidates	mm/cleancache.c	/^static u64 cleancache_invalidates;$/;"	v	file:
cleancache_puts	mm/cleancache.c	/^static u64 cleancache_puts;$/;"	v	file:
cleancache_register_ops	mm/cleancache.c	/^EXPORT_SYMBOL(cleancache_register_ops);$/;"	v
cleancache_register_ops	mm/cleancache.c	/^struct cleancache_ops cleancache_register_ops(struct cleancache_ops *ops)$/;"	f
cleancache_succ_gets	mm/cleancache.c	/^static u64 cleancache_succ_gets;$/;"	v	file:
cleanup_group_ids	fs/namespace.c	/^static void cleanup_group_ids(struct mount *mnt, struct mount *end)$/;"	f	file:
cleanup_rp_inst	kernel/kprobes.c	/^static void __kprobes cleanup_rp_inst(struct kretprobe *rp)$/;"	f	file:
cleanup_srcu_struct	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(cleanup_srcu_struct);$/;"	v
cleanup_srcu_struct	kernel/srcu.c	/^void cleanup_srcu_struct(struct srcu_struct *sp)$/;"	f
cleanup_timers	kernel/posix-cpu-timers.c	/^static void cleanup_timers(struct list_head *head,$/;"	f	file:
clear_all_latency_tracing	kernel/latencytop.c	/^void clear_all_latency_tracing(struct task_struct *p)$/;"	f
clear_bdi_congested	mm/backing-dev.c	/^EXPORT_SYMBOL(clear_bdi_congested);$/;"	v
clear_bdi_congested	mm/backing-dev.c	/^void clear_bdi_congested(struct backing_dev_info *bdi, int sync)$/;"	f
clear_dead_task	kernel/posix-cpu-timers.c	/^static void clear_dead_task(struct k_itimer *timer, union cpu_time_count now)$/;"	f	file:
clear_gigantic_page	mm/memory.c	/^static void clear_gigantic_page(struct page *page,$/;"	f	file:
clear_global_latency_tracing	kernel/latencytop.c	/^static void clear_global_latency_tracing(void)$/;"	f	file:
clear_huge_page	mm/memory.c	/^void clear_huge_page(struct page *page,$/;"	f
clear_hwpoisoned_pages	mm/sparse.c	/^static inline void clear_hwpoisoned_pages(struct page *memmap, int nr_pages)$/;"	f	file:
clear_hwpoisoned_pages	mm/sparse.c	/^static void clear_hwpoisoned_pages(struct page *memmap, int nr_pages)$/;"	f	file:
clear_idx	kernel/printk.c	/^static u32 clear_idx;$/;"	v	file:
clear_inode	fs/inode.c	/^EXPORT_SYMBOL(clear_inode);$/;"	v
clear_inode	fs/inode.c	/^void clear_inode(struct inode *inode)$/;"	f
clear_lock_stats	kernel/lockdep.c	/^void clear_lock_stats(struct lock_class *class)$/;"	f
clear_nlink	fs/inode.c	/^EXPORT_SYMBOL(clear_nlink);$/;"	v
clear_nlink	fs/inode.c	/^void clear_nlink(struct inode *inode)$/;"	f
clear_obj_pfmemalloc	mm/slab.c	/^static inline void clear_obj_pfmemalloc(void **objp)$/;"	f	file:
clear_opt	fs/ext3/ext3.h	370;"	d
clear_page_dirty_for_io	mm/page-writeback.c	/^EXPORT_SYMBOL(clear_page_dirty_for_io);$/;"	v
clear_page_dirty_for_io	mm/page-writeback.c	/^int clear_page_dirty_for_io(struct page *page)$/;"	f
clear_page_guard_flag	mm/page_alloc.c	/^static inline void clear_page_guard_flag(struct page *page) { }$/;"	f	file:
clear_page_guard_flag	mm/page_alloc.c	/^static inline void clear_page_guard_flag(struct page *page)$/;"	f	file:
clear_page_hwpoison_huge_page	mm/memory-failure.c	/^static void clear_page_hwpoison_huge_page(struct page *hpage)$/;"	f	file:
clear_page_mlock	mm/internal.h	/^static inline void clear_page_mlock(struct page *page) { }$/;"	f
clear_page_mlock	mm/mlock.c	/^void clear_page_mlock(struct page *page)$/;"	f
clear_page_poison	mm/debug-pagealloc.c	/^static inline void clear_page_poison(struct page *page)$/;"	f	file:
clear_ppgd_from_mm	mm/scm.c	/^void clear_ppgd_from_mm(struct mm_struct *mm)$/;"	f
clear_pte_flags	mm/scm.h	/^static pte_t inline clear_pte_flags(pte_t pte)$/;"	f
clear_qf_name	fs/ext3/super.c	/^static int clear_qf_name(struct super_block *sb, int qtype) {$/;"	f	file:
clear_rt_mutex_waiters	kernel/rtmutex.c	/^static inline void clear_rt_mutex_waiters(struct rt_mutex *lock)$/;"	f	file:
clear_seq	kernel/printk.c	/^static u64 clear_seq;$/;"	v	file:
clear_slob_page_free	mm/slob.c	/^static inline void clear_slob_page_free(struct page *sp)$/;"	f	file:
clear_stat	mm/slub.c	/^static void clear_stat(struct kmem_cache *s, enum stat_item si)$/;"	f	file:
clear_tasks_mm_cpumask	kernel/cpu.c	/^void clear_tasks_mm_cpumask(int cpu)$/;"	f
clear_tfile_check_list	fs/eventpoll.c	/^static void clear_tfile_check_list(void)$/;"	f	file:
clear_timeout	fs/aio.c	/^static inline void clear_timeout(struct aio_timeout *to)$/;"	f	file:
clear_work_data	kernel/workqueue.c	/^static void clear_work_data(struct work_struct *work)$/;"	f	file:
clear_zonelist_oom	mm/oom_kill.c	/^void clear_zonelist_oom(struct zonelist *zonelist, gfp_t gfp_mask)$/;"	f
client_addr	fs/compat.c	/^	struct compat_nfs_string client_addr;$/;"	m	struct:compat_nfs4_mount_data_v1	typeref:struct:compat_nfs4_mount_data_v1::compat_nfs_string	file:
clist	fs/timerfd.c	/^	struct list_head clist;$/;"	m	struct:timerfd_ctx	typeref:struct:timerfd_ctx::list_head	file:
clock_nanosleep_restart	kernel/posix-timers.c	/^long clock_nanosleep_restart(struct restart_block *restart_block)$/;"	f
clock_posix_cpu	kernel/posix-cpu-timers.c	/^struct k_clock clock_posix_cpu = {$/;"	v	typeref:struct:k_clock
clock_t_to_compat_clock_t	kernel/compat.c	/^static compat_clock_t clock_t_to_compat_clock_t(clock_t x)$/;"	f	file:
clock_t_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(clock_t_to_jiffies);$/;"	v
clock_t_to_jiffies	kernel/time.c	/^unsigned long clock_t_to_jiffies(unsigned long x)$/;"	f
clock_was_set	kernel/hrtimer.c	/^void clock_was_set(void)$/;"	f
clock_was_set_delayed	kernel/hrtimer.c	/^void clock_was_set_delayed(void)$/;"	f
clockid	fs/timerfd.c	/^	int clockid;$/;"	m	struct:timerfd_ctx	file:
clockid_to_kclock	kernel/posix-timers.c	/^static struct k_clock *clockid_to_kclock(const clockid_t id)$/;"	f	file:
clone_mnt	fs/namespace.c	/^static struct mount *clone_mnt(struct mount *old, struct dentry *root,$/;"	f	file:
clone_uts_ns	kernel/utsname.c	/^static struct uts_namespace *clone_uts_ns(struct user_namespace *user_ns,$/;"	f	file:
close_delay	fs/compat_ioctl.c	/^        unsigned short  close_delay;$/;"	m	struct:serial_struct32	file:
close_files	fs/file.c	/^static void close_files(struct files_struct * files)$/;"	f	file:
closing_wait	fs/compat_ioctl.c	/^        unsigned short  closing_wait; \/* time to wait before closing *\/$/;"	m	struct:serial_struct32	file:
closing_wait2	fs/compat_ioctl.c	/^        unsigned short  closing_wait2; \/* no longer used... *\/$/;"	m	struct:serial_struct32	file:
cmd	fs/compat_ioctl.c	/^	struct i2c_rdwr_ioctl_data cmd;$/;"	m	struct:i2c_rdwr_aligned	typeref:struct:i2c_rdwr_aligned::i2c_rdwr_ioctl_data	file:
cmd_attr_deregister_cpumask	kernel/taskstats.c	/^static int cmd_attr_deregister_cpumask(struct genl_info *info)$/;"	f	file:
cmd_attr_pid	kernel/taskstats.c	/^static int cmd_attr_pid(struct genl_info *info)$/;"	f	file:
cmd_attr_register_cpumask	kernel/taskstats.c	/^static int cmd_attr_register_cpumask(struct genl_info *info)$/;"	f	file:
cmd_attr_tgid	kernel/taskstats.c	/^static int cmd_attr_tgid(struct genl_info *info)$/;"	f	file:
cmd_bc	kernel/Makefile	/^      cmd_bc  = bc -q $(filter-out FORCE,$^) > $@$/;"	m
cmd_hzfile	kernel/Makefile	/^      cmd_hzfile = echo "hz=$(CONFIG_HZ)" > $@$/;"	m
cmd_len	fs/compat_ioctl.c	/^	unsigned char cmd_len;		\/* [i] SCSI command length ( <= 16 bytes) *\/$/;"	m	struct:sg_io_hdr32	file:
cmd_touch	kernel/Makefile	/^      cmd_touch = touch   $@$/;"	m
cmdline_parse_core	mm/page_alloc.c	/^static int __init cmdline_parse_core(char *p, unsigned long *core)$/;"	f	file:
cmdline_parse_kernelcore	mm/page_alloc.c	/^static int __init cmdline_parse_kernelcore(char *p)$/;"	f	file:
cmdline_parse_movablecore	mm/page_alloc.c	/^static int __init cmdline_parse_movablecore(char *p)$/;"	f	file:
cmdp	fs/compat_ioctl.c	/^	compat_uptr_t cmdp;		\/* [i], [*i] points to command to perform *\/$/;"	m	struct:sg_io_hdr32	file:
cmp_and_merge_page	mm/ksm.c	/^static void cmp_and_merge_page(struct page *page, struct rmap_item *rmap_item)$/;"	f	file:
cmp_name	kernel/module.c	/^static int cmp_name(const void *va, const void *vb)$/;"	f	file:
cmp_next_hrtimer_event	kernel/timer.c	/^static unsigned long cmp_next_hrtimer_event(unsigned long now,$/;"	f	file:
cmp_range	kernel/range.c	/^static int cmp_range(const void *x1, const void *x2)$/;"	f	file:
cmppid	kernel/cgroup.c	/^static int cmppid(const void *a, const void *b)$/;"	f	file:
cmpxchg_double_slab	mm/slub.c	/^static inline bool cmpxchg_double_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
cmpxchg_futex_value_locked	kernel/futex.c	/^static int cmpxchg_futex_value_locked(u32 *curval, u32 __user *uaddr,$/;"	f	file:
cn_escape	fs/coredump.c	/^static void cn_escape(char *str)$/;"	f	file:
cn_print_exe_file	fs/coredump.c	/^static int cn_print_exe_file(struct core_name *cn)$/;"	f	file:
cn_printf	fs/coredump.c	/^static int cn_printf(struct core_name *cn, const char *fmt, ...)$/;"	f	file:
cnt	kernel/cpuset.c	/^	int cnt;		\/* unprocessed events count *\/$/;"	m	struct:fmeter	file:
collapse_huge_page	mm/huge_memory.c	/^static void collapse_huge_page(struct mm_struct *mm,$/;"	f	file:
collect_garbage_slots	kernel/kprobes.c	/^static int __kprobes collect_garbage_slots(struct kprobe_insn_cache *c)$/;"	f	file:
collect_mm_slot	mm/huge_memory.c	/^static void collect_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
collect_mounts	fs/namespace.c	/^struct vfsmount *collect_mounts(struct path *path)$/;"	f
collect_one_slot	kernel/kprobes.c	/^static int __kprobes collect_one_slot(struct kprobe_insn_page *kip, int idx)$/;"	f	file:
collect_procs	mm/memory-failure.c	/^static void collect_procs(struct page *page, struct list_head *tokill)$/;"	f	file:
collect_procs_anon	mm/memory-failure.c	/^static void collect_procs_anon(struct page *page, struct list_head *to_kill,$/;"	f	file:
collect_procs_file	mm/memory-failure.c	/^static void collect_procs_file(struct page *page, struct list_head *to_kill,$/;"	f	file:
collect_signal	kernel/signal.c	/^static void collect_signal(int sig, struct sigpending *list, siginfo_t *info)$/;"	f	file:
color_gray	mm/kmemleak.c	/^static bool color_gray(const struct kmemleak_object *object)$/;"	f	file:
color_white	mm/kmemleak.c	/^static bool color_white(const struct kmemleak_object *object)$/;"	f	file:
colour_next	mm/slab.c	/^	unsigned int colour_next;	\/* Per-node cache coloring *\/$/;"	m	struct:kmem_list3	file:
colouroff	mm/slab.c	/^			unsigned long colouroff;$/;"	m	struct:slab::__anon18::__anon19	file:
comm	mm/kmemleak.c	/^	char comm[TASK_COMM_LEN];	\/* executable name *\/$/;"	m	struct:kmemleak_object	file:
command	fs/compat_ioctl.c	/^	u8 command;$/;"	m	struct:i2c_smbus_ioctl_data32	file:
commit_creds	kernel/cred.c	/^EXPORT_SYMBOL(commit_creds);$/;"	v
commit_creds	kernel/cred.c	/^int commit_creds(struct cred *new)$/;"	f
commit_tree	fs/namespace.c	/^static void commit_tree(struct mount *mnt)$/;"	f	file:
common_nsleep	kernel/posix-timers.c	/^static int common_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
common_timer_create	kernel/posix-timers.c	/^static int common_timer_create(struct k_itimer *new_timer)$/;"	f	file:
common_timer_del	kernel/posix-timers.c	/^static int common_timer_del(struct k_itimer *timer)$/;"	f	file:
common_timer_get	kernel/posix-timers.c	/^common_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)$/;"	f	file:
common_timer_set	kernel/posix-timers.c	/^common_timer_set(struct k_itimer *timr, int flags,$/;"	f	file:
compact_checklock_irqsave	mm/compaction.c	/^static bool compact_checklock_irqsave(spinlock_t *lock, unsigned long *flags,$/;"	f	file:
compact_control	mm/internal.h	/^struct compact_control {$/;"	s
compact_finished	mm/compaction.c	/^static int compact_finished(struct zone *zone,$/;"	f	file:
compact_node	mm/compaction.c	/^static void compact_node(int nid)$/;"	f	file:
compact_nodes	mm/compaction.c	/^static void compact_nodes(void)$/;"	f	file:
compact_pgdat	mm/compaction.c	/^void compact_pgdat(pg_data_t *pgdat, int order)$/;"	f
compact_trylock_irqsave	mm/compaction.c	/^static inline bool compact_trylock_irqsave(spinlock_t *lock,$/;"	f	file:
compact_zone	mm/compaction.c	/^static int compact_zone(struct zone *zone, struct compact_control *cc)$/;"	f	file:
compact_zone_order	mm/compaction.c	/^static unsigned long compact_zone_order(struct zone *zone,$/;"	f	file:
compaction_alloc	mm/compaction.c	/^static struct page *compaction_alloc(struct page *migratepage,$/;"	f	file:
compaction_ready	mm/vmscan.c	/^static inline bool compaction_ready(struct zone *zone, struct scan_control *sc)$/;"	f	file:
compaction_register_node	mm/compaction.c	/^int compaction_register_node(struct node *node)$/;"	f
compaction_suitable	mm/compaction.c	/^unsigned long compaction_suitable(struct zone *zone, int order)$/;"	f
compaction_unregister_node	mm/compaction.c	/^void compaction_unregister_node(struct node *node)$/;"	f
compare_css_sets	kernel/cgroup.c	/^static bool compare_css_sets(struct css_set *cg,$/;"	f	file:
compare_root	kernel/audit_tree.c	/^static int compare_root(struct vfsmount *mnt, void *arg)$/;"	f	file:
compare_single	fs/super.c	/^static int compare_single(struct super_block *s, void *p)$/;"	f	file:
compare_thresholds	mm/memcontrol.c	/^static int compare_thresholds(const void *a, const void *b)$/;"	f	file:
compat	fs/exec.c	/^		const compat_uptr_t __user *compat;$/;"	m	union:user_arg_ptr::__anon27	file:
compat_alloc_user_space	kernel/compat.c	/^EXPORT_SYMBOL_GPL(compat_alloc_user_space);$/;"	v
compat_alloc_user_space	kernel/compat.c	/^void __user *compat_alloc_user_space(unsigned long len)$/;"	f
compat_clock_nanosleep_restart	kernel/compat.c	/^static long compat_clock_nanosleep_restart(struct restart_block *restart)$/;"	f	file:
compat_core_sys_select	fs/compat.c	/^int compat_core_sys_select(int n, compat_ulong_t __user *inp,$/;"	f
compat_do_execve	fs/exec.c	/^static int compat_do_execve(const char *filename,$/;"	f	file:
compat_do_readv_writev	fs/compat.c	/^static ssize_t compat_do_readv_writev(int type, struct file *file,$/;"	f	file:
compat_exit_robust_list	kernel/futex_compat.c	/^void compat_exit_robust_list(struct task_struct *curr)$/;"	f
compat_filldir	fs/compat.c	/^static int compat_filldir(void *__buf, const char *name, int namlen,$/;"	f	file:
compat_filldir64	fs/compat.c	/^static int compat_filldir64(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
compat_fillonedir	fs/compat.c	/^static int compat_fillonedir(void *__buf, const char *name, int namlen,$/;"	f	file:
compat_get_bitmap	kernel/compat.c	/^long compat_get_bitmap(unsigned long *mask, const compat_ulong_t __user *umask,$/;"	f
compat_get_fd_set	fs/compat.c	/^int compat_get_fd_set(unsigned long nr, compat_ulong_t __user *ufdset,$/;"	f	file:
compat_get_timespec	kernel/compat.c	/^EXPORT_SYMBOL_GPL(compat_get_timespec);$/;"	v
compat_get_timespec	kernel/compat.c	/^int compat_get_timespec(struct timespec *ts, const void __user *uts)$/;"	f
compat_get_timeval	kernel/compat.c	/^EXPORT_SYMBOL_GPL(compat_get_timeval);$/;"	v
compat_get_timeval	kernel/compat.c	/^int compat_get_timeval(struct timeval *tv, const void __user *utv)$/;"	f
compat_get_timeval_convert	kernel/compat.c	/^static int compat_get_timeval_convert(struct timespec *o,$/;"	f	file:
compat_get_timex	kernel/compat.c	/^static int compat_get_timex(struct timex *txc, struct compat_timex __user *utp)$/;"	f	file:
compat_get_user_cpu_mask	kernel/compat.c	/^static int compat_get_user_cpu_mask(compat_ulong_t __user *user_mask_ptr,$/;"	f	file:
compat_getdents_callback	fs/compat.c	/^struct compat_getdents_callback {$/;"	s	file:
compat_getdents_callback64	fs/compat.c	/^struct compat_getdents_callback64 {$/;"	s	file:
compat_ioctl_check_table	fs/compat_ioctl.c	/^static int compat_ioctl_check_table(unsigned int xcmd)$/;"	f	file:
compat_ioctl_preallocate	fs/compat_ioctl.c	/^static int compat_ioctl_preallocate(struct file *file,$/;"	f	file:
compat_linux_dirent	fs/compat.c	/^struct compat_linux_dirent {$/;"	s	file:
compat_log	fs/compat.c	/^int compat_log = 1;$/;"	v
compat_nanosleep_restart	kernel/compat.c	/^static long compat_nanosleep_restart(struct restart_block *restart)$/;"	f	file:
compat_ncp_mount_data	fs/compat.c	/^struct compat_ncp_mount_data {$/;"	s	file:
compat_ncp_mount_data_v4	fs/compat.c	/^struct compat_ncp_mount_data_v4 {$/;"	s	file:
compat_nfs4_mount_data_v1	fs/compat.c	/^struct compat_nfs4_mount_data_v1 {$/;"	s	file:
compat_nfs_string	fs/compat.c	/^static inline void compat_nfs_string(struct nfs_string *dst,$/;"	f	file:
compat_nfs_string	fs/compat.c	/^struct compat_nfs_string {$/;"	s	file:
compat_old_linux_dirent	fs/compat.c	/^struct compat_old_linux_dirent {$/;"	s	file:
compat_printk	fs/compat.c	/^int compat_printk(const char *fmt, ...)$/;"	f
compat_process_vm_rw	mm/process_vm_access.c	/^compat_process_vm_rw(compat_pid_t pid,$/;"	f
compat_ptrace_request	kernel/ptrace.c	/^int compat_ptrace_request(struct task_struct *child, compat_long_t request,$/;"	f
compat_put_bitmap	kernel/compat.c	/^long compat_put_bitmap(compat_ulong_t __user *umask, unsigned long *mask,$/;"	f
compat_put_timespec	kernel/compat.c	/^EXPORT_SYMBOL_GPL(compat_put_timespec);$/;"	v
compat_put_timespec	kernel/compat.c	/^int compat_put_timespec(const struct timespec *ts, void __user *uts)$/;"	f
compat_put_timeval	kernel/compat.c	/^EXPORT_SYMBOL_GPL(compat_put_timeval);$/;"	v
compat_put_timeval	kernel/compat.c	/^int compat_put_timeval(const struct timeval *tv, void __user *utv)$/;"	f
compat_put_timeval_convert	kernel/compat.c	/^static int compat_put_timeval_convert(struct compat_timeval __user *o,$/;"	f	file:
compat_put_timex	kernel/compat.c	/^static int compat_put_timex(struct compat_timex __user *utp, struct timex *txc)$/;"	f	file:
compat_readdir_callback	fs/compat.c	/^struct compat_readdir_callback {$/;"	s	file:
compat_readv	fs/compat.c	/^static size_t compat_readv(struct file *file,$/;"	f	file:
compat_restore_altstack	kernel/signal.c	/^int compat_restore_altstack(const compat_stack_t __user *uss)$/;"	f
compat_rw_copy_check_uvector	fs/compat.c	/^ssize_t compat_rw_copy_check_uvector(int type,$/;"	f
compat_sel_arg_struct	fs/compat.c	/^struct compat_sel_arg_struct {$/;"	s	file:
compat_set_fd_set	fs/compat.c	/^int compat_set_fd_set(unsigned long nr, compat_ulong_t __user *ufdset,$/;"	f	file:
compat_sg_req_info	fs/compat_ioctl.c	/^struct compat_sg_req_info { \/* used by SG_GET_REQUEST_TABLE ioctl() *\/$/;"	s	file:
compat_sig_setmask	kernel/compat.c	/^static inline void compat_sig_setmask(sigset_t *blocked, compat_sigset_word set)$/;"	f	file:
compat_sys_adjtimex	kernel/compat.c	/^asmlinkage long compat_sys_adjtimex(struct compat_timex __user *utp)$/;"	f
compat_sys_clock_adjtime	kernel/compat.c	/^long compat_sys_clock_adjtime(clockid_t which_clock,$/;"	f
compat_sys_clock_getres	kernel/compat.c	/^long compat_sys_clock_getres(clockid_t which_clock,$/;"	f
compat_sys_clock_gettime	kernel/compat.c	/^long compat_sys_clock_gettime(clockid_t which_clock,$/;"	f
compat_sys_clock_nanosleep	kernel/compat.c	/^long compat_sys_clock_nanosleep(clockid_t which_clock, int flags,$/;"	f
compat_sys_clock_settime	kernel/compat.c	/^long compat_sys_clock_settime(clockid_t which_clock,$/;"	f
compat_sys_epoll_pwait	fs/compat.c	/^asmlinkage long compat_sys_epoll_pwait(int epfd,$/;"	f
compat_sys_epoll_pwait	kernel/sys_ni.c	/^cond_syscall(compat_sys_epoll_pwait);$/;"	v
compat_sys_execve	fs/exec.c	/^asmlinkage long compat_sys_execve(const char __user * filename,$/;"	f
compat_sys_fcntl	fs/compat.c	/^asmlinkage long compat_sys_fcntl(unsigned int fd, unsigned int cmd,$/;"	f
compat_sys_fcntl64	fs/compat.c	/^asmlinkage long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,$/;"	f
compat_sys_fstatfs	fs/compat.c	/^asmlinkage long compat_sys_fstatfs(unsigned int fd, struct compat_statfs __user *buf)$/;"	f
compat_sys_fstatfs64	fs/compat.c	/^asmlinkage long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz, struct compat_statfs64 __user *buf)$/;"	f
compat_sys_futex	kernel/sys_ni.c	/^cond_syscall(compat_sys_futex);$/;"	v
compat_sys_futimesat	fs/compat.c	/^asmlinkage long compat_sys_futimesat(unsigned int dfd, const char __user *filename, struct compat_timeval __user *t)$/;"	f
compat_sys_get_mempolicy	kernel/sys_ni.c	/^cond_syscall(compat_sys_get_mempolicy);$/;"	v
compat_sys_get_mempolicy	mm/mempolicy.c	/^asmlinkage long compat_sys_get_mempolicy(int __user *policy,$/;"	f
compat_sys_get_robust_list	kernel/sys_ni.c	/^cond_syscall(compat_sys_get_robust_list);$/;"	v
compat_sys_getdents	fs/compat.c	/^asmlinkage long compat_sys_getdents(unsigned int fd,$/;"	f
compat_sys_getdents64	fs/compat.c	/^asmlinkage long compat_sys_getdents64(unsigned int fd,$/;"	f
compat_sys_getrlimit	kernel/compat.c	/^asmlinkage long compat_sys_getrlimit(unsigned int resource,$/;"	f
compat_sys_getrusage	kernel/compat.c	/^asmlinkage long compat_sys_getrusage(int who, struct compat_rusage __user *ru)$/;"	f
compat_sys_getsockopt	kernel/sys_ni.c	/^cond_syscall(compat_sys_getsockopt);$/;"	v
compat_sys_gettimeofday	kernel/compat.c	/^asmlinkage long compat_sys_gettimeofday(struct compat_timeval __user *tv,$/;"	f
compat_sys_io_getevents	fs/compat.c	/^compat_sys_io_getevents(aio_context_t ctx_id,$/;"	f
compat_sys_io_setup	fs/compat.c	/^compat_sys_io_setup(unsigned nr_reqs, u32 __user *ctx32p)$/;"	f
compat_sys_io_submit	fs/compat.c	/^compat_sys_io_submit(aio_context_t ctx_id, int nr, u32 __user *iocb)$/;"	f
compat_sys_ioctl	fs/compat_ioctl.c	/^asmlinkage long compat_sys_ioctl(unsigned int fd, unsigned int cmd,$/;"	f
compat_sys_ipc	kernel/sys_ni.c	/^cond_syscall(compat_sys_ipc);$/;"	v
compat_sys_kexec_load	kernel/kexec.c	/^asmlinkage long compat_sys_kexec_load(unsigned long entry,$/;"	f
compat_sys_kexec_load	kernel/sys_ni.c	/^cond_syscall(compat_sys_kexec_load);$/;"	v
compat_sys_keyctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_keyctl);$/;"	v
compat_sys_mbind	kernel/sys_ni.c	/^cond_syscall(compat_sys_mbind);$/;"	v
compat_sys_mbind	mm/mempolicy.c	/^asmlinkage long compat_sys_mbind(compat_ulong_t start, compat_ulong_t len,$/;"	f
compat_sys_migrate_pages	kernel/compat.c	/^asmlinkage long compat_sys_migrate_pages(compat_pid_t pid,$/;"	f
compat_sys_migrate_pages	kernel/sys_ni.c	/^cond_syscall(compat_sys_migrate_pages);$/;"	v
compat_sys_mount	fs/compat.c	/^asmlinkage long compat_sys_mount(const char __user * dev_name,$/;"	f
compat_sys_move_pages	kernel/compat.c	/^asmlinkage long compat_sys_move_pages(pid_t pid, unsigned long nr_pages,$/;"	f
compat_sys_move_pages	kernel/sys_ni.c	/^cond_syscall(compat_sys_move_pages);$/;"	v
compat_sys_mq_getsetattr	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_getsetattr);$/;"	v
compat_sys_mq_notify	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_notify);$/;"	v
compat_sys_mq_open	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_open);$/;"	v
compat_sys_mq_timedreceive	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_timedreceive);$/;"	v
compat_sys_mq_timedsend	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_timedsend);$/;"	v
compat_sys_msgctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_msgctl);$/;"	v
compat_sys_msgrcv	kernel/sys_ni.c	/^cond_syscall(compat_sys_msgrcv);$/;"	v
compat_sys_msgsnd	kernel/sys_ni.c	/^cond_syscall(compat_sys_msgsnd);$/;"	v
compat_sys_nanosleep	kernel/compat.c	/^asmlinkage long compat_sys_nanosleep(struct compat_timespec __user *rqtp,$/;"	f
compat_sys_newfstat	fs/compat.c	/^asmlinkage long compat_sys_newfstat(unsigned int fd,$/;"	f
compat_sys_newfstatat	fs/compat.c	/^asmlinkage long compat_sys_newfstatat(unsigned int dfd,$/;"	f
compat_sys_newlstat	fs/compat.c	/^asmlinkage long compat_sys_newlstat(const char __user * filename,$/;"	f
compat_sys_newstat	fs/compat.c	/^asmlinkage long compat_sys_newstat(const char __user * filename,$/;"	f
compat_sys_old_getrlimit	kernel/compat.c	/^asmlinkage long compat_sys_old_getrlimit(unsigned int resource,$/;"	f
compat_sys_old_readdir	fs/compat.c	/^asmlinkage long compat_sys_old_readdir(unsigned int fd,$/;"	f
compat_sys_old_select	fs/compat.c	/^asmlinkage long compat_sys_old_select(struct compat_sel_arg_struct __user *arg)$/;"	f
compat_sys_open_by_handle_at	kernel/sys_ni.c	/^cond_syscall(compat_sys_open_by_handle_at);$/;"	v
compat_sys_ppoll	fs/compat.c	/^asmlinkage long compat_sys_ppoll(struct pollfd __user *ufds,$/;"	f
compat_sys_preadv	fs/compat.c	/^compat_sys_preadv(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_preadv64	fs/compat.c	/^compat_sys_preadv64(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_process_vm_readv	kernel/sys_ni.c	/^cond_syscall(compat_sys_process_vm_readv);$/;"	v
compat_sys_process_vm_readv	mm/process_vm_access.c	/^compat_sys_process_vm_readv(compat_pid_t pid,$/;"	f
compat_sys_process_vm_writev	kernel/sys_ni.c	/^cond_syscall(compat_sys_process_vm_writev);$/;"	v
compat_sys_process_vm_writev	mm/process_vm_access.c	/^compat_sys_process_vm_writev(compat_pid_t pid,$/;"	f
compat_sys_pselect6	fs/compat.c	/^asmlinkage long compat_sys_pselect6(int n, compat_ulong_t __user *inp,$/;"	f
compat_sys_ptrace	kernel/ptrace.c	/^asmlinkage long compat_sys_ptrace(compat_long_t request, compat_long_t pid,$/;"	f
compat_sys_pwritev	fs/compat.c	/^compat_sys_pwritev(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_pwritev64	fs/compat.c	/^compat_sys_pwritev64(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_readv	fs/compat.c	/^compat_sys_readv(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_recv	kernel/sys_ni.c	/^cond_syscall(compat_sys_recv);$/;"	v
compat_sys_recvfrom	kernel/sys_ni.c	/^cond_syscall(compat_sys_recvfrom);$/;"	v
compat_sys_recvmmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_recvmmsg);$/;"	v
compat_sys_recvmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_recvmsg);$/;"	v
compat_sys_sched_getaffinity	kernel/compat.c	/^asmlinkage long compat_sys_sched_getaffinity(compat_pid_t pid, unsigned int len,$/;"	f
compat_sys_sched_setaffinity	kernel/compat.c	/^asmlinkage long compat_sys_sched_setaffinity(compat_pid_t pid,$/;"	f
compat_sys_select	fs/compat.c	/^asmlinkage long compat_sys_select(int n, compat_ulong_t __user *inp,$/;"	f
compat_sys_semctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_semctl);$/;"	v
compat_sys_semtimedop	kernel/sys_ni.c	/^cond_syscall(compat_sys_semtimedop);$/;"	v
compat_sys_sendfile	fs/compat.c	/^asmlinkage long compat_sys_sendfile(int out_fd, int in_fd,$/;"	f
compat_sys_sendmmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_sendmmsg);$/;"	v
compat_sys_sendmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_sendmsg);$/;"	v
compat_sys_set_mempolicy	kernel/sys_ni.c	/^cond_syscall(compat_sys_set_mempolicy);$/;"	v
compat_sys_set_mempolicy	mm/mempolicy.c	/^asmlinkage long compat_sys_set_mempolicy(int mode, compat_ulong_t __user *nmask,$/;"	f
compat_sys_set_robust_list	kernel/sys_ni.c	/^cond_syscall(compat_sys_set_robust_list);$/;"	v
compat_sys_setrlimit	kernel/compat.c	/^asmlinkage long compat_sys_setrlimit(unsigned int resource,$/;"	f
compat_sys_setsockopt	kernel/sys_ni.c	/^cond_syscall(compat_sys_setsockopt);$/;"	v
compat_sys_settimeofday	kernel/compat.c	/^asmlinkage long compat_sys_settimeofday(struct compat_timeval __user *tv,$/;"	f
compat_sys_shmat	kernel/sys_ni.c	/^cond_syscall(compat_sys_shmat);$/;"	v
compat_sys_shmctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_shmctl);$/;"	v
compat_sys_signalfd	fs/compat.c	/^asmlinkage long compat_sys_signalfd(int ufd,$/;"	f
compat_sys_signalfd	kernel/sys_ni.c	/^cond_syscall(compat_sys_signalfd);$/;"	v
compat_sys_signalfd4	fs/compat.c	/^asmlinkage long compat_sys_signalfd4(int ufd,$/;"	f
compat_sys_signalfd4	kernel/sys_ni.c	/^cond_syscall(compat_sys_signalfd4);$/;"	v
compat_sys_sigpending	kernel/compat.c	/^asmlinkage long compat_sys_sigpending(compat_old_sigset_t __user *set)$/;"	f
compat_sys_socketcall	kernel/sys_ni.c	/^cond_syscall(compat_sys_socketcall);$/;"	v
compat_sys_statfs	fs/compat.c	/^asmlinkage long compat_sys_statfs(const char __user *pathname, struct compat_statfs __user *buf)$/;"	f
compat_sys_statfs64	fs/compat.c	/^asmlinkage long compat_sys_statfs64(const char __user *pathname, compat_size_t sz, struct compat_statfs64 __user *buf)$/;"	f
compat_sys_stime	kernel/compat.c	/^asmlinkage long compat_sys_stime(compat_time_t __user *tptr)$/;"	f
compat_sys_sysctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_sysctl);$/;"	v
compat_sys_sysctl	kernel/sysctl_binary.c	/^asmlinkage long compat_sys_sysctl(struct compat_sysctl_args __user *args)$/;"	f
compat_sys_sysinfo	kernel/compat.c	/^compat_sys_sysinfo(struct compat_sysinfo __user *info)$/;"	f
compat_sys_time	kernel/compat.c	/^asmlinkage long compat_sys_time(compat_time_t __user * tloc)$/;"	f
compat_sys_timer_create	kernel/compat.c	/^long compat_sys_timer_create(clockid_t which_clock,$/;"	f
compat_sys_timer_gettime	kernel/compat.c	/^long compat_sys_timer_gettime(timer_t timer_id,$/;"	f
compat_sys_timer_settime	kernel/compat.c	/^long compat_sys_timer_settime(timer_t timer_id, int flags,$/;"	f
compat_sys_timerfd_gettime	kernel/sys_ni.c	/^cond_syscall(compat_sys_timerfd_gettime);$/;"	v
compat_sys_timerfd_settime	kernel/sys_ni.c	/^cond_syscall(compat_sys_timerfd_settime);$/;"	v
compat_sys_times	kernel/compat.c	/^asmlinkage long compat_sys_times(struct compat_tms __user *tbuf)$/;"	f
compat_sys_ustat	fs/compat.c	/^asmlinkage long compat_sys_ustat(unsigned dev, struct compat_ustat __user *u)$/;"	f
compat_sys_utime	fs/compat.c	/^asmlinkage long compat_sys_utime(const char __user *filename,$/;"	f
compat_sys_utimensat	fs/compat.c	/^asmlinkage long compat_sys_utimensat(unsigned int dfd, const char __user *filename, struct compat_timespec __user *t, int flags)$/;"	f
compat_sys_utimes	fs/compat.c	/^asmlinkage long compat_sys_utimes(const char __user *filename, struct compat_timeval __user *t)$/;"	f
compat_sys_vmsplice	fs/compat.c	/^compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,$/;"	f
compat_sys_writev	fs/compat.c	/^compat_sys_writev(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sysctl_args	kernel/sysctl_binary.c	/^struct compat_sysctl_args {$/;"	s	file:
compat_sysinfo	kernel/compat.c	/^struct compat_sysinfo {$/;"	s	file:
compat_video_event	fs/compat_ioctl.c	/^struct compat_video_event {$/;"	s	file:
compat_video_spu_palette	fs/compat_ioctl.c	/^struct compat_video_spu_palette {$/;"	s	file:
compat_video_still_picture	fs/compat_ioctl.c	/^struct compat_video_still_picture {$/;"	s	file:
compat_writev	fs/compat.c	/^static size_t compat_writev(struct file *file,$/;"	f	file:
complete_and_exit	kernel/exit.c	/^EXPORT_SYMBOL(complete_and_exit);$/;"	v
complete_and_exit	kernel/exit.c	/^void complete_and_exit(struct completion *comp, long code)$/;"	f
complete_formation	kernel/module.c	/^static int complete_formation(struct module *mod, struct load_info *info)$/;"	f	file:
complete_signal	kernel/signal.c	/^static void complete_signal(int sig, struct task_struct *p, int group)$/;"	f	file:
complete_vfork_done	kernel/fork.c	/^static void complete_vfork_done(struct task_struct *tsk)$/;"	f	file:
complete_walk	fs/namei.c	/^static int complete_walk(struct nameidata *nd)$/;"	f	file:
completed	kernel/rcutiny_plugin.h	/^	u8 completed;		\/* Last grace period completed. *\/$/;"	m	struct:rcu_preempt_ctrlblk
completed	kernel/rcutorture.c	/^	int (*completed)(void);$/;"	m	struct:rcu_torture_ops	file:
completed	kernel/rcutree.h	/^	unsigned long	completed;	\/* Track rsp->completed gp number *\/$/;"	m	struct:rcu_data
completed	kernel/rcutree.h	/^	unsigned long completed;		\/* # of last completed gp. *\/$/;"	m	struct:rcu_state
completed	kernel/rcutree.h	/^	unsigned long completed; \/* Last GP completed for this node. *\/$/;"	m	struct:rcu_node
completion	kernel/rcupdate.c	/^	struct completion completion;$/;"	m	struct:rcu_synchronize	typeref:struct:rcu_synchronize::completion	file:
completion	kernel/srcu.c	/^	struct completion completion;$/;"	m	struct:rcu_synchronize	typeref:struct:rcu_synchronize::completion	file:
completion	kernel/stop_machine.c	/^	struct completion	completion;	\/* fired if nr_todo reaches 0 *\/$/;"	m	struct:cpu_stop_done	typeref:struct:cpu_stop_done::completion	file:
compound	mm/memory-failure.c	754;"	d	file:
compound	mm/memory-failure.c	811;"	d	file:
congestion_wait	mm/backing-dev.c	/^EXPORT_SYMBOL(congestion_wait);$/;"	v
congestion_wait	mm/backing-dev.c	/^long congestion_wait(int sync, long timeout)$/;"	f
congestion_wqh	mm/backing-dev.c	/^static wait_queue_head_t congestion_wqh[2] = {$/;"	v	file:
cons	kernel/printk.c	/^	size_t cons;			\/* bytes written to console *\/$/;"	m	struct:cont	file:
cons	kernel/printk.c	/^	size_t cons;$/;"	m	struct:cont	file:
console_cmdline	kernel/printk.c	/^static struct console_cmdline console_cmdline[MAX_CMDLINECONSOLES];$/;"	v	typeref:struct:console_cmdline	file:
console_cmdline	kernel/printk.c	/^struct console_cmdline$/;"	s	file:
console_conditional_schedule	kernel/printk.c	/^EXPORT_SYMBOL(console_conditional_schedule);$/;"	v
console_conditional_schedule	kernel/printk.c	/^void __sched console_conditional_schedule(void)$/;"	f
console_cont_flush	kernel/printk.c	/^static void console_cont_flush(char *text, size_t size)$/;"	f	file:
console_cpu_notify	kernel/printk.c	/^static int __cpuinit console_cpu_notify(struct notifier_block *self,$/;"	f	file:
console_device	kernel/printk.c	/^struct tty_driver *console_device(int *index)$/;"	f
console_drivers	kernel/printk.c	/^EXPORT_SYMBOL_GPL(console_drivers);$/;"	v
console_drivers	kernel/printk.c	/^struct console *console_drivers;$/;"	v	typeref:struct:console
console_idx	kernel/printk.c	/^static u32 console_idx;$/;"	v	file:
console_lock	kernel/printk.c	/^EXPORT_SYMBOL(console_lock);$/;"	v
console_lock	kernel/printk.c	/^void console_lock(void)$/;"	f
console_lock_dep_map	kernel/printk.c	/^static struct lockdep_map console_lock_dep_map = {$/;"	v	typeref:struct:lockdep_map	file:
console_locked	kernel/printk.c	/^static int console_locked, console_suspended;$/;"	v	file:
console_may_schedule	kernel/printk.c	/^static int console_may_schedule;$/;"	v	file:
console_prev	kernel/printk.c	/^static enum log_flags console_prev;$/;"	v	typeref:enum:log_flags	file:
console_printk	kernel/printk.c	/^int console_printk[4] = {$/;"	v
console_seq	kernel/printk.c	/^static u64 console_seq;$/;"	v	file:
console_set_on_cmdline	kernel/printk.c	/^EXPORT_SYMBOL(console_set_on_cmdline);$/;"	v
console_set_on_cmdline	kernel/printk.c	/^int console_set_on_cmdline;$/;"	v
console_setup	kernel/printk.c	/^static int __init console_setup(char *str)$/;"	f	file:
console_start	kernel/printk.c	/^EXPORT_SYMBOL(console_start);$/;"	v
console_start	kernel/printk.c	/^void console_start(struct console *console)$/;"	f
console_stop	kernel/printk.c	/^EXPORT_SYMBOL(console_stop);$/;"	v
console_stop	kernel/printk.c	/^void console_stop(struct console *console)$/;"	f
console_suspend_disable	kernel/printk.c	/^static int __init console_suspend_disable(char *str)$/;"	f	file:
console_suspend_enabled	kernel/printk.c	/^EXPORT_SYMBOL(console_suspend_enabled);$/;"	v
console_suspend_enabled	kernel/printk.c	/^bool console_suspend_enabled = 1;$/;"	v
console_suspended	kernel/printk.c	/^static int console_locked, console_suspended;$/;"	v	file:
console_trylock	kernel/printk.c	/^EXPORT_SYMBOL(console_trylock);$/;"	v
console_trylock	kernel/printk.c	/^int console_trylock(void)$/;"	f
console_unblank	kernel/printk.c	/^void console_unblank(void)$/;"	f
console_unlock	kernel/printk.c	/^EXPORT_SYMBOL(console_unlock);$/;"	v
console_unlock	kernel/printk.c	/^void console_unlock(void)$/;"	f
constrained_alloc	mm/oom_kill.c	/^static enum oom_constraint constrained_alloc(struct zonelist *zonelist,$/;"	f	file:
consume_stock	mm/memcontrol.c	/^static bool consume_stock(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f	file:
cont	kernel/printk.c	/^static struct cont {$/;"	s	file:
cont	kernel/printk.c	/^} cont;$/;"	v	typeref:struct:cont	file:
cont_add	kernel/printk.c	/^static bool cont_add(int facility, int level, const char *text, size_t len)$/;"	f	file:
cont_expand_zero	fs/buffer.c	/^static int cont_expand_zero(struct file *file, struct address_space *mapping,$/;"	f	file:
cont_flush	kernel/printk.c	/^static void cont_flush(enum log_flags flags)$/;"	f	file:
cont_print_text	kernel/printk.c	/^static size_t cont_print_text(char *text, size_t size) { return 0; }$/;"	f	file:
cont_print_text	kernel/printk.c	/^static size_t cont_print_text(char *text, size_t size)$/;"	f	file:
cont_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(cont_write_begin);$/;"	v
cont_write_begin	fs/buffer.c	/^int cont_write_begin(struct file *file, struct address_space *mapping,$/;"	f
contended	mm/internal.h	/^	bool contended;			\/* True if a lock was contended *\/$/;"	m	struct:compact_control
context_tracking_task_switch	kernel/context_tracking.c	/^void context_tracking_task_switch(struct task_struct *prev,$/;"	f
contig_hint	mm/percpu.c	/^	int			contig_hint;	\/* max contiguous size hint *\/$/;"	m	struct:pcpu_chunk	file:
contig_page_data	mm/bootmem.c	/^EXPORT_SYMBOL(contig_page_data);$/;"	v
contig_page_data	mm/bootmem.c	/^struct pglist_data __refdata contig_page_data = {$/;"	v	typeref:struct:__refdata
contig_page_data	mm/nobootmem.c	/^EXPORT_SYMBOL(contig_page_data);$/;"	v
contig_page_data	mm/nobootmem.c	/^struct pglist_data __refdata contig_page_data;$/;"	v	typeref:struct:__refdata
contig_page_info	mm/vmstat.c	/^struct contig_page_info {$/;"	s	file:
convert	kernel/sysctl_binary.c	/^	bin_convert_t		*convert;$/;"	m	struct:bin_table	file:
convert_kthread_status	kernel/rcutree_trace.c	/^static char convert_kthread_status(unsigned int kthread_status)$/;"	f	file:
cookie	fs/eventpoll.c	/^	void *cookie;$/;"	m	struct:nested_call_node	file:
cookie	kernel/async.c	/^	async_cookie_t		cookie;$/;"	m	struct:async_entry	file:
copy_creds	kernel/cred.c	/^int copy_creds(struct task_struct *p, unsigned long clone_flags)$/;"	f
copy_event_to_user	fs/notify/inotify/inotify_user.c	/^static ssize_t copy_event_to_user(struct fsnotify_group *group,$/;"	f	file:
copy_fdtable	fs/file.c	/^static void copy_fdtable(struct fdtable *nfdt, struct fdtable *ofdt)$/;"	f	file:
copy_files	kernel/fork.c	/^static int copy_files(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_flags	kernel/fork.c	/^static void copy_flags(unsigned long clone_flags, struct task_struct *p)$/;"	f	file:
copy_fs	kernel/fork.c	/^static int copy_fs(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_fs_struct	fs/fs_struct.c	/^struct fs_struct *copy_fs_struct(struct fs_struct *old)$/;"	f
copy_gigantic_page	mm/hugetlb.c	/^static void copy_gigantic_page(struct page *dst, struct page *src)$/;"	f	file:
copy_huge_page	mm/hugetlb.c	/^void copy_huge_page(struct page *dst, struct page *src)$/;"	f
copy_huge_pmd	mm/huge_memory.c	/^int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_hugetlb_page_range	mm/hugetlb.c	/^int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,$/;"	f
copy_io	kernel/fork.c	/^static int copy_io(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_iocb	fs/compat.c	/^copy_iocb(long nr, u32 __user *ptr32, struct iocb __user * __user *ptr64)$/;"	f	file:
copy_kprobe	kernel/kprobes.c	/^static inline void copy_kprobe(struct kprobe *ap, struct kprobe *p)$/;"	f	file:
copy_mm	kernel/fork.c	/^static int copy_mm(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_mnt_ns	fs/namespace.c	/^struct mnt_namespace *copy_mnt_ns(unsigned long flags, struct mnt_namespace *ns,$/;"	f
copy_module_from_fd	kernel/module.c	/^static int copy_module_from_fd(int fd, struct load_info *info)$/;"	f	file:
copy_module_from_user	kernel/module.c	/^static int copy_module_from_user(const void __user *umod, unsigned long len,$/;"	f	file:
copy_mount_options	fs/namespace.c	/^int copy_mount_options(const void __user * data, unsigned long *where)$/;"	f
copy_mount_string	fs/namespace.c	/^int copy_mount_string(const void __user *data, char **where)$/;"	f
copy_namespaces	kernel/nsproxy.c	/^int copy_namespaces(unsigned long flags, struct task_struct *tsk)$/;"	f
copy_nodes_to_user	mm/mempolicy.c	/^static int copy_nodes_to_user(unsigned long __user *mask, unsigned long maxnode,$/;"	f	file:
copy_one_pte	mm/memory.c	/^copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_page_range	mm/memory.c	/^int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_pid_ns	kernel/pid_namespace.c	/^struct pid_namespace *copy_pid_ns(unsigned long flags,$/;"	f
copy_pmd_range	mm/memory.c	/^static inline int copy_pmd_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_process	kernel/fork.c	/^static struct task_struct *copy_process(unsigned long clone_flags,$/;"	f	file:
copy_pte_range	mm/memory.c	/^int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_pud_range	mm/memory.c	/^static inline int copy_pud_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_sighand	kernel/fork.c	/^static int copy_sighand(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_siginfo_to_user	fs/compat_binfmt_elf.c	45;"	d	file:
copy_siginfo_to_user	kernel/signal.c	/^int copy_siginfo_to_user(siginfo_t __user *to, siginfo_t *from)$/;"	f
copy_signal	kernel/fork.c	/^static int copy_signal(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_strings	fs/exec.c	/^static int copy_strings(int argc, struct user_arg_ptr argv,$/;"	f	file:
copy_strings_kernel	fs/exec.c	/^EXPORT_SYMBOL(copy_strings_kernel);$/;"	v
copy_strings_kernel	fs/exec.c	/^int copy_strings_kernel(int argc, const char *const *__argv,$/;"	f
copy_to_high_bio_irq	mm/bounce.c	/^static void copy_to_high_bio_irq(struct bio *to, struct bio *from)$/;"	f	file:
copy_tree	fs/namespace.c	/^struct mount *copy_tree(struct mount *mnt, struct dentry *dentry,$/;"	f
copy_user_gigantic_page	mm/memory.c	/^static void copy_user_gigantic_page(struct page *dst, struct page *src,$/;"	f	file:
copy_user_huge_page	mm/memory.c	/^void copy_user_huge_page(struct page *dst, struct page *src,$/;"	f
copy_utsname	kernel/utsname.c	/^struct uts_namespace *copy_utsname(unsigned long flags,$/;"	f
copy_vma	mm/mmap.c	/^struct vm_area_struct *copy_vma(struct vm_area_struct **vmap,$/;"	f
core_kernel_data	kernel/extable.c	/^int core_kernel_data(unsigned long addr)$/;"	f
core_kernel_text	kernel/extable.c	/^int core_kernel_text(unsigned long addr)$/;"	f
core_name	fs/coredump.c	/^struct core_name {$/;"	s	file:
core_pattern	fs/coredump.c	/^char core_pattern[CORENAME_MAX_SIZE] = "core";$/;"	v
core_pipe_limit	fs/coredump.c	/^unsigned int core_pipe_limit;$/;"	v
core_sys_select	fs/select.c	/^int core_sys_select(int n, fd_set __user *inp, fd_set __user *outp,$/;"	f
core_uses_pid	fs/coredump.c	/^int core_uses_pid;$/;"	v
coredump_filter_setup	kernel/fork.c	/^static int __init coredump_filter_setup(char *s)$/;"	f	file:
coredump_finish	fs/coredump.c	/^static void coredump_finish(struct mm_struct *mm)$/;"	f	file:
coredump_wait	fs/coredump.c	/^static int coredump_wait(int exit_code, struct core_state *core_state)$/;"	f	file:
corename	fs/coredump.c	/^	char *corename;$/;"	m	struct:core_name	file:
count	fs/aio.c	/^	long count; \/* number of requests left to allocate *\/$/;"	m	struct:kiocb_batch	file:
count	fs/compat.c	/^	int count;$/;"	m	struct:compat_getdents_callback	file:
count	fs/compat.c	/^	int count;$/;"	m	struct:compat_getdents_callback64	file:
count	fs/eventfd.c	/^	__u64 count;$/;"	m	struct:eventfd_ctx	file:
count	fs/exec.c	/^static int count(struct user_arg_ptr argv, int max)$/;"	f	file:
count	fs/ext3/namei.c	/^	__le16 count;$/;"	m	struct:dx_countlimit	file:
count	fs/mount.h	/^	atomic_t		count;$/;"	m	struct:mnt_namespace
count	fs/readdir.c	/^	int count;$/;"	m	struct:getdents_callback	file:
count	fs/readdir.c	/^	int count;$/;"	m	struct:getdents_callback64	file:
count	kernel/audit_tree.c	/^	atomic_t count;$/;"	m	struct:audit_tree	file:
count	kernel/audit_tree.c	/^	int count;$/;"	m	struct:audit_chunk	file:
count	kernel/audit_watch.c	/^	atomic_t		count;	\/* reference count *\/$/;"	m	struct:audit_watch	file:
count	lib/radix-tree.c	/^	unsigned int	count;$/;"	m	struct:radix_tree_node	file:
count	mm/kmemleak.c	/^	int count;$/;"	m	struct:kmemleak_object	file:
count	mm/memcontrol.c	/^	long count[MEM_CGROUP_STAT_NSTATS];$/;"	m	struct:mem_cgroup_stat_cpu	file:
count	mm/slub.c	/^	unsigned long count;$/;"	m	struct:loc_track	file:
count	mm/slub.c	/^	unsigned long count;$/;"	m	struct:location	file:
count_compact_event	mm/compaction.c	/^static inline void count_compact_event(enum vm_event_item item)$/;"	f	file:
count_compact_event	mm/compaction.c	32;"	d	file:
count_compact_events	mm/compaction.c	/^static inline void count_compact_events(enum vm_event_item item, long delta)$/;"	f	file:
count_compact_events	mm/compaction.c	33;"	d	file:
count_free	mm/slub.c	/^static int count_free(struct page *page)$/;"	f	file:
count_history_pages	mm/readahead.c	/^static pgoff_t count_history_pages(struct address_space *mapping,$/;"	f	file:
count_inuse	mm/slub.c	/^static int count_inuse(struct page *page)$/;"	f	file:
count_matching_names	kernel/lockdep.c	/^static int count_matching_names(struct lock_class *new_class)$/;"	f	file:
count_open_files	fs/file.c	/^static int count_open_files(struct fdtable *fdt)$/;"	f	file:
count_partial	mm/slub.c	/^static unsigned long count_partial(struct kmem_cache_node *n,$/;"	f	file:
count_swap_pages	mm/swapfile.c	/^unsigned int count_swap_pages(int type, int free)$/;"	f
count_total	mm/slub.c	/^static int count_total(struct page *page)$/;"	f	file:
cow_user_page	mm/memory.c	/^static inline void cow_user_page(struct page *dst, struct page *src, unsigned long va, struct vm_area_struct *vma)$/;"	f	file:
cp_compat_stat	fs/compat.c	/^static int cp_compat_stat(struct kstat *stat, struct compat_stat __user *ubuf)$/;"	f	file:
cp_new_stat	fs/stat.c	/^static int cp_new_stat(struct kstat *stat, struct stat __user *statbuf)$/;"	f	file:
cp_new_stat64	fs/stat.c	/^static long cp_new_stat64(struct kstat *stat, struct stat64 __user *statbuf)$/;"	f	file:
cp_old_stat	fs/stat.c	/^static int cp_old_stat(struct kstat *stat, struct __old_kernel_stat __user * statbuf)$/;"	f	file:
cpu	kernel/kthread.c	/^	unsigned int cpu;$/;"	m	struct:kthread	file:
cpu	kernel/rcutree.h	/^	int cpu;$/;"	m	struct:rcu_data
cpu	kernel/smpboot.c	/^	unsigned int			cpu;$/;"	m	struct:smpboot_thread_data	file:
cpu	kernel/workqueue.c	/^	unsigned int		cpu;		\/* I: the associated cpu *\/$/;"	m	struct:worker_pool	file:
cpu	mm/slub.c	/^	int cpu;		\/* Was running on cpu *\/$/;"	m	struct:track	file:
cpu0_err	kernel/watchdog.c	/^static unsigned long cpu0_err;$/;"	v	file:
cpu_active_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_active_mask);$/;"	v
cpu_active_mask	kernel/cpu.c	/^const struct cpumask *const cpu_active_mask = to_cpumask(cpu_active_bits);$/;"	v
cpu_all_bits	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_all_bits);$/;"	v
cpu_bit_bitmap	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(cpu_bit_bitmap);$/;"	v
cpu_bit_bitmap	kernel/cpu.c	/^const unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)] = {$/;"	v
cpu_cache_get	mm/slab.c	/^static inline struct array_cache *cpu_cache_get(struct kmem_cache *cachep)$/;"	f	file:
cpu_callback	kernel/softirq.c	/^static int __cpuinit cpu_callback(struct notifier_block *nfb,$/;"	f	file:
cpu_callback	mm/vmscan.c	/^static int cpu_callback(struct notifier_block *nfb, unsigned long action,$/;"	f	file:
cpu_clock_sample	kernel/posix-cpu-timers.c	/^static int cpu_clock_sample(const clockid_t which_clock, struct task_struct *p,$/;"	f	file:
cpu_clock_sample_group	kernel/posix-cpu-timers.c	/^static int cpu_clock_sample_group(const clockid_t which_clock,$/;"	f	file:
cpu_cluster_pm_enter	kernel/cpu_pm.c	/^EXPORT_SYMBOL_GPL(cpu_cluster_pm_enter);$/;"	v
cpu_cluster_pm_enter	kernel/cpu_pm.c	/^int cpu_cluster_pm_enter(void)$/;"	f
cpu_cluster_pm_exit	kernel/cpu_pm.c	/^EXPORT_SYMBOL_GPL(cpu_cluster_pm_exit);$/;"	v
cpu_cluster_pm_exit	kernel/cpu_pm.c	/^int cpu_cluster_pm_exit(void)$/;"	f
cpu_down	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_down);$/;"	v
cpu_down	kernel/cpu.c	/^int __ref cpu_down(unsigned int cpu)$/;"	f
cpu_has_callbacks_ready_to_invoke	kernel/rcutree.c	/^cpu_has_callbacks_ready_to_invoke(struct rcu_data *rdp)$/;"	f	file:
cpu_hotplug	kernel/cpu.c	/^} cpu_hotplug = {$/;"	v	typeref:struct:__anon55	file:
cpu_hotplug_begin	kernel/cpu.c	/^static void cpu_hotplug_begin(void) {}$/;"	f	file:
cpu_hotplug_begin	kernel/cpu.c	/^static void cpu_hotplug_begin(void)$/;"	f	file:
cpu_hotplug_disable_before_freeze	kernel/cpu.c	/^void cpu_hotplug_disable_before_freeze(void)$/;"	f
cpu_hotplug_disabled	kernel/cpu.c	/^static int cpu_hotplug_disabled;$/;"	v	file:
cpu_hotplug_done	kernel/cpu.c	/^static void cpu_hotplug_done(void) {}$/;"	f	file:
cpu_hotplug_done	kernel/cpu.c	/^static void cpu_hotplug_done(void)$/;"	f	file:
cpu_hotplug_enable_after_thaw	kernel/cpu.c	/^void cpu_hotplug_enable_after_thaw(void)$/;"	f
cpu_hotplug_pm_callback	kernel/cpu.c	/^cpu_hotplug_pm_callback(struct notifier_block *nb,$/;"	f	file:
cpu_hotplug_pm_sync_init	kernel/cpu.c	/^core_initcall(cpu_hotplug_pm_sync_init);$/;"	v
cpu_hotplug_pm_sync_init	kernel/cpu.c	/^static int __init cpu_hotplug_pm_sync_init(void)$/;"	f	file:
cpu_maps_update_begin	kernel/cpu.c	/^void cpu_maps_update_begin(void)$/;"	f
cpu_maps_update_done	kernel/cpu.c	/^void cpu_maps_update_done(void)$/;"	f
cpu_needs_another_gp	kernel/rcutree.c	/^cpu_needs_another_gp(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
cpu_nfb	kernel/softirq.c	/^static struct notifier_block __cpuinitdata cpu_nfb = {$/;"	v	typeref:struct:__cpuinitdata	file:
cpu_notify	kernel/cpu.c	/^static int cpu_notify(unsigned long val, void *v)$/;"	f	file:
cpu_notify	kernel/irq_work.c	/^static struct notifier_block cpu_notify;$/;"	v	typeref:struct:notifier_block	file:
cpu_notify_nofail	kernel/cpu.c	/^static void cpu_notify_nofail(unsigned long val, void *v)$/;"	f	file:
cpu_online_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_online_mask);$/;"	v
cpu_online_mask	kernel/cpu.c	/^const struct cpumask *const cpu_online_mask = to_cpumask(cpu_online_bits);$/;"	v
cpu_partial	mm/slub.c	/^SLAB_ATTR(cpu_partial);$/;"	v
cpu_partial_show	mm/slub.c	/^static ssize_t cpu_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cpu_partial_store	mm/slub.c	/^static ssize_t cpu_partial_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
cpu_pm_enter	kernel/cpu_pm.c	/^EXPORT_SYMBOL_GPL(cpu_pm_enter);$/;"	v
cpu_pm_enter	kernel/cpu_pm.c	/^int cpu_pm_enter(void)$/;"	f
cpu_pm_exit	kernel/cpu_pm.c	/^EXPORT_SYMBOL_GPL(cpu_pm_exit);$/;"	v
cpu_pm_exit	kernel/cpu_pm.c	/^int cpu_pm_exit(void)$/;"	f
cpu_pm_init	kernel/cpu_pm.c	/^core_initcall(cpu_pm_init);$/;"	v
cpu_pm_init	kernel/cpu_pm.c	/^static int cpu_pm_init(void)$/;"	f	file:
cpu_pm_notify	kernel/cpu_pm.c	/^static int cpu_pm_notify(enum cpu_pm_event event, int nr_to_call, int *nr_calls)$/;"	f	file:
cpu_pm_register_notifier	kernel/cpu_pm.c	/^EXPORT_SYMBOL_GPL(cpu_pm_register_notifier);$/;"	v
cpu_pm_register_notifier	kernel/cpu_pm.c	/^int cpu_pm_register_notifier(struct notifier_block *nb)$/;"	f
cpu_pm_resume	kernel/cpu_pm.c	/^static void cpu_pm_resume(void)$/;"	f	file:
cpu_pm_suspend	kernel/cpu_pm.c	/^static int cpu_pm_suspend(void)$/;"	f	file:
cpu_pm_syscore_ops	kernel/cpu_pm.c	/^static struct syscore_ops cpu_pm_syscore_ops = {$/;"	v	typeref:struct:syscore_ops	file:
cpu_pm_unregister_notifier	kernel/cpu_pm.c	/^EXPORT_SYMBOL_GPL(cpu_pm_unregister_notifier);$/;"	v
cpu_pm_unregister_notifier	kernel/cpu_pm.c	/^int cpu_pm_unregister_notifier(struct notifier_block *nb)$/;"	f
cpu_possible_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_possible_mask);$/;"	v
cpu_possible_mask	kernel/cpu.c	/^const struct cpumask *const cpu_possible_mask = to_cpumask(cpu_possible_bits);$/;"	v
cpu_present_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_present_mask);$/;"	v
cpu_present_mask	kernel/cpu.c	/^const struct cpumask *const cpu_present_mask = to_cpumask(cpu_present_bits);$/;"	v
cpu_slabs	mm/slub.c	/^SLAB_ATTR_RO(cpu_slabs);$/;"	v
cpu_slabs_show	mm/slub.c	/^static ssize_t cpu_slabs_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cpu_stop_create	kernel/stop_machine.c	/^static void cpu_stop_create(unsigned int cpu)$/;"	f	file:
cpu_stop_done	kernel/stop_machine.c	/^struct cpu_stop_done {$/;"	s	file:
cpu_stop_init	kernel/stop_machine.c	/^early_initcall(cpu_stop_init);$/;"	v
cpu_stop_init	kernel/stop_machine.c	/^static int __init cpu_stop_init(void)$/;"	f	file:
cpu_stop_init_done	kernel/stop_machine.c	/^static void cpu_stop_init_done(struct cpu_stop_done *done, unsigned int nr_todo)$/;"	f	file:
cpu_stop_park	kernel/stop_machine.c	/^static void cpu_stop_park(unsigned int cpu)$/;"	f	file:
cpu_stop_queue_work	kernel/stop_machine.c	/^static void cpu_stop_queue_work(unsigned int cpu, struct cpu_stop_work *work)$/;"	f	file:
cpu_stop_should_run	kernel/stop_machine.c	/^static int cpu_stop_should_run(unsigned int cpu)$/;"	f	file:
cpu_stop_signal_done	kernel/stop_machine.c	/^static void cpu_stop_signal_done(struct cpu_stop_done *done, bool executed)$/;"	f	file:
cpu_stop_threads	kernel/stop_machine.c	/^static struct smp_hotplug_thread cpu_stop_threads = {$/;"	v	typeref:struct:smp_hotplug_thread	file:
cpu_stop_unpark	kernel/stop_machine.c	/^static void cpu_stop_unpark(unsigned int cpu)$/;"	f	file:
cpu_stopper	kernel/stop_machine.c	/^struct cpu_stopper {$/;"	s	file:
cpu_stopper_thread	kernel/stop_machine.c	/^static void cpu_stopper_thread(unsigned int cpu)$/;"	f	file:
cpu_time_add	kernel/posix-cpu-timers.c	/^static inline void cpu_time_add(const clockid_t which_clock,$/;"	f	file:
cpu_time_before	kernel/posix-cpu-timers.c	/^static inline int cpu_time_before(const clockid_t which_clock,$/;"	f	file:
cpu_time_sub	kernel/posix-cpu-timers.c	/^static inline union cpu_time_count cpu_time_sub(const clockid_t which_clock,$/;"	f	file:
cpu_timer_fire	kernel/posix-cpu-timers.c	/^static void cpu_timer_fire(struct k_itimer *timer)$/;"	f	file:
cpu_timer_sample_group	kernel/posix-cpu-timers.c	/^static int cpu_timer_sample_group(const clockid_t which_clock,$/;"	f	file:
cpu_up	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(cpu_up);$/;"	v
cpu_up	kernel/cpu.c	/^int __cpuinit cpu_up(unsigned int cpu)$/;"	f
cpucache_init	mm/slab.c	/^__initcall(cpucache_init);$/;"	v
cpucache_init	mm/slab.c	/^static int __init cpucache_init(void)$/;"	f	file:
cpucache_notifier	mm/slab.c	/^static struct notifier_block __cpuinitdata cpucache_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
cpumask	kernel/smp.c	/^	cpumask_var_t		cpumask;$/;"	m	struct:call_function_data	file:
cpumask_ipi	kernel/smp.c	/^	cpumask_var_t		cpumask_ipi;$/;"	m	struct:call_function_data	file:
cpus_allowed	kernel/cpuset.c	/^	cpumask_var_t cpus_allowed;	\/* CPUs allowed to tasks in cpuset *\/$/;"	m	struct:cpuset	file:
cpus_attach	kernel/cpuset.c	/^static cpumask_var_t cpus_attach;$/;"	v	file:
cpuset	kernel/cpuset.c	/^struct cpuset {$/;"	s	file:
cpuset_attach	kernel/cpuset.c	/^static void cpuset_attach(struct cgroup *cgrp, struct cgroup_taskset *tset)$/;"	f	file:
cpuset_being_rebound	kernel/cpuset.c	/^static void *cpuset_being_rebound;$/;"	v	file:
cpuset_can_attach	kernel/cpuset.c	/^static int cpuset_can_attach(struct cgroup *cgrp, struct cgroup_taskset *tset)$/;"	f	file:
cpuset_cancel_attach	kernel/cpuset.c	/^static void cpuset_cancel_attach(struct cgroup *cgrp,$/;"	f	file:
cpuset_change_cpumask	kernel/cpuset.c	/^static void cpuset_change_cpumask(struct task_struct *tsk,$/;"	f	file:
cpuset_change_flag	kernel/cpuset.c	/^static void cpuset_change_flag(struct task_struct *tsk,$/;"	f	file:
cpuset_change_nodemask	kernel/cpuset.c	/^static void cpuset_change_nodemask(struct task_struct *p,$/;"	f	file:
cpuset_change_task_nodemask	kernel/cpuset.c	/^static void cpuset_change_task_nodemask(struct task_struct *tsk,$/;"	f	file:
cpuset_clone_children	kernel/cgroup.c	/^	bool cpuset_clone_children;$/;"	m	struct:cgroup_sb_opts	file:
cpuset_common_file_read	kernel/cpuset.c	/^static ssize_t cpuset_common_file_read(struct cgroup *cont,$/;"	f	file:
cpuset_cpus_allowed	kernel/cpuset.c	/^void cpuset_cpus_allowed(struct task_struct *tsk, struct cpumask *pmask)$/;"	f
cpuset_cpus_allowed_fallback	kernel/cpuset.c	/^void cpuset_cpus_allowed_fallback(struct task_struct *tsk)$/;"	f
cpuset_css_alloc	kernel/cpuset.c	/^static struct cgroup_subsys_state *cpuset_css_alloc(struct cgroup *cont)$/;"	f	file:
cpuset_css_free	kernel/cpuset.c	/^static void cpuset_css_free(struct cgroup *cont)$/;"	f	file:
cpuset_css_offline	kernel/cpuset.c	/^static void cpuset_css_offline(struct cgroup *cgrp)$/;"	f	file:
cpuset_css_online	kernel/cpuset.c	/^static int cpuset_css_online(struct cgroup *cgrp)$/;"	f	file:
cpuset_do_move_task	kernel/cpuset.c	/^static void cpuset_do_move_task(struct task_struct *tsk,$/;"	f	file:
cpuset_filetype_t	kernel/cpuset.c	/^} cpuset_filetype_t;$/;"	t	typeref:enum:__anon57	file:
cpuset_flagbits_t	kernel/cpuset.c	/^} cpuset_flagbits_t;$/;"	t	typeref:enum:__anon56	file:
cpuset_for_each_child	kernel/cpuset.c	210;"	d	file:
cpuset_for_each_descendant_pre	kernel/cpuset.c	224;"	d	file:
cpuset_fs_type	kernel/cpuset.c	/^static struct file_system_type cpuset_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
cpuset_hotplug_workfn	kernel/cpuset.c	/^static void cpuset_hotplug_workfn(struct work_struct *work)$/;"	f	file:
cpuset_init	kernel/cpuset.c	/^int __init cpuset_init(void)$/;"	f
cpuset_init_current_mems_allowed	kernel/cpuset.c	/^void cpuset_init_current_mems_allowed(void)$/;"	f
cpuset_init_smp	kernel/cpuset.c	/^void __init cpuset_init_smp(void)$/;"	f
cpuset_mem_spread_node	kernel/cpuset.c	/^EXPORT_SYMBOL_GPL(cpuset_mem_spread_node);$/;"	v
cpuset_mem_spread_node	kernel/cpuset.c	/^int cpuset_mem_spread_node(void)$/;"	f
cpuset_mems_allowed	kernel/cpuset.c	/^nodemask_t cpuset_mems_allowed(struct task_struct *tsk)$/;"	f
cpuset_mems_allowed_intersects	kernel/cpuset.c	/^int cpuset_mems_allowed_intersects(const struct task_struct *tsk1,$/;"	f
cpuset_mems_nr	mm/hugetlb.c	/^static unsigned int cpuset_mems_nr(unsigned int *array)$/;"	f	file:
cpuset_migrate_mm	kernel/cpuset.c	/^static void cpuset_migrate_mm(struct mm_struct *mm, const nodemask_t *from,$/;"	f	file:
cpuset_mount	kernel/cpuset.c	/^static struct dentry *cpuset_mount(struct file_system_type *fs_type,$/;"	f	file:
cpuset_name	kernel/cpuset.c	/^static char cpuset_name[CPUSET_NAME_LEN];$/;"	v	file:
cpuset_nodelist	kernel/cpuset.c	/^static char cpuset_nodelist[CPUSET_NODELIST_LEN];$/;"	v	file:
cpuset_nodemask_valid_mems_allowed	kernel/cpuset.c	/^int cpuset_nodemask_valid_mems_allowed(nodemask_t *nodemask)$/;"	f
cpuset_open	kernel/cpuset.c	/^static int cpuset_open(struct inode *inode, struct file *file)$/;"	f	file:
cpuset_print_task_mems_allowed	kernel/cpuset.c	/^void cpuset_print_task_mems_allowed(struct task_struct *tsk)$/;"	f
cpuset_propagate_hotplug_workfn	kernel/cpuset.c	/^static void cpuset_propagate_hotplug_workfn(struct work_struct *work)$/;"	f	file:
cpuset_propagate_hotplug_wq	kernel/cpuset.c	/^static struct workqueue_struct *cpuset_propagate_hotplug_wq;$/;"	v	typeref:struct:workqueue_struct	file:
cpuset_read_s64	kernel/cpuset.c	/^static s64 cpuset_read_s64(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
cpuset_read_u64	kernel/cpuset.c	/^static u64 cpuset_read_u64(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
cpuset_slab_spread_node	kernel/cpuset.c	/^int cpuset_slab_spread_node(void)$/;"	f
cpuset_spread_node	kernel/cpuset.c	/^static int cpuset_spread_node(int *rotor)$/;"	f	file:
cpuset_sprintf_cpulist	kernel/cpuset.c	/^static size_t cpuset_sprintf_cpulist(char *page, struct cpuset *cs)$/;"	f	file:
cpuset_sprintf_memlist	kernel/cpuset.c	/^static size_t cpuset_sprintf_memlist(char *page, struct cpuset *cs)$/;"	f	file:
cpuset_subsys	kernel/cpuset.c	/^struct cgroup_subsys cpuset_subsys = {$/;"	v	typeref:struct:cgroup_subsys
cpuset_subsys	kernel/cpuset.c	/^struct cgroup_subsys cpuset_subsys;$/;"	v	typeref:struct:cgroup_subsys
cpuset_task_status_allowed	kernel/cpuset.c	/^void cpuset_task_status_allowed(struct seq_file *m, struct task_struct *task)$/;"	f
cpuset_test_cpumask	kernel/cpuset.c	/^static int cpuset_test_cpumask(struct task_struct *tsk,$/;"	f	file:
cpuset_track_online_nodes	kernel/cpuset.c	/^static int cpuset_track_online_nodes(struct notifier_block *self,$/;"	f	file:
cpuset_update_active_cpus	kernel/cpuset.c	/^void cpuset_update_active_cpus(bool cpu_online)$/;"	f
cpuset_update_task_spread_flag	kernel/cpuset.c	/^static void cpuset_update_task_spread_flag(struct cpuset *cs,$/;"	f	file:
cpuset_write_resmask	kernel/cpuset.c	/^static int cpuset_write_resmask(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cpuset_write_s64	kernel/cpuset.c	/^static int cpuset_write_s64(struct cgroup *cgrp, struct cftype *cft, s64 val)$/;"	f	file:
cpuset_write_u64	kernel/cpuset.c	/^static int cpuset_write_u64(struct cgroup *cgrp, struct cftype *cft, u64 val)$/;"	f	file:
cpusets_overlap	kernel/cpuset.c	/^static int cpusets_overlap(struct cpuset *a, struct cpuset *b)$/;"	f	file:
cputime_sub_ns	kernel/itimer.c	/^static inline u32 cputime_sub_ns(cputime_t ct, s64 real_ns)$/;"	f	file:
cputime_to_compat_timeval	fs/compat_binfmt_elf.c	/^static void cputime_to_compat_timeval(const cputime_t cputime,$/;"	f	file:
cputime_to_timeval	fs/compat_binfmt_elf.c	67;"	d	file:
cputime_to_timeval	fs/compat_binfmt_elf.c	68;"	d	file:
cpuup_callback	mm/slab.c	/^static int __cpuinit cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
cpuup_canceled	mm/slab.c	/^static void __cpuinit cpuup_canceled(long cpu)$/;"	f	file:
cpuup_prepare	mm/slab.c	/^static int __cpuinit cpuup_prepare(long cpu)$/;"	f	file:
crash_free_reserved_phys_range	kernel/kexec.c	/^void __weak crash_free_reserved_phys_range(unsigned long begin,$/;"	f
crash_get_memory_size	kernel/kexec.c	/^size_t crash_get_memory_size(void)$/;"	f
crash_kexec	kernel/kexec.c	/^void crash_kexec(struct pt_regs *regs)$/;"	f
crash_map_reserved_pages	kernel/kexec.c	/^void __weak crash_map_reserved_pages(void)$/;"	f
crash_notes	kernel/kexec.c	/^note_buf_t __percpu *crash_notes;$/;"	v
crash_notes_memory_init	kernel/kexec.c	/^static int __init crash_notes_memory_init(void)$/;"	f	file:
crash_save_cpu	kernel/kexec.c	/^void crash_save_cpu(struct pt_regs *regs, int cpu)$/;"	f
crash_save_vmcoreinfo	kernel/kexec.c	/^void crash_save_vmcoreinfo(void)$/;"	f
crash_save_vmcoreinfo_init	kernel/kexec.c	/^static int __init crash_save_vmcoreinfo_init(void)$/;"	f	file:
crash_shrink_memory	kernel/kexec.c	/^int crash_shrink_memory(unsigned long new_size)$/;"	f
crash_unmap_reserved_pages	kernel/kexec.c	/^void __weak crash_unmap_reserved_pages(void)$/;"	f
crashk_low_res	kernel/kexec.c	/^struct resource crashk_low_res = {$/;"	v	typeref:struct:resource
crashk_res	kernel/kexec.c	/^struct resource crashk_res = {$/;"	v	typeref:struct:resource
crc	kernel/module.c	/^	const unsigned long *crc;$/;"	m	struct:find_symbol_arg	file:
create	mm/mempolicy.c	/^	int (*create)(struct mempolicy *pol, const nodemask_t *nodes);$/;"	m	struct:mempolicy_operations	file:
create_aout_tables	fs/binfmt_aout.c	/^static unsigned long __user *create_aout_tables(char __user *p, struct linux_binprm * bprm)$/;"	f	file:
create_boot_cache	mm/slab_common.c	/^void __init create_boot_cache(struct kmem_cache *s, const char *name, size_t size,$/;"	f
create_buf_file_default_callback	kernel/relay.c	/^static struct dentry *create_buf_file_default_callback(const char *filename,$/;"	f	file:
create_chunk	kernel/audit_tree.c	/^static int create_chunk(struct inode *inode, struct audit_tree *tree)$/;"	f	file:
create_elf_fdpic_tables	fs/binfmt_elf_fdpic.c	/^static int create_elf_fdpic_tables(struct linux_binprm *bprm,$/;"	f	file:
create_elf_tables	fs/binfmt_elf.c	/^create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,$/;"	f	file:
create_empty_buffers	fs/buffer.c	/^EXPORT_SYMBOL(create_empty_buffers);$/;"	v
create_empty_buffers	fs/buffer.c	/^void create_empty_buffers(struct page *page,$/;"	f
create_entry	fs/binfmt_misc.c	/^static Node *create_entry(const char __user *buffer, size_t count)$/;"	f	file:
create_flat_tables	fs/binfmt_flat.c	/^static unsigned long create_flat_tables($/;"	f	file:
create_hash_tables	kernel/profile.c	/^static int create_hash_tables(void)$/;"	f	file:
create_hash_tables	kernel/profile.c	588;"	d	file:
create_kmalloc_cache	mm/slab_common.c	/^struct kmem_cache *__init create_kmalloc_cache(const char *name, size_t size,$/;"	f
create_kthread	kernel/kthread.c	/^static void create_kthread(struct kthread_create_info *create)$/;"	f	file:
create_mnt_ns	fs/namespace.c	/^static struct mnt_namespace *create_mnt_ns(struct vfsmount *m)$/;"	f	file:
create_new_namespaces	kernel/nsproxy.c	/^static struct nsproxy *create_new_namespaces(unsigned long flags,$/;"	f	file:
create_nsproxy	kernel/nsproxy.c	/^static inline struct nsproxy *create_nsproxy(void)$/;"	f	file:
create_object	mm/kmemleak.c	/^static struct kmemleak_object *create_object(unsigned long ptr, size_t size,$/;"	f	file:
create_page_buffers	fs/buffer.c	/^static struct buffer_head *create_page_buffers(struct page *page, struct inode *inode, unsigned int b_state)$/;"	f	file:
create_pid_cachep	kernel/pid_namespace.c	/^static struct kmem_cache *create_pid_cachep(int nr_ids)$/;"	f	file:
create_pid_namespace	kernel/pid_namespace.c	/^static struct pid_namespace *create_pid_namespace(struct user_namespace *user_ns,$/;"	f	file:
create_pipe_files	fs/pipe.c	/^int create_pipe_files(struct file **res, int flags)$/;"	f
create_proc_profile	kernel/profile.c	/^int __ref create_proc_profile(void) \/* false positive from hotcpu_notifier *\/$/;"	f
create_proc_profile	kernel/profile.c	/^module_init(create_proc_profile);$/;"	v
create_prof_cpu_mask	kernel/profile.c	/^void create_prof_cpu_mask(struct proc_dir_entry *root_irq_dir)$/;"	f
create_som_tables	fs/binfmt_som.c	/^static void create_som_tables(struct linux_binprm *bprm)$/;"	f	file:
create_unique_id	mm/slub.c	/^static char *create_unique_id(struct kmem_cache *s)$/;"	f	file:
create_user_ns	kernel/user_namespace.c	/^int create_user_ns(struct cred *new)$/;"	f
create_uts_ns	kernel/utsname.c	/^static struct uts_namespace *create_uts_ns(void)$/;"	f	file:
create_work	mm/memcontrol.c	/^struct create_work {$/;"	s	file:
create_worker	kernel/workqueue.c	/^static struct worker *create_worker(struct worker_pool *pool)$/;"	f	file:
cred_alloc_blank	kernel/cred.c	/^struct cred *cred_alloc_blank(void)$/;"	f
cred_cap_issubset	kernel/cred.c	/^static bool cred_cap_issubset(const struct cred *set, const struct cred *subset)$/;"	f	file:
cred_init	kernel/cred.c	/^void __init cred_init(void)$/;"	f
cred_jar	kernel/cred.c	/^static struct kmem_cache *cred_jar;$/;"	v	typeref:struct:kmem_cache	file:
creds_are_invalid	kernel/cred.c	/^EXPORT_SYMBOL(creds_are_invalid);$/;"	v
creds_are_invalid	kernel/cred.c	/^bool creds_are_invalid(const struct cred *cred)$/;"	f
crf	kernel/rcutree_plugin.h	/^	call_rcu_func_t *crf;$/;"	m	struct:rcu_head_remote
csd	kernel/smp.c	/^	struct call_single_data	__percpu *csd;$/;"	m	struct:call_function_data	typeref:struct:call_function_data::__percpu	file:
csd_lock	kernel/smp.c	/^static void csd_lock(struct call_single_data *data)$/;"	f	file:
csd_lock_wait	kernel/smp.c	/^static void csd_lock_wait(struct call_single_data *data)$/;"	f	file:
csd_unlock	kernel/smp.c	/^static void csd_unlock(struct call_single_data *data)$/;"	f	file:
csigdata	fs/binfmt_elf.c	/^	user_siginfo_t csigdata;$/;"	m	struct:elf_note_info	file:
css	kernel/cgroup.c	/^	struct cgroup_subsys_state __rcu *css;$/;"	m	struct:css_id	typeref:struct:css_id::__rcu	file:
css	kernel/cgroup_freezer.c	/^	struct cgroup_subsys_state	css;$/;"	m	struct:freezer	typeref:struct:freezer::cgroup_subsys_state	file:
css	kernel/cpuset.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:cpuset	typeref:struct:cpuset::cgroup_subsys_state	file:
css	mm/hugetlb_cgroup.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:hugetlb_cgroup	typeref:struct:hugetlb_cgroup::cgroup_subsys_state	file:
css	mm/memcontrol.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::cgroup_subsys_state	file:
css_depth	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(css_depth);$/;"	v
css_depth	kernel/cgroup.c	/^unsigned short css_depth(struct cgroup_subsys_state *css)$/;"	f
css_dput_fn	kernel/cgroup.c	/^static void css_dput_fn(struct work_struct *work)$/;"	f	file:
css_get_next	kernel/cgroup.c	/^css_get_next(struct cgroup_subsys *ss, int id,$/;"	f
css_id	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(css_id);$/;"	v
css_id	kernel/cgroup.c	/^struct css_id {$/;"	s	file:
css_id	kernel/cgroup.c	/^unsigned short css_id(struct cgroup_subsys_state *css)$/;"	f
css_is_ancestor	kernel/cgroup.c	/^bool css_is_ancestor(struct cgroup_subsys_state *child,$/;"	f
css_lookup	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(css_lookup);$/;"	v
css_lookup	kernel/cgroup.c	/^struct cgroup_subsys_state *css_lookup(struct cgroup_subsys *ss, int id)$/;"	f
css_refcnt	kernel/cgroup.c	/^static int css_refcnt(struct cgroup_subsys_state *css)$/;"	f	file:
css_set_count	kernel/cgroup.c	/^static int css_set_count;$/;"	v	file:
css_set_hash	kernel/cgroup.c	/^static unsigned long css_set_hash(struct cgroup_subsys_state *css[])$/;"	f	file:
css_unbias_refcnt	kernel/cgroup.c	/^static int css_unbias_refcnt(int refcnt)$/;"	f	file:
ctime	kernel/auditsc.c	/^	struct timespec	    ctime;      \/* time of syscall entry *\/$/;"	m	struct:audit_context	typeref:struct:audit_context::timespec	file:
ctl_name	kernel/sysctl_binary.c	/^	int			ctl_name;$/;"	m	struct:bin_table	file:
ctor	mm/slub.c	/^SLAB_ATTR_RO(ctor);$/;"	v
ctor_show	mm/slub.c	/^static ssize_t ctor_show(struct kmem_cache *s, char *buf)$/;"	f	file:
ctrl_alt_del	kernel/sys.c	/^void ctrl_alt_del(void)$/;"	f
ctx	fs/eventpoll.c	/^	void *ctx;$/;"	m	struct:nested_call_node	file:
ctx	kernel/audit.c	/^	struct audit_context *ctx;	\/* NULL or associated context *\/$/;"	m	struct:audit_buffer	typeref:struct:audit_buffer::audit_context	file:
ctx_rcu_free	fs/aio.c	/^static void ctx_rcu_free(struct rcu_head *head)$/;"	f	file:
cur_cgrp	kernel/cgroup.c	/^	struct cgroup		*cur_cgrp;$/;"	m	struct:cgroup_taskset	typeref:struct:cgroup_taskset::cgroup	file:
cur_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops *cur_ops;$/;"	v	typeref:struct:rcu_torture_ops	file:
cur_page	fs/direct-io.c	/^	struct page *cur_page;		\/* The page *\/$/;"	m	struct:dio_submit	typeref:struct:dio_submit::page	file:
cur_page_block	fs/direct-io.c	/^	sector_t cur_page_block;	\/* Where it starts *\/$/;"	m	struct:dio_submit	file:
cur_page_fs_offset	fs/direct-io.c	/^	loff_t cur_page_fs_offset;	\/* Offset in file *\/$/;"	m	struct:dio_submit	file:
cur_page_len	fs/direct-io.c	/^	unsigned cur_page_len;		\/* Nr of bytes at cur_page_offset *\/$/;"	m	struct:dio_submit	file:
cur_page_offset	fs/direct-io.c	/^	unsigned cur_page_offset;	\/* Offset into it, in bytes *\/$/;"	m	struct:dio_submit	file:
curr_hash	fs/ext3/ext3.h	/^	__u32		curr_hash;$/;"	m	struct:dir_private_info
curr_minor_hash	fs/ext3/ext3.h	/^	__u32		curr_minor_hash;$/;"	m	struct:dir_private_info
curr_node	fs/ext3/ext3.h	/^	struct rb_node	*curr_node;$/;"	m	struct:dir_private_info	typeref:struct:dir_private_info::rb_node
curr_page	fs/direct-io.c	/^	int curr_page;			\/* changes *\/$/;"	m	struct:dio_submit	file:
curr_user_address	fs/direct-io.c	/^	unsigned long curr_user_address;\/* changes *\/$/;"	m	struct:dio_submit	file:
current_chrooted	fs/namespace.c	/^bool current_chrooted(void)$/;"	f
current_cpuset_is_being_rebound	kernel/cpuset.c	/^int current_cpuset_is_being_rebound(void)$/;"	f
current_css_set_cg_links_read	kernel/cgroup.c	/^static int current_css_set_cg_links_read(struct cgroup *cont,$/;"	f	file:
current_css_set_read	kernel/cgroup.c	/^static u64 current_css_set_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
current_css_set_refcount_read	kernel/cgroup.c	/^static u64 current_css_set_refcount_read(struct cgroup *cont,$/;"	f	file:
current_dir	fs/compat.c	/^	struct compat_linux_dirent __user *current_dir;$/;"	m	struct:compat_getdents_callback	typeref:struct:compat_getdents_callback::__user	file:
current_dir	fs/compat.c	/^	struct linux_dirent64 __user *current_dir;$/;"	m	struct:compat_getdents_callback64	typeref:struct:compat_getdents_callback64::__user	file:
current_dir	fs/readdir.c	/^	struct linux_dirent __user * current_dir;$/;"	m	struct:getdents_callback	typeref:struct:getdents_callback::__user	file:
current_dir	fs/readdir.c	/^	struct linux_dirent64 __user * current_dir;$/;"	m	struct:getdents_callback64	typeref:struct:getdents_callback64::__user	file:
current_fs_time	kernel/time.c	/^EXPORT_SYMBOL(current_fs_time);$/;"	v
current_fs_time	kernel/time.c	/^struct timespec current_fs_time(struct super_block *sb)$/;"	f
current_func	kernel/workqueue_internal.h	/^	work_func_t		current_func;	\/* L: current_work's fn *\/$/;"	m	struct:worker
current_is_async	kernel/async.c	/^bool current_is_async(void)$/;"	f
current_map	mm/scm.c	/^int current_map;$/;"	v
current_pwq	kernel/workqueue_internal.h	/^	struct pool_workqueue	*current_pwq; \/* L: current_work's pwq *\/$/;"	m	struct:worker	typeref:struct:worker::pool_workqueue
current_state	kernel/auditsc.c	/^	enum audit_state    state, current_state;$/;"	m	struct:audit_context	typeref:enum:audit_context::	file:
current_threshold	mm/memcontrol.c	/^	int current_threshold;$/;"	m	struct:mem_cgroup_threshold_ary	file:
current_umask	fs/fs_struct.c	/^EXPORT_SYMBOL(current_umask);$/;"	v
current_umask	fs/fs_struct.c	/^int current_umask(void)$/;"	f
current_work	kernel/workqueue_internal.h	/^	struct work_struct	*current_work;	\/* L: work being processed *\/$/;"	m	struct:worker	typeref:struct:worker::work_struct
current_wq_worker	kernel/workqueue_internal.h	/^static inline struct worker *current_wq_worker(void)$/;"	f
current_zonelist_order	mm/page_alloc.c	/^static int current_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
curtail	kernel/rcutiny_plugin.h	/^	struct rcu_head **curtail;	\/* ->next pointer of last CB. *\/$/;"	m	struct:rcu_ctrlblk	typeref:struct:rcu_ctrlblk::rcu_head
custom_divisor	fs/compat_ioctl.c	/^        compat_int_t    custom_divisor;$/;"	m	struct:serial_struct32	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_aux_data	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_capset	typeref:struct:audit_aux_data_capset::audit_aux_data	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_execve	typeref:struct:audit_aux_data_execve::audit_aux_data	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_pids	typeref:struct:audit_aux_data_pids::audit_aux_data	file:
d_absolute_path	fs/dcache.c	/^char *d_absolute_path(const struct path *path,$/;"	f
d_add_ci	fs/dcache.c	/^EXPORT_SYMBOL(d_add_ci);$/;"	v
d_add_ci	fs/dcache.c	/^struct dentry *d_add_ci(struct dentry *dentry, struct inode *inode,$/;"	f
d_alloc	fs/dcache.c	/^EXPORT_SYMBOL(d_alloc);$/;"	v
d_alloc	fs/dcache.c	/^struct dentry *d_alloc(struct dentry * parent, const struct qstr *name)$/;"	f
d_alloc_name	fs/dcache.c	/^EXPORT_SYMBOL(d_alloc_name);$/;"	v
d_alloc_name	fs/dcache.c	/^struct dentry *d_alloc_name(struct dentry *parent, const char *name)$/;"	f
d_alloc_pseudo	fs/dcache.c	/^EXPORT_SYMBOL(d_alloc_pseudo);$/;"	v
d_alloc_pseudo	fs/dcache.c	/^struct dentry *d_alloc_pseudo(struct super_block *sb, const struct qstr *name)$/;"	f
d_ancestor	fs/dcache.c	/^struct dentry *d_ancestor(struct dentry *p1, struct dentry *p2)$/;"	f
d_delete	fs/dcache.c	/^EXPORT_SYMBOL(d_delete);$/;"	v
d_delete	fs/dcache.c	/^void d_delete(struct dentry * dentry)$/;"	f
d_drop	fs/dcache.c	/^EXPORT_SYMBOL(d_drop);$/;"	v
d_drop	fs/dcache.c	/^void d_drop(struct dentry *dentry)$/;"	f
d_find_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_find_alias);$/;"	v
d_find_alias	fs/dcache.c	/^struct dentry *d_find_alias(struct inode *inode)$/;"	f
d_find_any_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_find_any_alias);$/;"	v
d_find_any_alias	fs/dcache.c	/^struct dentry *d_find_any_alias(struct inode *inode)$/;"	f
d_free	fs/dcache.c	/^static void d_free(struct dentry *dentry)$/;"	f	file:
d_genocide	fs/dcache.c	/^EXPORT_SYMBOL(d_genocide);$/;"	v
d_genocide	fs/dcache.c	/^void d_genocide(struct dentry *root)$/;"	f
d_hash	fs/dcache.c	/^static inline struct hlist_bl_head *d_hash(const struct dentry *parent,$/;"	f	file:
d_hash_and_lookup	fs/dcache.c	/^EXPORT_SYMBOL(d_hash_and_lookup);$/;"	v
d_hash_and_lookup	fs/dcache.c	/^struct dentry *d_hash_and_lookup(struct dentry *dir, struct qstr *name)$/;"	f
d_ino	fs/compat.c	/^	compat_ulong_t	d_ino;$/;"	m	struct:compat_linux_dirent	file:
d_ino	fs/compat.c	/^	compat_ulong_t	d_ino;$/;"	m	struct:compat_old_linux_dirent	file:
d_ino	fs/readdir.c	/^	unsigned long	d_ino;$/;"	m	struct:linux_dirent	file:
d_ino	fs/readdir.c	/^	unsigned long	d_ino;$/;"	m	struct:old_linux_dirent	file:
d_instantiate	fs/dcache.c	/^EXPORT_SYMBOL(d_instantiate);$/;"	v
d_instantiate	fs/dcache.c	/^void d_instantiate(struct dentry *entry, struct inode * inode)$/;"	f
d_instantiate_unique	fs/dcache.c	/^EXPORT_SYMBOL(d_instantiate_unique);$/;"	v
d_instantiate_unique	fs/dcache.c	/^struct dentry *d_instantiate_unique(struct dentry *entry, struct inode *inode)$/;"	f
d_invalidate	fs/dcache.c	/^EXPORT_SYMBOL(d_invalidate);$/;"	v
d_invalidate	fs/dcache.c	/^int d_invalidate(struct dentry * dentry)$/;"	f
d_lookup	fs/dcache.c	/^EXPORT_SYMBOL(d_lookup);$/;"	v
d_lookup	fs/dcache.c	/^struct dentry *d_lookup(const struct dentry *parent, const struct qstr *name)$/;"	f
d_make_root	fs/dcache.c	/^EXPORT_SYMBOL(d_make_root);$/;"	v
d_make_root	fs/dcache.c	/^struct dentry *d_make_root(struct inode *root_inode)$/;"	f
d_materialise_unique	fs/dcache.c	/^EXPORT_SYMBOL_GPL(d_materialise_unique);$/;"	v
d_materialise_unique	fs/dcache.c	/^struct dentry *d_materialise_unique(struct dentry *dentry, struct inode *inode)$/;"	f
d_mm	mm/scm.h	/^	struct mm_struct d_mm;$/;"	m	struct:__anon15	typeref:struct:__anon15::mm_struct
d_move	fs/dcache.c	/^EXPORT_SYMBOL(d_move);$/;"	v
d_move	fs/dcache.c	/^void d_move(struct dentry *dentry, struct dentry *target)$/;"	f
d_name	fs/compat.c	/^	char		d_name[1];$/;"	m	struct:compat_linux_dirent	file:
d_name	fs/compat.c	/^	char		d_name[1];$/;"	m	struct:compat_old_linux_dirent	file:
d_name	fs/readdir.c	/^	char		d_name[1];$/;"	m	struct:linux_dirent	file:
d_name	fs/readdir.c	/^	char		d_name[1];$/;"	m	struct:old_linux_dirent	file:
d_namlen	fs/compat.c	/^	unsigned short	d_namlen;$/;"	m	struct:compat_old_linux_dirent	file:
d_namlen	fs/readdir.c	/^	unsigned short	d_namlen;$/;"	m	struct:old_linux_dirent	file:
d_obtain_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_obtain_alias);$/;"	v
d_obtain_alias	fs/dcache.c	/^struct dentry *d_obtain_alias(struct inode *inode)$/;"	f
d_off	fs/compat.c	/^	compat_ulong_t	d_off;$/;"	m	struct:compat_linux_dirent	file:
d_off	fs/readdir.c	/^	unsigned long	d_off;$/;"	m	struct:linux_dirent	file:
d_offset	fs/compat.c	/^	compat_ulong_t	d_offset;$/;"	m	struct:compat_old_linux_dirent	file:
d_offset	fs/readdir.c	/^	unsigned long	d_offset;$/;"	m	struct:old_linux_dirent	file:
d_path	fs/dcache.c	/^EXPORT_SYMBOL(d_path);$/;"	v
d_path	fs/dcache.c	/^char *d_path(const struct path *path, char *buf, int buflen)$/;"	f
d_prune_aliases	fs/dcache.c	/^EXPORT_SYMBOL(d_prune_aliases);$/;"	v
d_prune_aliases	fs/dcache.c	/^void d_prune_aliases(struct inode *inode)$/;"	f
d_reclen	fs/compat.c	/^	unsigned short	d_reclen;$/;"	m	struct:compat_linux_dirent	file:
d_reclen	fs/readdir.c	/^	unsigned short	d_reclen;$/;"	m	struct:linux_dirent	file:
d_rehash	fs/dcache.c	/^EXPORT_SYMBOL(d_rehash);$/;"	v
d_rehash	fs/dcache.c	/^void d_rehash(struct dentry * entry)$/;"	f
d_revalidate	fs/namei.c	/^static inline int d_revalidate(struct dentry *dentry, unsigned int flags)$/;"	f	file:
d_set_d_op	fs/dcache.c	/^EXPORT_SYMBOL(d_set_d_op);$/;"	v
d_set_d_op	fs/dcache.c	/^void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op)$/;"	f
d_splice_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_splice_alias);$/;"	v
d_splice_alias	fs/dcache.c	/^struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry)$/;"	f
d_validate	fs/dcache.c	/^EXPORT_SYMBOL(d_validate);$/;"	v
d_validate	fs/dcache.c	/^int d_validate(struct dentry *dentry, struct dentry *dparent)$/;"	f
dash2underscore	kernel/params.c	/^static char dash2underscore(char c)$/;"	f	file:
data	fs/binfmt_elf.c	/^	void *data;$/;"	m	struct:memelfnote	file:
data	fs/binfmt_elf_fdpic.c	/^	void *data;$/;"	m	struct:memelfnote	file:
data	fs/compat.c	/^	compat_uptr_t data;$/;"	m	struct:compat_nfs_string	file:
data	fs/compat_ioctl.c	/^	compat_caddr_t data; \/* union i2c_smbus_data *data *\/$/;"	m	struct:i2c_smbus_ioctl_data32	file:
data	fs/libfs.c	/^	void *data;$/;"	m	struct:simple_attr	file:
data	kernel/async.c	/^	void			*data;$/;"	m	struct:async_entry	file:
data	kernel/kthread.c	/^	void *data;$/;"	m	struct:kthread	file:
data	kernel/kthread.c	/^	void *data;$/;"	m	struct:kthread_create_info	file:
data	kernel/stop_machine.c	/^	void			*data;$/;"	m	struct:stop_machine_data	file:
data	mm/percpu.c	/^	void			*data;		\/* chunk data *\/$/;"	m	struct:pcpu_chunk	file:
data_mode_string	fs/ext3/super.c	/^static char *data_mode_string(unsigned long mode)$/;"	f	file:
datasz	fs/binfmt_elf.c	/^	unsigned int datasz;$/;"	m	struct:memelfnote	file:
datasz	fs/binfmt_elf_fdpic.c	/^	unsigned int datasz;$/;"	m	struct:memelfnote	file:
dbg_redzone1	mm/slab.c	/^static unsigned long long *dbg_redzone1(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_redzone1	mm/slab.c	479;"	d	file:
dbg_redzone2	mm/slab.c	/^static unsigned long long *dbg_redzone2(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_redzone2	mm/slab.c	480;"	d	file:
dbg_userword	mm/slab.c	/^static void **dbg_userword(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_userword	mm/slab.c	481;"	d	file:
dcache_dir_close	fs/libfs.c	/^EXPORT_SYMBOL(dcache_dir_close);$/;"	v
dcache_dir_close	fs/libfs.c	/^int dcache_dir_close(struct inode *inode, struct file *file)$/;"	f
dcache_dir_lseek	fs/libfs.c	/^EXPORT_SYMBOL(dcache_dir_lseek);$/;"	v
dcache_dir_lseek	fs/libfs.c	/^loff_t dcache_dir_lseek(struct file *file, loff_t offset, int whence)$/;"	f
dcache_dir_open	fs/libfs.c	/^EXPORT_SYMBOL(dcache_dir_open);$/;"	v
dcache_dir_open	fs/libfs.c	/^int dcache_dir_open(struct inode *inode, struct file *file)$/;"	f
dcache_init	fs/dcache.c	/^static void __init dcache_init(void)$/;"	f	file:
dcache_init_early	fs/dcache.c	/^static void __init dcache_init_early(void)$/;"	f	file:
dcache_readdir	fs/libfs.c	/^EXPORT_SYMBOL(dcache_readdir);$/;"	v
dcache_readdir	fs/libfs.c	/^int dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)$/;"	f
dcookie_exit	fs/dcookies.c	/^static void dcookie_exit(void)$/;"	f	file:
dcookie_hash	fs/dcookies.c	/^static size_t dcookie_hash(unsigned long dcookie)$/;"	f	file:
dcookie_init	fs/dcookies.c	/^static int dcookie_init(void)$/;"	f	file:
dcookie_register	fs/dcookies.c	/^EXPORT_SYMBOL_GPL(dcookie_register);$/;"	v
dcookie_register	fs/dcookies.c	/^struct dcookie_user * dcookie_register(void)$/;"	f
dcookie_struct	fs/dcookies.c	/^struct dcookie_struct {$/;"	s	file:
dcookie_unregister	fs/dcookies.c	/^EXPORT_SYMBOL_GPL(dcookie_unregister);$/;"	v
dcookie_unregister	fs/dcookies.c	/^void dcookie_unregister(struct dcookie_user * user)$/;"	f
dcookie_user	fs/dcookies.c	/^struct dcookie_user {$/;"	s	file:
dcookie_value	fs/dcookies.c	/^static inline unsigned long dcookie_value(struct dcookie_struct * dcs)$/;"	f	file:
de_thread	fs/exec.c	/^static int de_thread(struct task_struct *tsk)$/;"	f	file:
deactivate_locked_super	fs/super.c	/^EXPORT_SYMBOL(deactivate_locked_super);$/;"	v
deactivate_locked_super	fs/super.c	/^void deactivate_locked_super(struct super_block *s)$/;"	f
deactivate_page	mm/swap.c	/^void deactivate_page(struct page *page)$/;"	f
deactivate_slab	mm/slub.c	/^static void deactivate_slab(struct kmem_cache *s, struct page *page, void *freelist)$/;"	f	file:
deactivate_super	fs/super.c	/^EXPORT_SYMBOL(deactivate_super);$/;"	v
deactivate_super	fs/super.c	/^void deactivate_super(struct super_block *s)$/;"	f
dead	kernel/audit_tree.c	/^	int dead;$/;"	m	struct:audit_chunk	file:
deadlock_lock	kernel/rtmutex_common.h	/^	struct rt_mutex		*deadlock_lock;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::rt_mutex
deadlock_task_pid	kernel/rtmutex_common.h	/^	struct pid		*deadlock_task_pid;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::pid
debug	kernel/module.c	/^	struct _ddebug *debug;$/;"	m	struct:load_info	typeref:struct:load_info::_ddebug	file:
debug_activate	kernel/hrtimer.c	/^static inline void debug_activate(struct hrtimer *timer)$/;"	f	file:
debug_activate	kernel/timer.c	/^debug_activate(struct timer_list *timer, unsigned long expires)$/;"	f	file:
debug_align	kernel/module.c	80;"	d	file:
debug_align	kernel/module.c	82;"	d	file:
debug_assert_init	kernel/timer.c	/^static inline void debug_assert_init(struct timer_list *timer)$/;"	f	file:
debug_atomic_dec	kernel/lockdep_internals.h	150;"	d
debug_atomic_dec	kernel/lockdep_internals.h	168;"	d
debug_atomic_inc	kernel/lockdep_internals.h	145;"	d
debug_atomic_inc	kernel/lockdep_internals.h	167;"	d
debug_atomic_read	kernel/lockdep_internals.h	155;"	d
debug_atomic_read	kernel/lockdep_internals.h	169;"	d
debug_check_no_locks_freed	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(debug_check_no_locks_freed);$/;"	v
debug_check_no_locks_freed	kernel/lockdep.c	/^void debug_check_no_locks_freed(const void *mem_from, unsigned long mem_len)$/;"	f
debug_check_no_locks_held	kernel/lockdep.c	/^void debug_check_no_locks_held(struct task_struct *task)$/;"	f
debug_cow_attr	mm/huge_memory.c	/^static struct kobj_attribute debug_cow_attr =$/;"	v	typeref:struct:kobj_attribute	file:
debug_cow_show	mm/huge_memory.c	/^static ssize_t debug_cow_show(struct kobject *kobj,$/;"	f	file:
debug_cow_store	mm/huge_memory.c	/^static ssize_t debug_cow_store(struct kobject *kobj,$/;"	f	file:
debug_css_alloc	kernel/cgroup.c	/^static struct cgroup_subsys_state *debug_css_alloc(struct cgroup *cont)$/;"	f	file:
debug_css_free	kernel/cgroup.c	/^static void debug_css_free(struct cgroup *cont)$/;"	f	file:
debug_deactivate	kernel/hrtimer.c	/^static inline void debug_deactivate(struct hrtimer *timer)$/;"	f	file:
debug_deactivate	kernel/timer.c	/^static inline void debug_deactivate(struct timer_list *timer)$/;"	f	file:
debug_files	kernel/cgroup.c	/^static struct cftype debug_files[] =  {$/;"	v	typeref:struct:cftype	file:
debug_guardpage_minorder_setup	mm/page_alloc.c	/^static int __init debug_guardpage_minorder_setup(char *buf)$/;"	f	file:
debug_hrtimer_activate	kernel/hrtimer.c	/^static inline void debug_hrtimer_activate(struct hrtimer *timer) { }$/;"	f	file:
debug_hrtimer_activate	kernel/hrtimer.c	/^static inline void debug_hrtimer_activate(struct hrtimer *timer)$/;"	f	file:
debug_hrtimer_deactivate	kernel/hrtimer.c	/^static inline void debug_hrtimer_deactivate(struct hrtimer *timer) { }$/;"	f	file:
debug_hrtimer_deactivate	kernel/hrtimer.c	/^static inline void debug_hrtimer_deactivate(struct hrtimer *timer)$/;"	f	file:
debug_hrtimer_free	kernel/hrtimer.c	/^static inline void debug_hrtimer_free(struct hrtimer *timer)$/;"	f	file:
debug_hrtimer_init	kernel/hrtimer.c	/^static inline void debug_hrtimer_init(struct hrtimer *timer) { }$/;"	f	file:
debug_hrtimer_init	kernel/hrtimer.c	/^static inline void debug_hrtimer_init(struct hrtimer *timer)$/;"	f	file:
debug_init	kernel/hrtimer.c	/^debug_init(struct hrtimer *timer, clockid_t clockid,$/;"	f	file:
debug_init	kernel/timer.c	/^static inline void debug_init(struct timer_list *timer)$/;"	f	file:
debug_init_rcu_head	kernel/rcupdate.c	/^static inline void debug_init_rcu_head(struct rcu_head *head)$/;"	f	file:
debug_lockdep_rcu_enabled	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(debug_lockdep_rcu_enabled);$/;"	v
debug_lockdep_rcu_enabled	kernel/rcupdate.c	/^int debug_lockdep_rcu_enabled(void)$/;"	f
debug_locks_off_graph_unlock	kernel/lockdep.c	/^static inline int debug_locks_off_graph_unlock(void)$/;"	f	file:
debug_mutex_add_waiter	kernel/mutex-debug.c	/^void debug_mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter,$/;"	f
debug_mutex_add_waiter	kernel/mutex.h	41;"	d
debug_mutex_free_waiter	kernel/mutex-debug.c	/^void debug_mutex_free_waiter(struct mutex_waiter *waiter)$/;"	f
debug_mutex_free_waiter	kernel/mutex.h	40;"	d
debug_mutex_init	kernel/mutex-debug.c	/^void debug_mutex_init(struct mutex *lock, const char *name,$/;"	f
debug_mutex_init	kernel/mutex.h	43;"	d
debug_mutex_lock_common	kernel/mutex-debug.c	/^void debug_mutex_lock_common(struct mutex *lock, struct mutex_waiter *waiter)$/;"	f
debug_mutex_lock_common	kernel/mutex.h	/^debug_mutex_lock_common(struct mutex *lock, struct mutex_waiter *waiter)$/;"	f
debug_mutex_unlock	kernel/mutex-debug.c	/^void debug_mutex_unlock(struct mutex *lock)$/;"	f
debug_mutex_unlock	kernel/mutex.h	42;"	d
debug_mutex_wake_waiter	kernel/mutex-debug.c	/^void debug_mutex_wake_waiter(struct mutex *lock, struct mutex_waiter *waiter)$/;"	f
debug_mutex_wake_waiter	kernel/mutex.h	39;"	d
debug_print_probes	kernel/tracepoint.c	/^static void debug_print_probes(struct tracepoint_entry *entry)$/;"	f	file:
debug_rcu_head_free	kernel/rcupdate.c	/^static inline void debug_rcu_head_free(struct rcu_head *head)$/;"	f	file:
debug_rcu_head_queue	kernel/rcu.h	/^static inline void debug_rcu_head_queue(struct rcu_head *head)$/;"	f
debug_rcu_head_unqueue	kernel/rcu.h	/^static inline void debug_rcu_head_unqueue(struct rcu_head *head)$/;"	f
debug_rt_mutex_deadlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_deadlock(int detect, struct rt_mutex_waiter *act_waiter,$/;"	f
debug_rt_mutex_deadlock	kernel/rtmutex.h	23;"	d
debug_rt_mutex_detect_deadlock	kernel/rtmutex-debug.h	/^static inline int debug_rt_mutex_detect_deadlock(struct rt_mutex_waiter *waiter,$/;"	f
debug_rt_mutex_detect_deadlock	kernel/rtmutex.h	25;"	d
debug_rt_mutex_free_waiter	kernel/rtmutex-debug.c	/^void debug_rt_mutex_free_waiter(struct rt_mutex_waiter *waiter)$/;"	f
debug_rt_mutex_free_waiter	kernel/rtmutex.h	17;"	d
debug_rt_mutex_init	kernel/rtmutex-debug.c	/^void debug_rt_mutex_init(struct rt_mutex *lock, const char *name)$/;"	f
debug_rt_mutex_init	kernel/rtmutex.h	22;"	d
debug_rt_mutex_init_waiter	kernel/rtmutex-debug.c	/^void debug_rt_mutex_init_waiter(struct rt_mutex_waiter *waiter)$/;"	f
debug_rt_mutex_init_waiter	kernel/rtmutex.h	16;"	d
debug_rt_mutex_lock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_lock(struct rt_mutex *lock)$/;"	f
debug_rt_mutex_lock	kernel/rtmutex.h	18;"	d
debug_rt_mutex_print_deadlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_print_deadlock(struct rt_mutex_waiter *waiter)$/;"	f
debug_rt_mutex_print_deadlock	kernel/rtmutex.h	24;"	d
debug_rt_mutex_proxy_lock	kernel/rtmutex-debug.c	/^debug_rt_mutex_proxy_lock(struct rt_mutex *lock, struct task_struct *powner)$/;"	f
debug_rt_mutex_proxy_lock	kernel/rtmutex.h	19;"	d
debug_rt_mutex_proxy_unlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_proxy_unlock(struct rt_mutex *lock)$/;"	f
debug_rt_mutex_proxy_unlock	kernel/rtmutex.h	20;"	d
debug_rt_mutex_reset_waiter	kernel/rtmutex-debug.h	26;"	d
debug_rt_mutex_reset_waiter	kernel/rtmutex.h	26;"	d
debug_rt_mutex_unlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_unlock(struct rt_mutex *lock)$/;"	f
debug_rt_mutex_unlock	kernel/rtmutex.h	21;"	d
debug_show_all_locks	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(debug_show_all_locks);$/;"	v
debug_show_all_locks	kernel/lockdep.c	/^void debug_show_all_locks(void)$/;"	f
debug_show_held_locks	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(debug_show_held_locks);$/;"	v
debug_show_held_locks	kernel/lockdep.c	/^void debug_show_held_locks(struct task_struct *task)$/;"	f
debug_subsys	kernel/cgroup.c	/^struct cgroup_subsys debug_subsys = {$/;"	v	typeref:struct:cgroup_subsys
debug_table	kernel/sysctl.c	/^static struct ctl_table debug_table[] = {$/;"	v	typeref:struct:ctl_table	file:
debug_table	kernel/sysctl.c	/^static struct ctl_table debug_table[];$/;"	v	typeref:struct:ctl_table	file:
debug_taskcount_read	kernel/cgroup.c	/^static u64 debug_taskcount_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
debug_timer_activate	kernel/timer.c	/^static inline void debug_timer_activate(struct timer_list *timer) { }$/;"	f	file:
debug_timer_activate	kernel/timer.c	/^static inline void debug_timer_activate(struct timer_list *timer)$/;"	f	file:
debug_timer_assert_init	kernel/timer.c	/^static inline void debug_timer_assert_init(struct timer_list *timer) { }$/;"	f	file:
debug_timer_assert_init	kernel/timer.c	/^static inline void debug_timer_assert_init(struct timer_list *timer)$/;"	f	file:
debug_timer_deactivate	kernel/timer.c	/^static inline void debug_timer_deactivate(struct timer_list *timer) { }$/;"	f	file:
debug_timer_deactivate	kernel/timer.c	/^static inline void debug_timer_deactivate(struct timer_list *timer)$/;"	f	file:
debug_timer_free	kernel/timer.c	/^static inline void debug_timer_free(struct timer_list *timer)$/;"	f	file:
debug_timer_init	kernel/timer.c	/^static inline void debug_timer_init(struct timer_list *timer) { }$/;"	f	file:
debug_timer_init	kernel/timer.c	/^static inline void debug_timer_init(struct timer_list *timer)$/;"	f	file:
debug_work_activate	kernel/workqueue.c	/^static inline void debug_work_activate(struct work_struct *work) { }$/;"	f	file:
debug_work_activate	kernel/workqueue.c	/^static inline void debug_work_activate(struct work_struct *work)$/;"	f	file:
debug_work_deactivate	kernel/workqueue.c	/^static inline void debug_work_deactivate(struct work_struct *work) { }$/;"	f	file:
debug_work_deactivate	kernel/workqueue.c	/^static inline void debug_work_deactivate(struct work_struct *work)$/;"	f	file:
debugfs_kprobe_init	kernel/kprobes.c	/^late_initcall(debugfs_kprobe_init);$/;"	v
debugfs_kprobe_init	kernel/kprobes.c	/^static int __kprobes debugfs_kprobe_init(void)$/;"	f	file:
debugfs_kprobes_operations	kernel/kprobes.c	/^static const struct file_operations debugfs_kprobes_operations = {$/;"	v	typeref:struct:file_operations	file:
debugobj_alc_key	mm/slab.c	/^static struct lock_class_key debugobj_alc_key;$/;"	v	typeref:struct:lock_class_key	file:
debugobj_l3_key	mm/slab.c	/^static struct lock_class_key debugobj_l3_key;$/;"	v	typeref:struct:lock_class_key	file:
dec_mm_counter_fast	mm/memory.c	158;"	d	file:
dec_mm_counter_fast	mm/memory.c	172;"	d	file:
dec_slabs_node	mm/slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s, int node, int objects)$/;"	f	file:
dec_slabs_node	mm/slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s, int node,$/;"	f	file:
dec_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(dec_zone_page_state);$/;"	v
dec_zone_page_state	mm/vmstat.c	/^void dec_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
decompress_exec	fs/binfmt_flat.c	/^static int decompress_exec($/;"	f	file:
decrement_hugepage_resv_vma	mm/hugetlb.c	/^static void decrement_hugepage_resv_vma(struct hstate *h,$/;"	f	file:
def_blk_aops	fs/block_dev.c	/^static const struct address_space_operations def_blk_aops = {$/;"	v	typeref:struct:address_space_operations	file:
def_blk_aops	fs/block_dev.c	/^static const struct address_space_operations def_blk_aops;$/;"	v	typeref:struct:address_space_operations	file:
def_blk_fops	fs/block_dev.c	/^const struct file_operations def_blk_fops = {$/;"	v	typeref:struct:file_operations
def_blk_fops	fs/no-block.c	/^const struct file_operations def_blk_fops = {$/;"	v	typeref:struct:file_operations
def_chr_fops	fs/char_dev.c	/^const struct file_operations def_chr_fops = {$/;"	v	typeref:struct:file_operations
def_fifo_fops	fs/fifo.c	/^const struct file_operations def_fifo_fops = {$/;"	v	typeref:struct:file_operations
default_backing_dev_info	mm/backing-dev.c	/^EXPORT_SYMBOL_GPL(default_backing_dev_info);$/;"	v
default_backing_dev_info	mm/backing-dev.c	/^struct backing_dev_info default_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info
default_bdi_init	mm/backing-dev.c	/^static int __init default_bdi_init(void)$/;"	f	file:
default_bdi_init	mm/backing-dev.c	/^subsys_initcall(default_bdi_init);$/;"	v
default_channel_callbacks	kernel/relay.c	/^static struct rchan_callbacks default_channel_callbacks = {$/;"	v	typeref:struct:rchan_callbacks	file:
default_dump_filter	kernel/fork.c	/^static unsigned long default_dump_filter = MMF_DUMP_FILTER_DEFAULT;$/;"	v	file:
default_exec_domain	kernel/exec_domain.c	/^struct exec_domain default_exec_domain = {$/;"	v	typeref:struct:exec_domain
default_file_splice_read	fs/splice.c	/^EXPORT_SYMBOL(default_file_splice_read);$/;"	v
default_file_splice_read	fs/splice.c	/^ssize_t default_file_splice_read(struct file *in, loff_t *ppos,$/;"	f
default_file_splice_write	fs/splice.c	/^static ssize_t default_file_splice_write(struct pipe_inode_info *pipe,$/;"	f	file:
default_handler	kernel/exec_domain.c	/^default_handler(int segment, struct pt_regs *regp)$/;"	f	file:
default_hstate_idx	mm/hugetlb.c	/^unsigned int default_hstate_idx;$/;"	v
default_hstate_max_huge_pages	mm/hugetlb.c	/^static unsigned long __initdata default_hstate_max_huge_pages;$/;"	v	file:
default_hstate_size	mm/hugetlb.c	/^static unsigned long __initdata default_hstate_size;$/;"	v	file:
default_llseek	fs/read_write.c	/^EXPORT_SYMBOL(default_llseek);$/;"	v
default_llseek	fs/read_write.c	/^loff_t default_llseek(struct file *file, loff_t offset, int whence)$/;"	f
default_pipe_buf_ops	fs/splice.c	/^static const struct pipe_buf_operations default_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
default_policy	mm/mempolicy.c	/^static struct mempolicy default_policy = {$/;"	v	typeref:struct:mempolicy	file:
default_zonelist_order	mm/page_alloc.c	/^static int default_zonelist_order(void)$/;"	f	file:
deferred_cad	kernel/sys.c	/^static void deferred_cad(struct work_struct *dummy)$/;"	f	file:
deferred_free	kernel/rcutorture.c	/^	void (*deferred_free)(struct rcu_torture *p);$/;"	m	struct:rcu_torture_ops	file:
defrag_attr	mm/huge_memory.c	/^static struct kobj_attribute defrag_attr =$/;"	v	typeref:struct:kobj_attribute	file:
defrag_show	mm/huge_memory.c	/^static ssize_t defrag_show(struct kobject *kobj,$/;"	f	file:
defrag_store	mm/huge_memory.c	/^static ssize_t defrag_store(struct kobject *kobj,$/;"	f	file:
del_symlink	fs/block_dev.c	/^static void del_symlink(struct kobject *from, struct kobject *to)$/;"	f	file:
del_timer	kernel/timer.c	/^EXPORT_SYMBOL(del_timer);$/;"	v
del_timer	kernel/timer.c	/^int del_timer(struct timer_list *timer)$/;"	f
del_timer_sync	kernel/timer.c	/^EXPORT_SYMBOL(del_timer_sync);$/;"	v
del_timer_sync	kernel/timer.c	/^int del_timer_sync(struct timer_list *timer)$/;"	f
del_total	mm/swap_state.c	/^	unsigned long del_total;$/;"	m	struct:__anon20	file:
del_usage_links	kernel/module.c	/^static void del_usage_links(struct module *mod)$/;"	f	file:
delayacct_cache	kernel/delayacct.c	/^struct kmem_cache *delayacct_cache;$/;"	v	typeref:struct:kmem_cache
delayacct_end	kernel/delayacct.c	/^static void delayacct_end(struct timespec *start, struct timespec *end,$/;"	f	file:
delayacct_init	kernel/delayacct.c	/^void delayacct_init(void)$/;"	f
delayacct_on	kernel/delayacct.c	/^EXPORT_SYMBOL_GPL(delayacct_on);$/;"	v
delayacct_setup_disable	kernel/delayacct.c	/^static int __init delayacct_setup_disable(char *str)$/;"	f	file:
delayacct_start	kernel/delayacct.c	/^static inline void delayacct_start(struct timespec *start)$/;"	f	file:
delayed_fput	fs/file_table.c	/^static void delayed_fput(struct work_struct *unused)$/;"	f	file:
delayed_put_pid	kernel/pid.c	/^static void delayed_put_pid(struct rcu_head *rhp)$/;"	f	file:
delayed_put_task_struct	kernel/exit.c	/^static void delayed_put_task_struct(struct rcu_head *rhp)$/;"	f	file:
delayed_work_timer_fn	kernel/workqueue.c	/^EXPORT_SYMBOL(delayed_work_timer_fn);$/;"	v
delayed_work_timer_fn	kernel/workqueue.c	/^void delayed_work_timer_fn(unsigned long __data)$/;"	f
delayed_works	kernel/workqueue.c	/^	struct list_head	delayed_works;	\/* L: delayed works *\/$/;"	m	struct:pool_workqueue	typeref:struct:pool_workqueue::list_head	file:
delete_from_lru_cache	mm/memory-failure.c	/^static int delete_from_lru_cache(struct page *p)$/;"	f	file:
delete_from_page_cache	mm/filemap.c	/^EXPORT_SYMBOL(delete_from_page_cache);$/;"	v
delete_from_page_cache	mm/filemap.c	/^void delete_from_page_cache(struct page *page)$/;"	f
delete_from_swap_cache	mm/swap_state.c	/^void delete_from_swap_cache(struct page *page)$/;"	f
delete_nommu_region	mm/nommu.c	/^static void delete_nommu_region(struct vm_region *region)$/;"	f	file:
delete_object_full	mm/kmemleak.c	/^static void delete_object_full(unsigned long ptr)$/;"	f	file:
delete_object_part	mm/kmemleak.c	/^static void delete_object_part(unsigned long ptr, size_t size)$/;"	f	file:
delete_vma	mm/nommu.c	/^static void delete_vma(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
delete_vma_from_mm	mm/nommu.c	/^static void delete_vma_from_mm(struct vm_area_struct *vma)$/;"	f	file:
dentry	fs/binfmt_misc.c	/^	struct dentry *dentry;$/;"	m	struct:__anon25	typeref:struct:__anon25::dentry	file:
dentry	kernel/cgroup.c	/^	struct dentry			*dentry;$/;"	m	struct:cfent	typeref:struct:cfent::dentry	file:
dentry	kernel/relay.c	/^	struct dentry *dentry;$/;"	m	struct:rchan_percpu_buf_dispatcher	typeref:struct:rchan_percpu_buf_dispatcher::dentry	file:
dentry_cmp	fs/dcache.c	/^static inline int dentry_cmp(const struct dentry *dentry, const unsigned char *ct, unsigned tcount)$/;"	f	file:
dentry_lock_for_move	fs/dcache.c	/^static void dentry_lock_for_move(struct dentry *dentry, struct dentry *target)$/;"	f	file:
dentry_lru_add	fs/dcache.c	/^static void dentry_lru_add(struct dentry *dentry)$/;"	f	file:
dentry_lru_del	fs/dcache.c	/^static void dentry_lru_del(struct dentry *dentry)$/;"	f	file:
dentry_lru_move_list	fs/dcache.c	/^static void dentry_lru_move_list(struct dentry *dentry, struct list_head *list)$/;"	f	file:
dentry_lru_prune	fs/dcache.c	/^static void dentry_lru_prune(struct dentry *dentry)$/;"	f	file:
dentry_open	fs/open.c	/^EXPORT_SYMBOL(dentry_open);$/;"	v
dentry_open	fs/open.c	/^struct file *dentry_open(const struct path *path, int flags,$/;"	f
dentry_path	fs/dcache.c	/^char *dentry_path(struct dentry *dentry, char *buf, int buflen)$/;"	f
dentry_path_raw	fs/dcache.c	/^EXPORT_SYMBOL(dentry_path_raw);$/;"	v
dentry_path_raw	fs/dcache.c	/^char *dentry_path_raw(struct dentry *dentry, char *buf, int buflen)$/;"	f
dentry_rcuwalk_barrier	fs/dcache.c	/^static inline void dentry_rcuwalk_barrier(struct dentry *dentry)$/;"	f	file:
dentry_reset_mounted	fs/namespace.c	/^static void dentry_reset_mounted(struct dentry *dentry)$/;"	f	file:
dentry_stat	fs/dcache.c	/^struct dentry_stat_t dentry_stat = {$/;"	v	typeref:struct:dentry_stat_t
dentry_string_cmp	fs/dcache.c	/^static inline int dentry_string_cmp(const unsigned char *cs, const unsigned char *ct, unsigned tcount)$/;"	f	file:
dentry_unhash	fs/namei.c	/^EXPORT_SYMBOL(dentry_unhash);$/;"	v
dentry_unhash	fs/namei.c	/^void dentry_unhash(struct dentry *dentry)$/;"	f
dentry_unlock_parents_for_move	fs/dcache.c	/^static void dentry_unlock_parents_for_move(struct dentry *dentry,$/;"	f	file:
dentry_update_name_case	fs/dcache.c	/^EXPORT_SYMBOL(dentry_update_name_case);$/;"	v
dentry_update_name_case	fs/dcache.c	/^void dentry_update_name_case(struct dentry *dentry, struct qstr *name)$/;"	f
deprecated_sysctl_warning	kernel/sysctl_binary.c	/^static void deprecated_sysctl_warning(const int *name, int nlen)$/;"	f	file:
depth	kernel/cgroup.c	/^	unsigned short depth;$/;"	m	struct:css_id	file:
dequeue_huge_page_node	mm/hugetlb.c	/^static struct page *dequeue_huge_page_node(struct hstate *h, int nid)$/;"	f	file:
dequeue_huge_page_vma	mm/hugetlb.c	/^static struct page *dequeue_huge_page_vma(struct hstate *h,$/;"	f	file:
dequeue_hwpoisoned_huge_page	mm/hugetlb.c	/^int dequeue_hwpoisoned_huge_page(struct page *hpage)$/;"	f
dequeue_signal	kernel/signal.c	/^EXPORT_SYMBOL_GPL(dequeue_signal);$/;"	v
dequeue_signal	kernel/signal.c	/^int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info)$/;"	f
descriptor_loc	fs/ext3/super.c	/^static ext3_fsblk_t descriptor_loc(struct super_block *sb,$/;"	f	file:
destroy_by_rcu	mm/slub.c	/^SLAB_ATTR_RO(destroy_by_rcu);$/;"	v
destroy_by_rcu_show	mm/slub.c	/^static ssize_t destroy_by_rcu_show(struct kmem_cache *s, char *buf)$/;"	f	file:
destroy_compound_page	mm/page_alloc.c	/^static int destroy_compound_page(struct page *page, unsigned long order)$/;"	f	file:
destroy_hrtimer_on_stack	kernel/hrtimer.c	/^void destroy_hrtimer_on_stack(struct hrtimer *timer)$/;"	f
destroy_inode	fs/inode.c	/^static void destroy_inode(struct inode *inode)$/;"	f	file:
destroy_inodecache	fs/ext3/super.c	/^static void destroy_inodecache(void)$/;"	f	file:
destroy_params	kernel/params.c	/^void destroy_params(const struct kernel_param *params, unsigned num)$/;"	f
destroy_pid_namespace	kernel/pid_namespace.c	/^static void destroy_pid_namespace(struct pid_namespace *ns)$/;"	f	file:
destroy_rcu_head_on_stack	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(destroy_rcu_head_on_stack);$/;"	v
destroy_rcu_head_on_stack	kernel/rcupdate.c	/^void destroy_rcu_head_on_stack(struct rcu_head *head)$/;"	f
destroy_sb_writers	fs/super.c	/^static void destroy_sb_writers(struct super_block *s)$/;"	f	file:
destroy_super	fs/super.c	/^static inline void destroy_super(struct super_block *s)$/;"	f	file:
destroy_swap_extents	mm/swapfile.c	/^static void destroy_swap_extents(struct swap_info_struct *sis)$/;"	f	file:
destroy_timer_on_stack	kernel/timer.c	/^EXPORT_SYMBOL_GPL(destroy_timer_on_stack);$/;"	v
destroy_timer_on_stack	kernel/timer.c	/^void destroy_timer_on_stack(struct timer_list *timer)$/;"	f
destroy_work_on_stack	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(destroy_work_on_stack);$/;"	v
destroy_work_on_stack	kernel/workqueue.c	/^void destroy_work_on_stack(struct work_struct *work)$/;"	f
destroy_worker	kernel/workqueue.c	/^static void destroy_worker(struct worker *worker)$/;"	f	file:
destroy_workqueue	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(destroy_workqueue);$/;"	v
destroy_workqueue	kernel/workqueue.c	/^void destroy_workqueue(struct workqueue_struct *wq)$/;"	f
detach_expired_timer	kernel/timer.c	/^detach_expired_timer(struct timer_list *timer, struct tvec_base *base)$/;"	f	file:
detach_if_pending	kernel/timer.c	/^static int detach_if_pending(struct timer_list *timer, struct tvec_base *base,$/;"	f	file:
detach_mnt	fs/namespace.c	/^static void detach_mnt(struct mount *mnt, struct path *old_path)$/;"	f	file:
detach_pid	kernel/pid.c	/^void detach_pid(struct task_struct *task, enum pid_type type)$/;"	f
detach_timer	kernel/timer.c	/^static inline void detach_timer(struct timer_list *timer, bool clear_pending)$/;"	f	file:
detach_vmas_to_be_unmapped	mm/mmap.c	/^detach_vmas_to_be_unmapped(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
determine_vm_flags	mm/nommu.c	/^static unsigned long determine_vm_flags(struct file *file,$/;"	f	file:
dev	kernel/audit_watch.c	/^	dev_t			dev;	\/* associated superblock device *\/$/;"	m	struct:audit_watch	file:
dev	kernel/auditsc.c	/^	dev_t			dev;$/;"	m	struct:audit_names	file:
dev	kernel/rtmutex-tester.c	/^	struct device		dev;$/;"	m	struct:test_thread_data	typeref:struct:test_thread_data::device	file:
dev	mm/dmapool.c	/^	struct device *dev;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::device	file:
dev_table	kernel/sysctl.c	/^static struct ctl_table dev_table[] = {$/;"	v	typeref:struct:ctl_table	file:
dev_table	kernel/sysctl.c	/^static struct ctl_table dev_table[];$/;"	v	typeref:struct:ctl_table	file:
device_id	kernel/dma.c	/^	const char *device_id;$/;"	m	struct:dma_chan	file:
devkmsg_llseek	kernel/printk.c	/^static loff_t devkmsg_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
devkmsg_open	kernel/printk.c	/^static int devkmsg_open(struct inode *inode, struct file *file)$/;"	f	file:
devkmsg_poll	kernel/printk.c	/^static unsigned int devkmsg_poll(struct file *file, poll_table *wait)$/;"	f	file:
devkmsg_read	kernel/printk.c	/^static ssize_t devkmsg_read(struct file *file, char __user *buf,$/;"	f	file:
devkmsg_release	kernel/printk.c	/^static int devkmsg_release(struct inode *inode, struct file *file)$/;"	f	file:
devkmsg_user	kernel/printk.c	/^struct devkmsg_user {$/;"	s	file:
devkmsg_writev	kernel/printk.c	/^static ssize_t devkmsg_writev(struct kiocb *iocb, const struct iovec *iv,$/;"	f	file:
devm_region_match	kernel/resource.c	/^static int devm_region_match(struct device *dev, void *res, void *match_data)$/;"	f	file:
devm_region_release	kernel/resource.c	/^static void devm_region_release(struct device *dev, void *res)$/;"	f	file:
dget_parent	fs/dcache.c	/^EXPORT_SYMBOL(dget_parent);$/;"	v
dget_parent	fs/dcache.c	/^struct dentry *dget_parent(struct dentry *dentry)$/;"	f
dhash_entries	fs/dcache.c	/^static __initdata unsigned long dhash_entries;$/;"	v	file:
dict_len	kernel/printk.c	/^	u16 dict_len;		\/* length of dictionary buffer *\/$/;"	m	struct:log	file:
did_panic	kernel/hung_task.c	/^static int __read_mostly did_panic;$/;"	v	file:
dio	fs/direct-io.c	/^struct dio {$/;"	s	file:
dio_await_completion	fs/direct-io.c	/^static void dio_await_completion(struct dio *dio)$/;"	f	file:
dio_await_one	fs/direct-io.c	/^static struct bio *dio_await_one(struct dio *dio)$/;"	f	file:
dio_bio_add_page	fs/direct-io.c	/^static inline int dio_bio_add_page(struct dio_submit *sdio)$/;"	f	file:
dio_bio_alloc	fs/direct-io.c	/^dio_bio_alloc(struct dio *dio, struct dio_submit *sdio,$/;"	f	file:
dio_bio_complete	fs/direct-io.c	/^static int dio_bio_complete(struct dio *dio, struct bio *bio)$/;"	f	file:
dio_bio_end_aio	fs/direct-io.c	/^static void dio_bio_end_aio(struct bio *bio, int error)$/;"	f	file:
dio_bio_end_io	fs/direct-io.c	/^static void dio_bio_end_io(struct bio *bio, int error)$/;"	f	file:
dio_bio_reap	fs/direct-io.c	/^static inline int dio_bio_reap(struct dio *dio, struct dio_submit *sdio)$/;"	f	file:
dio_bio_submit	fs/direct-io.c	/^static inline void dio_bio_submit(struct dio *dio, struct dio_submit *sdio)$/;"	f	file:
dio_cleanup	fs/direct-io.c	/^static inline void dio_cleanup(struct dio *dio, struct dio_submit *sdio)$/;"	f	file:
dio_complete	fs/direct-io.c	/^static ssize_t dio_complete(struct dio *dio, loff_t offset, ssize_t ret, bool is_async)$/;"	f	file:
dio_end_io	fs/direct-io.c	/^EXPORT_SYMBOL_GPL(dio_end_io);$/;"	v
dio_end_io	fs/direct-io.c	/^void dio_end_io(struct bio *bio, int error)$/;"	f
dio_get_page	fs/direct-io.c	/^static inline struct page *dio_get_page(struct dio *dio,$/;"	f	file:
dio_init	fs/direct-io.c	/^static __init int dio_init(void)$/;"	f	file:
dio_new_bio	fs/direct-io.c	/^static inline int dio_new_bio(struct dio *dio, struct dio_submit *sdio,$/;"	f	file:
dio_pages_present	fs/direct-io.c	/^static inline unsigned dio_pages_present(struct dio_submit *sdio)$/;"	f	file:
dio_refill_pages	fs/direct-io.c	/^static inline int dio_refill_pages(struct dio *dio, struct dio_submit *sdio)$/;"	f	file:
dio_send_cur_page	fs/direct-io.c	/^static inline int dio_send_cur_page(struct dio *dio, struct dio_submit *sdio,$/;"	f	file:
dio_submit	fs/direct-io.c	/^struct dio_submit {$/;"	s	file:
dio_zero_block	fs/direct-io.c	/^static inline void dio_zero_block(struct dio *dio, struct dio_submit *sdio,$/;"	f	file:
dir	kernel/module.c	/^	struct kobject *dir;$/;"	m	struct:module_notes_attrs	typeref:struct:module_notes_attrs::kobject	file:
dir_mode	fs/compat.c	/^	compat_mode_t dir_mode;$/;"	m	struct:compat_ncp_mount_data	file:
dir_mode	fs/compat.c	/^	compat_ulong_t dir_mode;$/;"	m	struct:compat_ncp_mount_data_v4	file:
dir_private_info	fs/ext3/ext3.h	/^struct dir_private_info {$/;"	s
direct_splice_actor	fs/splice.c	/^static int direct_splice_actor(struct pipe_inode_info *pipe,$/;"	f	file:
directly_mappable_cdev_bdi	fs/char_dev.c	/^EXPORT_SYMBOL(directly_mappable_cdev_bdi);$/;"	v
directly_mappable_cdev_bdi	fs/char_dev.c	/^struct backing_dev_info directly_mappable_cdev_bdi = {$/;"	v	typeref:struct:backing_dev_info
dirent	fs/compat.c	/^	struct compat_old_linux_dirent __user *dirent;$/;"	m	struct:compat_readdir_callback	typeref:struct:compat_readdir_callback::__user	file:
dirent	fs/readdir.c	/^	struct old_linux_dirent __user * dirent;$/;"	m	struct:readdir_callback	typeref:struct:readdir_callback::__user	file:
dirty	mm/memory-failure.c	745;"	d	file:
dirty	mm/memory-failure.c	802;"	d	file:
dirty	mm/vmalloc.c	/^	unsigned long free, dirty;$/;"	m	struct:vmap_block	file:
dirty_background_bytes	mm/page-writeback.c	/^unsigned long dirty_background_bytes;$/;"	v
dirty_background_bytes_handler	mm/page-writeback.c	/^int dirty_background_bytes_handler(struct ctl_table *table, int write,$/;"	f
dirty_background_ratio	mm/page-writeback.c	/^int dirty_background_ratio = 10;$/;"	v
dirty_background_ratio_handler	mm/page-writeback.c	/^int dirty_background_ratio_handler(struct ctl_table *table, int write,$/;"	f
dirty_bytes_handler	mm/page-writeback.c	/^int dirty_bytes_handler(struct ctl_table *table, int write,$/;"	f
dirty_bytes_min	kernel/sysctl.c	/^static unsigned long dirty_bytes_min = 2 * PAGE_SIZE;$/;"	v	file:
dirty_expire_interval	mm/page-writeback.c	/^unsigned int dirty_expire_interval = 30 * 100; \/* centiseconds *\/$/;"	v
dirty_freerun_ceiling	mm/page-writeback.c	/^static unsigned long dirty_freerun_ceiling(unsigned long thresh,$/;"	f	file:
dirty_poll_interval	mm/page-writeback.c	/^static unsigned long dirty_poll_interval(unsigned long dirty,$/;"	f	file:
dirty_ratio_handler	mm/page-writeback.c	/^int dirty_ratio_handler(struct ctl_table *table, int write,$/;"	f
dirty_writeback_centisecs_handler	mm/page-writeback.c	/^int dirty_writeback_centisecs_handler(ctl_table *table, int write,$/;"	f
dirty_writeback_interval	mm/page-writeback.c	/^EXPORT_SYMBOL_GPL(dirty_writeback_interval);$/;"	v
dirty_writeback_interval	mm/page-writeback.c	/^unsigned int dirty_writeback_interval = 5 * 100; \/* centiseconds *\/$/;"	v
disable_higher_order_debug	mm/slub.c	/^static int disable_higher_order_debug;$/;"	v	file:
disable_higher_order_debug	mm/slub.c	1235;"	d	file:
disable_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(disable_kprobe);$/;"	v
disable_kprobe	kernel/kprobes.c	/^int __kprobes disable_kprobe(struct kprobe *kp)$/;"	f
disable_nonboot_cpus	kernel/cpu.c	/^int disable_nonboot_cpus(void)$/;"	f
disable_pid_allocation	kernel/pid.c	/^void disable_pid_allocation(struct pid_namespace *ns)$/;"	f
disable_randmaps	mm/memory.c	/^static int __init disable_randmaps(char *s)$/;"	f	file:
disable_tracepoint	kernel/tracepoint.c	/^static void disable_tracepoint(struct tracepoint *elem)$/;"	f	file:
disallow_signal	kernel/exit.c	/^EXPORT_SYMBOL(disallow_signal);$/;"	v
disallow_signal	kernel/exit.c	/^int disallow_signal(int sig)$/;"	f
disarm_all_kprobes	kernel/kprobes.c	/^static void __kprobes disarm_all_kprobes(void)$/;"	f	file:
disarm_kmem_keys	mm/memcontrol.c	/^static void disarm_kmem_keys(struct mem_cgroup *memcg)$/;"	f	file:
disarm_kprobe	kernel/kprobes.c	/^static void __kprobes disarm_kprobe(struct kprobe *kp, bool reopt)$/;"	f	file:
disarm_kprobe_ftrace	kernel/kprobes.c	/^static void __kprobes disarm_kprobe_ftrace(struct kprobe *p)$/;"	f	file:
disarm_kprobe_ftrace	kernel/kprobes.c	981;"	d	file:
disarm_sock_keys	mm/memcontrol.c	/^static void disarm_sock_keys(struct mem_cgroup *memcg)$/;"	f	file:
disarm_static_keys	mm/memcontrol.c	/^static void disarm_static_keys(struct mem_cgroup *memcg)$/;"	f	file:
discard_buffer	fs/buffer.c	/^static void discard_buffer(struct buffer_head * bh)$/;"	f	file:
discard_slab	mm/slub.c	/^static void discard_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
discard_swap	mm/swapfile.c	/^static int discard_swap(struct swap_info_struct *si)$/;"	f	file:
discard_swap_cluster	mm/swapfile.c	/^static void discard_swap_cluster(struct swap_info_struct *si,$/;"	f	file:
disk	fs/block_dev.c	/^	struct gendisk		*disk;$/;"	m	struct:bd_holder_disk	typeref:struct:bd_holder_disk::gendisk	file:
dispose_list	fs/inode.c	/^static void dispose_list(struct list_head *head)$/;"	f	file:
div_factor	kernel/test_kprobes.c	21;"	d	file:
dma	mm/dmapool.c	/^	dma_addr_t dma;$/;"	m	struct:dma_page	file:
dma_chan	kernel/dma.c	/^struct dma_chan {$/;"	s	file:
dma_chan_busy	kernel/dma.c	/^static struct dma_chan dma_chan_busy[MAX_DMA_CHANNELS] = {$/;"	v	typeref:struct:dma_chan	file:
dma_page	mm/dmapool.c	/^struct dma_page {		\/* cacheable header for 'allocation' bytes *\/$/;"	s	file:
dma_pool	mm/dmapool.c	/^struct dma_pool {		\/* the pool *\/$/;"	s	file:
dma_pool_alloc	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_alloc);$/;"	v
dma_pool_alloc	mm/dmapool.c	/^void *dma_pool_alloc(struct dma_pool *pool, gfp_t mem_flags,$/;"	f
dma_pool_create	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_create);$/;"	v
dma_pool_create	mm/dmapool.c	/^struct dma_pool *dma_pool_create(const char *name, struct device *dev,$/;"	f
dma_pool_destroy	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_destroy);$/;"	v
dma_pool_destroy	mm/dmapool.c	/^void dma_pool_destroy(struct dma_pool *pool)$/;"	f
dma_pool_free	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_free);$/;"	v
dma_pool_free	mm/dmapool.c	/^void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t dma)$/;"	f
dma_reserve	mm/page_alloc.c	/^static unsigned long __meminitdata dma_reserve;$/;"	v	file:
dma_spin_lock	kernel/dma.c	/^DEFINE_SPINLOCK(dma_spin_lock);$/;"	v
dma_spin_lock	kernel/dma.c	/^EXPORT_SYMBOL(dma_spin_lock);$/;"	v
dmam_pool_create	mm/dmapool.c	/^EXPORT_SYMBOL(dmam_pool_create);$/;"	v
dmam_pool_create	mm/dmapool.c	/^struct dma_pool *dmam_pool_create(const char *name, struct device *dev,$/;"	f
dmam_pool_destroy	mm/dmapool.c	/^EXPORT_SYMBOL(dmam_pool_destroy);$/;"	v
dmam_pool_destroy	mm/dmapool.c	/^void dmam_pool_destroy(struct dma_pool *pool)$/;"	f
dmam_pool_match	mm/dmapool.c	/^static int dmam_pool_match(struct device *dev, void *res, void *match_data)$/;"	f	file:
dmam_pool_release	mm/dmapool.c	/^static void dmam_pool_release(struct device *dev, void *res)$/;"	f	file:
dmesg_restrict	kernel/printk.c	/^int dmesg_restrict = 1;$/;"	v
dmesg_restrict	kernel/printk.c	/^int dmesg_restrict;$/;"	v
do_acct_process	kernel/acct.c	/^static void do_acct_process(struct bsd_acct_struct *acct,$/;"	f	file:
do_add_mount	fs/namespace.c	/^static int do_add_mount(struct mount *newmnt, struct path *path, int mnt_flags)$/;"	f	file:
do_anonymous_page	mm/memory.c	/^static int do_anonymous_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_async_mmap_readahead	mm/filemap.c	/^static void do_async_mmap_readahead(struct vm_area_struct *vma,$/;"	f	file:
do_blockdev_direct_IO	fs/direct-io.c	/^do_blockdev_direct_IO(int rw, struct kiocb *iocb, struct inode *inode,$/;"	f	file:
do_brk	mm/mmap.c	/^static unsigned long do_brk(unsigned long addr, unsigned long len)$/;"	f	file:
do_ccupdate_local	mm/slab.c	/^static void do_ccupdate_local(void *info)$/;"	f	file:
do_change_type	fs/namespace.c	/^static int do_change_type(struct path *path, int flag)$/;"	f	file:
do_close_on_exec	fs/file.c	/^void do_close_on_exec(struct files_struct *files)$/;"	f
do_compat_pselect	fs/compat.c	/^static long do_compat_pselect(int n, compat_ulong_t __user *inp,$/;"	f	file:
do_coredump	fs/coredump.c	/^void do_coredump(siginfo_t *siginfo)$/;"	f
do_cpu_nanosleep	kernel/posix-cpu-timers.c	/^static int do_cpu_nanosleep(const clockid_t which_clock, int flags,$/;"	f	file:
do_dentry_open	fs/open.c	/^static int do_dentry_open(struct file *f,$/;"	f	file:
do_direct_IO	fs/direct-io.c	/^static int do_direct_IO(struct dio *dio, struct dio_submit *sdio,$/;"	f	file:
do_drain	mm/slab.c	/^static void do_drain(void *arg)$/;"	f	file:
do_dup2	fs/file.c	/^static int do_dup2(struct files_struct *files,$/;"	f	file:
do_emergency_remount	fs/super.c	/^static void do_emergency_remount(struct work_struct *work)$/;"	f	file:
do_execve	fs/exec.c	/^int do_execve(const char *filename,$/;"	f
do_execve_common	fs/exec.c	/^static int do_execve_common(const char *filename,$/;"	f	file:
do_exit	kernel/exit.c	/^EXPORT_SYMBOL_GPL(do_exit);$/;"	v
do_exit	kernel/exit.c	/^void do_exit(long code)$/;"	f
do_fallocate	fs/open.c	/^int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)$/;"	f
do_fcntl	fs/fcntl.c	/^static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,$/;"	f	file:
do_fcntl_add_lease	fs/locks.c	/^static int do_fcntl_add_lease(unsigned int fd, struct file *filp, long arg)$/;"	f	file:
do_fcntl_delete_lease	fs/locks.c	/^static int do_fcntl_delete_lease(struct file *filp)$/;"	f	file:
do_file_list_for_each_entry	fs/file_table.c	413;"	d	file:
do_file_list_for_each_entry	fs/file_table.c	427;"	d	file:
do_file_open_root	fs/namei.c	/^struct file *do_file_open_root(struct dentry *dentry, struct vfsmount *mnt,$/;"	f
do_filp_open	fs/namei.c	/^struct file *do_filp_open(int dfd, struct filename *pathname,$/;"	f
do_fork	kernel/fork.c	/^long do_fork(unsigned long clone_flags,$/;"	f
do_free_cleaned_kprobes	kernel/kprobes.c	/^static __kprobes void do_free_cleaned_kprobes(struct list_head *free_list)$/;"	f	file:
do_fsync	fs/sync.c	/^static int do_fsync(unsigned int fd, int datasync)$/;"	f	file:
do_futex	kernel/futex.c	/^long do_futex(u32 __user *uaddr, int op, u32 val, ktime_t *timeout,$/;"	f
do_generic_file_read	mm/filemap.c	/^static void do_generic_file_read(struct file *filp, loff_t *ppos,$/;"	f	file:
do_get_mempolicy	mm/mempolicy.c	/^static long do_get_mempolicy(int *policy, nodemask_t *nmask,$/;"	f	file:
do_getitimer	kernel/itimer.c	/^int do_getitimer(int which, struct itimerval *value)$/;"	f
do_group_exit	kernel/exit.c	/^do_group_exit(int exit_code)$/;"	f
do_handle_open	fs/fhandle.c	/^long do_handle_open(int mountdirfd,$/;"	f
do_handle_to_path	fs/fhandle.c	/^static int do_handle_to_path(int mountdirfd, struct file_handle *handle,$/;"	f	file:
do_huge_pmd_anonymous_page	mm/huge_memory.c	/^int do_huge_pmd_anonymous_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
do_huge_pmd_numa_page	mm/huge_memory.c	/^int do_huge_pmd_numa_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
do_huge_pmd_wp_page	mm/huge_memory.c	/^int do_huge_pmd_wp_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
do_huge_pmd_wp_page_fallback	mm/huge_memory.c	/^static int do_huge_pmd_wp_page_fallback(struct mm_struct *mm,$/;"	f	file:
do_huge_pmd_wp_zero_page_fallback	mm/huge_memory.c	/^static int do_huge_pmd_wp_zero_page_fallback(struct mm_struct *mm,$/;"	f	file:
do_i2c_rdwr_ioctl	fs/compat_ioctl.c	/^static int do_i2c_rdwr_ioctl(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_i2c_smbus_ioctl	fs/compat_ioctl.c	/^static int do_i2c_smbus_ioctl(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_init_module	kernel/module.c	/^static int do_init_module(struct module *mod)$/;"	f	file:
do_init_timer	kernel/timer.c	/^static void do_init_timer(struct timer_list *timer, unsigned int flags,$/;"	f	file:
do_inode_permission	fs/namei.c	/^static inline int do_inode_permission(struct inode *inode, int mask)$/;"	f	file:
do_inotify_remove_from_idr	fs/notify/inotify/inotify_user.c	/^static void do_inotify_remove_from_idr(struct fsnotify_group *group,$/;"	f	file:
do_invalidatepage	mm/truncate.c	/^void do_invalidatepage(struct page *page, unsigned long offset)$/;"	f
do_io_submit	fs/aio.c	/^long do_io_submit(aio_context_t ctx_id, long nr,$/;"	f
do_ioctl_trans	fs/compat_ioctl.c	/^static long do_ioctl_trans(int fd, unsigned int cmd,$/;"	f	file:
do_jobctl_trap	kernel/signal.c	/^static void do_jobctl_trap(void)$/;"	f	file:
do_journal_get_write_access	fs/ext3/inode.c	/^static int do_journal_get_write_access(handle_t *handle,$/;"	f	file:
do_kimage_alloc	kernel/kexec.c	/^static int do_kimage_alloc(struct kimage **rimage, unsigned long entry,$/;"	f	file:
do_last	fs/namei.c	/^static int do_last(struct nameidata *nd, struct path *path,$/;"	f	file:
do_launder_page	mm/truncate.c	/^static int do_launder_page(struct address_space *mapping, struct page *page)$/;"	f	file:
do_linear_fault	mm/memory.c	/^static int do_linear_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_lock_file_wait	fs/locks.c	/^static int do_lock_file_wait(struct file *filp, unsigned int cmd,$/;"	f	file:
do_loop_readv_writev	fs/read_write.c	/^ssize_t do_loop_readv_writev(struct file *filp, struct iovec *iov,$/;"	f
do_loopback	fs/namespace.c	/^static int do_loopback(struct path *path, const char *old_name,$/;"	f	file:
do_make_slave	fs/pnode.c	/^static int do_make_slave(struct mount *mnt)$/;"	f	file:
do_mbind	mm/mempolicy.c	/^static long do_mbind(unsigned long start, unsigned long len,$/;"	f	file:
do_migrate_pages	mm/mempolicy.c	/^int do_migrate_pages(struct mm_struct *mm, const nodemask_t *from,$/;"	f
do_migrate_range	mm/memory_hotplug.c	/^do_migrate_range(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
do_mincore	mm/mincore.c	/^static long do_mincore(unsigned long addr, unsigned long pages, unsigned char *vec)$/;"	f	file:
do_mlock	mm/mlock.c	/^static int do_mlock(unsigned long start, size_t len, int on)$/;"	f	file:
do_mlockall	mm/mlock.c	/^static int do_mlockall(int flags)$/;"	f	file:
do_mmap_pgoff	mm/mmap.c	/^unsigned long do_mmap_pgoff(struct file *file, unsigned long addr,$/;"	f
do_mmap_pgoff	mm/nommu.c	/^unsigned long do_mmap_pgoff(struct file *file,$/;"	f
do_mmap_pgoff_wrapper	mm/mmap.c	/^EXPORT_SYMBOL(do_mmap_pgoff_wrapper);$/;"	v
do_mmap_pgoff_wrapper	mm/mmap.c	/^unsigned long do_mmap_pgoff_wrapper(struct file *file, unsigned long addr,$/;"	f
do_mmap_private	mm/nommu.c	/^static int do_mmap_private(struct vm_area_struct *vma,$/;"	f	file:
do_mmap_shared_file	mm/nommu.c	/^static int do_mmap_shared_file(struct vm_area_struct *vma)$/;"	f	file:
do_mmu_notifier_register	mm/mmu_notifier.c	/^static int do_mmu_notifier_register(struct mmu_notifier *mn,$/;"	f	file:
do_mod_ctors	kernel/module.c	/^static void do_mod_ctors(struct module *mod)$/;"	f	file:
do_mount	fs/namespace.c	/^long do_mount(const char *dev_name, const char *dir_name,$/;"	f
do_move_mount	fs/namespace.c	/^static int do_move_mount(struct path *path, const char *old_name)$/;"	f	file:
do_move_page_to_node_array	mm/migrate.c	/^static int do_move_page_to_node_array(struct mm_struct *mm,$/;"	f	file:
do_mpage_readpage	fs/mpage.c	/^do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,$/;"	f	file:
do_mremap	mm/nommu.c	/^EXPORT_SYMBOL(do_mremap);$/;"	v
do_mremap	mm/nommu.c	/^unsigned long do_mremap(unsigned long addr,$/;"	f
do_munmap	mm/mmap.c	/^int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)$/;"	f
do_munmap	mm/nommu.c	/^EXPORT_SYMBOL(do_munmap);$/;"	v
do_munmap	mm/nommu.c	/^int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)$/;"	f
do_nanosleep	kernel/hrtimer.c	/^static int __sched do_nanosleep(struct hrtimer_sleeper *t, enum hrtimer_mode mode)$/;"	f	file:
do_ncp_super_data_conv	fs/compat.c	/^static void *do_ncp_super_data_conv(void *raw_data)$/;"	f	file:
do_new_mount	fs/namespace.c	/^static int do_new_mount(struct path *path, const char *fstype, int flags,$/;"	f	file:
do_nfs4_super_data_conv	fs/compat.c	/^static int do_nfs4_super_data_conv(void *raw_data)$/;"	f	file:
do_no_restart_syscall	kernel/signal.c	/^long do_no_restart_syscall(struct restart_block *param)$/;"	f
do_nonlinear_fault	mm/memory.c	/^static int do_nonlinear_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_nothing	kernel/smp.c	/^static void do_nothing(void *unused)$/;"	f	file:
do_notify_parent	kernel/signal.c	/^bool do_notify_parent(struct task_struct *tsk, int sig)$/;"	f
do_notify_parent_cldstop	kernel/signal.c	/^static void do_notify_parent_cldstop(struct task_struct *tsk,$/;"	f	file:
do_numa_page	mm/memory.c	/^int do_numa_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
do_oops_enter_exit	kernel/panic.c	/^static void do_oops_enter_exit(void)$/;"	f	file:
do_optimize_kprobes	kernel/kprobes.c	/^static __kprobes void do_optimize_kprobes(void)$/;"	f	file:
do_page_add_anon_rmap	mm/rmap.c	/^void do_page_add_anon_rmap(struct page *page,$/;"	f
do_pages_move	mm/migrate.c	/^static int do_pages_move(struct mm_struct *mm, nodemask_t task_nodes,$/;"	f	file:
do_pages_stat	mm/migrate.c	/^static int do_pages_stat(struct mm_struct *mm, unsigned long nr_pages,$/;"	f	file:
do_pages_stat_array	mm/migrate.c	/^static void do_pages_stat_array(struct mm_struct *mm, unsigned long nr_pages,$/;"	f	file:
do_path_lookup	fs/namei.c	/^static int do_path_lookup(int dfd, const char *name,$/;"	f	file:
do_persistent_fault	mm/scm.c	/^int do_persistent_fault(struct mm_struct *mm, struct vm_area_struct *vma, $/;"	f
do_pipe_flags	fs/pipe.c	/^int do_pipe_flags(int *fd, int flags)$/;"	f
do_pmd_numa_page	mm/memory.c	/^static int do_pmd_numa_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_poll	fs/select.c	/^static int do_poll(unsigned int nfds,  struct poll_list *list,$/;"	f	file:
do_pollfd	fs/select.c	/^static inline unsigned int do_pollfd(struct pollfd *pollfd, poll_table *pwait)$/;"	f	file:
do_prlimit	kernel/sys.c	/^int do_prlimit(struct task_struct *tsk, unsigned int resource,$/;"	f
do_proc_dointvec	kernel/sysctl.c	/^static int do_proc_dointvec(struct ctl_table *table, int write,$/;"	f	file:
do_proc_dointvec_conv	kernel/sysctl.c	/^static int do_proc_dointvec_conv(bool *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_jiffies_conv	kernel/sysctl.c	/^static int do_proc_dointvec_jiffies_conv(bool *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_minmax_conv	kernel/sysctl.c	/^static int do_proc_dointvec_minmax_conv(bool *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_minmax_conv_param	kernel/sysctl.c	/^struct do_proc_dointvec_minmax_conv_param {$/;"	s	file:
do_proc_dointvec_ms_jiffies_conv	kernel/sysctl.c	/^static int do_proc_dointvec_ms_jiffies_conv(bool *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_userhz_jiffies_conv	kernel/sysctl.c	/^static int do_proc_dointvec_userhz_jiffies_conv(bool *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_doulongvec_minmax	kernel/sysctl.c	/^static int do_proc_doulongvec_minmax(struct ctl_table *table, int write,$/;"	f	file:
do_profile_hits	kernel/profile.c	/^static void do_profile_hits(int type, void *__pc, unsigned int nr_hits)$/;"	f	file:
do_pselect	fs/select.c	/^static long do_pselect(int n, fd_set __user *inp, fd_set __user *outp,$/;"	f	file:
do_raw_spin_lock_flags	include/linux/spinlock.h	133;"	d
do_raw_spin_trylock	include/linux/spinlock.h	/^static inline int do_raw_spin_trylock(raw_spinlock_t *lock)$/;"	f
do_read_cache_page	mm/filemap.c	/^static struct page *do_read_cache_page(struct address_space *mapping,$/;"	f	file:
do_readahead	mm/readahead.c	/^do_readahead(struct address_space *mapping, struct file *filp,$/;"	f	file:
do_readv_writev	fs/read_write.c	/^static ssize_t do_readv_writev(int type, struct file *file,$/;"	f	file:
do_refcount_check	fs/pnode.c	/^static inline int do_refcount_check(struct mount *mnt, int count)$/;"	f	file:
do_remount	fs/namespace.c	/^static int do_remount(struct path *path, int flags, int mnt_flags,$/;"	f	file:
do_remount_sb	fs/super.c	/^int do_remount_sb(struct super_block *sb, int flags, void *data, int force)$/;"	f
do_restart_poll	fs/select.c	/^static long do_restart_poll(struct restart_block *restart_block)$/;"	f	file:
do_rmdir	fs/namei.c	/^static long do_rmdir(int dfd, const char __user *pathname)$/;"	f	file:
do_rt_sigqueueinfo	kernel/signal.c	/^static int do_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t *info)$/;"	f	file:
do_rt_tgsigqueueinfo	kernel/signal.c	/^static int do_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t *info)$/;"	f	file:
do_schedule_next_timer	kernel/posix-timers.c	/^void do_schedule_next_timer(struct siginfo *info)$/;"	f
do_select	fs/select.c	/^int do_select(int n, fd_set_bits *fds, struct timespec *end_time)$/;"	f
do_send_sig_info	kernel/signal.c	/^int do_send_sig_info(int sig, struct siginfo *info, struct task_struct *p,$/;"	f
do_send_specific	kernel/signal.c	/^do_send_specific(pid_t tgid, pid_t pid, int sig, struct siginfo *info)$/;"	f	file:
do_sendfile	fs/read_write.c	/^ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos, size_t count,$/;"	f
do_set_mempolicy	mm/mempolicy.c	/^static long do_set_mempolicy(unsigned short mode, unsigned short flags,$/;"	f	file:
do_setitimer	kernel/itimer.c	/^int do_setitimer(int which, struct itimerval *value, struct itimerval *ovalue)$/;"	f
do_shmem_file_read	mm/shmem.c	/^static void do_shmem_file_read(struct file *filp, loff_t *ppos, read_descriptor_t *desc, read_actor_t actor)$/;"	f	file:
do_shrinker_shrink	mm/vmscan.c	/^static inline int do_shrinker_shrink(struct shrinker *shrinker,$/;"	f	file:
do_sigaction	kernel/signal.c	/^int do_sigaction(int sig, struct k_sigaction *act, struct k_sigaction *oact)$/;"	f
do_sigaltstack	kernel/signal.c	/^do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long sp)$/;"	f	file:
do_sigpending	kernel/signal.c	/^static int do_sigpending(void *set, unsigned long sigsetsize)$/;"	f	file:
do_sigtimedwait	kernel/signal.c	/^int do_sigtimedwait(const sigset_t *which, siginfo_t *info,$/;"	f
do_softirq	kernel/softirq.c	/^asmlinkage void do_softirq(void)$/;"	f
do_splice	fs/splice.c	/^static long do_splice(struct file *in, loff_t __user *off_in,$/;"	f	file:
do_splice_direct	fs/splice.c	/^long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,$/;"	f
do_splice_from	fs/splice.c	/^static long do_splice_from(struct pipe_inode_info *pipe, struct file *out,$/;"	f	file:
do_splice_to	fs/splice.c	/^static long do_splice_to(struct file *in, loff_t *ppos,$/;"	f	file:
do_split	fs/ext3/namei.c	/^static struct ext3_dir_entry_2 *do_split(handle_t *handle, struct inode *dir,$/;"	f	file:
do_statfs64	fs/statfs.c	/^static int do_statfs64(struct kstatfs *st, struct statfs64 __user *p)$/;"	f	file:
do_statfs_native	fs/statfs.c	/^static int do_statfs_native(struct kstatfs *st, struct statfs __user *p)$/;"	f	file:
do_swap_account	mm/memcontrol.c	83;"	d	file:
do_swap_page	mm/memory.c	/^static int do_swap_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_sync_mmap_readahead	mm/filemap.c	/^static void do_sync_mmap_readahead(struct vm_area_struct *vma,$/;"	f	file:
do_sync_read	fs/read_write.c	/^EXPORT_SYMBOL(do_sync_read);$/;"	v
do_sync_read	fs/read_write.c	/^ssize_t do_sync_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos)$/;"	f
do_sync_readv_writev	fs/read_write.c	/^ssize_t do_sync_readv_writev(struct file *filp, const struct iovec *iov,$/;"	f
do_sync_work	fs/sync.c	/^static void do_sync_work(struct work_struct *work)$/;"	f	file:
do_sync_write	fs/read_write.c	/^EXPORT_SYMBOL(do_sync_write);$/;"	v
do_sync_write	fs/read_write.c	/^ssize_t do_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)$/;"	f
do_sys_ftruncate	fs/open.c	/^static long do_sys_ftruncate(unsigned int fd, loff_t length, int small)$/;"	f	file:
do_sys_name_to_handle	fs/fhandle.c	/^static long do_sys_name_to_handle(struct path *path,$/;"	f	file:
do_sys_open	fs/open.c	/^long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)$/;"	f
do_sys_poll	fs/select.c	/^int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,$/;"	f
do_sys_settimeofday	kernel/time.c	/^int do_sys_settimeofday(const struct timespec *tv, const struct timezone *tz)$/;"	f
do_sys_times	kernel/sys.c	/^void do_sys_times(struct tms *tms)$/;"	f
do_sys_truncate	fs/open.c	/^static long do_sys_truncate(const char __user *pathname, loff_t length)$/;"	f	file:
do_sysctl	kernel/sysctl_binary.c	/^static ssize_t do_sysctl(int __user *args_name, int nlen,$/;"	f	file:
do_sysinfo	kernel/timer.c	/^int do_sysinfo(struct sysinfo *info)$/;"	f
do_syslog	kernel/printk.c	/^int do_syslog(int type, char __user *buf, int len, bool from_file)$/;"	f
do_tee	fs/splice.c	/^static long do_tee(struct file *in, struct file *out, size_t len,$/;"	f	file:
do_thaw_all	fs/buffer.c	/^static void do_thaw_all(struct work_struct *work)$/;"	f	file:
do_thaw_one	fs/buffer.c	/^static void do_thaw_one(struct super_block *sb, void *unused)$/;"	f	file:
do_thread_regset_writeback	fs/binfmt_elf.c	/^static void do_thread_regset_writeback(struct task_struct *task,$/;"	f	file:
do_timerfd_gettime	fs/timerfd.c	/^static int do_timerfd_gettime(int ufd, struct itimerspec *t)$/;"	f	file:
do_timerfd_settime	fs/timerfd.c	/^static int do_timerfd_settime(int ufd, int flags, $/;"	f	file:
do_tkill	kernel/signal.c	/^static int do_tkill(pid_t tgid, pid_t pid, int sig)$/;"	f	file:
do_trace_rcu_torture_read	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(do_trace_rcu_torture_read);$/;"	v
do_trace_rcu_torture_read	kernel/rcupdate.c	/^void do_trace_rcu_torture_read(char *rcutorturename, struct rcu_head *rhp,$/;"	f
do_trace_rcu_torture_read	kernel/rcupdate.c	415;"	d	file:
do_truncate	fs/open.c	/^int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,$/;"	f
do_try_to_free_pages	mm/vmscan.c	/^static unsigned long do_try_to_free_pages(struct zonelist *zonelist,$/;"	f	file:
do_tune_cpucache	mm/slab.c	/^static int do_tune_cpucache(struct kmem_cache *cachep, int limit,$/;"	f	file:
do_umount	fs/namespace.c	/^static int do_umount(struct mount *mnt, int flags)$/;"	f	file:
do_unlinkat	fs/namei.c	/^static long do_unlinkat(int dfd, const char __user *pathname)$/;"	f	file:
do_unoptimize_kprobes	kernel/kprobes.c	/^static __kprobes void do_unoptimize_kprobes(struct list_head *free_list)$/;"	f	file:
do_usleep_range	kernel/timer.c	/^static int __sched do_usleep_range(unsigned long min, unsigned long max)$/;"	f	file:
do_utimes	fs/utimes.c	/^long do_utimes(int dfd, const char __user *filename, struct timespec *times,$/;"	f
do_vfs_ioctl	fs/ioctl.c	/^int do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd,$/;"	f
do_video_get_event	fs/compat_ioctl.c	/^static int do_video_get_event(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_video_set_spu_palette	fs/compat_ioctl.c	/^static int do_video_set_spu_palette(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_video_stillpicture	fs/compat_ioctl.c	/^static int do_video_stillpicture(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_wait	kernel/exit.c	/^static long do_wait(struct wait_opts *wo)$/;"	f	file:
do_wait_thread	kernel/exit.c	/^static int do_wait_thread(struct wait_opts *wo, struct task_struct *tsk)$/;"	f	file:
do_writepages	mm/page-writeback.c	/^int do_writepages(struct address_space *mapping, struct writeback_control *wbc)$/;"	f
do_xip_mapping_read	mm/filemap_xip.c	/^do_xip_mapping_read(struct address_space *mapping,$/;"	f	file:
domain	kernel/async.c	/^	struct async_domain	*domain;$/;"	m	struct:async_entry	typeref:struct:async_entry::async_domain	file:
domain_list	kernel/async.c	/^	struct list_head	domain_list;$/;"	m	struct:async_entry	typeref:struct:async_entry::list_head	file:
done	fs/fs-writeback.c	/^	struct completion *done;	\/* set if the caller waits *\/$/;"	m	struct:wb_writeback_work	typeref:struct:wb_writeback_work::completion	file:
done	kernel/kthread.c	/^	struct completion	done;$/;"	m	struct:kthread_flush_work	typeref:struct:kthread_flush_work::completion	file:
done	kernel/kthread.c	/^	struct completion done;$/;"	m	struct:kthread_create_info	typeref:struct:kthread_create_info::completion	file:
done	kernel/workqueue.c	/^	struct completion	done;		\/* flush completion *\/$/;"	m	struct:wq_flusher	typeref:struct:wq_flusher::completion	file:
done	kernel/workqueue.c	/^	struct completion	done;$/;"	m	struct:wq_barrier	typeref:struct:wq_barrier::completion	file:
done_path_create	fs/namei.c	/^EXPORT_SYMBOL(done_path_create);$/;"	v
done_path_create	fs/namei.c	/^void done_path_create(struct path *path, struct dentry *dentry)$/;"	f
donetail	kernel/rcutiny_plugin.h	/^	struct rcu_head **donetail;	\/* ->next pointer of last "done" CB. *\/$/;"	m	struct:rcu_ctrlblk	typeref:struct:rcu_ctrlblk::rcu_head
dot	fs/ext3/namei.c	/^	struct fake_dirent dot;$/;"	m	struct:dx_root	typeref:struct:dx_root::fake_dirent	file:
dot_name	fs/ext3/namei.c	/^	char dot_name[4];$/;"	m	struct:dx_root	file:
dotdot	fs/ext3/namei.c	/^	struct fake_dirent dotdot;$/;"	m	struct:dx_root	typeref:struct:dx_root::fake_dirent	file:
dotdot_name	fs/ext3/namei.c	/^	char dotdot_name[4];$/;"	m	struct:dx_root	file:
double_flag_show	mm/huge_memory.c	/^static ssize_t double_flag_show(struct kobject *kobj,$/;"	f	file:
double_flag_store	mm/huge_memory.c	/^static ssize_t double_flag_store(struct kobject *kobj,$/;"	f	file:
double_lock_hb	kernel/futex.c	/^double_lock_hb(struct futex_hash_bucket *hb1, struct futex_hash_bucket *hb2)$/;"	f	file:
double_unlock_hb	kernel/futex.c	/^double_unlock_hb(struct futex_hash_bucket *hb1, struct futex_hash_bucket *hb2)$/;"	f	file:
down	kernel/semaphore.c	/^EXPORT_SYMBOL(down);$/;"	v
down	kernel/semaphore.c	/^void down(struct semaphore *sem)$/;"	f
down_interruptible	kernel/semaphore.c	/^EXPORT_SYMBOL(down_interruptible);$/;"	v
down_interruptible	kernel/semaphore.c	/^int down_interruptible(struct semaphore *sem)$/;"	f
down_killable	kernel/semaphore.c	/^EXPORT_SYMBOL(down_killable);$/;"	v
down_killable	kernel/semaphore.c	/^int down_killable(struct semaphore *sem)$/;"	f
down_read	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read);$/;"	v
down_read	kernel/rwsem.c	/^void __sched down_read(struct rw_semaphore *sem)$/;"	f
down_read_nested	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read_nested);$/;"	v
down_read_nested	kernel/rwsem.c	/^void down_read_nested(struct rw_semaphore *sem, int subclass)$/;"	f
down_read_trylock	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read_trylock);$/;"	v
down_read_trylock	kernel/rwsem.c	/^int down_read_trylock(struct rw_semaphore *sem)$/;"	f
down_timeout	kernel/semaphore.c	/^EXPORT_SYMBOL(down_timeout);$/;"	v
down_timeout	kernel/semaphore.c	/^int down_timeout(struct semaphore *sem, long jiffies)$/;"	f
down_trylock	kernel/semaphore.c	/^EXPORT_SYMBOL(down_trylock);$/;"	v
down_trylock	kernel/semaphore.c	/^int down_trylock(struct semaphore *sem)$/;"	f
down_write	kernel/rwsem.c	/^EXPORT_SYMBOL(down_write);$/;"	v
down_write	kernel/rwsem.c	/^void __sched down_write(struct rw_semaphore *sem)$/;"	f
down_write_nested	kernel/rwsem.c	/^EXPORT_SYMBOL(down_write_nested);$/;"	v
down_write_nested	kernel/rwsem.c	/^void down_write_nested(struct rw_semaphore *sem, int subclass)$/;"	f
down_write_trylock	kernel/rwsem.c	/^EXPORT_SYMBOL(down_write_trylock);$/;"	v
down_write_trylock	kernel/rwsem.c	/^int down_write_trylock(struct rw_semaphore *sem)$/;"	f
downgrade_write	kernel/rwsem.c	/^EXPORT_SYMBOL(downgrade_write);$/;"	v
downgrade_write	kernel/rwsem.c	/^void downgrade_write(struct rw_semaphore *sem)$/;"	f
dprintk	fs/aio.c	43;"	d	file:
dprintk	fs/aio.c	45;"	d	file:
dput	fs/dcache.c	/^EXPORT_SYMBOL(dput);$/;"	v
dput	fs/dcache.c	/^void dput(struct dentry *dentry)$/;"	f
dquot_to_inode	fs/ext3/super.c	/^static inline struct inode *dquot_to_inode(struct dquot *dquot)$/;"	f	file:
drain_alien_cache	mm/slab.c	/^static void drain_alien_cache(struct kmem_cache *cachep,$/;"	f	file:
drain_alien_cache	mm/slab.c	1073;"	d	file:
drain_all_pages	mm/page_alloc.c	/^void drain_all_pages(void)$/;"	f
drain_all_stock	mm/memcontrol.c	/^static void drain_all_stock(struct mem_cgroup *root_memcg, bool sync)$/;"	f	file:
drain_all_stock_async	mm/memcontrol.c	/^static void drain_all_stock_async(struct mem_cgroup *root_memcg)$/;"	f	file:
drain_all_stock_sync	mm/memcontrol.c	/^static void drain_all_stock_sync(struct mem_cgroup *root_memcg)$/;"	f	file:
drain_array	mm/slab.c	/^static void drain_array(struct kmem_cache *cachep, struct kmem_list3 *l3,$/;"	f	file:
drain_cache_nodelists_node	mm/slab.c	/^static int __meminit drain_cache_nodelists_node(int node)$/;"	f	file:
drain_cpu_caches	mm/slab.c	/^static void drain_cpu_caches(struct kmem_cache *cachep)$/;"	f	file:
drain_freelist	mm/slab.c	/^static int drain_freelist(struct kmem_cache *cache,$/;"	f	file:
drain_local_pages	mm/page_alloc.c	/^void drain_local_pages(void *arg)$/;"	f
drain_local_stock	mm/memcontrol.c	/^static void drain_local_stock(struct work_struct *dummy)$/;"	f	file:
drain_mmlist	mm/swapfile.c	/^static void drain_mmlist(void)$/;"	f	file:
drain_pages	mm/page_alloc.c	/^static void drain_pages(unsigned int cpu)$/;"	f	file:
drain_stock	mm/memcontrol.c	/^static void drain_stock(struct memcg_stock_pcp *stock)$/;"	f	file:
drain_workqueue	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(drain_workqueue);$/;"	v
drain_workqueue	kernel/workqueue.c	/^void drain_workqueue(struct workqueue_struct *wq)$/;"	f
drain_zone_pages	mm/page_alloc.c	/^void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp)$/;"	f
drain_zonestat	mm/vmstat.c	/^void drain_zonestat(struct zone *zone, struct per_cpu_pageset *pset)$/;"	f
driver_status	fs/compat_ioctl.c	/^	unsigned short driver_status;	\/* [o] errors from software driver *\/$/;"	m	struct:sg_io_hdr32	file:
drop_buffers	fs/buffer.c	/^drop_buffers(struct page *page, struct buffer_head **buffers_to_free)$/;"	f	file:
drop_caches_sysctl_handler	fs/drop_caches.c	/^int drop_caches_sysctl_handler(ctl_table *table, int write,$/;"	f
drop_collected_mounts	fs/namespace.c	/^void drop_collected_mounts(struct vfsmount *mnt)$/;"	f
drop_file_write_access	fs/file_table.c	/^static void drop_file_write_access(struct file *file)$/;"	f	file:
drop_futex_key_refs	kernel/futex.c	/^static void drop_futex_key_refs(union futex_key *key)$/;"	f	file:
drop_nlink	fs/inode.c	/^EXPORT_SYMBOL(drop_nlink);$/;"	v
drop_nlink	fs/inode.c	/^void drop_nlink(struct inode *inode)$/;"	f
drop_pagecache_sb	fs/drop_caches.c	/^static void drop_pagecache_sb(struct super_block *sb, void *unused)$/;"	f	file:
drop_parsed_module_refcounts	kernel/cgroup.c	/^static void drop_parsed_module_refcounts(unsigned long subsys_mask)$/;"	f	file:
drop_refcount	fs/direct-io.c	/^static inline int drop_refcount(struct dio *dio)$/;"	f	file:
drop_slab	fs/drop_caches.c	/^static void drop_slab(void)$/;"	f	file:
drop_super	fs/super.c	/^EXPORT_SYMBOL(drop_super);$/;"	v
drop_super	fs/super.c	/^void drop_super(struct super_block *sb)$/;"	f
dt_type	fs/libfs.c	/^static inline unsigned char dt_type(struct inode *inode)$/;"	f	file:
dummy	kernel/auditsc.c	/^	int		    dummy;	\/* must be the first element *\/$/;"	m	struct:audit_context	file:
dummytop	kernel/cgroup.c	239;"	d	file:
dump_header	mm/oom_kill.c	/^static void dump_header(struct task_struct *p, gfp_t gfp_mask, int order,$/;"	f	file:
dump_invalid_creds	kernel/cred.c	/^static void dump_invalid_creds(const struct cred *cred, const char *label,$/;"	f	file:
dump_kprobe	kernel/kprobes.c	/^void __kprobes dump_kprobe(struct kprobe *kp)$/;"	f
dump_line	mm/slab.c	/^static void dump_line(char *data, int offset, int limit)$/;"	f	file:
dump_object_info	mm/kmemleak.c	/^static void dump_object_info(struct kmemleak_object *object)$/;"	f	file:
dump_orphan_list	fs/ext3/super.c	/^static void dump_orphan_list(struct super_block *sb, struct ext3_sb_info *sbi)$/;"	f	file:
dump_page	mm/page_alloc.c	/^void dump_page(struct page *page)$/;"	f
dump_page_flags	mm/page_alloc.c	/^static void dump_page_flags(unsigned long flags)$/;"	f	file:
dump_seek	fs/coredump.c	/^EXPORT_SYMBOL(dump_seek);$/;"	v
dump_seek	fs/coredump.c	/^int dump_seek(struct file *file, loff_t off)$/;"	f
dump_str_object_info	mm/kmemleak.c	/^static int dump_str_object_info(const char *str)$/;"	f	file:
dump_tasks	mm/oom_kill.c	/^static void dump_tasks(const struct mem_cgroup *memcg, const nodemask_t *nodemask)$/;"	f	file:
dump_write	fs/coredump.c	/^EXPORT_SYMBOL(dump_write);$/;"	v
dump_write	fs/coredump.c	/^int dump_write(struct file *file, const void *addr, int nr)$/;"	f
dup_fd	fs/file.c	/^struct files_struct *dup_fd(struct files_struct *oldf, int *errorp)$/;"	f
dup_mm	kernel/fork.c	/^struct mm_struct *dup_mm(struct task_struct *tsk)$/;"	f
dup_mm_exe_file	kernel/fork.c	/^static void dup_mm_exe_file(struct mm_struct *oldmm, struct mm_struct *newmm)$/;"	f	file:
dup_mmap	kernel/fork.c	/^static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)$/;"	f	file:
dup_mmap	kernel/fork.c	499;"	d	file:
dup_mnt_ns	fs/namespace.c	/^static struct mnt_namespace *dup_mnt_ns(struct mnt_namespace *mnt_ns,$/;"	f	file:
dup_task_struct	kernel/fork.c	/^static struct task_struct *dup_task_struct(struct task_struct *orig)$/;"	f	file:
duration	fs/compat_ioctl.c	/^	compat_uint_t duration;		\/* [o] time taken by cmd (unit: millisec) *\/$/;"	m	struct:sg_io_hdr32	file:
duration	fs/compat_ioctl.c	/^	unsigned int duration;$/;"	m	struct:compat_sg_req_info	file:
dx_countlimit	fs/ext3/namei.c	/^struct dx_countlimit$/;"	s	file:
dx_entry	fs/ext3/namei.c	/^struct dx_entry$/;"	s	file:
dx_frame	fs/ext3/namei.c	/^struct dx_frame$/;"	s	file:
dx_get_block	fs/ext3/namei.c	/^static inline unsigned dx_get_block (struct dx_entry *entry)$/;"	f	file:
dx_get_count	fs/ext3/namei.c	/^static inline unsigned dx_get_count (struct dx_entry *entries)$/;"	f	file:
dx_get_hash	fs/ext3/namei.c	/^static inline unsigned dx_get_hash (struct dx_entry *entry)$/;"	f	file:
dx_get_limit	fs/ext3/namei.c	/^static inline unsigned dx_get_limit (struct dx_entry *entries)$/;"	f	file:
dx_hack_hash_signed	fs/ext3/hash.c	/^static __u32 dx_hack_hash_signed(const char *name, int len)$/;"	f	file:
dx_hack_hash_unsigned	fs/ext3/hash.c	/^static __u32 dx_hack_hash_unsigned(const char *name, int len)$/;"	f	file:
dx_hash_info	fs/ext3/ext3.h	/^struct dx_hash_info$/;"	s
dx_insert_block	fs/ext3/namei.c	/^static void dx_insert_block(struct dx_frame *frame, u32 hash, u32 block)$/;"	f	file:
dx_make_map	fs/ext3/namei.c	/^static int dx_make_map(struct ext3_dir_entry_2 *de, unsigned blocksize,$/;"	f	file:
dx_map_entry	fs/ext3/namei.c	/^struct dx_map_entry$/;"	s	file:
dx_move_dirents	fs/ext3/namei.c	/^dx_move_dirents(char *from, char *to, struct dx_map_entry *map, int count)$/;"	f	file:
dx_node	fs/ext3/namei.c	/^struct dx_node$/;"	s	file:
dx_node_limit	fs/ext3/namei.c	/^static inline unsigned dx_node_limit (struct inode *dir)$/;"	f	file:
dx_pack_dirents	fs/ext3/namei.c	/^static struct ext3_dir_entry_2 *dx_pack_dirents(char *base, unsigned blocksize)$/;"	f	file:
dx_probe	fs/ext3/namei.c	/^dx_probe(struct qstr *entry, struct inode *dir,$/;"	f	file:
dx_release	fs/ext3/namei.c	/^static void dx_release (struct dx_frame *frames)$/;"	f	file:
dx_root	fs/ext3/namei.c	/^struct dx_root$/;"	s	file:
dx_root_info	fs/ext3/namei.c	/^	struct dx_root_info$/;"	s	struct:dx_root	file:
dx_root_limit	fs/ext3/namei.c	/^static inline unsigned dx_root_limit (struct inode *dir, unsigned infosize)$/;"	f	file:
dx_set_block	fs/ext3/namei.c	/^static inline void dx_set_block (struct dx_entry *entry, unsigned value)$/;"	f	file:
dx_set_count	fs/ext3/namei.c	/^static inline void dx_set_count (struct dx_entry *entries, unsigned value)$/;"	f	file:
dx_set_hash	fs/ext3/namei.c	/^static inline void dx_set_hash (struct dx_entry *entry, unsigned value)$/;"	f	file:
dx_set_limit	fs/ext3/namei.c	/^static inline void dx_set_limit (struct dx_entry *entries, unsigned value)$/;"	f	file:
dx_show_entries	fs/ext3/namei.c	/^struct stats dx_show_entries(struct dx_hash_info *hinfo, struct inode *dir,$/;"	f
dx_show_index	fs/ext3/namei.c	/^static void dx_show_index (char * label, struct dx_entry *entries)$/;"	f	file:
dx_show_leaf	fs/ext3/namei.c	/^static struct stats dx_show_leaf(struct dx_hash_info *hinfo, struct ext3_dir_entry_2 *de,$/;"	f	file:
dx_sort_map	fs/ext3/namei.c	/^static void dx_sort_map (struct dx_map_entry *map, unsigned count)$/;"	f	file:
dxfer_direction	fs/compat_ioctl.c	/^	compat_int_t dxfer_direction;	\/* [i] data transfer direction  *\/$/;"	m	struct:sg_io_hdr32	file:
dxfer_len	fs/compat_ioctl.c	/^	compat_uint_t dxfer_len;		\/* [i] byte count of data transfer *\/$/;"	m	struct:sg_io_hdr32	file:
dxferp	fs/compat_ioctl.c	/^	compat_uint_t dxferp;		\/* [i], [*io] points to data transfer memory$/;"	m	struct:sg_io_hdr32	file:
dxtrace	fs/ext3/namei.c	65;"	d	file:
dxtrace	fs/ext3/namei.c	67;"	d	file:
dynamic_debug_remove	kernel/module.c	/^static void dynamic_debug_remove(struct _ddebug *debug)$/;"	f	file:
dynamic_debug_setup	kernel/module.c	/^static void dynamic_debug_setup(struct _ddebug *debug, unsigned int num)$/;"	f	file:
dynamic_dname	fs/dcache.c	/^char *dynamic_dname(struct dentry *dentry, char *buffer, int buflen,$/;"	f
dyntick_drain	kernel/rcutree.h	/^	int dyntick_drain;	    \/* Prepare-for-idle state variable. *\/$/;"	m	struct:rcu_dynticks
dyntick_holdoff	kernel/rcutree.h	/^	unsigned long dyntick_holdoff;$/;"	m	struct:rcu_dynticks
dyntick_save_progress_counter	kernel/rcutree.c	/^static int dyntick_save_progress_counter(struct rcu_data *rdp)$/;"	f	file:
dynticks	kernel/rcutree.h	/^	atomic_t dynticks;	    \/* Even value for idle, else odd. *\/$/;"	m	struct:rcu_dynticks
dynticks	kernel/rcutree.h	/^	struct rcu_dynticks *dynticks;	\/* Shared per-CPU dynticks state. *\/$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_dynticks
dynticks_fqs	kernel/rcutree.h	/^	unsigned long dynticks_fqs;	\/* Kicked due to dynticks idle. *\/$/;"	m	struct:rcu_data
dynticks_nesting	kernel/rcutree.h	/^	long long dynticks_nesting; \/* Track irq\/process nesting level. *\/$/;"	m	struct:rcu_dynticks
dynticks_nmi_nesting	kernel/rcutree.h	/^	int dynticks_nmi_nesting;   \/* Track NMI nesting level. *\/$/;"	m	struct:rcu_dynticks
dynticks_snap	kernel/rcutree.h	/^	int dynticks_snap;		\/* Per-GP tracking for dynticks. *\/$/;"	m	struct:rcu_data
e_hash	fs/ext3/xattr.h	/^	__le32	e_hash;		\/* hash value of name and value *\/$/;"	m	struct:ext3_xattr_entry
e_id	fs/ext3/acl.h	/^	__le32		e_id;$/;"	m	struct:__anon28
e_name	fs/ext3/xattr.h	/^	char	e_name[0];	\/* attribute name *\/$/;"	m	struct:ext3_xattr_entry
e_name_index	fs/ext3/xattr.h	/^	__u8	e_name_index;	\/* attribute name index *\/$/;"	m	struct:ext3_xattr_entry
e_name_len	fs/ext3/xattr.h	/^	__u8	e_name_len;	\/* length of name *\/$/;"	m	struct:ext3_xattr_entry
e_perm	fs/ext3/acl.h	/^	__le16		e_perm;$/;"	m	struct:__anon28
e_perm	fs/ext3/acl.h	/^	__le16		e_perm;$/;"	m	struct:__anon29
e_tag	fs/ext3/acl.h	/^	__le16		e_tag;$/;"	m	struct:__anon28
e_tag	fs/ext3/acl.h	/^	__le16		e_tag;$/;"	m	struct:__anon29
e_value_block	fs/ext3/xattr.h	/^	__le32	e_value_block;	\/* disk block attribute is stored on (n\/i) *\/$/;"	m	struct:ext3_xattr_entry
e_value_offs	fs/ext3/xattr.h	/^	__le16	e_value_offs;	\/* offset in disk block of value *\/$/;"	m	struct:ext3_xattr_entry
e_value_size	fs/ext3/xattr.h	/^	__le32	e_value_size;	\/* size of attribute value *\/$/;"	m	struct:ext3_xattr_entry
ea_bdebug	fs/ext3/xattr.c	78;"	d	file:
ea_bdebug	fs/ext3/xattr.c	88;"	d	file:
ea_idebug	fs/ext3/xattr.c	72;"	d	file:
ea_idebug	fs/ext3/xattr.c	87;"	d	file:
each_symbol_in_section	kernel/module.c	/^static bool each_symbol_in_section(const struct symsearch *arr,$/;"	f	file:
each_symbol_section	kernel/module.c	/^EXPORT_SYMBOL_GPL(each_symbol_section);$/;"	v
each_symbol_section	kernel/module.c	/^bool each_symbol_section(bool (*fn)(const struct symsearch *arr,$/;"	f
early_alloc	mm/kmemleak.c	/^static void early_alloc(struct early_log *log)$/;"	f	file:
early_alloc_percpu	mm/kmemleak.c	/^static void early_alloc_percpu(struct early_log *log)$/;"	f	file:
early_calculate_totalpages	mm/page_alloc.c	/^static unsigned long __init early_calculate_totalpages(void)$/;"	f	file:
early_irq_init	kernel/softirq.c	/^int __init __weak early_irq_init(void)$/;"	f
early_kmem_cache_node_alloc	mm/slub.c	/^static void early_kmem_cache_node_alloc(int node)$/;"	f	file:
early_log	mm/kmemleak.c	/^struct early_log {$/;"	s	file:
early_memblock	mm/memblock.c	/^static int __init early_memblock(char *p)$/;"	f	file:
early_pfn_in_nid	mm/page_alloc.c	/^bool __meminit early_pfn_in_nid(unsigned long pfn, int node)$/;"	f
early_pfn_to_nid	mm/page_alloc.c	/^int __meminit early_pfn_to_nid(unsigned long pfn)$/;"	f
early_printk	kernel/printk.c	/^void asmlinkage __attribute__((weak)) early_printk(const char *fmt, ...)$/;"	f
effective	kernel/auditsc.c	/^		kernel_cap_t	effective;	\/* effective set of a process *\/$/;"	m	union:audit_cap_data::__anon42	file:
egid	kernel/auditsc.c	/^	kgid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
element	kernel/lockdep.c	/^	unsigned long element[MAX_CIRCULAR_QUEUE_SIZE];$/;"	m	struct:circular_queue	file:
elf_addr_t	fs/compat_binfmt_elf.c	33;"	d	file:
elf_addr_t	fs/compat_binfmt_elf.c	38;"	d	file:
elf_caddr_t	fs/binfmt_elf_fdpic.c	/^typedef char *elf_caddr_t;$/;"	t	file:
elf_check_arch	fs/compat_binfmt_elf.c	78;"	d	file:
elf_check_arch	fs/compat_binfmt_elf.c	79;"	d	file:
elf_core_dump	fs/binfmt_elf.c	/^static int elf_core_dump(struct coredump_params *cprm)$/;"	f	file:
elf_core_dump	fs/binfmt_elf.c	60;"	d	file:
elf_core_extra_data_size	kernel/elfcore.c	/^size_t __weak elf_core_extra_data_size(void)$/;"	f
elf_core_extra_phdrs	kernel/elfcore.c	/^Elf_Half __weak elf_core_extra_phdrs(void)$/;"	f
elf_core_vma_data_size	fs/binfmt_elf.c	/^static size_t elf_core_vma_data_size(struct vm_area_struct *gate_vma,$/;"	f	file:
elf_core_vma_data_size	fs/binfmt_elf_fdpic.c	/^static size_t elf_core_vma_data_size(unsigned long mm_flags)$/;"	f	file:
elf_core_write_extra_data	kernel/elfcore.c	/^int __weak elf_core_write_extra_data(struct file *file, size_t *size,$/;"	f
elf_core_write_extra_phdrs	kernel/elfcore.c	/^int __weak elf_core_write_extra_phdrs(struct file *file, loff_t offset, size_t *size,$/;"	f
elf_dump_thread_status	fs/binfmt_elf.c	/^static int elf_dump_thread_status(long signr, struct elf_thread_status *t)$/;"	f	file:
elf_dump_thread_status	fs/binfmt_elf_fdpic.c	/^static int elf_dump_thread_status(long signr, struct elf_thread_status *t)$/;"	f	file:
elf_fdpic_core_dump	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_core_dump(struct coredump_params *cprm)$/;"	f	file:
elf_fdpic_dump_segments	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_dump_segments(struct file *file, size_t *size,$/;"	f	file:
elf_fdpic_fetch_phdrs	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_fetch_phdrs(struct elf_fdpic_params *params,$/;"	f	file:
elf_fdpic_format	fs/binfmt_elf_fdpic.c	/^static struct linux_binfmt elf_fdpic_format = {$/;"	v	typeref:struct:linux_binfmt	file:
elf_fdpic_map_file	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_map_file(struct elf_fdpic_params *params,$/;"	f	file:
elf_fdpic_map_file_by_direct_mmap	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_map_file_by_direct_mmap(struct elf_fdpic_params *params,$/;"	f	file:
elf_fdpic_map_file_constdisp_on_uclinux	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_map_file_constdisp_on_uclinux($/;"	f	file:
elf_fdpic_transfer_args_to_stack	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_transfer_args_to_stack(struct linux_binprm *bprm,$/;"	f	file:
elf_format	fs/binfmt_elf.c	/^static struct linux_binfmt elf_format = {$/;"	v	typeref:struct:linux_binfmt	file:
elf_format	fs/compat_binfmt_elf.c	133;"	d	file:
elf_header_check	kernel/module.c	/^static int elf_header_check(struct load_info *info)$/;"	f	file:
elf_map	fs/binfmt_elf.c	/^static unsigned long elf_map(struct file *filep, unsigned long addr,$/;"	f	file:
elf_note	fs/compat_binfmt_elf.c	32;"	d	file:
elf_note	fs/compat_binfmt_elf.c	37;"	d	file:
elf_note_info	fs/binfmt_elf.c	/^struct elf_note_info {$/;"	s	file:
elf_note_info_init	fs/binfmt_elf.c	/^static int elf_note_info_init(struct elf_note_info *info)$/;"	f	file:
elf_phdr	fs/compat_binfmt_elf.c	30;"	d	file:
elf_phdr	fs/compat_binfmt_elf.c	35;"	d	file:
elf_prpsinfo	fs/compat_binfmt_elf.c	52;"	d	file:
elf_prstatus	fs/compat_binfmt_elf.c	51;"	d	file:
elf_shdr	fs/compat_binfmt_elf.c	31;"	d	file:
elf_shdr	fs/compat_binfmt_elf.c	36;"	d	file:
elf_thread_core_info	fs/binfmt_elf.c	/^struct elf_thread_core_info {$/;"	s	file:
elf_thread_status	fs/binfmt_elf.c	/^struct elf_thread_status$/;"	s	file:
elf_thread_status	fs/binfmt_elf_fdpic.c	/^struct elf_thread_status$/;"	s	file:
elf_type	kernel/module.c	/^static char elf_type(const Elf_Sym *sym, const struct load_info *info)$/;"	f	file:
elfcorehdr_addr	kernel/crash_dump.c	/^unsigned long long elfcorehdr_addr = ELFCORE_ADDR_MAX;$/;"	v
elfcorehdr_size	kernel/crash_dump.c	/^unsigned long long elfcorehdr_size;$/;"	v
elfhdr	fs/compat_binfmt_elf.c	29;"	d	file:
elfhdr	fs/compat_binfmt_elf.c	34;"	d	file:
eligible_child	kernel/exit.c	/^static int eligible_child(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
eligible_pid	kernel/exit.c	/^static int eligible_pid(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
em86_format	fs/binfmt_em86.c	/^static struct linux_binfmt em86_format = {$/;"	v	typeref:struct:linux_binfmt	file:
emergency_remount	fs/super.c	/^void emergency_remount(void)$/;"	f
emergency_restart	kernel/sys.c	/^EXPORT_SYMBOL_GPL(emergency_restart);$/;"	v
emergency_restart	kernel/sys.c	/^void emergency_restart(void)$/;"	f
emergency_sync	fs/sync.c	/^void emergency_sync(void)$/;"	f
emergency_thaw_all	fs/buffer.c	/^void emergency_thaw_all(void)$/;"	f
empty_aops	fs/inode.c	/^EXPORT_SYMBOL(empty_aops);$/;"	v
empty_aops	fs/inode.c	/^const struct address_space_operations empty_aops = {$/;"	v	typeref:struct:address_space_operations
empty_dir	fs/ext3/namei.c	/^static int empty_dir (struct inode * inode)$/;"	f	file:
enable_cpucache	mm/slab.c	/^static int enable_cpucache(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
enable_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(enable_kprobe);$/;"	v
enable_kprobe	kernel/kprobes.c	/^int __kprobes enable_kprobe(struct kprobe *kp)$/;"	f
enable_nonboot_cpus	kernel/cpu.c	/^void __ref enable_nonboot_cpus(void)$/;"	f
enable_swap_account	mm/memcontrol.c	/^static int __init enable_swap_account(char *s)$/;"	f	file:
enable_swap_cgroup	mm/memcontrol.c	/^static void __init enable_swap_cgroup(void)$/;"	f	file:
enable_swap_info	mm/swapfile.c	/^static void enable_swap_info(struct swap_info_struct *p, int prio,$/;"	f	file:
enabled	fs/binfmt_misc.c	/^static int enabled = 1;$/;"	v	file:
enabled	kernel/stop_machine.c	/^	bool			enabled;	\/* is this stopper enabled? *\/$/;"	m	struct:cpu_stopper	file:
enabled_attr	mm/huge_memory.c	/^static struct kobj_attribute enabled_attr =$/;"	v	typeref:struct:kobj_attribute	file:
enabled_show	mm/huge_memory.c	/^static ssize_t enabled_show(struct kobject *kobj,$/;"	f	file:
enabled_store	mm/huge_memory.c	/^static ssize_t enabled_store(struct kobject *kobj,$/;"	f	file:
encode_comp2_t	kernel/acct.c	/^static comp2_t encode_comp2_t(u64 value)$/;"	f	file:
encode_comp_t	kernel/acct.c	/^static comp_t encode_comp_t(unsigned long value)$/;"	f	file:
encode_dev	fs/stat.c	204;"	d	file:
encode_float	kernel/acct.c	/^static u32 encode_float(u64 value)$/;"	f	file:
end	fs/ext3/xattr.c	/^	void *end;$/;"	m	struct:ext3_xattr_search	file:
end_bio_bh_io_sync	fs/buffer.c	/^static void end_bio_bh_io_sync(struct bio *bio, int err)$/;"	f	file:
end_buffer_async_read	fs/buffer.c	/^static void end_buffer_async_read(struct buffer_head *bh, int uptodate)$/;"	f	file:
end_buffer_async_write	fs/buffer.c	/^EXPORT_SYMBOL(end_buffer_async_write);$/;"	v
end_buffer_async_write	fs/buffer.c	/^void end_buffer_async_write(struct buffer_head *bh, int uptodate)$/;"	f
end_buffer_read_nobh	fs/buffer.c	/^static void end_buffer_read_nobh(struct buffer_head *bh, int uptodate)$/;"	f	file:
end_buffer_read_sync	fs/buffer.c	/^EXPORT_SYMBOL(end_buffer_read_sync);$/;"	v
end_buffer_read_sync	fs/buffer.c	/^void end_buffer_read_sync(struct buffer_head *bh, int uptodate)$/;"	f
end_buffer_write_sync	fs/buffer.c	/^EXPORT_SYMBOL(end_buffer_write_sync);$/;"	v
end_buffer_write_sync	fs/buffer.c	/^void end_buffer_write_sync(struct buffer_head *bh, int uptodate)$/;"	f
end_io	fs/direct-io.c	/^	dio_iodone_t *end_io;		\/* IO completion function *\/$/;"	m	struct:dio	file:
end_page_writeback	mm/filemap.c	/^EXPORT_SYMBOL(end_page_writeback);$/;"	v
end_page_writeback	mm/filemap.c	/^void end_page_writeback(struct page *page)$/;"	f
end_swap_bio_read	mm/page_io.c	/^void end_swap_bio_read(struct bio *bio, int err)$/;"	f
end_swap_bio_write	mm/page_io.c	/^static void end_swap_bio_write(struct bio *bio, int err)$/;"	f	file:
enqueue_hrtimer	kernel/hrtimer.c	/^static int enqueue_hrtimer(struct hrtimer *timer,$/;"	f	file:
enqueue_huge_page	mm/hugetlb.c	/^static void enqueue_huge_page(struct hstate *h, struct page *page)$/;"	f	file:
ensure_zone_is_initialized	mm/memory_hotplug.c	/^static int __ref ensure_zone_is_initialized(struct zone *zone,$/;"	f	file:
ent	mm/memcontrol.c	/^	swp_entry_t	ent;$/;"	m	union:mc_target	file:
entries	fs/ext3/namei.c	/^	struct dx_entry	entries[0];$/;"	m	struct:dx_node	typeref:struct:dx_node::dx_entry	file:
entries	fs/ext3/namei.c	/^	struct dx_entry	entries[0];$/;"	m	struct:dx_root	typeref:struct:dx_root::dx_entry	file:
entries	fs/ext3/namei.c	/^	struct dx_entry *entries;$/;"	m	struct:dx_frame	typeref:struct:dx_frame::dx_entry	file:
entries	fs/select.c	/^	struct poll_table_entry entries[0];$/;"	m	struct:poll_table_page	typeref:struct:poll_table_page::poll_table_entry	file:
entries	fs/select.c	/^	struct pollfd entries[0];$/;"	m	struct:poll_list	typeref:struct:poll_list::pollfd	file:
entries	kernel/jump_label.c	/^	struct jump_entry *entries;$/;"	m	struct:static_key_mod	typeref:struct:static_key_mod::jump_entry	file:
entries	mm/memcontrol.c	/^	struct mem_cgroup_threshold entries[0];$/;"	m	struct:mem_cgroup_threshold_ary	typeref:struct:mem_cgroup_threshold_ary::mem_cgroup_threshold	file:
entries	mm/slab.c	/^	void *entries[BOOT_CPUCACHE_ENTRIES];$/;"	m	struct:arraycache_init	file:
entry	fs/binfmt_flat.c	/^		unsigned long entry;			\/* Start address for this module *\/$/;"	m	struct:lib_info::__anon22	file:
entry	fs/select.c	/^	struct poll_table_entry * entry;$/;"	m	struct:poll_table_page	typeref:struct:poll_table_page::poll_table_entry	file:
entry	kernel/workqueue_internal.h	/^		struct list_head	entry;	\/* L: while idle *\/$/;"	m	union:worker::__anon67	typeref:struct:worker::__anon67::list_head
entry	mm/slab.c	/^	void *entry[];	\/*$/;"	m	struct:array_cache	file:
entry_count	fs/binfmt_misc.c	/^static int entry_count;$/;"	v	file:
entry_count	kernel/async.c	/^static atomic_t entry_count;$/;"	v	file:
entry_handler	kernel/test_kprobes.c	/^static int entry_handler(struct kretprobe_instance *ri, struct pt_regs *regs)$/;"	f	file:
entry_status	fs/binfmt_misc.c	/^static void entry_status(Node *e, char *page)$/;"	f	file:
envc	kernel/auditsc.c	/^	int envc;$/;"	m	struct:audit_aux_data_execve	file:
ep	fs/eventpoll.c	/^	struct eventpoll *ep;$/;"	m	struct:epitem	typeref:struct:epitem::eventpoll	file:
ep_alloc	fs/eventpoll.c	/^static int ep_alloc(struct eventpoll **pep)$/;"	f	file:
ep_call_nested	fs/eventpoll.c	/^static int ep_call_nested(struct nested_calls *ncalls, int max_nests,$/;"	f	file:
ep_cmp_ffd	fs/eventpoll.c	/^static inline int ep_cmp_ffd(struct epoll_filefd *p1,$/;"	f	file:
ep_create_wakeup_source	fs/eventpoll.c	/^static int ep_create_wakeup_source(struct epitem *epi)$/;"	f	file:
ep_destroy_wakeup_source	fs/eventpoll.c	/^static void ep_destroy_wakeup_source(struct epitem *epi)$/;"	f	file:
ep_eventpoll_poll	fs/eventpoll.c	/^static unsigned int ep_eventpoll_poll(struct file *file, poll_table *wait)$/;"	f	file:
ep_eventpoll_release	fs/eventpoll.c	/^static int ep_eventpoll_release(struct inode *inode, struct file *file)$/;"	f	file:
ep_events_available	fs/eventpoll.c	/^static inline int ep_events_available(struct eventpoll *ep)$/;"	f	file:
ep_find	fs/eventpoll.c	/^static struct epitem *ep_find(struct eventpoll *ep, struct file *file, int fd)$/;"	f	file:
ep_free	fs/eventpoll.c	/^static void ep_free(struct eventpoll *ep)$/;"	f	file:
ep_insert	fs/eventpoll.c	/^static int ep_insert(struct eventpoll *ep, struct epoll_event *event,$/;"	f	file:
ep_is_linked	fs/eventpoll.c	/^static inline int ep_is_linked(struct list_head *p)$/;"	f	file:
ep_item_from_epqueue	fs/eventpoll.c	/^static inline struct epitem *ep_item_from_epqueue(poll_table *p)$/;"	f	file:
ep_item_from_wait	fs/eventpoll.c	/^static inline struct epitem *ep_item_from_wait(wait_queue_t *p)$/;"	f	file:
ep_loop_check	fs/eventpoll.c	/^static int ep_loop_check(struct eventpoll *ep, struct file *file)$/;"	f	file:
ep_loop_check_proc	fs/eventpoll.c	/^static int ep_loop_check_proc(void *priv, void *cookie, int call_nests)$/;"	f	file:
ep_modify	fs/eventpoll.c	/^static int ep_modify(struct eventpoll *ep, struct epitem *epi, struct epoll_event *event)$/;"	f	file:
ep_nested_calls_init	fs/eventpoll.c	/^static void ep_nested_calls_init(struct nested_calls *ncalls)$/;"	f	file:
ep_op_has_event	fs/eventpoll.c	/^static inline int ep_op_has_event(int op)$/;"	f	file:
ep_poll	fs/eventpoll.c	/^static int ep_poll(struct eventpoll *ep, struct epoll_event __user *events,$/;"	f	file:
ep_poll_callback	fs/eventpoll.c	/^static int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
ep_poll_readyevents_proc	fs/eventpoll.c	/^static int ep_poll_readyevents_proc(void *priv, void *cookie, int call_nests)$/;"	f	file:
ep_poll_safewake	fs/eventpoll.c	/^static void ep_poll_safewake(wait_queue_head_t *wq)$/;"	f	file:
ep_poll_wakeup_proc	fs/eventpoll.c	/^static int ep_poll_wakeup_proc(void *priv, void *cookie, int call_nests)$/;"	f	file:
ep_pqueue	fs/eventpoll.c	/^struct ep_pqueue {$/;"	s	file:
ep_ptable_queue_proc	fs/eventpoll.c	/^static void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead,$/;"	f	file:
ep_pwq_from_wait	fs/eventpoll.c	/^static inline struct eppoll_entry *ep_pwq_from_wait(wait_queue_t *p)$/;"	f	file:
ep_rbtree_insert	fs/eventpoll.c	/^static void ep_rbtree_insert(struct eventpoll *ep, struct epitem *epi)$/;"	f	file:
ep_read_events_proc	fs/eventpoll.c	/^static int ep_read_events_proc(struct eventpoll *ep, struct list_head *head,$/;"	f	file:
ep_remove	fs/eventpoll.c	/^static int ep_remove(struct eventpoll *ep, struct epitem *epi)$/;"	f	file:
ep_remove_wait_queue	fs/eventpoll.c	/^static void ep_remove_wait_queue(struct eppoll_entry *pwq)$/;"	f	file:
ep_scan_ready_list	fs/eventpoll.c	/^static int ep_scan_ready_list(struct eventpoll *ep,$/;"	f	file:
ep_send_events	fs/eventpoll.c	/^static int ep_send_events(struct eventpoll *ep,$/;"	f	file:
ep_send_events_data	fs/eventpoll.c	/^struct ep_send_events_data {$/;"	s	file:
ep_send_events_proc	fs/eventpoll.c	/^static int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,$/;"	f	file:
ep_set_ffd	fs/eventpoll.c	/^static inline void ep_set_ffd(struct epoll_filefd *ffd,$/;"	f	file:
ep_set_mstimeout	fs/eventpoll.c	/^static inline struct timespec ep_set_mstimeout(long ms)$/;"	f	file:
ep_show_fdinfo	fs/eventpoll.c	/^static int ep_show_fdinfo(struct seq_file *m, struct file *f)$/;"	f	file:
ep_unregister_pollwait	fs/eventpoll.c	/^static void ep_unregister_pollwait(struct eventpoll *ep, struct epitem *epi)$/;"	f	file:
ep_wake_up_nested	fs/eventpoll.c	/^static inline void ep_wake_up_nested(wait_queue_head_t *wqueue,$/;"	f	file:
epi	fs/eventpoll.c	/^	struct epitem *epi;$/;"	m	struct:ep_pqueue	typeref:struct:ep_pqueue::epitem	file:
epitem	fs/eventpoll.c	/^struct epitem {$/;"	s	file:
epoll_filefd	fs/eventpoll.c	/^struct epoll_filefd {$/;"	s	file:
epoll_table	fs/eventpoll.c	/^ctl_table epoll_table[] = {$/;"	v
eppoll_entry	fs/eventpoll.c	/^struct eppoll_entry {$/;"	s	file:
error	fs/compat.c	/^	int error;$/;"	m	struct:compat_getdents_callback	file:
error	fs/compat.c	/^	int error;$/;"	m	struct:compat_getdents_callback64	file:
error	fs/readdir.c	/^	int error;$/;"	m	struct:getdents_callback	file:
error	fs/readdir.c	/^	int error;$/;"	m	struct:getdents_callback64	file:
error_states	mm/memory-failure.c	/^} error_states[] = {$/;"	v	typeref:struct:page_state	file:
errors	kernel/test_kprobes.c	/^static int errors, handler_errors, num_tests;$/;"	v	file:
euid	kernel/auditsc.c	/^	kuid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
event	fs/eventpoll.c	/^	struct epoll_event event;$/;"	m	struct:epitem	typeref:struct:epitem::epoll_event	file:
event	fs/mount.h	/^	int event;$/;"	m	struct:mnt_namespace
event	fs/namespace.c	/^static int event;$/;"	v	file:
event	kernel/rtmutex-tester.c	/^	int			event;$/;"	m	struct:test_thread_data	file:
event_compare	fs/notify/inotify/inotify_fsnotify.c	/^static bool event_compare(struct fsnotify_event *old, struct fsnotify_event *new)$/;"	f	file:
eventfd	kernel/cgroup.c	/^	struct eventfd_ctx *eventfd;$/;"	m	struct:cgroup_event	typeref:struct:cgroup_event::eventfd_ctx	file:
eventfd	mm/memcontrol.c	/^	struct eventfd_ctx *eventfd;$/;"	m	struct:mem_cgroup_eventfd_list	typeref:struct:mem_cgroup_eventfd_list::eventfd_ctx	file:
eventfd	mm/memcontrol.c	/^	struct eventfd_ctx *eventfd;$/;"	m	struct:mem_cgroup_threshold	typeref:struct:mem_cgroup_threshold::eventfd_ctx	file:
eventfd_ctx	fs/eventfd.c	/^struct eventfd_ctx {$/;"	s	file:
eventfd_ctx_do_read	fs/eventfd.c	/^static void eventfd_ctx_do_read(struct eventfd_ctx *ctx, __u64 *cnt)$/;"	f	file:
eventfd_ctx_fdget	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_fdget);$/;"	v
eventfd_ctx_fdget	fs/eventfd.c	/^struct eventfd_ctx *eventfd_ctx_fdget(int fd)$/;"	f
eventfd_ctx_fileget	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_fileget);$/;"	v
eventfd_ctx_fileget	fs/eventfd.c	/^struct eventfd_ctx *eventfd_ctx_fileget(struct file *file)$/;"	f
eventfd_ctx_get	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_get);$/;"	v
eventfd_ctx_get	fs/eventfd.c	/^struct eventfd_ctx *eventfd_ctx_get(struct eventfd_ctx *ctx)$/;"	f
eventfd_ctx_put	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_put);$/;"	v
eventfd_ctx_put	fs/eventfd.c	/^void eventfd_ctx_put(struct eventfd_ctx *ctx)$/;"	f
eventfd_ctx_read	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_read);$/;"	v
eventfd_ctx_read	fs/eventfd.c	/^ssize_t eventfd_ctx_read(struct eventfd_ctx *ctx, int no_wait, __u64 *cnt)$/;"	f
eventfd_ctx_remove_wait_queue	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_remove_wait_queue);$/;"	v
eventfd_ctx_remove_wait_queue	fs/eventfd.c	/^int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *ctx, wait_queue_t *wait,$/;"	f
eventfd_fget	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_fget);$/;"	v
eventfd_fget	fs/eventfd.c	/^struct file *eventfd_fget(int fd)$/;"	f
eventfd_file_create	fs/eventfd.c	/^struct file *eventfd_file_create(unsigned int count, int flags)$/;"	f
eventfd_fops	fs/eventfd.c	/^static const struct file_operations eventfd_fops = {$/;"	v	typeref:struct:file_operations	file:
eventfd_free	fs/eventfd.c	/^static void eventfd_free(struct kref *kref)$/;"	f	file:
eventfd_free_ctx	fs/eventfd.c	/^static void eventfd_free_ctx(struct eventfd_ctx *ctx)$/;"	f	file:
eventfd_poll	fs/eventfd.c	/^static unsigned int eventfd_poll(struct file *file, poll_table *wait)$/;"	f	file:
eventfd_read	fs/eventfd.c	/^static ssize_t eventfd_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
eventfd_release	fs/eventfd.c	/^static int eventfd_release(struct inode *inode, struct file *file)$/;"	f	file:
eventfd_show_fdinfo	fs/eventfd.c	/^static int eventfd_show_fdinfo(struct seq_file *m, struct file *f)$/;"	f	file:
eventfd_signal	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_signal);$/;"	v
eventfd_signal	fs/eventfd.c	/^__u64 eventfd_signal(struct eventfd_ctx *ctx, __u64 n)$/;"	f
eventfd_write	fs/eventfd.c	/^static ssize_t eventfd_write(struct file *file, const char __user *buf, size_t count,$/;"	f	file:
eventpoll	fs/eventpoll.c	/^struct eventpoll {$/;"	s	file:
eventpoll_fops	fs/eventpoll.c	/^static const struct file_operations eventpoll_fops = {$/;"	v	typeref:struct:file_operations	file:
eventpoll_fops	fs/eventpoll.c	/^static const struct file_operations eventpoll_fops;$/;"	v	typeref:struct:file_operations	file:
eventpoll_init	fs/eventpoll.c	/^fs_initcall(eventpoll_init);$/;"	v
eventpoll_init	fs/eventpoll.c	/^static int __init eventpoll_init(void)$/;"	f	file:
eventpoll_release_file	fs/eventpoll.c	/^void eventpoll_release_file(struct file *file)$/;"	f
events	fs/eventpoll.c	/^	struct epoll_event __user *events;$/;"	m	struct:ep_send_events_data	typeref:struct:ep_send_events_data::__user	file:
events	mm/memcontrol.c	/^	unsigned long events[MEM_CGROUP_EVENTS_NSTATS];$/;"	m	struct:mem_cgroup_stat_cpu	file:
evict	fs/inode.c	/^static void evict(struct inode *inode)$/;"	f	file:
evict_chunk	kernel/audit_tree.c	/^static void evict_chunk(struct audit_chunk *chunk)$/;"	f	file:
evict_inodes	fs/inode.c	/^void evict_inodes(struct super_block *sb)$/;"	f
exact_copy_from_user	fs/namespace.c	/^static long exact_copy_from_user(void *to, const void __user * from,$/;"	f	file:
exact_lock	fs/char_dev.c	/^static int exact_lock(dev_t dev, void *data)$/;"	f	file:
exact_match	fs/char_dev.c	/^static struct kobject *exact_match(dev_t dev, int *part, void *data)$/;"	f	file:
exclusive_bit	kernel/lockdep.c	/^static int exclusive_bit(int new_bit)$/;"	f	file:
exclusive_console	kernel/printk.c	/^static struct console *exclusive_console;$/;"	v	typeref:struct:console	file:
exec_domains	kernel/exec_domain.c	/^static struct exec_domain *exec_domains = &default_exec_domain;$/;"	v	typeref:struct:exec_domain	file:
exec_mmap	fs/exec.c	/^static int exec_mmap(struct mm_struct *mm)$/;"	f	file:
execdomains_proc_fops	kernel/exec_domain.c	/^static const struct file_operations execdomains_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
execdomains_proc_open	kernel/exec_domain.c	/^static int execdomains_proc_open(struct inode *inode, struct file *file)$/;"	f	file:
execdomains_proc_show	kernel/exec_domain.c	/^static int execdomains_proc_show(struct seq_file *m, void *v)$/;"	f	file:
execute_in_process_context	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(execute_in_process_context);$/;"	v
execute_in_process_context	kernel/workqueue.c	/^int execute_in_process_context(work_func_t fn, struct execute_work *ew)$/;"	f
executed	kernel/stop_machine.c	/^	bool			executed;	\/* actually executed? *\/$/;"	m	struct:cpu_stop_done	file:
exit_aio	fs/aio.c	/^void exit_aio(struct mm_struct *mm)$/;"	f
exit_aout_binfmt	fs/binfmt_aout.c	/^module_exit(exit_aout_binfmt);$/;"	v
exit_aout_binfmt	fs/binfmt_aout.c	/^static void __exit exit_aout_binfmt(void)$/;"	f	file:
exit_creds	kernel/cred.c	/^void exit_creds(struct task_struct *tsk)$/;"	f
exit_elf_binfmt	fs/binfmt_elf.c	/^module_exit(exit_elf_binfmt);$/;"	v
exit_elf_binfmt	fs/binfmt_elf.c	/^static void __exit exit_elf_binfmt(void)$/;"	f	file:
exit_elf_binfmt	fs/compat_binfmt_elf.c	135;"	d	file:
exit_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^module_exit(exit_elf_fdpic_binfmt);$/;"	v
exit_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^static void __exit exit_elf_fdpic_binfmt(void)$/;"	f	file:
exit_em86_binfmt	fs/binfmt_em86.c	/^module_exit(exit_em86_binfmt);$/;"	v
exit_em86_binfmt	fs/binfmt_em86.c	/^static void __exit exit_em86_binfmt(void)$/;"	f	file:
exit_ext3_fs	fs/ext3/super.c	/^static void __exit exit_ext3_fs(void)$/;"	f	file:
exit_ext3_xattr	fs/ext3/xattr.c	/^exit_ext3_xattr(void)$/;"	f
exit_ext3_xattr	fs/ext3/xattr.h	/^exit_ext3_xattr(void)$/;"	f
exit_files	fs/file.c	/^void exit_files(struct task_struct *tsk)$/;"	f
exit_fs	fs/fs_struct.c	/^void exit_fs(struct task_struct *tsk)$/;"	f
exit_itimers	kernel/posix-timers.c	/^void exit_itimers(struct signal_struct *sig)$/;"	f
exit_mbcache	fs/mbcache.c	/^static void __exit exit_mbcache(void)$/;"	f	file:
exit_misc_binfmt	fs/binfmt_misc.c	/^module_exit(exit_misc_binfmt);$/;"	v
exit_misc_binfmt	fs/binfmt_misc.c	/^static void __exit exit_misc_binfmt(void)$/;"	f	file:
exit_mm	kernel/exit.c	/^static void exit_mm(struct task_struct * tsk)$/;"	f	file:
exit_mmap	mm/mmap.c	/^void exit_mmap(struct mm_struct *mm)$/;"	f
exit_mmap	mm/nommu.c	/^void exit_mmap(struct mm_struct *mm)$/;"	f
exit_notify	kernel/exit.c	/^static void exit_notify(struct task_struct *tsk, int group_dead)$/;"	f	file:
exit_pi_state_list	kernel/futex.c	/^void exit_pi_state_list(struct task_struct *curr)$/;"	f
exit_rcu	kernel/rcupdate.c	/^void exit_rcu(void)$/;"	f
exit_robust_list	kernel/futex.c	/^void exit_robust_list(struct task_struct *curr)$/;"	f
exit_script_binfmt	fs/binfmt_script.c	/^module_exit(exit_script_binfmt);$/;"	v
exit_script_binfmt	fs/binfmt_script.c	/^static void __exit exit_script_binfmt(void)$/;"	f	file:
exit_signals	kernel/signal.c	/^void exit_signals(struct task_struct *tsk)$/;"	f
exit_som_binfmt	fs/binfmt_som.c	/^module_exit(exit_som_binfmt);$/;"	v
exit_som_binfmt	fs/binfmt_som.c	/^static void __exit exit_som_binfmt(void)$/;"	f	file:
exit_task_namespaces	kernel/nsproxy.c	/^void exit_task_namespaces(struct task_struct *p)$/;"	f
exited	kernel/kthread.c	/^	struct completion exited;$/;"	m	struct:kthread	typeref:struct:kthread::completion	file:
exitf	kernel/backtracetest.c	/^module_exit(exitf);$/;"	v
exitf	kernel/backtracetest.c	/^static void exitf(void)$/;"	f	file:
exp	fs/compat.c	/^	compat_uptr_t exp;$/;"	m	struct:compat_sel_arg_struct	file:
exp	fs/select.c	/^	fd_set __user *inp, *outp, *exp;$/;"	m	struct:sel_arg_struct	file:
exp_tasks	kernel/rcutiny_plugin.h	/^	struct list_head *exp_tasks;$/;"	m	struct:rcu_preempt_ctrlblk	typeref:struct:rcu_preempt_ctrlblk::list_head
exp_tasks	kernel/rcutree.h	/^	struct list_head *exp_tasks;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::list_head
expand	mm/page_alloc.c	/^static inline void expand(struct zone *zone, struct page *page,$/;"	f	file:
expand_corename	fs/coredump.c	/^static int expand_corename(struct core_name *cn)$/;"	f	file:
expand_downwards	mm/mmap.c	/^int expand_downwards(struct vm_area_struct *vma,$/;"	f
expand_files	fs/file.c	/^static int expand_files(struct files_struct *files, int nr)$/;"	f	file:
expand_stack	mm/mmap.c	/^int expand_stack(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_stack	mm/nommu.c	/^int expand_stack(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_upwards	mm/mmap.c	/^int expand_upwards(struct vm_area_struct *vma, unsigned long address)$/;"	f
expedited_done	kernel/rcutree.h	/^	atomic_long_t expedited_done;		\/* Done ticket. *\/$/;"	m	struct:rcu_state
expedited_done_exit	kernel/rcutree.h	/^	atomic_long_t expedited_done_exit;	\/* # times exited _done loop. *\/$/;"	m	struct:rcu_state
expedited_done_lost	kernel/rcutree.h	/^	atomic_long_t expedited_done_lost;	\/* # times beaten to _done. *\/$/;"	m	struct:rcu_state
expedited_done_tries	kernel/rcutree.h	/^	atomic_long_t expedited_done_tries;	\/* # tries to update _done. *\/$/;"	m	struct:rcu_state
expedited_normal	kernel/rcutree.h	/^	atomic_long_t expedited_normal;		\/* # fallbacks to normal. *\/$/;"	m	struct:rcu_state
expedited_start	kernel/rcutree.h	/^	atomic_long_t expedited_start;		\/* Starting ticket. *\/$/;"	m	struct:rcu_state
expedited_stoppedcpus	kernel/rcutree.h	/^	atomic_long_t expedited_stoppedcpus;	\/* # successful stop_cpus. *\/$/;"	m	struct:rcu_state
expedited_tryfail	kernel/rcutree.h	/^	atomic_long_t expedited_tryfail;	\/* # acquisition failures. *\/$/;"	m	struct:rcu_state
expedited_workdone1	kernel/rcutree.h	/^	atomic_long_t expedited_workdone1;	\/* # done by others #1. *\/$/;"	m	struct:rcu_state
expedited_workdone2	kernel/rcutree.h	/^	atomic_long_t expedited_workdone2;	\/* # done by others #2. *\/$/;"	m	struct:rcu_state
expedited_wrap	kernel/rcutree.h	/^	atomic_long_t expedited_wrap;		\/* # near-wrap incidents. *\/$/;"	m	struct:rcu_state
expired	fs/timerfd.c	/^	int expired;$/;"	m	struct:timerfd_ctx	file:
expires_gt	kernel/posix-cpu-timers.c	/^static inline int expires_gt(cputime_t expires, cputime_t new_exp)$/;"	f	file:
expmask	kernel/rcutree.h	/^	unsigned long expmask;	\/* Groups that have ->blkd_tasks *\/$/;"	m	struct:rcu_node
exported	kernel/kallsyms.c	/^	int exported;$/;"	m	struct:kallsym_iter	file:
ext3-y	fs/ext3/Makefile	/^ext3-y	:= balloc.o bitmap.o dir.o file.o fsync.o ialloc.o inode.o \\$/;"	m
ext3_abort	fs/ext3/super.c	/^void ext3_abort(struct super_block *sb, const char *function,$/;"	f
ext3_acl_chmod	fs/ext3/acl.c	/^ext3_acl_chmod(struct inode *inode)$/;"	f
ext3_acl_chmod	fs/ext3/acl.h	/^ext3_acl_chmod(struct inode *inode)$/;"	f
ext3_acl_count	fs/ext3/acl.h	/^static inline int ext3_acl_count(size_t size)$/;"	f
ext3_acl_entry	fs/ext3/acl.h	/^} ext3_acl_entry;$/;"	t	typeref:struct:__anon28
ext3_acl_entry_short	fs/ext3/acl.h	/^} ext3_acl_entry_short;$/;"	t	typeref:struct:__anon29
ext3_acl_from_disk	fs/ext3/acl.c	/^ext3_acl_from_disk(const void *value, size_t size)$/;"	f	file:
ext3_acl_header	fs/ext3/acl.h	/^} ext3_acl_header;$/;"	t	typeref:struct:__anon30
ext3_acl_size	fs/ext3/acl.h	/^static inline size_t ext3_acl_size(int count)$/;"	f
ext3_acl_to_disk	fs/ext3/acl.c	/^ext3_acl_to_disk(const struct posix_acl *acl, size_t *size)$/;"	f	file:
ext3_acquire_dquot	fs/ext3/super.c	/^static int ext3_acquire_dquot(struct dquot *dquot)$/;"	f	file:
ext3_add_entry	fs/ext3/namei.c	/^static int ext3_add_entry (handle_t *handle, struct dentry *dentry,$/;"	f	file:
ext3_add_nondir	fs/ext3/namei.c	/^static int ext3_add_nondir(handle_t *handle,$/;"	f	file:
ext3_alloc_blocks	fs/ext3/inode.c	/^static int ext3_alloc_blocks(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_alloc_branch	fs/ext3/inode.c	/^static int ext3_alloc_branch(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_alloc_inode	fs/ext3/super.c	/^static struct inode *ext3_alloc_inode(struct super_block *sb)$/;"	f	file:
ext3_append	fs/ext3/namei.c	/^static struct buffer_head *ext3_append(handle_t *handle,$/;"	f	file:
ext3_bg_has_super	fs/ext3/balloc.c	/^int ext3_bg_has_super(struct super_block *sb, int group)$/;"	f
ext3_bg_num_gdb	fs/ext3/balloc.c	/^unsigned long ext3_bg_num_gdb(struct super_block *sb, int group)$/;"	f
ext3_bg_num_gdb_meta	fs/ext3/balloc.c	/^static unsigned long ext3_bg_num_gdb_meta(struct super_block *sb, int group)$/;"	f	file:
ext3_bg_num_gdb_nometa	fs/ext3/balloc.c	/^static unsigned long ext3_bg_num_gdb_nometa(struct super_block *sb, int group)$/;"	f	file:
ext3_blkdev_get	fs/ext3/super.c	/^static struct block_device *ext3_blkdev_get(dev_t dev, struct super_block *sb)$/;"	f	file:
ext3_blkdev_put	fs/ext3/super.c	/^static int ext3_blkdev_put(struct block_device *bdev)$/;"	f	file:
ext3_blkdev_remove	fs/ext3/super.c	/^static int ext3_blkdev_remove(struct ext3_sb_info *sbi)$/;"	f	file:
ext3_blks_to_allocate	fs/ext3/inode.c	/^static int ext3_blks_to_allocate(Indirect *branch, int k, unsigned long blks,$/;"	f	file:
ext3_block_alloc_info	fs/ext3/ext3.h	/^struct ext3_block_alloc_info {$/;"	s
ext3_block_to_path	fs/ext3/inode.c	/^static int ext3_block_to_path(struct inode *inode,$/;"	f	file:
ext3_block_truncate_page	fs/ext3/inode.c	/^static int ext3_block_truncate_page(struct inode *inode, loff_t from)$/;"	f	file:
ext3_bmap	fs/ext3/inode.c	/^static sector_t ext3_bmap(struct address_space *mapping, sector_t block)$/;"	f	file:
ext3_bread	fs/ext3/inode.c	/^struct buffer_head *ext3_bread(handle_t *handle, struct inode *inode,$/;"	f
ext3_can_truncate	fs/ext3/inode.c	/^int ext3_can_truncate(struct inode *inode)$/;"	f
ext3_change_inode_journal_flag	fs/ext3/inode.c	/^int ext3_change_inode_journal_flag(struct inode *inode, int val)$/;"	f
ext3_check_descriptors	fs/ext3/super.c	/^static int ext3_check_descriptors(struct super_block *sb)$/;"	f	file:
ext3_check_dir_entry	fs/ext3/dir.c	/^int ext3_check_dir_entry (const char * function, struct inode * dir,$/;"	f
ext3_clear_bit	fs/ext3/ext3.h	382;"	d
ext3_clear_bit_atomic	fs/ext3/ext3.h	383;"	d
ext3_clear_blocks	fs/ext3/inode.c	/^static void ext3_clear_blocks(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_clear_inode_state	fs/ext3/ext3.h	/^static inline void ext3_clear_inode_state(struct inode *inode, int bit)$/;"	f
ext3_clear_journal_err	fs/ext3/super.c	/^static void ext3_clear_journal_err(struct super_block *sb,$/;"	f	file:
ext3_commit_super	fs/ext3/super.c	/^static int ext3_commit_super(struct super_block *sb,$/;"	f	file:
ext3_compat_ioctl	fs/ext3/ioctl.c	/^long ext3_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f
ext3_count_dirs	fs/ext3/ialloc.c	/^unsigned long ext3_count_dirs (struct super_block * sb)$/;"	f
ext3_count_free	fs/ext3/bitmap.c	/^unsigned long ext3_count_free (struct buffer_head * map, unsigned int numchars)$/;"	f
ext3_count_free_blocks	fs/ext3/balloc.c	/^ext3_fsblk_t ext3_count_free_blocks(struct super_block *sb)$/;"	f
ext3_count_free_inodes	fs/ext3/ialloc.c	/^unsigned long ext3_count_free_inodes (struct super_block * sb)$/;"	f
ext3_create	fs/ext3/namei.c	/^static int ext3_create (struct inode * dir, struct dentry * dentry, umode_t mode,$/;"	f	file:
ext3_create_journal	fs/ext3/super.c	/^static int ext3_create_journal(struct super_block *sb,$/;"	f	file:
ext3_debug	fs/ext3/ext3.h	49;"	d
ext3_debug	fs/ext3/ext3.h	56;"	d
ext3_decode_error	fs/ext3/super.c	/^static const char *ext3_decode_error(struct super_block * sb, int errno,$/;"	f	file:
ext3_delete_entry	fs/ext3/namei.c	/^static int ext3_delete_entry (handle_t *handle,$/;"	f	file:
ext3_destroy_inode	fs/ext3/super.c	/^static void ext3_destroy_inode(struct inode *inode)$/;"	f	file:
ext3_dir_bread	fs/ext3/namei.h	/^static inline struct buffer_head *ext3_dir_bread(handle_t *handle,$/;"	f
ext3_dir_entry	fs/ext3/ext3.h	/^struct ext3_dir_entry {$/;"	s
ext3_dir_entry_2	fs/ext3/ext3.h	/^struct ext3_dir_entry_2 {$/;"	s
ext3_dir_inode_operations	fs/ext3/namei.c	/^const struct inode_operations ext3_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext3_dir_llseek	fs/ext3/dir.c	/^loff_t ext3_dir_llseek(struct file *file, loff_t offset, int whence)$/;"	f
ext3_dir_operations	fs/ext3/dir.c	/^const struct file_operations ext3_dir_operations = {$/;"	v	typeref:struct:file_operations
ext3_direct_IO	fs/ext3/inode.c	/^static ssize_t ext3_direct_IO(int rw, struct kiocb *iocb,$/;"	f	file:
ext3_dirty_inode	fs/ext3/inode.c	/^void ext3_dirty_inode(struct inode *inode, int flags)$/;"	f
ext3_discard_reservation	fs/ext3/balloc.c	/^void ext3_discard_reservation(struct inode *inode)$/;"	f
ext3_do_update_inode	fs/ext3/inode.c	/^static int ext3_do_update_inode(handle_t *handle,$/;"	f	file:
ext3_drop_inode	fs/ext3/super.c	/^static int ext3_drop_inode(struct inode *inode)$/;"	f	file:
ext3_dx_add_entry	fs/ext3/namei.c	/^static int ext3_dx_add_entry(handle_t *handle, struct dentry *dentry,$/;"	f	file:
ext3_dx_find_entry	fs/ext3/namei.c	/^static struct buffer_head * ext3_dx_find_entry(struct inode *dir,$/;"	f	file:
ext3_dx_readdir	fs/ext3/dir.c	/^static int ext3_dx_readdir(struct file * filp,$/;"	f	file:
ext3_error	fs/ext3/super.c	/^void ext3_error(struct super_block *sb, const char *function,$/;"	f
ext3_evict_inode	fs/ext3/inode.c	/^void ext3_evict_inode (struct inode *inode)$/;"	f
ext3_export_ops	fs/ext3/super.c	/^static const struct export_operations ext3_export_ops = {$/;"	v	typeref:struct:export_operations	file:
ext3_fast_symlink_inode_operations	fs/ext3/symlink.c	/^const struct inode_operations ext3_fast_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext3_fh_to_dentry	fs/ext3/super.c	/^static struct dentry *ext3_fh_to_dentry(struct super_block *sb, struct fid *fid,$/;"	f	file:
ext3_fh_to_parent	fs/ext3/super.c	/^static struct dentry *ext3_fh_to_parent(struct super_block *sb, struct fid *fid,$/;"	f	file:
ext3_fiemap	fs/ext3/inode.c	/^int ext3_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,$/;"	f
ext3_file_inode_operations	fs/ext3/file.c	/^const struct inode_operations ext3_file_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext3_file_operations	fs/ext3/file.c	/^const struct file_operations ext3_file_operations = {$/;"	v	typeref:struct:file_operations
ext3_filetype_table	fs/ext3/dir.c	/^static unsigned char ext3_filetype_table[] = {$/;"	v	file:
ext3_fill_super	fs/ext3/super.c	/^static int ext3_fill_super (struct super_block *sb, void *data, int silent)$/;"	f	file:
ext3_find_entry	fs/ext3/namei.c	/^static struct buffer_head *ext3_find_entry(struct inode *dir,$/;"	f	file:
ext3_find_goal	fs/ext3/inode.c	/^static ext3_fsblk_t ext3_find_goal(struct inode *inode, long block,$/;"	f	file:
ext3_find_near	fs/ext3/inode.c	/^static ext3_fsblk_t ext3_find_near(struct inode *inode, Indirect *ind)$/;"	f	file:
ext3_find_next_zero_bit	fs/ext3/ext3.h	385;"	d
ext3_find_shared	fs/ext3/inode.c	/^static Indirect *ext3_find_shared(struct inode *inode, int depth,$/;"	f	file:
ext3_follow_link	fs/ext3/symlink.c	/^static void * ext3_follow_link(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
ext3_force_commit	fs/ext3/super.c	/^int ext3_force_commit(struct super_block *sb)$/;"	f
ext3_forget	fs/ext3/inode.c	/^int ext3_forget(handle_t *handle, int is_metadata, struct inode *inode,$/;"	f
ext3_free_blocks	fs/ext3/balloc.c	/^void ext3_free_blocks(handle_t *handle, struct inode *inode,$/;"	f
ext3_free_blocks_sb	fs/ext3/balloc.c	/^void ext3_free_blocks_sb(handle_t *handle, struct super_block *sb,$/;"	f
ext3_free_branches	fs/ext3/inode.c	/^static void ext3_free_branches(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_free_data	fs/ext3/inode.c	/^static void ext3_free_data(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_free_inode	fs/ext3/ialloc.c	/^void ext3_free_inode (handle_t *handle, struct inode * inode)$/;"	f
ext3_freeze	fs/ext3/super.c	/^static int ext3_freeze(struct super_block *sb)$/;"	f	file:
ext3_fs_type	fs/ext3/super.c	/^static struct file_system_type ext3_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
ext3_fsblk_t	fs/ext3/ext3.h	/^typedef unsigned long ext3_fsblk_t;$/;"	t
ext3_get_acl	fs/ext3/acl.c	/^ext3_get_acl(struct inode *inode, int type)$/;"	f
ext3_get_acl	fs/ext3/acl.h	63;"	d
ext3_get_block	fs/ext3/inode.c	/^static int ext3_get_block(struct inode *inode, sector_t iblock,$/;"	f	file:
ext3_get_blocks_handle	fs/ext3/inode.c	/^int ext3_get_blocks_handle(handle_t *handle, struct inode *inode,$/;"	f
ext3_get_branch	fs/ext3/inode.c	/^static Indirect *ext3_get_branch(struct inode *inode, int depth, int *offsets,$/;"	f	file:
ext3_get_dev_journal	fs/ext3/super.c	/^static journal_t *ext3_get_dev_journal(struct super_block *sb,$/;"	f	file:
ext3_get_group_desc	fs/ext3/balloc.c	/^struct ext3_group_desc * ext3_get_group_desc(struct super_block * sb,$/;"	f
ext3_get_group_no_and_offset	fs/ext3/balloc.c	/^static void ext3_get_group_no_and_offset(struct super_block *sb,$/;"	f	file:
ext3_get_htree_eof	fs/ext3/dir.c	/^static inline loff_t ext3_get_htree_eof(struct file *filp)$/;"	f	file:
ext3_get_inode_block	fs/ext3/inode.c	/^static ext3_fsblk_t ext3_get_inode_block(struct super_block *sb,$/;"	f	file:
ext3_get_inode_flags	fs/ext3/inode.c	/^void ext3_get_inode_flags(struct ext3_inode_info *ei)$/;"	f
ext3_get_inode_loc	fs/ext3/inode.c	/^int ext3_get_inode_loc(struct inode *inode, struct ext3_iloc *iloc)$/;"	f
ext3_get_journal	fs/ext3/super.c	/^static journal_t *ext3_get_journal(struct super_block *sb,$/;"	f	file:
ext3_get_parent	fs/ext3/namei.c	/^struct dentry *ext3_get_parent(struct dentry *child)$/;"	f
ext3_getblk	fs/ext3/inode.c	/^struct buffer_head *ext3_getblk(handle_t *handle, struct inode *inode,$/;"	f
ext3_group_add	fs/ext3/resize.c	/^int ext3_group_add(struct super_block *sb, struct ext3_new_group_data *input)$/;"	f
ext3_group_desc	fs/ext3/ext3.h	/^struct ext3_group_desc$/;"	s
ext3_group_extend	fs/ext3/resize.c	/^int ext3_group_extend(struct super_block *sb, struct ext3_super_block *es,$/;"	f
ext3_group_first_block_no	fs/ext3/ext3.h	/^ext3_group_first_block_no(struct super_block *sb, unsigned long group_no)$/;"	f
ext3_group_sparse	fs/ext3/balloc.c	/^static int ext3_group_sparse(int group)$/;"	f	file:
ext3_grpblk_t	fs/ext3/ext3.h	/^typedef int ext3_grpblk_t;$/;"	t
ext3_handle_error	fs/ext3/super.c	/^static void ext3_handle_error(struct super_block *sb)$/;"	f	file:
ext3_has_free_blocks	fs/ext3/balloc.c	/^static int ext3_has_free_blocks(struct ext3_sb_info *sbi, int use_reservation)$/;"	f	file:
ext3_htree_create_dir_info	fs/ext3/dir.c	/^static struct dir_private_info *ext3_htree_create_dir_info(struct file *filp,$/;"	f	file:
ext3_htree_fill_tree	fs/ext3/namei.c	/^int ext3_htree_fill_tree(struct file *dir_file, __u32 start_hash,$/;"	f
ext3_htree_free_dir_info	fs/ext3/dir.c	/^void ext3_htree_free_dir_info(struct dir_private_info *p)$/;"	f
ext3_htree_next_block	fs/ext3/namei.c	/^static int ext3_htree_next_block(struct inode *dir, __u32 hash,$/;"	f	file:
ext3_htree_store_dirent	fs/ext3/dir.c	/^int ext3_htree_store_dirent(struct file *dir_file, __u32 hash,$/;"	f
ext3_i_callback	fs/ext3/super.c	/^static void ext3_i_callback(struct rcu_head *head)$/;"	f	file:
ext3_iget	fs/ext3/inode.c	/^struct inode *ext3_iget(struct super_block *sb, unsigned long ino)$/;"	f
ext3_iloc	fs/ext3/ext3.h	/^struct ext3_iloc$/;"	s
ext3_init_acl	fs/ext3/acl.c	/^ext3_init_acl(handle_t *handle, struct inode *inode, struct inode *dir)$/;"	f
ext3_init_acl	fs/ext3/acl.h	/^ext3_init_acl(handle_t *handle, struct inode *inode, struct inode *dir)$/;"	f
ext3_init_block_alloc_info	fs/ext3/balloc.c	/^void ext3_init_block_alloc_info(struct inode *inode)$/;"	f
ext3_init_journal_params	fs/ext3/super.c	/^static void ext3_init_journal_params(struct super_block *sb, journal_t *journal)$/;"	f	file:
ext3_init_security	fs/ext3/xattr.h	/^static inline int ext3_init_security(handle_t *handle, struct inode *inode,$/;"	f
ext3_init_security	fs/ext3/xattr_security.c	/^ext3_init_security(handle_t *handle, struct inode *inode, struct inode *dir,$/;"	f
ext3_initxattrs	fs/ext3/xattr_security.c	/^int ext3_initxattrs(struct inode *inode, const struct xattr *xattr_array,$/;"	f
ext3_inode	fs/ext3/ext3.h	/^struct ext3_inode {$/;"	s
ext3_inode_cachep	fs/ext3/super.c	/^static struct kmem_cache *ext3_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
ext3_inode_info	fs/ext3/ext3.h	/^struct ext3_inode_info {$/;"	s
ext3_inode_is_fast_symlink	fs/ext3/inode.c	/^static int ext3_inode_is_fast_symlink(struct inode *inode)$/;"	f	file:
ext3_invalidatepage	fs/ext3/inode.c	/^static void ext3_invalidatepage(struct page *page, unsigned long offset)$/;"	f	file:
ext3_ioctl	fs/ext3/ioctl.c	/^long ext3_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f
ext3_journal_abort_handle	fs/ext3/super.c	/^void ext3_journal_abort_handle(const char *caller, const char *err_fn,$/;"	f
ext3_journal_blocks_per_page	fs/ext3/ext3.h	/^static inline int ext3_journal_blocks_per_page(struct inode *inode)$/;"	f
ext3_journal_current_handle	fs/ext3/ext3.h	/^static inline handle_t *ext3_journal_current_handle(void)$/;"	f
ext3_journal_dirty_data	fs/ext3/inode.c	/^int ext3_journal_dirty_data(handle_t *handle, struct buffer_head *bh)$/;"	f
ext3_journal_dirty_metadata	fs/ext3/ext3.h	1247;"	d
ext3_journal_extend	fs/ext3/ext3.h	/^static inline int ext3_journal_extend(handle_t *handle, int nblocks)$/;"	f
ext3_journal_force_commit	fs/ext3/ext3.h	/^static inline int ext3_journal_force_commit(journal_t *journal)$/;"	f
ext3_journal_forget	fs/ext3/ext3.h	1249;"	d
ext3_journal_get_create_access	fs/ext3/ext3.h	1245;"	d
ext3_journal_get_undo_access	fs/ext3/ext3.h	1239;"	d
ext3_journal_get_write_access	fs/ext3/ext3.h	1241;"	d
ext3_journal_release_buffer	fs/ext3/ext3.h	/^static inline void ext3_journal_release_buffer(handle_t *handle,$/;"	f
ext3_journal_restart	fs/ext3/ext3.h	/^static inline int ext3_journal_restart(handle_t *handle, int nblocks)$/;"	f
ext3_journal_revoke	fs/ext3/ext3.h	1243;"	d
ext3_journal_start	fs/ext3/ext3.h	/^static inline handle_t *ext3_journal_start(struct inode *inode, int nblocks)$/;"	f
ext3_journal_start_sb	fs/ext3/super.c	/^handle_t *ext3_journal_start_sb(struct super_block *sb, int nblocks)$/;"	f
ext3_journal_stop	fs/ext3/ext3.h	1262;"	d
ext3_journalled_aops	fs/ext3/inode.c	/^static const struct address_space_operations ext3_journalled_aops = {$/;"	v	typeref:struct:address_space_operations	file:
ext3_journalled_set_page_dirty	fs/ext3/inode.c	/^static int ext3_journalled_set_page_dirty(struct page *page)$/;"	f	file:
ext3_journalled_write_end	fs/ext3/inode.c	/^static int ext3_journalled_write_end(struct file *file,$/;"	f	file:
ext3_journalled_writepage	fs/ext3/inode.c	/^static int ext3_journalled_writepage(struct page *page,$/;"	f	file:
ext3_link	fs/ext3/namei.c	/^static int ext3_link (struct dentry * old_dentry,$/;"	f	file:
ext3_list_backups	fs/ext3/resize.c	/^static unsigned ext3_list_backups(struct super_block *sb, unsigned *three,$/;"	f	file:
ext3_listxattr	fs/ext3/xattr.c	/^ext3_listxattr(struct dentry *dentry, char *buffer, size_t size)$/;"	f
ext3_load_journal	fs/ext3/super.c	/^static int ext3_load_journal(struct super_block *sb,$/;"	f	file:
ext3_lookup	fs/ext3/namei.c	/^static struct dentry *ext3_lookup(struct inode * dir, struct dentry *dentry, unsigned int flags)$/;"	f	file:
ext3_mark_dquot_dirty	fs/ext3/super.c	/^static int ext3_mark_dquot_dirty(struct dquot *dquot)$/;"	f	file:
ext3_mark_iloc_dirty	fs/ext3/inode.c	/^int ext3_mark_iloc_dirty(handle_t *handle,$/;"	f
ext3_mark_inode_dirty	fs/ext3/inode.c	/^int ext3_mark_inode_dirty(handle_t *handle, struct inode *inode)$/;"	f
ext3_mark_recovery_complete	fs/ext3/super.c	/^static void ext3_mark_recovery_complete(struct super_block * sb,$/;"	f	file:
ext3_mask_flags	fs/ext3/ext3.h	/^static inline __u32 ext3_mask_flags(umode_t mode, __u32 flags)$/;"	f
ext3_match	fs/ext3/namei.c	/^static inline int ext3_match (int len, const char * const name,$/;"	f	file:
ext3_max_size	fs/ext3/super.c	/^static loff_t ext3_max_size(int bits)$/;"	f	file:
ext3_mkdir	fs/ext3/namei.c	/^static int ext3_mkdir(struct inode * dir, struct dentry * dentry, umode_t mode)$/;"	f	file:
ext3_mknod	fs/ext3/namei.c	/^static int ext3_mknod (struct inode * dir, struct dentry *dentry,$/;"	f	file:
ext3_mount	fs/ext3/super.c	/^static struct dentry *ext3_mount(struct file_system_type *fs_type,$/;"	f	file:
ext3_mount_options	fs/ext3/ext3.h	/^struct ext3_mount_options {$/;"	s
ext3_msg	fs/ext3/super.c	/^void ext3_msg(struct super_block *sb, const char *prefix,$/;"	f
ext3_new_block	fs/ext3/balloc.c	/^ext3_fsblk_t ext3_new_block(handle_t *handle, struct inode *inode,$/;"	f
ext3_new_blocks	fs/ext3/balloc.c	/^ext3_fsblk_t ext3_new_blocks(handle_t *handle, struct inode *inode,$/;"	f
ext3_new_group_data	fs/ext3/ext3.h	/^struct ext3_new_group_data {$/;"	s
ext3_new_group_input	fs/ext3/ext3.h	/^struct ext3_new_group_input {$/;"	s
ext3_new_inode	fs/ext3/ialloc.c	/^struct inode *ext3_new_inode(handle_t *handle, struct inode * dir,$/;"	f
ext3_next_entry	fs/ext3/namei.c	/^ext3_next_entry(struct ext3_dir_entry_2 *p)$/;"	f	file:
ext3_nfs_get_inode	fs/ext3/super.c	/^static struct inode *ext3_nfs_get_inode(struct super_block *sb,$/;"	f	file:
ext3_ordered_aops	fs/ext3/inode.c	/^static const struct address_space_operations ext3_ordered_aops = {$/;"	v	typeref:struct:address_space_operations	file:
ext3_ordered_write_end	fs/ext3/inode.c	/^static int ext3_ordered_write_end(struct file *file,$/;"	f	file:
ext3_ordered_writepage	fs/ext3/inode.c	/^static int ext3_ordered_writepage(struct page *page,$/;"	f	file:
ext3_orphan_add	fs/ext3/namei.c	/^int ext3_orphan_add(handle_t *handle, struct inode *inode)$/;"	f
ext3_orphan_cleanup	fs/ext3/super.c	/^static void ext3_orphan_cleanup (struct super_block * sb,$/;"	f	file:
ext3_orphan_del	fs/ext3/namei.c	/^int ext3_orphan_del(handle_t *handle, struct inode *inode)$/;"	f
ext3_orphan_get	fs/ext3/ialloc.c	/^struct inode *ext3_orphan_get(struct super_block *sb, unsigned long ino)$/;"	f
ext3_put_super	fs/ext3/super.c	/^static void ext3_put_super (struct super_block * sb)$/;"	f	file:
ext3_qctl_operations	fs/ext3/super.c	/^static const struct quotactl_ops ext3_qctl_operations = {$/;"	v	typeref:struct:quotactl_ops	file:
ext3_quota_on	fs/ext3/super.c	/^static int ext3_quota_on(struct super_block *sb, int type, int format_id,$/;"	f	file:
ext3_quota_on_mount	fs/ext3/super.c	/^static int ext3_quota_on_mount(struct super_block *sb, int type)$/;"	f	file:
ext3_quota_operations	fs/ext3/super.c	/^static const struct dquot_operations ext3_quota_operations = {$/;"	v	typeref:struct:dquot_operations	file:
ext3_quota_read	fs/ext3/super.c	/^static ssize_t ext3_quota_read(struct super_block *sb, int type, char *data,$/;"	f	file:
ext3_quota_write	fs/ext3/super.c	/^static ssize_t ext3_quota_write(struct super_block *sb, int type,$/;"	f	file:
ext3_raw_inode	fs/ext3/ext3.h	/^static inline struct ext3_inode *ext3_raw_inode(struct ext3_iloc *iloc)$/;"	f
ext3_readdir	fs/ext3/dir.c	/^static int ext3_readdir(struct file * filp,$/;"	f	file:
ext3_readpage	fs/ext3/inode.c	/^static int ext3_readpage(struct file *file, struct page *page)$/;"	f	file:
ext3_readpages	fs/ext3/inode.c	/^ext3_readpages(struct file *file, struct address_space *mapping,$/;"	f	file:
ext3_rec_len_from_disk	fs/ext3/ext3.h	/^static inline unsigned ext3_rec_len_from_disk(__le16 dlen)$/;"	f
ext3_rec_len_to_disk	fs/ext3/ext3.h	/^static inline __le16 ext3_rec_len_to_disk(unsigned len)$/;"	f
ext3_release_dir	fs/ext3/dir.c	/^static int ext3_release_dir (struct inode * inode, struct file * filp)$/;"	f	file:
ext3_release_dquot	fs/ext3/super.c	/^static int ext3_release_dquot(struct dquot *dquot)$/;"	f	file:
ext3_release_file	fs/ext3/file.c	/^static int ext3_release_file (struct inode * inode, struct file * filp)$/;"	f	file:
ext3_releasepage	fs/ext3/inode.c	/^static int ext3_releasepage(struct page *page, gfp_t wait)$/;"	f	file:
ext3_remount	fs/ext3/super.c	/^static int ext3_remount (struct super_block * sb, int * flags, char * data)$/;"	f	file:
ext3_rename	fs/ext3/namei.c	/^static int ext3_rename (struct inode * old_dir, struct dentry *old_dentry,$/;"	f	file:
ext3_reserve_inode_write	fs/ext3/inode.c	/^ext3_reserve_inode_write(handle_t *handle, struct inode *inode,$/;"	f
ext3_reserve_window	fs/ext3/ext3.h	/^struct ext3_reserve_window {$/;"	s
ext3_reserve_window_node	fs/ext3/ext3.h	/^struct ext3_reserve_window_node {$/;"	s
ext3_rmdir	fs/ext3/namei.c	/^static int ext3_rmdir (struct inode * dir, struct dentry *dentry)$/;"	f	file:
ext3_rsv_window_add	fs/ext3/balloc.c	/^void ext3_rsv_window_add(struct super_block *sb,$/;"	f
ext3_sb_info	fs/ext3/ext3.h	/^struct ext3_sb_info {$/;"	s
ext3_set_acl	fs/ext3/acl.c	/^ext3_set_acl(handle_t *handle, struct inode *inode, int type,$/;"	f	file:
ext3_set_aops	fs/ext3/inode.c	/^void ext3_set_aops(struct inode *inode)$/;"	f
ext3_set_bit	fs/ext3/ext3.h	380;"	d
ext3_set_bit_atomic	fs/ext3/ext3.h	381;"	d
ext3_set_de_type	fs/ext3/namei.c	/^static inline void ext3_set_de_type(struct super_block *sb,$/;"	f	file:
ext3_set_inode_flags	fs/ext3/inode.c	/^void ext3_set_inode_flags(struct inode *inode)$/;"	f
ext3_set_inode_state	fs/ext3/ext3.h	/^static inline void ext3_set_inode_state(struct inode *inode, int bit)$/;"	f
ext3_setattr	fs/ext3/inode.c	/^int ext3_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f
ext3_setup_super	fs/ext3/super.c	/^static int ext3_setup_super(struct super_block *sb, struct ext3_super_block *es,$/;"	f	file:
ext3_should_journal_data	fs/ext3/ext3.h	/^static inline int ext3_should_journal_data(struct inode *inode)$/;"	f
ext3_should_order_data	fs/ext3/ext3.h	/^static inline int ext3_should_order_data(struct inode *inode)$/;"	f
ext3_should_retry_alloc	fs/ext3/balloc.c	/^int ext3_should_retry_alloc(struct super_block *sb, int *retries)$/;"	f
ext3_should_writeback_data	fs/ext3/ext3.h	/^static inline int ext3_should_writeback_data(struct inode *inode)$/;"	f
ext3_show_options	fs/ext3/super.c	/^static int ext3_show_options(struct seq_file *seq, struct dentry *root)$/;"	f	file:
ext3_show_quota_options	fs/ext3/super.c	/^static inline void ext3_show_quota_options(struct seq_file *seq, struct super_block *sb)$/;"	f	file:
ext3_sops	fs/ext3/super.c	/^static const struct super_operations ext3_sops = {$/;"	v	typeref:struct:super_operations	file:
ext3_special_inode_operations	fs/ext3/namei.c	/^const struct inode_operations ext3_special_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext3_splice_branch	fs/ext3/inode.c	/^static int ext3_splice_branch(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_statfs	fs/ext3/super.c	/^static int ext3_statfs (struct dentry * dentry, struct kstatfs * buf)$/;"	f	file:
ext3_std_error	fs/ext3/ext3.h	1094;"	d
ext3_super_block	fs/ext3/ext3.h	/^struct ext3_super_block {$/;"	s
ext3_symlink	fs/ext3/namei.c	/^static int ext3_symlink (struct inode * dir,$/;"	f	file:
ext3_symlink_inode_operations	fs/ext3/symlink.c	/^const struct inode_operations ext3_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
ext3_sync_file	fs/ext3/fsync.c	/^int ext3_sync_file(struct file *file, loff_t start, loff_t end, int datasync)$/;"	f
ext3_sync_fs	fs/ext3/super.c	/^static int ext3_sync_fs(struct super_block *sb, int wait)$/;"	f	file:
ext3_test_allocatable	fs/ext3/balloc.c	/^static int ext3_test_allocatable(ext3_grpblk_t nr, struct buffer_head *bh)$/;"	f	file:
ext3_test_bit	fs/ext3/ext3.h	384;"	d
ext3_test_inode_state	fs/ext3/ext3.h	/^static inline int ext3_test_inode_state(struct inode *inode, int bit)$/;"	f
ext3_trim_all_free	fs/ext3/balloc.c	/^static ext3_grpblk_t ext3_trim_all_free(struct super_block *sb,$/;"	f	file:
ext3_trim_fs	fs/ext3/balloc.c	/^int ext3_trim_fs(struct super_block *sb, struct fstrim_range *range)$/;"	f
ext3_truncate	fs/ext3/inode.c	/^void ext3_truncate(struct inode *inode)$/;"	f
ext3_truncate_failed_direct_write	fs/ext3/inode.c	/^static void ext3_truncate_failed_direct_write(struct inode *inode)$/;"	f	file:
ext3_truncate_failed_write	fs/ext3/inode.c	/^static void ext3_truncate_failed_write(struct inode *inode)$/;"	f	file:
ext3_try_to_allocate	fs/ext3/balloc.c	/^ext3_try_to_allocate(struct super_block *sb, handle_t *handle, int group,$/;"	f	file:
ext3_try_to_allocate_with_rsv	fs/ext3/balloc.c	/^ext3_try_to_allocate_with_rsv(struct super_block *sb, handle_t *handle,$/;"	f	file:
ext3_type_by_mode	fs/ext3/namei.c	/^static unsigned char ext3_type_by_mode[S_IFMT >> S_SHIFT] = {$/;"	v	file:
ext3_unfreeze	fs/ext3/super.c	/^static int ext3_unfreeze(struct super_block *sb)$/;"	f	file:
ext3_unlink	fs/ext3/namei.c	/^static int ext3_unlink(struct inode * dir, struct dentry *dentry)$/;"	f	file:
ext3_update_dx_flag	fs/ext3/namei.c	/^static void ext3_update_dx_flag(struct inode *inode)$/;"	f	file:
ext3_update_dynamic_rev	fs/ext3/super.c	/^void ext3_update_dynamic_rev(struct super_block *sb)$/;"	f
ext3_valid_block_bitmap	fs/ext3/balloc.c	/^static int ext3_valid_block_bitmap(struct super_block *sb,$/;"	f	file:
ext3_valid_inum	fs/ext3/ext3.h	/^static inline int ext3_valid_inum(struct super_block *sb, unsigned long ino)$/;"	f
ext3_warning	fs/ext3/super.c	/^void ext3_warning(struct super_block *sb, const char *function,$/;"	f
ext3_write_begin	fs/ext3/inode.c	/^static int ext3_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
ext3_write_dquot	fs/ext3/super.c	/^static int ext3_write_dquot(struct dquot *dquot)$/;"	f	file:
ext3_write_info	fs/ext3/super.c	/^static int ext3_write_info(struct super_block *sb, int type)$/;"	f	file:
ext3_write_inode	fs/ext3/inode.c	/^int ext3_write_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f
ext3_writeback_aops	fs/ext3/inode.c	/^static const struct address_space_operations ext3_writeback_aops = {$/;"	v	typeref:struct:address_space_operations	file:
ext3_writeback_write_end	fs/ext3/inode.c	/^static int ext3_writeback_write_end(struct file *file,$/;"	f	file:
ext3_writeback_writepage	fs/ext3/inode.c	/^static int ext3_writeback_writepage(struct page *page,$/;"	f	file:
ext3_writepage_trans_blocks	fs/ext3/inode.c	/^static int ext3_writepage_trans_blocks(struct inode *inode)$/;"	f	file:
ext3_xattr_acl_access_handler	fs/ext3/acl.c	/^const struct xattr_handler ext3_xattr_acl_access_handler = {$/;"	v	typeref:struct:xattr_handler
ext3_xattr_acl_default_handler	fs/ext3/acl.c	/^const struct xattr_handler ext3_xattr_acl_default_handler = {$/;"	v	typeref:struct:xattr_handler
ext3_xattr_block_find	fs/ext3/xattr.c	/^ext3_xattr_block_find(struct inode *inode, struct ext3_xattr_info *i,$/;"	f	file:
ext3_xattr_block_find	fs/ext3/xattr.c	/^struct ext3_xattr_block_find {$/;"	s	file:
ext3_xattr_block_get	fs/ext3/xattr.c	/^ext3_xattr_block_get(struct inode *inode, int name_index, const char *name,$/;"	f	file:
ext3_xattr_block_list	fs/ext3/xattr.c	/^ext3_xattr_block_list(struct dentry *dentry, char *buffer, size_t buffer_size)$/;"	f	file:
ext3_xattr_block_set	fs/ext3/xattr.c	/^ext3_xattr_block_set(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_xattr_cache	fs/ext3/xattr.c	/^static struct mb_cache *ext3_xattr_cache;$/;"	v	typeref:struct:mb_cache	file:
ext3_xattr_cache_find	fs/ext3/xattr.c	/^ext3_xattr_cache_find(struct inode *inode, struct ext3_xattr_header *header,$/;"	f	file:
ext3_xattr_cache_insert	fs/ext3/xattr.c	/^ext3_xattr_cache_insert(struct buffer_head *bh)$/;"	f	file:
ext3_xattr_check_block	fs/ext3/xattr.c	/^ext3_xattr_check_block(struct buffer_head *bh)$/;"	f	file:
ext3_xattr_check_entry	fs/ext3/xattr.c	/^ext3_xattr_check_entry(struct ext3_xattr_entry *entry, size_t size)$/;"	f	file:
ext3_xattr_check_names	fs/ext3/xattr.c	/^ext3_xattr_check_names(struct ext3_xattr_entry *entry, void *end)$/;"	f	file:
ext3_xattr_cmp	fs/ext3/xattr.c	/^ext3_xattr_cmp(struct ext3_xattr_header *header1,$/;"	f	file:
ext3_xattr_delete_inode	fs/ext3/xattr.c	/^ext3_xattr_delete_inode(handle_t *handle, struct inode *inode)$/;"	f
ext3_xattr_delete_inode	fs/ext3/xattr.h	/^ext3_xattr_delete_inode(handle_t *handle, struct inode *inode)$/;"	f
ext3_xattr_entry	fs/ext3/xattr.h	/^struct ext3_xattr_entry {$/;"	s
ext3_xattr_find_entry	fs/ext3/xattr.c	/^ext3_xattr_find_entry(struct ext3_xattr_entry **pentry, int name_index,$/;"	f	file:
ext3_xattr_get	fs/ext3/xattr.c	/^ext3_xattr_get(struct inode *inode, int name_index, const char *name,$/;"	f
ext3_xattr_get	fs/ext3/xattr.h	/^ext3_xattr_get(struct inode *inode, int name_index, const char *name,$/;"	f
ext3_xattr_get_acl	fs/ext3/acl.c	/^ext3_xattr_get_acl(struct dentry *dentry, const char *name, void *buffer,$/;"	f	file:
ext3_xattr_handler	fs/ext3/xattr.c	/^ext3_xattr_handler(int name_index)$/;"	f	file:
ext3_xattr_handler_map	fs/ext3/xattr.c	/^static const struct xattr_handler *ext3_xattr_handler_map[] = {$/;"	v	typeref:struct:xattr_handler	file:
ext3_xattr_handlers	fs/ext3/xattr.c	/^const struct xattr_handler *ext3_xattr_handlers[] = {$/;"	v	typeref:struct:xattr_handler
ext3_xattr_handlers	fs/ext3/xattr.h	125;"	d
ext3_xattr_hash_entry	fs/ext3/xattr.c	/^static inline void ext3_xattr_hash_entry(struct ext3_xattr_header *header,$/;"	f	file:
ext3_xattr_header	fs/ext3/xattr.h	/^struct ext3_xattr_header {$/;"	s
ext3_xattr_ibody_find	fs/ext3/xattr.c	/^ext3_xattr_ibody_find(struct inode *inode, struct ext3_xattr_info *i,$/;"	f	file:
ext3_xattr_ibody_find	fs/ext3/xattr.c	/^struct ext3_xattr_ibody_find {$/;"	s	file:
ext3_xattr_ibody_get	fs/ext3/xattr.c	/^ext3_xattr_ibody_get(struct inode *inode, int name_index, const char *name,$/;"	f	file:
ext3_xattr_ibody_header	fs/ext3/xattr.h	/^struct ext3_xattr_ibody_header {$/;"	s
ext3_xattr_ibody_list	fs/ext3/xattr.c	/^ext3_xattr_ibody_list(struct dentry *dentry, char *buffer, size_t buffer_size)$/;"	f	file:
ext3_xattr_ibody_set	fs/ext3/xattr.c	/^ext3_xattr_ibody_set(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_xattr_info	fs/ext3/xattr.c	/^struct ext3_xattr_info {$/;"	s	file:
ext3_xattr_list	fs/ext3/xattr.c	/^ext3_xattr_list(struct dentry *dentry, char *buffer, size_t buffer_size)$/;"	f	file:
ext3_xattr_list_acl_access	fs/ext3/acl.c	/^ext3_xattr_list_acl_access(struct dentry *dentry, char *list, size_t list_len,$/;"	f	file:
ext3_xattr_list_acl_default	fs/ext3/acl.c	/^ext3_xattr_list_acl_default(struct dentry *dentry, char *list, size_t list_len,$/;"	f	file:
ext3_xattr_list_entries	fs/ext3/xattr.c	/^ext3_xattr_list_entries(struct dentry *dentry, struct ext3_xattr_entry *entry,$/;"	f	file:
ext3_xattr_put_super	fs/ext3/xattr.c	/^ext3_xattr_put_super(struct super_block *sb)$/;"	f
ext3_xattr_put_super	fs/ext3/xattr.h	/^ext3_xattr_put_super(struct super_block *sb)$/;"	f
ext3_xattr_rehash	fs/ext3/xattr.c	/^static void ext3_xattr_rehash(struct ext3_xattr_header *header,$/;"	f	file:
ext3_xattr_release_block	fs/ext3/xattr.c	/^ext3_xattr_release_block(handle_t *handle, struct inode *inode,$/;"	f	file:
ext3_xattr_search	fs/ext3/xattr.c	/^struct ext3_xattr_search {$/;"	s	file:
ext3_xattr_security_get	fs/ext3/xattr_security.c	/^ext3_xattr_security_get(struct dentry *dentry, const char *name,$/;"	f	file:
ext3_xattr_security_handler	fs/ext3/xattr_security.c	/^const struct xattr_handler ext3_xattr_security_handler = {$/;"	v	typeref:struct:xattr_handler
ext3_xattr_security_list	fs/ext3/xattr_security.c	/^ext3_xattr_security_list(struct dentry *dentry, char *list, size_t list_size,$/;"	f	file:
ext3_xattr_security_set	fs/ext3/xattr_security.c	/^ext3_xattr_security_set(struct dentry *dentry, const char *name,$/;"	f	file:
ext3_xattr_set	fs/ext3/xattr.c	/^ext3_xattr_set(struct inode *inode, int name_index, const char *name,$/;"	f
ext3_xattr_set	fs/ext3/xattr.h	/^ext3_xattr_set(struct inode *inode, int name_index, const char *name,$/;"	f
ext3_xattr_set_acl	fs/ext3/acl.c	/^ext3_xattr_set_acl(struct dentry *dentry, const char *name, const void *value,$/;"	f	file:
ext3_xattr_set_entry	fs/ext3/xattr.c	/^ext3_xattr_set_entry(struct ext3_xattr_info *i, struct ext3_xattr_search *s)$/;"	f	file:
ext3_xattr_set_handle	fs/ext3/xattr.c	/^ext3_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index,$/;"	f
ext3_xattr_set_handle	fs/ext3/xattr.h	/^ext3_xattr_set_handle(handle_t *handle, struct inode *inode, int name_index,$/;"	f
ext3_xattr_trusted_get	fs/ext3/xattr_trusted.c	/^ext3_xattr_trusted_get(struct dentry *dentry, const char *name,$/;"	f	file:
ext3_xattr_trusted_handler	fs/ext3/xattr_trusted.c	/^const struct xattr_handler ext3_xattr_trusted_handler = {$/;"	v	typeref:struct:xattr_handler
ext3_xattr_trusted_list	fs/ext3/xattr_trusted.c	/^ext3_xattr_trusted_list(struct dentry *dentry, char *list, size_t list_size,$/;"	f	file:
ext3_xattr_trusted_set	fs/ext3/xattr_trusted.c	/^ext3_xattr_trusted_set(struct dentry *dentry, const char *name,$/;"	f	file:
ext3_xattr_update_super_block	fs/ext3/xattr.c	/^static void ext3_xattr_update_super_block(handle_t *handle,$/;"	f	file:
ext3_xattr_user_get	fs/ext3/xattr_user.c	/^ext3_xattr_user_get(struct dentry *dentry, const char *name, void *buffer,$/;"	f	file:
ext3_xattr_user_handler	fs/ext3/xattr_user.c	/^const struct xattr_handler ext3_xattr_user_handler = {$/;"	v	typeref:struct:xattr_handler
ext3_xattr_user_list	fs/ext3/xattr_user.c	/^ext3_xattr_user_list(struct dentry *dentry, char *list, size_t list_size,$/;"	f	file:
ext3_xattr_user_set	fs/ext3/xattr_user.c	/^ext3_xattr_user_set(struct dentry *dentry, const char *name,$/;"	f	file:
ext3fs_dirhash	fs/ext3/hash.c	/^int ext3fs_dirhash(const char *name, int len, struct dx_hash_info *hinfo)$/;"	f
extend_or_restart_transaction	fs/ext3/resize.c	/^static int extend_or_restart_transaction(handle_t *handle, int thresh,$/;"	f	file:
extent	mm/scm.h	/^}extent;$/;"	t	typeref:struct:__anon16
extfrag_debug_init	mm/vmstat.c	/^module_init(extfrag_debug_init);$/;"	v
extfrag_debug_init	mm/vmstat.c	/^static int __init extfrag_debug_init(void)$/;"	f	file:
extfrag_file_ops	mm/vmstat.c	/^static const struct file_operations extfrag_file_ops = {$/;"	v	typeref:struct:file_operations	file:
extfrag_op	mm/vmstat.c	/^static const struct seq_operations extfrag_op = {$/;"	v	typeref:struct:seq_operations	file:
extfrag_open	mm/vmstat.c	/^static int extfrag_open(struct inode *inode, struct file *file)$/;"	f	file:
extfrag_show	mm/vmstat.c	/^static int extfrag_show(struct seq_file *m, void *arg)$/;"	f	file:
extfrag_show_print	mm/vmstat.c	/^static void extfrag_show_print(struct seq_file *m,$/;"	f	file:
extra_fname	fs/ext3/ext3.h	/^	struct fname	*extra_fname;$/;"	m	struct:dir_private_info	typeref:struct:dir_private_info::fname
f	mm/vmalloc.c	/^static int f(pte_t *pte, pgtable_t table, unsigned long addr, void *data)$/;"	f	file:
fE	kernel/auditsc.c	/^		unsigned int	fE;		\/* effective bit of a file capability *\/$/;"	m	union:audit_cap_data::__anon42	file:
f_delown	fs/fcntl.c	/^void f_delown(struct file *filp)$/;"	f
f_dupfd	fs/file.c	/^int f_dupfd(unsigned int from, struct file *file, unsigned flags)$/;"	f
f_getown	fs/fcntl.c	/^pid_t f_getown(struct file *filp)$/;"	f
f_getown_ex	fs/fcntl.c	/^static int f_getown_ex(struct file *filp, unsigned long arg)$/;"	f	file:
f_getowner_uids	fs/fcntl.c	/^static int f_getowner_uids(struct file *filp, unsigned long arg)$/;"	f	file:
f_modown	fs/fcntl.c	/^static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,$/;"	f	file:
f_setown	fs/fcntl.c	/^EXPORT_SYMBOL(f_setown);$/;"	v
f_setown	fs/fcntl.c	/^int f_setown(struct file *filp, unsigned long arg, int force)$/;"	f
f_setown_ex	fs/fcntl.c	/^static int f_setown_ex(struct file *filp, unsigned long arg)$/;"	f	file:
facility	kernel/printk.c	/^	u8 facility;			\/* log level of first message *\/$/;"	m	struct:cont	file:
facility	kernel/printk.c	/^	u8 facility;		\/* syslog facility *\/$/;"	m	struct:log	file:
fadvise64	mm/fadvise.c	/^SYSCALL_DEFINE(fadvise64)(int fd, loff_t offset, size_t len, int advice)$/;"	f
fadvise64_64	mm/fadvise.c	/^SYSCALL_DEFINE(fadvise64_64)(int fd, loff_t offset, loff_t len, int advice)$/;"	f
fail_migrate_page	mm/migrate.c	/^EXPORT_SYMBOL(fail_migrate_page);$/;"	v
fail_migrate_page	mm/migrate.c	/^int fail_migrate_page(struct address_space *mapping,$/;"	f
fail_page_alloc	mm/page_alloc.c	/^} fail_page_alloc = {$/;"	v	typeref:struct:__anon12	file:
fail_page_alloc_debugfs	mm/page_alloc.c	/^late_initcall(fail_page_alloc_debugfs);$/;"	v
fail_page_alloc_debugfs	mm/page_alloc.c	/^static int __init fail_page_alloc_debugfs(void)$/;"	f	file:
failslab	mm/failslab.c	/^} failslab = {$/;"	v	typeref:struct:__anon2	file:
failslab	mm/slub.c	/^SLAB_ATTR(failslab);$/;"	v
failslab_debugfs_init	mm/failslab.c	/^late_initcall(failslab_debugfs_init);$/;"	v
failslab_debugfs_init	mm/failslab.c	/^static int __init failslab_debugfs_init(void)$/;"	f	file:
failslab_show	mm/slub.c	/^static ssize_t failslab_show(struct kmem_cache *s, char *buf)$/;"	f	file:
failslab_store	mm/slub.c	/^static ssize_t failslab_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
fake	fs/ext3/namei.c	/^	struct fake_dirent fake;$/;"	m	struct:dx_node	typeref:struct:dx_node::fake_dirent	file:
fake_dirent	fs/ext3/namei.c	/^struct fake_dirent$/;"	s	file:
fake_signal_wake_up	kernel/freezer.c	/^static void fake_signal_wake_up(struct task_struct *p)$/;"	f	file:
fakewriter_tasks	kernel/rcutorture.c	/^static struct task_struct **fakewriter_tasks;$/;"	v	typeref:struct:task_struct	file:
fallback_alloc	mm/slab.c	/^static void *fallback_alloc(struct kmem_cache *cache, gfp_t flags)$/;"	f	file:
fallback_migrate_page	mm/migrate.c	/^static int fallback_migrate_page(struct address_space *mapping,$/;"	f	file:
fallbacks	mm/page_alloc.c	/^static int fallbacks[MIGRATE_TYPES][4] = {$/;"	v	file:
fallocate	fs/open.c	/^SYSCALL_DEFINE(fallocate)(int fd, int mode, loff_t offset, loff_t len)$/;"	f
false	kernel/panic.c	/^	char	false;$/;"	m	struct:tnt	file:
family	kernel/taskstats.c	/^static struct genl_family family = {$/;"	v	typeref:struct:genl_family	file:
family_registered	kernel/taskstats.c	/^static int family_registered;$/;"	v	file:
fastpath_timer_check	kernel/posix-cpu-timers.c	/^static inline int fastpath_timer_check(struct task_struct *tsk)$/;"	f	file:
fasync_add_entry	fs/fcntl.c	/^static int fasync_add_entry(int fd, struct file *filp, struct fasync_struct **fapp)$/;"	f	file:
fasync_alloc	fs/fcntl.c	/^struct fasync_struct *fasync_alloc(void)$/;"	f
fasync_free	fs/fcntl.c	/^void fasync_free(struct fasync_struct *new)$/;"	f
fasync_free_rcu	fs/fcntl.c	/^static void fasync_free_rcu(struct rcu_head *head)$/;"	f	file:
fasync_helper	fs/fcntl.c	/^EXPORT_SYMBOL(fasync_helper);$/;"	v
fasync_helper	fs/fcntl.c	/^int fasync_helper(int fd, struct file * filp, int on, struct fasync_struct **fapp)$/;"	f
fasync_insert_entry	fs/fcntl.c	/^struct fasync_struct *fasync_insert_entry(int fd, struct file *filp, struct fasync_struct **fapp, struct fasync_struct *new)$/;"	f
fasync_remove_entry	fs/fcntl.c	/^int fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)$/;"	f
fault_in_multipages_readable	include/linux/pagemap.h	/^static inline int fault_in_multipages_readable(const char __user *uaddr,$/;"	f
fault_in_multipages_writeable	include/linux/pagemap.h	/^static inline int fault_in_multipages_writeable(char __user *uaddr, int size)$/;"	f
fault_in_pages_readable	include/linux/pagemap.h	/^static inline int fault_in_pages_readable(const char __user *uaddr, int size)$/;"	f
fault_in_pages_writeable	include/linux/pagemap.h	/^static inline int fault_in_pages_writeable(char __user *uaddr, int size)$/;"	f
fault_in_user_writeable	kernel/futex.c	/^static int fault_in_user_writeable(u32 __user *uaddr)$/;"	f	file:
fcap	kernel/auditsc.c	/^	struct audit_cap_data	 fcap;$/;"	m	struct:audit_names	typeref:struct:audit_names::audit_cap_data	file:
fcap	kernel/auditsc.c	/^	struct audit_cap_data	fcap;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_cap_data	file:
fcap_ver	kernel/auditsc.c	/^	unsigned int		fcap_ver;$/;"	m	struct:audit_aux_data_bprm_fcaps	file:
fcap_ver	kernel/auditsc.c	/^	unsigned int		fcap_ver;$/;"	m	struct:audit_names	file:
fcntl_getlease	fs/locks.c	/^int fcntl_getlease(struct file *filp)$/;"	f
fcntl_getlk	fs/locks.c	/^int fcntl_getlk(struct file *filp, struct flock __user *l)$/;"	f
fcntl_getlk64	fs/locks.c	/^int fcntl_getlk64(struct file *filp, struct flock64 __user *l)$/;"	f
fcntl_init	fs/fcntl.c	/^static int __init fcntl_init(void)$/;"	f	file:
fcntl_setlease	fs/locks.c	/^int fcntl_setlease(unsigned int fd, struct file *filp, long arg)$/;"	f
fcntl_setlk	fs/locks.c	/^int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,$/;"	f
fcntl_setlk64	fs/locks.c	/^int fcntl_setlk64(unsigned int fd, struct file *filp, unsigned int cmd,$/;"	f
fd	fs/eventpoll.c	/^	int fd;$/;"	m	struct:epoll_filefd	file:
fd	kernel/auditsc.c	/^			int			fd;$/;"	m	struct:audit_context::__anon43::__anon51	file:
fd	mm/mmap.c	/^	unsigned long fd;$/;"	m	struct:mmap_arg_struct	file:
fd	mm/nommu.c	/^	unsigned long fd;$/;"	m	struct:mmap_arg_struct	file:
fd_install	fs/file.c	/^EXPORT_SYMBOL(fd_install);$/;"	v
fd_install	fs/file.c	/^void fd_install(unsigned int fd, struct file *file)$/;"	f
fd_statfs	fs/statfs.c	/^int fd_statfs(int fd, struct kstatfs *st)$/;"	f
fdatawait_one_bdev	fs/sync.c	/^static void fdatawait_one_bdev(struct block_device *bdev, void *arg)$/;"	f	file:
fdatawrite_one_bdev	fs/sync.c	/^static void fdatawrite_one_bdev(struct block_device *bdev, void *arg)$/;"	f	file:
fds	kernel/auditsc.c	/^	int fds[2];$/;"	m	struct:audit_context	file:
fdtable_defer	fs/file.c	/^struct fdtable_defer {$/;"	s	file:
fdtable_defer_list_init	fs/file.c	/^static void fdtable_defer_list_init(int cpu)$/;"	f	file:
fetch_robust_entry	kernel/futex.c	/^static inline int fetch_robust_entry(struct robust_list __user **entry,$/;"	f	file:
fetch_robust_entry	kernel/futex_compat.c	/^fetch_robust_entry(compat_uptr_t *uentry, struct robust_list __user **entry,$/;"	f	file:
ffd	fs/eventpoll.c	/^	struct epoll_filefd ffd;$/;"	m	struct:epitem	typeref:struct:epitem::epoll_filefd	file:
fget	fs/file.c	/^EXPORT_SYMBOL(fget);$/;"	v
fget	fs/file.c	/^struct file *fget(unsigned int fd)$/;"	f
fget_light	fs/file.c	/^EXPORT_SYMBOL(fget_light);$/;"	v
fget_light	fs/file.c	/^struct file *fget_light(unsigned int fd, int *fput_needed)$/;"	f
fget_raw	fs/file.c	/^EXPORT_SYMBOL(fget_raw);$/;"	v
fget_raw	fs/file.c	/^struct file *fget_raw(unsigned int fd)$/;"	f
fget_raw_light	fs/file.c	/^struct file *fget_raw_light(unsigned int fd, int *fput_needed)$/;"	f
fiemap_check_flags	fs/ioctl.c	/^EXPORT_SYMBOL(fiemap_check_flags);$/;"	v
fiemap_check_flags	fs/ioctl.c	/^int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags)$/;"	f
fiemap_check_ranges	fs/ioctl.c	/^static int fiemap_check_ranges(struct super_block *sb,$/;"	f	file:
fiemap_fill_next_extent	fs/ioctl.c	/^EXPORT_SYMBOL(fiemap_fill_next_extent);$/;"	v
fiemap_fill_next_extent	fs/ioctl.c	/^int fiemap_fill_next_extent(struct fiemap_extent_info *fieinfo, u64 logical,$/;"	f
fifo_open	fs/fifo.c	/^static int fifo_open(struct inode *inode, struct file *filp)$/;"	f	file:
file	fs/eventpoll.c	/^	struct file *file;$/;"	m	struct:epoll_filefd	typeref:struct:epoll_filefd::file	file:
file	fs/eventpoll.c	/^	struct file *file;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::file	file:
file	kernel/acct.c	/^	struct file		*file;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::file	file:
file_caps_disable	kernel/capability.c	/^static int __init file_caps_disable(char *str)$/;"	f	file:
file_caps_enabled	kernel/capability.c	/^int file_caps_enabled = 1;$/;"	v
file_free	fs/file_table.c	/^static inline void file_free(struct file *f)$/;"	f	file:
file_free_rcu	fs/file_table.c	/^static void file_free_rcu(struct rcu_head *head)$/;"	f	file:
file_ioctl	fs/ioctl.c	/^static int file_ioctl(struct file *filp, unsigned int cmd,$/;"	f	file:
file_list_cpu	fs/file_table.c	/^static inline int file_list_cpu(struct file *file)$/;"	f	file:
file_mode	fs/compat.c	/^	compat_mode_t file_mode;$/;"	m	struct:compat_ncp_mount_data	file:
file_mode	fs/compat.c	/^	compat_ulong_t file_mode;$/;"	m	struct:compat_ncp_mount_data_v4	file:
file_ns_capable	kernel/capability.c	/^EXPORT_SYMBOL(file_ns_capable);$/;"	v
file_ns_capable	kernel/capability.c	/^bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap)$/;"	f
file_open_name	fs/open.c	/^struct file *file_open_name(struct filename *name, int flags, umode_t mode)$/;"	f
file_open_root	fs/open.c	/^EXPORT_SYMBOL(file_open_root);$/;"	v
file_open_root	fs/open.c	/^struct file *file_open_root(struct dentry *dentry, struct vfsmount *mnt,$/;"	f
file_pos_read	fs/read_write.c	/^static inline loff_t file_pos_read(struct file *file)$/;"	f	file:
file_pos_write	fs/read_write.c	/^static inline void file_pos_write(struct file *file, loff_t pos)$/;"	f	file:
file_ra_state_init	mm/readahead.c	/^EXPORT_SYMBOL_GPL(file_ra_state_init);$/;"	v
file_ra_state_init	mm/readahead.c	/^file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping)$/;"	f
file_read_actor	mm/filemap.c	/^int file_read_actor(read_descriptor_t *desc, struct page *page,$/;"	f
file_region	mm/hugetlb.c	/^struct file_region {$/;"	s	file:
file_remove_suid	fs/inode.c	/^EXPORT_SYMBOL(file_remove_suid);$/;"	v
file_remove_suid	fs/inode.c	/^int file_remove_suid(struct file *file)$/;"	f
file_sb_list_add	fs/file_table.c	/^void file_sb_list_add(struct file *file, struct super_block *sb)$/;"	f
file_sb_list_del	fs/file_table.c	/^void file_sb_list_del(struct file *file)$/;"	f
file_systems	fs/filesystems.c	/^static struct file_system_type *file_systems;$/;"	v	typeref:struct:file_system_type	file:
file_type	fs/ext3/dir.c	/^	__u8		file_type;$/;"	m	struct:fname	file:
file_type	fs/ext3/ext3.h	/^	__u8	file_type;$/;"	m	struct:ext3_dir_entry_2
file_type	fs/ext3/namei.c	/^	u8 file_type;$/;"	m	struct:fake_dirent	file:
file_update_time	fs/inode.c	/^EXPORT_SYMBOL(file_update_time);$/;"	v
file_update_time	fs/inode.c	/^int file_update_time(struct file *file)$/;"	f
filechk_ikconfiggz	kernel/Makefile	/^      filechk_ikconfiggz = (echo "static const char kernel_config_data[] __used = MAGIC_START"; cat $< | scripts\/bin2c; echo "MAGIC_END;")$/;"	m
filelock_init	fs/locks.c	/^core_initcall(filelock_init);$/;"	v
filelock_init	fs/locks.c	/^static int __init filelock_init(void)$/;"	f	file:
filemap_fault	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fault);$/;"	v
filemap_fault	mm/filemap.c	/^int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f
filemap_fault	mm/nommu.c	/^EXPORT_SYMBOL(filemap_fault);$/;"	v
filemap_fault	mm/nommu.c	/^int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f
filemap_fdatawait	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait);$/;"	v
filemap_fdatawait	mm/filemap.c	/^int filemap_fdatawait(struct address_space *mapping)$/;"	f
filemap_fdatawait_range	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait_range);$/;"	v
filemap_fdatawait_range	mm/filemap.c	/^int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte,$/;"	f
filemap_fdatawrite	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawrite);$/;"	v
filemap_fdatawrite	mm/filemap.c	/^int filemap_fdatawrite(struct address_space *mapping)$/;"	f
filemap_fdatawrite_range	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawrite_range);$/;"	v
filemap_fdatawrite_range	mm/filemap.c	/^int filemap_fdatawrite_range(struct address_space *mapping, loff_t start,$/;"	f
filemap_flush	mm/filemap.c	/^EXPORT_SYMBOL(filemap_flush);$/;"	v
filemap_flush	mm/filemap.c	/^int filemap_flush(struct address_space *mapping)$/;"	f
filemap_page_mkwrite	mm/filemap.c	/^EXPORT_SYMBOL(filemap_page_mkwrite);$/;"	v
filemap_page_mkwrite	mm/filemap.c	/^int filemap_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f
filemap_write_and_wait	mm/filemap.c	/^EXPORT_SYMBOL(filemap_write_and_wait);$/;"	v
filemap_write_and_wait	mm/filemap.c	/^int filemap_write_and_wait(struct address_space *mapping)$/;"	f
filemap_write_and_wait_range	mm/filemap.c	/^EXPORT_SYMBOL(filemap_write_and_wait_range);$/;"	v
filemap_write_and_wait_range	mm/filemap.c	/^int filemap_write_and_wait_range(struct address_space *mapping,$/;"	f
filename_lookup	fs/namei.c	/^static int filename_lookup(int dfd, struct filename *name,$/;"	f	file:
filename_to_taskname	fs/exec.c	/^static void filename_to_taskname(char *tcomm, const char *fn, unsigned int len)$/;"	f	file:
files	fs/binfmt_elf.c	/^	struct memelfnote files;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
files	kernel/cgroup.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files	kernel/cgroup_freezer.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files	kernel/cpuset.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files_cachep	kernel/fork.c	/^struct kmem_cache *files_cachep;$/;"	v	typeref:struct:kmem_cache
files_defer_init	fs/file.c	/^void __init files_defer_init(void)$/;"	f
files_init	fs/file_table.c	/^void __init files_init(unsigned long mempages)$/;"	f
files_lglock	fs/file_table.c	/^DEFINE_STATIC_LGLOCK(files_lglock);$/;"	v
files_stat	fs/file_table.c	/^struct files_stat_struct files_stat = {$/;"	v	typeref:struct:files_stat_struct
filesystems_proc_fops	fs/filesystems.c	/^static const struct file_operations filesystems_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
filesystems_proc_open	fs/filesystems.c	/^static int filesystems_proc_open(struct inode *inode, struct file *file)$/;"	f	file:
filesystems_proc_show	fs/filesystems.c	/^static int filesystems_proc_show(struct seq_file *m, void *v)$/;"	f	file:
fill_auxv_note	fs/binfmt_elf.c	/^static void fill_auxv_note(struct memelfnote *note, struct mm_struct *mm)$/;"	f	file:
fill_contig_page_info	mm/vmstat.c	/^static void fill_contig_page_info(struct zone *zone,$/;"	f	file:
fill_elf_fdpic_header	fs/binfmt_elf_fdpic.c	/^static inline void fill_elf_fdpic_header(struct elfhdr *elf, int segs)$/;"	f	file:
fill_elf_header	fs/binfmt_elf.c	/^static void fill_elf_header(struct elfhdr *elf, int segs,$/;"	f	file:
fill_elf_note_phdr	fs/binfmt_elf.c	/^static void fill_elf_note_phdr(struct elf_phdr *phdr, int sz, loff_t offset)$/;"	f	file:
fill_elf_note_phdr	fs/binfmt_elf_fdpic.c	/^static inline void fill_elf_note_phdr(struct elf_phdr *phdr, int sz, loff_t offset)$/;"	f	file:
fill_extnum_info	fs/binfmt_elf.c	/^static void fill_extnum_info(struct elfhdr *elf, struct elf_shdr *shdr4extnum,$/;"	f	file:
fill_extnum_info	fs/binfmt_elf_fdpic.c	/^static void fill_extnum_info(struct elfhdr *elf, struct elf_shdr *shdr4extnum,$/;"	f	file:
fill_files_note	fs/binfmt_elf.c	/^static void fill_files_note(struct memelfnote *note)$/;"	f	file:
fill_note	fs/binfmt_elf.c	/^static void fill_note(struct memelfnote *note, const char *name, int type, $/;"	f	file:
fill_note	fs/binfmt_elf_fdpic.c	/^static inline void fill_note(struct memelfnote *note, const char *name, int type,$/;"	f	file:
fill_note_info	fs/binfmt_elf.c	/^static int fill_note_info(struct elfhdr *elf, int phdrs,$/;"	f	file:
fill_prstatus	fs/binfmt_elf.c	/^static void fill_prstatus(struct elf_prstatus *prstatus,$/;"	f	file:
fill_prstatus	fs/binfmt_elf_fdpic.c	/^static void fill_prstatus(struct elf_prstatus *prstatus,$/;"	f	file:
fill_psinfo	fs/binfmt_elf.c	/^static int fill_psinfo(struct elf_prpsinfo *psinfo, struct task_struct *p,$/;"	f	file:
fill_psinfo	fs/binfmt_elf_fdpic.c	/^static int fill_psinfo(struct elf_prpsinfo *psinfo, struct task_struct *p,$/;"	f	file:
fill_siginfo_note	fs/binfmt_elf.c	/^static void fill_siginfo_note(struct memelfnote *note, user_siginfo_t *csigdata,$/;"	f	file:
fill_stats	kernel/taskstats.c	/^static void fill_stats(struct user_namespace *user_ns,$/;"	f	file:
fill_stats_for_pid	kernel/taskstats.c	/^static int fill_stats_for_pid(pid_t pid, struct taskstats *stats)$/;"	f	file:
fill_stats_for_tgid	kernel/taskstats.c	/^static int fill_stats_for_tgid(pid_t tgid, struct taskstats *stats)$/;"	f	file:
fill_tgid_exit	kernel/taskstats.c	/^static void fill_tgid_exit(struct task_struct *tsk)$/;"	f	file:
fill_thread_core_info	fs/binfmt_elf.c	/^static int fill_thread_core_info(struct elf_thread_core_info *t,$/;"	f	file:
filldir	fs/readdir.c	/^static int filldir(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
filldir64	fs/readdir.c	/^static int filldir64(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
filler_t	include/linux/pagemap.h	/^typedef int filler_t(void *, struct page *);$/;"	t
fillonedir	fs/readdir.c	/^static int fillonedir(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
filp_close	fs/open.c	/^EXPORT_SYMBOL(filp_close);$/;"	v
filp_close	fs/open.c	/^int filp_close(struct file *filp, fl_owner_t id)$/;"	f
filp_open	fs/open.c	/^EXPORT_SYMBOL(filp_open);$/;"	v
filp_open	fs/open.c	/^struct file *filp_open(const char *filename, int flags, umode_t mode)$/;"	f
filter	fs/compat_ioctl.c	/^	compat_caddr_t	filter;$/;"	m	struct:sock_fprog32	file:
filterkey	kernel/auditsc.c	/^	char *		    filterkey;	\/* key for rule that triggered record *\/$/;"	m	struct:audit_context	file:
final_block_in_bio	fs/direct-io.c	/^	sector_t final_block_in_bio;	\/* current final block in bio + 1 *\/$/;"	m	struct:dio_submit	file:
final_block_in_request	fs/direct-io.c	/^	sector_t final_block_in_request;\/* doesn't change *\/$/;"	m	struct:dio_submit	file:
final_note	kernel/kexec.c	/^static void final_note(u32 *buf)$/;"	f	file:
final_putname	fs/namei.c	/^void final_putname(struct filename *name)$/;"	f
find_and_get_object	mm/kmemleak.c	/^static struct kmemleak_object *find_and_get_object(unsigned long ptr, int alias)$/;"	f	file:
find_biggest_section_pfn	mm/memory_hotplug.c	/^static int find_biggest_section_pfn(int nid, struct zone *zone,$/;"	f	file:
find_chunk	kernel/audit_tree.c	/^static struct audit_chunk *find_chunk(struct node *p)$/;"	f	file:
find_css_set	kernel/cgroup.c	/^static struct css_set *find_css_set($/;"	f	file:
find_dcookie	fs/dcookies.c	/^static struct dcookie_struct * find_dcookie(unsigned long dcookie)$/;"	f	file:
find_existing_css_set	kernel/cgroup.c	/^static struct css_set *find_existing_css_set($/;"	f	file:
find_extend_vma	mm/mmap.c	/^find_extend_vma(struct mm_struct * mm, unsigned long addr)$/;"	f
find_extend_vma	mm/mmap.c	/^find_extend_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_extend_vma	mm/nommu.c	/^struct vm_area_struct *find_extend_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_filesystem	fs/filesystems.c	/^static struct file_system_type **find_filesystem(const char *name, unsigned len)$/;"	f	file:
find_ge_pid	kernel/pid.c	/^struct pid *find_ge_pid(int nr, struct pid_namespace *ns)$/;"	f
find_get_page	mm/filemap.c	/^EXPORT_SYMBOL(find_get_page);$/;"	v
find_get_page	mm/filemap.c	/^struct page *find_get_page(struct address_space *mapping, pgoff_t offset)$/;"	f
find_get_pages	mm/filemap.c	/^unsigned find_get_pages(struct address_space *mapping, pgoff_t start,$/;"	f
find_get_pages_contig	mm/filemap.c	/^EXPORT_SYMBOL(find_get_pages_contig);$/;"	v
find_get_pages_contig	mm/filemap.c	/^unsigned find_get_pages_contig(struct address_space *mapping, pgoff_t index,$/;"	f
find_get_pages_tag	mm/filemap.c	/^EXPORT_SYMBOL(find_get_pages_tag);$/;"	v
find_get_pages_tag	mm/filemap.c	/^unsigned find_get_pages_tag(struct address_space *mapping, pgoff_t *index,$/;"	f
find_get_pid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(find_get_pid);$/;"	v
find_get_pid	kernel/pid.c	/^struct pid *find_get_pid(pid_t nr)$/;"	f
find_group_orlov	fs/ext3/ialloc.c	/^static int find_group_orlov(struct super_block *sb, struct inode *parent)$/;"	f	file:
find_group_other	fs/ext3/ialloc.c	/^static int find_group_other(struct super_block *sb, struct inode *parent)$/;"	f	file:
find_inode	fs/inode.c	/^static struct inode *find_inode(struct super_block *sb,$/;"	f	file:
find_inode_fast	fs/inode.c	/^static struct inode *find_inode_fast(struct super_block *sb,$/;"	f	file:
find_inode_number	fs/dcache.c	/^EXPORT_SYMBOL(find_inode_number);$/;"	v
find_inode_number	fs/dcache.c	/^ino_t find_inode_number(struct dentry *dir, struct qstr *name)$/;"	f
find_lock_page	mm/filemap.c	/^EXPORT_SYMBOL(find_lock_page);$/;"	v
find_lock_page	mm/filemap.c	/^struct page *find_lock_page(struct address_space *mapping, pgoff_t offset)$/;"	f
find_lock_task_mm	mm/oom_kill.c	/^struct task_struct *find_lock_task_mm(struct task_struct *p)$/;"	f
find_mergeable	mm/slub.c	/^static struct kmem_cache *find_mergeable(struct mem_cgroup *memcg, size_t size,$/;"	f	file:
find_mergeable_anon_vma	mm/mmap.c	/^struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *vma)$/;"	f
find_mergeable_vma	mm/ksm.c	/^static struct vm_area_struct *find_mergeable_vma(struct mm_struct *mm,$/;"	f	file:
find_min_pfn_for_node	mm/page_alloc.c	/^static unsigned long __init find_min_pfn_for_node(int nid)$/;"	f	file:
find_min_pfn_with_active_regions	mm/page_alloc.c	/^unsigned long __init find_min_pfn_with_active_regions(void)$/;"	f
find_module	kernel/module.c	/^EXPORT_SYMBOL_GPL(find_module);$/;"	v
find_module	kernel/module.c	/^struct module *find_module(const char *name)$/;"	f
find_module_all	kernel/module.c	/^static struct module *find_module_all(const char *name,$/;"	f	file:
find_module_sections	kernel/module.c	/^static void find_module_sections(struct module *mod, struct load_info *info)$/;"	f	file:
find_next_best_node	mm/page_alloc.c	/^static int find_next_best_node(int node, nodemask_t *used_node_mask)$/;"	f	file:
find_next_offset	kernel/pid.c	63;"	d	file:
find_next_reservable_window	fs/ext3/balloc.c	/^static int find_next_reservable_window($/;"	f	file:
find_next_system_ram	kernel/resource.c	/^static int find_next_system_ram(struct resource *res, char *name)$/;"	f	file:
find_next_to_unuse	mm/swapfile.c	/^static unsigned int find_next_to_unuse(struct swap_info_struct *si,$/;"	f	file:
find_next_usable_block	fs/ext3/balloc.c	/^find_next_usable_block(ext3_grpblk_t start, struct buffer_head *bh,$/;"	f	file:
find_or_create_page	mm/filemap.c	/^EXPORT_SYMBOL(find_or_create_page);$/;"	v
find_or_create_page	mm/filemap.c	/^struct page *find_or_create_page(struct address_space *mapping,$/;"	f
find_pcpusec	kernel/module.c	/^static unsigned int find_pcpusec(struct load_info *info)$/;"	f	file:
find_pid_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(find_pid_ns);$/;"	v
find_pid_ns	kernel/pid.c	/^struct pid *find_pid_ns(int nr, struct pid_namespace *ns)$/;"	f
find_regset	kernel/ptrace.c	/^find_regset(const struct user_regset_view *view, unsigned int type)$/;"	f	file:
find_resource	kernel/resource.c	/^static int find_resource(struct resource *root, struct resource *new,$/;"	f	file:
find_sec	kernel/module.c	/^static unsigned int find_sec(const struct load_info *info, const char *name)$/;"	f	file:
find_shared_ppgtbl_entry	mm/scm.c	/^ppgtable_user *find_shared_ppgtbl_entry(uid_t uid, bool create_new, bool incref)$/;"	f
find_smallest_section_pfn	mm/memory_hotplug.c	/^static int find_smallest_section_pfn(int nid, struct zone *zone,$/;"	f	file:
find_success	mm/swap_state.c	/^	unsigned long find_success;$/;"	m	struct:__anon20	file:
find_symbol	kernel/module.c	/^EXPORT_SYMBOL_GPL(find_symbol);$/;"	v
find_symbol	kernel/module.c	/^const struct kernel_symbol *find_symbol(const char *name,$/;"	f
find_symbol_arg	kernel/module.c	/^struct find_symbol_arg {$/;"	s	file:
find_symbol_in_section	kernel/module.c	/^static bool find_symbol_in_section(const struct symsearch *syms,$/;"	f	file:
find_task_by_pid_ns	kernel/pid.c	/^struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns)$/;"	f
find_task_by_vpid	kernel/pid.c	/^struct task_struct *find_task_by_vpid(pid_t vnr)$/;"	f
find_total	mm/swap_state.c	/^	unsigned long find_total;$/;"	m	struct:__anon20	file:
find_usable_zone_for_movable	mm/page_alloc.c	/^static void __init find_usable_zone_for_movable(void)$/;"	f	file:
find_usage_backwards	kernel/lockdep.c	/^find_usage_backwards(struct lock_list *root, enum lock_usage_bit bit,$/;"	f	file:
find_usage_forwards	kernel/lockdep.c	/^find_usage_forwards(struct lock_list *root, enum lock_usage_bit bit,$/;"	f	file:
find_user	kernel/user.c	/^struct user_struct *find_user(kuid_t uid)$/;"	f
find_vm_area	mm/vmalloc.c	/^struct vm_struct *find_vm_area(const void *addr)$/;"	f
find_vma	mm/mmap.c	/^EXPORT_SYMBOL(find_vma);$/;"	v
find_vma	mm/mmap.c	/^struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_vma	mm/nommu.c	/^EXPORT_SYMBOL(find_vma);$/;"	v
find_vma	mm/nommu.c	/^struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_vma_exact	mm/nommu.c	/^static struct vm_area_struct *find_vma_exact(struct mm_struct *mm,$/;"	f	file:
find_vma_links	mm/mmap.c	/^static int find_vma_links(struct mm_struct *mm, unsigned long addr,$/;"	f	file:
find_vma_prev	mm/mmap.c	/^find_vma_prev(struct mm_struct *mm, unsigned long addr,$/;"	f
find_vmap_area	mm/vmalloc.c	/^static struct vmap_area *find_vmap_area(unsigned long addr)$/;"	f	file:
find_vpid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(find_vpid);$/;"	v
find_vpid	kernel/pid.c	/^struct pid *find_vpid(int nr)$/;"	f
find_worker_executing_work	kernel/workqueue.c	/^static struct worker *find_worker_executing_work(struct worker_pool *pool,$/;"	f	file:
find_zone_movable_pfns_for_nodes	mm/page_alloc.c	/^static void __init find_zone_movable_pfns_for_nodes(void)$/;"	f	file:
finish_automount	fs/namespace.c	/^int finish_automount(struct vfsmount *m, struct path *path)$/;"	f
finish_no_open	fs/open.c	/^EXPORT_SYMBOL(finish_no_open);$/;"	v
finish_no_open	fs/open.c	/^int finish_no_open(struct file *file, struct dentry *dentry)$/;"	f
finish_open	fs/open.c	/^EXPORT_SYMBOL(finish_open);$/;"	v
finish_open	fs/open.c	/^int finish_open(struct file *file, struct dentry *dentry,$/;"	f
finish_wait	kernel/wait.c	/^EXPORT_SYMBOL(finish_wait);$/;"	v
finish_wait	kernel/wait.c	/^void finish_wait(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
finished_loading	kernel/module.c	/^static bool finished_loading(const char *name)$/;"	f	file:
finished_update_free	mm/internal.h	/^	bool finished_update_free;	\/* True when the zone cached pfns are$/;"	m	struct:compact_control
finished_update_migrate	mm/internal.h	/^	bool finished_update_migrate;$/;"	m	struct:compact_control
fire_user_return_notifiers	kernel/user-return-notifier.c	/^void fire_user_return_notifiers(void)$/;"	f
first	fs/ext3/xattr.c	/^	struct ext3_xattr_entry *first;$/;"	m	struct:ext3_xattr_search	typeref:struct:ext3_xattr_search::ext3_xattr_entry	file:
first_block_in_page	fs/direct-io.c	/^	unsigned first_block_in_page;	\/* doesn't change, Used only once *\/$/;"	m	struct:dio_submit	file:
first_flusher	kernel/workqueue.c	/^	struct wq_flusher	*first_flusher;	\/* F: first flusher *\/$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::wq_flusher	file:
first_online_pgdat	mm/mmzone.c	/^struct pglist_data *first_online_pgdat(void)$/;"	f
first_slave	fs/pnode.c	/^static inline struct mount *first_slave(struct mount *p)$/;"	f	file:
first_trees	kernel/auditsc.c	/^	struct audit_tree_refs *trees, *first_trees;$/;"	m	struct:audit_context	typeref:struct:audit_context::	file:
first_vma	fs/binfmt_elf.c	/^static struct vm_area_struct *first_vma(struct task_struct *tsk,$/;"	f	file:
first_worker	kernel/workqueue.c	/^static struct worker *first_worker(struct worker_pool *pool)$/;"	f	file:
fix_zone_id	mm/memory_hotplug.c	/^static void fix_zone_id(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
fixup_owner	kernel/futex.c	/^static int fixup_owner(u32 __user *uaddr, struct futex_q *q, int locked)$/;"	f	file:
fixup_pi_state_owner	kernel/futex.c	/^static int fixup_pi_state_owner(u32 __user *uaddr, struct futex_q *q,$/;"	f	file:
fixup_rt_mutex_waiters	kernel/rtmutex.c	/^static void fixup_rt_mutex_waiters(struct rt_mutex *lock)$/;"	f	file:
fixup_user_fault	mm/memory.c	/^int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
flag	fs/proc_namespace.c	/^	int flag;$/;"	m	struct:proc_fs_info	file:
flags	fs/binfmt_misc.c	/^	unsigned long flags;		\/* type, status, etc. *\/$/;"	m	struct:__anon25	file:
flags	fs/compat.c	/^	compat_int_t flags;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
flags	fs/compat.c	/^	compat_uint_t flags;$/;"	m	struct:compat_ncp_mount_data	file:
flags	fs/compat.c	/^	compat_ulong_t flags;$/;"	m	struct:compat_ncp_mount_data_v4	file:
flags	fs/compat_ioctl.c	/^	compat_uint_t flags;		\/* [i] 0 -> default, see SG_FLAG... *\/$/;"	m	struct:sg_io_hdr32	file:
flags	fs/compat_ioctl.c	/^	u16 flags;$/;"	m	struct:i2c_msg32	file:
flags	fs/compat_ioctl.c	/^        compat_int_t    flags;$/;"	m	struct:serial_struct32	file:
flags	fs/direct-io.c	/^	int flags;			\/* doesn't change *\/$/;"	m	struct:dio	file:
flags	fs/eventfd.c	/^	unsigned int flags;$/;"	m	struct:eventfd_ctx	file:
flags	kernel/auditsc.c	/^			int			flags;$/;"	m	struct:audit_context::__anon43::__anon51	file:
flags	kernel/cgroup.c	/^	unsigned long flags;$/;"	m	struct:cgroup_sb_opts	file:
flags	kernel/cgroup.c	/^	unsigned long flags;$/;"	m	struct:cgroupfs_root	file:
flags	kernel/cpuset.c	/^	unsigned long flags;		\/* "unsigned long" so bitops work *\/$/;"	m	struct:cpuset	file:
flags	kernel/kthread.c	/^	unsigned long flags;$/;"	m	struct:kthread	file:
flags	kernel/module.c	/^	int flags;$/;"	m	struct:stopref	file:
flags	kernel/printk.c	/^	enum log_flags flags;		\/* prefix, newline flags *\/$/;"	m	struct:cont	typeref:enum:cont::log_flags	file:
flags	kernel/printk.c	/^	u8 flags:5;		\/* internal record flags *\/$/;"	m	struct:log	file:
flags	kernel/workqueue.c	/^	unsigned int		flags;		\/* W: WQ_* flags *\/$/;"	m	struct:workqueue_struct	file:
flags	kernel/workqueue.c	/^	unsigned int		flags;		\/* X: flags *\/$/;"	m	struct:worker_pool	file:
flags	kernel/workqueue_internal.h	/^	unsigned int		flags;		\/* X: flags *\/$/;"	m	struct:worker
flags	lib/rwsem-spinlock.c	/^	unsigned int flags;$/;"	m	struct:rwsem_waiter	file:
flags	mm/kmemleak.c	/^	unsigned long flags;		\/* object status flags *\/$/;"	m	struct:kmemleak_object	file:
flags	mm/memcontrol.c	/^	unsigned long flags;$/;"	m	struct:memcg_stock_pcp	file:
flags	mm/memory-failure.c	/^	int flags;$/;"	m	struct:memory_failure_entry	file:
flags	mm/mmap.c	/^	unsigned long flags;$/;"	m	struct:mmap_arg_struct	file:
flags	mm/nommu.c	/^	unsigned long flags;$/;"	m	struct:mmap_arg_struct	file:
flags	mm/vmalloc.c	/^	unsigned long flags;$/;"	m	struct:vmap_area	file:
flags_by_mnt	fs/statfs.c	/^static int flags_by_mnt(int mnt_flags)$/;"	f	file:
flags_by_sb	fs/statfs.c	/^static int flags_by_sb(int s_flags)$/;"	f	file:
flags_to_propagation_type	fs/namespace.c	/^static int flags_to_propagation_type(int flags)$/;"	f	file:
flat_core_dump	fs/binfmt_flat.c	/^static int flat_core_dump(struct coredump_params *cprm)$/;"	f	file:
flat_format	fs/binfmt_flat.c	/^static struct linux_binfmt flat_format = {$/;"	v	typeref:struct:linux_binfmt	file:
flavors	kernel/rcutree.h	/^	struct list_head flavors;		\/* List of RCU flavors. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::list_head
fllink	fs/eventpoll.c	/^	struct list_head fllink;$/;"	m	struct:epitem	typeref:struct:epitem::list_head	file:
flock64_to_posix_lock	fs/locks.c	/^static int flock64_to_posix_lock(struct file *filp, struct file_lock *fl,$/;"	f	file:
flock_lock_file	fs/locks.c	/^static int flock_lock_file(struct file *filp, struct file_lock *request)$/;"	f	file:
flock_lock_file_wait	fs/locks.c	/^EXPORT_SYMBOL(flock_lock_file_wait);$/;"	v
flock_lock_file_wait	fs/locks.c	/^int flock_lock_file_wait(struct file *filp, struct file_lock *fl)$/;"	f
flock_locks_conflict	fs/locks.c	/^static int flock_locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)$/;"	f	file:
flock_make_lock	fs/locks.c	/^static int flock_make_lock(struct file *filp, struct file_lock **lock,$/;"	f	file:
flock_to_posix_lock	fs/locks.c	/^static int flock_to_posix_lock(struct file *filp, struct file_lock *fl,$/;"	f	file:
flock_translate_cmd	fs/locks.c	/^static inline int flock_translate_cmd(int cmd) {$/;"	f	file:
flush_all	mm/slub.c	/^static void flush_all(struct kmem_cache *s)$/;"	f	file:
flush_all_zero_pkmaps	mm/highmem.c	/^static void flush_all_zero_pkmaps(void)$/;"	f	file:
flush_arg_page	fs/exec.c	/^static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,$/;"	f	file:
flush_color	kernel/workqueue.c	/^	int			flush_color;	\/* F: current flush color *\/$/;"	m	struct:workqueue_struct	file:
flush_color	kernel/workqueue.c	/^	int			flush_color;	\/* F: flush color waiting for *\/$/;"	m	struct:wq_flusher	file:
flush_color	kernel/workqueue.c	/^	int			flush_color;	\/* L: flushing color *\/$/;"	m	struct:pool_workqueue	file:
flush_cpu_slab	mm/slub.c	/^static void flush_cpu_slab(void *d)$/;"	f	file:
flush_delayed_fput	fs/file_table.c	/^void flush_delayed_fput(void)$/;"	f
flush_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL(flush_delayed_work);$/;"	v
flush_delayed_work	kernel/workqueue.c	/^bool flush_delayed_work(struct delayed_work *dwork)$/;"	f
flush_disk	fs/block_dev.c	/^static void flush_disk(struct block_device *bdev, bool kill_dirty)$/;"	f	file:
flush_itimer_signals	kernel/signal.c	/^void flush_itimer_signals(void)$/;"	f
flush_kthread_work	kernel/kthread.c	/^EXPORT_SYMBOL_GPL(flush_kthread_work);$/;"	v
flush_kthread_work	kernel/kthread.c	/^void flush_kthread_work(struct kthread_work *work)$/;"	f
flush_kthread_worker	kernel/kthread.c	/^EXPORT_SYMBOL_GPL(flush_kthread_worker);$/;"	v
flush_kthread_worker	kernel/kthread.c	/^void flush_kthread_worker(struct kthread_worker *worker)$/;"	f
flush_module_icache	kernel/module.c	/^static void flush_module_icache(const struct module *mod)$/;"	f	file:
flush_mutex	kernel/workqueue.c	/^	struct mutex		flush_mutex;	\/* protects wq flushing *\/$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::mutex	file:
flush_old_exec	fs/exec.c	/^EXPORT_SYMBOL(flush_old_exec);$/;"	v
flush_old_exec	fs/exec.c	/^int flush_old_exec(struct linux_binprm * bprm)$/;"	f
flush_pte	mm/scm.h	/^static pte_t inline flush_pte(pte_t pte)$/;"	f
flush_scheduled_work	kernel/workqueue.c	/^EXPORT_SYMBOL(flush_scheduled_work);$/;"	v
flush_scheduled_work	kernel/workqueue.c	/^void flush_scheduled_work(void)$/;"	f
flush_signal_handlers	kernel/signal.c	/^flush_signal_handlers(struct task_struct *t, int force_default)$/;"	f
flush_signals	kernel/signal.c	/^EXPORT_SYMBOL(flush_signals);$/;"	v
flush_signals	kernel/signal.c	/^void flush_signals(struct task_struct *t)$/;"	f
flush_sigqueue	kernel/signal.c	/^void flush_sigqueue(struct sigpending *queue)$/;"	f
flush_slab	mm/slub.c	/^static inline void flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)$/;"	f	file:
flush_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(flush_work);$/;"	v
flush_work	kernel/workqueue.c	/^bool flush_work(struct work_struct *work)$/;"	f
flush_workqueue	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(flush_workqueue);$/;"	v
flush_workqueue	kernel/workqueue.c	/^void flush_workqueue(struct workqueue_struct *wq)$/;"	f
flush_workqueue_prep_pwqs	kernel/workqueue.c	/^static bool flush_workqueue_prep_pwqs(struct workqueue_struct *wq,$/;"	f	file:
flushed	kernel/printk.c	/^	bool flushed:1;			\/* buffer sealed and committed *\/$/;"	m	struct:cont	file:
flushed	kernel/printk.c	/^	bool flushed:1;$/;"	m	struct:cont	file:
flusher_overflow	kernel/workqueue.c	/^	struct list_head	flusher_overflow; \/* F: flush overflow list *\/$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::list_head	file:
flusher_queue	kernel/workqueue.c	/^	struct list_head	flusher_queue;	\/* F: flush waiters *\/$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::list_head	file:
fmeter	kernel/cpuset.c	/^	struct fmeter fmeter;		\/* memory_pressure filter *\/$/;"	m	struct:cpuset	typeref:struct:cpuset::fmeter	file:
fmeter	kernel/cpuset.c	/^struct fmeter {$/;"	s	file:
fmeter_getrate	kernel/cpuset.c	/^static int fmeter_getrate(struct fmeter *fmp)$/;"	f	file:
fmeter_init	kernel/cpuset.c	/^static void fmeter_init(struct fmeter *fmp)$/;"	f	file:
fmeter_markevent	kernel/cpuset.c	/^static void fmeter_markevent(struct fmeter *fmp)$/;"	f	file:
fmeter_update	kernel/cpuset.c	/^static void fmeter_update(struct fmeter *fmp)$/;"	f	file:
fmt	fs/libfs.c	/^	const char *fmt;	\/* format for read operation *\/$/;"	m	struct:simple_attr	file:
fmt	kernel/panic.c	/^	const char *fmt;$/;"	m	struct:slowpath_args	file:
fn	kernel/stop_machine.c	/^	int			(*fn)(void *);$/;"	m	struct:stop_machine_data	file:
fn	kernel/workqueue.c	/^	long (*fn)(void *);$/;"	m	struct:work_for_cpu	file:
fname	fs/ext3/dir.c	/^struct fname {$/;"	s	file:
fold_hash	fs/namei.c	/^static inline unsigned int fold_hash(unsigned long hash)$/;"	f	file:
fold_hash	fs/namei.c	1655;"	d	file:
follow_automount	fs/namei.c	/^static int follow_automount(struct path *path, unsigned flags,$/;"	f	file:
follow_dotdot	fs/namei.c	/^static void follow_dotdot(struct nameidata *nd)$/;"	f	file:
follow_dotdot_rcu	fs/namei.c	/^static int follow_dotdot_rcu(struct nameidata *nd)$/;"	f	file:
follow_down	fs/namei.c	/^EXPORT_SYMBOL(follow_down);$/;"	v
follow_down	fs/namei.c	/^int follow_down(struct path *path)$/;"	f
follow_down_one	fs/namei.c	/^EXPORT_SYMBOL(follow_down_one);$/;"	v
follow_down_one	fs/namei.c	/^int follow_down_one(struct path *path)$/;"	f
follow_huge_pud	mm/hugetlb.c	/^follow_huge_pud(struct mm_struct *mm, unsigned long address,$/;"	f
follow_hugetlb_page	mm/hugetlb.c	/^long follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
follow_link	fs/namei.c	/^follow_link(struct path *link, struct nameidata *nd, void **p)$/;"	f	file:
follow_managed	fs/namei.c	/^static int follow_managed(struct path *path, unsigned flags)$/;"	f	file:
follow_mount	fs/namei.c	/^static void follow_mount(struct path *path)$/;"	f	file:
follow_mount_rcu	fs/namei.c	/^static void follow_mount_rcu(struct nameidata *nd)$/;"	f	file:
follow_page_mask	mm/memory.c	/^struct page *follow_page_mask(struct vm_area_struct *vma,$/;"	f
follow_page_mask	mm/nommu.c	/^struct page *follow_page_mask(struct vm_area_struct *vma,$/;"	f
follow_pfn	mm/memory.c	/^EXPORT_SYMBOL(follow_pfn);$/;"	v
follow_pfn	mm/memory.c	/^int follow_pfn(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_pfn	mm/nommu.c	/^EXPORT_SYMBOL(follow_pfn);$/;"	v
follow_pfn	mm/nommu.c	/^int follow_pfn(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_phys	mm/memory.c	/^int follow_phys(struct vm_area_struct *vma,$/;"	f
follow_pte	mm/memory.c	/^static inline int follow_pte(struct mm_struct *mm, unsigned long address,$/;"	f	file:
follow_trans_huge_pmd	mm/huge_memory.c	/^struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,$/;"	f
follow_up	fs/namei.c	/^EXPORT_SYMBOL(follow_up);$/;"	v
follow_up	fs/namei.c	/^int follow_up(struct path *path)$/;"	f
follow_up_rcu	fs/namei.c	/^static int follow_up_rcu(struct path *path)$/;"	f	file:
follow_xip_hugetlb_page	mm/memory.c	/^static int follow_xip_hugetlb_page($/;"	f	file:
foo	kernel/bounds.c	/^void foo(void)$/;"	f
foo	kernel/bounds.s	/^foo:$/;"	l
footer	mm/kmemleak-test.c	/^	long footer[25];$/;"	m	struct:test_node	file:
fops_kp	kernel/kprobes.c	/^static const struct file_operations fops_kp = {$/;"	v	typeref:struct:file_operations	file:
for_background	fs/fs-writeback.c	/^	unsigned int for_background:1;$/;"	m	struct:wb_writeback_work	file:
for_each_active_root	kernel/cgroup.c	312;"	d	file:
for_each_busy_worker	kernel/workqueue.c	254;"	d	file:
for_each_kimage_entry	kernel/kexec.c	618;"	d	file:
for_each_lock	fs/locks.c	153;"	d	file:
for_each_mayday_cpu	kernel/workqueue.c	192;"	d	file:
for_each_mayday_cpu	kernel/workqueue.c	199;"	d	file:
for_each_mem_cgroup	mm/memcontrol.c	1175;"	d	file:
for_each_mem_cgroup_tree	mm/memcontrol.c	1170;"	d	file:
for_each_object	mm/slub.c	276;"	d	file:
for_each_online_wq_cpu	kernel/workqueue.c	296;"	d	file:
for_each_pwq_cpu	kernel/workqueue.c	301;"	d	file:
for_each_rcu_flavor	kernel/rcutree.h	456;"	d
for_each_std_worker_pool	kernel/workqueue.c	250;"	d	file:
for_each_subsys	kernel/cgroup.c	308;"	d	file:
for_each_wq_cpu	kernel/workqueue.c	291;"	d	file:
for_each_xattr_handler	fs/xattr.c	728;"	d	file:
for_kupdate	fs/fs-writeback.c	/^	unsigned int for_kupdate:1;$/;"	m	struct:wb_writeback_work	file:
force_page_cache_readahead	mm/readahead.c	/^int force_page_cache_readahead(struct address_space *mapping, struct file *filp,$/;"	f
force_qs_rnp	kernel/rcutree.c	/^static void force_qs_rnp(struct rcu_state *rsp, int (*f)(struct rcu_data *))$/;"	f	file:
force_quiescent_state	kernel/rcutree.c	/^static void force_quiescent_state(struct rcu_state *rsp)$/;"	f	file:
force_shm_swapin_readahead	mm/madvise.c	/^static void force_shm_swapin_readahead(struct vm_area_struct *vma,$/;"	f	file:
force_sig	kernel/signal.c	/^EXPORT_SYMBOL(force_sig);$/;"	v
force_sig	kernel/signal.c	/^force_sig(int sig, struct task_struct *p)$/;"	f
force_sig_info	kernel/signal.c	/^force_sig_info(int sig, struct siginfo *info, struct task_struct *t)$/;"	f
force_sigsegv	kernel/signal.c	/^force_sigsegv(int sig, struct task_struct *p)$/;"	f
force_swapin_readahead	mm/madvise.c	/^static void force_swapin_readahead(struct vm_area_struct *vma,$/;"	f	file:
force_unoptimize_kprobe	kernel/kprobes.c	/^static __kprobes void force_unoptimize_kprobe(struct optimized_kprobe *op)$/;"	f	file:
forced	kernel/module.c	/^	int *forced;$/;"	m	struct:stopref	file:
forget_original_parent	kernel/exit.c	/^static void forget_original_parent(struct task_struct *father)$/;"	f	file:
fork_idle	kernel/fork.c	/^struct task_struct * __cpuinit fork_idle(int cpu)$/;"	f
fork_init	kernel/fork.c	/^void __init fork_init(unsigned long mempages)$/;"	f
format_corename	fs/coredump.c	/^static int format_corename(struct core_name *cn, struct coredump_params *cprm)$/;"	f	file:
fpu	fs/binfmt_elf.c	/^	elf_fpregset_t *fpu;$/;"	m	struct:elf_note_info	file:
fpu	fs/binfmt_elf.c	/^	elf_fpregset_t fpu;		\/* NT_PRFPREG *\/$/;"	m	struct:elf_thread_status	file:
fpu	fs/binfmt_elf_fdpic.c	/^	elf_fpregset_t fpu;		\/* NT_PRFPREG *\/$/;"	m	struct:elf_thread_status	file:
fput	fs/file_table.c	/^EXPORT_SYMBOL(fput);$/;"	v
fput	fs/file_table.c	/^void fput(struct file *file)$/;"	f
fqs	kernel/rcutorture.c	/^	void (*fqs)(void);$/;"	m	struct:rcu_torture_ops	file:
fqs_duration	kernel/rcutorture.c	/^static int fqs_duration;	\/* Duration of bursts (us), 0 to disable. *\/$/;"	v	file:
fqs_holdoff	kernel/rcutorture.c	/^static int fqs_holdoff;		\/* Hold time within burst (us). *\/$/;"	v	file:
fqs_stutter	kernel/rcutorture.c	/^static int fqs_stutter = 3;	\/* Wait time between bursts (s). *\/$/;"	v	file:
fqs_task	kernel/rcutorture.c	/^static struct task_struct *fqs_task;$/;"	v	typeref:struct:task_struct	file:
frag_next	mm/vmstat.c	/^static void *frag_next(struct seq_file *m, void *arg, loff_t *pos)$/;"	f	file:
frag_show	mm/vmstat.c	/^static int frag_show(struct seq_file *m, void *arg)$/;"	f	file:
frag_show_print	mm/vmstat.c	/^static void frag_show_print(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
frag_start	mm/vmstat.c	/^static void *frag_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
frag_stop	mm/vmstat.c	/^static void frag_stop(struct seq_file *m, void *arg)$/;"	f	file:
fragmentation_file_operations	mm/vmstat.c	/^static const struct file_operations fragmentation_file_operations = {$/;"	v	typeref:struct:file_operations	file:
fragmentation_index	mm/vmstat.c	/^int fragmentation_index(struct zone *zone, unsigned int order)$/;"	f
fragmentation_op	mm/vmstat.c	/^static const struct seq_operations fragmentation_op = {$/;"	v	typeref:struct:seq_operations	file:
fragmentation_open	mm/vmstat.c	/^static int fragmentation_open(struct inode *inode, struct file *file)$/;"	f	file:
frame_rate	fs/compat_ioctl.c	/^		unsigned int frame_rate;$/;"	m	union:compat_video_event::__anon26	file:
free	mm/slab.c	/^			kmem_bufctl_t free;$/;"	m	struct:slab::__anon18::__anon19	file:
free	mm/vmalloc.c	/^	struct list_head free;$/;"	m	struct:vmap_block_queue	typeref:struct:vmap_block_queue::list_head	file:
free	mm/vmalloc.c	/^	unsigned long free, dirty;$/;"	m	struct:vmap_block	file:
free_aggr_kprobe	kernel/kprobes.c	/^static __kprobes void free_aggr_kprobe(struct kprobe *p)$/;"	f	file:
free_alien_cache	mm/slab.c	/^static inline void free_alien_cache(struct array_cache **ac_ptr)$/;"	f	file:
free_alien_cache	mm/slab.c	/^static void free_alien_cache(struct array_cache **ac_ptr)$/;"	f	file:
free_all_bootmem	mm/bootmem.c	/^unsigned long __init free_all_bootmem(void)$/;"	f
free_all_bootmem	mm/nobootmem.c	/^unsigned long __init free_all_bootmem(void)$/;"	f
free_all_bootmem_core	mm/bootmem.c	/^static unsigned long __init free_all_bootmem_core(bootmem_data_t *bdata)$/;"	f	file:
free_all_bootmem_node	mm/bootmem.c	/^unsigned long __init free_all_bootmem_node(pg_data_t *pgdat)$/;"	f
free_anon_bdev	fs/super.c	/^EXPORT_SYMBOL(free_anon_bdev);$/;"	v
free_anon_bdev	fs/super.c	/^void free_anon_bdev(dev_t dev)$/;"	f
free_area_init	mm/page_alloc.c	/^void __init free_area_init(unsigned long *zones_size)$/;"	f
free_area_init_core	mm/page_alloc.c	/^static void __paginginit free_area_init_core(struct pglist_data *pgdat,$/;"	f	file:
free_area_init_node	mm/page_alloc.c	/^void __paginginit free_area_init_node(int nid, unsigned long *zones_size,$/;"	f
free_area_init_nodes	mm/page_alloc.c	/^void __init free_area_init_nodes(unsigned long *max_zone_pfn)$/;"	f
free_arg_page	fs/exec.c	/^static void free_arg_page(struct linux_binprm *bprm, int i)$/;"	f	file:
free_arg_pages	fs/exec.c	/^static void free_arg_pages(struct linux_binprm *bprm)$/;"	f	file:
free_block	mm/slab.c	/^static void free_block(struct kmem_cache *cachep, void **objpp, int nr_objects,$/;"	f	file:
free_blocks_count	fs/ext3/ext3.h	/^	__u32 free_blocks_count;$/;"	m	struct:ext3_new_group_data
free_blocks_suitable	mm/vmstat.c	/^	unsigned long free_blocks_suitable;$/;"	m	struct:contig_page_info	file:
free_blocks_total	mm/vmstat.c	/^	unsigned long free_blocks_total;$/;"	m	struct:contig_page_info	file:
free_bootmem	mm/bootmem.c	/^void __init free_bootmem(unsigned long physaddr, unsigned long size)$/;"	f
free_bootmem	mm/nobootmem.c	/^void __init free_bootmem(unsigned long addr, unsigned long size)$/;"	f
free_bootmem_late	mm/bootmem.c	/^void __init free_bootmem_late(unsigned long physaddr, unsigned long size)$/;"	f
free_bootmem_late	mm/nobootmem.c	/^void __init free_bootmem_late(unsigned long addr, unsigned long size)$/;"	f
free_bootmem_node	mm/bootmem.c	/^void __init free_bootmem_node(pg_data_t *pgdat, unsigned long physaddr,$/;"	f
free_bootmem_node	mm/nobootmem.c	/^void __init free_bootmem_node(pg_data_t *pgdat, unsigned long physaddr,$/;"	f
free_bootmem_with_active_regions	mm/page_alloc.c	/^void __init free_bootmem_with_active_regions(int nid, unsigned long max_low_pfn)$/;"	f
free_bprm	fs/exec.c	/^void free_bprm(struct linux_binprm *bprm)$/;"	f
free_buffer_head	fs/buffer.c	/^EXPORT_SYMBOL(free_buffer_head);$/;"	v
free_buffer_head	fs/buffer.c	/^void free_buffer_head(struct buffer_head *bh)$/;"	f
free_calls	mm/slub.c	/^SLAB_ATTR_RO(free_calls);$/;"	v
free_calls_show	mm/slub.c	/^static ssize_t free_calls_show(struct kmem_cache *s, char *buf)$/;"	f	file:
free_cg_links	kernel/cgroup.c	/^static void free_cg_links(struct list_head *tmp)$/;"	f	file:
free_chunk	kernel/audit_tree.c	/^static void free_chunk(struct audit_chunk *chunk)$/;"	f	file:
free_compound_page	mm/page_alloc.c	/^static void free_compound_page(struct page *page)$/;"	f	file:
free_contig_range	mm/page_alloc.c	/^void free_contig_range(unsigned long pfn, unsigned nr_pages)$/;"	f
free_copy	kernel/module.c	/^static void free_copy(struct load_info *info)$/;"	f	file:
free_css_id	kernel/cgroup.c	/^EXPORT_SYMBOL_GPL(free_css_id);$/;"	v
free_css_id	kernel/cgroup.c	/^void free_css_id(struct cgroup_subsys *ss, struct cgroup_subsys_state *css)$/;"	f
free_dcookie	fs/dcookies.c	/^static void free_dcookie(struct dcookie_struct * dcs)$/;"	f	file:
free_debug_processing	mm/slub.c	/^static inline struct kmem_cache_node *free_debug_processing($/;"	f	file:
free_debug_processing	mm/slub.c	/^static noinline struct kmem_cache_node *free_debug_processing($/;"	f	file:
free_dma	kernel/dma.c	/^EXPORT_SYMBOL(free_dma);$/;"	v
free_dma	kernel/dma.c	/^void free_dma(unsigned int dmanr)$/;"	f
free_fdmem	fs/file.c	/^static void free_fdmem(void *ptr)$/;"	f	file:
free_fdtable_rcu	fs/file.c	/^static void free_fdtable_rcu(struct rcu_head *rcu)$/;"	f	file:
free_fdtable_work	fs/file.c	/^static void free_fdtable_work(struct work_struct *work)$/;"	f	file:
free_fs_struct	fs/fs_struct.c	/^void free_fs_struct(struct fs_struct *fs)$/;"	f
free_hot_cold_page	mm/page_alloc.c	/^void free_hot_cold_page(struct page *page, int cold)$/;"	f
free_hot_cold_page_list	mm/page_alloc.c	/^void free_hot_cold_page_list(struct list_head *list, int cold)$/;"	f
free_huge_page	mm/hugetlb.c	/^static void free_huge_page(struct page *page)$/;"	f	file:
free_hugepages	mm/hugetlb.c	/^HSTATE_ATTR_RO(free_hugepages);$/;"	v
free_hugepages_show	mm/hugetlb.c	/^static ssize_t free_hugepages_show(struct kobject *kobj,$/;"	f	file:
free_inode_nonrcu	fs/inode.c	/^EXPORT_SYMBOL(free_inode_nonrcu);$/;"	v
free_inode_nonrcu	fs/inode.c	/^void free_inode_nonrcu(struct inode *inode)$/;"	f
free_insn_slot	kernel/kprobes.c	/^void __kprobes free_insn_slot(kprobe_opcode_t * slot, int dirty)$/;"	f
free_kmem_cache_nodes	mm/slub.c	/^static void free_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
free_limit	mm/slab.c	/^	unsigned int free_limit;$/;"	m	struct:kmem_list3	file:
free_list	mm/vmalloc.c	/^	struct list_head free_list;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
free_loc_track	mm/slub.c	/^static void free_loc_track(struct loc_track *t)$/;"	f	file:
free_low_memory_core_early	mm/nobootmem.c	/^unsigned long __init free_low_memory_core_early(int nodeid)$/;"	f
free_map_bootmem	mm/sparse.c	/^static void free_map_bootmem(struct page *memmap, unsigned long nr_pages)$/;"	f	file:
free_mayday_mask	kernel/workqueue.c	194;"	d	file:
free_mayday_mask	kernel/workqueue.c	201;"	d	file:
free_mem_cgroup_per_zone_info	mm/memcontrol.c	/^static void free_mem_cgroup_per_zone_info(struct mem_cgroup *memcg, int node)$/;"	f	file:
free_memcg_kmem_pages	mm/page_alloc.c	/^void free_memcg_kmem_pages(unsigned long addr, unsigned int order)$/;"	f
free_mm	kernel/fork.c	507;"	d	file:
free_mm_slot	mm/huge_memory.c	/^static inline void free_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
free_mm_slot	mm/ksm.c	/^static inline void free_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
free_mnt_ns	fs/namespace.c	/^static void free_mnt_ns(struct mnt_namespace *ns)$/;"	f	file:
free_modinfo	kernel/module.c	/^static void free_modinfo(struct module *mod)$/;"	f	file:
free_modprobe_argv	kernel/kmod.c	/^static void free_modprobe_argv(struct subprocess_info *info)$/;"	f	file:
free_module	kernel/module.c	/^static void free_module(struct module *mod)$/;"	f	file:
free_module_param_attrs	kernel/params.c	/^static void free_module_param_attrs(struct module_kobject *mk)$/;"	f	file:
free_more_memory	fs/buffer.c	/^static void free_more_memory(void)$/;"	f	file:
free_note_info	fs/binfmt_elf.c	/^static void free_note_info(struct elf_note_info *info)$/;"	f	file:
free_notes_attrs	kernel/module.c	/^static void free_notes_attrs(struct module_notes_attrs *notes_attrs,$/;"	f	file:
free_nsproxy	kernel/nsproxy.c	/^void free_nsproxy(struct nsproxy *ns)$/;"	f
free_object_rcu	mm/kmemleak.c	/^static void free_object_rcu(struct rcu_head *rcu)$/;"	f	file:
free_objects	mm/slab.c	/^	unsigned long free_objects;$/;"	m	struct:kmem_list3	file:
free_one_page	mm/page_alloc.c	/^static void free_one_page(struct zone *zone, struct page *page, int order,$/;"	f	file:
free_optinsn_slot	kernel/kprobes.c	/^void __kprobes free_optinsn_slot(kprobe_opcode_t * slot, int dirty)$/;"	f
free_page_and_swap_cache	mm/swap_state.c	/^void free_page_and_swap_cache(struct page *page)$/;"	f
free_page_cgroup	mm/page_cgroup.c	/^static void free_page_cgroup(void *addr)$/;"	f	file:
free_page_series	mm/nommu.c	/^static void free_page_series(unsigned long from, unsigned long to)$/;"	f	file:
free_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(free_pages);$/;"	v
free_pages	mm/page_alloc.c	/^void free_pages(unsigned long addr, unsigned int order)$/;"	f
free_pages	mm/vmstat.c	/^	unsigned long free_pages;$/;"	m	struct:contig_page_info	file:
free_pages_and_swap_cache	mm/swap_state.c	/^void free_pages_and_swap_cache(struct page **pages, int nr)$/;"	f
free_pages_check	mm/page_alloc.c	/^static inline int free_pages_check(struct page *page)$/;"	f	file:
free_pages_exact	mm/page_alloc.c	/^EXPORT_SYMBOL(free_pages_exact);$/;"	v
free_pages_exact	mm/page_alloc.c	/^void free_pages_exact(void *virt, size_t size)$/;"	f
free_pages_prepare	mm/page_alloc.c	/^static bool free_pages_prepare(struct page *page, unsigned int order)$/;"	f	file:
free_partial	mm/slub.c	/^static void free_partial(struct kmem_cache *s, struct kmem_cache_node *n)$/;"	f	file:
free_pcppages_bulk	mm/page_alloc.c	/^static void free_pcppages_bulk(struct zone *zone, int count,$/;"	f	file:
free_percpu	mm/percpu.c	/^EXPORT_SYMBOL_GPL(free_percpu);$/;"	v
free_percpu	mm/percpu.c	/^void free_percpu(void __percpu *ptr)$/;"	f
free_pfn	mm/internal.h	/^	unsigned long free_pfn;		\/* isolate_freepages search base *\/$/;"	m	struct:compact_control
free_pgd_range	mm/memory.c	/^void free_pgd_range(struct mmu_gather *tlb,$/;"	f
free_pgtables	mm/memory.c	/^void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
free_pi_state	kernel/futex.c	/^static void free_pi_state(struct futex_pi_state *pi_state)$/;"	f	file:
free_pid	kernel/pid.c	/^void free_pid(struct pid *pid)$/;"	f
free_pid_ns	kernel/pid_namespace.c	/^static void free_pid_ns(struct kref *kref)$/;"	f	file:
free_pidmap	kernel/pid.c	/^static void free_pidmap(struct upid *upid)$/;"	f	file:
free_pipe_info	fs/pipe.c	/^void free_pipe_info(struct inode *inode)$/;"	f
free_pmd_range	mm/memory.c	/^static inline void free_pmd_range(struct mmu_gather *tlb, pud_t *pud,$/;"	f	file:
free_poll_entry	fs/select.c	/^static void free_poll_entry(struct poll_table_entry *entry)$/;"	f	file:
free_pool_huge_page	mm/hugetlb.c	/^static int free_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
free_pte_range	mm/memory.c	/^static void free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,$/;"	f	file:
free_pud_range	mm/memory.c	/^static inline void free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,$/;"	f	file:
free_pwqs	kernel/workqueue.c	/^static void free_pwqs(struct workqueue_struct *wq)$/;"	f	file:
free_rb_tree_fname	fs/ext3/dir.c	/^static void free_rb_tree_fname(struct rb_root *root)$/;"	f	file:
free_rcu	mm/memcontrol.c	/^static void free_rcu(struct rcu_head *rcu_head)$/;"	f	file:
free_rmap_item	mm/ksm.c	/^static inline void free_rmap_item(struct rmap_item *rmap_item)$/;"	f	file:
free_rp_inst	kernel/kprobes.c	/^static inline void free_rp_inst(struct kretprobe *rp)$/;"	f	file:
free_sect_attrs	kernel/module.c	/^static void free_sect_attrs(struct module_sect_attrs *sect_attrs)$/;"	f	file:
free_section_usemap	mm/sparse.c	/^static void free_section_usemap(struct page *memmap, unsigned long *usemap)$/;"	f	file:
free_signal_struct	kernel/fork.c	/^static inline void free_signal_struct(struct signal_struct *sig)$/;"	f	file:
free_size	mm/percpu.c	/^	int			free_size;	\/* free bytes in the chunk *\/$/;"	m	struct:pcpu_chunk	file:
free_slab	mm/slub.c	/^static void free_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
free_stable_node	mm/ksm.c	/^static inline void free_stable_node(struct stable_node *stable_node)$/;"	f	file:
free_swap_and_cache	mm/swapfile.c	/^int free_swap_and_cache(swp_entry_t entry)$/;"	f
free_swap_cache	mm/swap_state.c	/^static inline void free_swap_cache(struct page *page)$/;"	f	file:
free_swap_count_continuations	mm/swapfile.c	/^static void free_swap_count_continuations(struct swap_info_struct *si)$/;"	f	file:
free_task	kernel/fork.c	/^EXPORT_SYMBOL(free_task);$/;"	v
free_task	kernel/fork.c	/^void free_task(struct task_struct *tsk)$/;"	f
free_task_struct	kernel/fork.c	/^static inline void free_task_struct(struct task_struct *tsk)$/;"	f	file:
free_thread_info	kernel/fork.c	/^static inline void free_thread_info(struct thread_info *ti)$/;"	f	file:
free_thread_info	kernel/fork.c	/^static void free_thread_info(struct thread_info *ti)$/;"	f	file:
free_touched	mm/slab.c	/^	int free_touched;		\/* updated without locking *\/$/;"	m	struct:kmem_list3	file:
free_tree_refs	kernel/auditsc.c	/^static void free_tree_refs(struct audit_context *ctx)$/;"	f	file:
free_trial_cpuset	kernel/cpuset.c	/^static void free_trial_cpuset(struct cpuset *trial)$/;"	f	file:
free_uid	kernel/user.c	/^void free_uid(struct user_struct *up)$/;"	f
free_unmap_vmap_area	mm/vmalloc.c	/^static void free_unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
free_unmap_vmap_area_addr	mm/vmalloc.c	/^static void free_unmap_vmap_area_addr(unsigned long addr)$/;"	f	file:
free_unmap_vmap_area_noflush	mm/vmalloc.c	/^static void free_unmap_vmap_area_noflush(struct vmap_area *va)$/;"	f	file:
free_user_ns	kernel/user_namespace.c	/^EXPORT_SYMBOL(free_user_ns);$/;"	v
free_user_ns	kernel/user_namespace.c	/^void free_user_ns(struct user_namespace *ns)$/;"	f
free_uts_ns	kernel/utsname.c	/^void free_uts_ns(struct kref *kref)$/;"	f
free_vfsmnt	fs/namespace.c	/^static void free_vfsmnt(struct mount *mnt)$/;"	f	file:
free_vm_area	mm/nommu.c	/^EXPORT_SYMBOL_GPL(free_vm_area);$/;"	v
free_vm_area	mm/nommu.c	/^void free_vm_area(struct vm_struct *area)$/;"	f
free_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(free_vm_area);$/;"	v
free_vm_area	mm/vmalloc.c	/^void free_vm_area(struct vm_struct *area)$/;"	f
free_vmap_area	mm/vmalloc.c	/^static void free_vmap_area(struct vmap_area *va)$/;"	f	file:
free_vmap_area_noflush	mm/vmalloc.c	/^static void free_vmap_area_noflush(struct vmap_area *va)$/;"	f	file:
free_vmap_block	mm/vmalloc.c	/^static void free_vmap_block(struct vmap_block *vb)$/;"	f	file:
free_vmap_cache	mm/vmalloc.c	/^static struct rb_node *free_vmap_cache;$/;"	v	typeref:struct:rb_node	file:
free_work	mm/memcontrol.c	/^static void free_work(struct work_struct *work)$/;"	f	file:
freehigh	kernel/compat.c	/^	u32 freehigh;$/;"	m	struct:compat_sysinfo	file:
freememblocks	mm/scm.c	/^unsigned long *freememblocks;$/;"	v
freepages	mm/internal.h	/^	struct list_head freepages;	\/* List of free pages to migrate to *\/$/;"	m	struct:compact_control	typeref:struct:compact_control::list_head
freeram	kernel/compat.c	/^	u32 freeram;$/;"	m	struct:compat_sysinfo	file:
freeswap	kernel/compat.c	/^	u32 freeswap;$/;"	m	struct:compat_sysinfo	file:
freeze_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(freeze_bdev);$/;"	v
freeze_bdev	fs/block_dev.c	/^struct super_block *freeze_bdev(struct block_device *bdev)$/;"	f
freeze_cgroup	kernel/cgroup_freezer.c	/^static void freeze_cgroup(struct freezer *freezer)$/;"	f	file:
freeze_super	fs/super.c	/^EXPORT_SYMBOL(freeze_super);$/;"	v
freeze_super	fs/super.c	/^int freeze_super(struct super_block *sb)$/;"	f
freeze_task	kernel/freezer.c	/^bool freeze_task(struct task_struct *p)$/;"	f
freeze_workqueues_begin	kernel/workqueue.c	/^void freeze_workqueues_begin(void)$/;"	f
freeze_workqueues_busy	kernel/workqueue.c	/^bool freeze_workqueues_busy(void)$/;"	f
freezer	kernel/cgroup_freezer.c	/^struct freezer {$/;"	s	file:
freezer_apply_state	kernel/cgroup_freezer.c	/^static void freezer_apply_state(struct freezer *freezer, bool freeze,$/;"	f	file:
freezer_attach	kernel/cgroup_freezer.c	/^static void freezer_attach(struct cgroup *new_cgrp, struct cgroup_taskset *tset)$/;"	f	file:
freezer_change_state	kernel/cgroup_freezer.c	/^static void freezer_change_state(struct freezer *freezer, bool freeze)$/;"	f	file:
freezer_css_alloc	kernel/cgroup_freezer.c	/^static struct cgroup_subsys_state *freezer_css_alloc(struct cgroup *cgroup)$/;"	f	file:
freezer_css_free	kernel/cgroup_freezer.c	/^static void freezer_css_free(struct cgroup *cgroup)$/;"	f	file:
freezer_css_offline	kernel/cgroup_freezer.c	/^static void freezer_css_offline(struct cgroup *cgroup)$/;"	f	file:
freezer_css_online	kernel/cgroup_freezer.c	/^static int freezer_css_online(struct cgroup *cgroup)$/;"	f	file:
freezer_fork	kernel/cgroup_freezer.c	/^static void freezer_fork(struct task_struct *task)$/;"	f	file:
freezer_parent_freezing_read	kernel/cgroup_freezer.c	/^static u64 freezer_parent_freezing_read(struct cgroup *cgroup, struct cftype *cft)$/;"	f	file:
freezer_read	kernel/cgroup_freezer.c	/^static int freezer_read(struct cgroup *cgroup, struct cftype *cft,$/;"	f	file:
freezer_self_freezing_read	kernel/cgroup_freezer.c	/^static u64 freezer_self_freezing_read(struct cgroup *cgroup, struct cftype *cft)$/;"	f	file:
freezer_state_flags	kernel/cgroup_freezer.c	/^enum freezer_state_flags {$/;"	g	file:
freezer_state_strs	kernel/cgroup_freezer.c	/^static const char *freezer_state_strs(unsigned int state)$/;"	f	file:
freezer_subsys	kernel/cgroup_freezer.c	/^struct cgroup_subsys freezer_subsys = {$/;"	v	typeref:struct:cgroup_subsys
freezer_subsys	kernel/cgroup_freezer.c	/^struct cgroup_subsys freezer_subsys;$/;"	v	typeref:struct:cgroup_subsys
freezer_write	kernel/cgroup_freezer.c	/^static int freezer_write(struct cgroup *cgroup, struct cftype *cft,$/;"	f	file:
freezing_slow_path	kernel/freezer.c	/^EXPORT_SYMBOL(freezing_slow_path);$/;"	v
freezing_slow_path	kernel/freezer.c	/^bool freezing_slow_path(struct task_struct *p)$/;"	f
from	mm/hugetlb.c	/^	long from;$/;"	m	struct:file_region	file:
from	mm/memcontrol.c	/^	struct mem_cgroup *from;$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::mem_cgroup	file:
from_kgid	kernel/user_namespace.c	/^EXPORT_SYMBOL(from_kgid);$/;"	v
from_kgid	kernel/user_namespace.c	/^gid_t from_kgid(struct user_namespace *targ, kgid_t kgid)$/;"	f
from_kgid_munged	kernel/user_namespace.c	/^EXPORT_SYMBOL(from_kgid_munged);$/;"	v
from_kgid_munged	kernel/user_namespace.c	/^gid_t from_kgid_munged(struct user_namespace *targ, kgid_t kgid)$/;"	f
from_kprojid	kernel/user_namespace.c	/^EXPORT_SYMBOL(from_kprojid);$/;"	v
from_kprojid	kernel/user_namespace.c	/^projid_t from_kprojid(struct user_namespace *targ, kprojid_t kprojid)$/;"	f
from_kprojid_munged	kernel/user_namespace.c	/^EXPORT_SYMBOL(from_kprojid_munged);$/;"	v
from_kprojid_munged	kernel/user_namespace.c	/^projid_t from_kprojid_munged(struct user_namespace *targ, kprojid_t kprojid)$/;"	f
from_kuid	kernel/user_namespace.c	/^EXPORT_SYMBOL(from_kuid);$/;"	v
from_kuid	kernel/user_namespace.c	/^uid_t from_kuid(struct user_namespace *targ, kuid_t kuid)$/;"	f
from_kuid_munged	kernel/user_namespace.c	/^EXPORT_SYMBOL(from_kuid_munged);$/;"	v
from_kuid_munged	kernel/user_namespace.c	/^uid_t from_kuid_munged(struct user_namespace *targ, kuid_t kuid)$/;"	f
front	kernel/lockdep.c	/^	unsigned int  front, rear;$/;"	m	struct:circular_queue	file:
frontswap_curr_pages	mm/frontswap.c	/^EXPORT_SYMBOL(frontswap_curr_pages);$/;"	v
frontswap_curr_pages	mm/frontswap.c	/^unsigned long frontswap_curr_pages(void)$/;"	f
frontswap_enabled	mm/frontswap.c	/^EXPORT_SYMBOL(frontswap_enabled);$/;"	v
frontswap_failed_stores	mm/frontswap.c	/^static u64 frontswap_failed_stores;$/;"	v	file:
frontswap_invalidates	mm/frontswap.c	/^static u64 frontswap_invalidates;$/;"	v	file:
frontswap_loads	mm/frontswap.c	/^static u64 frontswap_loads;$/;"	v	file:
frontswap_register_ops	mm/frontswap.c	/^EXPORT_SYMBOL(frontswap_register_ops);$/;"	v
frontswap_register_ops	mm/frontswap.c	/^struct frontswap_ops frontswap_register_ops(struct frontswap_ops *ops)$/;"	f
frontswap_shrink	mm/frontswap.c	/^EXPORT_SYMBOL(frontswap_shrink);$/;"	v
frontswap_shrink	mm/frontswap.c	/^void frontswap_shrink(unsigned long target_pages)$/;"	f
frontswap_succ_stores	mm/frontswap.c	/^static u64 frontswap_succ_stores;$/;"	v	file:
frontswap_tmem_exclusive_gets	mm/frontswap.c	/^EXPORT_SYMBOL(frontswap_tmem_exclusive_gets);$/;"	v
frontswap_tmem_exclusive_gets	mm/frontswap.c	/^void frontswap_tmem_exclusive_gets(bool enable)$/;"	f
frontswap_writethrough	mm/frontswap.c	/^EXPORT_SYMBOL(frontswap_writethrough);$/;"	v
frontswap_writethrough	mm/frontswap.c	/^void frontswap_writethrough(bool enable)$/;"	f
frozen_cpus	kernel/cpu.c	/^static cpumask_var_t frozen_cpus;$/;"	v	file:
fs_bio_set	fs/bio.c	/^EXPORT_SYMBOL(fs_bio_set);$/;"	v
fs_bio_set	fs/bio.c	/^struct bio_set *fs_bio_set;$/;"	v	typeref:struct:bio_set
fs_cachep	kernel/fork.c	/^struct kmem_cache *fs_cachep;$/;"	v	typeref:struct:kmem_cache
fs_index	fs/filesystems.c	/^static int fs_index(const char __user * __name)$/;"	f	file:
fs_kobj	fs/namespace.c	/^EXPORT_SYMBOL_GPL(fs_kobj);$/;"	v
fs_kobj	fs/namespace.c	/^struct kobject *fs_kobj;$/;"	v	typeref:struct:kobject
fs_maxindex	fs/filesystems.c	/^static int fs_maxindex(void)$/;"	f	file:
fs_name	fs/filesystems.c	/^static int fs_name(unsigned int index, char __user * buf)$/;"	f	file:
fs_overflowgid	kernel/sys.c	/^EXPORT_SYMBOL(fs_overflowgid);$/;"	v
fs_overflowgid	kernel/sys.c	/^int fs_overflowgid = DEFAULT_FS_OVERFLOWUID;$/;"	v
fs_overflowuid	kernel/sys.c	/^EXPORT_SYMBOL(fs_overflowuid);$/;"	v
fs_overflowuid	kernel/sys.c	/^int fs_overflowuid = DEFAULT_FS_OVERFLOWUID;$/;"	v
fs_set_subtype	fs/namespace.c	/^static struct vfsmount *fs_set_subtype(struct vfsmount *mnt, const char *fstype)$/;"	f	file:
fs_table	kernel/sysctl.c	/^static struct ctl_table fs_table[] = {$/;"	v	typeref:struct:ctl_table	file:
fs_table	kernel/sysctl.c	/^static struct ctl_table fs_table[];$/;"	v	typeref:struct:ctl_table	file:
fscaps	kernel/ksysfs.c	/^KERNEL_ATTR_RO(fscaps);$/;"	v
fscaps_show	kernel/ksysfs.c	/^static ssize_t fscaps_show(struct kobject *kobj,$/;"	f	file:
fsgid	kernel/auditsc.c	/^	kgid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
fsn_mark	fs/notify/inotify/inotify.h	/^	struct fsnotify_mark fsn_mark;$/;"	m	struct:inotify_inode_mark	typeref:struct:inotify_inode_mark::fsnotify_mark
fsnotify	fs/notify/fsnotify.c	/^EXPORT_SYMBOL_GPL(fsnotify);$/;"	v
fsnotify	fs/notify/fsnotify.c	/^int fsnotify(struct inode *to_tell, __u32 mask, void *data, int data_is,$/;"	f
fsnotify_event_priv_data	fs/notify/inotify/inotify.h	/^	struct fsnotify_event_private_data fsnotify_event_priv_data;$/;"	m	struct:inotify_event_private_data	typeref:struct:inotify_event_private_data::fsnotify_event_private_data
fsnotify_init	fs/notify/fsnotify.c	/^core_initcall(fsnotify_init);$/;"	v
fsnotify_init	fs/notify/fsnotify.c	/^static __init int fsnotify_init(void)$/;"	f	file:
fsstack_copy_attr_all	fs/stack.c	/^EXPORT_SYMBOL_GPL(fsstack_copy_attr_all);$/;"	v
fsstack_copy_attr_all	fs/stack.c	/^void fsstack_copy_attr_all(struct inode *dest, const struct inode *src)$/;"	f
fsstack_copy_inode_size	fs/stack.c	/^EXPORT_SYMBOL_GPL(fsstack_copy_inode_size);$/;"	v
fsstack_copy_inode_size	fs/stack.c	/^void fsstack_copy_inode_size(struct inode *dst, struct inode *src)$/;"	f
fsuid	kernel/auditsc.c	/^	kuid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
fsync_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(fsync_bdev);$/;"	v
fsync_bdev	fs/block_dev.c	/^int fsync_bdev(struct block_device *bdev)$/;"	f
fsync_buffers_list	fs/buffer.c	/^static int fsync_buffers_list(spinlock_t *lock, struct list_head *list)$/;"	f	file:
ftruncate64	fs/open.c	/^SYSCALL_DEFINE(ftruncate64)(unsigned int fd, loff_t length)$/;"	f
full_name_hash	fs/namei.c	/^EXPORT_SYMBOL(full_name_hash);$/;"	v
full_name_hash	fs/namei.c	/^unsigned int full_name_hash(const unsigned char *name, unsigned int len)$/;"	f
full_scans	mm/ksm.c	/^KSM_ATTR_RO(full_scans);$/;"	v
full_scans_attr	mm/huge_memory.c	/^static struct kobj_attribute full_scans_attr =$/;"	v	typeref:struct:kobj_attribute	file:
full_scans_show	mm/huge_memory.c	/^static ssize_t full_scans_show(struct kobject *kobj,$/;"	f	file:
full_scans_show	mm/ksm.c	/^static ssize_t full_scans_show(struct kobject *kobj,$/;"	f	file:
fullstop	kernel/rcutorture.c	/^static int fullstop = FULLSTOP_RMMOD;$/;"	v	file:
func	kernel/async.c	/^	async_func_ptr		*func;$/;"	m	struct:async_entry	file:
func	kernel/rcutree_plugin.h	/^	void (*func)(struct rcu_head *rhp);$/;"	m	struct:rcu_head_remote
func_ptr_is_kernel_text	kernel/extable.c	/^int func_ptr_is_kernel_text(void *ptr)$/;"	f
funcs	kernel/tracepoint.c	/^	struct tracepoint_func *funcs;$/;"	m	struct:tracepoint_entry	typeref:struct:tracepoint_entry::tracepoint_func	file:
futex_cmpxchg_enabled	kernel/futex.c	/^int __read_mostly futex_cmpxchg_enabled;$/;"	v
futex_find_get_task	kernel/futex.c	/^static struct task_struct * futex_find_get_task(pid_t pid)$/;"	f	file:
futex_hash_bucket	kernel/futex.c	/^struct futex_hash_bucket {$/;"	s	file:
futex_init	kernel/futex.c	/^__initcall(futex_init);$/;"	v
futex_init	kernel/futex.c	/^static int __init futex_init(void)$/;"	f	file:
futex_lock_pi	kernel/futex.c	/^static int futex_lock_pi(u32 __user *uaddr, unsigned int flags, int detect,$/;"	f	file:
futex_lock_pi_atomic	kernel/futex.c	/^static int futex_lock_pi_atomic(u32 __user *uaddr, struct futex_hash_bucket *hb,$/;"	f	file:
futex_pi_state	kernel/futex.c	/^struct futex_pi_state {$/;"	s	file:
futex_proxy_trylock_atomic	kernel/futex.c	/^static int futex_proxy_trylock_atomic(u32 __user *pifutex,$/;"	f	file:
futex_q	kernel/futex.c	/^struct futex_q {$/;"	s	file:
futex_q_init	kernel/futex.c	/^static const struct futex_q futex_q_init = {$/;"	v	typeref:struct:futex_q	file:
futex_queues	kernel/futex.c	/^static struct futex_hash_bucket futex_queues[1<<FUTEX_HASHBITS];$/;"	v	typeref:struct:futex_hash_bucket	file:
futex_requeue	kernel/futex.c	/^static int futex_requeue(u32 __user *uaddr1, unsigned int flags,$/;"	f	file:
futex_top_waiter	kernel/futex.c	/^static struct futex_q *futex_top_waiter(struct futex_hash_bucket *hb,$/;"	f	file:
futex_uaddr	kernel/futex_compat.c	/^static void __user *futex_uaddr(struct robust_list __user *entry,$/;"	f	file:
futex_unlock_pi	kernel/futex.c	/^static int futex_unlock_pi(u32 __user *uaddr, unsigned int flags)$/;"	f	file:
futex_wait	kernel/futex.c	/^static int futex_wait(u32 __user *uaddr, unsigned int flags, u32 val,$/;"	f	file:
futex_wait_queue_me	kernel/futex.c	/^static void futex_wait_queue_me(struct futex_hash_bucket *hb, struct futex_q *q,$/;"	f	file:
futex_wait_requeue_pi	kernel/futex.c	/^static int futex_wait_requeue_pi(u32 __user *uaddr, unsigned int flags,$/;"	f	file:
futex_wait_restart	kernel/futex.c	/^static long futex_wait_restart(struct restart_block *restart)$/;"	f	file:
futex_wait_setup	kernel/futex.c	/^static int futex_wait_setup(u32 __user *uaddr, u32 val, unsigned int flags,$/;"	f	file:
futex_wake	kernel/futex.c	/^futex_wake(u32 __user *uaddr, unsigned int flags, int nr_wake, u32 bitset)$/;"	f	file:
futex_wake_op	kernel/futex.c	/^futex_wake_op(u32 __user *uaddr1, unsigned int flags, u32 __user *uaddr2,$/;"	f	file:
gate_vma	mm/memory.c	/^static struct vm_area_struct gate_vma;$/;"	v	typeref:struct:vm_area_struct	file:
gate_vma_init	mm/memory.c	/^__initcall(gate_vma_init);$/;"	v
gate_vma_init	mm/memory.c	/^static int __init gate_vma_init(void)$/;"	f	file:
gather_bootmem_prealloc	mm/hugetlb.c	/^static void __init gather_bootmem_prealloc(void)$/;"	f	file:
gather_surplus_pages	mm/hugetlb.c	/^static int gather_surplus_pages(struct hstate *h, int delta)$/;"	f	file:
generate_sched_domains	kernel/cpuset.c	/^static int generate_sched_domains(cpumask_var_t **domains,$/;"	f	file:
generation	mm/memcontrol.c	/^	unsigned int generation;$/;"	m	struct:mem_cgroup_reclaim_iter	file:
generic_access_phys	mm/memory.c	/^int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,$/;"	f
generic_acl_access_handler	fs/generic_acl.c	/^const struct xattr_handler generic_acl_access_handler = {$/;"	v	typeref:struct:xattr_handler
generic_acl_chmod	fs/generic_acl.c	/^generic_acl_chmod(struct inode *inode)$/;"	f
generic_acl_default_handler	fs/generic_acl.c	/^const struct xattr_handler generic_acl_default_handler = {$/;"	v	typeref:struct:xattr_handler
generic_acl_get	fs/generic_acl.c	/^generic_acl_get(struct dentry *dentry, const char *name, void *buffer,$/;"	f	file:
generic_acl_init	fs/generic_acl.c	/^generic_acl_init(struct inode *inode, struct inode *dir)$/;"	f
generic_acl_list	fs/generic_acl.c	/^generic_acl_list(struct dentry *dentry, char *list, size_t list_size,$/;"	f	file:
generic_acl_set	fs/generic_acl.c	/^generic_acl_set(struct dentry *dentry, const char *name, const void *value,$/;"	f	file:
generic_add_lease	fs/locks.c	/^int generic_add_lease(struct file *filp, long arg, struct file_lock **flp)$/;"	f
generic_block_bmap	fs/buffer.c	/^EXPORT_SYMBOL(generic_block_bmap);$/;"	v
generic_block_bmap	fs/buffer.c	/^sector_t generic_block_bmap(struct address_space *mapping, sector_t block,$/;"	f
generic_block_fiemap	fs/ioctl.c	/^EXPORT_SYMBOL(generic_block_fiemap);$/;"	v
generic_block_fiemap	fs/ioctl.c	/^int generic_block_fiemap(struct inode *inode,$/;"	f
generic_check_addressable	fs/libfs.c	/^EXPORT_SYMBOL(generic_check_addressable);$/;"	v
generic_check_addressable	fs/libfs.c	/^int generic_check_addressable(unsigned blocksize_bits, u64 num_blocks)$/;"	f
generic_cont_expand_simple	fs/buffer.c	/^EXPORT_SYMBOL(generic_cont_expand_simple);$/;"	v
generic_cont_expand_simple	fs/buffer.c	/^int generic_cont_expand_simple(struct inode *inode, loff_t size)$/;"	f
generic_delete_inode	fs/inode.c	/^EXPORT_SYMBOL(generic_delete_inode);$/;"	v
generic_delete_inode	fs/inode.c	/^int generic_delete_inode(struct inode *inode)$/;"	f
generic_delete_lease	fs/locks.c	/^int generic_delete_lease(struct file *filp, struct file_lock **flp)$/;"	f
generic_error_remove_page	mm/truncate.c	/^EXPORT_SYMBOL(generic_error_remove_page);$/;"	v
generic_error_remove_page	mm/truncate.c	/^int generic_error_remove_page(struct address_space *mapping, struct page *page)$/;"	f
generic_exec_single	kernel/smp.c	/^void generic_exec_single(int cpu, struct call_single_data *data, int wait)$/;"	f	file:
generic_fh_to_dentry	fs/libfs.c	/^EXPORT_SYMBOL_GPL(generic_fh_to_dentry);$/;"	v
generic_fh_to_dentry	fs/libfs.c	/^struct dentry *generic_fh_to_dentry(struct super_block *sb, struct fid *fid,$/;"	f
generic_fh_to_parent	fs/libfs.c	/^EXPORT_SYMBOL_GPL(generic_fh_to_parent);$/;"	v
generic_fh_to_parent	fs/libfs.c	/^struct dentry *generic_fh_to_parent(struct super_block *sb, struct fid *fid,$/;"	f
generic_file_aio_read	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_aio_read);$/;"	v
generic_file_aio_read	mm/filemap.c	/^generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_aio_write	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_aio_write);$/;"	v
generic_file_aio_write	mm/filemap.c	/^ssize_t generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_buffered_write	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_buffered_write);$/;"	v
generic_file_buffered_write	mm/filemap.c	/^generic_file_buffered_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_direct_write	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_direct_write);$/;"	v
generic_file_direct_write	mm/filemap.c	/^generic_file_direct_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_fsync	fs/libfs.c	/^EXPORT_SYMBOL(generic_file_fsync);$/;"	v
generic_file_fsync	fs/libfs.c	/^int generic_file_fsync(struct file *file, loff_t start, loff_t end,$/;"	f
generic_file_llseek	fs/read_write.c	/^EXPORT_SYMBOL(generic_file_llseek);$/;"	v
generic_file_llseek	fs/read_write.c	/^loff_t generic_file_llseek(struct file *file, loff_t offset, int whence)$/;"	f
generic_file_llseek_size	fs/read_write.c	/^EXPORT_SYMBOL(generic_file_llseek_size);$/;"	v
generic_file_llseek_size	fs/read_write.c	/^generic_file_llseek_size(struct file *file, loff_t offset, int whence,$/;"	f
generic_file_mmap	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_mmap);$/;"	v
generic_file_mmap	mm/filemap.c	/^int generic_file_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
generic_file_open	fs/open.c	/^EXPORT_SYMBOL(generic_file_open);$/;"	v
generic_file_open	fs/open.c	/^int generic_file_open(struct inode * inode, struct file * filp)$/;"	f
generic_file_readonly_mmap	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_readonly_mmap);$/;"	v
generic_file_readonly_mmap	mm/filemap.c	/^int generic_file_readonly_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
generic_file_readonly_mmap	mm/filemap.c	/^int generic_file_readonly_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f
generic_file_remap_pages	mm/fremap.c	/^EXPORT_SYMBOL(generic_file_remap_pages);$/;"	v
generic_file_remap_pages	mm/fremap.c	/^int generic_file_remap_pages(struct vm_area_struct *vma, unsigned long addr,$/;"	f
generic_file_remap_pages	mm/nommu.c	/^EXPORT_SYMBOL(generic_file_remap_pages);$/;"	v
generic_file_remap_pages	mm/nommu.c	/^int generic_file_remap_pages(struct vm_area_struct *vma, unsigned long addr,$/;"	f
generic_file_splice_read	fs/splice.c	/^EXPORT_SYMBOL(generic_file_splice_read);$/;"	v
generic_file_splice_read	fs/splice.c	/^ssize_t generic_file_splice_read(struct file *in, loff_t *ppos,$/;"	f
generic_file_splice_write	fs/splice.c	/^EXPORT_SYMBOL(generic_file_splice_write);$/;"	v
generic_file_splice_write	fs/splice.c	/^generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out,$/;"	f
generic_file_vm_ops	mm/filemap.c	/^const struct vm_operations_struct generic_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
generic_file_vm_ops	mm/nommu.c	/^const struct vm_operations_struct generic_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
generic_fillattr	fs/stat.c	/^EXPORT_SYMBOL(generic_fillattr);$/;"	v
generic_fillattr	fs/stat.c	/^void generic_fillattr(struct inode *inode, struct kstat *stat)$/;"	f
generic_getxattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_getxattr);$/;"	v
generic_getxattr	fs/xattr.c	/^generic_getxattr(struct dentry *dentry, const char *name, void *buffer, size_t size)$/;"	f
generic_listxattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_listxattr);$/;"	v
generic_listxattr	fs/xattr.c	/^generic_listxattr(struct dentry *dentry, char *buffer, size_t buffer_size)$/;"	f
generic_online_page	mm/memory_hotplug.c	/^static void generic_online_page(struct page *page)$/;"	f	file:
generic_perform_write	mm/filemap.c	/^static ssize_t generic_perform_write(struct file *file,$/;"	f	file:
generic_permission	fs/namei.c	/^EXPORT_SYMBOL(generic_permission);$/;"	v
generic_permission	fs/namei.c	/^int generic_permission(struct inode *inode, int mask)$/;"	f
generic_pipe_buf_confirm	fs/pipe.c	/^EXPORT_SYMBOL(generic_pipe_buf_confirm);$/;"	v
generic_pipe_buf_confirm	fs/pipe.c	/^int generic_pipe_buf_confirm(struct pipe_inode_info *info,$/;"	f
generic_pipe_buf_get	fs/pipe.c	/^EXPORT_SYMBOL(generic_pipe_buf_get);$/;"	v
generic_pipe_buf_get	fs/pipe.c	/^void generic_pipe_buf_get(struct pipe_inode_info *pipe, struct pipe_buffer *buf)$/;"	f
generic_pipe_buf_map	fs/pipe.c	/^EXPORT_SYMBOL(generic_pipe_buf_map);$/;"	v
generic_pipe_buf_map	fs/pipe.c	/^void *generic_pipe_buf_map(struct pipe_inode_info *pipe,$/;"	f
generic_pipe_buf_release	fs/pipe.c	/^EXPORT_SYMBOL(generic_pipe_buf_release);$/;"	v
generic_pipe_buf_release	fs/pipe.c	/^void generic_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f
generic_pipe_buf_steal	fs/pipe.c	/^EXPORT_SYMBOL(generic_pipe_buf_steal);$/;"	v
generic_pipe_buf_steal	fs/pipe.c	/^int generic_pipe_buf_steal(struct pipe_inode_info *pipe,$/;"	f
generic_pipe_buf_unmap	fs/pipe.c	/^EXPORT_SYMBOL(generic_pipe_buf_unmap);$/;"	v
generic_pipe_buf_unmap	fs/pipe.c	/^void generic_pipe_buf_unmap(struct pipe_inode_info *pipe,$/;"	f
generic_ptrace_peekdata	kernel/ptrace.c	/^int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,$/;"	f
generic_ptrace_pokedata	kernel/ptrace.c	/^int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,$/;"	f
generic_read_dir	fs/libfs.c	/^EXPORT_SYMBOL(generic_read_dir);$/;"	v
generic_read_dir	fs/libfs.c	/^ssize_t generic_read_dir(struct file *filp, char __user *buf, size_t siz, loff_t *ppos)$/;"	f
generic_readlink	fs/namei.c	/^EXPORT_SYMBOL(generic_readlink);$/;"	v
generic_readlink	fs/namei.c	/^int generic_readlink(struct dentry *dentry, char __user *buffer, int buflen)$/;"	f
generic_removexattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_removexattr);$/;"	v
generic_removexattr	fs/xattr.c	/^generic_removexattr(struct dentry *dentry, const char *name)$/;"	f
generic_ro_fops	fs/read_write.c	/^EXPORT_SYMBOL(generic_ro_fops);$/;"	v
generic_ro_fops	fs/read_write.c	/^const struct file_operations generic_ro_fops = {$/;"	v	typeref:struct:file_operations
generic_segment_checks	mm/filemap.c	/^EXPORT_SYMBOL(generic_segment_checks);$/;"	v
generic_segment_checks	mm/filemap.c	/^int generic_segment_checks(const struct iovec *iov,$/;"	f
generic_setlease	fs/locks.c	/^EXPORT_SYMBOL(generic_setlease);$/;"	v
generic_setlease	fs/locks.c	/^int generic_setlease(struct file *filp, long arg, struct file_lock **flp)$/;"	f
generic_setxattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_setxattr);$/;"	v
generic_setxattr	fs/xattr.c	/^generic_setxattr(struct dentry *dentry, const char *name, const void *value, size_t size, int flags)$/;"	f
generic_show_options	fs/namespace.c	/^EXPORT_SYMBOL(generic_show_options);$/;"	v
generic_show_options	fs/namespace.c	/^int generic_show_options(struct seq_file *m, struct dentry *root)$/;"	f
generic_shutdown_super	fs/super.c	/^EXPORT_SYMBOL(generic_shutdown_super);$/;"	v
generic_shutdown_super	fs/super.c	/^void generic_shutdown_super(struct super_block *sb)$/;"	f
generic_smp_call_function_single_interrupt	kernel/smp.c	/^void generic_smp_call_function_single_interrupt(void)$/;"	f
generic_splice_sendpage	fs/splice.c	/^EXPORT_SYMBOL(generic_splice_sendpage);$/;"	v
generic_splice_sendpage	fs/splice.c	/^ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe, struct file *out,$/;"	f
generic_swapfile_activate	mm/page_io.c	/^int generic_swapfile_activate(struct swap_info_struct *sis,$/;"	f
generic_write_checks	mm/filemap.c	/^EXPORT_SYMBOL(generic_write_checks);$/;"	v
generic_write_checks	mm/filemap.c	/^inline int generic_write_checks(struct file *file, loff_t *pos, size_t *count, int isblk)$/;"	f
generic_write_end	fs/buffer.c	/^EXPORT_SYMBOL(generic_write_end);$/;"	v
generic_write_end	fs/buffer.c	/^int generic_write_end(struct file *file, struct address_space *mapping,$/;"	f
generic_write_sync	fs/sync.c	/^EXPORT_SYMBOL(generic_write_sync);$/;"	v
generic_write_sync	fs/sync.c	/^int generic_write_sync(struct file *file, loff_t pos, loff_t count)$/;"	f
generic_writepages	mm/page-writeback.c	/^EXPORT_SYMBOL(generic_writepages);$/;"	v
generic_writepages	mm/page-writeback.c	/^int generic_writepages(struct address_space *mapping,$/;"	f
get	fs/libfs.c	/^	int (*get)(void *, u64 *);$/;"	m	struct:simple_attr	file:
get_active_super	fs/super.c	/^struct super_block *get_active_super(struct block_device *bdev)$/;"	f
get_allocated_memblock_reserved_regions_info	mm/memblock.c	/^phys_addr_t __init_memblock get_allocated_memblock_reserved_regions_info($/;"	f
get_anon_bdev	fs/super.c	/^EXPORT_SYMBOL(get_anon_bdev);$/;"	v
get_anon_bdev	fs/super.c	/^int get_anon_bdev(dev_t *p)$/;"	f
get_any_page	mm/memory-failure.c	/^static int get_any_page(struct page *page, unsigned long pfn, int flags)$/;"	f	file:
get_any_partial	mm/slub.c	/^static void *get_any_partial(struct kmem_cache *s, gfp_t flags,$/;"	f	file:
get_arg_page	fs/exec.c	/^static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,$/;"	f	file:
get_block	fs/direct-io.c	/^	get_block_t *get_block;		\/* block mapping function *\/$/;"	m	struct:dio_submit	file:
get_block	fs/mpage.c	/^	get_block_t *get_block;$/;"	m	struct:mpage_data	file:
get_buf	fs/libfs.c	/^	char get_buf[24];	\/* enough to store a u64 and "\\n\\0" *\/$/;"	m	struct:simple_attr	file:
get_close_on_exec	fs/file.c	/^bool get_close_on_exec(unsigned int fd)$/;"	f
get_compat_flock	fs/compat.c	/^static int get_compat_flock(struct flock *kfl, struct compat_flock __user *ufl)$/;"	f	file:
get_compat_flock64	fs/compat.c	/^static int get_compat_flock64(struct flock *kfl, struct compat_flock64 __user *ufl)$/;"	f	file:
get_compat_itimerspec	kernel/compat.c	/^int get_compat_itimerspec(struct itimerspec *dst,$/;"	f
get_compat_itimerval	kernel/compat.c	/^static inline long get_compat_itimerval(struct itimerval *o,$/;"	f	file:
get_compat_sigevent	kernel/compat.c	/^int get_compat_sigevent(struct sigevent *event,$/;"	f
get_compat_timespec	kernel/compat.c	/^EXPORT_SYMBOL_GPL(get_compat_timespec);$/;"	v
get_compat_timespec	kernel/compat.c	/^int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)$/;"	f
get_compat_timeval	kernel/compat.c	/^EXPORT_SYMBOL_GPL(get_compat_timeval);$/;"	v
get_compat_timeval	kernel/compat.c	/^int get_compat_timeval(struct timeval *tv, const struct compat_timeval __user *ctv)$/;"	f
get_cpu_itimer	kernel/itimer.c	/^static void get_cpu_itimer(struct task_struct *tsk, unsigned int clock_id,$/;"	f	file:
get_css_set	kernel/cgroup.c	/^static inline void get_css_set(struct css_set *cg)$/;"	f	file:
get_dcookie	fs/dcookies.c	/^EXPORT_SYMBOL_GPL(get_dcookie);$/;"	v
get_dcookie	fs/dcookies.c	/^int get_dcookie(struct path *path, unsigned long *cookie)$/;"	f
get_dominating_id	fs/pnode.c	/^int get_dominating_id(struct mount *mnt, const struct path *root)$/;"	f
get_dtype	fs/ext3/dir.c	/^static unsigned char get_dtype(struct super_block *sb, int filetype)$/;"	f	file:
get_dump_page	mm/memory.c	/^struct page *get_dump_page(unsigned long addr)$/;"	f
get_dumpable	fs/exec.c	/^int get_dumpable(struct mm_struct *mm)$/;"	f
get_empty_filp	fs/file_table.c	/^struct file *get_empty_filp(void)$/;"	f
get_file_raw_ptr	kernel/kcmp.c	/^get_file_raw_ptr(struct task_struct *task, unsigned int idx)$/;"	f	file:
get_files_struct	fs/file.c	/^struct files_struct *get_files_struct(struct task_struct *task)$/;"	f
get_filesystem	fs/filesystems.c	/^void get_filesystem(struct file_system_type *fs)$/;"	f
get_filesystem_list	fs/filesystems.c	/^int __init get_filesystem_list(char *buf)$/;"	f
get_freelist	mm/slub.c	/^static inline void *get_freelist(struct kmem_cache *s, struct page *page)$/;"	f	file:
get_freepointer	mm/slub.c	/^static inline void *get_freepointer(struct kmem_cache *s, void *object)$/;"	f	file:
get_freepointer_safe	mm/slub.c	/^static inline void *get_freepointer_safe(struct kmem_cache *s, void *object)$/;"	f	file:
get_fs_type	fs/filesystems.c	/^EXPORT_SYMBOL(get_fs_type);$/;"	v
get_fs_type	fs/filesystems.c	/^struct file_system_type *get_fs_type(const char *name)$/;"	f
get_futex_key	kernel/futex.c	/^get_futex_key(u32 __user *uaddr, int fshared, union futex_key *key, int rw)$/;"	f	file:
get_futex_key_refs	kernel/futex.c	/^static void get_futex_key_refs(union futex_key *key)$/;"	f	file:
get_futex_value_locked	kernel/futex.c	/^static int get_futex_value_locked(u32 *dest, u32 __user *from)$/;"	f	file:
get_gate_vma	mm/memory.c	/^struct vm_area_struct *get_gate_vma(struct mm_struct *mm)$/;"	f
get_huge_zero_page	mm/huge_memory.c	/^static unsigned long get_huge_zero_page(void)$/;"	f	file:
get_init_ra_size	mm/readahead.c	/^static unsigned long get_init_ra_size(unsigned long size, unsigned long max)$/;"	f	file:
get_insn_slot	kernel/kprobes.c	/^kprobe_opcode_t __kprobes *get_insn_slot(void)$/;"	f
get_iovec_page_array	fs/splice.c	/^static int get_iovec_page_array(const struct iovec __user *iov,$/;"	f	file:
get_kernel_page	mm/swap.c	/^EXPORT_SYMBOL_GPL(get_kernel_page);$/;"	v
get_kernel_page	mm/swap.c	/^int get_kernel_page(unsigned long start, int write, struct page **pages)$/;"	f
get_kernel_pages	mm/swap.c	/^EXPORT_SYMBOL_GPL(get_kernel_pages);$/;"	v
get_kernel_pages	mm/swap.c	/^int get_kernel_pages(const struct kvec *kiov, int nr_segs, int write,$/;"	f
get_kpfn_nid	mm/ksm.c	/^static inline int get_kpfn_nid(unsigned long kpfn)$/;"	f	file:
get_kprobe	kernel/kprobes.c	/^struct kprobe __kprobes *get_kprobe(void *addr)$/;"	f
get_ksm_page	mm/ksm.c	/^static struct page *get_ksm_page(struct stable_node *stable_node, bool lock_it)$/;"	f	file:
get_ksymbol	kernel/module.c	/^static const char *get_ksymbol(struct module *mod,$/;"	f	file:
get_ksymbol_core	kernel/kallsyms.c	/^static unsigned long get_ksymbol_core(struct kallsym_iter *iter)$/;"	f	file:
get_ksymbol_mod	kernel/kallsyms.c	/^static int get_ksymbol_mod(struct kallsym_iter *iter)$/;"	f	file:
get_last_crashkernel	kernel/kexec.c	/^static __init char *get_last_crashkernel(char *cmdline,$/;"	f	file:
get_lock_depth	kernel/lockdep.c	/^static inline int get_lock_depth(struct lock_list *child)$/;"	f	file:
get_lock_parent	kernel/lockdep.c	/^static inline struct lock_list *get_lock_parent(struct lock_list *child)$/;"	f	file:
get_lock_stats	kernel/lockdep.c	/^static struct lock_class_stats *get_lock_stats(struct lock_class *class)$/;"	f	file:
get_lru_size	mm/vmscan.c	/^static unsigned long get_lru_size(struct lruvec *lruvec, enum lru_list lru)$/;"	f	file:
get_map	mm/slub.c	/^static void get_map(struct kmem_cache *s, struct page *page, unsigned long *map)$/;"	f	file:
get_max_files	fs/file_table.c	/^EXPORT_SYMBOL_GPL(get_max_files);$/;"	v
get_max_files	fs/file_table.c	/^unsigned long get_max_files(void)$/;"	f
get_mctgt_type	mm/memcontrol.c	/^static enum mc_target_type get_mctgt_type(struct vm_area_struct *vma,$/;"	f	file:
get_mctgt_type_thp	mm/memcontrol.c	/^static enum mc_target_type get_mctgt_type_thp(struct vm_area_struct *vma,$/;"	f	file:
get_mctgt_type_thp	mm/memcontrol.c	/^static inline enum mc_target_type get_mctgt_type_thp(struct vm_area_struct *vma,$/;"	f	file:
get_mergeable_page	mm/ksm.c	/^static struct page *get_mergeable_page(struct rmap_item *rmap_item)$/;"	f	file:
get_mm_exe_file	kernel/fork.c	/^struct file *get_mm_exe_file(struct mm_struct *mm)$/;"	f
get_mm_slot	mm/huge_memory.c	/^static struct mm_slot *get_mm_slot(struct mm_struct *mm)$/;"	f	file:
get_mm_slot	mm/ksm.c	/^static struct mm_slot *get_mm_slot(struct mm_struct *mm)$/;"	f	file:
get_mnt_ns	fs/mount.h	/^static inline void get_mnt_ns(struct mnt_namespace *ns)$/;"	f
get_modinfo	kernel/module.c	/^static char *get_modinfo(struct load_info *info, const char *tag)$/;"	f	file:
get_more_blocks	fs/direct-io.c	/^static int get_more_blocks(struct dio *dio, struct dio_submit *sdio,$/;"	f	file:
get_new_cssid	kernel/cgroup.c	/^static struct css_id *get_new_cssid(struct cgroup_subsys *ss, int depth)$/;"	f	file:
get_next_ino	fs/inode.c	/^EXPORT_SYMBOL(get_next_ino);$/;"	v
get_next_ino	fs/inode.c	/^unsigned int get_next_ino(void)$/;"	f
get_next_ra_size	mm/readahead.c	/^static unsigned long get_next_ra_size(struct file_ra_state *ra,$/;"	f	file:
get_next_rmap_item	mm/ksm.c	/^static struct rmap_item *get_next_rmap_item(struct mm_slot *mm_slot,$/;"	f	file:
get_next_timer_interrupt	kernel/timer.c	/^unsigned long get_next_timer_interrupt(unsigned long now)$/;"	f
get_next_work_item	fs/fs-writeback.c	/^get_next_work_item(struct backing_dev_info *bdi)$/;"	f	file:
get_node	mm/slub.c	/^static inline struct kmem_cache_node *get_node(struct kmem_cache *s, int node)$/;"	f	file:
get_nodes	mm/mempolicy.c	/^static int get_nodes(nodemask_t *nodes, const unsigned long __user *nmask,$/;"	f	file:
get_note_info_size	fs/binfmt_elf.c	/^static size_t get_note_info_size(struct elf_note_info *info)$/;"	f	file:
get_nr_dentry	fs/dcache.c	/^static int get_nr_dentry(void)$/;"	f	file:
get_nr_dirty_inodes	fs/inode.c	/^int get_nr_dirty_inodes(void)$/;"	f
get_nr_dirty_pages	fs/fs-writeback.c	/^static unsigned long get_nr_dirty_pages(void)$/;"	f	file:
get_nr_files	fs/file_table.c	/^static long get_nr_files(void)$/;"	f	file:
get_nr_inodes	fs/inode.c	/^static int get_nr_inodes(void)$/;"	f	file:
get_nr_inodes_unused	fs/inode.c	/^static inline int get_nr_inodes_unused(void)$/;"	f	file:
get_object	mm/kmemleak.c	/^static int get_object(struct kmemleak_object *object)$/;"	f	file:
get_offset	kernel/module.c	/^static long get_offset(struct module *mod, unsigned int *size,$/;"	f	file:
get_old_pmd	mm/mremap.c	/^static pmd_t *get_old_pmd(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
get_one_event	fs/notify/inotify/inotify_user.c	/^static struct fsnotify_event *get_one_event(struct fsnotify_group *group,$/;"	f	file:
get_online_cpus	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(get_online_cpus);$/;"	v
get_online_cpus	kernel/cpu.c	/^void get_online_cpus(void)$/;"	f
get_optimized_kprobe	kernel/kprobes.c	/^static struct kprobe *__kprobes get_optimized_kprobe(unsigned long addr)$/;"	f	file:
get_optinsn_slot	kernel/kprobes.c	/^kprobe_opcode_t __kprobes *get_optinsn_slot(void)$/;"	f
get_page_bootmem	mm/memory_hotplug.c	/^void get_page_bootmem(unsigned long info,  struct page *page,$/;"	f
get_page_foll	mm/internal.h	/^static inline void get_page_foll(struct page *page)$/;"	f
get_page_from_freelist	mm/page_alloc.c	/^get_page_from_freelist(gfp_t gfp_mask, nodemask_t *nodemask, unsigned int order,$/;"	f	file:
get_pageblock_bitmap	mm/page_alloc.c	/^static inline unsigned long *get_pageblock_bitmap(struct zone *zone,$/;"	f	file:
get_pageblock_flags_group	mm/page_alloc.c	/^unsigned long get_pageblock_flags_group(struct page *page,$/;"	f
get_partial	mm/slub.c	/^static void *get_partial(struct kmem_cache *s, gfp_t flags, int node,$/;"	f	file:
get_partial_node	mm/slub.c	/^static void *get_partial_node(struct kmem_cache *s, struct kmem_cache_node *n,$/;"	f	file:
get_peer_under_root	fs/pnode.c	/^static struct mount *get_peer_under_root(struct mount *mnt,$/;"	f	file:
get_pfn_range_for_nid	mm/page_alloc.c	/^void __meminit get_pfn_range_for_nid(unsigned int nid,$/;"	f
get_pid_task	kernel/pid.c	/^EXPORT_SYMBOL_GPL(get_pid_task);$/;"	v
get_pid_task	kernel/pid.c	/^struct task_struct *get_pid_task(struct pid *pid, enum pid_type type)$/;"	f
get_pipe_info	fs/pipe.c	/^struct pipe_inode_info *get_pipe_info(struct file *file)$/;"	f
get_pipe_inode	fs/pipe.c	/^static struct inode * get_pipe_inode(void)$/;"	f	file:
get_policy_nodemask	mm/mempolicy.c	/^static void get_policy_nodemask(struct mempolicy *p, nodemask_t *nodes)$/;"	f	file:
get_pwq	kernel/workqueue.c	/^static struct pool_workqueue *get_pwq(unsigned int cpu,$/;"	f	file:
get_sb_block	fs/ext3/super.c	/^static ext3_fsblk_t get_sb_block(void **data, struct super_block *sb)$/;"	f	file:
get_scan_count	mm/vmscan.c	/^static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,$/;"	f	file:
get_seccomp_filter	kernel/seccomp.c	/^void get_seccomp_filter(struct task_struct *tsk)$/;"	f
get_signal_to_deliver	kernel/signal.c	/^int get_signal_to_deliver(siginfo_t *info, struct k_sigaction *return_ka,$/;"	f
get_slab	mm/slub.c	/^static struct kmem_cache *get_slab(size_t size, gfp_t flags)$/;"	f	file:
get_slabinfo	mm/slab.c	/^void get_slabinfo(struct kmem_cache *cachep, struct slabinfo *sinfo)$/;"	f
get_slabinfo	mm/slub.c	/^void get_slabinfo(struct kmem_cache *s, struct slabinfo *sinfo)$/;"	f
get_softlockup_thresh	kernel/watchdog.c	/^static int get_softlockup_thresh(void)$/;"	f	file:
get_source	fs/pnode.c	/^static struct mount *get_source(struct mount *dest,$/;"	f	file:
get_std_worker_pool	kernel/workqueue.c	/^static struct worker_pool *get_std_worker_pool(int cpu, bool highpri)$/;"	f	file:
get_super	fs/super.c	/^EXPORT_SYMBOL(get_super);$/;"	v
get_super	fs/super.c	/^struct super_block *get_super(struct block_device *bdev)$/;"	f
get_super_thawed	fs/super.c	/^EXPORT_SYMBOL(get_super_thawed);$/;"	v
get_super_thawed	fs/super.c	/^struct super_block *get_super_thawed(struct block_device *bdev)$/;"	f
get_swap_bio	mm/page_io.c	/^static struct bio *get_swap_bio(gfp_t gfp_flags,$/;"	f	file:
get_swap_page	mm/swapfile.c	/^swp_entry_t get_swap_page(void)$/;"	f
get_swap_page_of_type	mm/swapfile.c	/^swp_entry_t get_swap_page_of_type(int type)$/;"	f
get_symbol_offset	kernel/kallsyms.c	/^static unsigned int get_symbol_offset(unsigned long pos)$/;"	f	file:
get_symbol_pos	kernel/kallsyms.c	/^static unsigned long get_symbol_pos(unsigned long addr,$/;"	f	file:
get_sysctl	kernel/sysctl_binary.c	/^static const struct bin_table *get_sysctl(const int *name, int nlen, char *path)$/;"	f	file:
get_taint	kernel/panic.c	/^unsigned long get_taint(void)$/;"	f
get_task_comm	fs/exec.c	/^EXPORT_SYMBOL_GPL(get_task_comm);$/;"	v
get_task_comm	fs/exec.c	/^char *get_task_comm(char *buf, struct task_struct *tsk)$/;"	f
get_task_cred	kernel/cred.c	/^const struct cred *get_task_cred(struct task_struct *task)$/;"	f
get_task_ioprio	fs/ioprio.c	/^static int get_task_ioprio(struct task_struct *p)$/;"	f	file:
get_task_mm	kernel/fork.c	/^EXPORT_SYMBOL_GPL(get_task_mm);$/;"	v
get_task_mm	kernel/fork.c	/^struct mm_struct *get_task_mm(struct task_struct *task)$/;"	f
get_task_pid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(get_task_pid);$/;"	v
get_task_pid	kernel/pid.c	/^struct pid *get_task_pid(struct task_struct *task, enum pid_type type)$/;"	f
get_task_policy	mm/mempolicy.c	/^static struct mempolicy *get_task_policy(struct task_struct *p)$/;"	f	file:
get_timestamp	kernel/watchdog.c	/^static unsigned long get_timestamp(void)$/;"	f	file:
get_tracepoint	kernel/tracepoint.c	/^static struct tracepoint_entry *get_tracepoint(const char *name)$/;"	f	file:
get_track	mm/slub.c	/^static struct track *get_track(struct kmem_cache *s, void *object,$/;"	f	file:
get_tree	kernel/audit_tree.c	/^static inline void get_tree(struct audit_tree *tree)$/;"	f	file:
get_u32	kernel/seccomp.c	/^static inline u32 get_u32(u64 data, int index)$/;"	f	file:
get_unmapped_area	mm/mmap.c	/^EXPORT_SYMBOL(get_unmapped_area);$/;"	v
get_unmapped_area	mm/mmap.c	/^get_unmapped_area(struct file *file, unsigned long addr, unsigned long len,$/;"	f
get_unused_fd_flags	fs/file.c	/^EXPORT_SYMBOL(get_unused_fd_flags);$/;"	v
get_unused_fd_flags	fs/file.c	/^int get_unused_fd_flags(unsigned flags)$/;"	f
get_usage_char	kernel/lockdep.c	/^static char get_usage_char(struct lock_class *class, enum lock_usage_bit bit)$/;"	f	file:
get_usage_chars	kernel/lockdep.c	/^void get_usage_chars(struct lock_class *class, char usage[LOCK_USAGE_CHARS])$/;"	f
get_user_arg_ptr	fs/exec.c	/^static const char __user *get_user_arg_ptr(struct user_arg_ptr argv, int nr)$/;"	f	file:
get_user_pages	mm/memory.c	/^EXPORT_SYMBOL(get_user_pages);$/;"	v
get_user_pages	mm/memory.c	/^long get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
get_user_pages	mm/nommu.c	/^EXPORT_SYMBOL(get_user_pages);$/;"	v
get_user_pages	mm/nommu.c	/^long get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
get_user_pages_fast	mm/util.c	/^EXPORT_SYMBOL_GPL(get_user_pages_fast);$/;"	v
get_user_pages_fast	mm/util.c	/^int __attribute__((weak)) get_user_pages_fast(unsigned long start,$/;"	f
get_uts	kernel/utsname_sysctl.c	/^static void *get_uts(ctl_table *table, int write)$/;"	f	file:
get_valid_node_allowed	mm/hugetlb.c	/^static int get_valid_node_allowed(int nid, nodemask_t *nodes_allowed)$/;"	f	file:
get_vfsmount_from_fd	fs/fhandle.c	/^static struct vfsmount *get_vfsmount_from_fd(int fd)$/;"	f	file:
get_vm_area	mm/vmalloc.c	/^struct vm_struct *get_vm_area(unsigned long size, unsigned long flags)$/;"	f
get_vm_area_caller	mm/vmalloc.c	/^struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,$/;"	f
get_vma_policy	mm/mempolicy.c	/^struct mempolicy *get_vma_policy(struct task_struct *task,$/;"	f
get_vma_private_data	mm/hugetlb.c	/^static unsigned long get_vma_private_data(struct vm_area_struct *vma)$/;"	f	file:
get_work_color	kernel/workqueue.c	/^static int get_work_color(struct work_struct *work)$/;"	f	file:
get_work_pool	kernel/workqueue.c	/^static struct worker_pool *get_work_pool(struct work_struct *work)$/;"	f	file:
get_work_pool_id	kernel/workqueue.c	/^static int get_work_pool_id(struct work_struct *work)$/;"	f	file:
get_work_pwq	kernel/workqueue.c	/^static struct pool_workqueue *get_work_pwq(struct work_struct *work)$/;"	f	file:
get_write_access	fs/namei.c	/^EXPORT_SYMBOL(get_write_access); \/* nfsd *\/$/;"	v
get_zeroed_page	mm/page_alloc.c	/^EXPORT_SYMBOL(get_zeroed_page);$/;"	v
get_zeroed_page	mm/page_alloc.c	/^unsigned long get_zeroed_page(gfp_t gfp_mask)$/;"	f
getdents_callback	fs/readdir.c	/^struct getdents_callback {$/;"	s	file:
getdents_callback64	fs/readdir.c	/^struct getdents_callback64 {$/;"	s	file:
getname	fs/namei.c	/^EXPORT_SYMBOL(getname);$/;"	v
getname	fs/namei.c	/^getname(const char __user * filename)$/;"	f
getname_flags	fs/namei.c	/^getname_flags(const char __user *filename, int flags, int *empty)$/;"	f	file:
getrusage	kernel/sys.c	/^int getrusage(struct task_struct *p, int who, struct rusage __user *ru)$/;"	f
getxattr	fs/xattr.c	/^getxattr(struct dentry *d, const char __user *name, void __user *value,$/;"	f	file:
gfp_kmemleak_mask	mm/kmemleak.c	117;"	d	file:
gfp_mask	kernel/audit.c	/^	gfp_t		     gfp_mask;$/;"	m	struct:audit_buffer	file:
gfp_mask	mm/vmscan.c	/^	gfp_t gfp_mask;$/;"	m	struct:scan_control	file:
gfp_pfmemalloc_allowed	mm/page_alloc.c	/^bool gfp_pfmemalloc_allowed(gfp_t gfp_mask)$/;"	f
gfp_to_alloc_flags	mm/page_alloc.c	/^gfp_to_alloc_flags(gfp_t gfp_mask)$/;"	f	file:
gid	fs/compat.c	/^	__compat_gid_t gid;$/;"	m	struct:compat_ncp_mount_data	file:
gid	fs/compat.c	/^	compat_ulong_t gid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
gid	kernel/auditsc.c	/^			kgid_t			gid;$/;"	m	struct:audit_context::__anon43::__anon45	file:
gid	kernel/auditsc.c	/^	kgid_t			gid;$/;"	m	struct:audit_names	file:
gid	kernel/auditsc.c	/^	kgid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
gid_m_show	kernel/user_namespace.c	/^static int gid_m_show(struct seq_file *seq, void *v)$/;"	f	file:
gid_m_start	kernel/user_namespace.c	/^static void *gid_m_start(struct seq_file *seq, loff_t *ppos)$/;"	f	file:
global_dirty_limit	mm/page-writeback.c	/^unsigned long global_dirty_limit;$/;"	v
global_dirty_limits	mm/page-writeback.c	/^void global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty)$/;"	f
global_dirtyable_memory	mm/page-writeback.c	/^static unsigned long global_dirtyable_memory(void)$/;"	f	file:
global_list	kernel/async.c	/^	struct list_head	global_list;$/;"	m	struct:async_entry	typeref:struct:async_entry::list_head	file:
global_reclaim	mm/vmscan.c	/^static bool global_reclaim(struct scan_control *sc)$/;"	f	file:
global_reclaimable_pages	mm/vmscan.c	/^unsigned long global_reclaimable_pages(void)$/;"	f
global_update_bandwidth	mm/page-writeback.c	/^static void global_update_bandwidth(unsigned long thresh,$/;"	f	file:
goal_in_my_reservation	fs/ext3/balloc.c	/^goal_in_my_reservation(struct ext3_reserve_window *rsv, ext3_grpblk_t grp_goal,$/;"	f	file:
goner	kernel/audit_tree.c	/^	int goner;$/;"	m	struct:audit_tree	file:
good_sigevent	kernel/posix-timers.c	/^static struct pid *good_sigevent(sigevent_t * event)$/;"	f	file:
gp_flags	kernel/rcutree.h	/^	int gp_flags;				\/* Commands for GP task. *\/$/;"	m	struct:rcu_state
gp_kthread	kernel/rcutree.h	/^	struct task_struct *gp_kthread;		\/* Task for grace periods. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::task_struct
gp_max	kernel/rcutree.h	/^	unsigned long gp_max;			\/* Maximum GP duration in *\/$/;"	m	struct:rcu_state
gp_start	kernel/rcutree.h	/^	unsigned long gp_start;			\/* Time at which GP started, *\/$/;"	m	struct:rcu_state
gp_tasks	kernel/rcutiny_plugin.h	/^	struct list_head *gp_tasks;$/;"	m	struct:rcu_preempt_ctrlblk	typeref:struct:rcu_preempt_ctrlblk::list_head
gp_tasks	kernel/rcutree.h	/^	struct list_head *gp_tasks;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::list_head
gp_wq	kernel/rcutree.h	/^	wait_queue_head_t gp_wq;		\/* Where GP task waits. *\/$/;"	m	struct:rcu_state
gpcpu	kernel/rcutiny_plugin.h	/^	u8 gpcpu;		\/* Last grace period blocked by the CPU. *\/$/;"	m	struct:rcu_preempt_ctrlblk
gplok	kernel/module.c	/^	bool gplok;$/;"	m	struct:find_symbol_arg	file:
gpnum	kernel/rcutiny_plugin.h	/^	u8 gpnum;		\/* Current grace period. *\/$/;"	m	struct:rcu_preempt_ctrlblk
gpnum	kernel/rcutree.h	/^	unsigned long	gpnum;		\/* Highest gp number that this CPU *\/$/;"	m	struct:rcu_data
gpnum	kernel/rcutree.h	/^	unsigned long gpnum;			\/* Current gp number. *\/$/;"	m	struct:rcu_state
gpnum	kernel/rcutree.h	/^	unsigned long gpnum;	\/* Current grace period for this node. *\/$/;"	m	struct:rcu_node
grab_cache_page	include/linux/pagemap.h	/^static inline struct page *grab_cache_page(struct address_space *mapping,$/;"	f
grab_cache_page_nowait	mm/filemap.c	/^EXPORT_SYMBOL(grab_cache_page_nowait);$/;"	v
grab_cache_page_nowait	mm/filemap.c	/^grab_cache_page_nowait(struct address_space *mapping, pgoff_t index)$/;"	f
grab_cache_page_write_begin	mm/filemap.c	/^EXPORT_SYMBOL(grab_cache_page_write_begin);$/;"	v
grab_cache_page_write_begin	mm/filemap.c	/^struct page *grab_cache_page_write_begin(struct address_space *mapping,$/;"	f
grab_super_passive	fs/super.c	/^bool grab_super_passive(struct super_block *sb)$/;"	f
graft_tree	fs/namespace.c	/^static int graft_tree(struct mount *mnt, struct path *path)$/;"	f	file:
graph_lock	kernel/lockdep.c	/^static int graph_lock(void)$/;"	f	file:
graph_unlock	kernel/lockdep.c	/^static inline int graph_unlock(void)$/;"	f	file:
gray_list	mm/kmemleak.c	/^	struct list_head gray_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::list_head	file:
group	fs/ext3/ext3.h	/^	__u32 group;            \/* Group number for this data *\/$/;"	m	struct:ext3_new_group_input
group	fs/ext3/ext3.h	/^	__u32 group;$/;"	m	struct:ext3_new_group_data
group_send_sig_info	kernel/signal.c	/^int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)$/;"	f
groups16_from_user	kernel/uid16.c	/^static int groups16_from_user(struct group_info *group_info,$/;"	f	file:
groups16_to_user	kernel/uid16.c	/^static int groups16_to_user(old_gid_t __user *grouplist,$/;"	f	file:
groups_alloc	kernel/groups.c	/^EXPORT_SYMBOL(groups_alloc);$/;"	v
groups_alloc	kernel/groups.c	/^struct group_info *groups_alloc(int gidsetsize)$/;"	f
groups_free	kernel/groups.c	/^EXPORT_SYMBOL(groups_free);$/;"	v
groups_free	kernel/groups.c	/^void groups_free(struct group_info *group_info)$/;"	f
groups_from_user	kernel/groups.c	/^static int groups_from_user(struct group_info *group_info,$/;"	f	file:
groups_search	kernel/groups.c	/^int groups_search(const struct group_info *group_info, kgid_t grp)$/;"	f
groups_sort	kernel/groups.c	/^static void groups_sort(struct group_info *group_info)$/;"	f	file:
groups_to_user	kernel/groups.c	/^static int groups_to_user(gid_t __user *grouplist,$/;"	f	file:
grow_buffers	fs/buffer.c	/^grow_buffers(struct block_device *bdev, sector_t block, int size)$/;"	f	file:
grow_dev_page	fs/buffer.c	/^grow_dev_page(struct block_device *bdev, sector_t block,$/;"	f	file:
grow_pgdat_span	mm/memory_hotplug.c	/^static void grow_pgdat_span(struct pglist_data *pgdat, unsigned long start_pfn,$/;"	f	file:
grow_tree_refs	kernel/auditsc.c	/^static int grow_tree_refs(struct audit_context *ctx)$/;"	f	file:
grow_zone_span	mm/memory_hotplug.c	/^static void grow_zone_span(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
grp	kernel/module.c	/^	struct attribute_group grp;$/;"	m	struct:module_sect_attrs	typeref:struct:module_sect_attrs::attribute_group	file:
grp	kernel/params.c	/^	struct attribute_group grp;$/;"	m	struct:module_param_attrs	typeref:struct:module_param_attrs::attribute_group	file:
grphi	kernel/rcutree.h	/^	int	grphi;		\/* highest-numbered CPU or group here. *\/$/;"	m	struct:rcu_node
grplo	kernel/rcutree.h	/^	int	grplo;		\/* lowest-numbered CPU or group here. *\/$/;"	m	struct:rcu_node
grpmask	kernel/rcutree.h	/^	unsigned long grpmask;		\/* Mask to apply to leaf qsmask. *\/$/;"	m	struct:rcu_data
grpmask	kernel/rcutree.h	/^	unsigned long grpmask;	\/* Mask to apply to parent qsmask. *\/$/;"	m	struct:rcu_node
grpnum	kernel/rcutree.h	/^	u8	grpnum;		\/* CPU\/group number for next level up. *\/$/;"	m	struct:rcu_node
guarantee_online_cpus	kernel/cpuset.c	/^static void guarantee_online_cpus(const struct cpuset *cs,$/;"	f	file:
guarantee_online_mems	kernel/cpuset.c	/^static void guarantee_online_mems(const struct cpuset *cs, nodemask_t *pmask)$/;"	f	file:
guard_bh_eod	fs/buffer.c	/^static void guard_bh_eod(int rw, struct bio *bio, struct buffer_head *bh)$/;"	f	file:
guest_enter	kernel/context_tracking.c	/^EXPORT_SYMBOL_GPL(guest_enter);$/;"	v
guest_enter	kernel/context_tracking.c	/^void guest_enter(void)$/;"	f
guest_exit	kernel/context_tracking.c	/^EXPORT_SYMBOL_GPL(guest_exit);$/;"	v
guest_exit	kernel/context_tracking.c	/^void guest_exit(void)$/;"	f
h_blocks	fs/ext3/xattr.h	/^	__le32	h_blocks;	\/* number of disk blocks used *\/$/;"	m	struct:ext3_xattr_header
h_hash	fs/ext3/xattr.h	/^	__le32	h_hash;		\/* hash value of all attributes *\/$/;"	m	struct:ext3_xattr_header
h_i_author	fs/ext3/ext3.h	/^			__u32	h_i_author;$/;"	m	struct:ext3_inode::__anon35::__anon37
h_i_frag	fs/ext3/ext3.h	/^			__u8	h_i_frag;	\/* Fragment number *\/$/;"	m	struct:ext3_inode::__anon35::__anon37
h_i_fsize	fs/ext3/ext3.h	/^			__u8	h_i_fsize;	\/* Fragment size *\/$/;"	m	struct:ext3_inode::__anon35::__anon37
h_i_gid_high	fs/ext3/ext3.h	/^			__u16	h_i_gid_high;$/;"	m	struct:ext3_inode::__anon35::__anon37
h_i_mode_high	fs/ext3/ext3.h	/^			__u16	h_i_mode_high;$/;"	m	struct:ext3_inode::__anon35::__anon37
h_i_translator	fs/ext3/ext3.h	/^			__u32  h_i_translator;$/;"	m	struct:ext3_inode::__anon31::__anon33
h_i_uid_high	fs/ext3/ext3.h	/^			__u16	h_i_uid_high;$/;"	m	struct:ext3_inode::__anon35::__anon37
h_magic	fs/ext3/xattr.h	/^	__le32	h_magic;	\/* magic number for identification *\/$/;"	m	struct:ext3_xattr_header
h_magic	fs/ext3/xattr.h	/^	__le32	h_magic;	\/* magic number for identification *\/$/;"	m	struct:ext3_xattr_ibody_header
h_refcount	fs/ext3/xattr.h	/^	__le32	h_refcount;	\/* reference count *\/$/;"	m	struct:ext3_xattr_header
h_reserved	fs/ext3/xattr.h	/^	__u32	h_reserved[4];	\/* zero right now *\/$/;"	m	struct:ext3_xattr_header
handle_dots	fs/namei.c	/^static inline int handle_dots(struct nameidata *nd, int type)$/;"	f	file:
handle_early_requeue_pi_wakeup	kernel/futex.c	/^int handle_early_requeue_pi_wakeup(struct futex_hash_bucket *hb,$/;"	f	file:
handle_futex_death	kernel/futex.c	/^int handle_futex_death(u32 __user *uaddr, struct task_struct *curr, int pi)$/;"	f
handle_mm_fault	mm/memory.c	/^int handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
handle_one	kernel/auditsc.c	/^static inline void handle_one(const struct inode *inode)$/;"	f	file:
handle_op	kernel/rtmutex-tester.c	/^static int handle_op(struct test_thread_data *td, int lockwakeup)$/;"	f	file:
handle_path	kernel/auditsc.c	/^static void handle_path(const struct dentry *dentry)$/;"	f	file:
handle_pte_fault	mm/memory.c	/^int handle_pte_fault(struct mm_struct *mm,$/;"	f
handle_slab	mm/slab.c	/^static void handle_slab(unsigned long *n, struct kmem_cache *c, struct slab *s)$/;"	f	file:
handle_to_path	fs/fhandle.c	/^static int handle_to_path(int mountdirfd, struct file_handle __user *ufh,$/;"	f	file:
handle_truncate	fs/namei.c	/^static int handle_truncate(struct file *filp)$/;"	f	file:
handle_write_error	mm/vmscan.c	/^static void handle_write_error(struct address_space *mapping,$/;"	f	file:
handler_errors	kernel/test_kprobes.c	/^static int errors, handler_errors, num_tests;$/;"	v	file:
hard_dirty_limit	mm/page-writeback.c	/^static unsigned long hard_dirty_limit(unsigned long thresh)$/;"	f	file:
hardirqs_off_events	kernel/lockdep_internals.h	/^	int	hardirqs_off_events;$/;"	m	struct:lockdep_stats
hardirqs_on_events	kernel/lockdep_internals.h	/^	int	hardirqs_on_events;$/;"	m	struct:lockdep_stats
hardlockup_panic	kernel/watchdog.c	/^static int hardlockup_panic =$/;"	v	file:
hardlockup_panic_setup	kernel/watchdog.c	/^static int __init hardlockup_panic_setup(char *str)$/;"	f	file:
has_bh_in_lru	fs/buffer.c	/^static bool has_bh_in_lru(int cpu, void *dummy)$/;"	f	file:
has_capability	kernel/capability.c	/^bool has_capability(struct task_struct *t, int cap)$/;"	f
has_capability_noaudit	kernel/capability.c	/^bool has_capability_noaudit(struct task_struct *t, int cap)$/;"	f
has_cpu_slab	mm/slub.c	/^static bool has_cpu_slab(int cpu, void *info)$/;"	f	file:
has_intersects_mems_allowed	mm/oom_kill.c	/^static bool has_intersects_mems_allowed(struct task_struct *tsk,$/;"	f	file:
has_ns_capability	kernel/capability.c	/^bool has_ns_capability(struct task_struct *t,$/;"	f
has_ns_capability_noaudit	kernel/capability.c	/^bool has_ns_capability_noaudit(struct task_struct *t,$/;"	f
has_pending_signals	kernel/signal.c	/^static inline int has_pending_signals(sigset_t *signal, sigset_t *blocked)$/;"	f	file:
has_perm	kernel/auditsc.c	/^			int			has_perm;$/;"	m	struct:audit_context::__anon43::__anon45	file:
has_stopped_jobs	kernel/exit.c	/^static bool has_stopped_jobs(struct pid *pgrp)$/;"	f	file:
has_unmovable_pages	mm/page_alloc.c	/^bool has_unmovable_pages(struct zone *zone, struct page *page, int count,$/;"	f
hash	fs/block_dev.c	/^static inline unsigned long hash(dev_t dev)$/;"	f	file:
hash	fs/ext3/dir.c	/^	__u32		hash;$/;"	m	struct:fname	file:
hash	fs/ext3/ext3.h	/^	u32		hash;$/;"	m	struct:dx_hash_info
hash	fs/ext3/namei.c	/^	__le32 hash;$/;"	m	struct:dx_entry	file:
hash	fs/ext3/namei.c	/^	u32 hash;$/;"	m	struct:dx_map_entry	file:
hash	fs/inode.c	/^static unsigned long hash(struct super_block *sb, unsigned long hashval)$/;"	f	file:
hash	fs/namespace.c	/^static inline unsigned long hash(struct vfsmount *mnt, struct dentry *dentry)$/;"	f	file:
hash	kernel/audit_tree.c	/^	struct list_head hash;$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::list_head	file:
hash	kernel/module_signing.c	/^	u8	hash;		\/* Digest algorithm [enum pkey_hash_algo] *\/$/;"	m	struct:module_signature	file:
hash	mm/huge_memory.c	/^	struct hlist_node hash;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::hlist_node	file:
hash2pos	fs/ext3/dir.c	/^static inline loff_t hash2pos(struct file *filp, __u32 major, __u32 minor)$/;"	f	file:
hash_dcookie	fs/dcookies.c	/^static void hash_dcookie(struct dcookie_struct * dcs)$/;"	f	file:
hash_futex	kernel/futex.c	/^static struct futex_hash_bucket *hash_futex(union futex_key *key)$/;"	f	file:
hash_list	fs/dcookies.c	/^	struct list_head hash_list;$/;"	m	struct:dcookie_struct	typeref:struct:dcookie_struct::list_head	file:
hash_name	fs/namei.c	/^static inline unsigned long hash_name(const char *name, unsigned int *hashp)$/;"	f	file:
hash_version	fs/ext3/ext3.h	/^	int		hash_version;$/;"	m	struct:dx_hash_info
hash_version	fs/ext3/namei.c	/^		u8 hash_version;$/;"	m	struct:dx_root::dx_root_info	file:
hashdist	mm/page_alloc.c	/^int hashdist = HASHDIST_DEFAULT;$/;"	v
have_callable_console	kernel/printk.c	/^static int have_callable_console(void)$/;"	f	file:
have_rcu_kthread_work	kernel/rcutiny_plugin.h	/^static unsigned long have_rcu_kthread_work;$/;"	v
have_rcu_nocb_mask	kernel/rcutree_plugin.h	/^static bool have_rcu_nocb_mask;	    \/* Was rcu_nocb_mask allocated? *\/$/;"	v
have_submounts	fs/dcache.c	/^EXPORT_SYMBOL(have_submounts);$/;"	v
have_submounts	fs/dcache.c	/^int have_submounts(struct dentry *parent)$/;"	f
hcpu	kernel/cpu.c	/^	void *hcpu;$/;"	m	struct:take_cpu_down_param	file:
hdr	kernel/module.c	/^	Elf_Ehdr *hdr;$/;"	m	struct:load_info	file:
head	fs/aio.c	/^	struct list_head head;$/;"	m	struct:kiocb_batch	typeref:struct:kiocb_batch::list_head	file:
head	fs/direct-io.c	/^	unsigned head;			\/* next page to process *\/$/;"	m	struct:dio_submit	file:
head	kernel/audit_tree.c	/^	struct rcu_head head;$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::rcu_head	file:
head	kernel/audit_tree.c	/^	struct rcu_head head;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::rcu_head	file:
head	kernel/rcupdate.c	/^	struct rcu_head head;$/;"	m	struct:rcu_synchronize	typeref:struct:rcu_synchronize::rcu_head	file:
head	kernel/softirq.c	/^	struct tasklet_struct *head;$/;"	m	struct:tasklet_head	typeref:struct:tasklet_head::tasklet_struct	file:
head	kernel/srcu.c	/^	struct rcu_head head;$/;"	m	struct:rcu_synchronize	typeref:struct:rcu_synchronize::rcu_head	file:
head	mm/ksm.c	/^			struct list_head *head;$/;"	m	struct:stable_node::__anon4::__anon5	typeref:struct:stable_node::__anon4::__anon5::list_head	file:
head	mm/ksm.c	/^			struct stable_node *head;$/;"	m	struct:rmap_item::__anon7::__anon8	typeref:struct:rmap_item::__anon7::__anon8::stable_node	file:
head	mm/memory-failure.c	752;"	d	file:
head	mm/memory-failure.c	809;"	d	file:
head	mm/slab.c	/^	struct rcu_head head;$/;"	m	struct:slab_rcu	typeref:struct:slab_rcu::rcu_head	file:
head	mm/slob.c	/^	struct rcu_head head;$/;"	m	struct:slob_rcu	typeref:struct:slob_rcu::rcu_head	file:
header	fs/ext3/xattr.c	685;"	d	file:
header	fs/ext3/xattr.c	865;"	d	file:
header	mm/kmemleak-test.c	/^	long header[25];$/;"	m	struct:test_node	file:
heap_stack_gap	mm/nommu.c	/^int heap_stack_gap = 0;$/;"	v
height	lib/radix-tree.c	/^	unsigned int	height;		\/* Height from the bottom *\/$/;"	m	struct:radix_tree_node	file:
helper_lock	kernel/kmod.c	/^static void helper_lock(void)$/;"	f	file:
helper_unlock	kernel/kmod.c	/^static void helper_unlock(void)$/;"	f	file:
hentry	kernel/workqueue_internal.h	/^		struct hlist_node	hentry;	\/* L: while busy *\/$/;"	m	union:worker::__anon67	typeref:struct:worker::__anon67::hlist_node
here	fs/ext3/xattr.c	/^	struct ext3_xattr_entry *here;$/;"	m	struct:ext3_xattr_search	typeref:struct:ext3_xattr_search::ext3_xattr_entry	file:
hex_dump_object	mm/kmemleak.c	/^static void hex_dump_object(struct seq_file *seq,$/;"	f	file:
hibernation_mode	mm/vmscan.c	/^	unsigned long hibernation_mode;$/;"	m	struct:scan_control	file:
hierarchy_id	kernel/cgroup.c	/^	int hierarchy_id;$/;"	m	struct:cgroupfs_root	file:
high_memory	mm/memory.c	/^EXPORT_SYMBOL(high_memory);$/;"	v
high_memory	mm/memory.c	/^void * high_memory;$/;"	v
high_memory	mm/nommu.c	/^void *high_memory;$/;"	v
highest_memmap_pfn	mm/nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
highest_priority_index	mm/swapfile.c	/^static atomic_t highest_priority_index = ATOMIC_INIT(-1);$/;"	v	file:
highmem_dirtyable_memory	mm/page-writeback.c	/^static unsigned long highmem_dirtyable_memory(unsigned long total)$/;"	f	file:
hits	kernel/profile.c	/^	u32 pc, hits;$/;"	m	struct:profile_hit	file:
hlist	kernel/tracepoint.c	/^	struct hlist_node hlist;$/;"	m	struct:tracepoint_entry	typeref:struct:tracepoint_entry::hlist_node	file:
hlist	mm/ksm.c	/^			struct hlist_node hlist;$/;"	m	struct:rmap_item::__anon7::__anon8	typeref:struct:rmap_item::__anon7::__anon8::hlist_node	file:
hlist	mm/ksm.c	/^	struct hlist_head hlist;$/;"	m	struct:stable_node	typeref:struct:stable_node::hlist_head	file:
hlist_add_after	include/linux/list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	include/linux/list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_fake	include/linux/list.h	/^static inline void hlist_add_fake(struct hlist_node *n)$/;"	f
hlist_add_head	include/linux/list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	include/linux/list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	include/linux/list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	include/linux/list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	include/linux/list.h	660;"	d
hlist_entry_safe	include/linux/list.h	669;"	d
hlist_for_each	include/linux/list.h	662;"	d
hlist_for_each_entry	include/linux/list.h	680;"	d
hlist_for_each_entry_continue	include/linux/list.h	690;"	d
hlist_for_each_entry_from	include/linux/list.h	700;"	d
hlist_for_each_entry_safe	include/linux/list.h	711;"	d
hlist_for_each_safe	include/linux/list.h	665;"	d
hlist_move_list	include/linux/list.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_unhashed	include/linux/list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
hlock_class	kernel/lockdep.c	/^static inline struct lock_class *hlock_class(struct held_lock *hlock)$/;"	f	file:
host_addr	fs/compat.c	/^	compat_uptr_t host_addr;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
host_addrlen	fs/compat.c	/^	compat_uint_t host_addrlen;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
host_status	fs/compat_ioctl.c	/^	unsigned short host_status;	\/* [o] errors from host adapter *\/$/;"	m	struct:sg_io_hdr32	file:
hostname	fs/compat.c	/^	struct compat_nfs_string hostname;$/;"	m	struct:compat_nfs4_mount_data_v1	typeref:struct:compat_nfs4_mount_data_v1::compat_nfs_string	file:
hotadd_new_pgdat	mm/memory_hotplug.c	/^static pg_data_t __ref *hotadd_new_pgdat(int nid, u64 start)$/;"	f	file:
hotplug_cfd	kernel/smp.c	/^hotplug_cfd(struct notifier_block *nfb, unsigned long action, void *hcpu)$/;"	f	file:
hotplug_cfd_notifier	kernel/smp.c	/^static struct notifier_block __cpuinitdata hotplug_cfd_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
hotplug_work	kernel/cpuset.c	/^	struct work_struct hotplug_work;$/;"	m	struct:cpuset	typeref:struct:cpuset::work_struct	file:
hrtimer_cancel	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_cancel);$/;"	v
hrtimer_cancel	kernel/hrtimer.c	/^int hrtimer_cancel(struct hrtimer *timer)$/;"	f
hrtimer_check_target	kernel/hrtimer.c	/^hrtimer_check_target(struct hrtimer *timer, struct hrtimer_clock_base *new_base)$/;"	f	file:
hrtimer_clock_to_base_table	kernel/hrtimer.c	/^static const int hrtimer_clock_to_base_table[MAX_CLOCKS] = {$/;"	v	file:
hrtimer_clockid_to_base	kernel/hrtimer.c	/^static inline int hrtimer_clockid_to_base(clockid_t clock_id)$/;"	f	file:
hrtimer_cpu_notify	kernel/hrtimer.c	/^static int __cpuinit hrtimer_cpu_notify(struct notifier_block *self,$/;"	f	file:
hrtimer_debug_descr	kernel/hrtimer.c	/^static struct debug_obj_descr hrtimer_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr	file:
hrtimer_debug_descr	kernel/hrtimer.c	/^static struct debug_obj_descr hrtimer_debug_descr;$/;"	v	typeref:struct:debug_obj_descr	file:
hrtimer_debug_hint	kernel/hrtimer.c	/^static void *hrtimer_debug_hint(void *addr)$/;"	f	file:
hrtimer_enqueue_reprogram	kernel/hrtimer.c	/^static inline int hrtimer_enqueue_reprogram(struct hrtimer *timer,$/;"	f	file:
hrtimer_fixup_activate	kernel/hrtimer.c	/^static int hrtimer_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
hrtimer_fixup_free	kernel/hrtimer.c	/^static int hrtimer_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
hrtimer_fixup_init	kernel/hrtimer.c	/^static int hrtimer_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
hrtimer_force_reprogram	kernel/hrtimer.c	/^hrtimer_force_reprogram(struct hrtimer_cpu_base *base, int skip_equal) { }$/;"	f	file:
hrtimer_force_reprogram	kernel/hrtimer.c	/^hrtimer_force_reprogram(struct hrtimer_cpu_base *cpu_base, int skip_equal)$/;"	f	file:
hrtimer_forward	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_forward);$/;"	v
hrtimer_forward	kernel/hrtimer.c	/^u64 hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval)$/;"	f
hrtimer_get_next_event	kernel/hrtimer.c	/^ktime_t hrtimer_get_next_event(void)$/;"	f
hrtimer_get_remaining	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_get_remaining);$/;"	v
hrtimer_get_remaining	kernel/hrtimer.c	/^ktime_t hrtimer_get_remaining(const struct hrtimer *timer)$/;"	f
hrtimer_get_res	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_get_res);$/;"	v
hrtimer_get_res	kernel/hrtimer.c	/^int hrtimer_get_res(const clockid_t which_clock, struct timespec *tp)$/;"	f
hrtimer_get_softirq_time	kernel/hrtimer.c	/^static void hrtimer_get_softirq_time(struct hrtimer_cpu_base *base)$/;"	f	file:
hrtimer_get_target	kernel/hrtimer.c	/^static int hrtimer_get_target(int this_cpu, int pinned)$/;"	f	file:
hrtimer_hres_active	kernel/hrtimer.c	/^static inline int hrtimer_hres_active(void) { return 0; }$/;"	f	file:
hrtimer_hres_active	kernel/hrtimer.c	/^static inline int hrtimer_hres_active(void)$/;"	f	file:
hrtimer_init	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_init);$/;"	v
hrtimer_init	kernel/hrtimer.c	/^void hrtimer_init(struct hrtimer *timer, clockid_t clock_id,$/;"	f
hrtimer_init_hres	kernel/hrtimer.c	/^static inline void hrtimer_init_hres(struct hrtimer_cpu_base *base) { }$/;"	f	file:
hrtimer_init_hres	kernel/hrtimer.c	/^static inline void hrtimer_init_hres(struct hrtimer_cpu_base *base)$/;"	f	file:
hrtimer_init_on_stack	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_init_on_stack);$/;"	v
hrtimer_init_on_stack	kernel/hrtimer.c	/^void hrtimer_init_on_stack(struct hrtimer *timer, clockid_t clock_id,$/;"	f
hrtimer_init_sleeper	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_init_sleeper);$/;"	v
hrtimer_init_sleeper	kernel/hrtimer.c	/^void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, struct task_struct *task)$/;"	f
hrtimer_interrupt	kernel/hrtimer.c	/^void hrtimer_interrupt(struct clock_event_device *dev)$/;"	f
hrtimer_is_hres_enabled	kernel/hrtimer.c	/^static inline int hrtimer_is_hres_enabled(void) { return 0; }$/;"	f	file:
hrtimer_is_hres_enabled	kernel/hrtimer.c	/^static inline int hrtimer_is_hres_enabled(void)$/;"	f	file:
hrtimer_nanosleep	kernel/hrtimer.c	/^long hrtimer_nanosleep(struct timespec *rqtp, struct timespec __user *rmtp,$/;"	f
hrtimer_nanosleep_restart	kernel/hrtimer.c	/^long __sched hrtimer_nanosleep_restart(struct restart_block *restart)$/;"	f
hrtimer_peek_ahead_timers	kernel/hrtimer.c	/^void hrtimer_peek_ahead_timers(void)$/;"	f
hrtimer_reprogram	kernel/hrtimer.c	/^static int hrtimer_reprogram(struct hrtimer *timer,$/;"	f	file:
hrtimer_run_pending	kernel/hrtimer.c	/^void hrtimer_run_pending(void)$/;"	f
hrtimer_run_queues	kernel/hrtimer.c	/^void hrtimer_run_queues(void)$/;"	f
hrtimer_start	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_start);$/;"	v
hrtimer_start	kernel/hrtimer.c	/^hrtimer_start(struct hrtimer *timer, ktime_t tim, const enum hrtimer_mode mode)$/;"	f
hrtimer_start_range_ns	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_start_range_ns);$/;"	v
hrtimer_start_range_ns	kernel/hrtimer.c	/^int hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,$/;"	f
hrtimer_switch_to_hres	kernel/hrtimer.c	/^static inline int hrtimer_switch_to_hres(void) { return 0; }$/;"	f	file:
hrtimer_switch_to_hres	kernel/hrtimer.c	/^static int hrtimer_switch_to_hres(void)$/;"	f	file:
hrtimer_try_to_cancel	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_try_to_cancel);$/;"	v
hrtimer_try_to_cancel	kernel/hrtimer.c	/^int hrtimer_try_to_cancel(struct hrtimer *timer)$/;"	f
hrtimer_update_base	kernel/hrtimer.c	/^static inline ktime_t hrtimer_update_base(struct hrtimer_cpu_base *base)$/;"	f	file:
hrtimer_wakeup	kernel/hrtimer.c	/^static enum hrtimer_restart hrtimer_wakeup(struct hrtimer *timer)$/;"	f	file:
hrtimers_init	kernel/hrtimer.c	/^void __init hrtimers_init(void)$/;"	f
hrtimers_nb	kernel/hrtimer.c	/^static struct notifier_block __cpuinitdata hrtimers_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
hrtimers_resume	kernel/hrtimer.c	/^void hrtimers_resume(void)$/;"	f
hstate_attr_group	mm/hugetlb.c	/^static struct attribute_group hstate_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
hstate_attrs	mm/hugetlb.c	/^static struct attribute *hstate_attrs[] = {$/;"	v	typeref:struct:attribute	file:
hstate_kobjs	mm/hugetlb.c	/^	struct kobject		*hstate_kobjs[HUGE_MAX_HSTATE];$/;"	m	struct:node_hstate	typeref:struct:node_hstate::kobject	file:
hstate_kobjs	mm/hugetlb.c	/^static struct kobject *hstate_kobjs[HUGE_MAX_HSTATE];$/;"	v	typeref:struct:kobject	file:
hstate_next_node_to_alloc	mm/hugetlb.c	/^static int hstate_next_node_to_alloc(struct hstate *h,$/;"	f	file:
hstate_next_node_to_free	mm/hugetlb.c	/^static int hstate_next_node_to_free(struct hstate *h, nodemask_t *nodes_allowed)$/;"	f	file:
hstates	mm/hugetlb.c	/^struct hstate hstates[HUGE_MAX_HSTATE];$/;"	v	typeref:struct:hstate
ht	kernel/smpboot.c	/^	struct smp_hotplug_thread	*ht;$/;"	m	struct:smpboot_thread_data	typeref:struct:smpboot_thread_data::smp_hotplug_thread	file:
htlb_alloc_mask	mm/hugetlb.c	/^static gfp_t htlb_alloc_mask = GFP_HIGHUSER;$/;"	v	file:
htree_dirblock_to_tree	fs/ext3/namei.c	/^static int htree_dirblock_to_tree(struct file *dir_file,$/;"	f	file:
hub6	fs/compat_ioctl.c	/^        compat_int_t    hub6;$/;"	m	struct:serial_struct32	file:
huge_pmd_set_accessed	mm/huge_memory.c	/^void huge_pmd_set_accessed(struct mm_struct *mm,$/;"	f
huge_zero_page_shrinker	mm/huge_memory.c	/^static struct shrinker huge_zero_page_shrinker = {$/;"	v	typeref:struct:shrinker	file:
huge_zero_refcount	mm/huge_memory.c	/^static atomic_t huge_zero_refcount;$/;"	v	file:
huge_zonelist	mm/mempolicy.c	/^struct zonelist *huge_zonelist(struct vm_area_struct *vma, unsigned long addr,$/;"	f
hugepage	mm/hugetlb_cgroup.c	/^	struct res_counter hugepage[HUGE_MAX_HSTATE];$/;"	m	struct:hugetlb_cgroup	typeref:struct:hugetlb_cgroup::res_counter	file:
hugepage_add_anon_rmap	mm/rmap.c	/^void hugepage_add_anon_rmap(struct page *page,$/;"	f
hugepage_add_new_anon_rmap	mm/rmap.c	/^void hugepage_add_new_anon_rmap(struct page *page,$/;"	f
hugepage_attr	mm/huge_memory.c	/^static struct attribute *hugepage_attr[] = {$/;"	v	typeref:struct:attribute	file:
hugepage_attr_group	mm/huge_memory.c	/^static struct attribute_group hugepage_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
hugepage_exit_sysfs	mm/huge_memory.c	/^static inline void hugepage_exit_sysfs(struct kobject *hugepage_kobj)$/;"	f	file:
hugepage_exit_sysfs	mm/huge_memory.c	/^static void __init hugepage_exit_sysfs(struct kobject *hugepage_kobj)$/;"	f	file:
hugepage_init	mm/huge_memory.c	/^static int __init hugepage_init(void)$/;"	f	file:
hugepage_init_sysfs	mm/huge_memory.c	/^static inline int hugepage_init_sysfs(struct kobject **hugepage_kobj)$/;"	f	file:
hugepage_init_sysfs	mm/huge_memory.c	/^static int __init hugepage_init_sysfs(struct kobject **hugepage_kobj)$/;"	f	file:
hugepage_madvise	mm/huge_memory.c	/^int hugepage_madvise(struct vm_area_struct *vma,$/;"	f
hugepage_new_subpool	mm/hugetlb.c	/^struct hugepage_subpool *hugepage_new_subpool(long nr_blocks)$/;"	f
hugepage_put_subpool	mm/hugetlb.c	/^void hugepage_put_subpool(struct hugepage_subpool *spool)$/;"	f
hugepage_subpool_get_pages	mm/hugetlb.c	/^static int hugepage_subpool_get_pages(struct hugepage_subpool *spool,$/;"	f	file:
hugepage_subpool_put_pages	mm/hugetlb.c	/^static void hugepage_subpool_put_pages(struct hugepage_subpool *spool,$/;"	f	file:
hugepage_vma_check	mm/huge_memory.c	/^static bool hugepage_vma_check(struct vm_area_struct *vma)$/;"	f	file:
hugepages_kobj	mm/hugetlb.c	/^	struct kobject		*hugepages_kobj;$/;"	m	struct:node_hstate	typeref:struct:node_hstate::kobject	file:
hugepages_kobj	mm/hugetlb.c	/^static struct kobject *hugepages_kobj;$/;"	v	typeref:struct:kobject	file:
hugepages_treat_as_movable	mm/hugetlb.c	/^unsigned long hugepages_treat_as_movable;$/;"	v
hugetlb_acct_memory	mm/hugetlb.c	/^static int hugetlb_acct_memory(struct hstate *h, long delta)$/;"	f	file:
hugetlb_add_hstate	mm/hugetlb.c	/^void __init hugetlb_add_hstate(unsigned order)$/;"	f
hugetlb_cgroup	mm/hugetlb_cgroup.c	/^struct hugetlb_cgroup {$/;"	s	file:
hugetlb_cgroup_charge_cgroup	mm/hugetlb_cgroup.c	/^int hugetlb_cgroup_charge_cgroup(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_commit_charge	mm/hugetlb_cgroup.c	/^void hugetlb_cgroup_commit_charge(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_css_alloc	mm/hugetlb_cgroup.c	/^static struct cgroup_subsys_state *hugetlb_cgroup_css_alloc(struct cgroup *cgroup)$/;"	f	file:
hugetlb_cgroup_css_free	mm/hugetlb_cgroup.c	/^static void hugetlb_cgroup_css_free(struct cgroup *cgroup)$/;"	f	file:
hugetlb_cgroup_css_offline	mm/hugetlb_cgroup.c	/^static void hugetlb_cgroup_css_offline(struct cgroup *cgroup)$/;"	f	file:
hugetlb_cgroup_file_init	mm/hugetlb_cgroup.c	/^void __init hugetlb_cgroup_file_init(void)$/;"	f
hugetlb_cgroup_from_cgroup	mm/hugetlb_cgroup.c	/^struct hugetlb_cgroup *hugetlb_cgroup_from_cgroup(struct cgroup *cgroup)$/;"	f	file:
hugetlb_cgroup_from_css	mm/hugetlb_cgroup.c	/^struct hugetlb_cgroup *hugetlb_cgroup_from_css(struct cgroup_subsys_state *s)$/;"	f	file:
hugetlb_cgroup_from_task	mm/hugetlb_cgroup.c	/^struct hugetlb_cgroup *hugetlb_cgroup_from_task(struct task_struct *task)$/;"	f	file:
hugetlb_cgroup_have_usage	mm/hugetlb_cgroup.c	/^static inline bool hugetlb_cgroup_have_usage(struct cgroup *cg)$/;"	f	file:
hugetlb_cgroup_is_root	mm/hugetlb_cgroup.c	/^static inline bool hugetlb_cgroup_is_root(struct hugetlb_cgroup *h_cg)$/;"	f	file:
hugetlb_cgroup_migrate	mm/hugetlb_cgroup.c	/^void hugetlb_cgroup_migrate(struct page *oldhpage, struct page *newhpage)$/;"	f
hugetlb_cgroup_move_parent	mm/hugetlb_cgroup.c	/^static void hugetlb_cgroup_move_parent(int idx, struct cgroup *cgroup,$/;"	f	file:
hugetlb_cgroup_read	mm/hugetlb_cgroup.c	/^static ssize_t hugetlb_cgroup_read(struct cgroup *cgroup, struct cftype *cft,$/;"	f	file:
hugetlb_cgroup_reset	mm/hugetlb_cgroup.c	/^static int hugetlb_cgroup_reset(struct cgroup *cgroup, unsigned int event)$/;"	f	file:
hugetlb_cgroup_uncharge_cgroup	mm/hugetlb_cgroup.c	/^void hugetlb_cgroup_uncharge_cgroup(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_uncharge_page	mm/hugetlb_cgroup.c	/^void hugetlb_cgroup_uncharge_page(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_write	mm/hugetlb_cgroup.c	/^static int hugetlb_cgroup_write(struct cgroup *cgroup, struct cftype *cft,$/;"	f	file:
hugetlb_change_protection	mm/hugetlb.c	/^unsigned long hugetlb_change_protection(struct vm_area_struct *vma,$/;"	f
hugetlb_cow	mm/hugetlb.c	/^static int hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
hugetlb_default_setup	mm/hugetlb.c	/^static int __init hugetlb_default_setup(char *s)$/;"	f	file:
hugetlb_entry_end	mm/pagewalk.c	/^static unsigned long hugetlb_entry_end(struct hstate *h, unsigned long addr,$/;"	f	file:
hugetlb_exit	mm/hugetlb.c	/^module_exit(hugetlb_exit);$/;"	v
hugetlb_exit	mm/hugetlb.c	/^static void __exit hugetlb_exit(void)$/;"	f	file:
hugetlb_fault	mm/hugetlb.c	/^int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
hugetlb_hstate_alloc_pages	mm/hugetlb.c	/^static void __init hugetlb_hstate_alloc_pages(struct hstate *h)$/;"	f	file:
hugetlb_infinity	mm/hugetlb.c	/^const unsigned long hugetlb_zero = 0, hugetlb_infinity = ~0UL;$/;"	v
hugetlb_init	mm/hugetlb.c	/^module_init(hugetlb_init);$/;"	v
hugetlb_init	mm/hugetlb.c	/^static int __init hugetlb_init(void)$/;"	f	file:
hugetlb_init_hstates	mm/hugetlb.c	/^static void __init hugetlb_init_hstates(void)$/;"	f	file:
hugetlb_lock	mm/hugetlb.c	/^DEFINE_SPINLOCK(hugetlb_lock);$/;"	v
hugetlb_mempolicy_sysctl_handler	mm/hugetlb.c	/^int hugetlb_mempolicy_sysctl_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_no_page	mm/hugetlb.c	/^static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
hugetlb_nrpages_setup	mm/hugetlb.c	/^static int __init hugetlb_nrpages_setup(char *s)$/;"	f	file:
hugetlb_overcommit_handler	mm/hugetlb.c	/^int hugetlb_overcommit_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_register_all_nodes	mm/hugetlb.c	/^static void hugetlb_register_all_nodes(void) { }$/;"	f	file:
hugetlb_register_all_nodes	mm/hugetlb.c	/^static void hugetlb_register_all_nodes(void)$/;"	f	file:
hugetlb_register_node	mm/hugetlb.c	/^void hugetlb_register_node(struct node *node)$/;"	f
hugetlb_report_meminfo	mm/hugetlb.c	/^void hugetlb_report_meminfo(struct seq_file *m)$/;"	f
hugetlb_report_node_meminfo	mm/hugetlb.c	/^int hugetlb_report_node_meminfo(int nid, char *buf)$/;"	f
hugetlb_reserve_pages	mm/hugetlb.c	/^int hugetlb_reserve_pages(struct inode *inode,$/;"	f
hugetlb_subsys	mm/hugetlb_cgroup.c	/^struct cgroup_subsys hugetlb_subsys = {$/;"	v	typeref:struct:cgroup_subsys
hugetlb_sysctl_handler	mm/hugetlb.c	/^int hugetlb_sysctl_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_sysctl_handler_common	mm/hugetlb.c	/^static int hugetlb_sysctl_handler_common(bool obey_mempolicy,$/;"	f	file:
hugetlb_sysfs_add_hstate	mm/hugetlb.c	/^static int hugetlb_sysfs_add_hstate(struct hstate *h, struct kobject *parent,$/;"	f	file:
hugetlb_sysfs_init	mm/hugetlb.c	/^static void __init hugetlb_sysfs_init(void)$/;"	f	file:
hugetlb_total_pages	mm/hugetlb.c	/^unsigned long hugetlb_total_pages(void)$/;"	f
hugetlb_treat_movable_handler	mm/hugetlb.c	/^int hugetlb_treat_movable_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_unregister_all_nodes	mm/hugetlb.c	/^static void hugetlb_unregister_all_nodes(void) { }$/;"	f	file:
hugetlb_unregister_all_nodes	mm/hugetlb.c	/^static void hugetlb_unregister_all_nodes(void)$/;"	f	file:
hugetlb_unregister_node	mm/hugetlb.c	/^void hugetlb_unregister_node(struct node *node)$/;"	f
hugetlb_unreserve_pages	mm/hugetlb.c	/^void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed)$/;"	f
hugetlb_vm_op_close	mm/hugetlb.c	/^static void hugetlb_vm_op_close(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_op_fault	mm/hugetlb.c	/^static int hugetlb_vm_op_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
hugetlb_vm_op_open	mm/hugetlb.c	/^static void hugetlb_vm_op_open(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_ops	mm/hugetlb.c	/^const struct vm_operations_struct hugetlb_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
hugetlb_vma	mm/pagewalk.c	/^static struct vm_area_struct* hugetlb_vma(unsigned long addr, struct mm_walk *walk)$/;"	f	file:
hugetlb_zero	mm/hugetlb.c	/^const unsigned long hugetlb_zero = 0, hugetlb_infinity = ~0UL;$/;"	v
hugetlbfs_pagecache_page	mm/hugetlb.c	/^static struct page *hugetlbfs_pagecache_page(struct hstate *h,$/;"	f	file:
hugetlbfs_pagecache_present	mm/hugetlb.c	/^static bool hugetlbfs_pagecache_present(struct hstate *h,$/;"	f	file:
hung_task_init	kernel/hung_task.c	/^module_init(hung_task_init);$/;"	v
hung_task_init	kernel/hung_task.c	/^static int __init hung_task_init(void)$/;"	f	file:
hung_task_panic	kernel/hung_task.c	/^hung_task_panic(struct notifier_block *this, unsigned long event, void *ptr)$/;"	f	file:
hung_task_panic_setup	kernel/hung_task.c	/^static int __init hung_task_panic_setup(char *str)$/;"	f	file:
hurd1	fs/ext3/ext3.h	/^		} hurd1;$/;"	m	union:ext3_inode::__anon31	typeref:struct:ext3_inode::__anon31::__anon33
hurd2	fs/ext3/ext3.h	/^		} hurd2;$/;"	m	union:ext3_inode::__anon35	typeref:struct:ext3_inode::__anon35::__anon37
hwcache_align	mm/slub.c	/^SLAB_ATTR_RO(hwcache_align);$/;"	v
hwcache_align_show	mm/slub.c	/^static ssize_t hwcache_align_show(struct kmem_cache *s, char *buf)$/;"	f	file:
hwpoison_dir	mm/hwpoison-inject.c	/^static struct dentry *hwpoison_dir;$/;"	v	typeref:struct:dentry	file:
hwpoison_filter	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter);$/;"	v
hwpoison_filter	mm/memory-failure.c	/^int hwpoison_filter(struct page *p)$/;"	f
hwpoison_filter_dev	mm/memory-failure.c	/^static int hwpoison_filter_dev(struct page *p)$/;"	f	file:
hwpoison_filter_dev_major	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_dev_major);$/;"	v
hwpoison_filter_dev_major	mm/memory-failure.c	/^u32 hwpoison_filter_dev_major = ~0U;$/;"	v
hwpoison_filter_dev_minor	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_dev_minor);$/;"	v
hwpoison_filter_dev_minor	mm/memory-failure.c	/^u32 hwpoison_filter_dev_minor = ~0U;$/;"	v
hwpoison_filter_enable	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_enable);$/;"	v
hwpoison_filter_enable	mm/memory-failure.c	/^u32 hwpoison_filter_enable = 0;$/;"	v
hwpoison_filter_flags	mm/memory-failure.c	/^static int hwpoison_filter_flags(struct page *p)$/;"	f	file:
hwpoison_filter_flags_mask	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_flags_mask);$/;"	v
hwpoison_filter_flags_mask	mm/memory-failure.c	/^u64 hwpoison_filter_flags_mask;$/;"	v
hwpoison_filter_flags_value	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_flags_value);$/;"	v
hwpoison_filter_flags_value	mm/memory-failure.c	/^u64 hwpoison_filter_flags_value;$/;"	v
hwpoison_filter_memcg	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_memcg);$/;"	v
hwpoison_filter_memcg	mm/memory-failure.c	/^u64 hwpoison_filter_memcg;$/;"	v
hwpoison_filter_task	mm/memory-failure.c	/^static int hwpoison_filter_task(struct page *p) { return 0; }$/;"	f	file:
hwpoison_filter_task	mm/memory-failure.c	/^static int hwpoison_filter_task(struct page *p)$/;"	f	file:
hwpoison_inject	mm/hwpoison-inject.c	/^static int hwpoison_inject(void *data, u64 val)$/;"	f	file:
hwpoison_unpoison	mm/hwpoison-inject.c	/^static int hwpoison_unpoison(void *data, u64 val)$/;"	f	file:
hwpoison_user_mappings	mm/memory-failure.c	/^static int hwpoison_user_mappings(struct page *p, unsigned long pfn,$/;"	f	file:
i2c_msg32	fs/compat_ioctl.c	/^struct i2c_msg32 {$/;"	s	file:
i2c_rdwr_aligned	fs/compat_ioctl.c	/^struct i2c_rdwr_aligned {$/;"	s	file:
i2c_rdwr_ioctl_data32	fs/compat_ioctl.c	/^struct i2c_rdwr_ioctl_data32 {$/;"	s	file:
i2c_smbus_ioctl_data32	fs/compat_ioctl.c	/^struct i2c_smbus_ioctl_data32 {$/;"	s	file:
iFrame	fs/compat_ioctl.c	/^        compat_uptr_t iFrame;$/;"	m	struct:compat_video_still_picture	file:
i_atime	fs/ext3/ext3.h	/^	__le32	i_atime;	\/* Access time *\/$/;"	m	struct:ext3_inode
i_block	fs/ext3/ext3.h	/^	__le32	i_block[EXT3_N_BLOCKS];\/* Pointers to blocks *\/$/;"	m	struct:ext3_inode
i_block_alloc_info	fs/ext3/ext3.h	/^	struct ext3_block_alloc_info *i_block_alloc_info;$/;"	m	struct:ext3_inode_info	typeref:struct:ext3_inode_info::ext3_block_alloc_info
i_block_group	fs/ext3/ext3.h	/^	__u32	i_block_group;$/;"	m	struct:ext3_inode_info
i_blocks	fs/ext3/ext3.h	/^	__le32	i_blocks;	\/* Blocks count *\/$/;"	m	struct:ext3_inode
i_callback	fs/inode.c	/^static void i_callback(struct rcu_head *head)$/;"	f	file:
i_ctime	fs/ext3/ext3.h	/^	__le32	i_ctime;	\/* Creation time *\/$/;"	m	struct:ext3_inode
i_data	fs/ext3/ext3.h	/^	__le32	i_data[15];	\/* unconverted *\/$/;"	m	struct:ext3_inode_info
i_datasync_tid	fs/ext3/ext3.h	/^	atomic_t i_datasync_tid;$/;"	m	struct:ext3_inode_info
i_dir_acl	fs/ext3/ext3.h	/^	__le32	i_dir_acl;	\/* Directory ACL *\/$/;"	m	struct:ext3_inode
i_dir_acl	fs/ext3/ext3.h	/^	__u32	i_dir_acl;$/;"	m	struct:ext3_inode_info
i_dir_start_lookup	fs/ext3/ext3.h	/^	__u32	i_dir_start_lookup;$/;"	m	struct:ext3_inode_info
i_disksize	fs/ext3/ext3.h	/^	loff_t	i_disksize;$/;"	m	struct:ext3_inode_info
i_dtime	fs/ext3/ext3.h	/^	__le32	i_dtime;	\/* Deletion Time *\/$/;"	m	struct:ext3_inode
i_dtime	fs/ext3/ext3.h	/^	__u32	i_dtime;$/;"	m	struct:ext3_inode_info
i_extra_isize	fs/ext3/ext3.h	/^	__le16	i_extra_isize;$/;"	m	struct:ext3_inode
i_extra_isize	fs/ext3/ext3.h	/^	__u16 i_extra_isize;$/;"	m	struct:ext3_inode_info
i_faddr	fs/ext3/ext3.h	/^	__le32	i_faddr;	\/* Fragment address *\/$/;"	m	struct:ext3_inode
i_faddr	fs/ext3/ext3.h	/^	__u32	i_faddr;$/;"	m	struct:ext3_inode_info
i_file_acl	fs/ext3/ext3.h	/^	__le32	i_file_acl;	\/* File ACL *\/$/;"	m	struct:ext3_inode
i_file_acl	fs/ext3/ext3.h	/^	ext3_fsblk_t	i_file_acl;$/;"	m	struct:ext3_inode_info
i_flags	fs/ext3/ext3.h	/^	__le32	i_flags;	\/* File flags *\/$/;"	m	struct:ext3_inode
i_flags	fs/ext3/ext3.h	/^	__u32	i_flags;$/;"	m	struct:ext3_inode_info
i_frag	fs/ext3/ext3.h	317;"	d
i_frag_no	fs/ext3/ext3.h	/^	__u8	i_frag_no;$/;"	m	struct:ext3_inode_info
i_frag_size	fs/ext3/ext3.h	/^	__u8	i_frag_size;$/;"	m	struct:ext3_inode_info
i_fsize	fs/ext3/ext3.h	318;"	d
i_generation	fs/ext3/ext3.h	/^	__le32	i_generation;	\/* File version (for NFS) *\/$/;"	m	struct:ext3_inode
i_gid	fs/ext3/ext3.h	/^	__le16	i_gid;		\/* Low 16 bits of Group Id *\/$/;"	m	struct:ext3_inode
i_gid_high	fs/ext3/ext3.h	322;"	d
i_gid_low	fs/ext3/ext3.h	320;"	d
i_links_count	fs/ext3/ext3.h	/^	__le16	i_links_count;	\/* Links count *\/$/;"	m	struct:ext3_inode
i_mode	fs/ext3/ext3.h	/^	__le16	i_mode;		\/* File mode *\/$/;"	m	struct:ext3_inode
i_mtime	fs/ext3/ext3.h	/^	__le32	i_mtime;	\/* Modification time *\/$/;"	m	struct:ext3_inode
i_orphan	fs/ext3/ext3.h	/^	struct list_head i_orphan;	\/* unlinked but open inodes *\/$/;"	m	struct:ext3_inode_info	typeref:struct:ext3_inode_info::list_head
i_pad1	fs/ext3/ext3.h	/^			__u16	i_pad1;$/;"	m	struct:ext3_inode::__anon35::__anon36
i_pad1	fs/ext3/ext3.h	/^	__le16	i_pad1;$/;"	m	struct:ext3_inode
i_reserved1	fs/ext3/ext3.h	316;"	d
i_reserved2	fs/ext3/ext3.h	323;"	d
i_size	fs/direct-io.c	/^	loff_t i_size;			\/* i_size when submitted *\/$/;"	m	struct:dio	file:
i_size	fs/ext3/ext3.h	/^	__le32	i_size;		\/* Size in bytes *\/$/;"	m	struct:ext3_inode
i_size_high	fs/ext3/ext3.h	314;"	d
i_state_flags	fs/ext3/ext3.h	/^	unsigned long	i_state_flags;	\/* Dynamic state flags for ext3 *\/$/;"	m	struct:ext3_inode_info
i_sync_tid	fs/ext3/ext3.h	/^	atomic_t i_sync_tid;$/;"	m	struct:ext3_inode_info
i_uid	fs/ext3/ext3.h	/^	__le16	i_uid;		\/* Low 16 bits of Owner Uid *\/$/;"	m	struct:ext3_inode
i_uid_high	fs/ext3/ext3.h	321;"	d
i_uid_low	fs/ext3/ext3.h	319;"	d
id	kernel/cgroup.c	/^	unsigned short id;$/;"	m	struct:css_id	file:
id	kernel/workqueue.c	/^	int			id;		\/* I: pool ID *\/$/;"	m	struct:worker_pool	file:
id	kernel/workqueue_internal.h	/^	int			id;		\/* I: worker id *\/$/;"	m	struct:worker
id	mm/page_cgroup.c	/^	unsigned short		id;$/;"	m	struct:swap_cgroup	file:
id_type	kernel/module_signing.c	/^	u8	id_type;	\/* Key identifier type [enum pkey_id_type] *\/$/;"	m	struct:module_signature	file:
ident_map	kernel/exec_domain.c	/^static unsigned long ident_map[32] = {$/;"	v	file:
idle_first_pass	kernel/rcutree.h	/^	bool idle_first_pass;	    \/* First pass of attempt to go idle? *\/$/;"	m	struct:rcu_dynticks
idle_gp_timer	kernel/rcutree.h	/^	struct timer_list idle_gp_timer;$/;"	m	struct:rcu_dynticks	typeref:struct:rcu_dynticks::timer_list
idle_gp_timer_expires	kernel/rcutree.h	/^	unsigned long idle_gp_timer_expires;$/;"	m	struct:rcu_dynticks
idle_init	kernel/smpboot.c	/^static inline void idle_init(unsigned int cpu)$/;"	f	file:
idle_list	kernel/workqueue.c	/^	struct list_head	idle_list;	\/* X: list of idle workers *\/$/;"	m	struct:worker_pool	typeref:struct:worker_pool::list_head	file:
idle_thread_get	kernel/smpboot.c	/^struct task_struct * __cpuinit idle_thread_get(unsigned int cpu)$/;"	f
idle_thread_get	kernel/smpboot.h	/^static inline struct task_struct *idle_thread_get(unsigned int cpu) { return NULL; }$/;"	f
idle_thread_set_boot_cpu	kernel/smpboot.c	/^void __init idle_thread_set_boot_cpu(void)$/;"	f
idle_thread_set_boot_cpu	kernel/smpboot.h	/^static inline void idle_thread_set_boot_cpu(void) { }$/;"	f
idle_threads_init	kernel/smpboot.c	/^void __init idle_threads_init(void)$/;"	f
idle_threads_init	kernel/smpboot.h	/^static inline void idle_threads_init(void) { }$/;"	f
idle_timer	kernel/workqueue.c	/^	struct timer_list	idle_timer;	\/* L: worker idle timeout *\/$/;"	m	struct:worker_pool	typeref:struct:worker_pool::timer_list	file:
idle_worker_rebind	kernel/workqueue.c	/^static void idle_worker_rebind(struct worker *worker)$/;"	f	file:
idle_worker_timeout	kernel/workqueue.c	/^static void idle_worker_timeout(unsigned long __pool)$/;"	f	file:
idr_callback	fs/notify/inotify/inotify_fsnotify.c	/^static int idr_callback(int id, void *p, void *data)$/;"	f	file:
idx	kernel/cgroup.c	/^	int			idx;$/;"	m	struct:cgroup_taskset	file:
idx	kernel/printk.c	/^	u32 idx;$/;"	m	struct:devkmsg_user	file:
iget5_locked	fs/inode.c	/^EXPORT_SYMBOL(iget5_locked);$/;"	v
iget5_locked	fs/inode.c	/^struct inode *iget5_locked(struct super_block *sb, unsigned long hashval,$/;"	f
iget_failed	fs/bad_inode.c	/^EXPORT_SYMBOL(iget_failed);$/;"	v
iget_failed	fs/bad_inode.c	/^void iget_failed(struct inode *inode)$/;"	f
iget_locked	fs/inode.c	/^EXPORT_SYMBOL(iget_locked);$/;"	v
iget_locked	fs/inode.c	/^struct inode *iget_locked(struct super_block *sb, unsigned long ino)$/;"	f
ignore_gfp_highmem	mm/page_alloc.c	/^	u32 ignore_gfp_highmem;$/;"	m	struct:__anon12	file:
ignore_gfp_wait	mm/failslab.c	/^	u32 ignore_gfp_wait;$/;"	m	struct:__anon2	file:
ignore_gfp_wait	mm/page_alloc.c	/^	u32 ignore_gfp_wait;$/;"	m	struct:__anon12	file:
ignore_loglevel	kernel/printk.c	/^static bool __read_mostly ignore_loglevel;$/;"	v	file:
ignore_loglevel_setup	kernel/printk.c	/^static int __init ignore_loglevel_setup(char *str)$/;"	f	file:
ignore_signals	kernel/signal.c	/^void ignore_signals(struct task_struct *t)$/;"	f
ignore_skip_hint	mm/internal.h	/^	bool ignore_skip_hint;		\/* Scan blocks even if marked skip *\/$/;"	m	struct:compact_control
ignoring_children	kernel/ptrace.c	/^static int ignoring_children(struct sighand_struct *sigh)$/;"	f	file:
igrab	fs/inode.c	/^EXPORT_SYMBOL(igrab);$/;"	v
igrab	fs/inode.c	/^struct inode *igrab(struct inode *inode)$/;"	f
ihash_entries	fs/inode.c	/^static __initdata unsigned long ihash_entries;$/;"	v	file:
ihold	fs/inode.c	/^EXPORT_SYMBOL(ihold);$/;"	v
ihold	fs/inode.c	/^void ihold(struct inode *inode)$/;"	f
ikconfig_cleanup	kernel/configs.c	/^module_exit(ikconfig_cleanup);$/;"	v
ikconfig_cleanup	kernel/configs.c	/^static void __exit ikconfig_cleanup(void)$/;"	f	file:
ikconfig_file_ops	kernel/configs.c	/^static const struct file_operations ikconfig_file_ops = {$/;"	v	typeref:struct:file_operations	file:
ikconfig_init	kernel/configs.c	/^module_init(ikconfig_init);$/;"	v
ikconfig_init	kernel/configs.c	/^static int __init ikconfig_init(void)$/;"	f	file:
ikconfig_read_current	kernel/configs.c	/^ikconfig_read_current(struct file *file, char __user *buf,$/;"	f	file:
iloc	fs/ext3/xattr.c	/^	struct ext3_iloc iloc;$/;"	m	struct:ext3_xattr_ibody_find	typeref:struct:ext3_xattr_ibody_find::ext3_iloc	file:
ilookup	fs/inode.c	/^EXPORT_SYMBOL(ilookup);$/;"	v
ilookup	fs/inode.c	/^struct inode *ilookup(struct super_block *sb, unsigned long ino)$/;"	f
ilookup5	fs/inode.c	/^EXPORT_SYMBOL(ilookup5);$/;"	v
ilookup5	fs/inode.c	/^struct inode *ilookup5(struct super_block *sb, unsigned long hashval,$/;"	f
ilookup5_nowait	fs/inode.c	/^EXPORT_SYMBOL(ilookup5_nowait);$/;"	v
ilookup5_nowait	fs/inode.c	/^struct inode *ilookup5_nowait(struct super_block *sb, unsigned long hashval,$/;"	f
immigrate_flags	mm/memcontrol.c	/^	unsigned long immigrate_flags;$/;"	m	struct:move_charge_struct	file:
immutable	mm/percpu.c	/^	bool			immutable;	\/* no [de]population allowed *\/$/;"	m	struct:pcpu_chunk	file:
in_egroup_p	kernel/groups.c	/^EXPORT_SYMBOL(in_egroup_p);$/;"	v
in_egroup_p	kernel/groups.c	/^int in_egroup_p(kgid_t grp)$/;"	f
in_gate_area_no_mm	mm/memory.c	/^int in_gate_area_no_mm(unsigned long addr)$/;"	f
in_gate_area_no_mm	mm/nommu.c	/^int in_gate_area_no_mm(unsigned long addr)$/;"	f
in_group_p	kernel/groups.c	/^EXPORT_SYMBOL(in_group_p);$/;"	v
in_group_p	kernel/groups.c	/^int in_group_p(kgid_t grp)$/;"	f
in_kprobes_functions	kernel/kprobes.c	/^static int __kprobes in_kprobes_functions(unsigned long addr)$/;"	f	file:
in_lock_functions	kernel/spinlock.c	/^EXPORT_SYMBOL(in_lock_functions);$/;"	v
in_lock_functions	kernel/spinlock.c	/^notrace int in_lock_functions(unsigned long addr)$/;"	f
in_range	fs/ext3/balloc.c	34;"	d	file:
in_reclaim_compaction	mm/vmscan.c	/^static bool in_reclaim_compaction(struct scan_control *sc)$/;"	f	file:
in_syscall	kernel/auditsc.c	/^	int		    in_syscall;	\/* 1 if task is in a syscall *\/$/;"	m	struct:audit_context	file:
in_use	mm/dmapool.c	/^	unsigned int in_use;$/;"	m	struct:dma_page	file:
inactive_anon_is_low	mm/vmscan.c	/^static inline int inactive_anon_is_low(struct lruvec *lruvec)$/;"	f	file:
inactive_anon_is_low	mm/vmscan.c	/^static int inactive_anon_is_low(struct lruvec *lruvec)$/;"	f	file:
inactive_anon_is_low_global	mm/vmscan.c	/^static int inactive_anon_is_low_global(struct zone *zone)$/;"	f	file:
inactive_file_is_low	mm/vmscan.c	/^static int inactive_file_is_low(struct lruvec *lruvec)$/;"	f	file:
inactive_list_is_low	mm/vmscan.c	/^static int inactive_list_is_low(struct lruvec *lruvec, enum lru_list lru)$/;"	f	file:
inc_chains	kernel/lockdep.c	/^static inline void inc_chains(void)$/;"	f	file:
inc_chains	kernel/lockdep.c	/^static void inc_chains(void)$/;"	f	file:
inc_frontswap_failed_stores	mm/frontswap.c	/^static inline void inc_frontswap_failed_stores(void) { }$/;"	f	file:
inc_frontswap_failed_stores	mm/frontswap.c	/^static inline void inc_frontswap_failed_stores(void) {$/;"	f	file:
inc_frontswap_invalidates	mm/frontswap.c	/^static inline void inc_frontswap_invalidates(void) { }$/;"	f	file:
inc_frontswap_invalidates	mm/frontswap.c	/^static inline void inc_frontswap_invalidates(void) {$/;"	f	file:
inc_frontswap_loads	mm/frontswap.c	/^static inline void inc_frontswap_loads(void) { }$/;"	f	file:
inc_frontswap_loads	mm/frontswap.c	/^static inline void inc_frontswap_loads(void) {$/;"	f	file:
inc_frontswap_succ_stores	mm/frontswap.c	/^static inline void inc_frontswap_succ_stores(void) { }$/;"	f	file:
inc_frontswap_succ_stores	mm/frontswap.c	/^static inline void inc_frontswap_succ_stores(void) {$/;"	f	file:
inc_mm_counter_fast	mm/memory.c	157;"	d	file:
inc_mm_counter_fast	mm/memory.c	171;"	d	file:
inc_nlink	fs/inode.c	/^EXPORT_SYMBOL(inc_nlink);$/;"	v
inc_nlink	fs/inode.c	/^void inc_nlink(struct inode *inode)$/;"	f
inc_slabs_node	mm/slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s, int node, int objects)$/;"	f	file:
inc_slabs_node	mm/slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s, int node,$/;"	f	file:
inc_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(inc_zone_page_state);$/;"	v
inc_zone_page_state	mm/vmstat.c	/^void inc_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
inc_zone_state	mm/vmstat.c	/^void inc_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
increment_cpu_stall_ticks	kernel/rcutree_plugin.h	/^static void increment_cpu_stall_ticks(void)$/;"	f
index	kernel/audit_tree.c	/^		unsigned index;		\/* index; upper bit indicates 'will prune' *\/$/;"	m	struct:audit_chunk::node	file:
index	kernel/module.c	/^	} index;$/;"	m	struct:load_info	typeref:struct:load_info::__anon60	file:
index	kernel/printk.c	/^	int	index;				\/* Minor dev. to use	    *\/$/;"	m	struct:console_cmdline	file:
index_of	mm/slab.c	/^static __always_inline int index_of(const size_t size)$/;"	f	file:
index_to_obj	mm/slab.c	/^static inline void *index_to_obj(struct kmem_cache *cache, struct slab *slab,$/;"	f	file:
indirect_levels	fs/ext3/namei.c	/^		u8 indirect_levels;$/;"	m	struct:dx_root::dx_root_info	file:
indirect_to_ptr	lib/radix-tree.c	/^static inline void *indirect_to_ptr(void *ptr)$/;"	f	file:
inflight	kernel/rcutorture.c	/^	int inflight;$/;"	m	struct:rcu_boost_inflight	file:
info	fs/compat_ioctl.c	/^	compat_uint_t info;		\/* [o] auxiliary information *\/$/;"	m	struct:sg_io_hdr32	file:
info	fs/ext3/namei.c	/^	info;$/;"	m	struct:dx_root	typeref:struct:dx_root::dx_root_info	file:
info	kernel/module.c	/^		unsigned int sym, str, mod, vers, info, pcpu;$/;"	m	struct:load_info::__anon60	file:
info	mm/memcontrol.c	/^	struct mem_cgroup_lru_info info;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mem_cgroup_lru_info	file:
info_length	fs/ext3/namei.c	/^		u8 info_length; \/* 8 *\/$/;"	m	struct:dx_root::dx_root_info	file:
inheritable	kernel/auditsc.c	/^	kernel_cap_t		inheritable;$/;"	m	struct:audit_cap_data	file:
init	kernel/rcutorture.c	/^	void (*init)(void);$/;"	m	struct:rcu_torture_ops	file:
init_aggr_kprobe	kernel/kprobes.c	/^static void __kprobes init_aggr_kprobe(struct kprobe *ap, struct kprobe *p)$/;"	f	file:
init_aout_binfmt	fs/binfmt_aout.c	/^core_initcall(init_aout_binfmt);$/;"	v
init_aout_binfmt	fs/binfmt_aout.c	/^static int __init init_aout_binfmt(void)$/;"	f	file:
init_bio	fs/bio.c	/^static int __init init_bio(void)$/;"	f	file:
init_bio	fs/bio.c	/^subsys_initcall(init_bio);$/;"	v
init_bootmem	mm/bootmem.c	/^unsigned long __init init_bootmem(unsigned long start, unsigned long pages)$/;"	f
init_bootmem_core	mm/bootmem.c	/^static unsigned long __init init_bootmem_core(bootmem_data_t *bdata,$/;"	f	file:
init_bootmem_node	mm/bootmem.c	/^unsigned long __init init_bootmem_node(pg_data_t *pgdat, unsigned long freepfn,$/;"	f
init_buffer	fs/buffer.c	/^EXPORT_SYMBOL(init_buffer);$/;"	v
init_buffer	fs/buffer.c	/^void init_buffer(struct buffer_head *bh, bh_end_io_t *handler, void *private)$/;"	f
init_cache_nodelists_node	mm/slab.c	/^static int init_cache_nodelists_node(int node)$/;"	f	file:
init_callback_list	kernel/rcutree.c	/^static void init_callback_list(struct rcu_data *rdp)$/;"	f	file:
init_cgroup_css	kernel/cgroup.c	/^static void init_cgroup_css(struct cgroup_subsys_state *css,$/;"	f	file:
init_cgroup_housekeeping	kernel/cgroup.c	/^static void init_cgroup_housekeeping(struct cgroup *cgrp)$/;"	f	file:
init_cgroup_root	kernel/cgroup.c	/^static void init_cgroup_root(struct cgroupfs_root *root)$/;"	f	file:
init_cleancache	mm/cleancache.c	/^static int __init init_cleancache(void)$/;"	f	file:
init_cma_reserved_pageblock	mm/page_alloc.c	/^void __init init_cma_reserved_pageblock(struct page *page)$/;"	f
init_cpu_online	kernel/cpu.c	/^void init_cpu_online(const struct cpumask *src)$/;"	f
init_cpu_possible	kernel/cpu.c	/^void init_cpu_possible(const struct cpumask *src)$/;"	f
init_cpu_present	kernel/cpu.c	/^void init_cpu_present(const struct cpumask *src)$/;"	f
init_cred	kernel/cred.c	/^struct cred init_cred = {$/;"	v	typeref:struct:cred
init_css_set	kernel/cgroup.c	/^static struct css_set init_css_set;$/;"	v	typeref:struct:css_set	file:
init_css_set_link	kernel/cgroup.c	/^static struct cg_cgroup_link init_css_set_link;$/;"	v	typeref:struct:cg_cgroup_link	file:
init_currently_empty_zone	mm/page_alloc.c	/^int __meminit init_currently_empty_zone(struct zone *zone,$/;"	f
init_elf_binfmt	fs/binfmt_elf.c	/^core_initcall(init_elf_binfmt);$/;"	v
init_elf_binfmt	fs/binfmt_elf.c	/^static int __init init_elf_binfmt(void)$/;"	f	file:
init_elf_binfmt	fs/compat_binfmt_elf.c	134;"	d	file:
init_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^core_initcall(init_elf_fdpic_binfmt);$/;"	v
init_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^static int __init init_elf_fdpic_binfmt(void)$/;"	f	file:
init_em86_binfmt	fs/binfmt_em86.c	/^core_initcall(init_em86_binfmt);$/;"	v
init_em86_binfmt	fs/binfmt_em86.c	/^static int __init init_em86_binfmt(void)$/;"	f	file:
init_emergency_isa_pool	mm/bounce.c	/^int init_emergency_isa_pool(void)$/;"	f
init_emergency_pool	mm/bounce.c	/^__initcall(init_emergency_pool);$/;"	v
init_emergency_pool	mm/bounce.c	/^static __init int init_emergency_pool(void)$/;"	f	file:
init_ext3_fs	fs/ext3/super.c	/^static int __init init_ext3_fs(void)$/;"	f	file:
init_ext3_xattr	fs/ext3/xattr.c	/^init_ext3_xattr(void)$/;"	f
init_ext3_xattr	fs/ext3/xattr.h	/^init_ext3_xattr(void)$/;"	f
init_files	fs/file.c	/^struct files_struct init_files = {$/;"	v	typeref:struct:files_struct
init_flat_binfmt	fs/binfmt_flat.c	/^core_initcall(init_flat_binfmt);$/;"	v
init_flat_binfmt	fs/binfmt_flat.c	/^static int __init init_flat_binfmt(void)$/;"	f	file:
init_frontswap	mm/frontswap.c	/^module_init(init_frontswap);$/;"	v
init_frontswap	mm/frontswap.c	/^static int __init init_frontswap(void)$/;"	f	file:
init_fs	fs/fs_struct.c	/^struct fs_struct init_fs = {$/;"	v	typeref:struct:fs_struct
init_groups	kernel/groups.c	/^struct group_info init_groups = { .usage = ATOMIC_INIT(2) };$/;"	v	typeref:struct:group_info
init_hrtimers_cpu	kernel/hrtimer.c	/^static void __cpuinit init_hrtimers_cpu(int cpu)$/;"	f	file:
init_idle_pids	kernel/fork.c	/^static inline void init_idle_pids(struct pid_link *links)$/;"	f	file:
init_inodecache	fs/ext3/super.c	/^static int init_inodecache(void)$/;"	f	file:
init_kernel_text	kernel/extable.c	/^static inline int init_kernel_text(unsigned long addr)$/;"	f	file:
init_kmem_cache_cpus	mm/slub.c	/^static void init_kmem_cache_cpus(struct kmem_cache *s)$/;"	f	file:
init_kmem_cache_node	mm/slub.c	/^init_kmem_cache_node(struct kmem_cache_node *n)$/;"	f	file:
init_kmem_cache_nodes	mm/slub.c	/^static int init_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
init_kprobes	kernel/kprobes.c	/^module_init(init_kprobes);$/;"	v
init_kprobes	kernel/kprobes.c	/^static int __init init_kprobes(void)$/;"	f	file:
init_list	mm/slab.c	/^static void __init init_list(struct kmem_cache *cachep, struct kmem_list3 *list,$/;"	f	file:
init_lock_keys	mm/slab.c	/^static inline void init_lock_keys(void)$/;"	f	file:
init_lstats_procfs	kernel/latencytop.c	/^device_initcall(init_lstats_procfs);$/;"	v
init_lstats_procfs	kernel/latencytop.c	/^static int __init init_lstats_procfs(void)$/;"	f	file:
init_mbcache	fs/mbcache.c	/^static int __init init_mbcache(void)$/;"	f	file:
init_misc_binfmt	fs/binfmt_misc.c	/^core_initcall(init_misc_binfmt);$/;"	v
init_misc_binfmt	fs/binfmt_misc.c	/^static int __init init_misc_binfmt(void)$/;"	f	file:
init_mm	mm/init-mm.c	/^struct mm_struct init_mm = {$/;"	v	typeref:struct:mm_struct
init_mount_tree	fs/namespace.c	/^static void __init init_mount_tree(void)$/;"	f	file:
init_nocb_callback_list	kernel/rcutree_plugin.h	/^static void init_nocb_callback_list(struct rcu_data *rdp)$/;"	f
init_node_lock_keys	mm/slab.c	/^static void init_node_lock_keys(int q)$/;"	f	file:
init_nodemask_of_mempolicy	mm/mempolicy.c	/^bool init_nodemask_of_mempolicy(nodemask_t *mask)$/;"	f
init_nsproxy	kernel/nsproxy.c	/^struct nsproxy init_nsproxy = {$/;"	v	typeref:struct:nsproxy
init_object	mm/slub.c	/^static void init_object(struct kmem_cache *s, void *object, u8 val)$/;"	f	file:
init_once	fs/block_dev.c	/^static void init_once(void *foo)$/;"	f	file:
init_once	fs/ext3/super.c	/^static void init_once(void *foo)$/;"	f	file:
init_once	fs/inode.c	/^static void init_once(void *foo)$/;"	f	file:
init_oops_id	kernel/panic.c	/^late_initcall(init_oops_id);$/;"	v
init_oops_id	kernel/panic.c	/^static int init_oops_id(void)$/;"	f	file:
init_page_buffers	fs/buffer.c	/^init_page_buffers(struct page *page, struct block_device *bdev,$/;"	f	file:
init_per_zone_wmark_min	mm/page_alloc.c	/^int __meminit init_per_zone_wmark_min(void)$/;"	f
init_pid_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(init_pid_ns);$/;"	v
init_pid_ns	kernel/pid.c	/^struct pid_namespace init_pid_ns = {$/;"	v	typeref:struct:pid_namespace
init_pipe_fs	fs/pipe.c	/^fs_initcall(init_pipe_fs);$/;"	v
init_pipe_fs	fs/pipe.c	/^static int __init init_pipe_fs(void)$/;"	f	file:
init_posix_cpu_timers	kernel/posix-cpu-timers.c	/^__initcall(init_posix_cpu_timers);$/;"	v
init_posix_cpu_timers	kernel/posix-cpu-timers.c	/^static __init int init_posix_cpu_timers(void)$/;"	f	file:
init_posix_timers	kernel/posix-timers.c	/^__initcall(init_posix_timers);$/;"	v
init_posix_timers	kernel/posix-timers.c	/^static __init int init_posix_timers(void)$/;"	f	file:
init_rcu_head_on_stack	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(init_rcu_head_on_stack);$/;"	v
init_rcu_head_on_stack	kernel/rcupdate.c	/^void init_rcu_head_on_stack(struct rcu_head *head)$/;"	f
init_reap_node	mm/slab.c	/^static void init_reap_node(int cpu)$/;"	f	file:
init_reap_node	mm/slab.c	877;"	d	file:
init_root_id	kernel/cgroup.c	/^static bool init_root_id(struct cgroupfs_root *root)$/;"	f	file:
init_rss_vec	mm/memory.c	/^static inline void init_rss_vec(int *rss)$/;"	f	file:
init_rttest	kernel/rtmutex-tester.c	/^device_initcall(init_rttest);$/;"	v
init_rttest	kernel/rtmutex-tester.c	/^static int init_rttest(void)$/;"	f	file:
init_sb_writers	fs/super.c	/^static int init_sb_writers(struct super_block *s, struct file_system_type *type)$/;"	f	file:
init_scm	mm/scm.c	/^void init_scm(void)$/;"	f
init_script_binfmt	fs/binfmt_script.c	/^core_initcall(init_script_binfmt);$/;"	v
init_script_binfmt	fs/binfmt_script.c	/^static int __init init_script_binfmt(void)$/;"	f	file:
init_section_page_cgroup	mm/page_cgroup.c	/^static int __meminit init_section_page_cgroup(unsigned long pfn, int nid)$/;"	f	file:
init_som_binfmt	fs/binfmt_som.c	/^core_initcall(init_som_binfmt);$/;"	v
init_som_binfmt	fs/binfmt_som.c	/^static int __init init_som_binfmt(void)$/;"	f	file:
init_special_inode	fs/inode.c	/^EXPORT_SYMBOL(init_special_inode);$/;"	v
init_special_inode	fs/inode.c	/^void init_special_inode(struct inode *inode, umode_t mode, dev_t rdev)$/;"	f
init_srcu_struct	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(init_srcu_struct);$/;"	v
init_srcu_struct	kernel/srcu.c	/^int init_srcu_struct(struct srcu_struct *sp)$/;"	f
init_srcu_struct_fields	kernel/srcu.c	/^static int init_srcu_struct_fields(struct srcu_struct *sp)$/;"	f	file:
init_struct_pid	kernel/pid.c	/^struct pid init_struct_pid = INIT_STRUCT_PID;$/;"	v	typeref:struct:pid
init_sys32_ioctl	fs/compat_ioctl.c	/^__initcall(init_sys32_ioctl);$/;"	v
init_sys32_ioctl	fs/compat_ioctl.c	/^static int __init init_sys32_ioctl(void)$/;"	f	file:
init_sys32_ioctl_cmp	fs/compat_ioctl.c	/^static int __init init_sys32_ioctl_cmp(const void *p, const void *q)$/;"	f	file:
init_test_probes	kernel/test_kprobes.c	/^int init_test_probes(void)$/;"	f
init_test_thread	kernel/rtmutex-tester.c	/^static int init_test_thread(int id)$/;"	f	file:
init_tid	mm/slub.c	/^static inline unsigned int init_tid(int cpu)$/;"	f	file:
init_timeout	fs/aio.c	/^static inline void init_timeout(struct aio_timeout *to)$/;"	f	file:
init_timer_key	kernel/timer.c	/^EXPORT_SYMBOL(init_timer_key);$/;"	v
init_timer_key	kernel/timer.c	/^void init_timer_key(struct timer_list *timer, unsigned int flags,$/;"	f
init_timer_on_stack_key	kernel/timer.c	/^EXPORT_SYMBOL_GPL(init_timer_on_stack_key);$/;"	v
init_timer_on_stack_key	kernel/timer.c	/^void init_timer_on_stack_key(struct timer_list *timer, unsigned int flags,$/;"	f
init_timers	kernel/timer.c	/^void __init init_timers(void)$/;"	f
init_timers_cpu	kernel/timer.c	/^static int __cpuinit init_timers_cpu(int cpu)$/;"	f	file:
init_tracepoints	kernel/tracepoint.c	/^__initcall(init_tracepoints);$/;"	v
init_tracepoints	kernel/tracepoint.c	/^static int init_tracepoints(void)$/;"	f	file:
init_tracking	mm/slub.c	/^static void init_tracking(struct kmem_cache *s, void *object)$/;"	f	file:
init_user_ns	kernel/user.c	/^EXPORT_SYMBOL_GPL(init_user_ns);$/;"	v
init_user_ns	kernel/user.c	/^struct user_namespace init_user_ns = {$/;"	v	typeref:struct:user_namespace
init_workqueues	kernel/workqueue.c	/^early_initcall(init_workqueues);$/;"	v
init_workqueues	kernel/workqueue.c	/^static int __init init_workqueues(void)$/;"	f	file:
init_zero_pfn	mm/memory.c	/^core_initcall(init_zero_pfn);$/;"	v
init_zero_pfn	mm/memory.c	/^static int __init init_zero_pfn(void)$/;"	f	file:
init_zone_allows_reclaim	mm/page_alloc.c	/^static inline void init_zone_allows_reclaim(int nid)$/;"	f	file:
init_zone_allows_reclaim	mm/page_alloc.c	/^static void __paginginit init_zone_allows_reclaim(int nid)$/;"	f	file:
initarray_generic	mm/slab.c	/^static struct arraycache_init initarray_generic =$/;"	v	typeref:struct:arraycache_init	file:
initkmem_list3	mm/slab.c	/^static struct kmem_list3 __initdata initkmem_list3[NUM_INIT_LISTS];$/;"	v	typeref:struct:__initdata	file:
ino	kernel/audit_watch.c	/^	unsigned long		ino;	\/* associated inode number *\/$/;"	m	struct:audit_watch	file:
ino	kernel/auditsc.c	/^	unsigned long		ino;$/;"	m	struct:audit_names	file:
ino_count	kernel/auditsc.c	/^	int		    ino_count;$/;"	m	struct:audit_context	file:
inode	fs/direct-io.c	/^	struct inode *inode;$/;"	m	struct:dio	typeref:struct:dio::inode	file:
inode	fs/ext3/dir.c	/^	__u32		inode;$/;"	m	struct:fname	file:
inode	fs/ext3/ext3.h	/^	__le32	inode;			\/* Inode number *\/$/;"	m	struct:ext3_dir_entry
inode	fs/ext3/ext3.h	/^	__le32	inode;			\/* Inode number *\/$/;"	m	struct:ext3_dir_entry_2
inode	fs/ext3/namei.c	/^	__le32 inode;$/;"	m	struct:fake_dirent	file:
inode_add_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_add_bytes);$/;"	v
inode_add_bytes	fs/stat.c	/^void inode_add_bytes(struct inode *inode, loff_t bytes)$/;"	f
inode_add_lru	fs/inode.c	/^void inode_add_lru(struct inode *inode)$/;"	f
inode_bitmap	fs/ext3/ext3.h	/^	__u32 inode_bitmap;     \/* Absolute block number of inode bitmap *\/$/;"	m	struct:ext3_new_group_input
inode_bitmap	fs/ext3/ext3.h	/^	__u32 inode_bitmap;$/;"	m	struct:ext3_new_group_data
inode_capable	kernel/capability.c	/^bool inode_capable(const struct inode *inode, int cap)$/;"	f
inode_change_ok	fs/attr.c	/^EXPORT_SYMBOL(inode_change_ok);$/;"	v
inode_change_ok	fs/attr.c	/^int inode_change_ok(const struct inode *inode, struct iattr *attr)$/;"	f
inode_dio_done	fs/inode.c	/^EXPORT_SYMBOL(inode_dio_done);$/;"	v
inode_dio_done	fs/inode.c	/^void inode_dio_done(struct inode *inode)$/;"	f
inode_dio_wait	fs/inode.c	/^EXPORT_SYMBOL(inode_dio_wait);$/;"	v
inode_dio_wait	fs/inode.c	/^void inode_dio_wait(struct inode *inode)$/;"	f
inode_dirtied_after	fs/fs-writeback.c	/^static bool inode_dirtied_after(struct inode *inode, unsigned long t)$/;"	f	file:
inode_get_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_get_bytes);$/;"	v
inode_get_bytes	fs/stat.c	/^loff_t inode_get_bytes(struct inode *inode)$/;"	f
inode_has_buffers	fs/buffer.c	/^int inode_has_buffers(struct inode *inode)$/;"	f
inode_init	fs/inode.c	/^void __init inode_init(void)$/;"	f
inode_init_always	fs/inode.c	/^EXPORT_SYMBOL(inode_init_always);$/;"	v
inode_init_always	fs/inode.c	/^int inode_init_always(struct super_block *sb, struct inode *inode)$/;"	f
inode_init_early	fs/inode.c	/^void __init inode_init_early(void)$/;"	f
inode_init_once	fs/inode.c	/^EXPORT_SYMBOL(inode_init_once);$/;"	v
inode_init_once	fs/inode.c	/^void inode_init_once(struct inode *inode)$/;"	f
inode_init_owner	fs/inode.c	/^EXPORT_SYMBOL(inode_init_owner);$/;"	v
inode_init_owner	fs/inode.c	/^void inode_init_owner(struct inode *inode, const struct inode *dir,$/;"	f
inode_lru_list_add	fs/inode.c	/^static void inode_lru_list_add(struct inode *inode)$/;"	f	file:
inode_lru_list_del	fs/inode.c	/^static void inode_lru_list_del(struct inode *inode)$/;"	f	file:
inode_needs_sync	fs/inode.c	/^EXPORT_SYMBOL(inode_needs_sync);$/;"	v
inode_needs_sync	fs/inode.c	/^int inode_needs_sync(struct inode *inode)$/;"	f
inode_newsize_ok	fs/attr.c	/^EXPORT_SYMBOL(inode_newsize_ok);$/;"	v
inode_newsize_ok	fs/attr.c	/^int inode_newsize_ok(const struct inode *inode, loff_t offset)$/;"	f
inode_owner_or_capable	fs/inode.c	/^EXPORT_SYMBOL(inode_owner_or_capable);$/;"	v
inode_owner_or_capable	fs/inode.c	/^bool inode_owner_or_capable(const struct inode *inode)$/;"	f
inode_permission	fs/namei.c	/^EXPORT_SYMBOL(inode_permission);$/;"	v
inode_permission	fs/namei.c	/^int inode_permission(struct inode *inode, int mask)$/;"	f
inode_sb_list_add	fs/inode.c	/^EXPORT_SYMBOL_GPL(inode_sb_list_add);$/;"	v
inode_sb_list_add	fs/inode.c	/^void inode_sb_list_add(struct inode *inode)$/;"	f
inode_sb_list_del	fs/inode.c	/^static inline void inode_sb_list_del(struct inode *inode)$/;"	f	file:
inode_set_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_set_bytes);$/;"	v
inode_set_bytes	fs/stat.c	/^void inode_set_bytes(struct inode *inode, loff_t bytes)$/;"	f
inode_sub_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_sub_bytes);$/;"	v
inode_sub_bytes	fs/stat.c	/^void inode_sub_bytes(struct inode *inode, loff_t bytes)$/;"	f
inode_sync_complete	fs/fs-writeback.c	/^static void inode_sync_complete(struct inode *inode)$/;"	f	file:
inode_table	fs/ext3/ext3.h	/^	__u32 inode_table;      \/* Absolute block number of inode table start *\/$/;"	m	struct:ext3_new_group_input
inode_table	fs/ext3/ext3.h	/^	__u32 inode_table;$/;"	m	struct:ext3_new_group_data
inode_to_bdi	fs/fs-writeback.c	/^static inline struct backing_dev_info *inode_to_bdi(struct inode *inode)$/;"	f	file:
inode_wait	fs/inode.c	/^EXPORT_SYMBOL(inode_wait);$/;"	v
inode_wait	fs/inode.c	/^int inode_wait(void *word)$/;"	f
inode_wait_for_writeback	fs/fs-writeback.c	/^void inode_wait_for_writeback(struct inode *inode)$/;"	f
inode_wb_list_del	fs/fs-writeback.c	/^void inode_wb_list_del(struct inode *inode)$/;"	f
inodes_stat	fs/inode.c	/^struct inodes_stat_t inodes_stat;$/;"	v	typeref:struct:inodes_stat_t
inotify_add_to_idr	fs/notify/inotify/inotify_user.c	/^static int inotify_add_to_idr(struct idr *idr, spinlock_t *idr_lock,$/;"	f	file:
inotify_arg_to_mask	fs/notify/inotify/inotify_user.c	/^static inline __u32 inotify_arg_to_mask(u32 arg)$/;"	f	file:
inotify_event_private_data	fs/notify/inotify/inotify.h	/^struct inotify_event_private_data {$/;"	s
inotify_find_inode	fs/notify/inotify/inotify_user.c	/^static int inotify_find_inode(const char __user *dirname, struct path *path, unsigned flags)$/;"	f	file:
inotify_fops	fs/notify/inotify/inotify_user.c	/^static const struct file_operations inotify_fops = {$/;"	v	typeref:struct:file_operations	file:
inotify_free_event_priv	fs/notify/inotify/inotify_fsnotify.c	/^void inotify_free_event_priv(struct fsnotify_event_private_data *fsn_event_priv)$/;"	f
inotify_free_group_priv	fs/notify/inotify/inotify_fsnotify.c	/^static void inotify_free_group_priv(struct fsnotify_group *group)$/;"	f	file:
inotify_free_mark	fs/notify/inotify/inotify_user.c	/^static void inotify_free_mark(struct fsnotify_mark *fsn_mark)$/;"	f	file:
inotify_freeing_mark	fs/notify/inotify/inotify_fsnotify.c	/^static void inotify_freeing_mark(struct fsnotify_mark *fsn_mark, struct fsnotify_group *group)$/;"	f	file:
inotify_fsnotify_ops	fs/notify/inotify/inotify_fsnotify.c	/^const struct fsnotify_ops inotify_fsnotify_ops = {$/;"	v	typeref:struct:fsnotify_ops
inotify_handle_event	fs/notify/inotify/inotify_fsnotify.c	/^static int inotify_handle_event(struct fsnotify_group *group,$/;"	f	file:
inotify_idr_find	fs/notify/inotify/inotify_user.c	/^static struct inotify_inode_mark *inotify_idr_find(struct fsnotify_group *group,$/;"	f	file:
inotify_idr_find_locked	fs/notify/inotify/inotify_user.c	/^static struct inotify_inode_mark *inotify_idr_find_locked(struct fsnotify_group *group,$/;"	f	file:
inotify_ignored_and_remove_idr	fs/notify/inotify/inotify_user.c	/^void inotify_ignored_and_remove_idr(struct fsnotify_mark *fsn_mark,$/;"	f
inotify_inode_mark	fs/notify/inotify/inotify.h	/^struct inotify_inode_mark {$/;"	s
inotify_ioctl	fs/notify/inotify/inotify_user.c	/^static long inotify_ioctl(struct file *file, unsigned int cmd,$/;"	f	file:
inotify_mask_to_arg	fs/notify/inotify/inotify_user.c	/^static inline u32 inotify_mask_to_arg(__u32 mask)$/;"	f	file:
inotify_merge	fs/notify/inotify/inotify_fsnotify.c	/^static struct fsnotify_event *inotify_merge(struct list_head *list,$/;"	f	file:
inotify_new_group	fs/notify/inotify/inotify_user.c	/^static struct fsnotify_group *inotify_new_group(unsigned int max_events)$/;"	f	file:
inotify_new_watch	fs/notify/inotify/inotify_user.c	/^static int inotify_new_watch(struct fsnotify_group *group,$/;"	f	file:
inotify_poll	fs/notify/inotify/inotify_user.c	/^static unsigned int inotify_poll(struct file *file, poll_table *wait)$/;"	f	file:
inotify_read	fs/notify/inotify/inotify_user.c	/^static ssize_t inotify_read(struct file *file, char __user *buf,$/;"	f	file:
inotify_release	fs/notify/inotify/inotify_user.c	/^static int inotify_release(struct inode *ignored, struct file *file)$/;"	f	file:
inotify_remove_from_idr	fs/notify/inotify/inotify_user.c	/^static void inotify_remove_from_idr(struct fsnotify_group *group,$/;"	f	file:
inotify_should_send_event	fs/notify/inotify/inotify_fsnotify.c	/^static bool inotify_should_send_event(struct fsnotify_group *group, struct inode *inode,$/;"	f	file:
inotify_table	fs/notify/inotify/inotify_user.c	/^ctl_table inotify_table[] = {$/;"	v
inotify_update_existing_watch	fs/notify/inotify/inotify_user.c	/^static int inotify_update_existing_watch(struct fsnotify_group *group,$/;"	f	file:
inotify_update_watch	fs/notify/inotify/inotify_user.c	/^static int inotify_update_watch(struct fsnotify_group *group, struct inode *inode, u32 arg)$/;"	f	file:
inotify_user_setup	fs/notify/inotify/inotify_user.c	/^module_init(inotify_user_setup);$/;"	v
inotify_user_setup	fs/notify/inotify/inotify_user.c	/^static int __init inotify_user_setup(void)$/;"	f	file:
inp	fs/compat.c	/^	compat_uptr_t inp;$/;"	m	struct:compat_sel_arg_struct	file:
inp	fs/select.c	/^	fd_set __user *inp, *outp, *exp;$/;"	m	struct:sel_arg_struct	file:
insert_hash	kernel/audit_tree.c	/^static void insert_hash(struct audit_chunk *chunk)$/;"	f	file:
insert_inode_locked	fs/inode.c	/^EXPORT_SYMBOL(insert_inode_locked);$/;"	v
insert_inode_locked	fs/inode.c	/^int insert_inode_locked(struct inode *inode)$/;"	f
insert_inode_locked4	fs/inode.c	/^EXPORT_SYMBOL(insert_inode_locked4);$/;"	v
insert_inode_locked4	fs/inode.c	/^int insert_inode_locked4(struct inode *inode, unsigned long hashval,$/;"	f
insert_kthread_work	kernel/kthread.c	/^static void insert_kthread_work(struct kthread_worker *worker,$/;"	f	file:
insert_page	mm/memory.c	/^static int insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_pfn	mm/memory.c	/^static int insert_pfn(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_resource	kernel/resource.c	/^int insert_resource(struct resource *parent, struct resource *new)$/;"	f
insert_resource_conflict	kernel/resource.c	/^struct resource *insert_resource_conflict(struct resource *parent, struct resource *new)$/;"	f
insert_resource_expand_to_fit	kernel/resource.c	/^void insert_resource_expand_to_fit(struct resource *root, struct resource *new)$/;"	f
insert_to_mm_slots_hash	mm/huge_memory.c	/^static void insert_to_mm_slots_hash(struct mm_struct *mm,$/;"	f	file:
insert_to_mm_slots_hash	mm/ksm.c	/^static void insert_to_mm_slots_hash(struct mm_struct *mm,$/;"	f	file:
insert_vm_struct	mm/mmap.c	/^int insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f
insert_vmalloc_vm	mm/vmalloc.c	/^static void insert_vmalloc_vm(struct vm_struct *vm, struct vmap_area *va,$/;"	f	file:
insert_vmalloc_vmlist	mm/vmalloc.c	/^static void insert_vmalloc_vmlist(struct vm_struct *vm)$/;"	f	file:
insert_work	kernel/workqueue.c	/^static void insert_work(struct pool_workqueue *pwq, struct work_struct *work,$/;"	f	file:
insert_wq_barrier	kernel/workqueue.c	/^static void insert_wq_barrier(struct pool_workqueue *pwq,$/;"	f	file:
inside	fs/ext3/resize.c	18;"	d	file:
insn_size	kernel/kprobes.c	/^	size_t insn_size;	\/* size of instruction slot *\/$/;"	m	struct:kprobe_insn_cache	file:
insns	kernel/kprobes.c	/^	kprobe_opcode_t *insns;		\/* Page of instruction slots *\/$/;"	m	struct:kprobe_insn_page	file:
insns	kernel/seccomp.c	/^	struct sock_filter insns[];$/;"	m	struct:seccomp_filter	typeref:struct:seccomp_filter::sock_filter	file:
install_exec_creds	fs/exec.c	/^EXPORT_SYMBOL(install_exec_creds);$/;"	v
install_exec_creds	fs/exec.c	/^void install_exec_creds(struct linux_binprm *bprm)$/;"	f
install_file_pte	mm/fremap.c	/^static int install_file_pte(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
install_special_mapping	mm/mmap.c	/^int install_special_mapping(struct mm_struct *mm,$/;"	f
integrity_slab	fs/bio-integrity.c	/^struct integrity_slab {$/;"	s	file:
intent	fs/internal.h	/^	int intent;$/;"	m	struct:open_flags
interface_id	fs/compat_ioctl.c	/^	compat_int_t interface_id;	\/* [i] 'S' for SCSI generic (required) *\/$/;"	m	struct:sg_io_hdr32	file:
interleave_nid	mm/mempolicy.c	/^static inline unsigned interleave_nid(struct mempolicy *pol,$/;"	f	file:
interleave_nodes	mm/mempolicy.c	/^static unsigned interleave_nodes(struct mempolicy *policy)$/;"	f	file:
internal_add_timer	kernel/timer.c	/^static void internal_add_timer(struct tvec_base *base, struct timer_list *timer)$/;"	f	file:
interpreter	fs/binfmt_misc.c	/^	char *interpreter;		\/* filename of interpreter *\/$/;"	m	struct:__anon25	file:
inuse	mm/slab.c	/^			unsigned int inuse;	\/* num of objs active in slab *\/$/;"	m	struct:slab::__anon18::__anon19	file:
invalidate_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(invalidate_bdev);$/;"	v
invalidate_bdev	fs/block_dev.c	/^void invalidate_bdev(struct block_device *bdev)$/;"	f
invalidate_bh_lru	fs/buffer.c	/^static void invalidate_bh_lru(void *arg)$/;"	f	file:
invalidate_bh_lrus	fs/buffer.c	/^EXPORT_SYMBOL_GPL(invalidate_bh_lrus);$/;"	v
invalidate_bh_lrus	fs/buffer.c	/^void invalidate_bh_lrus(void)$/;"	f
invalidate_complete_page	mm/truncate.c	/^invalidate_complete_page(struct address_space *mapping, struct page *page)$/;"	f	file:
invalidate_complete_page2	mm/truncate.c	/^invalidate_complete_page2(struct address_space *mapping, struct page *page)$/;"	f	file:
invalidate_inode_buffers	fs/buffer.c	/^EXPORT_SYMBOL(invalidate_inode_buffers);$/;"	v
invalidate_inode_buffers	fs/buffer.c	/^void invalidate_inode_buffers(struct inode *inode)$/;"	f
invalidate_inode_page	mm/truncate.c	/^int invalidate_inode_page(struct page *page)$/;"	f
invalidate_inode_pages2	mm/truncate.c	/^EXPORT_SYMBOL_GPL(invalidate_inode_pages2);$/;"	v
invalidate_inode_pages2	mm/truncate.c	/^int invalidate_inode_pages2(struct address_space *mapping)$/;"	f
invalidate_inode_pages2_range	mm/truncate.c	/^EXPORT_SYMBOL_GPL(invalidate_inode_pages2_range);$/;"	v
invalidate_inode_pages2_range	mm/truncate.c	/^int invalidate_inode_pages2_range(struct address_space *mapping,$/;"	f
invalidate_inodes	fs/inode.c	/^int invalidate_inodes(struct super_block *sb, bool kill_dirty)$/;"	f
invalidate_mapping_pages	mm/truncate.c	/^EXPORT_SYMBOL(invalidate_mapping_pages);$/;"	v
invalidate_mapping_pages	mm/truncate.c	/^unsigned long invalidate_mapping_pages(struct address_space *mapping,$/;"	f
invent_group_ids	fs/namespace.c	/^static int invent_group_ids(struct mount *mnt, bool recurse)$/;"	f	file:
invoke_crf_remote	kernel/rcutree_plugin.h	/^static void invoke_crf_remote(struct rcu_head *rhp,$/;"	f
invoke_rcu_callbacks	kernel/rcutiny_plugin.h	/^static void invoke_rcu_callbacks(void)$/;"	f
invoke_rcu_callbacks	kernel/rcutiny_plugin.h	/^void invoke_rcu_callbacks(void)$/;"	f
invoke_rcu_callbacks	kernel/rcutree.c	/^static void invoke_rcu_callbacks(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
invoke_rcu_callbacks_kthread	kernel/rcutree_plugin.h	/^static void invoke_rcu_callbacks_kthread(void)$/;"	f
invoke_rcu_core	kernel/rcutree.c	/^static void invoke_rcu_core(void)$/;"	f	file:
invoke_softirq	kernel/softirq.c	/^static inline void invoke_softirq(void)$/;"	f	file:
io_destroy	fs/aio.c	/^static void io_destroy(struct kioctx *ioctx)$/;"	f	file:
io_error	fs/direct-io.c	/^	int io_error;			\/* IO error in completion path *\/$/;"	m	struct:dio	file:
io_fn_t	fs/read_write.h	/^typedef ssize_t (*io_fn_t)(struct file *, char __user *, size_t, loff_t *);$/;"	t
io_submit_one	fs/aio.c	/^static int io_submit_one(struct kioctx *ctx, struct iocb __user *user_iocb,$/;"	f	file:
io_type	fs/compat_ioctl.c	/^        char    io_type;$/;"	m	struct:serial_struct32	file:
iocb	fs/direct-io.c	/^	struct kiocb *iocb;		\/* kiocb *\/$/;"	m	struct:dio	typeref:struct:dio::kiocb	file:
ioctl_by_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(ioctl_by_bdev);$/;"	v
ioctl_by_bdev	fs/block_dev.c	/^int ioctl_by_bdev(struct block_device *bdev, unsigned cmd, unsigned long arg)$/;"	f
ioctl_fibmap	fs/ioctl.c	/^static int ioctl_fibmap(struct file *filp, int __user *p)$/;"	f	file:
ioctl_fiemap	fs/ioctl.c	/^static int ioctl_fiemap(struct file *filp, unsigned long arg)$/;"	f	file:
ioctl_fioasync	fs/ioctl.c	/^static int ioctl_fioasync(unsigned int fd, struct file *filp,$/;"	f	file:
ioctl_fionbio	fs/ioctl.c	/^static int ioctl_fionbio(struct file *filp, int __user *argp)$/;"	f	file:
ioctl_fsfreeze	fs/ioctl.c	/^static int ioctl_fsfreeze(struct file *filp)$/;"	f	file:
ioctl_fsthaw	fs/ioctl.c	/^static int ioctl_fsthaw(struct file *filp)$/;"	f	file:
ioctl_pointer	fs/compat_ioctl.c	/^static unsigned int ioctl_pointer[] = {$/;"	v	file:
ioctl_preallocate	fs/ioctl.c	/^int ioctl_preallocate(struct file *filp, void __user *argp)$/;"	f
ioctx_alloc	fs/aio.c	/^static struct kioctx *ioctx_alloc(unsigned nr_events)$/;"	f	file:
iomem_base	fs/compat_ioctl.c	/^        compat_uint_t   iomem_base;$/;"	m	struct:serial_struct32	file:
iomem_is_exclusive	kernel/resource.c	/^int iomem_is_exclusive(u64 addr)$/;"	f
iomem_map_sanity_check	kernel/resource.c	/^int iomem_map_sanity_check(resource_size_t addr, unsigned long size)$/;"	f
iomem_open	kernel/resource.c	/^static int iomem_open(struct inode *inode, struct file *file)$/;"	f	file:
iomem_reg_shift	fs/compat_ioctl.c	/^        unsigned short  iomem_reg_shift;$/;"	m	struct:serial_struct32	file:
iomem_resource	kernel/resource.c	/^EXPORT_SYMBOL(iomem_resource);$/;"	v
iomem_resource	kernel/resource.c	/^struct resource iomem_resource = {$/;"	v	typeref:struct:resource
ioport_resource	kernel/resource.c	/^EXPORT_SYMBOL(ioport_resource);$/;"	v
ioport_resource	kernel/resource.c	/^struct resource ioport_resource = {$/;"	v	typeref:struct:resource
ioports_open	kernel/resource.c	/^static int ioports_open(struct inode *inode, struct file *file)$/;"	f	file:
ioprio_best	fs/ioprio.c	/^int ioprio_best(unsigned short aprio, unsigned short bprio)$/;"	f
ioresources_init	kernel/resource.c	/^__initcall(ioresources_init);$/;"	v
ioresources_init	kernel/resource.c	/^static int __init ioresources_init(void)$/;"	f	file:
iov_base	fs/compat_ioctl.c	/^	compat_uint_t iov_base;$/;"	m	struct:sg_iovec32	file:
iov_fault_in_pages_read	fs/pipe.c	/^static void iov_fault_in_pages_read(struct iovec *iov, unsigned long len)$/;"	f	file:
iov_fault_in_pages_write	fs/pipe.c	/^static int iov_fault_in_pages_write(struct iovec *iov, unsigned long len)$/;"	f	file:
iov_fn_t	fs/read_write.h	/^typedef ssize_t (*iov_fn_t)(struct kiocb *, const struct iovec *,$/;"	t
iov_iter_advance	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_advance);$/;"	v
iov_iter_advance	mm/filemap.c	/^void iov_iter_advance(struct iov_iter *i, size_t bytes)$/;"	f
iov_iter_copy_from_user	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_copy_from_user);$/;"	v
iov_iter_copy_from_user	mm/filemap.c	/^size_t iov_iter_copy_from_user(struct page *page,$/;"	f
iov_iter_copy_from_user_atomic	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_copy_from_user_atomic);$/;"	v
iov_iter_copy_from_user_atomic	mm/filemap.c	/^size_t iov_iter_copy_from_user_atomic(struct page *page,$/;"	f
iov_iter_fault_in_readable	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_fault_in_readable);$/;"	v
iov_iter_fault_in_readable	mm/filemap.c	/^int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes)$/;"	f
iov_iter_single_seg_count	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_single_seg_count);$/;"	v
iov_iter_single_seg_count	mm/filemap.c	/^size_t iov_iter_single_seg_count(const struct iov_iter *i)$/;"	f
iov_len	fs/compat_ioctl.c	/^	compat_uint_t iov_len;$/;"	m	struct:sg_iovec32	file:
iov_shorten	fs/read_write.c	/^EXPORT_SYMBOL(iov_shorten);$/;"	v
iov_shorten	fs/read_write.c	/^unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to)$/;"	f
iovec_count	fs/compat_ioctl.c	/^	unsigned short iovec_count;	\/* [i] 0 implies no scatter gather *\/$/;"	m	struct:sg_io_hdr32	file:
iovecs	fs/bio.c	/^	struct bio_vec *iovecs;$/;"	m	struct:bio_map_data	typeref:struct:bio_map_data::bio_vec	file:
ip	kernel/rtmutex_common.h	/^	unsigned long		ip;$/;"	m	struct:rt_mutex_waiter
ipc	kernel/auditsc.c	/^		} ipc;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon45	file:
ipipe_prep	fs/splice.c	/^static int ipipe_prep(struct pipe_inode_info *pipe, unsigned int flags)$/;"	f	file:
iput	fs/inode.c	/^EXPORT_SYMBOL(iput);$/;"	v
iput	fs/inode.c	/^void iput(struct inode *inode)$/;"	f
iput_final	fs/inode.c	/^static void iput_final(struct inode *inode)$/;"	f	file:
irq	fs/compat_ioctl.c	/^        compat_int_t    irq;$/;"	m	struct:serial_struct32	file:
irq_capable	kernel/rcutorture.c	/^	int irq_capable;$/;"	m	struct:rcu_torture_ops	file:
irq_enter	kernel/softirq.c	/^void irq_enter(void)$/;"	f
irq_exit	kernel/softirq.c	/^void irq_exit(void)$/;"	f
irq_stat	kernel/softirq.c	/^EXPORT_SYMBOL(irq_stat);$/;"	v
irq_work_claim	kernel/irq_work.c	/^static bool irq_work_claim(struct irq_work *work)$/;"	f	file:
irq_work_cpu_notify	kernel/irq_work.c	/^static int irq_work_cpu_notify(struct notifier_block *self,$/;"	f	file:
irq_work_init_cpu_notifier	kernel/irq_work.c	/^device_initcall(irq_work_init_cpu_notifier);$/;"	v
irq_work_init_cpu_notifier	kernel/irq_work.c	/^static __init int irq_work_init_cpu_notifier(void)$/;"	f	file:
irq_work_needs_cpu	kernel/irq_work.c	/^bool irq_work_needs_cpu(void)$/;"	f
irq_work_queue	kernel/irq_work.c	/^EXPORT_SYMBOL_GPL(irq_work_queue);$/;"	v
irq_work_queue	kernel/irq_work.c	/^void irq_work_queue(struct irq_work *work)$/;"	f
irq_work_run	kernel/irq_work.c	/^EXPORT_SYMBOL_GPL(irq_work_run);$/;"	v
irq_work_run	kernel/irq_work.c	/^void irq_work_run(void)$/;"	f
irq_work_sync	kernel/irq_work.c	/^EXPORT_SYMBOL_GPL(irq_work_sync);$/;"	v
irq_work_sync	kernel/irq_work.c	/^void irq_work_sync(struct irq_work *work)$/;"	f
irqreader	kernel/rcutorture.c	/^static int irqreader = 1;	\/* RCU readers from irq (timers). *\/$/;"	v	file:
is_32bit_api	fs/ext3/dir.c	/^static inline int is_32bit_api(void)$/;"	f	file:
is_arm_mapping_symbol	kernel/module.c	/^static inline int is_arm_mapping_symbol(const char *str)$/;"	f	file:
is_async	fs/direct-io.c	/^	int is_async;			\/* is IO async ? *\/$/;"	m	struct:dio	file:
is_bad_inode	fs/bad_inode.c	/^EXPORT_SYMBOL(is_bad_inode);$/;"	v
is_bad_inode	fs/bad_inode.c	/^int is_bad_inode(struct inode *inode)$/;"	f
is_chained_work	kernel/workqueue.c	/^static bool is_chained_work(struct workqueue_struct *wq)$/;"	f	file:
is_compat	fs/exec.c	/^	bool is_compat;$/;"	m	struct:user_arg_ptr	file:
is_console_locked	kernel/printk.c	/^int is_console_locked(void)$/;"	f
is_core_symbol	kernel/module.c	/^static bool is_core_symbol(const Elf_Sym *src, const Elf_Shdr *sechdrs,$/;"	f	file:
is_cow_mapping	mm/memory.c	/^static inline bool is_cow_mapping(vm_flags_t flags)$/;"	f	file:
is_cpu_exclusive	kernel/cpuset.c	/^static inline int is_cpu_exclusive(const struct cpuset *cs)$/;"	f	file:
is_cpuset_online	kernel/cpuset.c	/^static inline bool is_cpuset_online(const struct cpuset *cs)$/;"	f	file:
is_cpuset_subset	kernel/cpuset.c	/^static int is_cpuset_subset(const struct cpuset *p, const struct cpuset *q)$/;"	f	file:
is_current_pgrp_orphaned	kernel/exit.c	/^int is_current_pgrp_orphaned(void)$/;"	f
is_dx	fs/ext3/ext3.h	899;"	d
is_dx_dir	fs/ext3/dir.c	/^static int is_dx_dir(struct inode *inode)$/;"	f	file:
is_elf_fdpic	fs/binfmt_elf_fdpic.c	/^static int is_elf_fdpic(struct elfhdr *hdr, struct file *file)$/;"	f	file:
is_exported	kernel/module.c	/^static int is_exported(const char *name, unsigned long value,$/;"	f	file:
is_file_epoll	fs/eventpoll.c	/^static inline int is_file_epoll(struct file *f)$/;"	f	file:
is_free_buddy_page	mm/page_alloc.c	/^bool is_free_buddy_page(struct page *page)$/;"	f
is_hardlockup	kernel/watchdog.c	/^static int is_hardlockup(void)$/;"	f	file:
is_huge_zero_pfn	mm/huge_memory.c	/^static inline bool is_huge_zero_pfn(unsigned long pfn)$/;"	f	file:
is_huge_zero_pmd	mm/huge_memory.c	/^static inline bool is_huge_zero_pmd(pmd_t pmd)$/;"	f	file:
is_hugepage_on_freelist	mm/hugetlb.c	/^static int is_hugepage_on_freelist(struct page *hpage)$/;"	f	file:
is_hugetlb_entry_hwpoisoned	mm/hugetlb.c	/^static int is_hugetlb_entry_hwpoisoned(pte_t pte)$/;"	f	file:
is_hugetlb_entry_migration	mm/hugetlb.c	/^static int is_hugetlb_entry_migration(pte_t pte)$/;"	f	file:
is_kernel	kernel/kallsyms.c	/^static inline int is_kernel(unsigned long addr)$/;"	f	file:
is_kernel_inittext	kernel/kallsyms.c	/^static inline int is_kernel_inittext(unsigned long addr)$/;"	f	file:
is_kernel_percpu_address	mm/percpu.c	/^bool is_kernel_percpu_address(unsigned long addr)$/;"	f
is_kernel_text	kernel/kallsyms.c	/^static inline int is_kernel_text(unsigned long addr)$/;"	f	file:
is_ksym_addr	kernel/kallsyms.c	/^static int is_ksym_addr(unsigned long addr)$/;"	f	file:
is_live	fs/dcookies.c	/^static inline int is_live(void)$/;"	f	file:
is_mem_exclusive	kernel/cpuset.c	/^static inline int is_mem_exclusive(const struct cpuset *cs)$/;"	f	file:
is_mem_hardwall	kernel/cpuset.c	/^static inline int is_mem_hardwall(const struct cpuset *cs)$/;"	f	file:
is_mem_section_removable	mm/memory_hotplug.c	/^int is_mem_section_removable(unsigned long start_pfn, unsigned long nr_pages)$/;"	f
is_memblock_offlined_cb	mm/memory_hotplug.c	/^static int is_memblock_offlined_cb(struct memory_block *mem, void *arg)$/;"	f	file:
is_memory_migrate	kernel/cpuset.c	/^static inline int is_memory_migrate(const struct cpuset *cs)$/;"	f	file:
is_mergeable_anon_vma	mm/mmap.c	/^static inline int is_mergeable_anon_vma(struct anon_vma *anon_vma1,$/;"	f	file:
is_mergeable_vma	mm/mmap.c	/^static inline int is_mergeable_vma(struct vm_area_struct *vma,$/;"	f	file:
is_module_address	kernel/module.c	/^bool is_module_address(unsigned long addr)$/;"	f
is_module_percpu_address	kernel/module.c	/^bool is_module_percpu_address(unsigned long addr)$/;"	f
is_module_text_address	kernel/module.c	/^bool is_module_text_address(unsigned long addr)$/;"	f
is_mounted	fs/mount.h	/^static inline int is_mounted(struct vfsmount *mnt)$/;"	f
is_nocb_cpu	kernel/rcutree_plugin.h	/^static bool is_nocb_cpu(int cpu)$/;"	f
is_obj_pfmemalloc	mm/slab.c	/^static inline bool is_obj_pfmemalloc(void *objp)$/;"	f	file:
is_our_pages	fs/bio.c	/^	int is_our_pages;$/;"	m	struct:bio_map_data	file:
is_packetized	fs/pipe.c	/^static inline int is_packetized(struct file *file)$/;"	f	file:
is_page_busy	mm/dmapool.c	/^static inline int is_page_busy(struct dma_page *page)$/;"	f	file:
is_page_cache_freeable	mm/vmscan.c	/^static inline int is_page_cache_freeable(struct page *page)$/;"	f	file:
is_pageblock_removable_nolock	mm/page_alloc.c	/^bool is_pageblock_removable_nolock(struct page *page)$/;"	f
is_path_reachable	fs/namespace.c	/^bool is_path_reachable(struct mount *mnt, struct dentry *dentry,$/;"	f
is_root_cache	mm/slab.h	/^static inline bool is_root_cache(struct kmem_cache *s)$/;"	f
is_sched_load_balance	kernel/cpuset.c	/^static inline int is_sched_load_balance(const struct cpuset *cs)$/;"	f	file:
is_si_special	kernel/signal.c	/^static inline int is_si_special(const struct siginfo *info)$/;"	f	file:
is_singleblock	kernel/ptrace.c	629;"	d	file:
is_singleblock	kernel/ptrace.c	631;"	d	file:
is_singlestep	kernel/ptrace.c	623;"	d	file:
is_singlestep	kernel/ptrace.c	625;"	d	file:
is_slab_pfmemalloc	mm/slab.c	/^static inline bool is_slab_pfmemalloc(struct slab *slabp)$/;"	f	file:
is_softlockup	kernel/watchdog.c	/^static int is_softlockup(unsigned long touch_ts)$/;"	f	file:
is_spread_page	kernel/cpuset.c	/^static inline int is_spread_page(const struct cpuset *cs)$/;"	f	file:
is_spread_slab	kernel/cpuset.c	/^static inline int is_spread_slab(const struct cpuset *cs)$/;"	f	file:
is_subdir	fs/dcache.c	/^int is_subdir(struct dentry *new_dentry, struct dentry *old_dentry)$/;"	f
is_sysemu_singlestep	kernel/ptrace.c	635;"	d	file:
is_sysemu_singlestep	kernel/ptrace.c	637;"	d	file:
is_valid_nodemask	mm/mempolicy.c	/^static int is_valid_nodemask(const nodemask_t *nodemask)$/;"	f	file:
is_valid_xattr	kernel/cgroup.c	/^static bool is_valid_xattr(const char *name)$/;"	f	file:
is_vma_resv_set	mm/hugetlb.c	/^static int is_vma_resv_set(struct vm_area_struct *vma, unsigned long flag)$/;"	f	file:
is_vma_temporary_stack	mm/rmap.c	/^bool is_vma_temporary_stack(struct vm_area_struct *vma)$/;"	f
is_vmalloc_or_module_addr	mm/vmalloc.c	/^int is_vmalloc_or_module_addr(const void *x)$/;"	f
isa_page_pool	mm/bounce.c	/^static mempool_t *page_pool, *isa_page_pool;$/;"	v	file:
isolate_freepages	mm/compaction.c	/^static void isolate_freepages(struct zone *zone,$/;"	f	file:
isolate_freepages_block	mm/compaction.c	/^static unsigned long isolate_freepages_block(struct compact_control *cc,$/;"	f	file:
isolate_freepages_range	mm/compaction.c	/^isolate_freepages_range(struct compact_control *cc,$/;"	f
isolate_lru_page	mm/vmscan.c	/^int isolate_lru_page(struct page *page)$/;"	f
isolate_lru_pages	mm/vmscan.c	/^static unsigned long isolate_lru_pages(unsigned long nr_to_scan,$/;"	f	file:
isolate_migrate_t	mm/compaction.c	/^} isolate_migrate_t;$/;"	t	typeref:enum:__anon1	file:
isolate_migratepages	mm/compaction.c	/^static isolate_migrate_t isolate_migratepages(struct zone *zone,$/;"	f	file:
isolate_migratepages_range	mm/compaction.c	/^isolate_migratepages_range(struct zone *zone, struct compact_control *cc,$/;"	f
isolation_suitable	mm/compaction.c	/^static inline bool isolation_suitable(struct compact_control *cc,$/;"	f	file:
it_real_fn	kernel/itimer.c	/^enum hrtimer_restart it_real_fn(struct hrtimer *timer)$/;"	f
iter_end	kernel/lockdep_proc.c	/^	struct lock_stat_data *iter_end;$/;"	m	struct:lock_stat_seq	typeref:struct:lock_stat_seq::lock_stat_data	file:
iterate_bdevs	fs/block_dev.c	/^void iterate_bdevs(void (*func)(struct block_device *, void *), void *arg)$/;"	f
iterate_chain_key	kernel/lockdep.c	314;"	d	file:
iterate_fd	fs/file.c	/^EXPORT_SYMBOL(iterate_fd);$/;"	v
iterate_fd	fs/file.c	/^int iterate_fd(struct files_struct *files, unsigned n,$/;"	f
iterate_mounts	fs/namespace.c	/^int iterate_mounts(int (*f)(struct vfsmount *, void *), void *arg,$/;"	f
iterate_supers	fs/super.c	/^void iterate_supers(void (*f)(struct super_block *, void *), void *arg)$/;"	f
iterate_supers_type	fs/super.c	/^EXPORT_SYMBOL(iterate_supers_type);$/;"	v
iterate_supers_type	fs/super.c	/^void iterate_supers_type(struct file_system_type *type,$/;"	f
itimer_delete	kernel/posix-timers.c	/^static void itimer_delete(struct k_itimer *timer)$/;"	f	file:
itimer_get_remtime	kernel/itimer.c	/^static struct timeval itimer_get_remtime(struct hrtimer *timer)$/;"	f	file:
iunique	fs/inode.c	/^EXPORT_SYMBOL(iunique);$/;"	v
iunique	fs/inode.c	/^ino_t iunique(struct super_block *sb, ino_t max_reserved)$/;"	f
j_kprobe_target	kernel/test_kprobes.c	/^static u32 j_kprobe_target(u32 value)$/;"	f	file:
jiffies	mm/kmemleak.c	/^	unsigned long jiffies;		\/* creation timestamp *\/$/;"	m	struct:kmemleak_object	file:
jiffies_64	kernel/timer.c	/^EXPORT_SYMBOL(jiffies_64);$/;"	v
jiffies_64_to_clock_t	kernel/time.c	/^EXPORT_SYMBOL(jiffies_64_to_clock_t);$/;"	v
jiffies_64_to_clock_t	kernel/time.c	/^u64 jiffies_64_to_clock_t(u64 x)$/;"	f
jiffies_force_qs	kernel/rcutree.h	/^	unsigned long jiffies_force_qs;		\/* Time at which to invoke *\/$/;"	m	struct:rcu_state
jiffies_last_scan	mm/kmemleak.c	/^static unsigned long jiffies_last_scan;$/;"	v	file:
jiffies_min_age	mm/kmemleak.c	/^static unsigned long jiffies_min_age;$/;"	v	file:
jiffies_scan_wait	mm/kmemleak.c	/^static signed long jiffies_scan_wait;$/;"	v	file:
jiffies_stall	kernel/rcutree.h	/^	unsigned long jiffies_stall;		\/* Time at which to check *\/$/;"	m	struct:rcu_state
jiffies_till_first_fqs	kernel/rcutree.c	/^static ulong jiffies_till_first_fqs = RCU_JIFFIES_TILL_FORCE_QS;$/;"	v	file:
jiffies_till_next_fqs	kernel/rcutree.c	/^static ulong jiffies_till_next_fqs = RCU_JIFFIES_TILL_FORCE_QS;$/;"	v	file:
jiffies_to_clock_t	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_clock_t);$/;"	v
jiffies_to_clock_t	kernel/time.c	/^clock_t jiffies_to_clock_t(unsigned long x)$/;"	f
jiffies_to_msecs	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_msecs);$/;"	v
jiffies_to_msecs	kernel/time.c	/^unsigned int jiffies_to_msecs(const unsigned long j)$/;"	f
jiffies_to_timespec	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_timespec);$/;"	v
jiffies_to_timespec	kernel/time.c	/^jiffies_to_timespec(const unsigned long jiffies, struct timespec *value)$/;"	f
jiffies_to_timeval	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_timeval);$/;"	v
jiffies_to_timeval	kernel/time.c	/^void jiffies_to_timeval(const unsigned long jiffies, struct timeval *value)$/;"	f
jiffies_to_usecs	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_usecs);$/;"	v
jiffies_to_usecs	kernel/time.c	/^unsigned int jiffies_to_usecs(const unsigned long j)$/;"	f
journal_bdev	fs/ext3/ext3.h	/^	struct block_device *journal_bdev;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::block_device
journal_dirty_data_fn	fs/ext3/inode.c	/^static int journal_dirty_data_fn(handle_t *handle, struct buffer_head *bh)$/;"	f	file:
jp	kernel/test_kprobes.c	/^static struct jprobe jp = {$/;"	v	typeref:struct:jprobe	file:
jp2	kernel/test_kprobes.c	/^static struct jprobe jp2 = {$/;"	v	typeref:struct:jprobe	file:
jph_val	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
jprobe_return	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(jprobe_return);$/;"	v
jump_label_add_module	kernel/jump_label.c	/^static int jump_label_add_module(struct module *mod)$/;"	f	file:
jump_label_apply_nops	kernel/jump_label.c	/^void jump_label_apply_nops(struct module *mod)$/;"	f
jump_label_cmp	kernel/jump_label.c	/^static int jump_label_cmp(const void *a, const void *b)$/;"	f	file:
jump_label_del_module	kernel/jump_label.c	/^static void jump_label_del_module(struct module *mod)$/;"	f	file:
jump_label_init	kernel/jump_label.c	/^void __init jump_label_init(void)$/;"	f
jump_label_init_module	kernel/jump_label.c	/^early_initcall(jump_label_init_module);$/;"	v
jump_label_init_module	kernel/jump_label.c	/^static __init int jump_label_init_module(void)$/;"	f	file:
jump_label_invalidate_module_init	kernel/jump_label.c	/^static void jump_label_invalidate_module_init(struct module *mod)$/;"	f	file:
jump_label_lock	kernel/jump_label.c	/^void jump_label_lock(void)$/;"	f
jump_label_module_nb	kernel/jump_label.c	/^struct notifier_block jump_label_module_nb = {$/;"	v	typeref:struct:notifier_block
jump_label_module_notify	kernel/jump_label.c	/^jump_label_module_notify(struct notifier_block *self, unsigned long val,$/;"	f	file:
jump_label_rate_limit	kernel/jump_label.c	/^EXPORT_SYMBOL_GPL(jump_label_rate_limit);$/;"	v
jump_label_rate_limit	kernel/jump_label.c	/^void jump_label_rate_limit(struct static_key_deferred *key,$/;"	f
jump_label_sort_entries	kernel/jump_label.c	/^jump_label_sort_entries(struct jump_entry *start, struct jump_entry *stop)$/;"	f	file:
jump_label_text_reserved	kernel/jump_label.c	/^int jump_label_text_reserved(void *start, void *end)$/;"	f
jump_label_type	kernel/jump_label.c	/^static enum jump_label_type jump_label_type(struct static_key *key)$/;"	f	file:
jump_label_unlock	kernel/jump_label.c	/^void jump_label_unlock(void)$/;"	f
jump_label_update	kernel/jump_label.c	/^static void jump_label_update(struct static_key *key, int enable)$/;"	f	file:
jump_label_update_timeout	kernel/jump_label.c	/^static void jump_label_update_timeout(struct work_struct *work)$/;"	f	file:
just_wait	mm/ksm.c	/^static int just_wait(void *word)$/;"	f	file:
k_getrusage	kernel/sys.c	/^static void k_getrusage(struct task_struct *p, int who, struct rusage *r)$/;"	f	file:
k_itimer_rcu_free	kernel/posix-timers.c	/^static void k_itimer_rcu_free(struct rcu_head *head)$/;"	f	file:
kallsym_iter	kernel/kallsyms.c	/^struct kallsym_iter {$/;"	s	file:
kallsyms_expand_symbol	kernel/kallsyms.c	/^static unsigned int kallsyms_expand_symbol(unsigned int off, char *result)$/;"	f	file:
kallsyms_get_symbol_type	kernel/kallsyms.c	/^static char kallsyms_get_symbol_type(unsigned int off)$/;"	f	file:
kallsyms_init	kernel/kallsyms.c	/^device_initcall(kallsyms_init);$/;"	v
kallsyms_init	kernel/kallsyms.c	/^static int __init kallsyms_init(void)$/;"	f	file:
kallsyms_lookup	kernel/kallsyms.c	/^const char *kallsyms_lookup(unsigned long addr,$/;"	f
kallsyms_lookup_name	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(kallsyms_lookup_name);$/;"	v
kallsyms_lookup_name	kernel/kallsyms.c	/^unsigned long kallsyms_lookup_name(const char *name)$/;"	f
kallsyms_lookup_size_offset	kernel/kallsyms.c	/^int kallsyms_lookup_size_offset(unsigned long addr, unsigned long *symbolsize,$/;"	f
kallsyms_on_each_symbol	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(kallsyms_on_each_symbol);$/;"	v
kallsyms_on_each_symbol	kernel/kallsyms.c	/^int kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,$/;"	f
kallsyms_op	kernel/kallsyms.c	/^static const struct seq_operations kallsyms_op = {$/;"	v	typeref:struct:seq_operations	file:
kallsyms_open	kernel/kallsyms.c	/^static int kallsyms_open(struct inode *inode, struct file *file)$/;"	f	file:
kallsyms_operations	kernel/kallsyms.c	/^static const struct file_operations kallsyms_operations = {$/;"	v	typeref:struct:file_operations	file:
kauditd_send_skb	kernel/audit.c	/^static void kauditd_send_skb(struct sk_buff *skb)$/;"	f	file:
kauditd_task	kernel/audit.c	/^static struct task_struct *kauditd_task;$/;"	v	typeref:struct:task_struct	file:
kauditd_thread	kernel/audit.c	/^static int kauditd_thread(void *dummy)$/;"	f	file:
kcmp_cookies_init	kernel/kcmp.c	/^arch_initcall(kcmp_cookies_init);$/;"	v
kcmp_cookies_init	kernel/kcmp.c	/^static __init int kcmp_cookies_init(void)$/;"	f	file:
kcmp_lock	kernel/kcmp.c	/^static int kcmp_lock(struct mutex *m1, struct mutex *m2)$/;"	f	file:
kcmp_ptr	kernel/kcmp.c	/^static int kcmp_ptr(void *v1, void *v2, enum kcmp_type type)$/;"	f	file:
kcmp_unlock	kernel/kcmp.c	/^static void kcmp_unlock(struct mutex *m1, struct mutex *m2)$/;"	f	file:
kdb_modules	kernel/module.c	/^struct list_head *kdb_modules = &modules; \/* kdb needs the list of modules *\/$/;"	v	typeref:struct:list_head
kdb_send_sig_info	kernel/signal.c	/^kdb_send_sig_info(struct task_struct *t, struct siginfo *info)$/;"	f
kdb_walk_kallsyms	kernel/kallsyms.c	/^const char *kdb_walk_kallsyms(loff_t *pos)$/;"	f
kdcore	fs/binfmt_elf_fdpic.c	54;"	d	file:
kdebug	fs/binfmt_elf_fdpic.c	48;"	d	file:
kdebug	kernel/cred.c	26;"	d	file:
kdebug	mm/nommu.c	52;"	d	file:
keep_bootcon	kernel/printk.c	/^static int __read_mostly keep_bootcon;$/;"	v	file:
keep_bootcon_setup	kernel/printk.c	/^static int __init keep_bootcon_setup(char *str)$/;"	f	file:
keep_working	kernel/workqueue.c	/^static bool keep_working(struct worker_pool *pool)$/;"	f	file:
kenter	mm/nommu.c	48;"	d	file:
kern_mount_data	fs/namespace.c	/^EXPORT_SYMBOL_GPL(kern_mount_data);$/;"	v
kern_mount_data	fs/namespace.c	/^struct vfsmount *kern_mount_data(struct file_system_type *type, void *data)$/;"	f
kern_path	fs/namei.c	/^EXPORT_SYMBOL(kern_path);$/;"	v
kern_path	fs/namei.c	/^int kern_path(const char *name, unsigned int flags, struct path *path)$/;"	f
kern_path	kernel/pid_namespace.c	/^static struct ctl_path kern_path[] = { { .procname = "kernel", }, { } };$/;"	v	typeref:struct:ctl_path	file:
kern_path_create	fs/namei.c	/^EXPORT_SYMBOL(kern_path_create);$/;"	v
kern_path_create	fs/namei.c	/^struct dentry *kern_path_create(int dfd, const char *pathname,$/;"	f
kern_path_locked	fs/namei.c	/^struct dentry *kern_path_locked(const char *name, struct path *path)$/;"	f
kern_table	kernel/sysctl.c	/^static struct ctl_table kern_table[] = {$/;"	v	typeref:struct:ctl_table	file:
kern_table	kernel/sysctl.c	/^static struct ctl_table kern_table[];$/;"	v	typeref:struct:ctl_table	file:
kern_unmount	fs/namespace.c	/^EXPORT_SYMBOL(kern_unmount);$/;"	v
kern_unmount	fs/namespace.c	/^void kern_unmount(struct vfsmount *mnt)$/;"	f
kernel_add_sysfs_param	kernel/params.c	/^static void __init kernel_add_sysfs_param(const char *name,$/;"	f	file:
kernel_attr_group	kernel/ksysfs.c	/^static struct attribute_group kernel_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
kernel_attrs	kernel/ksysfs.c	/^static struct attribute * kernel_attrs[] = {$/;"	v	typeref:struct:attribute	file:
kernel_config_data_size	kernel/configs.c	52;"	d	file:
kernel_halt	kernel/sys.c	/^EXPORT_SYMBOL_GPL(kernel_halt);$/;"	v
kernel_halt	kernel/sys.c	/^void kernel_halt(void)$/;"	f
kernel_kobj	kernel/ksysfs.c	/^EXPORT_SYMBOL_GPL(kernel_kobj);$/;"	v
kernel_kobj	kernel/ksysfs.c	/^struct kobject *kernel_kobj;$/;"	v	typeref:struct:kobject
kernel_map_pages	mm/debug-pagealloc.c	/^void kernel_map_pages(struct page *page, int numpages, int enable)$/;"	f
kernel_power_off	kernel/sys.c	/^EXPORT_SYMBOL_GPL(kernel_power_off);$/;"	v
kernel_power_off	kernel/sys.c	/^void kernel_power_off(void)$/;"	f
kernel_read	fs/exec.c	/^EXPORT_SYMBOL(kernel_read);$/;"	v
kernel_read	fs/exec.c	/^int kernel_read(struct file *file, loff_t offset,$/;"	f
kernel_readv	fs/splice.c	/^static ssize_t kernel_readv(struct file *file, const struct iovec *vec,$/;"	f	file:
kernel_restart	kernel/sys.c	/^EXPORT_SYMBOL_GPL(kernel_restart);$/;"	v
kernel_restart	kernel/sys.c	/^void kernel_restart(char *cmd)$/;"	f
kernel_restart_prepare	kernel/sys.c	/^void kernel_restart_prepare(char *cmd)$/;"	f
kernel_shutdown_prepare	kernel/sys.c	/^static void kernel_shutdown_prepare(enum system_states state)$/;"	f	file:
kernel_text_address	kernel/extable.c	/^int kernel_text_address(unsigned long addr)$/;"	f
kernel_thread	kernel/fork.c	/^pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)$/;"	f
kernel_write	fs/splice.c	/^EXPORT_SYMBOL(kernel_write);$/;"	v
kernel_write	fs/splice.c	/^ssize_t kernel_write(struct file *file, const char *buf, size_t count,$/;"	f
keventd_up	kernel/workqueue.c	/^int keventd_up(void)$/;"	f
kexec_crash_image	kernel/kexec.c	/^struct kimage *kexec_crash_image;$/;"	v	typeref:struct:kimage
kexec_crash_loaded	kernel/ksysfs.c	/^KERNEL_ATTR_RO(kexec_crash_loaded);$/;"	v
kexec_crash_loaded_show	kernel/ksysfs.c	/^static ssize_t kexec_crash_loaded_show(struct kobject *kobj,$/;"	f	file:
kexec_crash_size	kernel/ksysfs.c	/^KERNEL_ATTR_RW(kexec_crash_size);$/;"	v
kexec_crash_size_show	kernel/ksysfs.c	/^static ssize_t kexec_crash_size_show(struct kobject *kobj,$/;"	f	file:
kexec_crash_size_store	kernel/ksysfs.c	/^static ssize_t kexec_crash_size_store(struct kobject *kobj,$/;"	f	file:
kexec_image	kernel/kexec.c	/^struct kimage *kexec_image;$/;"	v	typeref:struct:kimage
kexec_loaded	kernel/ksysfs.c	/^KERNEL_ATTR_RO(kexec_loaded);$/;"	v
kexec_loaded_show	kernel/ksysfs.c	/^static ssize_t kexec_loaded_show(struct kobject *kobj,$/;"	f	file:
kexec_should_crash	kernel/kexec.c	/^int kexec_should_crash(struct task_struct *p)$/;"	f
key	fs/ext3/inode.c	/^	__le32	key;$/;"	m	struct:__anon40	file:
key	kernel/cgroup.c	/^	struct { enum cgroup_filetype type; struct pid_namespace *ns; } key;$/;"	m	struct:cgroup_pidlist	typeref:struct:cgroup_pidlist::__anon54	file:
key	kernel/futex.c	/^	union futex_key key;$/;"	m	struct:futex_pi_state	typeref:union:futex_pi_state::futex_key	file:
key	kernel/futex.c	/^	union futex_key key;$/;"	m	struct:futex_q	typeref:union:futex_q::futex_key	file:
key_id_len	kernel/module_signing.c	/^	u8	key_id_len;	\/* Length of key identifier *\/$/;"	m	struct:module_signature	file:
kfree	mm/slab.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	mm/slab.c	/^void kfree(const void *objp)$/;"	f
kfree	mm/slob.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	mm/slob.c	/^void kfree(const void *block)$/;"	f
kfree	mm/slub.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	mm/slub.c	/^void kfree(const void *x)$/;"	f
kfree	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kfree);$/;"	v
kfree_call_rcu	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(kfree_call_rcu);$/;"	v
kfree_call_rcu	kernel/rcutree_plugin.h	/^void kfree_call_rcu(struct rcu_head *head,$/;"	f
kfree_debugcheck	mm/slab.c	/^static void kfree_debugcheck(const void *objp)$/;"	f	file:
kfree_debugcheck	mm/slab.c	3070;"	d	file:
khelper_wq	kernel/kmod.c	/^static struct workqueue_struct *khelper_wq;$/;"	v	typeref:struct:workqueue_struct	file:
khugepaged	mm/huge_memory.c	/^static int khugepaged(void *none)$/;"	f	file:
khugepaged_alloc_hugepage	mm/huge_memory.c	/^static struct page *khugepaged_alloc_hugepage(bool *wait)$/;"	f	file:
khugepaged_alloc_page	mm/huge_memory.c	/^*khugepaged_alloc_page(struct page **hpage, struct mm_struct *mm,$/;"	f	file:
khugepaged_alloc_sleep	mm/huge_memory.c	/^static void khugepaged_alloc_sleep(void)$/;"	f	file:
khugepaged_attr	mm/huge_memory.c	/^static struct attribute *khugepaged_attr[] = {$/;"	v	typeref:struct:attribute	file:
khugepaged_attr_group	mm/huge_memory.c	/^static struct attribute_group khugepaged_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
khugepaged_defrag_attr	mm/huge_memory.c	/^static struct kobj_attribute khugepaged_defrag_attr =$/;"	v	typeref:struct:kobj_attribute	file:
khugepaged_defrag_show	mm/huge_memory.c	/^static ssize_t khugepaged_defrag_show(struct kobject *kobj,$/;"	f	file:
khugepaged_defrag_store	mm/huge_memory.c	/^static ssize_t khugepaged_defrag_store(struct kobject *kobj,$/;"	f	file:
khugepaged_do_scan	mm/huge_memory.c	/^static void khugepaged_do_scan(void)$/;"	f	file:
khugepaged_enter_vma_merge	mm/huge_memory.c	/^int khugepaged_enter_vma_merge(struct vm_area_struct *vma)$/;"	f
khugepaged_full_scans	mm/huge_memory.c	/^static unsigned int khugepaged_full_scans;$/;"	v	file:
khugepaged_has_work	mm/huge_memory.c	/^static int khugepaged_has_work(void)$/;"	f	file:
khugepaged_max_ptes_none_attr	mm/huge_memory.c	/^static struct kobj_attribute khugepaged_max_ptes_none_attr =$/;"	v	typeref:struct:kobj_attribute	file:
khugepaged_max_ptes_none_show	mm/huge_memory.c	/^static ssize_t khugepaged_max_ptes_none_show(struct kobject *kobj,$/;"	f	file:
khugepaged_max_ptes_none_store	mm/huge_memory.c	/^static ssize_t khugepaged_max_ptes_none_store(struct kobject *kobj,$/;"	f	file:
khugepaged_pages_collapsed	mm/huge_memory.c	/^static unsigned int khugepaged_pages_collapsed;$/;"	v	file:
khugepaged_prealloc_page	mm/huge_memory.c	/^static bool khugepaged_prealloc_page(struct page **hpage, bool *wait)$/;"	f	file:
khugepaged_scan	mm/huge_memory.c	/^static struct khugepaged_scan khugepaged_scan = {$/;"	v	typeref:struct:khugepaged_scan	file:
khugepaged_scan	mm/huge_memory.c	/^struct khugepaged_scan {$/;"	s	file:
khugepaged_scan_pmd	mm/huge_memory.c	/^static int khugepaged_scan_pmd(struct mm_struct *mm,$/;"	f	file:
khugepaged_slab_init	mm/huge_memory.c	/^static int __init khugepaged_slab_init(void)$/;"	f	file:
khugepaged_test_exit	mm/huge_memory.c	/^static inline int khugepaged_test_exit(struct mm_struct *mm)$/;"	f	file:
khugepaged_wait_event	mm/huge_memory.c	/^static int khugepaged_wait_event(void)$/;"	f	file:
khugepaged_wait_work	mm/huge_memory.c	/^static void khugepaged_wait_work(void)$/;"	f	file:
kick_all_cpus_sync	kernel/smp.c	/^EXPORT_SYMBOL_GPL(kick_all_cpus_sync);$/;"	v
kick_all_cpus_sync	kernel/smp.c	/^void kick_all_cpus_sync(void)$/;"	f
kick_iocb	fs/aio.c	/^EXPORT_SYMBOL(kick_iocb);$/;"	v
kick_iocb	fs/aio.c	/^void kick_iocb(struct kiocb *iocb)$/;"	f
kick_kprobe_optimizer	kernel/kprobes.c	/^static __kprobes void kick_kprobe_optimizer(void)$/;"	f	file:
kill_anon_super	fs/super.c	/^EXPORT_SYMBOL(kill_anon_super);$/;"	v
kill_anon_super	fs/super.c	/^void kill_anon_super(struct super_block *sb)$/;"	f
kill_as_cred_perm	kernel/signal.c	/^static int kill_as_cred_perm(const struct cred *cred,$/;"	f	file:
kill_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(kill_bdev);$/;"	v
kill_bdev	fs/block_dev.c	/^void kill_bdev(struct block_device *bdev)$/;"	f
kill_block_super	fs/super.c	/^EXPORT_SYMBOL(kill_block_super);$/;"	v
kill_block_super	fs/super.c	/^void kill_block_super(struct super_block *sb)$/;"	f
kill_ctx	fs/aio.c	/^static void kill_ctx(struct kioctx *ctx)$/;"	f	file:
kill_fasync	fs/fcntl.c	/^EXPORT_SYMBOL(kill_fasync);$/;"	v
kill_fasync	fs/fcntl.c	/^void kill_fasync(struct fasync_struct **fp, int sig, int band)$/;"	f
kill_fasync_rcu	fs/fcntl.c	/^static void kill_fasync_rcu(struct fasync_struct *fa, int sig, int band)$/;"	f	file:
kill_kprobe	kernel/kprobes.c	/^static void __kprobes kill_kprobe(struct kprobe *p)$/;"	f	file:
kill_litter_super	fs/super.c	/^EXPORT_SYMBOL(kill_litter_super);$/;"	v
kill_litter_super	fs/super.c	/^void kill_litter_super(struct super_block *sb)$/;"	f
kill_node	fs/binfmt_misc.c	/^static void kill_node(Node *e)$/;"	f	file:
kill_ok_by_cred	kernel/signal.c	/^static int kill_ok_by_cred(struct task_struct *t)$/;"	f	file:
kill_optimized_kprobe	kernel/kprobes.c	/^static void __kprobes kill_optimized_kprobe(struct kprobe *p)$/;"	f	file:
kill_optimized_kprobe	kernel/kprobes.c	906;"	d	file:
kill_orphaned_pgrp	kernel/exit.c	/^kill_orphaned_pgrp(struct task_struct *tsk, struct task_struct *parent)$/;"	f	file:
kill_pgrp	kernel/signal.c	/^EXPORT_SYMBOL(kill_pgrp);$/;"	v
kill_pgrp	kernel/signal.c	/^int kill_pgrp(struct pid *pid, int sig, int priv)$/;"	f
kill_pid	kernel/signal.c	/^EXPORT_SYMBOL(kill_pid);$/;"	v
kill_pid	kernel/signal.c	/^int kill_pid(struct pid *pid, int sig, int priv)$/;"	f
kill_pid_info	kernel/signal.c	/^int kill_pid_info(int sig, struct siginfo *info, struct pid *pid)$/;"	f
kill_pid_info_as_cred	kernel/signal.c	/^EXPORT_SYMBOL_GPL(kill_pid_info_as_cred);$/;"	v
kill_pid_info_as_cred	kernel/signal.c	/^int kill_pid_info_as_cred(int sig, struct siginfo *info, struct pid *pid,$/;"	f
kill_proc	mm/memory-failure.c	/^static int kill_proc(struct task_struct *t, unsigned long addr, int trapno,$/;"	f	file:
kill_proc_info	kernel/signal.c	/^int kill_proc_info(int sig, struct siginfo *info, pid_t pid)$/;"	f
kill_procs	mm/memory-failure.c	/^static void kill_procs(struct list_head *to_kill, int forcekill, int trapno,$/;"	f	file:
kill_rules	kernel/audit_tree.c	/^static void kill_rules(struct audit_tree *tree)$/;"	f	file:
kill_something_info	kernel/signal.c	/^static int kill_something_info(int sig, struct siginfo *info, pid_t pid)$/;"	f	file:
killed_trees	kernel/auditsc.c	/^	struct list_head killed_trees;$/;"	m	struct:audit_context	typeref:struct:audit_context::list_head	file:
kimage_add_entry	kernel/kexec.c	/^static int kimage_add_entry(struct kimage *image, kimage_entry_t entry)$/;"	f	file:
kimage_add_page	kernel/kexec.c	/^static int kimage_add_page(struct kimage *image, unsigned long page)$/;"	f	file:
kimage_alloc_control_pages	kernel/kexec.c	/^struct page *kimage_alloc_control_pages(struct kimage *image,$/;"	f
kimage_alloc_crash_control_pages	kernel/kexec.c	/^static struct page *kimage_alloc_crash_control_pages(struct kimage *image,$/;"	f	file:
kimage_alloc_normal_control_pages	kernel/kexec.c	/^static struct page *kimage_alloc_normal_control_pages(struct kimage *image,$/;"	f	file:
kimage_alloc_page	kernel/kexec.c	/^static struct page *kimage_alloc_page(struct kimage *image,$/;"	f	file:
kimage_alloc_pages	kernel/kexec.c	/^static struct page *kimage_alloc_pages(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
kimage_crash_alloc	kernel/kexec.c	/^static int kimage_crash_alloc(struct kimage **rimage, unsigned long entry,$/;"	f	file:
kimage_dst_used	kernel/kexec.c	/^static kimage_entry_t *kimage_dst_used(struct kimage *image,$/;"	f	file:
kimage_free	kernel/kexec.c	/^static void kimage_free(struct kimage *image)$/;"	f	file:
kimage_free_entry	kernel/kexec.c	/^static void kimage_free_entry(kimage_entry_t entry)$/;"	f	file:
kimage_free_extra_pages	kernel/kexec.c	/^static void kimage_free_extra_pages(struct kimage *image)$/;"	f	file:
kimage_free_page_list	kernel/kexec.c	/^static void kimage_free_page_list(struct list_head *list)$/;"	f	file:
kimage_free_pages	kernel/kexec.c	/^static void kimage_free_pages(struct page *page)$/;"	f	file:
kimage_is_destination_range	kernel/kexec.c	/^static int kimage_is_destination_range(struct kimage *image,$/;"	f	file:
kimage_load_crash_segment	kernel/kexec.c	/^static int kimage_load_crash_segment(struct kimage *image,$/;"	f	file:
kimage_load_normal_segment	kernel/kexec.c	/^static int kimage_load_normal_segment(struct kimage *image,$/;"	f	file:
kimage_load_segment	kernel/kexec.c	/^static int kimage_load_segment(struct kimage *image,$/;"	f	file:
kimage_normal_alloc	kernel/kexec.c	/^static int kimage_normal_alloc(struct kimage **rimage, unsigned long entry,$/;"	f	file:
kimage_set_destination	kernel/kexec.c	/^static int kimage_set_destination(struct kimage *image,$/;"	f	file:
kimage_terminate	kernel/kexec.c	/^static void kimage_terminate(struct kimage *image)$/;"	f	file:
kintegrityd_wq	fs/bio-integrity.c	/^static struct workqueue_struct *kintegrityd_wq;$/;"	v	typeref:struct:workqueue_struct	file:
kiocb_batch	fs/aio.c	/^struct kiocb_batch {$/;"	s	file:
kiocb_batch_free	fs/aio.c	/^static void kiocb_batch_free(struct kioctx *ctx, struct kiocb_batch *batch)$/;"	f	file:
kiocb_batch_init	fs/aio.c	/^static void kiocb_batch_init(struct kiocb_batch *batch, long total)$/;"	f	file:
kiocb_batch_refill	fs/aio.c	/^static int kiocb_batch_refill(struct kioctx *ctx, struct kiocb_batch *batch)$/;"	f	file:
kiocb_cachep	fs/aio.c	/^static struct kmem_cache	*kiocb_cachep;$/;"	v	typeref:struct:kmem_cache	file:
kioctx_cachep	fs/aio.c	/^static struct kmem_cache	*kioctx_cachep;$/;"	v	typeref:struct:kmem_cache	file:
kleave	mm/nommu.c	50;"	d	file:
kmalloc	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmalloc);$/;"	v
kmalloc_caches	mm/slub.c	/^EXPORT_SYMBOL(kmalloc_caches);$/;"	v
kmalloc_caches	mm/slub.c	/^struct kmem_cache *kmalloc_caches[SLUB_PAGE_SHIFT];$/;"	v	typeref:struct:kmem_cache
kmalloc_dma_caches	mm/slub.c	/^static struct kmem_cache *kmalloc_dma_caches[SLUB_PAGE_SHIFT];$/;"	v	typeref:struct:kmem_cache	file:
kmalloc_large_node	mm/slub.c	/^static void *kmalloc_large_node(size_t size, gfp_t flags, int node)$/;"	f	file:
kmalloc_node	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmalloc_node);$/;"	v
kmalloc_order_trace	mm/slub.c	/^EXPORT_SYMBOL(kmalloc_order_trace);$/;"	v
kmalloc_order_trace	mm/slub.c	/^void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)$/;"	f
kmalloc_parameter	kernel/params.c	/^static void *kmalloc_parameter(unsigned int size)$/;"	f	file:
kmalloc_section_memmap	mm/sparse.c	/^static inline struct page *kmalloc_section_memmap(unsigned long pnum, int nid,$/;"	f	file:
kmalloced_param	kernel/params.c	/^struct kmalloced_param {$/;"	s	file:
kmap_flush_unused	mm/highmem.c	/^void kmap_flush_unused(void)$/;"	f
kmap_high	mm/highmem.c	/^EXPORT_SYMBOL(kmap_high);$/;"	v
kmap_high	mm/highmem.c	/^void *kmap_high(struct page *page)$/;"	f
kmap_high_get	mm/highmem.c	/^void *kmap_high_get(struct page *page)$/;"	f
kmap_to_page	mm/highmem.c	/^EXPORT_SYMBOL(kmap_to_page);$/;"	v
kmap_to_page	mm/highmem.c	/^struct page *kmap_to_page(void *vaddr)$/;"	f
kmem	mm/memcontrol.c	/^	struct res_counter kmem;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::res_counter	file:
kmem_account_flags	mm/memcontrol.c	/^	unsigned long kmem_account_flags; \/* See KMEM_ACCOUNTED_*, below *\/$/;"	m	struct:mem_cgroup	file:
kmem_bufctl_t	mm/slab.c	/^typedef unsigned int kmem_bufctl_t;$/;"	t	file:
kmem_cache	mm/slab_common.c	/^struct kmem_cache *kmem_cache;$/;"	v	typeref:struct:kmem_cache
kmem_cache_alloc	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	mm/slab.c	/^void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f
kmem_cache_alloc	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	mm/slub.c	/^void *kmem_cache_alloc(struct kmem_cache *s, gfp_t gfpflags)$/;"	f
kmem_cache_alloc	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc_node	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	mm/slab.c	/^void *kmem_cache_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid)$/;"	f
kmem_cache_alloc_node	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	mm/slob.c	/^void *kmem_cache_alloc_node(struct kmem_cache *c, gfp_t flags, int node)$/;"	f
kmem_cache_alloc_node	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	mm/slub.c	/^void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t gfpflags, int node)$/;"	f
kmem_cache_alloc_node	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node_trace	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node_trace);$/;"	v
kmem_cache_alloc_node_trace	mm/slab.c	/^void *kmem_cache_alloc_node_trace(struct kmem_cache *cachep,$/;"	f
kmem_cache_alloc_node_trace	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node_trace);$/;"	v
kmem_cache_alloc_node_trace	mm/slub.c	/^void *kmem_cache_alloc_node_trace(struct kmem_cache *s,$/;"	f
kmem_cache_alloc_trace	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_trace);$/;"	v
kmem_cache_alloc_trace	mm/slab.c	/^kmem_cache_alloc_trace(struct kmem_cache *cachep, gfp_t flags, size_t size)$/;"	f
kmem_cache_alloc_trace	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_trace);$/;"	v
kmem_cache_alloc_trace	mm/slub.c	/^void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t gfpflags, size_t size)$/;"	f
kmem_cache_boot	mm/slab.c	/^static struct kmem_cache kmem_cache_boot = {$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_boot	mm/slob.c	/^struct kmem_cache kmem_cache_boot = {$/;"	v	typeref:struct:kmem_cache
kmem_cache_close	mm/slub.c	/^static inline int kmem_cache_close(struct kmem_cache *s)$/;"	f	file:
kmem_cache_create	mm/slab_common.c	/^EXPORT_SYMBOL(kmem_cache_create);$/;"	v
kmem_cache_create	mm/slab_common.c	/^kmem_cache_create(const char *name, size_t size, size_t align,$/;"	f
kmem_cache_create_memcg	mm/slab_common.c	/^kmem_cache_create_memcg(struct mem_cgroup *memcg, const char *name, size_t size,$/;"	f
kmem_cache_debug	mm/slub.c	/^static inline int kmem_cache_debug(struct kmem_cache *s)$/;"	f	file:
kmem_cache_destroy	mm/slab_common.c	/^EXPORT_SYMBOL(kmem_cache_destroy);$/;"	v
kmem_cache_destroy	mm/slab_common.c	/^void kmem_cache_destroy(struct kmem_cache *s)$/;"	f
kmem_cache_destroy_memcg_children	mm/memcontrol.c	/^void kmem_cache_destroy_memcg_children(struct kmem_cache *s)$/;"	f
kmem_cache_destroy_work_func	mm/memcontrol.c	/^static void kmem_cache_destroy_work_func(struct work_struct *w)$/;"	f	file:
kmem_cache_dup	mm/memcontrol.c	/^static struct kmem_cache *kmem_cache_dup(struct mem_cgroup *memcg,$/;"	f	file:
kmem_cache_flags	mm/slub.c	/^static inline unsigned long kmem_cache_flags(unsigned long object_size,$/;"	f	file:
kmem_cache_flags	mm/slub.c	/^static unsigned long kmem_cache_flags(unsigned long object_size,$/;"	f	file:
kmem_cache_free	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	mm/slab.c	/^void kmem_cache_free(struct kmem_cache *cachep, void *objp)$/;"	f
kmem_cache_free	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	mm/slob.c	/^void kmem_cache_free(struct kmem_cache *c, void *b)$/;"	f
kmem_cache_free	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	mm/slub.c	/^void kmem_cache_free(struct kmem_cache *s, void *x)$/;"	f
kmem_cache_free	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_init	mm/slab.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init	mm/slob.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init	mm/slub.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init_late	mm/slab.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_init_late	mm/slob.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_init_late	mm/slub.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_node	mm/slub.c	/^static struct kmem_cache *kmem_cache_node;$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_open	mm/slub.c	/^static int kmem_cache_open(struct kmem_cache *s, unsigned long flags)$/;"	f	file:
kmem_cache_sanity_check	mm/slab_common.c	/^static inline int kmem_cache_sanity_check(struct mem_cgroup *memcg,$/;"	f	file:
kmem_cache_sanity_check	mm/slab_common.c	/^static int kmem_cache_sanity_check(struct mem_cgroup *memcg, const char *name,$/;"	f	file:
kmem_cache_shrink	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	mm/slab.c	/^int kmem_cache_shrink(struct kmem_cache *cachep)$/;"	f
kmem_cache_shrink	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	mm/slob.c	/^int kmem_cache_shrink(struct kmem_cache *d)$/;"	f
kmem_cache_shrink	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	mm/slub.c	/^int kmem_cache_shrink(struct kmem_cache *s)$/;"	f
kmem_cgroup_destroy	mm/memcontrol.c	/^static void kmem_cgroup_destroy(struct mem_cgroup *memcg)$/;"	f	file:
kmem_find_general_cachep	mm/slab.c	/^static struct kmem_cache *kmem_find_general_cachep(size_t size, gfp_t gfpflags)$/;"	f	file:
kmem_flagcheck	mm/slab.c	/^static void kmem_flagcheck(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
kmem_freepages	mm/slab.c	/^static void kmem_freepages(struct kmem_cache *cachep, void *addr)$/;"	f	file:
kmem_getpages	mm/slab.c	/^static void *kmem_getpages(struct kmem_cache *cachep, gfp_t flags, int nodeid)$/;"	f	file:
kmem_list3	mm/slab.c	/^struct kmem_list3 {$/;"	s	file:
kmem_list3_init	mm/slab.c	/^static void kmem_list3_init(struct kmem_list3 *parent)$/;"	f	file:
kmem_rcu_free	mm/slab.c	/^static void kmem_rcu_free(struct rcu_head *head)$/;"	f	file:
kmem_rcu_free	mm/slob.c	/^static void kmem_rcu_free(struct rcu_head *head)$/;"	f	file:
kmemcg_id	mm/memcontrol.c	/^	int kmemcg_id;$/;"	m	struct:mem_cgroup	file:
kmemcheck_alloc_shadow	mm/kmemcheck.c	/^void kmemcheck_alloc_shadow(struct page *page, int order, gfp_t flags, int node)$/;"	f
kmemcheck_free_shadow	mm/kmemcheck.c	/^void kmemcheck_free_shadow(struct page *page, int order)$/;"	f
kmemcheck_pagealloc_alloc	mm/kmemcheck.c	/^void kmemcheck_pagealloc_alloc(struct page *page, unsigned int order,$/;"	f
kmemcheck_slab_alloc	mm/kmemcheck.c	/^void kmemcheck_slab_alloc(struct kmem_cache *s, gfp_t gfpflags, void *object,$/;"	f
kmemcheck_slab_free	mm/kmemcheck.c	/^void kmemcheck_slab_free(struct kmem_cache *s, void *object, size_t size)$/;"	f
kmemdup	mm/util.c	/^EXPORT_SYMBOL(kmemdup);$/;"	v
kmemdup	mm/util.c	/^void *kmemdup(const void *src, size_t len, gfp_t gfp)$/;"	f
kmemleak_alloc	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_alloc);$/;"	v
kmemleak_alloc	mm/kmemleak.c	/^void __ref kmemleak_alloc(const void *ptr, size_t size, int min_count,$/;"	f
kmemleak_alloc_percpu	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_alloc_percpu);$/;"	v
kmemleak_alloc_percpu	mm/kmemleak.c	/^void __ref kmemleak_alloc_percpu(const void __percpu *ptr, size_t size)$/;"	f
kmemleak_boot_config	mm/kmemleak.c	/^static int kmemleak_boot_config(char *str)$/;"	f	file:
kmemleak_clear	mm/kmemleak.c	/^static void kmemleak_clear(void)$/;"	f	file:
kmemleak_disable	mm/kmemleak.c	/^static void kmemleak_disable(void)$/;"	f	file:
kmemleak_do_cleanup	mm/kmemleak.c	/^static void kmemleak_do_cleanup(struct work_struct *work)$/;"	f	file:
kmemleak_early_log	mm/kmemleak.c	/^static atomic_t kmemleak_early_log = ATOMIC_INIT(1);$/;"	v	file:
kmemleak_enabled	mm/kmemleak.c	/^static atomic_t kmemleak_enabled = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_error	mm/kmemleak.c	/^static atomic_t kmemleak_error = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_fops	mm/kmemleak.c	/^static const struct file_operations kmemleak_fops = {$/;"	v	typeref:struct:file_operations	file:
kmemleak_free	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free);$/;"	v
kmemleak_free	mm/kmemleak.c	/^void __ref kmemleak_free(const void *ptr)$/;"	f
kmemleak_free_part	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free_part);$/;"	v
kmemleak_free_part	mm/kmemleak.c	/^void __ref kmemleak_free_part(const void *ptr, size_t size)$/;"	f
kmemleak_free_percpu	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free_percpu);$/;"	v
kmemleak_free_percpu	mm/kmemleak.c	/^void __ref kmemleak_free_percpu(const void __percpu *ptr)$/;"	f
kmemleak_ignore	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_ignore);$/;"	v
kmemleak_ignore	mm/kmemleak.c	/^void __ref kmemleak_ignore(const void *ptr)$/;"	f
kmemleak_init	mm/kmemleak.c	/^void __init kmemleak_init(void)$/;"	f
kmemleak_initialized	mm/kmemleak.c	/^static atomic_t kmemleak_initialized = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_late_init	mm/kmemleak.c	/^late_initcall(kmemleak_late_init);$/;"	v
kmemleak_late_init	mm/kmemleak.c	/^static int __init kmemleak_late_init(void)$/;"	f	file:
kmemleak_load_module	kernel/module.c	/^static inline void kmemleak_load_module(const struct module *mod,$/;"	f	file:
kmemleak_load_module	kernel/module.c	/^static void kmemleak_load_module(const struct module *mod,$/;"	f	file:
kmemleak_no_scan	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_no_scan);$/;"	v
kmemleak_no_scan	mm/kmemleak.c	/^void __ref kmemleak_no_scan(const void *ptr)$/;"	f
kmemleak_not_leak	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_not_leak);$/;"	v
kmemleak_not_leak	mm/kmemleak.c	/^void __ref kmemleak_not_leak(const void *ptr)$/;"	f
kmemleak_object	mm/kmemleak.c	/^struct kmemleak_object {$/;"	s	file:
kmemleak_open	mm/kmemleak.c	/^static int kmemleak_open(struct inode *inode, struct file *file)$/;"	f	file:
kmemleak_release	mm/kmemleak.c	/^static int kmemleak_release(struct inode *inode, struct file *file)$/;"	f	file:
kmemleak_scan	mm/kmemleak.c	/^static void kmemleak_scan(void)$/;"	f	file:
kmemleak_scan_area	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_scan_area);$/;"	v
kmemleak_scan_area	mm/kmemleak.c	/^struct kmemleak_scan_area {$/;"	s	file:
kmemleak_scan_area	mm/kmemleak.c	/^void __ref kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)$/;"	f
kmemleak_scan_thread	mm/kmemleak.c	/^static int kmemleak_scan_thread(void *arg)$/;"	f	file:
kmemleak_seq_next	mm/kmemleak.c	/^static void *kmemleak_seq_next(struct seq_file *seq, void *v, loff_t *pos)$/;"	f	file:
kmemleak_seq_ops	mm/kmemleak.c	/^static const struct seq_operations kmemleak_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
kmemleak_seq_show	mm/kmemleak.c	/^static int kmemleak_seq_show(struct seq_file *seq, void *v)$/;"	f	file:
kmemleak_seq_start	mm/kmemleak.c	/^static void *kmemleak_seq_start(struct seq_file *seq, loff_t *pos)$/;"	f	file:
kmemleak_seq_stop	mm/kmemleak.c	/^static void kmemleak_seq_stop(struct seq_file *seq, void *v)$/;"	f	file:
kmemleak_skip_disable	mm/kmemleak.c	/^static int kmemleak_skip_disable;$/;"	v	file:
kmemleak_stack_scan	mm/kmemleak.c	/^static int kmemleak_stack_scan = 1;$/;"	v	file:
kmemleak_stop	mm/kmemleak.c	278;"	d	file:
kmemleak_test_exit	mm/kmemleak-test.c	/^module_exit(kmemleak_test_exit);$/;"	v
kmemleak_test_exit	mm/kmemleak-test.c	/^static void __exit kmemleak_test_exit(void)$/;"	f	file:
kmemleak_test_init	mm/kmemleak-test.c	/^module_init(kmemleak_test_init);$/;"	v
kmemleak_test_init	mm/kmemleak-test.c	/^static int __init kmemleak_test_init(void)$/;"	f	file:
kmemleak_warn	mm/kmemleak.c	267;"	d	file:
kmemleak_warning	mm/kmemleak.c	/^static atomic_t kmemleak_warning = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_write	mm/kmemleak.c	/^static ssize_t kmemleak_write(struct file *file, const char __user *user_buf,$/;"	f	file:
kmod_thread_locker	kernel/kmod.c	/^static const struct task_struct *kmod_thread_locker;$/;"	v	typeref:struct:task_struct	file:
kmsg_dump	kernel/printk.c	/^void kmsg_dump(enum kmsg_dump_reason reason)$/;"	f
kmsg_dump_get_buffer	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_get_buffer);$/;"	v
kmsg_dump_get_buffer	kernel/printk.c	/^bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,$/;"	f
kmsg_dump_get_line	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_get_line);$/;"	v
kmsg_dump_get_line	kernel/printk.c	/^bool kmsg_dump_get_line(struct kmsg_dumper *dumper, bool syslog,$/;"	f
kmsg_dump_get_line_nolock	kernel/printk.c	/^bool kmsg_dump_get_line_nolock(struct kmsg_dumper *dumper, bool syslog,$/;"	f
kmsg_dump_register	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_register);$/;"	v
kmsg_dump_register	kernel/printk.c	/^int kmsg_dump_register(struct kmsg_dumper *dumper)$/;"	f
kmsg_dump_rewind	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_rewind);$/;"	v
kmsg_dump_rewind	kernel/printk.c	/^void kmsg_dump_rewind(struct kmsg_dumper *dumper)$/;"	f
kmsg_dump_rewind_nolock	kernel/printk.c	/^void kmsg_dump_rewind_nolock(struct kmsg_dumper *dumper)$/;"	f
kmsg_dump_unregister	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_unregister);$/;"	v
kmsg_dump_unregister	kernel/printk.c	/^int kmsg_dump_unregister(struct kmsg_dumper *dumper)$/;"	f
kmsg_fops	kernel/printk.c	/^const struct file_operations kmsg_fops = {$/;"	v	typeref:struct:file_operations
kobj2pinst	kernel/padata.c	903;"	d	file:
kobj_to_hstate	mm/hugetlb.c	/^static struct hstate *kobj_to_hstate(struct kobject *kobj, int *nidp)$/;"	f	file:
kobj_to_node_hstate	mm/hugetlb.c	/^static struct hstate *kobj_to_node_hstate(struct kobject *kobj, int *nidp)$/;"	f	file:
kobjsize	mm/nommu.c	/^unsigned int kobjsize(const void *objp)$/;"	f
kp	kernel/test_kprobes.c	/^static struct kprobe kp = {$/;"	v	typeref:struct:kprobe	file:
kp2	kernel/test_kprobes.c	/^static struct kprobe kp2 = {$/;"	v	typeref:struct:kprobe	file:
kp_post_handler	kernel/test_kprobes.c	/^static void kp_post_handler(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
kp_post_handler2	kernel/test_kprobes.c	/^static void kp_post_handler2(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
kp_pre_handler	kernel/test_kprobes.c	/^static int kp_pre_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
kp_pre_handler2	kernel/test_kprobes.c	/^static int kp_pre_handler2(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
kpfn	mm/ksm.c	/^	unsigned long kpfn;$/;"	m	struct:stable_node	file:
kprobe_addr	kernel/kprobes.c	/^static kprobe_opcode_t __kprobes *kprobe_addr(struct kprobe *p)$/;"	f	file:
kprobe_aggrprobe	kernel/kprobes.c	/^static inline int kprobe_aggrprobe(struct kprobe *p)$/;"	f	file:
kprobe_blacklist	kernel/kprobes.c	/^static struct kprobe_blackpoint kprobe_blacklist[] = {$/;"	v	typeref:struct:kprobe_blackpoint	file:
kprobe_disarmed	kernel/kprobes.c	/^static inline int kprobe_disarmed(struct kprobe *p)$/;"	f	file:
kprobe_disarmed	kernel/kprobes.c	911;"	d	file:
kprobe_exceptions_nb	kernel/kprobes.c	/^static struct notifier_block kprobe_exceptions_nb = {$/;"	v	typeref:struct:notifier_block	file:
kprobe_flush_task	kernel/kprobes.c	/^void __kprobes kprobe_flush_task(struct task_struct *tk)$/;"	f
kprobe_ftrace_enabled	kernel/kprobes.c	/^static int kprobe_ftrace_enabled;$/;"	v	file:
kprobe_insn_cache	kernel/kprobes.c	/^struct kprobe_insn_cache {$/;"	s	file:
kprobe_insn_page	kernel/kprobes.c	/^struct kprobe_insn_page {$/;"	s	file:
kprobe_insn_slots	kernel/kprobes.c	/^static struct kprobe_insn_cache kprobe_insn_slots = {$/;"	v	typeref:struct:kprobe_insn_cache	file:
kprobe_lookup_name	kernel/kprobes.c	66;"	d	file:
kprobe_module_nb	kernel/kprobes.c	/^static struct notifier_block kprobe_module_nb = {$/;"	v	typeref:struct:notifier_block	file:
kprobe_optimizer	kernel/kprobes.c	/^static __kprobes void kprobe_optimizer(struct work_struct *work)$/;"	f	file:
kprobe_optinsn_slots	kernel/kprobes.c	/^static struct kprobe_insn_cache kprobe_optinsn_slots = {$/;"	v	typeref:struct:kprobe_insn_cache	file:
kprobe_optready	kernel/kprobes.c	/^static inline int kprobe_optready(struct kprobe *p)$/;"	f	file:
kprobe_queued	kernel/kprobes.c	/^static int __kprobes kprobe_queued(struct kprobe *p)$/;"	f	file:
kprobe_seq_next	kernel/kprobes.c	/^static void __kprobes *kprobe_seq_next(struct seq_file *f, void *v, loff_t *pos)$/;"	f	file:
kprobe_seq_start	kernel/kprobes.c	/^static void __kprobes *kprobe_seq_start(struct seq_file *f, loff_t *pos)$/;"	f	file:
kprobe_seq_stop	kernel/kprobes.c	/^static void __kprobes kprobe_seq_stop(struct seq_file *f, void *v)$/;"	f	file:
kprobe_slot_state	kernel/kprobes.c	/^enum kprobe_slot_state {$/;"	g	file:
kprobe_table	kernel/kprobes.c	/^static struct hlist_head kprobe_table[KPROBE_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
kprobe_target	kernel/test_kprobes.c	/^static noinline u32 kprobe_target(u32 value)$/;"	f	file:
kprobe_target2	kernel/test_kprobes.c	/^static noinline u32 kprobe_target2(u32 value)$/;"	f	file:
kprobe_unused	kernel/kprobes.c	/^static inline int kprobe_unused(struct kprobe *p)$/;"	f	file:
kprobes_all_disarmed	kernel/kprobes.c	/^static bool kprobes_all_disarmed;$/;"	v	file:
kprobes_allow_optimization	kernel/kprobes.c	/^static bool kprobes_allow_optimization;$/;"	v	file:
kprobes_inc_nmissed_count	kernel/kprobes.c	/^void __kprobes kprobes_inc_nmissed_count(struct kprobe *p)$/;"	f
kprobes_initialized	kernel/kprobes.c	/^static int kprobes_initialized;$/;"	v	file:
kprobes_module_callback	kernel/kprobes.c	/^static int __kprobes kprobes_module_callback(struct notifier_block *nb,$/;"	f	file:
kprobes_open	kernel/kprobes.c	/^static int __kprobes kprobes_open(struct inode *inode, struct file *filp)$/;"	f	file:
kprobes_seq_ops	kernel/kprobes.c	/^static const struct seq_operations kprobes_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
kptr_obfuscate	kernel/kcmp.c	/^static long kptr_obfuscate(long v, int type)$/;"	f	file:
krealloc	mm/util.c	/^EXPORT_SYMBOL(krealloc);$/;"	v
krealloc	mm/util.c	/^void *krealloc(const void *p, size_t new_size, gfp_t flags)$/;"	f
kref	fs/eventfd.c	/^	struct kref kref;$/;"	m	struct:eventfd_ctx	typeref:struct:eventfd_ctx::kref	file:
kretprobe_inst_table	kernel/kprobes.c	/^static struct hlist_head kretprobe_inst_table[KPROBE_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
kretprobe_table_lock_ptr	kernel/kprobes.c	/^static raw_spinlock_t *kretprobe_table_lock_ptr(unsigned long hash)$/;"	f	file:
kretprobe_table_locks	kernel/kprobes.c	/^} kretprobe_table_locks[KPROBE_TABLE_SIZE];$/;"	v	typeref:struct:__anon58	file:
krph_val	kernel/test_kprobes.c	/^static u32 krph_val;$/;"	v	file:
ksize	mm/slab.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	mm/slab.c	/^size_t ksize(const void *objp)$/;"	f
ksize	mm/slob.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	mm/slob.c	/^size_t ksize(const void *block)$/;"	f
ksize	mm/slub.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	mm/slub.c	/^size_t ksize(const void *object)$/;"	f
ksm_attr_group	mm/ksm.c	/^static struct attribute_group ksm_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
ksm_attrs	mm/ksm.c	/^static struct attribute *ksm_attrs[] = {$/;"	v	typeref:struct:attribute	file:
ksm_check_stable_tree	mm/ksm.c	/^static void ksm_check_stable_tree(unsigned long start_pfn,$/;"	f	file:
ksm_do_scan	mm/ksm.c	/^static void ksm_do_scan(unsigned int scan_npages)$/;"	f	file:
ksm_init	mm/ksm.c	/^static int __init ksm_init(void)$/;"	f	file:
ksm_madvise	mm/ksm.c	/^int ksm_madvise(struct vm_area_struct *vma, unsigned long start,$/;"	f
ksm_memory_callback	mm/ksm.c	/^static int ksm_memory_callback(struct notifier_block *self,$/;"	f	file:
ksm_merge_across_nodes	mm/ksm.c	/^static unsigned int ksm_merge_across_nodes = 1;$/;"	v	file:
ksm_merge_across_nodes	mm/ksm.c	231;"	d	file:
ksm_might_need_to_copy	mm/ksm.c	/^struct page *ksm_might_need_to_copy(struct page *page,$/;"	f
ksm_migrate_page	mm/ksm.c	/^void ksm_migrate_page(struct page *newpage, struct page *oldpage)$/;"	f
ksm_mm_head	mm/ksm.c	/^static struct mm_slot ksm_mm_head = {$/;"	v	typeref:struct:mm_slot	file:
ksm_nr_node_ids	mm/ksm.c	/^static int ksm_nr_node_ids = 1;$/;"	v	file:
ksm_nr_node_ids	mm/ksm.c	232;"	d	file:
ksm_pages_shared	mm/ksm.c	/^static unsigned long ksm_pages_shared;$/;"	v	file:
ksm_pages_sharing	mm/ksm.c	/^static unsigned long ksm_pages_sharing;$/;"	v	file:
ksm_pages_unshared	mm/ksm.c	/^static unsigned long ksm_pages_unshared;$/;"	v	file:
ksm_rmap_items	mm/ksm.c	/^static unsigned long ksm_rmap_items;$/;"	v	file:
ksm_run	mm/ksm.c	/^static unsigned long ksm_run = KSM_RUN_STOP;$/;"	v	file:
ksm_scan	mm/ksm.c	/^static struct ksm_scan ksm_scan = {$/;"	v	typeref:struct:ksm_scan	file:
ksm_scan	mm/ksm.c	/^struct ksm_scan {$/;"	s	file:
ksm_scan_thread	mm/ksm.c	/^static int ksm_scan_thread(void *nothing)$/;"	f	file:
ksm_slab_free	mm/ksm.c	/^static void __init ksm_slab_free(void)$/;"	f	file:
ksm_slab_init	mm/ksm.c	/^static int __init ksm_slab_init(void)$/;"	f	file:
ksm_test_exit	mm/ksm.c	/^static inline bool ksm_test_exit(struct mm_struct *mm)$/;"	f	file:
ksm_thread_pages_to_scan	mm/ksm.c	/^static unsigned int ksm_thread_pages_to_scan = 100;$/;"	v	file:
ksm_thread_sleep_millisecs	mm/ksm.c	/^static unsigned int ksm_thread_sleep_millisecs = 20;$/;"	v	file:
ksmd_should_run	mm/ksm.c	/^static int ksmd_should_run(void)$/;"	f	file:
ksoftirqd_should_run	kernel/softirq.c	/^static int ksoftirqd_should_run(unsigned int cpu)$/;"	f	file:
kstrdup	mm/util.c	/^EXPORT_SYMBOL(kstrdup);$/;"	v
kstrdup	mm/util.c	/^char *kstrdup(const char *s, gfp_t gfp)$/;"	f
kstrndup	mm/util.c	/^EXPORT_SYMBOL(kstrndup);$/;"	v
kstrndup	mm/util.c	/^char *kstrndup(const char *s, size_t max, gfp_t gfp)$/;"	f
kswapd	mm/vmscan.c	/^static int kswapd(void *p)$/;"	f	file:
kswapd_init	mm/vmscan.c	/^static int __init kswapd_init(void)$/;"	f	file:
kswapd_run	mm/vmscan.c	/^int kswapd_run(int nid)$/;"	f
kswapd_stop	mm/vmscan.c	/^void kswapd_stop(int nid)$/;"	f
kswapd_try_to_sleep	mm/vmscan.c	/^static void kswapd_try_to_sleep(pg_data_t *pgdat, int order, int classzone_idx)$/;"	f	file:
ksysfs_init	kernel/ksysfs.c	/^core_initcall(ksysfs_init);$/;"	v
ksysfs_init	kernel/ksysfs.c	/^static int __init ksysfs_init(void)$/;"	f	file:
kthread	kernel/kthread.c	/^static int kthread(void *_create)$/;"	f	file:
kthread	kernel/kthread.c	/^struct kthread {$/;"	s	file:
kthread_bind	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_bind);$/;"	v
kthread_bind	kernel/kthread.c	/^void kthread_bind(struct task_struct *p, unsigned int cpu)$/;"	f
kthread_create_info	kernel/kthread.c	/^struct kthread_create_info$/;"	s	file:
kthread_create_on_cpu	kernel/kthread.c	/^struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),$/;"	f
kthread_create_on_node	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_create_on_node);$/;"	v
kthread_create_on_node	kernel/kthread.c	/^struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),$/;"	f
kthread_data	kernel/kthread.c	/^void *kthread_data(struct task_struct *task)$/;"	f
kthread_flush_work	kernel/kthread.c	/^struct kthread_flush_work {$/;"	s	file:
kthread_flush_work_fn	kernel/kthread.c	/^static void kthread_flush_work_fn(struct kthread_work *work)$/;"	f	file:
kthread_freezable_should_stop	kernel/kthread.c	/^EXPORT_SYMBOL_GPL(kthread_freezable_should_stop);$/;"	v
kthread_freezable_should_stop	kernel/kthread.c	/^bool kthread_freezable_should_stop(bool *was_frozen)$/;"	f
kthread_park	kernel/kthread.c	/^int kthread_park(struct task_struct *k)$/;"	f
kthread_parkme	kernel/kthread.c	/^void kthread_parkme(void)$/;"	f
kthread_should_park	kernel/kthread.c	/^bool kthread_should_park(void)$/;"	f
kthread_should_stop	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_should_stop);$/;"	v
kthread_should_stop	kernel/kthread.c	/^bool kthread_should_stop(void)$/;"	f
kthread_stop	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_stop);$/;"	v
kthread_stop	kernel/kthread.c	/^int kthread_stop(struct task_struct *k)$/;"	f
kthread_unpark	kernel/kthread.c	/^void kthread_unpark(struct task_struct *k)$/;"	f
kthread_worker_fn	kernel/kthread.c	/^EXPORT_SYMBOL_GPL(kthread_worker_fn);$/;"	v
kthread_worker_fn	kernel/kthread.c	/^int kthread_worker_fn(void *worker_ptr)$/;"	f
kthreadd	kernel/kthread.c	/^int kthreadd(void *unused)$/;"	f
kthreadd_task	kernel/kthread.c	/^struct task_struct *kthreadd_task;$/;"	v	typeref:struct:task_struct
ktime_add_ns	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(ktime_add_ns);$/;"	v
ktime_add_ns	kernel/hrtimer.c	/^ktime_t ktime_add_ns(const ktime_t kt, u64 nsec)$/;"	f
ktime_add_safe	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(ktime_add_safe);$/;"	v
ktime_add_safe	kernel/hrtimer.c	/^ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs)$/;"	f
ktime_divns	kernel/hrtimer.c	/^u64 ktime_divns(const ktime_t kt, s64 div)$/;"	f
ktime_sub_ns	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(ktime_sub_ns);$/;"	v
ktime_sub_ns	kernel/hrtimer.c	/^ktime_t ktime_sub_ns(const ktime_t kt, u64 nsec)$/;"	f
ktype_cdev_default	fs/char_dev.c	/^static struct kobj_type ktype_cdev_default = {$/;"	v	typeref:struct:kobj_type	file:
ktype_cdev_dynamic	fs/char_dev.c	/^static struct kobj_type ktype_cdev_dynamic = {$/;"	v	typeref:struct:kobj_type	file:
kunmap_high	mm/highmem.c	/^EXPORT_SYMBOL(kunmap_high);$/;"	v
kunmap_high	mm/highmem.c	/^void kunmap_high(struct page *page)$/;"	f
kzfree	mm/util.c	/^EXPORT_SYMBOL(kzfree);$/;"	v
kzfree	mm/util.c	/^void kzfree(const void *p)$/;"	f
l_i_frag	fs/ext3/ext3.h	/^			__u8	l_i_frag;	\/* Fragment number *\/$/;"	m	struct:ext3_inode::__anon35::__anon36
l_i_fsize	fs/ext3/ext3.h	/^			__u8	l_i_fsize;	\/* Fragment size *\/$/;"	m	struct:ext3_inode::__anon35::__anon36
l_i_gid_high	fs/ext3/ext3.h	/^			__le16	l_i_gid_high;	\/* were reserved2[0] *\/$/;"	m	struct:ext3_inode::__anon35::__anon36
l_i_reserved1	fs/ext3/ext3.h	/^			__u32  l_i_reserved1;$/;"	m	struct:ext3_inode::__anon31::__anon32
l_i_reserved2	fs/ext3/ext3.h	/^			__u32	l_i_reserved2;$/;"	m	struct:ext3_inode::__anon35::__anon36
l_i_uid_high	fs/ext3/ext3.h	/^			__le16	l_i_uid_high;	\/* these 2 fields    *\/$/;"	m	struct:ext3_inode::__anon35::__anon36
l_len	fs/compat_ioctl.c	/^	__s64		l_len __attribute__((packed));$/;"	m	struct:space_resv_32	file:
l_next	kernel/lockdep_proc.c	/^static void *l_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
l_pad	fs/compat_ioctl.c	/^	__s32		l_pad[4];	\/* reserve area *\/$/;"	m	struct:space_resv_32	file:
l_pid	fs/compat_ioctl.c	/^	__u32		l_pid;$/;"	m	struct:space_resv_32	file:
l_show	kernel/lockdep_proc.c	/^static int l_show(struct seq_file *m, void *v)$/;"	f	file:
l_start	fs/compat_ioctl.c	/^	__s64		l_start	__attribute__((packed));$/;"	m	struct:space_resv_32	file:
l_start	kernel/lockdep_proc.c	/^static void *l_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
l_stop	kernel/lockdep_proc.c	/^static void l_stop(struct seq_file *m, void *v)$/;"	f	file:
l_sysid	fs/compat_ioctl.c	/^	__s32		l_sysid;$/;"	m	struct:space_resv_32	file:
l_type	fs/compat_ioctl.c	/^	__s16		l_type;$/;"	m	struct:space_resv_32	file:
l_whence	fs/compat_ioctl.c	/^	__s16		l_whence;$/;"	m	struct:space_resv_32	file:
laptop_io_completion	mm/page-writeback.c	/^void laptop_io_completion(struct backing_dev_info *info)$/;"	f
laptop_mode	mm/page-writeback.c	/^EXPORT_SYMBOL(laptop_mode);$/;"	v
laptop_mode	mm/page-writeback.c	/^int laptop_mode;$/;"	v
laptop_mode_timer_fn	mm/page-writeback.c	/^void laptop_mode_timer_fn(unsigned long data)$/;"	f
laptop_sync_completion	mm/page-writeback.c	/^void laptop_sync_completion(void)$/;"	f
last_active	kernel/workqueue_internal.h	/^	unsigned long		last_active;	\/* L: last active timestamp *\/$/;"	m	struct:worker
last_alloc_logical_block	fs/ext3/ext3.h	/^	__u32                   last_alloc_logical_block;$/;"	m	struct:ext3_block_alloc_info
last_alloc_physical_block	fs/ext3/ext3.h	/^	ext3_fsblk_t		last_alloc_physical_block;$/;"	m	struct:ext3_block_alloc_info
last_block_in_bio	fs/mpage.c	/^	sector_t last_block_in_bio;$/;"	m	struct:mpage_data	file:
last_pkmap_nr	mm/highmem.c	/^static unsigned int last_pkmap_nr;$/;"	v	file:
last_pos	fs/ext3/ext3.h	/^	loff_t		last_pos;$/;"	m	struct:dir_private_info
last_scanned_node	mm/memcontrol.c	/^	int last_scanned_node;$/;"	m	struct:mem_cgroup	file:
last_unloaded_module	kernel/module.c	/^static char last_unloaded_module[MODULE_NAME_LEN+1];$/;"	v	file:
latency_record	kernel/latencytop.c	/^static struct latency_record latency_record[MAXLR];$/;"	v	typeref:struct:latency_record	file:
latencytop_enabled	kernel/latencytop.c	/^int latencytop_enabled;$/;"	v
layout_and_allocate	kernel/module.c	/^static struct module *layout_and_allocate(struct load_info *info, int flags)$/;"	f	file:
layout_sections	kernel/module.c	/^static void layout_sections(struct module *mod, struct load_info *info)$/;"	f	file:
layout_symtab	kernel/module.c	/^static inline void layout_symtab(struct module *mod, struct load_info *info)$/;"	f	file:
layout_symtab	kernel/module.c	/^static void layout_symtab(struct module *mod, struct load_info *info)$/;"	f	file:
lazy_max_pages	mm/vmalloc.c	/^static unsigned long lazy_max_pages(void)$/;"	f	file:
lc_next	kernel/lockdep_proc.c	/^static void *lc_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
lc_show	kernel/lockdep_proc.c	/^static int lc_show(struct seq_file *m, void *v)$/;"	f	file:
lc_start	kernel/lockdep_proc.c	/^static void *lc_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
lc_stop	kernel/lockdep_proc.c	/^static void lc_stop(struct seq_file *m, void *v)$/;"	f	file:
leaks_show	mm/slab.c	/^static int leaks_show(struct seq_file *m, void *p)$/;"	f	file:
leaks_start	mm/slab.c	/^static void *leaks_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
lease_alloc	fs/locks.c	/^static struct file_lock *lease_alloc(struct file *filp, long type)$/;"	f	file:
lease_break_callback	fs/locks.c	/^static void lease_break_callback(struct file_lock *fl)$/;"	f	file:
lease_break_time	fs/locks.c	/^int lease_break_time = 45;$/;"	v
lease_breaking	fs/locks.c	/^static bool lease_breaking(struct file_lock *fl)$/;"	f	file:
lease_clear_pending	fs/locks.c	/^static void lease_clear_pending(struct file_lock *fl, int arg)$/;"	f	file:
lease_get_mtime	fs/locks.c	/^EXPORT_SYMBOL(lease_get_mtime);$/;"	v
lease_get_mtime	fs/locks.c	/^void lease_get_mtime(struct inode *inode, struct timespec *time)$/;"	f
lease_init	fs/locks.c	/^static int lease_init(struct file *filp, long type, struct file_lock *fl)$/;"	f	file:
lease_manager_ops	fs/locks.c	/^static const struct lock_manager_operations lease_manager_ops = {$/;"	v	typeref:struct:lock_manager_operations	file:
lease_modify	fs/locks.c	/^EXPORT_SYMBOL(lease_modify);$/;"	v
lease_modify	fs/locks.c	/^int lease_modify(struct file_lock **before, int arg)$/;"	f
leases_enable	fs/locks.c	/^int leases_enable = 1;$/;"	v
least_priority	mm/swapfile.c	/^static int least_priority;$/;"	v	file:
legacy_queue	kernel/signal.c	/^static inline int legacy_queue(struct sigpending *signals, int sig)$/;"	f	file:
len	fs/compat.c	/^	compat_uint_t len;$/;"	m	struct:compat_nfs_string	file:
len	fs/compat_ioctl.c	/^	u16 len;$/;"	m	struct:i2c_msg32	file:
len	fs/compat_ioctl.c	/^	unsigned short	len;$/;"	m	struct:sock_fprog32	file:
len	fs/select.c	/^	int len;$/;"	m	struct:poll_list	file:
len	kernel/module.c	/^	unsigned long len;$/;"	m	struct:load_info	file:
len	kernel/printk.c	/^	size_t len;			\/* length == 0 means unused buffer *\/$/;"	m	struct:cont	file:
len	kernel/printk.c	/^	size_t len;$/;"	m	struct:cont	file:
len	kernel/printk.c	/^	u16 len;		\/* length of entire record *\/$/;"	m	struct:log	file:
len	kernel/seccomp.c	/^	unsigned short len;  \/* Instruction count *\/$/;"	m	struct:seccomp_filter	file:
len	mm/mmap.c	/^	unsigned long len;$/;"	m	struct:mmap_arg_struct	file:
len	mm/nommu.c	/^	unsigned long len;$/;"	m	struct:mmap_arg_struct	file:
length	fs/compat_ioctl.c	/^	int length;$/;"	m	struct:compat_video_spu_palette	file:
length	fs/compat_ioctl.c	/^	u32			length;$/;"	m	struct:ppp_option_data32	file:
length	kernel/cgroup.c	/^	int length;$/;"	m	struct:cgroup_pidlist	file:
length	mm/page_cgroup.c	/^	unsigned long length;$/;"	m	struct:swap_cgroup_ctrl	file:
level	kernel/printk.c	/^	u8 level:3;		\/* syslog level *\/$/;"	m	struct:log	file:
level	kernel/printk.c	/^	u8 level;			\/* log level of first message *\/$/;"	m	struct:cont	file:
level	kernel/printk.c	/^	u8 level;$/;"	m	struct:cont	file:
level	kernel/rcutree.h	/^	struct rcu_node *level[RCU_NUM_LVLS];	\/* Hierarchy levels. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_node
level	kernel/rcutree.h	/^	u8	level;		\/* root is at level 0. *\/$/;"	m	struct:rcu_node
levelcnt	kernel/rcutree.h	/^	u32 levelcnt[MAX_RCU_LVLS + 1];		\/* # nodes in each level. *\/$/;"	m	struct:rcu_state
levelspread	kernel/rcutree.h	/^	u8 levelspread[RCU_NUM_LVLS];		\/* kids\/node in each level. *\/$/;"	m	struct:rcu_state
lg_global_lock	kernel/lglock.c	/^EXPORT_SYMBOL(lg_global_lock);$/;"	v
lg_global_lock	kernel/lglock.c	/^void lg_global_lock(struct lglock *lg)$/;"	f
lg_global_unlock	kernel/lglock.c	/^EXPORT_SYMBOL(lg_global_unlock);$/;"	v
lg_global_unlock	kernel/lglock.c	/^void lg_global_unlock(struct lglock *lg)$/;"	f
lg_local_lock	kernel/lglock.c	/^EXPORT_SYMBOL(lg_local_lock);$/;"	v
lg_local_lock	kernel/lglock.c	/^void lg_local_lock(struct lglock *lg)$/;"	f
lg_local_lock_cpu	kernel/lglock.c	/^EXPORT_SYMBOL(lg_local_lock_cpu);$/;"	v
lg_local_lock_cpu	kernel/lglock.c	/^void lg_local_lock_cpu(struct lglock *lg, int cpu)$/;"	f
lg_local_unlock	kernel/lglock.c	/^EXPORT_SYMBOL(lg_local_unlock);$/;"	v
lg_local_unlock	kernel/lglock.c	/^void lg_local_unlock(struct lglock *lg)$/;"	f
lg_local_unlock_cpu	kernel/lglock.c	/^EXPORT_SYMBOL(lg_local_unlock_cpu);$/;"	v
lg_local_unlock_cpu	kernel/lglock.c	/^void lg_local_unlock_cpu(struct lglock *lg, int cpu)$/;"	f
lg_lock_init	kernel/lglock.c	/^EXPORT_SYMBOL(lg_lock_init);$/;"	v
lg_lock_init	kernel/lglock.c	/^void lg_lock_init(struct lglock *lg, char *name)$/;"	f
lh	mm/highmem.c	/^	struct list_head lh;			\/* List of page_address_maps *\/$/;"	m	struct:page_address_slot	typeref:struct:page_address_slot::list_head	file:
lib_info	fs/binfmt_flat.c	/^struct lib_info {$/;"	s	file:
lib_list	fs/binfmt_flat.c	/^	} lib_list[MAX_SHARED_LIBS];$/;"	m	struct:lib_info	typeref:struct:lib_info::__anon22	file:
limit	fs/ext3/namei.c	/^	__le16 limit;$/;"	m	struct:dx_countlimit	file:
limit	mm/slab.c	/^	unsigned int limit;$/;"	m	struct:array_cache	file:
limit	mm/slab.h	/^	unsigned int limit;$/;"	m	struct:slabinfo
line	fs/compat_ioctl.c	/^        compat_int_t    line;$/;"	m	struct:serial_struct32	file:
linear_hugepage_index	mm/hugetlb.c	/^pgoff_t linear_hugepage_index(struct vm_area_struct *vma,$/;"	f
linear_page_index	include/linux/pagemap.h	/^static inline pgoff_t linear_page_index(struct vm_area_struct *vma,$/;"	f
link	mm/hugetlb.c	/^	struct list_head link;$/;"	m	struct:file_region	typeref:struct:file_region::list_head	file:
link	mm/ksm.c	/^	struct hlist_node link;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::hlist_node	file:
link_bootmem	mm/bootmem.c	/^static void __init link_bootmem(bootmem_data_t *bdata)$/;"	f	file:
link_css_set	kernel/cgroup.c	/^static void link_css_set(struct list_head *tmp_cg_links,$/;"	f	file:
link_dev_buffers	fs/buffer.c	/^link_dev_buffers(struct page *page, struct buffer_head *head)$/;"	f	file:
link_path_walk	fs/namei.c	/^static int link_path_walk(const char *name, struct nameidata *nd)$/;"	f	file:
link_pipe	fs/splice.c	/^static int link_pipe(struct pipe_inode_info *ipipe,$/;"	f	file:
links	kernel/cgroup.c	/^	struct list_head links;$/;"	m	struct:cgroup_pidlist	typeref:struct:cgroup_pidlist::list_head	file:
linux1	fs/ext3/ext3.h	/^		} linux1;$/;"	m	union:ext3_inode::__anon31	typeref:struct:ext3_inode::__anon31::__anon32
linux2	fs/ext3/ext3.h	/^		} linux2;$/;"	m	union:ext3_inode::__anon35	typeref:struct:ext3_inode::__anon35::__anon36
linux_dirent	fs/readdir.c	/^struct linux_dirent {$/;"	s	file:
list	fs/binfmt_elf.c	/^	struct list_head list;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::list_head	file:
list	fs/binfmt_elf_fdpic.c	/^	struct list_head list;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::list_head	file:
list	fs/binfmt_misc.c	/^	struct list_head list;$/;"	m	struct:__anon25	typeref:struct:__anon25::list_head	file:
list	fs/block_dev.c	/^	struct list_head	list;$/;"	m	struct:bd_holder_disk	typeref:struct:bd_holder_disk::list_head	file:
list	fs/fs-writeback.c	/^	struct list_head list;		\/* pending work list *\/$/;"	m	struct:wb_writeback_work	typeref:struct:wb_writeback_work::list_head	file:
list	fs/mount.h	/^	struct list_head	list;$/;"	m	struct:mnt_namespace	typeref:struct:mnt_namespace::list_head
list	kernel/acct.c	/^	struct list_head	list;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::list_head	file:
list	kernel/audit.c	/^	struct list_head     list;$/;"	m	struct:audit_buffer	typeref:struct:audit_buffer::list_head	file:
list	kernel/audit.h	/^	struct list_head	list;$/;"	m	struct:audit_entry	typeref:struct:audit_entry::list_head
list	kernel/audit_tree.c	/^		struct list_head list;$/;"	m	struct:audit_chunk::node	typeref:struct:audit_chunk::node::list_head	file:
list	kernel/audit_tree.c	/^	struct list_head list;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
list	kernel/auditsc.c	/^	struct list_head	list;		\/* audit_context->names_list *\/$/;"	m	struct:audit_names	typeref:struct:audit_names::list_head	file:
list	kernel/cgroup.c	/^	pid_t *list;$/;"	m	struct:cgroup_pidlist	file:
list	kernel/cgroup.c	/^	struct list_head list;$/;"	m	struct:cgroup_event	typeref:struct:cgroup_event::list_head	file:
list	kernel/futex.c	/^	struct list_head list;$/;"	m	struct:futex_pi_state	typeref:struct:futex_pi_state::list_head	file:
list	kernel/futex.c	/^	struct plist_node list;$/;"	m	struct:futex_q	typeref:struct:futex_q::plist_node	file:
list	kernel/kprobes.c	/^	struct list_head list;$/;"	m	struct:kprobe_insn_page	typeref:struct:kprobe_insn_page::list_head	file:
list	kernel/kthread.c	/^	struct list_head list;$/;"	m	struct:kthread_create_info	typeref:struct:kthread_create_info::list_head	file:
list	kernel/params.c	/^	struct list_head list;$/;"	m	struct:kmalloced_param	typeref:struct:kmalloced_param::list_head	file:
list	kernel/pid_namespace.c	/^	struct list_head list;$/;"	m	struct:pid_cache	typeref:struct:pid_cache::list_head	file:
list	kernel/semaphore.c	/^	struct list_head list;$/;"	m	struct:semaphore_waiter	typeref:struct:semaphore_waiter::list_head	file:
list	kernel/smp.c	/^	struct list_head	list;$/;"	m	struct:call_single_queue	typeref:struct:call_single_queue::list_head	file:
list	kernel/taskstats.c	/^	struct list_head list;$/;"	m	struct:listener	typeref:struct:listener::list_head	file:
list	kernel/taskstats.c	/^	struct list_head list;$/;"	m	struct:listener_list	typeref:struct:listener_list::list_head	file:
list	kernel/tracepoint.c	/^		struct list_head list;$/;"	m	union:tp_probes::__anon64	typeref:struct:tp_probes::__anon64::list_head	file:
list	kernel/workqueue.c	/^	struct list_head	list;		\/* F: list of flushers *\/$/;"	m	struct:wq_flusher	typeref:struct:wq_flusher::list_head	file:
list	kernel/workqueue.c	/^	struct list_head	list;		\/* W: list of all workqueues *\/$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::list_head	file:
list	lib/rwsem-spinlock.c	/^	struct list_head list;$/;"	m	struct:rwsem_waiter	typeref:struct:rwsem_waiter::list_head	file:
list	mm/highmem.c	/^	struct list_head list;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::list_head	file:
list	mm/kmemleak-test.c	/^	struct list_head list;$/;"	m	struct:test_node	typeref:struct:test_node::list_head	file:
list	mm/ksm.c	/^			struct list_head list;$/;"	m	struct:stable_node::__anon4::__anon5	typeref:struct:stable_node::__anon4::__anon5::list_head	file:
list	mm/memcontrol.c	/^	struct list_head list;$/;"	m	struct:mem_cgroup_eventfd_list	typeref:struct:mem_cgroup_eventfd_list::list_head	file:
list	mm/percpu.c	/^	struct list_head	list;		\/* linked to pcpu_slot lists *\/$/;"	m	struct:pcpu_chunk	typeref:struct:pcpu_chunk::list_head	file:
list	mm/slab.c	/^			struct list_head list;$/;"	m	struct:slab::__anon18::__anon19	typeref:struct:slab::__anon18::__anon19::list_head	file:
list	mm/vmalloc.c	/^	struct list_head list;		\/* address sorted list *\/$/;"	m	struct:vmap_area	typeref:struct:vmap_area::list_head	file:
list_add	include/linux/list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	include/linux/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	include/linux/list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	include/linux/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	include/linux/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	include/linux/list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	include/linux/list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entries	kernel/lockdep.c	/^static struct lock_list list_entries[MAX_LOCKDEP_ENTRIES];$/;"	v	typeref:struct:lock_list	file:
list_entry	include/linux/list.h	350;"	d
list_entry	kernel/rtmutex_common.h	/^	struct plist_node	list_entry;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::plist_node
list_first_entry	include/linux/list.h	361;"	d
list_for_each	include/linux/list.h	369;"	d
list_for_each_entry	include/linux/list.h	418;"	d
list_for_each_entry_continue	include/linux/list.h	454;"	d
list_for_each_entry_continue_reverse	include/linux/list.h	468;"	d
list_for_each_entry_from	include/linux/list.h	481;"	d
list_for_each_entry_reverse	include/linux/list.h	429;"	d
list_for_each_entry_safe	include/linux/list.h	492;"	d
list_for_each_entry_safe_continue	include/linux/list.h	508;"	d
list_for_each_entry_safe_from	include/linux/list.h	524;"	d
list_for_each_entry_safe_reverse	include/linux/list.h	539;"	d
list_for_each_prev	include/linux/list.h	388;"	d
list_for_each_prev_safe	include/linux/list.h	407;"	d
list_for_each_safe	include/linux/list.h	397;"	d
list_is_last	include/linux/list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	include/linux/list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_locations	mm/slub.c	/^static int list_locations(struct kmem_cache *s, char *buf,$/;"	f	file:
list_lock	mm/slab.c	/^	spinlock_t list_lock;$/;"	m	struct:kmem_list3	file:
list_move	include/linux/list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	include/linux/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	include/linux/list.h	442;"	d
list_replace	include/linux/list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	include/linux/list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_rotate_left	include/linux/list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f
list_safe_reset_next	include/linux/list.h	557;"	d
list_slab_objects	mm/slub.c	/^static void list_slab_objects(struct kmem_cache *s, struct page *page,$/;"	f	file:
list_splice	include/linux/list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	include/linux/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	include/linux/list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	include/linux/list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
list_to_page	mm/readahead.c	35;"	d	file:
listener	kernel/taskstats.c	/^struct listener {$/;"	s	file:
listener_list	kernel/taskstats.c	/^struct listener_list {$/;"	s	file:
listxattr	fs/xattr.c	/^listxattr(struct dentry *d, char __user *list, size_t size)$/;"	f	file:
ll_rw_block	fs/buffer.c	/^EXPORT_SYMBOL(ll_rw_block);$/;"	v
ll_rw_block	fs/buffer.c	/^void ll_rw_block(int rw, int nr, struct buffer_head *bhs[])$/;"	f
llink	fs/eventpoll.c	/^	struct list_head llink;$/;"	m	struct:eppoll_entry	typeref:struct:eppoll_entry::list_head	file:
llink	fs/eventpoll.c	/^	struct list_head llink;$/;"	m	struct:nested_call_node	typeref:struct:nested_call_node::list_head	file:
load_aout_binary	fs/binfmt_aout.c	/^static int load_aout_binary(struct linux_binprm * bprm)$/;"	f	file:
load_aout_library	fs/binfmt_aout.c	/^static int load_aout_library(struct file *file)$/;"	f	file:
load_elf_binary	fs/binfmt_elf.c	/^static int load_elf_binary(struct linux_binprm *bprm)$/;"	f	file:
load_elf_fdpic_binary	fs/binfmt_elf_fdpic.c	/^static int load_elf_fdpic_binary(struct linux_binprm *bprm)$/;"	f	file:
load_elf_interp	fs/binfmt_elf.c	/^static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,$/;"	f	file:
load_elf_library	fs/binfmt_elf.c	/^static int load_elf_library(struct file *file)$/;"	f	file:
load_em86	fs/binfmt_em86.c	/^static int load_em86(struct linux_binprm *bprm)$/;"	f	file:
load_flat_binary	fs/binfmt_flat.c	/^static int load_flat_binary(struct linux_binprm * bprm)$/;"	f	file:
load_flat_file	fs/binfmt_flat.c	/^static int load_flat_file(struct linux_binprm * bprm,$/;"	f	file:
load_flat_shared_library	fs/binfmt_flat.c	/^static int load_flat_shared_library(int id, struct lib_info *libs)$/;"	f	file:
load_info	kernel/module.c	/^struct load_info {$/;"	s	file:
load_misc_binary	fs/binfmt_misc.c	/^static int load_misc_binary(struct linux_binprm *bprm)$/;"	f	file:
load_module	kernel/module.c	/^static int load_module(struct load_info *info, const char __user *uargs,$/;"	f	file:
load_module_signing_keys	kernel/modsign_pubkey.c	/^late_initcall(load_module_signing_keys);$/;"	v
load_module_signing_keys	kernel/modsign_pubkey.c	/^static __init int load_module_signing_keys(void)$/;"	f	file:
load_script	fs/binfmt_script.c	/^static int load_script(struct linux_binprm *bprm)$/;"	f	file:
load_som_binary	fs/binfmt_som.c	/^load_som_binary(struct linux_binprm * bprm)$/;"	f	file:
load_som_library	fs/binfmt_som.c	/^static int load_som_library(struct file *f)$/;"	f	file:
loaded	fs/binfmt_flat.c	/^		short loaded;				\/* Has this library been loaded? *\/$/;"	m	struct:lib_info::__anon22	file:
loads	kernel/compat.c	/^	u32 loads[3];$/;"	m	struct:compat_sysinfo	file:
loc	mm/slub.c	/^	struct location *loc;$/;"	m	struct:loc_track	typeref:struct:loc_track::location	file:
loc_track	mm/slub.c	/^struct loc_track {$/;"	s	file:
local_bh_disable	kernel/softirq.c	/^EXPORT_SYMBOL(local_bh_disable);$/;"	v
local_bh_disable	kernel/softirq.c	/^void local_bh_disable(void)$/;"	f
local_bh_enable	kernel/softirq.c	/^EXPORT_SYMBOL(local_bh_enable);$/;"	v
local_bh_enable	kernel/softirq.c	/^void local_bh_enable(void)$/;"	f
local_bh_enable_ip	kernel/softirq.c	/^EXPORT_SYMBOL(local_bh_enable_ip);$/;"	v
local_bh_enable_ip	kernel/softirq.c	/^void local_bh_enable_ip(unsigned long ip)$/;"	f
local_memory_node	mm/page_alloc.c	/^int local_memory_node(int node)$/;"	f
locate_module_kobject	kernel/params.c	/^static struct module_kobject * __init locate_module_kobject(const char *name)$/;"	f	file:
location	mm/slub.c	/^struct location {$/;"	s	file:
lock	fs/eventpoll.c	/^	spinlock_t lock;$/;"	m	struct:eventpoll	file:
lock	fs/eventpoll.c	/^	spinlock_t lock;$/;"	m	struct:nested_calls	file:
lock	fs/file.c	/^	spinlock_t lock;$/;"	m	struct:fdtable_defer	file:
lock	include/linux/spinlock.h	/^ extern void do_raw_spin_lock(raw_spinlock_t *lock) __acquires(lock);$/;"	v
lock	include/linux/spinlock.h	/^ extern void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock);$/;"	v
lock	kernel/cgroup_freezer.c	/^	spinlock_t			lock;$/;"	m	struct:freezer	file:
lock	kernel/cpu.c	/^	struct mutex lock; \/* Synchronizes accesses to refcount, *\/$/;"	m	struct:__anon55	typeref:struct:__anon55::mutex	file:
lock	kernel/cpuset.c	/^	spinlock_t lock;	\/* guards read or write of above *\/$/;"	m	struct:fmeter	file:
lock	kernel/dma.c	/^	int  lock;$/;"	m	struct:dma_chan	file:
lock	kernel/futex.c	/^	spinlock_t lock;$/;"	m	struct:futex_hash_bucket	file:
lock	kernel/printk.c	/^	struct mutex lock;$/;"	m	struct:devkmsg_user	typeref:struct:devkmsg_user::mutex	file:
lock	kernel/rcutree.h	/^	raw_spinlock_t lock;	\/* Root rcu_node's lock protects some *\/$/;"	m	struct:rcu_node
lock	kernel/rtmutex_common.h	/^	struct rt_mutex		*lock;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::rt_mutex
lock	kernel/smp.c	/^	raw_spinlock_t		lock;$/;"	m	struct:call_single_queue	file:
lock	kernel/stop_machine.c	/^	spinlock_t		lock;$/;"	m	struct:cpu_stopper	file:
lock	kernel/timer.c	/^	spinlock_t lock;$/;"	m	struct:tvec_base	file:
lock	kernel/workqueue.c	/^	spinlock_t		lock;		\/* the pool lock *\/$/;"	m	struct:worker_pool	file:
lock	mm/dmapool.c	/^	spinlock_t lock;$/;"	m	struct:dma_pool	file:
lock	mm/highmem.c	/^	spinlock_t lock;			\/* Protect this bucket's list *\/$/;"	m	struct:page_address_slot	file:
lock	mm/kmemleak.c	/^	spinlock_t lock;$/;"	m	struct:kmemleak_object	file:
lock	mm/memcontrol.c	/^	spinlock_t	  lock; \/* for from, to *\/$/;"	m	struct:move_charge_struct	file:
lock	mm/memcontrol.c	/^	spinlock_t lock;$/;"	m	struct:mem_cgroup_tree_per_zone	file:
lock	mm/memory-failure.c	/^	spinlock_t lock;$/;"	m	struct:memory_failure_cpu	file:
lock	mm/page_cgroup.c	/^	spinlock_t	lock;$/;"	m	struct:swap_cgroup_ctrl	file:
lock	mm/slab.c	/^	spinlock_t lock;$/;"	m	struct:array_cache	file:
lock	mm/vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block	file:
lock	mm/vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block_queue	file:
lock_accessed	kernel/lockdep.c	/^static inline unsigned long lock_accessed(struct lock_list *lock)$/;"	f	file:
lock_acquire	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_acquire);$/;"	v
lock_acquire	kernel/lockdep.c	/^void lock_acquire(struct lockdep_map *lock, unsigned int subclass,$/;"	f
lock_acquired	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_acquired);$/;"	v
lock_acquired	kernel/lockdep.c	/^void lock_acquired(struct lockdep_map *lock, unsigned long ip)$/;"	f
lock_anon_vma_root	mm/rmap.c	/^static inline struct anon_vma *lock_anon_vma_root(struct anon_vma *root, struct anon_vma *anon_vma)$/;"	f	file:
lock_chain_get_class	kernel/lockdep.c	/^struct lock_class *lock_chain_get_class(struct lock_chain *chain, int i)$/;"	f
lock_chains	kernel/lockdep.c	/^struct lock_chain lock_chains[MAX_LOCKDEP_CHAINS];$/;"	v	typeref:struct:lock_chain
lock_classes	kernel/lockdep.c	/^static struct lock_class lock_classes[MAX_LOCKDEP_KEYS];$/;"	v	typeref:struct:lock_class	file:
lock_contended	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_contended);$/;"	v
lock_contended	kernel/lockdep.c	/^void lock_contended(struct lockdep_map *lock, unsigned long ip)$/;"	f
lock_cq	kernel/lockdep.c	/^static struct circular_queue lock_cq;$/;"	v	typeref:struct:circular_queue	file:
lock_flag	kernel/lockdep.c	/^static inline unsigned long lock_flag(enum lock_usage_bit bit)$/;"	f	file:
lock_flocks	fs/locks.c	/^EXPORT_SYMBOL_GPL(lock_flocks);$/;"	v
lock_flocks	fs/locks.c	/^void lock_flocks(void)$/;"	f
lock_get_status	fs/locks.c	/^static void lock_get_status(struct seq_file *f, struct file_lock *fl,$/;"	f	file:
lock_hrtimer_base	kernel/hrtimer.c	/^lock_hrtimer_base(const struct hrtimer *timer, unsigned long *flags)$/;"	f	file:
lock_hrtimer_base	kernel/hrtimer.c	/^struct hrtimer_clock_base *lock_hrtimer_base(const struct hrtimer *timer,$/;"	f	file:
lock_init_error	kernel/lockdep.c	/^static const char *lock_init_error;$/;"	v	file:
lock_is_held	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_is_held);$/;"	v
lock_is_held	kernel/lockdep.c	/^int lock_is_held(struct lockdep_map *lock)$/;"	f
lock_kmap	mm/highmem.c	84;"	d	file:
lock_kmap	mm/highmem.c	89;"	d	file:
lock_kmap_any	mm/highmem.c	86;"	d	file:
lock_kmap_any	mm/highmem.c	91;"	d	file:
lock_may_read	fs/locks.c	/^EXPORT_SYMBOL(lock_may_read);$/;"	v
lock_may_read	fs/locks.c	/^int lock_may_read(struct inode *inode, loff_t start, unsigned long len)$/;"	f
lock_may_write	fs/locks.c	/^EXPORT_SYMBOL(lock_may_write);$/;"	v
lock_may_write	fs/locks.c	/^int lock_may_write(struct inode *inode, loff_t start, unsigned long len)$/;"	f
lock_memory_hotplug	mm/memory_hotplug.c	/^void lock_memory_hotplug(void)$/;"	f
lock_mount	fs/namespace.c	/^static int lock_mount(struct path *path)$/;"	f	file:
lock_page	include/linux/pagemap.h	/^static inline void lock_page(struct page *page)$/;"	f
lock_page_killable	include/linux/pagemap.h	/^static inline int lock_page_killable(struct page *page)$/;"	f
lock_page_or_retry	include/linux/pagemap.h	/^static inline int lock_page_or_retry(struct page *page, struct mm_struct *mm,$/;"	f
lock_point	kernel/lockdep.c	/^static int lock_point(unsigned long points[], unsigned long ip)$/;"	f	file:
lock_ptr	kernel/futex.c	/^	spinlock_t *lock_ptr;$/;"	m	struct:futex_q	file:
lock_rcu_walk	fs/namei.c	/^static inline void lock_rcu_walk(void)$/;"	f	file:
lock_release	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_release);$/;"	v
lock_release	kernel/lockdep.c	/^void lock_release(struct lockdep_map *lock, int nested,$/;"	f
lock_release_holdtime	kernel/lockdep.c	/^static inline void lock_release_holdtime(struct held_lock *hlock)$/;"	f	file:
lock_release_holdtime	kernel/lockdep.c	/^static void lock_release_holdtime(struct held_lock *hlock)$/;"	f	file:
lock_release_nested	kernel/lockdep.c	/^static int lock_release_nested(struct task_struct *curr,$/;"	f	file:
lock_release_non_nested	kernel/lockdep.c	/^lock_release_non_nested(struct task_struct *curr,$/;"	f	file:
lock_rename	fs/namei.c	/^EXPORT_SYMBOL(lock_rename);$/;"	v
lock_rename	fs/namei.c	/^struct dentry *lock_rename(struct dentry *p1, struct dentry *p2)$/;"	f
lock_set_class	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_set_class);$/;"	v
lock_set_class	kernel/lockdep.c	/^void lock_set_class(struct lockdep_map *lock, const char *name,$/;"	f
lock_stat	kernel/lockdep.c	/^int lock_stat = 1;$/;"	v
lock_stat	kernel/lockdep.c	67;"	d	file:
lock_stat_cmp	kernel/lockdep_proc.c	/^static int lock_stat_cmp(const void *l, const void *r)$/;"	f	file:
lock_stat_data	kernel/lockdep_proc.c	/^struct lock_stat_data {$/;"	s	file:
lock_stat_open	kernel/lockdep_proc.c	/^static int lock_stat_open(struct inode *inode, struct file *file)$/;"	f	file:
lock_stat_release	kernel/lockdep_proc.c	/^static int lock_stat_release(struct inode *inode, struct file *file)$/;"	f	file:
lock_stat_seq	kernel/lockdep_proc.c	/^struct lock_stat_seq {$/;"	s	file:
lock_stat_write	kernel/lockdep_proc.c	/^static ssize_t lock_stat_write(struct file *file, const char __user *buf,$/;"	f	file:
lock_stats	kernel/lockdep.c	/^struct lock_class_stats lock_stats(struct lock_class *class)$/;"	f
lock_time_add	kernel/lockdep.c	/^static inline void lock_time_add(struct lock_time *src, struct lock_time *dst)$/;"	f	file:
lock_time_inc	kernel/lockdep.c	/^static void lock_time_inc(struct lock_time *lt, u64 time)$/;"	f	file:
lock_timer	kernel/posix-timers.c	149;"	d	file:
lock_usage_bit	kernel/lockdep_internals.h	/^enum lock_usage_bit {$/;"	g
lockdep_annotate_inode_mutex_key	fs/inode.c	/^EXPORT_SYMBOL(lockdep_annotate_inode_mutex_key);$/;"	v
lockdep_annotate_inode_mutex_key	fs/inode.c	/^void lockdep_annotate_inode_mutex_key(struct inode *inode)$/;"	f
lockdep_chains_open	kernel/lockdep_proc.c	/^static int lockdep_chains_open(struct inode *inode, struct file *file)$/;"	f	file:
lockdep_chains_ops	kernel/lockdep_proc.c	/^static const struct seq_operations lockdep_chains_ops = {$/;"	v	typeref:struct:seq_operations	file:
lockdep_clear_current_reclaim_state	kernel/lockdep.c	/^void lockdep_clear_current_reclaim_state(void)$/;"	f
lockdep_count_backward_deps	kernel/lockdep.c	/^unsigned long lockdep_count_backward_deps(struct lock_class *class)$/;"	f
lockdep_count_backward_deps	kernel/lockdep_internals.h	/^lockdep_count_backward_deps(struct lock_class *class)$/;"	f
lockdep_count_forward_deps	kernel/lockdep.c	/^unsigned long lockdep_count_forward_deps(struct lock_class *class)$/;"	f
lockdep_count_forward_deps	kernel/lockdep_internals.h	/^lockdep_count_forward_deps(struct lock_class *class)$/;"	f
lockdep_dependency_gen_id	kernel/lockdep.c	/^static unsigned int lockdep_dependency_gen_id;$/;"	v	file:
lockdep_free_key_range	kernel/lockdep.c	/^void lockdep_free_key_range(void *start, unsigned long size)$/;"	f
lockdep_info	kernel/lockdep.c	/^void __init lockdep_info(void)$/;"	f
lockdep_init	kernel/lockdep.c	/^void lockdep_init(void)$/;"	f
lockdep_init_error	kernel/lockdep.c	/^static int lockdep_init_error;$/;"	v	file:
lockdep_init_map	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lockdep_init_map);$/;"	v
lockdep_init_map	kernel/lockdep.c	/^void lockdep_init_map(struct lockdep_map *lock, const char *name,$/;"	f
lockdep_init_trace	kernel/lockdep.c	/^static struct stack_trace lockdep_init_trace = {$/;"	v	typeref:struct:stack_trace	file:
lockdep_init_trace_data	kernel/lockdep.c	/^static unsigned long lockdep_init_trace_data[20];$/;"	v	file:
lockdep_initialized	kernel/lockdep.c	/^static int lockdep_initialized;$/;"	v	file:
lockdep_lock	kernel/lockdep.c	/^static arch_spinlock_t lockdep_lock = (arch_spinlock_t)__ARCH_SPIN_LOCK_UNLOCKED;$/;"	v	file:
lockdep_map	kernel/workqueue.c	/^	struct lockdep_map	lockdep_map;$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::lockdep_map	file:
lockdep_off	kernel/lockdep.c	/^EXPORT_SYMBOL(lockdep_off);$/;"	v
lockdep_off	kernel/lockdep.c	/^void lockdep_off(void)$/;"	f
lockdep_on	kernel/lockdep.c	/^EXPORT_SYMBOL(lockdep_on);$/;"	v
lockdep_on	kernel/lockdep.c	/^void lockdep_on(void)$/;"	f
lockdep_open	kernel/lockdep_proc.c	/^static int lockdep_open(struct inode *inode, struct file *file)$/;"	f	file:
lockdep_ops	kernel/lockdep_proc.c	/^static const struct seq_operations lockdep_ops = {$/;"	v	typeref:struct:seq_operations	file:
lockdep_print_held_locks	kernel/lockdep.c	/^static void lockdep_print_held_locks(struct task_struct *curr)$/;"	f	file:
lockdep_proc_init	kernel/lockdep_proc.c	/^__initcall(lockdep_proc_init);$/;"	v
lockdep_proc_init	kernel/lockdep_proc.c	/^static int __init lockdep_proc_init(void)$/;"	f	file:
lockdep_rcu_suspicious	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lockdep_rcu_suspicious);$/;"	v
lockdep_rcu_suspicious	kernel/lockdep.c	/^void lockdep_rcu_suspicious(const char *file, const int line, const char *s)$/;"	f
lockdep_reset	kernel/lockdep.c	/^void lockdep_reset(void)$/;"	f
lockdep_reset_lock	kernel/lockdep.c	/^void lockdep_reset_lock(struct lockdep_map *lock)$/;"	f
lockdep_set_current_reclaim_state	kernel/lockdep.c	/^void lockdep_set_current_reclaim_state(gfp_t gfp_mask)$/;"	f
lockdep_stats	kernel/lockdep_internals.h	/^struct lockdep_stats {$/;"	s
lockdep_stats_debug_show	kernel/lockdep_proc.c	/^static void lockdep_stats_debug_show(struct seq_file *m)$/;"	f	file:
lockdep_stats_open	kernel/lockdep_proc.c	/^static int lockdep_stats_open(struct inode *inode, struct file *file)$/;"	f	file:
lockdep_stats_show	kernel/lockdep_proc.c	/^static int lockdep_stats_show(struct seq_file *m, void *v)$/;"	f	file:
lockdep_sys_exit	kernel/lockdep.c	/^void lockdep_sys_exit(void)$/;"	f
lockdep_tasklist_lock_is_held	kernel/fork.c	/^EXPORT_SYMBOL_GPL(lockdep_tasklist_lock_is_held);$/;"	v
lockdep_tasklist_lock_is_held	kernel/fork.c	/^int lockdep_tasklist_lock_is_held(void)$/;"	f
lockdep_trace_alloc	kernel/lockdep.c	/^void lockdep_trace_alloc(gfp_t gfp_mask)$/;"	f
locks_alloc_lock	fs/locks.c	/^EXPORT_SYMBOL_GPL(locks_alloc_lock);$/;"	v
locks_alloc_lock	fs/locks.c	/^struct file_lock *locks_alloc_lock(void)$/;"	f
locks_conflict	fs/locks.c	/^static int locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)$/;"	f	file:
locks_copy_lock	fs/locks.c	/^EXPORT_SYMBOL(locks_copy_lock);$/;"	v
locks_copy_lock	fs/locks.c	/^void locks_copy_lock(struct file_lock *new, struct file_lock *fl)$/;"	f
locks_copy_private	fs/locks.c	/^static void locks_copy_private(struct file_lock *new, struct file_lock *fl)$/;"	f	file:
locks_delete_block	fs/locks.c	/^EXPORT_SYMBOL(locks_delete_block);$/;"	v
locks_delete_block	fs/locks.c	/^void locks_delete_block(struct file_lock *waiter)$/;"	f
locks_delete_lock	fs/locks.c	/^static void locks_delete_lock(struct file_lock **thisfl_p)$/;"	f	file:
locks_free_lock	fs/locks.c	/^EXPORT_SYMBOL(locks_free_lock);$/;"	v
locks_free_lock	fs/locks.c	/^void locks_free_lock(struct file_lock *fl)$/;"	f
locks_init_lock	fs/locks.c	/^EXPORT_SYMBOL(locks_init_lock);$/;"	v
locks_init_lock	fs/locks.c	/^void locks_init_lock(struct file_lock *fl)$/;"	f
locks_init_lock_heads	fs/locks.c	/^static void locks_init_lock_heads(struct file_lock *fl)$/;"	f	file:
locks_insert_block	fs/locks.c	/^static void locks_insert_block(struct file_lock *blocker, $/;"	f	file:
locks_insert_lock	fs/locks.c	/^static void locks_insert_lock(struct file_lock **pos, struct file_lock *fl)$/;"	f	file:
locks_mandatory_area	fs/locks.c	/^EXPORT_SYMBOL(locks_mandatory_area);$/;"	v
locks_mandatory_area	fs/locks.c	/^int locks_mandatory_area(int read_write, struct inode *inode,$/;"	f
locks_mandatory_locked	fs/locks.c	/^int locks_mandatory_locked(struct inode *inode)$/;"	f
locks_next	fs/locks.c	/^static void *locks_next(struct seq_file *f, void *v, loff_t *pos)$/;"	f	file:
locks_open	fs/locks.c	/^static int locks_open(struct inode *inode, struct file *filp)$/;"	f	file:
locks_overlap	fs/locks.c	/^static inline int locks_overlap(struct file_lock *fl1, struct file_lock *fl2)$/;"	f	file:
locks_release_private	fs/locks.c	/^EXPORT_SYMBOL_GPL(locks_release_private);$/;"	v
locks_release_private	fs/locks.c	/^void locks_release_private(struct file_lock *fl)$/;"	f
locks_remove_flock	fs/locks.c	/^void locks_remove_flock(struct file *filp)$/;"	f
locks_remove_posix	fs/locks.c	/^EXPORT_SYMBOL(locks_remove_posix);$/;"	v
locks_remove_posix	fs/locks.c	/^void locks_remove_posix(struct file *filp, fl_owner_t owner)$/;"	f
locks_seq_operations	fs/locks.c	/^static const struct seq_operations locks_seq_operations = {$/;"	v	typeref:struct:seq_operations	file:
locks_show	fs/locks.c	/^static int locks_show(struct seq_file *f, void *v)$/;"	f	file:
locks_start	fs/locks.c	/^static void *locks_start(struct seq_file *f, loff_t *pos)$/;"	f	file:
locks_stop	fs/locks.c	/^static void locks_stop(struct seq_file *f, void *v)$/;"	f	file:
locks_wake_up_blocks	fs/locks.c	/^static void locks_wake_up_blocks(struct file_lock *blocker)$/;"	f	file:
lockstat_clock	kernel/lockdep.c	/^static inline u64 lockstat_clock(void)$/;"	f	file:
lockstat_ops	kernel/lockdep_proc.c	/^static const struct seq_operations lockstat_ops = {$/;"	v	typeref:struct:seq_operations	file:
lockup_detector_init	kernel/watchdog.c	/^void __init lockup_detector_init(void)$/;"	f
log	kernel/printk.c	/^struct log {$/;"	s	file:
log_buf	kernel/printk.c	/^static char *log_buf = __log_buf;$/;"	v	file:
log_buf_kexec_setup	kernel/printk.c	/^void log_buf_kexec_setup(void)$/;"	f
log_buf_len	kernel/printk.c	/^static u32 log_buf_len = __LOG_BUF_LEN;$/;"	v	file:
log_buf_len_setup	kernel/printk.c	/^static int __init log_buf_len_setup(char *str)$/;"	f	file:
log_dict	kernel/printk.c	/^static char *log_dict(const struct log *msg)$/;"	f	file:
log_early	mm/kmemleak.c	/^static void __init log_early(int op_type, const void *ptr, size_t size,$/;"	f	file:
log_first_idx	kernel/printk.c	/^static u32 log_first_idx;$/;"	v	file:
log_first_seq	kernel/printk.c	/^static u64 log_first_seq;$/;"	v	file:
log_flags	kernel/printk.c	/^enum log_flags {$/;"	g	file:
log_from_idx	kernel/printk.c	/^static struct log *log_from_idx(u32 idx) { return NULL; }$/;"	f	file:
log_from_idx	kernel/printk.c	/^static struct log *log_from_idx(u32 idx)$/;"	f	file:
log_next	kernel/printk.c	/^static u32 log_next(u32 idx) { return 0; }$/;"	f	file:
log_next	kernel/printk.c	/^static u32 log_next(u32 idx)$/;"	f	file:
log_next_idx	kernel/printk.c	/^static u32 log_next_idx;$/;"	v	file:
log_next_seq	kernel/printk.c	/^static u64 log_next_seq;$/;"	v	file:
log_store	kernel/printk.c	/^static void log_store(int facility, int level,$/;"	f	file:
log_text	kernel/printk.c	/^static char *log_text(const struct log *msg)$/;"	f	file:
log_wait	kernel/printk.c	/^DECLARE_WAIT_QUEUE_HEAD(log_wait);$/;"	v
logbuf_cpu	kernel/printk.c	/^static volatile unsigned int logbuf_cpu = UINT_MAX;$/;"	v	file:
logical_offset_in_bio	fs/direct-io.c	/^	loff_t logical_offset_in_bio;	\/* current first logical block in bio *\/$/;"	m	struct:dio_submit	file:
logical_to_blk	fs/ioctl.c	/^static inline sector_t logical_to_blk(struct inode *inode, loff_t offset)$/;"	f	file:
long_max	fs/eventpoll.c	/^static long long_max = LONG_MAX;$/;"	v	file:
look_up_lock_class	kernel/lockdep.c	/^look_up_lock_class(struct lockdep_map *lock, unsigned int subclass)$/;"	f	file:
lookup_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(lookup_bdev);$/;"	v
lookup_bdev	fs/block_dev.c	/^struct block_device *lookup_bdev(const char *pathname)$/;"	f
lookup_bh_lru	fs/buffer.c	/^lookup_bh_lru(struct block_device *bdev, sector_t block, unsigned size)$/;"	f	file:
lookup_chain_cache	kernel/lockdep.c	/^static inline int lookup_chain_cache(struct task_struct *curr,$/;"	f	file:
lookup_dcache	fs/namei.c	/^static struct dentry *lookup_dcache(struct qstr *name, struct dentry *dir,$/;"	f	file:
lookup_dcookie	fs/dcookies.c	/^SYSCALL_DEFINE(lookup_dcookie)(u64 cookie64, char __user * buf, size_t len)$/;"	f
lookup_exec_domain	kernel/exec_domain.c	/^lookup_exec_domain(unsigned int personality)$/;"	f	file:
lookup_fast	fs/namei.c	/^static int lookup_fast(struct nameidata *nd,$/;"	f	file:
lookup_hash	fs/namei.c	/^static struct dentry *lookup_hash(struct nameidata *nd)$/;"	f	file:
lookup_ioctx	fs/aio.c	/^static struct kioctx *lookup_ioctx(unsigned long ctx_id)$/;"	f	file:
lookup_kiocb	fs/aio.c	/^static struct kiocb *lookup_kiocb(struct kioctx *ctx, struct iocb __user *iocb,$/;"	f	file:
lookup_last	fs/namei.c	/^static inline int lookup_last(struct nameidata *nd, struct path *path)$/;"	f	file:
lookup_mnt	fs/namespace.c	/^struct vfsmount *lookup_mnt(struct path *path)$/;"	f
lookup_module_symbol_attrs	kernel/module.c	/^int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size,$/;"	f
lookup_module_symbol_name	kernel/module.c	/^int lookup_module_symbol_name(unsigned long addr, char *symname)$/;"	f
lookup_node	mm/mempolicy.c	/^static int lookup_node(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
lookup_object	mm/kmemleak.c	/^static struct kmemleak_object *lookup_object(unsigned long ptr, int alias)$/;"	f	file:
lookup_one_len	fs/namei.c	/^EXPORT_SYMBOL(lookup_one_len);$/;"	v
lookup_one_len	fs/namei.c	/^struct dentry *lookup_one_len(const char *name, struct dentry *base, int len)$/;"	f
lookup_open	fs/namei.c	/^static int lookup_open(struct nameidata *nd, struct path *path,$/;"	f	file:
lookup_page_cgroup	mm/page_cgroup.c	/^struct page_cgroup *lookup_page_cgroup(struct page *page)$/;"	f
lookup_page_cgroup_used	mm/memcontrol.c	/^static struct page_cgroup *lookup_page_cgroup_used(struct page *page)$/;"	f	file:
lookup_pi_state	kernel/futex.c	/^lookup_pi_state(u32 uval, struct futex_hash_bucket *hb,$/;"	f	file:
lookup_real	fs/namei.c	/^static struct dentry *lookup_real(struct inode *dir, struct dentry *dentry,$/;"	f	file:
lookup_resource	kernel/resource.c	/^struct resource *lookup_resource(struct resource *root, resource_size_t start)$/;"	f
lookup_slow	fs/namei.c	/^static int lookup_slow(struct nameidata *nd, struct path *path)$/;"	f	file:
lookup_swap_cache	mm/swap_state.c	/^struct page * lookup_swap_cache(swp_entry_t entry)$/;"	f
lookup_swap_cgroup	mm/page_cgroup.c	/^static struct swap_cgroup *lookup_swap_cgroup(swp_entry_t ent,$/;"	f	file:
lookup_swap_cgroup_id	mm/page_cgroup.c	/^unsigned short lookup_swap_cgroup_id(swp_entry_t ent)$/;"	f
lookup_symbol	kernel/module.c	/^static const struct kernel_symbol *lookup_symbol(const char *name,$/;"	f	file:
lookup_symbol_attrs	kernel/kallsyms.c	/^int lookup_symbol_attrs(unsigned long addr, unsigned long *size,$/;"	f
lookup_symbol_name	kernel/kallsyms.c	/^int lookup_symbol_name(unsigned long addr, char *symname)$/;"	f
loops_per_msec	kernel/printk.c	/^static unsigned long long loops_per_msec;	\/* based on boot_delay *\/$/;"	v	file:
lowest_in_progress	kernel/async.c	/^static async_cookie_t lowest_in_progress(struct async_domain *domain)$/;"	f	file:
lowmem_reserve_ratio_sysctl_handler	mm/page_alloc.c	/^int lowmem_reserve_ratio_sysctl_handler(ctl_table *table, int write,$/;"	f
lru	mm/memory-failure.c	750;"	d	file:
lru	mm/memory-failure.c	807;"	d	file:
lru_add_drain	mm/swap.c	/^void lru_add_drain(void)$/;"	f
lru_add_drain_all	mm/swap.c	/^int lru_add_drain_all(void)$/;"	f
lru_add_drain_cpu	mm/swap.c	/^void lru_add_drain_cpu(int cpu)$/;"	f
lru_add_drain_per_cpu	mm/swap.c	/^static void lru_add_drain_per_cpu(struct work_struct *dummy)$/;"	f	file:
lru_add_page_tail	mm/swap.c	/^void lru_add_page_tail(struct page *page, struct page *page_tail,$/;"	f
lru_cache_add_lru	mm/swap.c	/^void lru_cache_add_lru(struct page *page, enum lru_list lru)$/;"	f
lru_deactivate_fn	mm/swap.c	/^static void lru_deactivate_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
lru_size	mm/memcontrol.c	/^	unsigned long		lru_size[NR_LRU_LISTS];$/;"	m	struct:mem_cgroup_per_zone	file:
lru_to_page	mm/vmscan.c	97;"	d	file:
lruvec	mm/memcontrol.c	/^	struct lruvec		lruvec;$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::lruvec	file:
lruvec_init	mm/mmzone.c	/^void lruvec_init(struct lruvec *lruvec)$/;"	f
ls_next	kernel/lockdep_proc.c	/^static void *ls_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
ls_show	kernel/lockdep_proc.c	/^static int ls_show(struct seq_file *m, void *v)$/;"	f	file:
ls_start	kernel/lockdep_proc.c	/^static void *ls_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
ls_stop	kernel/lockdep_proc.c	/^static void ls_stop(struct seq_file *m, void *v)$/;"	f	file:
lseek_execute	fs/read_write.c	/^static loff_t lseek_execute(struct file *file, struct inode *inode,$/;"	f	file:
lstats_fops	kernel/latencytop.c	/^static const struct file_operations lstats_fops = {$/;"	v	typeref:struct:file_operations	file:
lstats_open	kernel/latencytop.c	/^static int lstats_open(struct inode *inode, struct file *filp)$/;"	f	file:
lstats_show	kernel/latencytop.c	/^static int lstats_show(struct seq_file *m, void *v)$/;"	f	file:
lstats_write	kernel/latencytop.c	/^lstats_write(struct file *file, const char __user *buf, size_t count,$/;"	f	file:
m	fs/mount.h	/^	struct seq_file m;$/;"	m	struct:proc_mounts	typeref:struct:proc_mounts::seq_file
m_i_frag	fs/ext3/ext3.h	/^			__u8	m_i_frag;	\/* Fragment number *\/$/;"	m	struct:ext3_inode::__anon35::__anon38
m_i_fsize	fs/ext3/ext3.h	/^			__u8	m_i_fsize;	\/* Fragment size *\/$/;"	m	struct:ext3_inode::__anon35::__anon38
m_i_reserved1	fs/ext3/ext3.h	/^			__u32  m_i_reserved1;$/;"	m	struct:ext3_inode::__anon31::__anon34
m_i_reserved2	fs/ext3/ext3.h	/^			__u32	m_i_reserved2[2];$/;"	m	struct:ext3_inode::__anon35::__anon38
m_next	fs/namespace.c	/^static void *m_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
m_next	kernel/module.c	/^static void *m_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
m_next	kernel/user_namespace.c	/^static void *m_next(struct seq_file *seq, void *v, loff_t *pos)$/;"	f	file:
m_pad1	fs/ext3/ext3.h	/^			__u16	m_pad1;$/;"	m	struct:ext3_inode::__anon35::__anon38
m_show	fs/namespace.c	/^static int m_show(struct seq_file *m, void *v)$/;"	f	file:
m_show	kernel/module.c	/^static int m_show(struct seq_file *m, void *p)$/;"	f	file:
m_start	fs/namespace.c	/^static void *m_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
m_start	kernel/module.c	/^static void *m_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
m_start	kernel/user_namespace.c	/^static void *m_start(struct seq_file *seq, loff_t *ppos, struct uid_gid_map *map)$/;"	f	file:
m_stop	fs/namespace.c	/^static void m_stop(struct seq_file *m, void *v)$/;"	f	file:
m_stop	kernel/module.c	/^static void m_stop(struct seq_file *m, void *p)$/;"	f	file:
m_stop	kernel/user_namespace.c	/^static void m_stop(struct seq_file *seq, void *v)$/;"	f	file:
madvise_behavior	mm/madvise.c	/^static long madvise_behavior(struct vm_area_struct * vma,$/;"	f	file:
madvise_behavior_valid	mm/madvise.c	/^madvise_behavior_valid(int behavior)$/;"	f	file:
madvise_dontneed	mm/madvise.c	/^static long madvise_dontneed(struct vm_area_struct * vma,$/;"	f	file:
madvise_hwpoison	mm/madvise.c	/^static int madvise_hwpoison(int bhv, unsigned long start, unsigned long end)$/;"	f	file:
madvise_need_mmap_write	mm/madvise.c	/^static int madvise_need_mmap_write(int behavior)$/;"	f	file:
madvise_remove	mm/madvise.c	/^static long madvise_remove(struct vm_area_struct *vma,$/;"	f	file:
madvise_vma	mm/madvise.c	/^madvise_vma(struct vm_area_struct *vma, struct vm_area_struct **prev,$/;"	f	file:
madvise_willneed	mm/madvise.c	/^static long madvise_willneed(struct vm_area_struct * vma,$/;"	f	file:
magic	fs/binfmt_misc.c	/^	char *magic;			\/* magic or filename extension *\/$/;"	m	struct:__anon25	file:
main_extable_sort_needed	kernel/extable.c	/^u32 __initdata main_extable_sort_needed = 1;$/;"	v
major	fs/char_dev.c	/^	unsigned int major;$/;"	m	struct:char_device_struct	file:
major	kernel/auditsc.c	/^	int		    major;      \/* syscall number *\/$/;"	m	struct:audit_context	file:
major_to_index	fs/char_dev.c	/^static inline int major_to_index(unsigned major)$/;"	f	file:
make_alloc_exact	mm/page_alloc.c	/^static void *make_alloc_exact(unsigned long addr, unsigned order, size_t size)$/;"	f	file:
make_bad_inode	fs/bad_inode.c	/^EXPORT_SYMBOL(make_bad_inode);$/;"	v
make_bad_inode	fs/bad_inode.c	/^void make_bad_inode(struct inode *inode)$/;"	f
make_black_object	mm/kmemleak.c	/^static void make_black_object(unsigned long ptr)$/;"	f	file:
make_gray_object	mm/kmemleak.c	/^static void make_gray_object(unsigned long ptr)$/;"	f	file:
make_huge_pte	mm/hugetlb.c	/^static pte_t make_huge_pte(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
make_indexed_dir	fs/ext3/namei.c	/^static int make_indexed_dir(handle_t *handle, struct dentry *dentry,$/;"	f	file:
make_kgid	kernel/user_namespace.c	/^EXPORT_SYMBOL(make_kgid);$/;"	v
make_kgid	kernel/user_namespace.c	/^kgid_t make_kgid(struct user_namespace *ns, gid_t gid)$/;"	f
make_kprojid	kernel/user_namespace.c	/^EXPORT_SYMBOL(make_kprojid);$/;"	v
make_kprojid	kernel/user_namespace.c	/^kprojid_t make_kprojid(struct user_namespace *ns, projid_t projid)$/;"	f
make_kuid	kernel/user_namespace.c	/^EXPORT_SYMBOL(make_kuid);$/;"	v
make_kuid	kernel/user_namespace.c	/^kuid_t make_kuid(struct user_namespace *ns, uid_t uid)$/;"	f
malloc_sizes	mm/slab.c	/^EXPORT_SYMBOL(malloc_sizes);$/;"	v
malloc_sizes	mm/slab.c	/^struct cache_sizes malloc_sizes[] = {$/;"	v	typeref:struct:cache_sizes
manage_workers	kernel/workqueue.c	/^static bool manage_workers(struct worker *worker)$/;"	f	file:
managed_dentry_might_block	fs/namei.c	/^static inline bool managed_dentry_might_block(struct dentry *dentry)$/;"	f	file:
mangle	fs/namespace.c	/^static inline void mangle(struct seq_file *m, const char *s)$/;"	f	file:
mangle	fs/proc_namespace.c	/^static inline void mangle(struct seq_file *m, const char *s)$/;"	f	file:
mangle_path	fs/seq_file.c	/^EXPORT_SYMBOL(mangle_path);$/;"	v
mangle_path	fs/seq_file.c	/^char *mangle_path(char *s, const char *p, const char *esc)$/;"	f
map	mm/page_cgroup.c	/^	struct page **map;$/;"	m	struct:swap_cgroup_ctrl	typeref:struct:swap_cgroup_ctrl::page	file:
map	mm/percpu.c	/^	int			*map;		\/* allocation map *\/$/;"	m	struct:pcpu_chunk	file:
map_alloc	mm/percpu.c	/^	int			map_alloc;	\/* # of map entries allocated *\/$/;"	m	struct:pcpu_chunk	file:
map_buffer_to_page	fs/mpage.c	/^map_buffer_to_page(struct page *page, struct buffer_head *bh, int page_block) $/;"	f	file:
map_id_down	kernel/user_namespace.c	/^static u32 map_id_down(struct uid_gid_map *map, u32 id)$/;"	f	file:
map_id_range_down	kernel/user_namespace.c	/^static u32 map_id_range_down(struct uid_gid_map *map, u32 id, u32 count)$/;"	f	file:
map_id_up	kernel/user_namespace.c	/^static u32 map_id_up(struct uid_gid_map *map, u32 id)$/;"	f	file:
map_kernel_range_noflush	mm/vmalloc.c	/^int map_kernel_range_noflush(unsigned long addr, unsigned long size,$/;"	f
map_new_virtual	mm/highmem.c	/^static inline unsigned long map_new_virtual(struct page *page)$/;"	f	file:
map_pages	mm/compaction.c	/^static void map_pages(struct list_head *list)$/;"	f	file:
map_som_binary	fs/binfmt_som.c	/^static int map_som_binary(struct file *file,$/;"	f	file:
map_swap_entry	mm/swapfile.c	/^static sector_t map_swap_entry(swp_entry_t entry, struct block_device **bdev)$/;"	f	file:
map_swap_page	mm/swapfile.c	/^sector_t map_swap_page(struct page *page, struct block_device **bdev)$/;"	f
map_used	mm/percpu.c	/^	int			map_used;	\/* # of map entries used *\/$/;"	m	struct:pcpu_chunk	file:
map_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(map_vm_area);$/;"	v
map_vm_area	mm/vmalloc.c	/^int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page ***pages)$/;"	f
map_write	kernel/user_namespace.c	/^static ssize_t map_write(struct file *file, const char __user *buf,$/;"	f	file:
mapping_balloon	include/linux/pagemap.h	/^static inline int mapping_balloon(struct address_space *mapping)$/;"	f
mapping_clear_balloon	include/linux/pagemap.h	/^static inline void mapping_clear_balloon(struct address_space *mapping)$/;"	f
mapping_clear_unevictable	include/linux/pagemap.h	/^static inline void mapping_clear_unevictable(struct address_space *mapping)$/;"	f
mapping_flags	include/linux/pagemap.h	/^enum mapping_flags {$/;"	g
mapping_gfp_mask	include/linux/pagemap.h	/^static inline gfp_t mapping_gfp_mask(struct address_space * mapping)$/;"	f
mapping_set_balloon	include/linux/pagemap.h	/^static inline void mapping_set_balloon(struct address_space *mapping)$/;"	f
mapping_set_error	include/linux/pagemap.h	/^static inline void mapping_set_error(struct address_space *mapping, int error)$/;"	f
mapping_set_gfp_mask	include/linux/pagemap.h	/^static inline void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)$/;"	f
mapping_set_unevictable	include/linux/pagemap.h	/^static inline void mapping_set_unevictable(struct address_space *mapping)$/;"	f
mapping_tagged	mm/page-writeback.c	/^EXPORT_SYMBOL(mapping_tagged);$/;"	v
mapping_tagged	mm/page-writeback.c	/^int mapping_tagged(struct address_space *mapping, int tag)$/;"	f
mapping_unevictable	include/linux/pagemap.h	/^static inline int mapping_unevictable(struct address_space *mapping)$/;"	f
mappings_overlap	kernel/user_namespace.c	/^static bool mappings_overlap(struct uid_gid_map *new_map, struct uid_gid_extent *extent)$/;"	f	file:
mark	kernel/audit_tree.c	/^	struct fsnotify_mark mark;$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::fsnotify_mark	file:
mark	kernel/audit_watch.c	/^	struct fsnotify_mark mark; \/* fsnotify mark on the inode *\/$/;"	m	struct:audit_parent	typeref:struct:audit_parent::fsnotify_mark	file:
mark_bitmap_end	fs/ext3/resize.c	/^static void mark_bitmap_end(int start_bit, int end_bit, char *bitmap)$/;"	f	file:
mark_bootmem	mm/bootmem.c	/^static int __init mark_bootmem(unsigned long start, unsigned long end,$/;"	f	file:
mark_bootmem_node	mm/bootmem.c	/^static int __init mark_bootmem_node(bootmem_data_t *bdata,$/;"	f	file:
mark_buffer_async_read	fs/buffer.c	/^static void mark_buffer_async_read(struct buffer_head *bh)$/;"	f	file:
mark_buffer_async_write	fs/buffer.c	/^EXPORT_SYMBOL(mark_buffer_async_write);$/;"	v
mark_buffer_async_write	fs/buffer.c	/^void mark_buffer_async_write(struct buffer_head *bh)$/;"	f
mark_buffer_async_write_endio	fs/buffer.c	/^static void mark_buffer_async_write_endio(struct buffer_head *bh,$/;"	f	file:
mark_buffer_dirty	fs/buffer.c	/^EXPORT_SYMBOL(mark_buffer_dirty);$/;"	v
mark_buffer_dirty	fs/buffer.c	/^void mark_buffer_dirty(struct buffer_head *bh)$/;"	f
mark_buffer_dirty_inode	fs/buffer.c	/^EXPORT_SYMBOL(mark_buffer_dirty_inode);$/;"	v
mark_buffer_dirty_inode	fs/buffer.c	/^void mark_buffer_dirty_inode(struct buffer_head *bh, struct inode *inode)$/;"	f
mark_files_ro	fs/file_table.c	/^void mark_files_ro(struct super_block *sb)$/;"	f
mark_free_pages	mm/page_alloc.c	/^void mark_free_pages(struct zone *zone)$/;"	f
mark_held_locks	kernel/lockdep.c	/^mark_held_locks(struct task_struct *curr, enum mark_type mark)$/;"	f	file:
mark_irqflags	kernel/lockdep.c	/^static inline int mark_irqflags(struct task_struct *curr,$/;"	f	file:
mark_irqflags	kernel/lockdep.c	/^static int mark_irqflags(struct task_struct *curr, struct held_lock *hlock)$/;"	f	file:
mark_lock	kernel/lockdep.c	/^static int mark_lock(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
mark_lock_accessed	kernel/lockdep.c	/^static inline void mark_lock_accessed(struct lock_list *lock,$/;"	f	file:
mark_lock_irq	kernel/lockdep.c	/^int mark_lock_irq(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
mark_lock_irq	kernel/lockdep.c	/^mark_lock_irq(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
mark_mounts_for_expiry	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mark_mounts_for_expiry);$/;"	v
mark_mounts_for_expiry	fs/namespace.c	/^void mark_mounts_for_expiry(struct list_head *mounts)$/;"	f
mark_page_accessed	mm/swap.c	/^EXPORT_SYMBOL(mark_page_accessed);$/;"	v
mark_page_accessed	mm/swap.c	/^void mark_page_accessed(struct page *page)$/;"	f
mark_rt_mutex_waiters	kernel/rtmutex.c	/^static inline void mark_rt_mutex_waiters(struct rt_mutex *lock)$/;"	f	file:
mark_type	kernel/lockdep.c	/^enum mark_type {$/;"	g	file:
mark_work_canceling	kernel/workqueue.c	/^static void mark_work_canceling(struct work_struct *work)$/;"	f	file:
masix1	fs/ext3/ext3.h	/^		} masix1;$/;"	m	union:ext3_inode::__anon31	typeref:struct:ext3_inode::__anon31::__anon34
masix2	fs/ext3/ext3.h	/^		} masix2;$/;"	m	union:ext3_inode::__anon35	typeref:struct:ext3_inode::__anon35::__anon38
mask	fs/binfmt_misc.c	/^	char *mask;			\/* mask, NULL for exact match *\/$/;"	m	struct:__anon25	file:
mask	mm/memory-failure.c	/^	unsigned long mask;$/;"	m	struct:page_state	file:
masked_status	fs/compat_ioctl.c	/^	unsigned char masked_status;	\/* [o] shifted, masked scsi status *\/$/;"	m	struct:sg_io_hdr32	file:
match_futex	kernel/futex.c	/^static inline int match_futex(union futex_key *key1, union futex_key *key2)$/;"	f	file:
match_held_lock	kernel/lockdep.c	/^static int match_held_lock(struct held_lock *hlock, struct lockdep_map *lock)$/;"	f	file:
match_tree_refs	kernel/auditsc.c	/^static int match_tree_refs(struct audit_context *ctx, struct audit_tree *tree)$/;"	f	file:
mattr	kernel/module.c	/^	struct module_attribute mattr;$/;"	m	struct:module_sect_attr	typeref:struct:module_sect_attr::module_attribute	file:
mattr	kernel/params.c	/^	struct module_attribute mattr;$/;"	m	struct:param_attribute	typeref:struct:param_attribute::module_attribute	file:
max	kernel/resource.c	/^	resource_size_t min, max, align;$/;"	m	struct:resource_constraint	file:
max	kernel/sysctl.c	/^	int *max;$/;"	m	struct:do_proc_dointvec_minmax_conv_param	file:
max	mm/slub.c	/^	unsigned long max;$/;"	m	struct:loc_track	file:
max_active	kernel/workqueue.c	/^	int			max_active;	\/* L: max active works *\/$/;"	m	struct:pool_workqueue	file:
max_addr	mm/kmemleak.c	/^static unsigned long max_addr;$/;"	v	file:
max_bfs_queue_depth	kernel/lockdep.c	/^unsigned int max_bfs_queue_depth;$/;"	v
max_block_pindex	mm/scm.c	/^unsigned long max_block_pindex = 0;$/;"	v
max_buffer_heads	fs/buffer.c	/^static unsigned long max_buffer_heads;$/;"	v	file:
max_extfrag_threshold	kernel/sysctl.c	/^static int max_extfrag_threshold = 1000;$/;"	v	file:
max_lock_depth	kernel/rtmutex.c	/^int max_lock_depth = 1024;$/;"	v
max_lockdep_depth	kernel/lockdep.c	/^unsigned int max_lockdep_depth;$/;"	v
max_low_pfn	mm/bootmem.c	/^unsigned long max_low_pfn;$/;"	v
max_low_pfn	mm/nobootmem.c	/^unsigned long max_low_pfn;$/;"	v
max_mapnr	mm/memory.c	/^EXPORT_SYMBOL(max_mapnr);$/;"	v
max_mapnr	mm/memory.c	/^unsigned long max_mapnr;$/;"	v
max_mapnr	mm/nommu.c	/^unsigned long max_mapnr;$/;"	v
max_offline	kernel/rcutorture.c	/^static int max_offline;$/;"	v	file:
max_online	kernel/rcutorture.c	/^static int max_online;$/;"	v	file:
max_pages	mm/quicklist.c	/^static unsigned long max_pages(unsigned long min_pages)$/;"	f	file:
max_pfn	mm/bootmem.c	/^unsigned long max_pfn;$/;"	v
max_pfn	mm/nobootmem.c	/^unsigned long max_pfn;$/;"	v
max_pid	mm/slub.c	/^	long max_pid;$/;"	m	struct:location	file:
max_ratio_store	mm/backing-dev.c	/^static ssize_t max_ratio_store(struct device *dev,$/;"	f	file:
max_sane_readahead	mm/readahead.c	/^unsigned long max_sane_readahead(unsigned long nr)$/;"	f
max_sched_granularity_ns	kernel/sysctl.c	/^static int max_sched_granularity_ns = NSEC_PER_SEC;	\/* 1 second *\/$/;"	v	file:
max_sched_tunable_scaling	kernel/sysctl.c	/^static int max_sched_tunable_scaling = SCHED_TUNABLESCALING_END-1;$/;"	v	file:
max_select_fd	fs/select.c	/^static int max_select_fd(unsigned long n, fd_set_bits *fds)$/;"	f	file:
max_swapfiles_check	mm/swapfile.c	/^late_initcall(max_swapfiles_check);$/;"	v
max_swapfiles_check	mm/swapfile.c	/^static int __init max_swapfiles_check(void)$/;"	f	file:
max_threads	kernel/fork.c	/^int max_threads;		\/* tunable limit on nr_threads *\/$/;"	v
max_time	mm/slub.c	/^	long max_time;$/;"	m	struct:location	file:
max_virtindex	mm/scm.h	/^	long int max_virtindex;$/;"	m	struct:__anon14
max_wakeup_granularity_ns	kernel/sysctl.c	/^static int max_wakeup_granularity_ns = NSEC_PER_SEC;	\/* 1 second *\/$/;"	v	file:
maxcpus	kernel/smp.c	/^static int __init maxcpus(char *str)$/;"	f	file:
maxevents	fs/eventpoll.c	/^	int maxevents;$/;"	m	struct:ep_send_events_data	file:
maxolduid	kernel/sysctl.c	/^static int maxolduid = 65535;$/;"	v	file:
may_create	fs/namei.c	/^static inline int may_create(struct inode *dir, struct dentry *child)$/;"	f	file:
may_delete	fs/namei.c	/^static int may_delete(struct inode *dir,struct dentry *victim,int isdir)$/;"	f	file:
may_expand_vm	mm/mmap.c	/^int may_expand_vm(struct mm_struct *mm, unsigned long npages)$/;"	f
may_follow_link	fs/namei.c	/^static inline int may_follow_link(struct path *link, struct nameidata *nd)$/;"	f	file:
may_init_module	kernel/module.c	/^static int may_init_module(void)$/;"	f	file:
may_linkat	fs/namei.c	/^static int may_linkat(struct path *link)$/;"	f	file:
may_lookup	fs/namei.c	/^static inline int may_lookup(struct nameidata *nd)$/;"	f	file:
may_mknod	fs/namei.c	/^static int may_mknod(umode_t mode)$/;"	f	file:
may_mount	fs/namespace.c	/^static inline bool may_mount(void)$/;"	f	file:
may_o_create	fs/namei.c	/^static int may_o_create(struct path *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
may_open	fs/namei.c	/^static int may_open(struct path *path, int acc_mode, int flag)$/;"	f	file:
may_ptrace_stop	kernel/signal.c	/^static inline int may_ptrace_stop(void)$/;"	f	file:
may_start_working	kernel/workqueue.c	/^static bool may_start_working(struct worker_pool *pool)$/;"	f	file:
may_swap	mm/vmscan.c	/^	int may_swap;$/;"	m	struct:scan_control	file:
may_umount	fs/namespace.c	/^EXPORT_SYMBOL(may_umount);$/;"	v
may_umount	fs/namespace.c	/^int may_umount(struct vfsmount *mnt)$/;"	f
may_umount_tree	fs/namespace.c	/^EXPORT_SYMBOL(may_umount_tree);$/;"	v
may_umount_tree	fs/namespace.c	/^int may_umount_tree(struct vfsmount *m)$/;"	f
may_unmap	mm/vmscan.c	/^	int may_unmap;$/;"	m	struct:scan_control	file:
may_write_to_queue	mm/vmscan.c	/^static int may_write_to_queue(struct backing_dev_info *bdi,$/;"	f	file:
may_writepage	mm/vmscan.c	/^	int may_writepage;$/;"	m	struct:scan_control	file:
maybe_destroy_workers	kernel/workqueue.c	/^static bool maybe_destroy_workers(struct worker_pool *pool)$/;"	f	file:
maybe_kfree_parameter	kernel/params.c	/^static void maybe_kfree_parameter(void *param)$/;"	f	file:
maybe_pmd_mkwrite	mm/huge_memory.c	/^pmd_t maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)$/;"	f
maybe_relocated	kernel/module.c	/^static unsigned long maybe_relocated(unsigned long crc,$/;"	f	file:
mayday_clear_cpu	kernel/workqueue.c	191;"	d	file:
mayday_clear_cpu	kernel/workqueue.c	198;"	d	file:
mayday_mask	kernel/workqueue.c	/^	mayday_mask_t		mayday_mask;	\/* cpus requesting rescue *\/$/;"	m	struct:workqueue_struct	file:
mayday_mask_t	kernel/workqueue.c	/^typedef cpumask_var_t mayday_mask_t;$/;"	t	file:
mayday_mask_t	kernel/workqueue.c	/^typedef unsigned long mayday_mask_t;$/;"	t	file:
mayday_test_and_set_cpu	kernel/workqueue.c	189;"	d	file:
mayday_test_and_set_cpu	kernel/workqueue.c	197;"	d	file:
mayday_timer	kernel/workqueue.c	/^	struct timer_list	mayday_timer;	\/* L: SOS timer for workers *\/$/;"	m	struct:worker_pool	typeref:struct:worker_pool::timer_list	file:
maydump	fs/binfmt_elf_fdpic.c	/^static int maydump(struct vm_area_struct *vma, unsigned long mm_flags)$/;"	f	file:
mb_assert	fs/mbcache.c	46;"	d	file:
mb_assert	fs/mbcache.c	51;"	d	file:
mb_cache_create	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_create);$/;"	v
mb_cache_create	fs/mbcache.c	/^mb_cache_create(const char *name, int bucket_bits)$/;"	f
mb_cache_destroy	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_destroy);$/;"	v
mb_cache_destroy	fs/mbcache.c	/^mb_cache_destroy(struct mb_cache *cache)$/;"	f
mb_cache_entry_alloc	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_alloc);$/;"	v
mb_cache_entry_alloc	fs/mbcache.c	/^mb_cache_entry_alloc(struct mb_cache *cache, gfp_t gfp_flags)$/;"	f
mb_cache_entry_find_first	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_find_first);$/;"	v
mb_cache_entry_find_first	fs/mbcache.c	/^mb_cache_entry_find_first(struct mb_cache *cache, struct block_device *bdev,$/;"	f
mb_cache_entry_find_next	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_find_next);$/;"	v
mb_cache_entry_find_next	fs/mbcache.c	/^mb_cache_entry_find_next(struct mb_cache_entry *prev,$/;"	f
mb_cache_entry_free	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_free);$/;"	v
mb_cache_entry_free	fs/mbcache.c	/^mb_cache_entry_free(struct mb_cache_entry *ce)$/;"	f
mb_cache_entry_get	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_get);$/;"	v
mb_cache_entry_get	fs/mbcache.c	/^mb_cache_entry_get(struct mb_cache *cache, struct block_device *bdev,$/;"	f
mb_cache_entry_insert	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_insert);$/;"	v
mb_cache_entry_insert	fs/mbcache.c	/^mb_cache_entry_insert(struct mb_cache_entry *ce, struct block_device *bdev,$/;"	f
mb_cache_entry_release	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_release);$/;"	v
mb_cache_entry_release	fs/mbcache.c	/^mb_cache_entry_release(struct mb_cache_entry *ce)$/;"	f
mb_cache_shrink	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_shrink);$/;"	v
mb_cache_shrink	fs/mbcache.c	/^mb_cache_shrink(struct block_device *bdev)$/;"	f
mb_cache_shrink_fn	fs/mbcache.c	/^mb_cache_shrink_fn(struct shrinker *shrink, struct shrink_control *sc)$/;"	f	file:
mb_cache_shrinker	fs/mbcache.c	/^static struct shrinker mb_cache_shrinker = {$/;"	v	typeref:struct:shrinker	file:
mb_debug	fs/mbcache.c	42;"	d	file:
mb_debug	fs/mbcache.c	50;"	d	file:
mb_error	fs/mbcache.c	53;"	d	file:
mbind_range	mm/mempolicy.c	/^static int mbind_range(struct mm_struct *mm, unsigned long start,$/;"	f	file:
mc	mm/memcontrol.c	/^} mc = {$/;"	v	typeref:struct:move_charge_struct	file:
mc_handle_file_pte	mm/memcontrol.c	/^static struct page *mc_handle_file_pte(struct vm_area_struct *vma,$/;"	f	file:
mc_handle_present_pte	mm/memcontrol.c	/^static struct page *mc_handle_present_pte(struct vm_area_struct *vma,$/;"	f	file:
mc_handle_swap_pte	mm/memcontrol.c	/^static struct page *mc_handle_swap_pte(struct vm_area_struct *vma,$/;"	f	file:
mc_target	mm/memcontrol.c	/^union mc_target {$/;"	u	file:
mc_target_type	mm/memcontrol.c	/^enum mc_target_type {$/;"	g	file:
me_huge_page	mm/memory-failure.c	/^static int me_huge_page(struct page *p, unsigned long pfn)$/;"	f	file:
me_kernel	mm/memory-failure.c	/^static int me_kernel(struct page *p, unsigned long pfn)$/;"	f	file:
me_pagecache_clean	mm/memory-failure.c	/^static int me_pagecache_clean(struct page *p, unsigned long pfn)$/;"	f	file:
me_pagecache_dirty	mm/memory-failure.c	/^static int me_pagecache_dirty(struct page *p, unsigned long pfn)$/;"	f	file:
me_swapcache_clean	mm/memory-failure.c	/^static int me_swapcache_clean(struct page *p, unsigned long pfn)$/;"	f	file:
me_swapcache_dirty	mm/memory-failure.c	/^static int me_swapcache_dirty(struct page *p, unsigned long pfn)$/;"	f	file:
me_unknown	mm/memory-failure.c	/^static int me_unknown(struct page *p, unsigned long pfn)$/;"	f	file:
mem_block	mm/scm.c	/^struct memory_block **mem_block;$/;"	v	typeref:struct:memory_block
mem_cgroup	mm/memcontrol.c	/^struct mem_cgroup {$/;"	s	file:
mem_cgroup_alloc	mm/memcontrol.c	/^static struct mem_cgroup *mem_cgroup_alloc(void)$/;"	f	file:
mem_cgroup_bad_page_check	mm/memcontrol.c	/^bool mem_cgroup_bad_page_check(struct page *page)$/;"	f
mem_cgroup_cache_charge	mm/memcontrol.c	/^int mem_cgroup_cache_charge(struct page *page, struct mm_struct *mm,$/;"	f
mem_cgroup_can_attach	mm/memcontrol.c	/^static int mem_cgroup_can_attach(struct cgroup *cgroup,$/;"	f	file:
mem_cgroup_cancel_attach	mm/memcontrol.c	/^static void mem_cgroup_cancel_attach(struct cgroup *cgroup,$/;"	f	file:
mem_cgroup_cancel_charge_swapin	mm/memcontrol.c	/^void mem_cgroup_cancel_charge_swapin(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_charge_common	mm/memcontrol.c	/^static int mem_cgroup_charge_common(struct page *page, struct mm_struct *mm,$/;"	f	file:
mem_cgroup_charge_statistics	mm/memcontrol.c	/^static void mem_cgroup_charge_statistics(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_clear_mc	mm/memcontrol.c	/^static void mem_cgroup_clear_mc(void)$/;"	f	file:
mem_cgroup_commit_charge_swapin	mm/memcontrol.c	/^void mem_cgroup_commit_charge_swapin(struct page *page,$/;"	f
mem_cgroup_count_children	mm/memcontrol.c	/^static int mem_cgroup_count_children(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_count_precharge	mm/memcontrol.c	/^static unsigned long mem_cgroup_count_precharge(struct mm_struct *mm)$/;"	f	file:
mem_cgroup_count_precharge_pte_range	mm/memcontrol.c	/^static int mem_cgroup_count_precharge_pte_range(pmd_t *pmd,$/;"	f	file:
mem_cgroup_css	mm/memcontrol.c	/^struct cgroup_subsys_state *mem_cgroup_css(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_css_alloc	mm/memcontrol.c	/^mem_cgroup_css_alloc(struct cgroup *cont)$/;"	f	file:
mem_cgroup_css_free	mm/memcontrol.c	/^static void mem_cgroup_css_free(struct cgroup *cont)$/;"	f	file:
mem_cgroup_css_offline	mm/memcontrol.c	/^static void mem_cgroup_css_offline(struct cgroup *cont)$/;"	f	file:
mem_cgroup_css_online	mm/memcontrol.c	/^mem_cgroup_css_online(struct cgroup *cont)$/;"	f	file:
mem_cgroup_destroy_all_caches	mm/memcontrol.c	/^static inline void mem_cgroup_destroy_all_caches(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_destroy_all_caches	mm/memcontrol.c	/^static void mem_cgroup_destroy_all_caches(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_destroy_cache	mm/memcontrol.c	/^void mem_cgroup_destroy_cache(struct kmem_cache *cachep)$/;"	f
mem_cgroup_do_charge	mm/memcontrol.c	/^static int mem_cgroup_do_charge(struct mem_cgroup *memcg, gfp_t gfp_mask,$/;"	f	file:
mem_cgroup_do_precharge	mm/memcontrol.c	/^static int mem_cgroup_do_precharge(unsigned long count)$/;"	f	file:
mem_cgroup_do_uncharge	mm/memcontrol.c	/^static void mem_cgroup_do_uncharge(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_drain_pcp_counter	mm/memcontrol.c	/^static void mem_cgroup_drain_pcp_counter(struct mem_cgroup *memcg, int cpu)$/;"	f	file:
mem_cgroup_end_migration	mm/memcontrol.c	/^void mem_cgroup_end_migration(struct mem_cgroup *memcg,$/;"	f
mem_cgroup_end_move	mm/memcontrol.c	/^static void mem_cgroup_end_move(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_event_ratelimit	mm/memcontrol.c	/^static bool mem_cgroup_event_ratelimit(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_eventfd_list	mm/memcontrol.c	/^struct mem_cgroup_eventfd_list {$/;"	s	file:
mem_cgroup_events_index	mm/memcontrol.c	/^enum mem_cgroup_events_index {$/;"	g	file:
mem_cgroup_events_names	mm/memcontrol.c	/^static const char * const mem_cgroup_events_names[] = {$/;"	v	file:
mem_cgroup_events_target	mm/memcontrol.c	/^enum mem_cgroup_events_target {$/;"	g	file:
mem_cgroup_files	mm/memcontrol.c	/^static struct cftype mem_cgroup_files[] = {$/;"	v	typeref:struct:cftype	file:
mem_cgroup_force_empty	mm/memcontrol.c	/^static int mem_cgroup_force_empty(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_force_empty_list	mm/memcontrol.c	/^static void mem_cgroup_force_empty_list(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_force_empty_write	mm/memcontrol.c	/^static int mem_cgroup_force_empty_write(struct cgroup *cont, unsigned int event)$/;"	f	file:
mem_cgroup_from_cont	mm/memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_cont(struct cgroup *cont)$/;"	f
mem_cgroup_from_css	mm/memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *s)$/;"	f	file:
mem_cgroup_from_res_counter	mm/memcontrol.c	1399;"	d	file:
mem_cgroup_from_task	mm/memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p)$/;"	f
mem_cgroup_get	mm/memcontrol.c	/^static void mem_cgroup_get(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_get_limit	mm/memcontrol.c	/^static u64 mem_cgroup_get_limit(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_get_lru_size	mm/memcontrol.c	/^mem_cgroup_get_lru_size(struct lruvec *lruvec, enum lru_list lru)$/;"	f
mem_cgroup_handle_oom	mm/memcontrol.c	/^static bool mem_cgroup_handle_oom(struct mem_cgroup *memcg, gfp_t mask,$/;"	f	file:
mem_cgroup_hierarchy_read	mm/memcontrol.c	/^static u64 mem_cgroup_hierarchy_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
mem_cgroup_hierarchy_write	mm/memcontrol.c	/^static int mem_cgroup_hierarchy_write(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_cgroup_inactive_anon_is_low	mm/memcontrol.c	/^int mem_cgroup_inactive_anon_is_low(struct lruvec *lruvec)$/;"	f
mem_cgroup_init	mm/memcontrol.c	/^static int __init mem_cgroup_init(void)$/;"	f	file:
mem_cgroup_init	mm/memcontrol.c	/^subsys_initcall(mem_cgroup_init);$/;"	v
mem_cgroup_is_root	mm/memcontrol.c	/^static inline bool mem_cgroup_is_root(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_iter	mm/memcontrol.c	/^struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *root,$/;"	f
mem_cgroup_iter_break	mm/memcontrol.c	/^void mem_cgroup_iter_break(struct mem_cgroup *root,$/;"	f
mem_cgroup_largest_soft_limit_node	mm/memcontrol.c	/^mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_zone *mctz)$/;"	f	file:
mem_cgroup_lookup	mm/memcontrol.c	/^static struct mem_cgroup *mem_cgroup_lookup(unsigned short id)$/;"	f	file:
mem_cgroup_lru_info	mm/memcontrol.c	/^struct mem_cgroup_lru_info {$/;"	s	file:
mem_cgroup_lru_names	mm/memcontrol.c	/^static const char * const mem_cgroup_lru_names[] = {$/;"	v	file:
mem_cgroup_lru_names_not_uptodate	mm/memcontrol.c	/^static inline void mem_cgroup_lru_names_not_uptodate(void)$/;"	f	file:
mem_cgroup_margin	mm/memcontrol.c	/^static unsigned long mem_cgroup_margin(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_mark_under_oom	mm/memcontrol.c	/^static void mem_cgroup_mark_under_oom(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_may_update_nodemask	mm/memcontrol.c	/^static void mem_cgroup_may_update_nodemask(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_move_account	mm/memcontrol.c	/^static int mem_cgroup_move_account(struct page *page,$/;"	f	file:
mem_cgroup_move_charge	mm/memcontrol.c	/^static void mem_cgroup_move_charge(struct mm_struct *mm)$/;"	f	file:
mem_cgroup_move_charge_pte_range	mm/memcontrol.c	/^static int mem_cgroup_move_charge_pte_range(pmd_t *pmd,$/;"	f	file:
mem_cgroup_move_charge_read	mm/memcontrol.c	/^static u64 mem_cgroup_move_charge_read(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_move_charge_write	mm/memcontrol.c	/^static int mem_cgroup_move_charge_write(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_move_parent	mm/memcontrol.c	/^static int mem_cgroup_move_parent(struct page *page,$/;"	f	file:
mem_cgroup_move_swap_account	mm/memcontrol.c	/^static inline int mem_cgroup_move_swap_account(swp_entry_t entry,$/;"	f	file:
mem_cgroup_move_swap_account	mm/memcontrol.c	/^static int mem_cgroup_move_swap_account(swp_entry_t entry,$/;"	f	file:
mem_cgroup_move_task	mm/memcontrol.c	/^static void mem_cgroup_move_task(struct cgroup *cont,$/;"	f	file:
mem_cgroup_newpage_charge	mm/memcontrol.c	/^int mem_cgroup_newpage_charge(struct page *page,$/;"	f
mem_cgroup_node_nr_lru_pages	mm/memcontrol.c	/^mem_cgroup_node_nr_lru_pages(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_nr_lru_pages	mm/memcontrol.c	/^static unsigned long mem_cgroup_nr_lru_pages(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_oom_control_read	mm/memcontrol.c	/^static int mem_cgroup_oom_control_read(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_oom_control_write	mm/memcontrol.c	/^static int mem_cgroup_oom_control_write(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_oom_lock	mm/memcontrol.c	/^static bool mem_cgroup_oom_lock(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_notify	mm/memcontrol.c	/^static void mem_cgroup_oom_notify(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_notify_cb	mm/memcontrol.c	/^static int mem_cgroup_oom_notify_cb(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_register_event	mm/memcontrol.c	/^static int mem_cgroup_oom_register_event(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_oom_unlock	mm/memcontrol.c	/^static int mem_cgroup_oom_unlock(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_unregister_event	mm/memcontrol.c	/^static void mem_cgroup_oom_unregister_event(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_out_of_memory	mm/memcontrol.c	/^static void mem_cgroup_out_of_memory(struct mem_cgroup *memcg, gfp_t gfp_mask,$/;"	f	file:
mem_cgroup_page_lruvec	mm/memcontrol.c	/^struct lruvec *mem_cgroup_page_lruvec(struct page *page, struct zone *zone)$/;"	f
mem_cgroup_per_node	mm/memcontrol.c	/^struct mem_cgroup_per_node {$/;"	s	file:
mem_cgroup_per_zone	mm/memcontrol.c	/^struct mem_cgroup_per_zone {$/;"	s	file:
mem_cgroup_precharge_mc	mm/memcontrol.c	/^static int mem_cgroup_precharge_mc(struct mm_struct *mm)$/;"	f	file:
mem_cgroup_prepare_migration	mm/memcontrol.c	/^void mem_cgroup_prepare_migration(struct page *page, struct page *newpage,$/;"	f
mem_cgroup_print_bad_page	mm/memcontrol.c	/^void mem_cgroup_print_bad_page(struct page *page)$/;"	f
mem_cgroup_print_oom_info	mm/memcontrol.c	/^void mem_cgroup_print_oom_info(struct mem_cgroup *memcg, struct task_struct *p)$/;"	f
mem_cgroup_put	mm/memcontrol.c	/^static void mem_cgroup_put(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_read	mm/memcontrol.c	/^static ssize_t mem_cgroup_read(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_cgroup_read_events	mm/memcontrol.c	/^static unsigned long mem_cgroup_read_events(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_read_stat	mm/memcontrol.c	/^static long mem_cgroup_read_stat(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_reclaim	mm/memcontrol.c	/^static unsigned long mem_cgroup_reclaim(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_reclaim_iter	mm/memcontrol.c	/^struct mem_cgroup_reclaim_iter {$/;"	s	file:
mem_cgroup_reclaimable	mm/memcontrol.c	/^static bool mem_cgroup_reclaimable(struct mem_cgroup *memcg, bool noswap)$/;"	f	file:
mem_cgroup_recursive_stat	mm/memcontrol.c	/^static unsigned long mem_cgroup_recursive_stat(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_remove_exceeded	mm/memcontrol.c	/^mem_cgroup_remove_exceeded(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_remove_from_trees	mm/memcontrol.c	/^static void mem_cgroup_remove_from_trees(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_reparent_charges	mm/memcontrol.c	/^static void mem_cgroup_reparent_charges(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_replace_page_cache	mm/memcontrol.c	/^void mem_cgroup_replace_page_cache(struct page *oldpage,$/;"	f
mem_cgroup_reset	mm/memcontrol.c	/^static int mem_cgroup_reset(struct cgroup *cont, unsigned int event)$/;"	f	file:
mem_cgroup_resize_limit	mm/memcontrol.c	/^static int mem_cgroup_resize_limit(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_resize_memsw_limit	mm/memcontrol.c	/^static int mem_cgroup_resize_memsw_limit(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_same_or_subtree	mm/memcontrol.c	/^static bool mem_cgroup_same_or_subtree(const struct mem_cgroup *root_memcg,$/;"	f	file:
mem_cgroup_select_victim_node	mm/memcontrol.c	/^int mem_cgroup_select_victim_node(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_shrink_node_zone	mm/vmscan.c	/^unsigned long mem_cgroup_shrink_node_zone(struct mem_cgroup *memcg,$/;"	f
mem_cgroup_slabinfo_read	mm/memcontrol.c	/^static int mem_cgroup_slabinfo_read(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_cgroup_soft_limit_reclaim	mm/memcontrol.c	/^unsigned long mem_cgroup_soft_limit_reclaim(struct zone *zone, int order,$/;"	f
mem_cgroup_soft_limit_tree_init	mm/memcontrol.c	/^static void __init mem_cgroup_soft_limit_tree_init(void)$/;"	f	file:
mem_cgroup_soft_reclaim	mm/memcontrol.c	/^static int mem_cgroup_soft_reclaim(struct mem_cgroup *root_memcg,$/;"	f	file:
mem_cgroup_split_huge_fixup	mm/memcontrol.c	/^void mem_cgroup_split_huge_fixup(struct page *head)$/;"	f
mem_cgroup_start_move	mm/memcontrol.c	/^static void mem_cgroup_start_move(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_stat_cpu	mm/memcontrol.c	/^struct mem_cgroup_stat_cpu {$/;"	s	file:
mem_cgroup_stat_index	mm/memcontrol.c	/^enum mem_cgroup_stat_index {$/;"	g	file:
mem_cgroup_stat_names	mm/memcontrol.c	/^static const char * const mem_cgroup_stat_names[] = {$/;"	v	file:
mem_cgroup_stolen	mm/memcontrol.c	/^static bool mem_cgroup_stolen(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_subsys	mm/memcontrol.c	/^EXPORT_SYMBOL(mem_cgroup_subsys);$/;"	v
mem_cgroup_subsys	mm/memcontrol.c	/^struct cgroup_subsys mem_cgroup_subsys = {$/;"	v	typeref:struct:cgroup_subsys
mem_cgroup_swap_statistics	mm/memcontrol.c	/^static void mem_cgroup_swap_statistics(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_swappiness	mm/memcontrol.c	/^int mem_cgroup_swappiness(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_swappiness_read	mm/memcontrol.c	/^static u64 mem_cgroup_swappiness_read(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
mem_cgroup_swappiness_write	mm/memcontrol.c	/^static int mem_cgroup_swappiness_write(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
mem_cgroup_threshold	mm/memcontrol.c	/^static void mem_cgroup_threshold(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_threshold	mm/memcontrol.c	/^struct mem_cgroup_threshold {$/;"	s	file:
mem_cgroup_threshold_ary	mm/memcontrol.c	/^struct mem_cgroup_threshold_ary {$/;"	s	file:
mem_cgroup_thresholds	mm/memcontrol.c	/^struct mem_cgroup_thresholds {$/;"	s	file:
mem_cgroup_tree	mm/memcontrol.c	/^struct mem_cgroup_tree {$/;"	s	file:
mem_cgroup_tree_per_node	mm/memcontrol.c	/^struct mem_cgroup_tree_per_node {$/;"	s	file:
mem_cgroup_tree_per_zone	mm/memcontrol.c	/^struct mem_cgroup_tree_per_zone {$/;"	s	file:
mem_cgroup_try_charge_swapin	mm/memcontrol.c	/^int mem_cgroup_try_charge_swapin(struct mm_struct *mm, struct page *page,$/;"	f
mem_cgroup_uncharge_cache_page	mm/memcontrol.c	/^void mem_cgroup_uncharge_cache_page(struct page *page)$/;"	f
mem_cgroup_uncharge_end	mm/memcontrol.c	/^void mem_cgroup_uncharge_end(void)$/;"	f
mem_cgroup_uncharge_page	mm/memcontrol.c	/^void mem_cgroup_uncharge_page(struct page *page)$/;"	f
mem_cgroup_uncharge_start	mm/memcontrol.c	/^void mem_cgroup_uncharge_start(void)$/;"	f
mem_cgroup_uncharge_swap	mm/memcontrol.c	/^void mem_cgroup_uncharge_swap(swp_entry_t ent)$/;"	f
mem_cgroup_uncharge_swapcache	mm/memcontrol.c	/^mem_cgroup_uncharge_swapcache(struct page *page, swp_entry_t ent, bool swapout)$/;"	f
mem_cgroup_under_move	mm/memcontrol.c	/^static bool mem_cgroup_under_move(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_unmark_under_oom	mm/memcontrol.c	/^static void mem_cgroup_unmark_under_oom(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_update_lru_size	mm/memcontrol.c	/^void mem_cgroup_update_lru_size(struct lruvec *lruvec, enum lru_list lru,$/;"	f
mem_cgroup_update_page_stat	mm/memcontrol.c	/^void mem_cgroup_update_page_stat(struct page *page,$/;"	f
mem_cgroup_update_tree	mm/memcontrol.c	/^static void mem_cgroup_update_tree(struct mem_cgroup *memcg, struct page *page)$/;"	f	file:
mem_cgroup_usage	mm/memcontrol.c	/^static inline u64 mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)$/;"	f	file:
mem_cgroup_usage_register_event	mm/memcontrol.c	/^static int mem_cgroup_usage_register_event(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_usage_unregister_event	mm/memcontrol.c	/^static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,$/;"	f	file:
mem_cgroup_wait_acct_move	mm/memcontrol.c	/^static bool mem_cgroup_wait_acct_move(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_write	mm/memcontrol.c	/^static int mem_cgroup_write(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_cgroup_zone_lruvec	mm/memcontrol.c	/^struct lruvec *mem_cgroup_zone_lruvec(struct zone *zone,$/;"	f
mem_cgroup_zone_nr_lru_pages	mm/memcontrol.c	/^mem_cgroup_zone_nr_lru_pages(struct mem_cgroup *memcg, int nid, int zid,$/;"	f	file:
mem_cgroup_zoneinfo	mm/memcontrol.c	/^mem_cgroup_zoneinfo(struct mem_cgroup *memcg, int nid, int zid)$/;"	f	file:
mem_fmt	mm/hugetlb_cgroup.c	/^static char *mem_fmt(char *buf, int size, unsigned long hsize)$/;"	f	file:
mem_hotplug_mutex	mm/memory_hotplug.c	/^DEFINE_MUTEX(mem_hotplug_mutex);$/;"	v
mem_map	mm/memory.c	/^EXPORT_SYMBOL(mem_map);$/;"	v
mem_map	mm/memory.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_map	mm/nommu.c	/^EXPORT_SYMBOL(mem_map);$/;"	v
mem_map	mm/nommu.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_map_next	mm/internal.h	/^static inline struct page *mem_map_next(struct page *iter,$/;"	f
mem_map_offset	mm/internal.h	/^static inline struct page *mem_map_offset(struct page *base, int offset)$/;"	f
mem_online_node	mm/memory_hotplug.c	/^int mem_online_node(int nid)$/;"	f
mem_section	mm/sparse.c	/^EXPORT_SYMBOL(mem_section);$/;"	v
mem_unit	kernel/compat.c	/^	u32 mem_unit;$/;"	m	struct:compat_sysinfo	file:
memblock_add	mm/memblock.c	/^int __init_memblock memblock_add(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_add_node	mm/memblock.c	/^int __init_memblock memblock_add_node(phys_addr_t base, phys_addr_t size,$/;"	f
memblock_add_region	mm/memblock.c	/^static int __init_memblock memblock_add_region(struct memblock_type *type,$/;"	f	file:
memblock_addrs_overlap	mm/memblock.c	/^static unsigned long __init_memblock memblock_addrs_overlap(phys_addr_t base1, phys_addr_t size1,$/;"	f	file:
memblock_alloc	mm/memblock.c	/^phys_addr_t __init memblock_alloc(phys_addr_t size, phys_addr_t align)$/;"	f
memblock_alloc_base	mm/memblock.c	/^phys_addr_t __init memblock_alloc_base(phys_addr_t size, phys_addr_t align, phys_addr_t max_addr)$/;"	f
memblock_alloc_base_nid	mm/memblock.c	/^static phys_addr_t __init memblock_alloc_base_nid(phys_addr_t size,$/;"	f	file:
memblock_alloc_nid	mm/memblock.c	/^phys_addr_t __init memblock_alloc_nid(phys_addr_t size, phys_addr_t align, int nid)$/;"	f
memblock_alloc_try_nid	mm/memblock.c	/^phys_addr_t __init memblock_alloc_try_nid(phys_addr_t size, phys_addr_t align, int nid)$/;"	f
memblock_allow_resize	mm/memblock.c	/^void __init memblock_allow_resize(void)$/;"	f
memblock_cap_size	mm/memblock.c	/^static inline phys_addr_t memblock_cap_size(phys_addr_t base, phys_addr_t *size)$/;"	f	file:
memblock_debug_fops	mm/memblock.c	/^static const struct file_operations memblock_debug_fops = {$/;"	v	typeref:struct:file_operations	file:
memblock_debug_open	mm/memblock.c	/^static int memblock_debug_open(struct inode *inode, struct file *file)$/;"	f	file:
memblock_debug_show	mm/memblock.c	/^static int memblock_debug_show(struct seq_file *m, void *private)$/;"	f	file:
memblock_double_array	mm/memblock.c	/^static int __init_memblock memblock_double_array(struct memblock_type *type,$/;"	f	file:
memblock_dump	mm/memblock.c	/^static void __init_memblock memblock_dump(struct memblock_type *type, char *name)$/;"	f	file:
memblock_end_of_DRAM	mm/memblock.c	/^phys_addr_t __init_memblock memblock_end_of_DRAM(void)$/;"	f
memblock_enforce_memory_limit	mm/memblock.c	/^void __init memblock_enforce_memory_limit(phys_addr_t limit)$/;"	f
memblock_find_in_range	mm/memblock.c	/^phys_addr_t __init_memblock memblock_find_in_range(phys_addr_t start,$/;"	f
memblock_find_in_range_node	mm/memblock.c	/^phys_addr_t __init_memblock memblock_find_in_range_node(phys_addr_t start,$/;"	f
memblock_free	mm/memblock.c	/^int __init_memblock memblock_free(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_init_debugfs	mm/memblock.c	/^__initcall(memblock_init_debugfs);$/;"	v
memblock_init_debugfs	mm/memblock.c	/^static int __init memblock_init_debugfs(void)$/;"	f	file:
memblock_insert_region	mm/memblock.c	/^static void __init_memblock memblock_insert_region(struct memblock_type *type,$/;"	f	file:
memblock_is_memory	mm/memblock.c	/^int __init_memblock memblock_is_memory(phys_addr_t addr)$/;"	f
memblock_is_region_memory	mm/memblock.c	/^int __init_memblock memblock_is_region_memory(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_is_region_reserved	mm/memblock.c	/^int __init_memblock memblock_is_region_reserved(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_is_reserved	mm/memblock.c	/^int __init memblock_is_reserved(phys_addr_t addr)$/;"	f
memblock_isolate_range	mm/memblock.c	/^static int __init_memblock memblock_isolate_range(struct memblock_type *type,$/;"	f	file:
memblock_mem_size	mm/memblock.c	/^phys_addr_t __init memblock_mem_size(unsigned long limit_pfn)$/;"	f
memblock_merge_regions	mm/memblock.c	/^static void __init_memblock memblock_merge_regions(struct memblock_type *type)$/;"	f	file:
memblock_overlaps_region	mm/memblock.c	/^static long __init_memblock memblock_overlaps_region(struct memblock_type *type,$/;"	f	file:
memblock_phys_mem_size	mm/memblock.c	/^phys_addr_t __init memblock_phys_mem_size(void)$/;"	f
memblock_remove	mm/memblock.c	/^int __init_memblock memblock_remove(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_remove_region	mm/memblock.c	/^static void __init_memblock memblock_remove_region(struct memblock_type *type, unsigned long r)$/;"	f	file:
memblock_reserve	mm/memblock.c	/^int __init_memblock memblock_reserve(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_search	mm/memblock.c	/^static int __init_memblock memblock_search(struct memblock_type *type, phys_addr_t addr)$/;"	f	file:
memblock_set_current_limit	mm/memblock.c	/^void __init_memblock memblock_set_current_limit(phys_addr_t limit)$/;"	f
memblock_set_node	mm/memblock.c	/^int __init_memblock memblock_set_node(phys_addr_t base, phys_addr_t size,$/;"	f
memblock_start_of_DRAM	mm/memblock.c	/^phys_addr_t __init_memblock memblock_start_of_DRAM(void)$/;"	f
memblock_trim_memory	mm/memblock.c	/^void __init_memblock memblock_trim_memory(phys_addr_t align)$/;"	f
memblock_type_name	mm/memblock.c	/^memblock_type_name(struct memblock_type *type)$/;"	f	file:
memblocksz	mm/scm.c	/^unsigned long memblocksz = 0;$/;"	v
memblocksz_mb	mm/scm.c	/^unsigned long memblocksz_mb = 0;$/;"	v
memcg	mm/memcontrol.c	/^	struct mem_cgroup	*memcg;		\/* Back pointer, we cannot *\/$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::mem_cgroup	file:
memcg	mm/memcontrol.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:create_work	typeref:struct:create_work::mem_cgroup	file:
memcg	mm/memcontrol.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:oom_wait_info	typeref:struct:oom_wait_info::mem_cgroup	file:
memcg_accumulate_slabinfo	mm/slab_common.c	/^memcg_accumulate_slabinfo(struct kmem_cache *s, struct slabinfo *info)$/;"	f	file:
memcg_bind_pages	mm/slab.h	/^static inline void memcg_bind_pages(struct kmem_cache *s, int order)$/;"	f
memcg_cache_id	mm/memcontrol.c	/^int memcg_cache_id(struct mem_cgroup *memcg)$/;"	f
memcg_cache_list_add	mm/memcontrol.c	/^void memcg_cache_list_add(struct mem_cgroup *memcg, struct kmem_cache *cachep)$/;"	f
memcg_cache_name	mm/memcontrol.c	/^static char *memcg_cache_name(struct mem_cgroup *memcg, struct kmem_cache *s)$/;"	f	file:
memcg_caches_array_size	mm/memcontrol.c	/^static size_t memcg_caches_array_size(int num_groups)$/;"	f	file:
memcg_can_account_kmem	mm/memcontrol.c	/^static inline bool memcg_can_account_kmem(struct mem_cgroup *memcg)$/;"	f	file:
memcg_charge_kmem	mm/memcontrol.c	/^static int memcg_charge_kmem(struct mem_cgroup *memcg, gfp_t gfp, u64 size)$/;"	f	file:
memcg_check_events	mm/memcontrol.c	/^static void memcg_check_events(struct mem_cgroup *memcg, struct page *page)$/;"	f	file:
memcg_cpu_hotplug_callback	mm/memcontrol.c	/^static int __cpuinit memcg_cpu_hotplug_callback(struct notifier_block *nb,$/;"	f	file:
memcg_create_cache_enqueue	mm/memcontrol.c	/^static void memcg_create_cache_enqueue(struct mem_cgroup *memcg,$/;"	f	file:
memcg_create_cache_work_func	mm/memcontrol.c	/^static void memcg_create_cache_work_func(struct work_struct *w)$/;"	f	file:
memcg_create_kmem_cache	mm/memcontrol.c	/^static struct kmem_cache *memcg_create_kmem_cache(struct mem_cgroup *memcg,$/;"	f	file:
memcg_get_hierarchical_limit	mm/memcontrol.c	/^static void memcg_get_hierarchical_limit(struct mem_cgroup *memcg,$/;"	f	file:
memcg_has_children	mm/memcontrol.c	/^static inline bool memcg_has_children(struct mem_cgroup *memcg)$/;"	f	file:
memcg_init_kmem	mm/memcontrol.c	/^static int memcg_init_kmem(struct mem_cgroup *memcg, struct cgroup_subsys *ss)$/;"	f	file:
memcg_kmem_clear_activated	mm/memcontrol.c	/^static void memcg_kmem_clear_activated(struct mem_cgroup *memcg)$/;"	f	file:
memcg_kmem_enabled_key	mm/memcontrol.c	/^EXPORT_SYMBOL(memcg_kmem_enabled_key);$/;"	v
memcg_kmem_enabled_key	mm/memcontrol.c	/^struct static_key memcg_kmem_enabled_key;$/;"	v	typeref:struct:static_key
memcg_kmem_is_active	mm/memcontrol.c	/^static bool memcg_kmem_is_active(struct mem_cgroup *memcg)$/;"	f	file:
memcg_kmem_mark_dead	mm/memcontrol.c	/^static void memcg_kmem_mark_dead(struct mem_cgroup *memcg)$/;"	f	file:
memcg_kmem_set_activated	mm/memcontrol.c	/^static void memcg_kmem_set_activated(struct mem_cgroup *memcg)$/;"	f	file:
memcg_kmem_set_active	mm/memcontrol.c	/^static inline void memcg_kmem_set_active(struct mem_cgroup *memcg)$/;"	f	file:
memcg_kmem_test_and_clear_dead	mm/memcontrol.c	/^static bool memcg_kmem_test_and_clear_dead(struct mem_cgroup *memcg)$/;"	f	file:
memcg_limited_groups_array_size	mm/memcontrol.c	/^int memcg_limited_groups_array_size;$/;"	v
memcg_numa_stat_show	mm/memcontrol.c	/^static int memcg_numa_stat_show(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
memcg_oom_recover	mm/memcontrol.c	/^static void memcg_oom_recover(struct mem_cgroup *memcg)$/;"	f	file:
memcg_oom_wake_function	mm/memcontrol.c	/^static int memcg_oom_wake_function(wait_queue_t *wait,$/;"	f	file:
memcg_params_to_cache	mm/memcontrol.c	/^static struct kmem_cache *memcg_params_to_cache(struct memcg_cache_params *p)$/;"	f	file:
memcg_propagate_kmem	mm/memcontrol.c	/^static int memcg_propagate_kmem(struct mem_cgroup *memcg)$/;"	f	file:
memcg_propagate_slab_attrs	mm/slub.c	/^static inline void memcg_propagate_slab_attrs(struct kmem_cache *s) { }$/;"	f	file:
memcg_propagate_slab_attrs	mm/slub.c	/^static void memcg_propagate_slab_attrs(struct kmem_cache *s)$/;"	f	file:
memcg_register_cache	mm/memcontrol.c	/^int memcg_register_cache(struct mem_cgroup *memcg, struct kmem_cache *s,$/;"	f
memcg_release_cache	mm/memcontrol.c	/^void memcg_release_cache(struct kmem_cache *s)$/;"	f
memcg_release_pages	mm/slab.h	/^static inline void memcg_release_pages(struct kmem_cache *s, int order)$/;"	f
memcg_resume_kmem_account	mm/memcontrol.c	/^static inline void memcg_resume_kmem_account(void)$/;"	f	file:
memcg_root_cache	mm/slab.h	/^static inline struct kmem_cache *memcg_root_cache(struct kmem_cache *s)$/;"	f
memcg_size	mm/memcontrol.c	/^static size_t memcg_size(void)$/;"	f	file:
memcg_slab_caches	mm/memcontrol.c	/^	struct list_head memcg_slab_caches;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::list_head	file:
memcg_stat_show	mm/memcontrol.c	/^static int memcg_stat_show(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
memcg_stock_init	mm/memcontrol.c	/^static void __init memcg_stock_init(void)$/;"	f	file:
memcg_stock_pcp	mm/memcontrol.c	/^struct memcg_stock_pcp {$/;"	s	file:
memcg_stop_kmem_account	mm/memcontrol.c	/^static inline void memcg_stop_kmem_account(void)$/;"	f	file:
memcg_uncharge_kmem	mm/memcontrol.c	/^static void memcg_uncharge_kmem(struct mem_cgroup *memcg, u64 size)$/;"	f	file:
memcg_update_all_caches	mm/slab_common.c	/^int memcg_update_all_caches(int num_memcgs)$/;"	f
memcg_update_array_size	mm/memcontrol.c	/^void memcg_update_array_size(int num)$/;"	f
memcg_update_cache_size	mm/memcontrol.c	/^int memcg_update_cache_size(struct kmem_cache *s, int num_groups)$/;"	f
memcg_update_cache_sizes	mm/memcontrol.c	/^int memcg_update_cache_sizes(struct mem_cgroup *memcg)$/;"	f
memcg_update_kmem_limit	mm/memcontrol.c	/^static int memcg_update_kmem_limit(struct cgroup *cont, u64 val)$/;"	f	file:
memcg_wakeup_oom	mm/memcontrol.c	/^static void memcg_wakeup_oom(struct mem_cgroup *memcg)$/;"	f	file:
memchr	lib/string.c	/^EXPORT_SYMBOL(memchr);$/;"	v
memchr	lib/string.c	/^void *memchr(const void *s, int c, size_t n)$/;"	f
memchr_inv	lib/string.c	/^EXPORT_SYMBOL(memchr_inv);$/;"	v
memchr_inv	lib/string.c	/^void *memchr_inv(const void *start, int c, size_t bytes)$/;"	f
memcmp	lib/string.c	/^EXPORT_SYMBOL(memcmp);$/;"	v
memcmp	lib/string.c	/^int memcmp(const void *cs, const void *ct, size_t count)$/;"	f
memcmp	lib/string.c	650;"	d	file:
memcmp_pages	mm/ksm.c	/^static int memcmp_pages(struct page *page1, struct page *page2)$/;"	f	file:
memcpy	lib/string.c	/^EXPORT_SYMBOL(memcpy);$/;"	v
memcpy	lib/string.c	/^void *memcpy(void *dest, const void *src, size_t count)$/;"	f
memdup_user	mm/util.c	/^EXPORT_SYMBOL(memdup_user);$/;"	v
memdup_user	mm/util.c	/^void *memdup_user(const void __user *src, size_t len)$/;"	f
memelfnote	fs/binfmt_elf.c	/^struct memelfnote$/;"	s	file:
memelfnote	fs/binfmt_elf_fdpic.c	/^struct memelfnote$/;"	s	file:
memfmt	mm/hugetlb.c	/^static char * __init memfmt(char *buf, unsigned long n)$/;"	f	file:
memmap_init	mm/page_alloc.c	3976;"	d	file:
memmap_init_zone	mm/page_alloc.c	/^void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,$/;"	f
memmap_valid_within	mm/mmzone.c	/^int memmap_valid_within(unsigned long pfn,$/;"	f
memmove	lib/string.c	/^EXPORT_SYMBOL(memmove);$/;"	v
memmove	lib/string.c	/^void *memmove(void *dest, const void *src, size_t count)$/;"	f
memory_failure	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(memory_failure);$/;"	v
memory_failure	mm/memory-failure.c	/^int memory_failure(unsigned long pfn, int trapno, int flags)$/;"	f
memory_failure_cpu	mm/memory-failure.c	/^struct memory_failure_cpu {$/;"	s	file:
memory_failure_entry	mm/memory-failure.c	/^struct memory_failure_entry {$/;"	s	file:
memory_failure_init	mm/memory-failure.c	/^core_initcall(memory_failure_init);$/;"	v
memory_failure_init	mm/memory-failure.c	/^static int __init memory_failure_init(void)$/;"	f	file:
memory_failure_queue	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(memory_failure_queue);$/;"	v
memory_failure_queue	mm/memory-failure.c	/^void memory_failure_queue(unsigned long pfn, int trapno, int flags)$/;"	f
memory_failure_work_func	mm/memory-failure.c	/^static void memory_failure_work_func(struct work_struct *work)$/;"	f	file:
memory_present	mm/sparse.c	/^void __init memory_present(int nid, unsigned long start, unsigned long end)$/;"	f
memory_read_from_buffer	fs/libfs.c	/^EXPORT_SYMBOL(memory_read_from_buffer);$/;"	v
memory_read_from_buffer	fs/libfs.c	/^ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,$/;"	f
mempolicy_nodemask_intersects	mm/mempolicy.c	/^bool mempolicy_nodemask_intersects(struct task_struct *tsk,$/;"	f
mempolicy_operations	mm/mempolicy.c	/^static const struct mempolicy_operations {$/;"	s	file:
mempool_alloc	mm/mempool.c	/^EXPORT_SYMBOL(mempool_alloc);$/;"	v
mempool_alloc	mm/mempool.c	/^void * mempool_alloc(mempool_t *pool, gfp_t gfp_mask)$/;"	f
mempool_alloc_pages	mm/mempool.c	/^EXPORT_SYMBOL(mempool_alloc_pages);$/;"	v
mempool_alloc_pages	mm/mempool.c	/^void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_alloc_pages_isa	mm/bounce.c	/^static void *mempool_alloc_pages_isa(gfp_t gfp_mask, void *data)$/;"	f	file:
mempool_alloc_slab	mm/mempool.c	/^EXPORT_SYMBOL(mempool_alloc_slab);$/;"	v
mempool_alloc_slab	mm/mempool.c	/^void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_create	mm/mempool.c	/^EXPORT_SYMBOL(mempool_create);$/;"	v
mempool_create	mm/mempool.c	/^mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_create_node	mm/mempool.c	/^EXPORT_SYMBOL(mempool_create_node);$/;"	v
mempool_create_node	mm/mempool.c	/^mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_destroy	mm/mempool.c	/^EXPORT_SYMBOL(mempool_destroy);$/;"	v
mempool_destroy	mm/mempool.c	/^void mempool_destroy(mempool_t *pool)$/;"	f
mempool_free	mm/mempool.c	/^EXPORT_SYMBOL(mempool_free);$/;"	v
mempool_free	mm/mempool.c	/^void mempool_free(void *element, mempool_t *pool)$/;"	f
mempool_free_pages	mm/mempool.c	/^EXPORT_SYMBOL(mempool_free_pages);$/;"	v
mempool_free_pages	mm/mempool.c	/^void mempool_free_pages(void *element, void *pool_data)$/;"	f
mempool_free_slab	mm/mempool.c	/^EXPORT_SYMBOL(mempool_free_slab);$/;"	v
mempool_free_slab	mm/mempool.c	/^void mempool_free_slab(void *element, void *pool_data)$/;"	f
mempool_kfree	mm/mempool.c	/^EXPORT_SYMBOL(mempool_kfree);$/;"	v
mempool_kfree	mm/mempool.c	/^void mempool_kfree(void *element, void *pool_data)$/;"	f
mempool_kmalloc	mm/mempool.c	/^EXPORT_SYMBOL(mempool_kmalloc);$/;"	v
mempool_kmalloc	mm/mempool.c	/^void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_resize	mm/mempool.c	/^EXPORT_SYMBOL(mempool_resize);$/;"	v
mempool_resize	mm/mempool.c	/^int mempool_resize(mempool_t *pool, int new_min_nr, gfp_t gfp_mask)$/;"	f
mems_allowed	kernel/cpuset.c	/^	nodemask_t mems_allowed;	\/* Memory Nodes allowed to tasks *\/$/;"	m	struct:cpuset	file:
memscan	lib/string.c	/^EXPORT_SYMBOL(memscan);$/;"	v
memscan	lib/string.c	/^void *memscan(void *addr, int c, size_t size)$/;"	f
memset	lib/string.c	/^EXPORT_SYMBOL(memset);$/;"	v
memset	lib/string.c	/^void *memset(void *s, int c, size_t count)$/;"	f
memsw	mm/memcontrol.c	/^		struct res_counter memsw;$/;"	m	union:mem_cgroup::__anon9	typeref:struct:mem_cgroup::__anon9::res_counter	file:
memsw_cgroup_files	mm/memcontrol.c	/^static struct cftype memsw_cgroup_files[] = {$/;"	v	typeref:struct:cftype	file:
memsw_file_init	mm/memcontrol.c	/^static void __init memsw_file_init(void)$/;"	f	file:
memsw_is_minimum	mm/memcontrol.c	/^	bool		memsw_is_minimum;$/;"	m	struct:mem_cgroup	file:
memsw_thresholds	mm/memcontrol.c	/^	struct mem_cgroup_thresholds memsw_thresholds;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mem_cgroup_thresholds	file:
merge_across_nodes	mm/ksm.c	/^KSM_ATTR(merge_across_nodes);$/;"	v
merge_across_nodes_show	mm/ksm.c	/^static ssize_t merge_across_nodes_show(struct kobject *kobj,$/;"	f	file:
merge_across_nodes_store	mm/ksm.c	/^static ssize_t merge_across_nodes_store(struct kobject *kobj,$/;"	f	file:
might_cancel	fs/timerfd.c	/^	bool might_cancel;$/;"	m	struct:timerfd_ctx	file:
might_fault	mm/memory.c	/^EXPORT_SYMBOL(might_fault);$/;"	v
might_fault	mm/memory.c	/^void might_fault(void)$/;"	f
migrate_async_suitable	mm/compaction.c	/^static inline bool migrate_async_suitable(int migratetype)$/;"	f	file:
migrate_balanced_pgdat	mm/migrate.c	/^static bool migrate_balanced_pgdat(struct pglist_data *pgdat,$/;"	f	file:
migrate_hrtimer_list	kernel/hrtimer.c	/^static void migrate_hrtimer_list(struct hrtimer_clock_base *old_base,$/;"	f	file:
migrate_hrtimers	kernel/hrtimer.c	/^static void migrate_hrtimers(int scpu)$/;"	f	file:
migrate_huge_page	mm/migrate.c	/^int migrate_huge_page(struct page *hpage, new_page_t get_new_page,$/;"	f
migrate_huge_page_move_mapping	mm/migrate.c	/^int migrate_huge_page_move_mapping(struct address_space *mapping,$/;"	f
migrate_misplaced_page	mm/migrate.c	/^int migrate_misplaced_page(struct page *page, int node)$/;"	f
migrate_misplaced_transhuge_page	mm/migrate.c	/^int migrate_misplaced_transhuge_page(struct mm_struct *mm,$/;"	f
migrate_page	mm/migrate.c	/^EXPORT_SYMBOL(migrate_page);$/;"	v
migrate_page	mm/migrate.c	/^int migrate_page(struct address_space *mapping,$/;"	f
migrate_page_add	mm/mempolicy.c	/^static void migrate_page_add(struct page *page, struct list_head *pagelist,$/;"	f	file:
migrate_page_copy	mm/migrate.c	/^void migrate_page_copy(struct page *newpage, struct page *page)$/;"	f
migrate_page_move_mapping	mm/migrate.c	/^static int migrate_page_move_mapping(struct address_space *mapping,$/;"	f	file:
migrate_pages	mm/migrate.c	/^int migrate_pages(struct list_head *from, new_page_t get_new_page,$/;"	f
migrate_pfn	mm/internal.h	/^	unsigned long migrate_pfn;	\/* isolate_migratepages search base *\/$/;"	m	struct:compact_control
migrate_prep	mm/migrate.c	/^int migrate_prep(void)$/;"	f
migrate_prep_local	mm/migrate.c	/^int migrate_prep_local(void)$/;"	f
migrate_ratelimited	mm/migrate.c	/^bool migrate_ratelimited(int node)$/;"	f
migrate_timer_list	kernel/timer.c	/^static void migrate_timer_list(struct tvec_base *new_base, struct list_head *head)$/;"	f	file:
migrate_timers	kernel/timer.c	/^static void __cpuinit migrate_timers(int cpu)$/;"	f	file:
migrate_to_node	mm/mempolicy.c	/^static int migrate_to_node(struct mm_struct *mm, int source, int dest,$/;"	f	file:
migrate_vmas	mm/migrate.c	/^int migrate_vmas(struct mm_struct *mm, const nodemask_t *to,$/;"	f
migratepages	mm/internal.h	/^	struct list_head migratepages;	\/* List of pages being migrated *\/$/;"	m	struct:compact_control	typeref:struct:compact_control::list_head
migratetype	mm/internal.h	/^	int migratetype;		\/* MOVABLE, RECLAIMABLE etc *\/$/;"	m	struct:compact_control
migratetype_names	mm/vmstat.c	/^static char * const migratetype_names[MIGRATE_TYPES] = {$/;"	v	file:
migration_entry_wait	mm/migrate.c	/^void migration_entry_wait(struct mm_struct *mm, pmd_t *pmd,$/;"	f
min	kernel/resource.c	/^	resource_size_t min, max, align;$/;"	m	struct:resource_constraint	file:
min	kernel/sysctl.c	/^	int *min;$/;"	m	struct:do_proc_dointvec_minmax_conv_param	file:
min_addr	mm/kmemleak.c	/^static unsigned long min_addr = ULONG_MAX;$/;"	v	file:
min_count	mm/kmemleak.c	/^	int min_count;			\/* minimum reference count *\/$/;"	m	struct:early_log	file:
min_count	mm/kmemleak.c	/^	int min_count;$/;"	m	struct:kmemleak_object	file:
min_extfrag_threshold	kernel/sysctl.c	/^static int min_extfrag_threshold;$/;"	v	file:
min_free_kbytes	mm/page_alloc.c	/^int min_free_kbytes = 1024;$/;"	v
min_low_pfn	mm/bootmem.c	/^unsigned long min_low_pfn;$/;"	v
min_low_pfn	mm/nobootmem.c	/^unsigned long min_low_pfn;$/;"	v
min_offline	kernel/rcutorture.c	/^static int min_offline = -1;$/;"	v	file:
min_online	kernel/rcutorture.c	/^static int min_online = -1;$/;"	v	file:
min_order	mm/page_alloc.c	/^	u32 min_order;$/;"	m	struct:__anon12	file:
min_pages_to_free	mm/quicklist.c	/^static long min_pages_to_free(struct quicklist *q,$/;"	f	file:
min_partial	mm/slub.c	/^SLAB_ATTR(min_partial);$/;"	v
min_partial_show	mm/slub.c	/^static ssize_t min_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
min_partial_store	mm/slub.c	/^static ssize_t min_partial_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
min_percpu_pagelist_fract	kernel/sysctl.c	/^static int min_percpu_pagelist_fract = 8;$/;"	v	file:
min_pid	mm/slub.c	/^	long min_pid;$/;"	m	struct:location	file:
min_ratio_store	mm/backing-dev.c	/^static ssize_t min_ratio_store(struct device *dev,$/;"	f	file:
min_sched_granularity_ns	kernel/sysctl.c	/^static int min_sched_granularity_ns = 100000;		\/* 100 usecs *\/$/;"	v	file:
min_sched_tunable_scaling	kernel/sysctl.c	/^static int min_sched_tunable_scaling = SCHED_TUNABLESCALING_NONE;$/;"	v	file:
min_time	mm/slub.c	/^	long min_time;$/;"	m	struct:location	file:
min_wakeup_granularity_ns	kernel/sysctl.c	/^static int min_wakeup_granularity_ns;			\/* 0 usecs *\/$/;"	v	file:
mincore_huge_pmd	mm/huge_memory.c	/^int mincore_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f
mincore_hugetlb_page_range	mm/mincore.c	/^static void mincore_hugetlb_page_range(struct vm_area_struct *vma,$/;"	f	file:
mincore_page	mm/mincore.c	/^static unsigned char mincore_page(struct address_space *mapping, pgoff_t pgoff)$/;"	f	file:
mincore_page_range	mm/mincore.c	/^static void mincore_page_range(struct vm_area_struct *vma,$/;"	f	file:
mincore_pmd_range	mm/mincore.c	/^static void mincore_pmd_range(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
mincore_pte_range	mm/mincore.c	/^static void mincore_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
mincore_pud_range	mm/mincore.c	/^static void mincore_pud_range(struct vm_area_struct *vma, pgd_t *pgd,$/;"	f	file:
mincore_unmapped_range	mm/mincore.c	/^static void mincore_unmapped_range(struct vm_area_struct *vma,$/;"	f	file:
minolduid	kernel/sysctl.c	/^static int minolduid;$/;"	v	file:
minor_hash	fs/ext3/dir.c	/^	__u32		minor_hash;$/;"	m	struct:fname	file:
minor_hash	fs/ext3/ext3.h	/^	u32		minor_hash;$/;"	m	struct:dx_hash_info
minorct	fs/char_dev.c	/^	int minorct;$/;"	m	struct:char_device_struct	file:
misc_format	fs/binfmt_misc.c	/^static struct linux_binfmt misc_format = {$/;"	v	typeref:struct:linux_binfmt	file:
mk_huge_pmd	mm/huge_memory.c	/^static inline pmd_t mk_huge_pmd(struct page *page, struct vm_area_struct *vma)$/;"	f	file:
mk_pid	kernel/pid.c	/^static inline int mk_pid(struct pid_namespace *pid_ns,$/;"	f	file:
mk_reply	kernel/taskstats.c	/^static struct taskstats *mk_reply(struct sk_buff *skb, int type, u32 pid)$/;"	f	file:
mktime	kernel/time.c	/^EXPORT_SYMBOL(mktime);$/;"	v
mktime	kernel/time.c	/^mktime(const unsigned int year0, const unsigned int mon0,$/;"	f
mlock	mm/memory-failure.c	748;"	d	file:
mlock	mm/memory-failure.c	805;"	d	file:
mlock_fixup	mm/mlock.c	/^static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,$/;"	f	file:
mlock_migrate_page	mm/internal.h	/^static inline void mlock_migrate_page(struct page *new, struct page *old) { }$/;"	f
mlock_migrate_page	mm/internal.h	/^static inline void mlock_migrate_page(struct page *newpage, struct page *page)$/;"	f
mlock_vma_page	mm/internal.h	/^static inline void mlock_vma_page(struct page *page) { }$/;"	f
mlock_vma_page	mm/mlock.c	/^void mlock_vma_page(struct page *page)$/;"	f
mlocked_vma_newpage	mm/internal.h	/^static inline int mlocked_vma_newpage(struct vm_area_struct *v, struct page *p)$/;"	f
mlocked_vma_newpage	mm/internal.h	/^static inline int mlocked_vma_newpage(struct vm_area_struct *vma,$/;"	f
mm	kernel/auditsc.c	/^	struct mm_struct *mm;$/;"	m	struct:audit_aux_data_execve	typeref:struct:audit_aux_data_execve::mm_struct	file:
mm	mm/huge_memory.c	/^	struct mm_struct *mm;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::mm_struct	file:
mm	mm/ksm.c	/^	struct mm_struct *mm;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::mm_struct	file:
mm	mm/ksm.c	/^	struct mm_struct *mm;$/;"	m	struct:rmap_item	typeref:struct:rmap_item::mm_struct	file:
mm_access	kernel/fork.c	/^struct mm_struct *mm_access(struct task_struct *task, unsigned int mode)$/;"	f
mm_alloc	kernel/fork.c	/^struct mm_struct *mm_alloc(void)$/;"	f
mm_alloc_pgd	kernel/fork.c	/^static inline int mm_alloc_pgd(struct mm_struct *mm)$/;"	f	file:
mm_alloc_pgd	kernel/fork.c	500;"	d	file:
mm_cachep	kernel/fork.c	/^static struct kmem_cache *mm_cachep;$/;"	v	typeref:struct:kmem_cache	file:
mm_drop_all_locks	mm/mmap.c	/^void mm_drop_all_locks(struct mm_struct *mm)$/;"	f
mm_find_pmd	mm/rmap.c	/^pmd_t *mm_find_pmd(struct mm_struct *mm, unsigned long address)$/;"	f
mm_free_pgd	kernel/fork.c	/^static inline void mm_free_pgd(struct mm_struct *mm)$/;"	f	file:
mm_free_pgd	kernel/fork.c	501;"	d	file:
mm_head	mm/huge_memory.c	/^	struct list_head mm_head;$/;"	m	struct:khugepaged_scan	typeref:struct:khugepaged_scan::list_head	file:
mm_init	kernel/fork.c	/^static struct mm_struct *mm_init(struct mm_struct *mm, struct task_struct *p)$/;"	f	file:
mm_init_aio	kernel/fork.c	/^static void mm_init_aio(struct mm_struct *mm)$/;"	f	file:
mm_init_owner	kernel/fork.c	/^void mm_init_owner(struct mm_struct *mm, struct task_struct *p)$/;"	f
mm_kobj	mm/mm_init.c	/^EXPORT_SYMBOL_GPL(mm_kobj);$/;"	v
mm_kobj	mm/mm_init.c	/^struct kobject *mm_kobj;$/;"	v	typeref:struct:kobject
mm_list	mm/ksm.c	/^	struct list_head mm_list;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::list_head	file:
mm_node	mm/huge_memory.c	/^	struct list_head mm_node;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::list_head	file:
mm_release	kernel/fork.c	/^void mm_release(struct task_struct *tsk, struct mm_struct *mm)$/;"	f
mm_slot	mm/huge_memory.c	/^	struct mm_slot *mm_slot;$/;"	m	struct:khugepaged_scan	typeref:struct:khugepaged_scan::mm_slot	file:
mm_slot	mm/huge_memory.c	/^struct mm_slot {$/;"	s	file:
mm_slot	mm/ksm.c	/^	struct mm_slot *mm_slot;$/;"	m	struct:ksm_scan	typeref:struct:ksm_scan::mm_slot	file:
mm_slot	mm/ksm.c	/^struct mm_slot {$/;"	s	file:
mm_slot_cache	mm/ksm.c	/^static struct kmem_cache *mm_slot_cache;$/;"	v	typeref:struct:kmem_cache	file:
mm_sysfs_init	mm/mm_init.c	/^__initcall(mm_sysfs_init);$/;"	v
mm_sysfs_init	mm/mm_init.c	/^static int __init mm_sysfs_init(void)$/;"	f	file:
mm_take_all_locks	mm/mmap.c	/^int mm_take_all_locks(struct mm_struct *mm)$/;"	f
mm_update_next_owner	kernel/exit.c	/^void mm_update_next_owner(struct mm_struct *mm)$/;"	f
mmap	kernel/auditsc.c	/^		} mmap;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon51	file:
mmap_arg_struct	mm/mmap.c	/^struct mmap_arg_struct {$/;"	s	file:
mmap_arg_struct	mm/nommu.c	/^struct mmap_arg_struct {$/;"	s	file:
mmap_init	mm/mmap.c	/^void __init mmap_init(void)$/;"	f
mmap_init	mm/nommu.c	/^void __init mmap_init(void)$/;"	f
mmap_pages_allocated	mm/nommu.c	/^atomic_long_t mmap_pages_allocated;$/;"	v
mmap_region	mm/mmap.c	/^unsigned long mmap_region(struct file *file, unsigned long addr,$/;"	f
mminit_dprintk	mm/internal.h	/^static inline void mminit_dprintk(enum mminit_level level,$/;"	f
mminit_dprintk	mm/internal.h	297;"	d
mminit_level	mm/internal.h	/^enum mminit_level {$/;"	g
mminit_loglevel	mm/mm_init.c	/^int mminit_loglevel;$/;"	v
mminit_validate_memmodel_limits	mm/internal.h	/^static inline void mminit_validate_memmodel_limits(unsigned long *start_pfn,$/;"	f
mminit_validate_memmodel_limits	mm/sparse.c	/^void __meminit mminit_validate_memmodel_limits(unsigned long *start_pfn,$/;"	f
mminit_verify_page_links	mm/internal.h	/^static inline void mminit_verify_page_links(struct page *page,$/;"	f
mminit_verify_page_links	mm/mm_init.c	/^void __meminit mminit_verify_page_links(struct page *page, enum zone_type zone,$/;"	f
mminit_verify_pageflags_layout	mm/internal.h	/^static inline void mminit_verify_pageflags_layout(void)$/;"	f
mminit_verify_pageflags_layout	mm/mm_init.c	/^void __init mminit_verify_pageflags_layout(void)$/;"	f
mminit_verify_zonelist	mm/internal.h	/^static inline void mminit_verify_zonelist(void)$/;"	f
mminit_verify_zonelist	mm/mm_init.c	/^void mminit_verify_zonelist(void)$/;"	f
mmput	kernel/fork.c	/^EXPORT_SYMBOL_GPL(mmput);$/;"	v
mmput	kernel/fork.c	/^void mmput(struct mm_struct *mm)$/;"	f
mmu-y	mm/Makefile	/^mmu-y			:= nommu.o$/;"	m
mmu_notifier_init	mm/mmu_notifier.c	/^module_init(mmu_notifier_init);$/;"	v
mmu_notifier_init	mm/mmu_notifier.c	/^static int __init mmu_notifier_init(void)$/;"	f	file:
mmu_notifier_register	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_register);$/;"	v
mmu_notifier_register	mm/mmu_notifier.c	/^int mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
mmu_notifier_unregister	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_unregister);$/;"	v
mmu_notifier_unregister	mm/mmu_notifier.c	/^void mmu_notifier_unregister(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
mnt	fs/mount.h	/^	struct vfsmount mnt;$/;"	m	struct:mount	typeref:struct:mount::vfsmount
mnt_add_count	fs/namespace.c	/^static inline void mnt_add_count(struct mount *mnt, int n)$/;"	f	file:
mnt_alloc_group_id	fs/namespace.c	/^static int mnt_alloc_group_id(struct mount *mnt)$/;"	f	file:
mnt_alloc_id	fs/namespace.c	/^static int mnt_alloc_id(struct mount *mnt)$/;"	f	file:
mnt_child	fs/mount.h	/^	struct list_head mnt_child;	\/* and going through their mnt_child *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_clone_write	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_clone_write);$/;"	v
mnt_clone_write	fs/namespace.c	/^int mnt_clone_write(struct vfsmount *mnt)$/;"	f
mnt_count	fs/mount.h	/^	int mnt_count;$/;"	m	struct:mnt_pcp
mnt_count	fs/mount.h	/^	int mnt_count;$/;"	m	struct:mount
mnt_dec_writers	fs/namespace.c	/^static inline void mnt_dec_writers(struct mount *mnt)$/;"	f	file:
mnt_devname	fs/mount.h	/^	const char *mnt_devname;	\/* Name of device e.g. \/dev\/dsk\/hda1 *\/$/;"	m	struct:mount
mnt_drop_write	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_drop_write);$/;"	v
mnt_drop_write	fs/namespace.c	/^void mnt_drop_write(struct vfsmount *mnt)$/;"	f
mnt_drop_write_file	fs/namespace.c	/^EXPORT_SYMBOL(mnt_drop_write_file);$/;"	v
mnt_drop_write_file	fs/namespace.c	/^void mnt_drop_write_file(struct file *file)$/;"	f
mnt_expire	fs/mount.h	/^	struct list_head mnt_expire;	\/* link in fs-specific expiry list *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_expiry_mark	fs/mount.h	/^	int mnt_expiry_mark;		\/* true if marked for expiry *\/$/;"	m	struct:mount
mnt_free_id	fs/namespace.c	/^static void mnt_free_id(struct mount *mnt)$/;"	f	file:
mnt_fsnotify_marks	fs/mount.h	/^	struct hlist_head mnt_fsnotify_marks;$/;"	m	struct:mount	typeref:struct:mount::hlist_head
mnt_fsnotify_mask	fs/mount.h	/^	__u32 mnt_fsnotify_mask;$/;"	m	struct:mount
mnt_get_count	fs/namespace.c	/^unsigned int mnt_get_count(struct mount *mnt)$/;"	f
mnt_get_writers	fs/namespace.c	/^static unsigned int mnt_get_writers(struct mount *mnt)$/;"	f	file:
mnt_ghosts	fs/mount.h	/^	int mnt_ghosts;$/;"	m	struct:mount
mnt_group_id	fs/mount.h	/^	int mnt_group_id;		\/* peer group identifier *\/$/;"	m	struct:mount
mnt_group_start	fs/namespace.c	/^static int mnt_group_start = 1;$/;"	v	file:
mnt_has_parent	fs/mount.h	/^static inline int mnt_has_parent(struct mount *mnt)$/;"	f
mnt_hash	fs/mount.h	/^	struct list_head mnt_hash;$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_id	fs/mount.h	/^	int mnt_id;			\/* mount identifier *\/$/;"	m	struct:mount
mnt_id_start	fs/namespace.c	/^static int mnt_id_start = 0;$/;"	v	file:
mnt_inc_writers	fs/namespace.c	/^static inline void mnt_inc_writers(struct mount *mnt)$/;"	f	file:
mnt_init	fs/namespace.c	/^void __init mnt_init(void)$/;"	f
mnt_instance	fs/mount.h	/^	struct list_head mnt_instance;	\/* mount instance on sb->s_mounts *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_is_readonly	fs/namespace.c	/^static int mnt_is_readonly(struct vfsmount *mnt)$/;"	f	file:
mnt_list	fs/mount.h	/^	struct list_head mnt_list;$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_make_readonly	fs/namespace.c	/^static int mnt_make_readonly(struct mount *mnt)$/;"	f	file:
mnt_master	fs/mount.h	/^	struct mount *mnt_master;	\/* slave is on master->mnt_slave_list *\/$/;"	m	struct:mount	typeref:struct:mount::mount
mnt_mountpoint	fs/mount.h	/^	struct dentry *mnt_mountpoint;$/;"	m	struct:mount	typeref:struct:mount::dentry
mnt_mounts	fs/mount.h	/^	struct list_head mnt_mounts;	\/* list of children, anchored here *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_namespace	fs/mount.h	/^struct mnt_namespace {$/;"	s
mnt_ns	fs/mount.h	/^	struct mnt_namespace *mnt_ns;	\/* containing namespace *\/$/;"	m	struct:mount	typeref:struct:mount::mnt_namespace
mnt_ns_loop	fs/namespace.c	/^static bool mnt_ns_loop(struct path *path)$/;"	f	file:
mnt_ns_seq	fs/namespace.c	/^static atomic64_t mnt_ns_seq = ATOMIC64_INIT(1);$/;"	v	file:
mnt_parent	fs/mount.h	/^	struct mount *mnt_parent;$/;"	m	struct:mount	typeref:struct:mount::mount
mnt_path	fs/compat.c	/^	struct compat_nfs_string mnt_path;$/;"	m	struct:compat_nfs4_mount_data_v1	typeref:struct:compat_nfs4_mount_data_v1::compat_nfs_string	file:
mnt_pcp	fs/mount.h	/^	struct mnt_pcp __percpu *mnt_pcp;$/;"	m	struct:mount	typeref:struct:mount::__percpu
mnt_pcp	fs/mount.h	/^struct mnt_pcp {$/;"	s
mnt_pin	fs/namespace.c	/^EXPORT_SYMBOL(mnt_pin);$/;"	v
mnt_pin	fs/namespace.c	/^void mnt_pin(struct vfsmount *mnt)$/;"	f
mnt_pinned	fs/mount.h	/^	int mnt_pinned;$/;"	m	struct:mount
mnt_release_group_id	fs/namespace.c	/^void mnt_release_group_id(struct mount *mnt)$/;"	f
mnt_set_expiry	fs/namespace.c	/^EXPORT_SYMBOL(mnt_set_expiry);$/;"	v
mnt_set_expiry	fs/namespace.c	/^void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list)$/;"	f
mnt_set_mountpoint	fs/namespace.c	/^void mnt_set_mountpoint(struct mount *mnt, struct dentry *dentry,$/;"	f
mnt_share	fs/mount.h	/^	struct list_head mnt_share;	\/* circular list of shared mounts *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_slave	fs/mount.h	/^	struct list_head mnt_slave;	\/* slave list entry *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_slave_list	fs/mount.h	/^	struct list_head mnt_slave_list;\/* list of slave mounts *\/$/;"	m	struct:mount	typeref:struct:mount::list_head
mnt_unpin	fs/namespace.c	/^EXPORT_SYMBOL(mnt_unpin);$/;"	v
mnt_unpin	fs/namespace.c	/^void mnt_unpin(struct vfsmount *m)$/;"	f
mnt_want_write	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_want_write);$/;"	v
mnt_want_write	fs/namespace.c	/^int mnt_want_write(struct vfsmount *m)$/;"	f
mnt_want_write_file	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_want_write_file);$/;"	v
mnt_want_write_file	fs/namespace.c	/^int mnt_want_write_file(struct file *file)$/;"	f
mnt_writers	fs/mount.h	/^	int mnt_writers;$/;"	m	struct:mnt_pcp
mnt_writers	fs/mount.h	/^	int mnt_writers;$/;"	m	struct:mount
mntfree	fs/namespace.c	/^static inline void mntfree(struct mount *mnt)$/;"	f	file:
mntget	fs/namespace.c	/^EXPORT_SYMBOL(mntget);$/;"	v
mntget	fs/namespace.c	/^struct vfsmount *mntget(struct vfsmount *mnt)$/;"	f
mntns_get	fs/namespace.c	/^static void *mntns_get(struct task_struct *task)$/;"	f	file:
mntns_install	fs/namespace.c	/^static int mntns_install(struct nsproxy *nsproxy, void *ns)$/;"	f	file:
mntns_inum	fs/namespace.c	/^static unsigned int mntns_inum(void *ns)$/;"	f	file:
mntns_operations	fs/namespace.c	/^const struct proc_ns_operations mntns_operations = {$/;"	v	typeref:struct:proc_ns_operations
mntns_put	fs/namespace.c	/^static void mntns_put(void *ns)$/;"	f	file:
mntput	fs/namespace.c	/^EXPORT_SYMBOL(mntput);$/;"	v
mntput	fs/namespace.c	/^void mntput(struct vfsmount *mnt)$/;"	f
mntput_no_expire	fs/namespace.c	/^static void mntput_no_expire(struct mount *mnt)$/;"	f	file:
mod	kernel/cpu.c	/^	unsigned long mod;$/;"	m	struct:take_cpu_down_param	file:
mod	kernel/jump_label.c	/^	struct module *mod;$/;"	m	struct:static_key_mod	typeref:struct:static_key_mod::module	file:
mod	kernel/module.c	/^		unsigned int sym, str, mod, vers, info, pcpu;$/;"	m	struct:load_info::__anon60	file:
mod	kernel/module.c	/^	struct module *mod;$/;"	m	struct:stopref	typeref:struct:stopref::module	file:
mod_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(mod_delayed_work);$/;"	v
mod_delayed_work	kernel/workqueue.c	/^bool mod_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork,$/;"	f
mod_delayed_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(mod_delayed_work_on);$/;"	v
mod_delayed_work_on	kernel/workqueue.c	/^bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,$/;"	f
mod_extract_mpi_array	kernel/module_signing.c	/^static int mod_extract_mpi_array(struct public_key_signature *pks,$/;"	f	file:
mod_find_symname	kernel/module.c	/^static unsigned long mod_find_symname(struct module *mod, const char *name)$/;"	f	file:
mod_make_digest	kernel/module_signing.c	/^static struct public_key_signature *mod_make_digest(enum pkey_hash_algo hash,$/;"	f	file:
mod_percpu	kernel/module.c	/^static inline void __percpu *mod_percpu(struct module *mod)$/;"	f	file:
mod_state	mm/vmstat.c	/^static inline void mod_state(struct zone *zone,$/;"	f	file:
mod_sysfs_fini	kernel/module.c	/^static void mod_sysfs_fini(struct module *mod)$/;"	f	file:
mod_sysfs_init	kernel/module.c	/^static int mod_sysfs_init(struct module *mod)$/;"	f	file:
mod_sysfs_setup	kernel/module.c	/^static int mod_sysfs_setup(struct module *mod,$/;"	f	file:
mod_sysfs_teardown	kernel/module.c	/^static void mod_sysfs_teardown(struct module *mod)$/;"	f	file:
mod_timer	kernel/timer.c	/^EXPORT_SYMBOL(mod_timer);$/;"	v
mod_timer	kernel/timer.c	/^int mod_timer(struct timer_list *timer, unsigned long expires)$/;"	f
mod_timer_pending	kernel/timer.c	/^EXPORT_SYMBOL(mod_timer_pending);$/;"	v
mod_timer_pending	kernel/timer.c	/^int mod_timer_pending(struct timer_list *timer, unsigned long expires)$/;"	f
mod_timer_pinned	kernel/timer.c	/^EXPORT_SYMBOL(mod_timer_pinned);$/;"	v
mod_timer_pinned	kernel/timer.c	/^int mod_timer_pinned(struct timer_list *timer, unsigned long expires)$/;"	f
mod_verify_sig	kernel/module_signing.c	/^int mod_verify_sig(const void *mod, unsigned long *_modlen)$/;"	f
mod_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(mod_zone_page_state);$/;"	v
mod_zone_page_state	mm/vmstat.c	/^void mod_zone_page_state(struct zone *zone, enum zone_stat_item item,$/;"	f
mode	fs/internal.h	/^	umode_t mode;$/;"	m	struct:open_flags
mode	kernel/auditsc.c	/^			umode_t			mode;$/;"	m	struct:audit_context::__anon43::__anon45	file:
mode	kernel/auditsc.c	/^			umode_t			mode;$/;"	m	struct:audit_context::__anon43::__anon49	file:
mode	kernel/auditsc.c	/^	umode_t			mode;$/;"	m	struct:audit_names	file:
mode1_syscalls	kernel/seccomp.c	/^static int mode1_syscalls[] = {$/;"	v	file:
mode1_syscalls_32	kernel/seccomp.c	/^static int mode1_syscalls_32[] = {$/;"	v	file:
modinfo_attrs	kernel/module.c	/^static struct module_attribute *modinfo_attrs[] = {$/;"	v	typeref:struct:module_attribute	file:
modinfo_coresize	kernel/module.c	/^static struct module_attribute modinfo_coresize =$/;"	v	typeref:struct:module_attribute	file:
modinfo_initsize	kernel/module.c	/^static struct module_attribute modinfo_initsize =$/;"	v	typeref:struct:module_attribute	file:
modinfo_initstate	kernel/module.c	/^static struct module_attribute modinfo_initstate =$/;"	v	typeref:struct:module_attribute	file:
modinfo_refcnt	kernel/module.c	/^static struct module_attribute modinfo_refcnt =$/;"	v	typeref:struct:module_attribute	file:
modinfo_taint	kernel/module.c	/^static struct module_attribute modinfo_taint =$/;"	v	typeref:struct:module_attribute	file:
modprobe_path	kernel/kmod.c	/^char modprobe_path[KMOD_PATH_LEN] = "\/sbin\/modprobe";$/;"	v
modsign_keyring	kernel/modsign_pubkey.c	/^struct key *modsign_keyring;$/;"	v	typeref:struct:key
module_add_modinfo_attrs	kernel/module.c	/^static int module_add_modinfo_attrs(struct module *mod)$/;"	f	file:
module_addr_max	kernel/module.c	/^static unsigned long module_addr_min = -1UL, module_addr_max = 0;$/;"	v	file:
module_addr_min	kernel/module.c	/^static unsigned long module_addr_min = -1UL, module_addr_max = 0;$/;"	v	file:
module_address_lookup	kernel/module.c	/^const char *module_address_lookup(unsigned long addr,$/;"	f
module_alloc	kernel/module.c	/^void * __weak module_alloc(unsigned long size)$/;"	f
module_alloc_update_bounds	kernel/module.c	/^static void *module_alloc_update_bounds(unsigned long size)$/;"	f	file:
module_arch_cleanup	kernel/module.c	/^void __weak module_arch_cleanup(struct module *mod)$/;"	f
module_attr_show	kernel/params.c	/^static ssize_t module_attr_show(struct kobject *kobj,$/;"	f	file:
module_attr_store	kernel/params.c	/^static ssize_t module_attr_store(struct kobject *kobj,$/;"	f	file:
module_deallocate	kernel/module.c	/^static void module_deallocate(struct module *mod, struct load_info *info)$/;"	f	file:
module_finalize	kernel/module.c	/^int __weak module_finalize(const Elf_Ehdr *hdr,$/;"	f
module_flags	kernel/module.c	/^static char *module_flags(struct module *mod, char *buf)$/;"	f	file:
module_flags_taint	kernel/module.c	/^static size_t module_flags_taint(struct module *mod, char *buf)$/;"	f	file:
module_free	kernel/module.c	/^void __weak module_free(struct module *mod, void *module_region)$/;"	f
module_frob_arch_sections	kernel/module.c	/^int __weak module_frob_arch_sections(Elf_Ehdr *hdr,$/;"	f
module_get	kernel/module.c	/^EXPORT_TRACEPOINT_SYMBOL(module_get);$/;"	v
module_get_kallsym	kernel/module.c	/^int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,$/;"	f
module_init	kernel/kexec.c	/^module_init(crash_save_vmcoreinfo_init)$/;"	f
module_init	mm/page_alloc.c	/^module_init(init_per_zone_wmark_min)$/;"	f
module_kallsyms_lookup_name	kernel/module.c	/^unsigned long module_kallsyms_lookup_name(const char *name)$/;"	f
module_kallsyms_on_each_symbol	kernel/module.c	/^int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,$/;"	f
module_kset	kernel/params.c	/^struct kset *module_kset;$/;"	v	typeref:struct:kset
module_ktype	kernel/params.c	/^struct kobj_type module_ktype = {$/;"	v	typeref:struct:kobj_type
module_layout	kernel/module.c	/^EXPORT_SYMBOL(module_layout);$/;"	v
module_layout	kernel/module.c	/^void module_layout(struct module *mod,$/;"	f
module_mutex	kernel/module.c	/^DEFINE_MUTEX(module_mutex);$/;"	v
module_mutex	kernel/module.c	/^EXPORT_SYMBOL_GPL(module_mutex);$/;"	v
module_name	kernel/kallsyms.c	/^	char module_name[MODULE_NAME_LEN];$/;"	m	struct:kallsym_iter	file:
module_notes_attrs	kernel/module.c	/^struct module_notes_attrs {$/;"	s	file:
module_notes_read	kernel/module.c	/^static ssize_t module_notes_read(struct file *filp, struct kobject *kobj,$/;"	f	file:
module_param_attrs	kernel/params.c	/^struct module_param_attrs$/;"	s	file:
module_param_sysfs_remove	kernel/params.c	/^void module_param_sysfs_remove(struct module *mod)$/;"	f
module_param_sysfs_setup	kernel/params.c	/^int module_param_sysfs_setup(struct module *mod,$/;"	f
module_put	kernel/module.c	/^EXPORT_SYMBOL(module_put);$/;"	v
module_put	kernel/module.c	/^void module_put(struct module *module)$/;"	f
module_refcount	kernel/module.c	/^EXPORT_SYMBOL(module_refcount);$/;"	v
module_refcount	kernel/module.c	/^unsigned long module_refcount(struct module *mod)$/;"	f
module_remove_modinfo_attrs	kernel/module.c	/^static void module_remove_modinfo_attrs(struct module *mod)$/;"	f	file:
module_sect_attr	kernel/module.c	/^struct module_sect_attr$/;"	s	file:
module_sect_attrs	kernel/module.c	/^struct module_sect_attrs$/;"	s	file:
module_sect_show	kernel/module.c	/^static ssize_t module_sect_show(struct module_attribute *mattr,$/;"	f	file:
module_sig_check	kernel/module.c	/^static int module_sig_check(struct load_info *info)$/;"	f	file:
module_signature	kernel/module_signing.c	/^struct module_signature {$/;"	s	file:
module_sysfs_initialized	kernel/params.c	/^int module_sysfs_initialized;$/;"	v
module_sysfs_ops	kernel/params.c	/^static const struct sysfs_ops module_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
module_uevent	kernel/module.c	/^struct module_attribute module_uevent =$/;"	v	typeref:struct:module_attribute
module_uevent_ops	kernel/params.c	/^static const struct kset_uevent_ops module_uevent_ops = {$/;"	v	typeref:struct:kset_uevent_ops	file:
module_unload_free	kernel/module.c	/^static inline void module_unload_free(struct module *mod)$/;"	f	file:
module_unload_free	kernel/module.c	/^static void module_unload_free(struct module *mod)$/;"	f	file:
module_unload_init	kernel/module.c	/^static inline int module_unload_init(struct module *mod)$/;"	f	file:
module_unload_init	kernel/module.c	/^static int module_unload_init(struct module *mod)$/;"	f	file:
module_update_tracepoints	kernel/tracepoint.c	/^void module_update_tracepoints(void)$/;"	f
module_verify_init	kernel/modsign_pubkey.c	/^device_initcall(module_verify_init);$/;"	v
module_verify_init	kernel/modsign_pubkey.c	/^static __init int module_verify_init(void)$/;"	f	file:
modules_disabled	kernel/module.c	/^int modules_disabled = 0;$/;"	v
modules_op	kernel/module.c	/^static const struct seq_operations modules_op = {$/;"	v	typeref:struct:seq_operations	file:
modules_open	kernel/module.c	/^static int modules_open(struct inode *inode, struct file *file)$/;"	f	file:
moffs	fs/timerfd.c	/^	ktime_t moffs;$/;"	m	struct:timerfd_ctx	file:
mount	fs/mount.h	/^struct mount {$/;"	s
mount_bdev	fs/super.c	/^EXPORT_SYMBOL(mount_bdev);$/;"	v
mount_bdev	fs/super.c	/^struct dentry *mount_bdev(struct file_system_type *fs_type,$/;"	f
mount_fs	fs/super.c	/^mount_fs(struct file_system_type *type, int flags, const char *name, void *data)$/;"	f
mount_nodev	fs/super.c	/^EXPORT_SYMBOL(mount_nodev);$/;"	v
mount_nodev	fs/super.c	/^struct dentry *mount_nodev(struct file_system_type *fs_type,$/;"	f
mount_ns	fs/super.c	/^EXPORT_SYMBOL(mount_ns);$/;"	v
mount_ns	fs/super.c	/^struct dentry *mount_ns(struct file_system_type *fs_type, int flags,$/;"	f
mount_pseudo	fs/libfs.c	/^EXPORT_SYMBOL(mount_pseudo);$/;"	v
mount_pseudo	fs/libfs.c	/^struct dentry *mount_pseudo(struct file_system_type *fs_type, char *name,$/;"	f
mount_single	fs/super.c	/^EXPORT_SYMBOL(mount_single);$/;"	v
mount_single	fs/super.c	/^struct dentry *mount_single(struct file_system_type *fs_type,$/;"	f
mount_subtree	fs/namespace.c	/^EXPORT_SYMBOL(mount_subtree);$/;"	v
mount_subtree	fs/namespace.c	/^struct dentry *mount_subtree(struct vfsmount *mnt, const char *name)$/;"	f
mounted_uid	fs/compat.c	/^	__compat_uid_t mounted_uid;$/;"	m	struct:compat_ncp_mount_data	file:
mounted_uid	fs/compat.c	/^	compat_ulong_t mounted_uid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
mounted_vol	fs/compat.c	/^	unsigned char mounted_vol[NCP_VOLNAME_LEN + 1];$/;"	m	struct:compat_ncp_mount_data	file:
mountinfo_open	fs/proc_namespace.c	/^static int mountinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
mounts_op	fs/namespace.c	/^const struct seq_operations mounts_op = {$/;"	v	typeref:struct:seq_operations
mounts_open	fs/proc_namespace.c	/^static int mounts_open(struct inode *inode, struct file *file)$/;"	f	file:
mounts_open_common	fs/proc_namespace.c	/^static int mounts_open_common(struct inode *inode, struct file *file,$/;"	f	file:
mounts_poll	fs/proc_namespace.c	/^static unsigned mounts_poll(struct file *file, poll_table *wait)$/;"	f	file:
mounts_release	fs/proc_namespace.c	/^static int mounts_release(struct inode *inode, struct file *file)$/;"	f	file:
mountstats_open	fs/proc_namespace.c	/^static int mountstats_open(struct inode *inode, struct file *file)$/;"	f	file:
movable_zone	mm/page_alloc.c	/^EXPORT_SYMBOL(movable_zone);$/;"	v
movable_zone	mm/page_alloc.c	/^int movable_zone;$/;"	v
move_active_pages_to_lru	mm/vmscan.c	/^static void move_active_pages_to_lru(struct lruvec *lruvec,$/;"	f	file:
move_anon	mm/memcontrol.c	/^static bool move_anon(void)$/;"	f	file:
move_charge_at_immigrate	mm/memcontrol.c	/^	unsigned long 	move_charge_at_immigrate;$/;"	m	struct:mem_cgroup	file:
move_charge_struct	mm/memcontrol.c	/^static struct move_charge_struct {$/;"	s	file:
move_expired_inodes	fs/fs-writeback.c	/^static int move_expired_inodes(struct list_head *delaying_queue,$/;"	f	file:
move_file	mm/memcontrol.c	/^static bool move_file(void)$/;"	f	file:
move_freepages	mm/page_alloc.c	/^int move_freepages(struct zone *zone,$/;"	f
move_freepages_block	mm/page_alloc.c	/^int move_freepages_block(struct zone *zone, struct page *page,$/;"	f
move_huge_pmd	mm/huge_memory.c	/^int move_huge_pmd(struct vm_area_struct *vma, struct vm_area_struct *new_vma,$/;"	f
move_linked_works	kernel/workqueue.c	/^static void move_linked_works(struct work_struct *work, struct list_head *head,$/;"	f	file:
move_lock	mm/memcontrol.c	/^	spinlock_t	move_lock;$/;"	m	struct:mem_cgroup	file:
move_lock_mem_cgroup	mm/memcontrol.c	/^static void move_lock_mem_cgroup(struct mem_cgroup *memcg,$/;"	f	file:
move_member_tasks_to_cpuset	kernel/cpuset.c	/^static void move_member_tasks_to_cpuset(struct cpuset *from, struct cpuset *to)$/;"	f	file:
move_module	kernel/module.c	/^static int move_module(struct module *mod, struct load_info *info)$/;"	f	file:
move_page_tables	mm/mremap.c	/^unsigned long move_page_tables(struct vm_area_struct *vma,$/;"	f
move_pfn_range_left	mm/memory_hotplug.c	/^static int __meminit move_pfn_range_left(struct zone *z1, struct zone *z2,$/;"	f	file:
move_pfn_range_right	mm/memory_hotplug.c	/^static int __meminit move_pfn_range_right(struct zone *z1, struct zone *z2,$/;"	f	file:
move_ptes	mm/mremap.c	/^static void move_ptes(struct vm_area_struct *vma, pmd_t *old_pmd,$/;"	f	file:
move_to_new_page	mm/migrate.c	/^static int move_to_new_page(struct page *newpage, struct page *page,$/;"	f	file:
move_type	mm/memcontrol.c	/^enum move_type {$/;"	g	file:
move_unlock_mem_cgroup	mm/memcontrol.c	/^static void move_unlock_mem_cgroup(struct mem_cgroup *memcg,$/;"	f	file:
move_vma	mm/mremap.c	/^static unsigned long move_vma(struct vm_area_struct *vma,$/;"	f	file:
moved_charge	mm/memcontrol.c	/^	unsigned long moved_charge;$/;"	m	struct:move_charge_struct	file:
moved_swap	mm/memcontrol.c	/^	unsigned long moved_swap;$/;"	m	struct:move_charge_struct	file:
moving_account	mm/memcontrol.c	/^	atomic_t	moving_account;$/;"	m	struct:mem_cgroup	file:
moving_task	mm/memcontrol.c	/^	struct task_struct *moving_task;	\/* a task moving charges *\/$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::task_struct	file:
mpage_alloc	fs/mpage.c	/^mpage_alloc(struct block_device *bdev,$/;"	f	file:
mpage_bio_submit	fs/mpage.c	/^static struct bio *mpage_bio_submit(int rw, struct bio *bio)$/;"	f	file:
mpage_data	fs/mpage.c	/^struct mpage_data {$/;"	s	file:
mpage_end_io	fs/mpage.c	/^static void mpage_end_io(struct bio *bio, int err)$/;"	f	file:
mpage_readpage	fs/mpage.c	/^EXPORT_SYMBOL(mpage_readpage);$/;"	v
mpage_readpage	fs/mpage.c	/^int mpage_readpage(struct page *page, get_block_t get_block)$/;"	f
mpage_readpages	fs/mpage.c	/^EXPORT_SYMBOL(mpage_readpages);$/;"	v
mpage_readpages	fs/mpage.c	/^mpage_readpages(struct address_space *mapping, struct list_head *pages,$/;"	f
mpage_writepage	fs/mpage.c	/^EXPORT_SYMBOL(mpage_writepage);$/;"	v
mpage_writepage	fs/mpage.c	/^int mpage_writepage(struct page *page, get_block_t get_block,$/;"	f
mpage_writepages	fs/mpage.c	/^EXPORT_SYMBOL(mpage_writepages);$/;"	v
mpage_writepages	fs/mpage.c	/^mpage_writepages(struct address_space *mapping,$/;"	f
mpol_fix_fork_child_flag	mm/mempolicy.c	/^void mpol_fix_fork_child_flag(struct task_struct *p)$/;"	f
mpol_free_shared_policy	mm/mempolicy.c	/^void mpol_free_shared_policy(struct shared_policy *p)$/;"	f
mpol_misplaced	mm/mempolicy.c	/^int mpol_misplaced(struct page *page, struct vm_area_struct *vma, unsigned long addr)$/;"	f
mpol_new	mm/mempolicy.c	/^static struct mempolicy *mpol_new(unsigned short mode, unsigned short flags,$/;"	f	file:
mpol_new_bind	mm/mempolicy.c	/^static int mpol_new_bind(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_new_interleave	mm/mempolicy.c	/^static int mpol_new_interleave(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_new_preferred	mm/mempolicy.c	/^static int mpol_new_preferred(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_ops	mm/mempolicy.c	/^static const struct mempolicy_operations mpol_ops[MPOL_MAX] = {$/;"	v	typeref:struct:mempolicy_operations	file:
mpol_ops	mm/mempolicy.c	/^} mpol_ops[MPOL_MAX];$/;"	v	typeref:struct:mempolicy_operations	file:
mpol_parse_str	mm/mempolicy.c	/^int mpol_parse_str(char *str, struct mempolicy **mpol)$/;"	f
mpol_rebind_default	mm/mempolicy.c	/^static void mpol_rebind_default(struct mempolicy *pol, const nodemask_t *nodes,$/;"	f	file:
mpol_rebind_mm	mm/mempolicy.c	/^void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new)$/;"	f
mpol_rebind_nodemask	mm/mempolicy.c	/^static void mpol_rebind_nodemask(struct mempolicy *pol, const nodemask_t *nodes,$/;"	f	file:
mpol_rebind_policy	mm/mempolicy.c	/^static void mpol_rebind_policy(struct mempolicy *pol, const nodemask_t *newmask,$/;"	f	file:
mpol_rebind_preferred	mm/mempolicy.c	/^static void mpol_rebind_preferred(struct mempolicy *pol,$/;"	f	file:
mpol_rebind_task	mm/mempolicy.c	/^void mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new,$/;"	f
mpol_relative_nodemask	mm/mempolicy.c	/^static void mpol_relative_nodemask(nodemask_t *ret, const nodemask_t *orig,$/;"	f	file:
mpol_set_nodemask	mm/mempolicy.c	/^static int mpol_set_nodemask(struct mempolicy *pol,$/;"	f	file:
mpol_set_shared_policy	mm/mempolicy.c	/^int mpol_set_shared_policy(struct shared_policy *info,$/;"	f
mpol_set_task_struct_flag	mm/mempolicy.c	/^static void mpol_set_task_struct_flag(void)$/;"	f	file:
mpol_shared_policy_init	mm/mempolicy.c	/^void mpol_shared_policy_init(struct shared_policy *sp, struct mempolicy *mpol)$/;"	f
mpol_shared_policy_lookup	mm/mempolicy.c	/^mpol_shared_policy_lookup(struct shared_policy *sp, unsigned long idx)$/;"	f
mpol_store_user_nodemask	mm/mempolicy.c	/^static inline int mpol_store_user_nodemask(const struct mempolicy *pol)$/;"	f	file:
mpol_to_str	mm/mempolicy.c	/^int mpol_to_str(char *buffer, int maxlen, struct mempolicy *pol)$/;"	f
mprotect_fixup	mm/mprotect.c	/^mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,$/;"	f
mq_getsetattr	kernel/auditsc.c	/^		} mq_getsetattr;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon46	file:
mq_notify	kernel/auditsc.c	/^		} mq_notify;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon47	file:
mq_open	kernel/auditsc.c	/^		} mq_open;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon49	file:
mq_sendrecv	kernel/auditsc.c	/^		} mq_sendrecv;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon48	file:
mqdes	kernel/auditsc.c	/^			mqd_t			mqdes;$/;"	m	struct:audit_context::__anon43::__anon46	file:
mqdes	kernel/auditsc.c	/^			mqd_t			mqdes;$/;"	m	struct:audit_context::__anon43::__anon47	file:
mqdes	kernel/auditsc.c	/^			mqd_t			mqdes;$/;"	m	struct:audit_context::__anon43::__anon48	file:
mqstat	kernel/auditsc.c	/^			struct mq_attr 		mqstat;$/;"	m	struct:audit_context::__anon43::__anon46	typeref:struct:audit_context::__anon43::__anon46::mq_attr	file:
mremap_to	mm/mremap.c	/^static unsigned long mremap_to(unsigned long addr, unsigned long old_len,$/;"	f	file:
msecs_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(msecs_to_jiffies);$/;"	v
msecs_to_jiffies	kernel/time.c	/^unsigned long msecs_to_jiffies(const unsigned int m)$/;"	f
msg	mm/memory-failure.c	/^	char *msg;$/;"	m	struct:page_state	file:
msg_len	kernel/auditsc.c	/^			size_t			msg_len;$/;"	m	struct:audit_context::__anon43::__anon48	file:
msg_print_text	kernel/printk.c	/^static size_t msg_print_text(const struct log *msg, enum log_flags prev,$/;"	f	file:
msg_prio	kernel/auditsc.c	/^			unsigned int		msg_prio;$/;"	m	struct:audit_context::__anon43::__anon48	file:
msg_status	fs/compat_ioctl.c	/^	unsigned char msg_status;		\/* [o] messaging level data (optional) *\/$/;"	m	struct:sg_io_hdr32	file:
msgs	fs/compat_ioctl.c	/^	compat_caddr_t msgs; \/* struct i2c_msg __user *msgs *\/$/;"	m	struct:i2c_rdwr_ioctl_data32	file:
msgs	fs/compat_ioctl.c	/^	struct i2c_msg msgs[0];$/;"	m	struct:i2c_rdwr_aligned	typeref:struct:i2c_rdwr_aligned::i2c_msg	file:
msleep	kernel/timer.c	/^EXPORT_SYMBOL(msleep);$/;"	v
msleep	kernel/timer.c	/^void msleep(unsigned int msecs)$/;"	f
msleep_interruptible	kernel/timer.c	/^EXPORT_SYMBOL(msleep_interruptible);$/;"	v
msleep_interruptible	kernel/timer.c	/^unsigned long msleep_interruptible(unsigned int msecs)$/;"	f
mt_blkno	fs/compat_ioctl.c	/^	compat_daddr_t	mt_blkno;$/;"	m	struct:mtget32	file:
mt_blkno	fs/compat_ioctl.c	/^	compat_long_t	mt_blkno;$/;"	m	struct:mtpos32	file:
mt_dsreg	fs/compat_ioctl.c	/^	compat_long_t	mt_dsreg;$/;"	m	struct:mtget32	file:
mt_erreg	fs/compat_ioctl.c	/^	compat_long_t	mt_erreg;$/;"	m	struct:mtget32	file:
mt_fileno	fs/compat_ioctl.c	/^	compat_daddr_t	mt_fileno;$/;"	m	struct:mtget32	file:
mt_gstat	fs/compat_ioctl.c	/^	compat_long_t	mt_gstat;$/;"	m	struct:mtget32	file:
mt_ioctl_trans	fs/compat_ioctl.c	/^static int mt_ioctl_trans(unsigned int fd, unsigned int cmd, void __user *argp)$/;"	f	file:
mt_resid	fs/compat_ioctl.c	/^	compat_long_t	mt_resid;$/;"	m	struct:mtget32	file:
mt_type	fs/compat_ioctl.c	/^	compat_long_t	mt_type;$/;"	m	struct:mtget32	file:
mtget32	fs/compat_ioctl.c	/^struct mtget32 {$/;"	s	file:
mtpos32	fs/compat_ioctl.c	/^struct mtpos32 {$/;"	s	file:
mtx	fs/eventpoll.c	/^	struct mutex mtx;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::mutex	file:
munlock_vma_page	mm/mlock.c	/^unsigned int munlock_vma_page(struct page *page)$/;"	f
munlock_vma_pages_all	mm/internal.h	/^static inline void munlock_vma_pages_all(struct vm_area_struct *vma)$/;"	f
munlock_vma_pages_range	mm/mlock.c	/^void munlock_vma_pages_range(struct vm_area_struct *vma,$/;"	f
must_snapshot_stable_pages	mm/bounce.c	/^static int must_snapshot_stable_pages(struct request_queue *q, struct bio *bio)$/;"	f	file:
mutex	fs/libfs.c	/^	struct mutex mutex;	\/* protects access to these buffers *\/$/;"	m	struct:simple_attr	typeref:struct:simple_attr::mutex	file:
mutex	kernel/cgroup.c	/^	struct rw_semaphore mutex;$/;"	m	struct:cgroup_pidlist	typeref:struct:cgroup_pidlist::rw_semaphore	file:
mutex_clear_owner	kernel/mutex-debug.h	/^static inline void mutex_clear_owner(struct mutex *lock)$/;"	f
mutex_clear_owner	kernel/mutex.h	/^static inline void mutex_clear_owner(struct mutex *lock)$/;"	f
mutex_destroy	kernel/mutex-debug.c	/^EXPORT_SYMBOL_GPL(mutex_destroy);$/;"	v
mutex_destroy	kernel/mutex-debug.c	/^void mutex_destroy(struct mutex *lock)$/;"	f
mutex_lock	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_lock);$/;"	v
mutex_lock	kernel/mutex.c	/^void __sched mutex_lock(struct mutex *lock)$/;"	f
mutex_lock_interruptible	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_lock_interruptible);$/;"	v
mutex_lock_interruptible	kernel/mutex.c	/^int __sched mutex_lock_interruptible(struct mutex *lock)$/;"	f
mutex_lock_interruptible_nested	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(mutex_lock_interruptible_nested);$/;"	v
mutex_lock_interruptible_nested	kernel/mutex.c	/^mutex_lock_interruptible_nested(struct mutex *lock, unsigned int subclass)$/;"	f
mutex_lock_killable	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_lock_killable);$/;"	v
mutex_lock_killable	kernel/mutex.c	/^int __sched mutex_lock_killable(struct mutex *lock)$/;"	f
mutex_lock_killable_nested	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(mutex_lock_killable_nested);$/;"	v
mutex_lock_killable_nested	kernel/mutex.c	/^mutex_lock_killable_nested(struct mutex *lock, unsigned int subclass)$/;"	f
mutex_lock_nested	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(mutex_lock_nested);$/;"	v
mutex_lock_nested	kernel/mutex.c	/^mutex_lock_nested(struct mutex *lock, unsigned int subclass)$/;"	f
mutex_remove_waiter	kernel/mutex-debug.c	/^void mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter,$/;"	f
mutex_remove_waiter	kernel/mutex.h	16;"	d
mutex_set_owner	kernel/mutex-debug.h	/^static inline void mutex_set_owner(struct mutex *lock)$/;"	f
mutex_set_owner	kernel/mutex.h	/^static inline void mutex_set_owner(struct mutex *lock)$/;"	f
mutex_trylock	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_trylock);$/;"	v
mutex_trylock	kernel/mutex.c	/^int __sched mutex_trylock(struct mutex *lock)$/;"	f
mutex_unlock	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_unlock);$/;"	v
mutex_unlock	kernel/mutex.c	/^void __sched mutex_unlock(struct mutex *lock)$/;"	f
mutexes	kernel/rtmutex-tester.c	/^	int			mutexes[MAX_RT_TEST_MUTEXES];$/;"	m	struct:test_thread_data	file:
mutexes	kernel/rtmutex-tester.c	/^static struct rt_mutex mutexes[MAX_RT_TEST_MUTEXES];$/;"	v	typeref:struct:rt_mutex	file:
mx_sb_len	fs/compat_ioctl.c	/^	unsigned char mx_sb_len;		\/* [i] max length to write to sbp *\/$/;"	m	struct:sg_io_hdr32	file:
mynode	kernel/rcutree.h	/^	struct rcu_node *mynode;	\/* This CPU's leaf of hierarchy *\/$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_node
n	fs/compat.c	/^	compat_ulong_t n;$/;"	m	struct:compat_sel_arg_struct	file:
n	fs/select.c	/^	unsigned long n;$/;"	m	struct:sel_arg_struct	file:
n	kernel/resource.c	/^	resource_size_t n;$/;"	m	struct:region_devres	file:
n_balk_blkd_tasks	kernel/rcutiny_plugin.h	/^	unsigned long n_balk_blkd_tasks;$/;"	m	struct:rcu_preempt_ctrlblk
n_balk_blkd_tasks	kernel/rcutree.h	/^	unsigned long n_balk_blkd_tasks;$/;"	m	struct:rcu_node
n_balk_boost_tasks	kernel/rcutiny_plugin.h	/^	unsigned long n_balk_boost_tasks;$/;"	m	struct:rcu_preempt_ctrlblk
n_balk_boost_tasks	kernel/rcutree.h	/^	unsigned long n_balk_boost_tasks;$/;"	m	struct:rcu_node
n_balk_exp_gp_tasks	kernel/rcutiny_plugin.h	/^	unsigned long n_balk_exp_gp_tasks;$/;"	m	struct:rcu_preempt_ctrlblk
n_balk_exp_gp_tasks	kernel/rcutree.h	/^	unsigned long n_balk_exp_gp_tasks;$/;"	m	struct:rcu_node
n_balk_nos	kernel/rcutiny_plugin.h	/^	unsigned long n_balk_nos;$/;"	m	struct:rcu_preempt_ctrlblk
n_balk_nos	kernel/rcutree.h	/^	unsigned long n_balk_nos;$/;"	m	struct:rcu_node
n_balk_notblocked	kernel/rcutree.h	/^	unsigned long n_balk_notblocked;$/;"	m	struct:rcu_node
n_balk_notyet	kernel/rcutiny_plugin.h	/^	unsigned long n_balk_notyet;$/;"	m	struct:rcu_preempt_ctrlblk
n_balk_notyet	kernel/rcutree.h	/^	unsigned long n_balk_notyet;$/;"	m	struct:rcu_node
n_barrier_attempts	kernel/rcutorture.c	/^static long n_barrier_attempts;$/;"	v	file:
n_barrier_cbs	kernel/rcutorture.c	/^static int n_barrier_cbs;	\/* Number of callbacks to test RCU barriers. *\/$/;"	v	file:
n_barrier_done	kernel/rcutree.h	/^	unsigned long n_barrier_done;		\/* ++ at start and end of *\/$/;"	m	struct:rcu_state
n_barrier_successes	kernel/rcutorture.c	/^static long n_barrier_successes;$/;"	v	file:
n_cbs_adopted	kernel/rcutree.h	/^	unsigned long   n_cbs_adopted;  \/* RCU cbs adopted from dying CPU *\/$/;"	m	struct:rcu_data
n_cbs_invoked	kernel/rcutree.h	/^	unsigned long	n_cbs_invoked;	\/* count of RCU cbs invoked. *\/$/;"	m	struct:rcu_data
n_cbs_orphaned	kernel/rcutree.h	/^	unsigned long   n_cbs_orphaned; \/* RCU cbs orphaned by dying CPU *\/$/;"	m	struct:rcu_data
n_exp_boosts	kernel/rcutiny_plugin.h	/^	unsigned long n_exp_boosts;$/;"	m	struct:rcu_preempt_ctrlblk
n_exp_boosts	kernel/rcutree.h	/^	unsigned long n_exp_boosts;$/;"	m	struct:rcu_node
n_force_qs	kernel/rcutree.h	/^	unsigned long n_force_qs;		\/* Number of calls to *\/$/;"	m	struct:rcu_state
n_force_qs_lh	kernel/rcutree.h	/^	unsigned long n_force_qs_lh;		\/* ~Number of calls leaving *\/$/;"	m	struct:rcu_state
n_force_qs_ngp	kernel/rcutree.h	/^	unsigned long n_force_qs_ngp;		\/* Number of calls leaving *\/$/;"	m	struct:rcu_state
n_force_qs_snap	kernel/rcutree.h	/^	unsigned long	n_force_qs_snap;$/;"	m	struct:rcu_data
n_grace_periods	kernel/rcutiny_plugin.h	/^	unsigned long n_grace_periods;$/;"	m	struct:rcu_preempt_ctrlblk
n_nocbs_invoked	kernel/rcutree.h	/^	unsigned long	n_nocbs_invoked; \/* count of no-CBs RCU cbs invoked. *\/$/;"	m	struct:rcu_data
n_normal_boosts	kernel/rcutiny_plugin.h	/^	unsigned long n_normal_boosts;$/;"	m	struct:rcu_preempt_ctrlblk
n_normal_boosts	kernel/rcutree.h	/^	unsigned long n_normal_boosts;$/;"	m	struct:rcu_node
n_offline_attempts	kernel/rcutorture.c	/^static long n_offline_attempts;$/;"	v	file:
n_offline_successes	kernel/rcutorture.c	/^static long n_offline_successes;$/;"	v	file:
n_online_attempts	kernel/rcutorture.c	/^static long n_online_attempts;$/;"	v	file:
n_online_successes	kernel/rcutorture.c	/^static long n_online_successes;$/;"	v	file:
n_rcu_pending	kernel/rcutree.h	/^	unsigned long n_rcu_pending;	\/* rcu_pending() calls since boot. *\/$/;"	m	struct:rcu_data
n_rcu_torture_alloc	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_alloc;$/;"	v	file:
n_rcu_torture_alloc_fail	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_alloc_fail;$/;"	v	file:
n_rcu_torture_barrier_error	kernel/rcutorture.c	/^static long n_rcu_torture_barrier_error;$/;"	v	file:
n_rcu_torture_boost_failure	kernel/rcutorture.c	/^static long n_rcu_torture_boost_failure;$/;"	v	file:
n_rcu_torture_boost_ktrerror	kernel/rcutorture.c	/^static long n_rcu_torture_boost_ktrerror;$/;"	v	file:
n_rcu_torture_boost_rterror	kernel/rcutorture.c	/^static long n_rcu_torture_boost_rterror;$/;"	v	file:
n_rcu_torture_boosts	kernel/rcutorture.c	/^static long n_rcu_torture_boosts;$/;"	v	file:
n_rcu_torture_error	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_error;$/;"	v	file:
n_rcu_torture_free	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_free;$/;"	v	file:
n_rcu_torture_mberror	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_mberror;$/;"	v	file:
n_rcu_torture_timers	kernel/rcutorture.c	/^static long n_rcu_torture_timers;$/;"	v	file:
n_rp_cb_ready	kernel/rcutree.h	/^	unsigned long n_rp_cb_ready;$/;"	m	struct:rcu_data
n_rp_cpu_needs_gp	kernel/rcutree.h	/^	unsigned long n_rp_cpu_needs_gp;$/;"	m	struct:rcu_data
n_rp_gp_completed	kernel/rcutree.h	/^	unsigned long n_rp_gp_completed;$/;"	m	struct:rcu_data
n_rp_gp_started	kernel/rcutree.h	/^	unsigned long n_rp_gp_started;$/;"	m	struct:rcu_data
n_rp_need_nothing	kernel/rcutree.h	/^	unsigned long n_rp_need_nothing;$/;"	m	struct:rcu_data
n_rp_qs_pending	kernel/rcutree.h	/^	unsigned long n_rp_qs_pending;$/;"	m	struct:rcu_data
n_rp_report_qs	kernel/rcutree.h	/^	unsigned long n_rp_report_qs;$/;"	m	struct:rcu_data
n_tasks_boosted	kernel/rcutiny_plugin.h	/^	unsigned long n_tasks_boosted;$/;"	m	struct:rcu_preempt_ctrlblk
n_tasks_boosted	kernel/rcutree.h	/^	unsigned long n_tasks_boosted;$/;"	m	struct:rcu_node
name	fs/binfmt_elf.c	/^	const char *name;$/;"	m	struct:memelfnote	file:
name	fs/binfmt_elf_fdpic.c	/^	const char *name;$/;"	m	struct:memelfnote	file:
name	fs/binfmt_misc.c	/^	char *name;$/;"	m	struct:__anon25	file:
name	fs/bio-integrity.c	/^	char name[8];$/;"	m	struct:integrity_slab	file:
name	fs/bio.c	/^	char name[8];$/;"	m	struct:bio_slab	file:
name	fs/char_dev.c	/^	char name[64];$/;"	m	struct:char_device_struct	file:
name	fs/ext3/dir.c	/^	char		name[0];$/;"	m	struct:fname	file:
name	fs/ext3/ext3.h	/^	char	name[EXT3_NAME_LEN];	\/* File name *\/$/;"	m	struct:ext3_dir_entry
name	fs/ext3/ext3.h	/^	char	name[EXT3_NAME_LEN];	\/* File name *\/$/;"	m	struct:ext3_dir_entry_2
name	fs/ext3/xattr.c	/^	const char *name;$/;"	m	struct:ext3_xattr_info	file:
name	kernel/auditsc.c	/^	struct filename	*name;$/;"	m	struct:audit_names	typeref:struct:audit_names::filename	file:
name	kernel/cgroup.c	/^	char *name;$/;"	m	struct:cgroup_sb_opts	file:
name	kernel/cgroup.c	/^	char name[MAX_CGROUP_ROOT_NAMELEN];$/;"	m	struct:cgroupfs_root	file:
name	kernel/kallsyms.c	/^	char name[KSYM_NAME_LEN];$/;"	m	struct:kallsym_iter	file:
name	kernel/module.c	/^	char *name;$/;"	m	struct:module_sect_attr	file:
name	kernel/module.c	/^	const char *name;$/;"	m	struct:find_symbol_arg	file:
name	kernel/pid_namespace.c	/^	char name[16];$/;"	m	struct:pid_cache	file:
name	kernel/printk.c	/^	char	name[8];			\/* Name of the driver	    *\/$/;"	m	struct:console_cmdline	file:
name	kernel/rcutorture.c	/^	char *name;$/;"	m	struct:rcu_torture_ops	file:
name	kernel/rcutree.h	/^	char *name;				\/* Name of structure. *\/$/;"	m	struct:rcu_state
name	kernel/sysctl_binary.c	/^	compat_uptr_t	name;$/;"	m	struct:compat_sysctl_args	file:
name	kernel/tracepoint.c	/^	char name[0];$/;"	m	struct:tracepoint_entry	file:
name	kernel/workqueue.c	/^	char			name[];		\/* I: workqueue name *\/$/;"	m	struct:workqueue_struct	file:
name	mm/dmapool.c	/^	char name[32];$/;"	m	struct:dma_pool	file:
name	mm/slab.c	/^	char *name;$/;"	m	struct:cache_names	file:
name	mm/slub.c	/^	const char *name;$/;"	m	struct:saved_alias	file:
name_count	kernel/auditsc.c	/^	int		    name_count; \/* total records in names_list *\/$/;"	m	struct:audit_context	file:
name_dma	mm/slab.c	/^	char *name_dma;$/;"	m	struct:cache_names	file:
name_index	fs/ext3/xattr.c	/^	int name_index;$/;"	m	struct:ext3_xattr_info	file:
name_len	fs/ext3/dir.c	/^	__u8		name_len;$/;"	m	struct:fname	file:
name_len	fs/ext3/ext3.h	/^	__le16	name_len;		\/* Name length *\/$/;"	m	struct:ext3_dir_entry
name_len	fs/ext3/ext3.h	/^	__u8	name_len;		\/* Name length *\/$/;"	m	struct:ext3_dir_entry_2
name_len	fs/ext3/namei.c	/^	u8 name_len;$/;"	m	struct:fake_dirent	file:
name_len	kernel/auditsc.c	/^	int			name_len;	\/* number of name's characters to log *\/$/;"	m	struct:audit_names	file:
name_put	kernel/auditsc.c	/^	bool			name_put;	\/* call __putname() for this name *\/$/;"	m	struct:audit_names	file:
nameoff	kernel/kallsyms.c	/^	unsigned int nameoff; \/* If iterating in core kernel symbols. *\/$/;"	m	struct:kallsym_iter	file:
names	fs/ext3/namei.c	/^	unsigned names;$/;"	m	struct:stats	file:
names_cachep	fs/dcache.c	/^EXPORT_SYMBOL(names_cachep);$/;"	v
names_list	kernel/auditsc.c	/^	struct list_head    names_list;	\/* anchor for struct audit_names->list *\/$/;"	m	struct:audit_context	typeref:struct:audit_context::list_head	file:
namespace_sem	fs/namespace.c	/^static struct rw_semaphore namespace_sem;$/;"	v	typeref:struct:rw_semaphore	file:
nargs	kernel/auditsc.c	/^			int nargs;$/;"	m	struct:audit_context::__anon43::__anon44	file:
native	fs/exec.c	/^		const char __user *const __user *native;$/;"	m	union:user_arg_ptr::__anon27	file:
ncp_fd	fs/compat.c	/^	compat_uint_t ncp_fd;$/;"	m	struct:compat_ncp_mount_data	file:
ncp_fd	fs/compat.c	/^	compat_uint_t ncp_fd;$/;"	m	struct:compat_ncp_mount_data_v4	file:
nd	mm/memory-failure.c	/^	struct list_head nd;$/;"	m	struct:to_kill	typeref:struct:to_kill::list_head	file:
nd_jump_link	fs/namei.c	/^void nd_jump_link(struct nameidata *nd, struct path *path)$/;"	f
nearest_hardwall_ancestor	kernel/cpuset.c	/^static const struct cpuset *nearest_hardwall_ancestor(const struct cpuset *cs)$/;"	f	file:
need_more_worker	kernel/workqueue.c	/^static bool need_more_worker(struct worker_pool *pool)$/;"	f	file:
need_reserve_slab_rcu	mm/slub.c	1417;"	d	file:
need_to_create_worker	kernel/workqueue.c	/^static bool need_to_create_worker(struct worker_pool *pool)$/;"	f	file:
need_to_manage_workers	kernel/workqueue.c	/^static bool need_to_manage_workers(struct worker_pool *pool)$/;"	f	file:
need_update	kernel/tracepoint.c	/^static int need_update;$/;"	v	file:
needcheck	kernel/acct.c	/^	unsigned long		needcheck;$/;"	m	struct:bsd_acct_struct	file:
neg_one	kernel/sysctl.c	/^static int neg_one = -1;$/;"	v	file:
nested_call_node	fs/eventpoll.c	/^struct nested_call_node {$/;"	s	file:
nested_calls	fs/eventpoll.c	/^struct nested_calls {$/;"	s	file:
nested_symlink	fs/namei.c	/^static inline int nested_symlink(struct path *path, struct nameidata *nd)$/;"	f	file:
new	mm/slab.c	/^	struct array_cache *new[0];$/;"	m	struct:ccupdate_struct	typeref:struct:ccupdate_struct::array_cache	file:
new_idmap_permitted	kernel/user_namespace.c	/^static bool new_idmap_permitted(const struct file *file, $/;"	f	file:
new_inode	fs/inode.c	/^EXPORT_SYMBOL(new_inode);$/;"	v
new_inode	fs/inode.c	/^struct inode *new_inode(struct super_block *sb)$/;"	f
new_inode_pseudo	fs/inode.c	/^struct inode *new_inode_pseudo(struct super_block *sb)$/;"	f
new_log_buf_len	kernel/printk.c	/^static unsigned long __initdata new_log_buf_len;$/;"	v	file:
new_node_page	mm/mempolicy.c	/^static struct page *new_node_page(struct page *page, unsigned long node, int **x)$/;"	f	file:
new_page	mm/memory-failure.c	/^static struct page *new_page(struct page *p, unsigned long private, int **x)$/;"	f	file:
new_page_node	mm/migrate.c	/^static struct page *new_page_node(struct page *p, unsigned long private,$/;"	f	file:
new_pcap	kernel/auditsc.c	/^	struct audit_cap_data	new_pcap;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_cap_data	file:
new_root	kernel/cgroup.c	/^	struct cgroupfs_root *new_root;$/;"	m	struct:cgroup_sb_opts	typeref:struct:cgroup_sb_opts::cgroupfs_root	file:
new_slab	mm/slub.c	/^static struct page *new_slab(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
new_slab_objects	mm/slub.c	/^static inline void *new_slab_objects(struct kmem_cache *s, gfp_t flags,$/;"	f	file:
new_vma_page	mm/mempolicy.c	/^static struct page *new_vma_page(struct page *page, unsigned long private, int **x)$/;"	f	file:
new_vmap_block	mm/vmalloc.c	/^static struct vmap_block *new_vmap_block(gfp_t gfp_mask)$/;"	f	file:
newlen	kernel/sysctl_binary.c	/^	compat_size_t	newlen;$/;"	m	struct:compat_sysctl_args	file:
newval	kernel/sysctl_binary.c	/^	compat_uptr_t	newval;$/;"	m	struct:compat_sysctl_args	file:
next	fs/binfmt_elf.c	/^	struct elf_thread_core_info *next;$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::elf_thread_core_info	file:
next	fs/char_dev.c	/^	struct char_device_struct *next;$/;"	m	struct:char_device_struct	typeref:struct:char_device_struct::char_device_struct	file:
next	fs/dcookies.c	/^	struct list_head next;$/;"	m	struct:dcookie_user	typeref:struct:dcookie_user::list_head	file:
next	fs/eventpoll.c	/^	struct epitem *next;$/;"	m	struct:epitem	typeref:struct:epitem::epitem	file:
next	fs/ext3/dir.c	/^	struct fname	*next;$/;"	m	struct:fname	typeref:struct:fname::fname	file:
next	fs/file.c	/^	struct fdtable *next;$/;"	m	struct:fdtable_defer	typeref:struct:fdtable_defer::fdtable	file:
next	fs/select.c	/^	struct poll_list *next;$/;"	m	struct:poll_list	typeref:struct:poll_list::poll_list	file:
next	fs/select.c	/^	struct poll_table_page * next;$/;"	m	struct:poll_table_page	typeref:struct:poll_table_page::poll_table_page	file:
next	kernel/auditsc.c	/^	struct audit_aux_data	*next;$/;"	m	struct:audit_aux_data	typeref:struct:audit_aux_data::audit_aux_data	file:
next	kernel/auditsc.c	/^	struct audit_tree_refs *next;$/;"	m	struct:audit_tree_refs	typeref:struct:audit_tree_refs::audit_tree_refs	file:
next	kernel/jump_label.c	/^	struct static_key_mod *next;$/;"	m	struct:static_key_mod	typeref:struct:static_key_mod::static_key_mod	file:
next	mm/shmem.c	/^	pgoff_t next;		\/* the next page offset to be fallocated *\/$/;"	m	struct:shmem_falloc	file:
next	mm/slub.c	/^	struct saved_alias *next;$/;"	m	struct:saved_alias	typeref:struct:saved_alias::saved_alias	file:
next_active_pageblock	mm/memory_hotplug.c	/^static struct page *next_active_pageblock(struct page *page)$/;"	f	file:
next_arg	kernel/params.c	/^static char *next_arg(char *args, char **param, char **val)$/;"	f	file:
next_block_for_io	fs/direct-io.c	/^	sector_t next_block_for_io;	\/* next block to be put under IO,$/;"	m	struct:dio_submit	file:
next_cookie	kernel/async.c	/^static async_cookie_t next_cookie = 1;$/;"	v	file:
next_hash	fs/ext3/ext3.h	/^	__u32		next_hash;$/;"	m	struct:dir_private_info
next_hierarchy_id	kernel/cgroup.c	/^static int next_hierarchy_id;$/;"	v	file:
next_mnt	fs/namespace.c	/^static struct mount *next_mnt(struct mount *p, struct mount *root)$/;"	f	file:
next_node_allowed	mm/hugetlb.c	/^static int next_node_allowed(int nid, nodemask_t *nodes_allowed)$/;"	f	file:
next_online_pgdat	mm/mmzone.c	/^struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)$/;"	f
next_peer	fs/pnode.c	/^static inline struct mount *next_peer(struct mount *p)$/;"	f	file:
next_pidmap	kernel/pid.c	/^int next_pidmap(struct pid_namespace *pid_ns, unsigned int last)$/;"	f
next_reap	mm/slab.c	/^	unsigned long next_reap;	\/* updated without locking *\/$/;"	m	struct:kmem_list3	file:
next_reap_node	mm/slab.c	/^static void next_reap_node(void)$/;"	f	file:
next_reap_node	mm/slab.c	878;"	d	file:
next_signal	kernel/signal.c	/^int next_signal(struct sigpending *pending, sigset_t *mask)$/;"	f
next_slave	fs/pnode.c	/^static inline struct mount *next_slave(struct mount *p)$/;"	f	file:
next_string	kernel/module.c	/^static char *next_string(char *string, unsigned long *secsize)$/;"	f	file:
next_tid	mm/slub.c	/^static inline unsigned long next_tid(unsigned long tid)$/;"	f	file:
next_timer	kernel/timer.c	/^	unsigned long next_timer;$/;"	m	struct:tvec_base	file:
next_vma	fs/binfmt_elf.c	/^static struct vm_area_struct *next_vma(struct vm_area_struct *this_vma,$/;"	f	file:
next_zone	mm/mmzone.c	/^struct zone *next_zone(struct zone *zone)$/;"	f
next_zones_zonelist	mm/mmzone.c	/^struct zoneref *next_zones_zonelist(struct zoneref *z,$/;"	f
nexttail	kernel/rcutiny_plugin.h	/^	struct rcu_head **nexttail;$/;"	m	struct:rcu_preempt_ctrlblk	typeref:struct:rcu_preempt_ctrlblk::rcu_head
nfakewriters	kernel/rcutorture.c	/^static int nfakewriters = 4;	\/* # fake writer threads *\/$/;"	v	file:
ngarbage	kernel/kprobes.c	/^	int ngarbage;$/;"	m	struct:kprobe_insn_page	file:
ngroups_max	kernel/sysctl.c	/^static int ngroups_max = NGROUPS_MAX;$/;"	v	file:
nid	mm/ksm.c	/^		int nid;		\/* when node of unstable tree *\/$/;"	m	union:rmap_item::__anon6	file:
nid	mm/ksm.c	/^	int nid;$/;"	m	struct:stable_node	file:
nlen	kernel/sysctl_binary.c	/^	int		nlen;$/;"	m	struct:compat_sysctl_args	file:
nmsgs	fs/compat_ioctl.c	/^	u32 nmsgs;$/;"	m	struct:i2c_rdwr_ioctl_data32	file:
no_blink	kernel/panic.c	/^static long no_blink(int state)$/;"	f	file:
no_blkdev_open	fs/no-block.c	/^static int no_blkdev_open(struct inode * inode, struct file * filp)$/;"	f	file:
no_llseek	fs/read_write.c	/^EXPORT_SYMBOL(no_llseek);$/;"	v
no_llseek	fs/read_write.c	/^loff_t no_llseek(struct file *file, loff_t offset, int whence)$/;"	f
noaliencache_setup	mm/slab.c	/^static int __init noaliencache_setup(char *s)$/;"	f	file:
nobh_truncate_page	fs/buffer.c	/^EXPORT_SYMBOL(nobh_truncate_page);$/;"	v
nobh_truncate_page	fs/buffer.c	/^int nobh_truncate_page(struct address_space *mapping,$/;"	f
nobh_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(nobh_write_begin);$/;"	v
nobh_write_begin	fs/buffer.c	/^int nobh_write_begin(struct address_space *mapping,$/;"	f
nobh_write_end	fs/buffer.c	/^EXPORT_SYMBOL(nobh_write_end);$/;"	v
nobh_write_end	fs/buffer.c	/^int nobh_write_end(struct file *file, struct address_space *mapping,$/;"	f
nobh_writepage	fs/buffer.c	/^EXPORT_SYMBOL(nobh_writepage);$/;"	v
nobh_writepage	fs/buffer.c	/^int nobh_writepage(struct page *page, get_block_t *get_block,$/;"	f
nocb_buf	kernel/rcutree_plugin.h	/^static char __initdata nocb_buf[NR_CPUS * 5];$/;"	v
nocb_cpu_expendable	kernel/rcutree_plugin.h	/^static bool nocb_cpu_expendable(int cpu)$/;"	f
nocb_head	kernel/rcutree.h	/^	struct rcu_head *nocb_head;	\/* CBs waiting for kthread. *\/$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
nocb_kthread	kernel/rcutree.h	/^	struct task_struct *nocb_kthread;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::task_struct
nocb_p_count	kernel/rcutree.h	/^	int nocb_p_count;		\/* # CBs being invoked by kthread *\/$/;"	m	struct:rcu_data
nocb_p_count_lazy	kernel/rcutree.h	/^	int nocb_p_count_lazy;		\/*  (approximate). *\/$/;"	m	struct:rcu_data
nocb_q_count	kernel/rcutree.h	/^	atomic_long_t nocb_q_count;	\/* # CBs waiting for kthread *\/$/;"	m	struct:rcu_data
nocb_q_count_lazy	kernel/rcutree.h	/^	atomic_long_t nocb_q_count_lazy; \/*  (approximate). *\/$/;"	m	struct:rcu_data
nocb_tail	kernel/rcutree.h	/^	struct rcu_head **nocb_tail;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
nocb_wq	kernel/rcutree.h	/^	wait_queue_head_t nocb_wq;	\/* For nocb kthreads to sleep on. *\/$/;"	m	struct:rcu_data
nocpu_base	mm/memcontrol.c	/^	struct mem_cgroup_stat_cpu nocpu_base;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mem_cgroup_stat_cpu	file:
node	kernel/audit_tree.c	/^	struct node {$/;"	s	struct:audit_chunk	file:
node	kernel/cgroup.c	/^	struct list_head		node;$/;"	m	struct:cfent	typeref:struct:cfent::list_head	file:
node	kernel/kthread.c	/^	int node;$/;"	m	struct:kthread_create_info	file:
node	kernel/rcutree.h	/^	struct rcu_node node[NUM_RCU_NODES];	\/* Hierarchy. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_node
node	mm/kmemleak.c	/^	struct hlist_node node;$/;"	m	struct:kmemleak_scan_area	typeref:struct:kmemleak_scan_area::hlist_node	file:
node	mm/ksm.c	/^		struct rb_node node;	\/* when node of stable tree *\/$/;"	m	union:stable_node::__anon4	typeref:struct:stable_node::__anon4::rb_node	file:
node	mm/ksm.c	/^		struct rb_node node;	\/* when node of unstable tree *\/$/;"	m	union:rmap_item::__anon7	typeref:struct:rmap_item::__anon7::rb_node	file:
node	mm/migrate.c	/^	int node;$/;"	m	struct:page_to_node	file:
node_hstate	mm/hugetlb.c	/^struct node_hstate {$/;"	s	file:
node_hstates	mm/hugetlb.c	/^struct node_hstate node_hstates[MAX_NUMNODES];$/;"	v	typeref:struct:node_hstate
node_load	mm/page_alloc.c	/^static int node_load[MAX_NUMNODES];$/;"	v	file:
node_map_pfn_alignment	mm/page_alloc.c	/^unsigned long __init node_map_pfn_alignment(void)$/;"	f
node_match	mm/slub.c	/^static inline int node_match(struct page *page, int node)$/;"	f	file:
node_memmap_size_bytes	mm/sparse.c	/^unsigned long __init node_memmap_size_bytes(int nid, unsigned long start_pfn,$/;"	f
node_nr_objs	mm/slub.c	/^static inline unsigned long node_nr_objs(struct kmem_cache_node *n)$/;"	f	file:
node_nr_slabs	mm/slub.c	/^static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)$/;"	f	file:
node_order	mm/page_alloc.c	/^static int node_order[MAX_NUMNODES];$/;"	v	file:
node_random	mm/mempolicy.c	/^int node_random(const nodemask_t *maskp)$/;"	f
node_states	mm/page_alloc.c	/^EXPORT_SYMBOL(node_states);$/;"	v
node_states_check_changes_offline	mm/memory_hotplug.c	/^static void node_states_check_changes_offline(unsigned long nr_pages,$/;"	f	file:
node_states_check_changes_online	mm/memory_hotplug.c	/^static void node_states_check_changes_online(unsigned long nr_pages,$/;"	f	file:
node_states_clear_node	mm/memory_hotplug.c	/^static void node_states_clear_node(int node, struct memory_notify *arg)$/;"	f	file:
node_states_set_node	mm/memory_hotplug.c	/^static void node_states_set_node(int node, struct memory_notify *arg)$/;"	f	file:
node_to_va	mm/vmalloc.c	/^static struct vmap_area *node_to_va(struct rb_node *n)$/;"	f	file:
nodeid	mm/slab.c	/^			unsigned short nodeid;$/;"	m	struct:slab::__anon18::__anon19	file:
nodeinfo	mm/memcontrol.c	/^	struct mem_cgroup_per_node *nodeinfo[0];$/;"	m	struct:mem_cgroup_lru_info	typeref:struct:mem_cgroup_lru_info::mem_cgroup_per_node	file:
nodemask	mm/vmscan.c	/^	nodemask_t	*nodemask;$/;"	m	struct:scan_control	file:
nodes	lib/radix-tree.c	/^	struct radix_tree_node *nodes[RADIX_TREE_PRELOAD_SIZE];$/;"	m	struct:radix_tree_preload	typeref:struct:radix_tree_preload::radix_tree_node	file:
nodes	mm/slub.c	/^	nodemask_t nodes;$/;"	m	struct:location	file:
nommu_region_sem	mm/nommu.c	/^DECLARE_RWSEM(nommu_region_sem);$/;"	v
nommu_region_tree	mm/nommu.c	/^struct rb_root nommu_region_tree = RB_ROOT;$/;"	v	typeref:struct:rb_root
nommu_shrink_inode_mappings	mm/nommu.c	/^int nommu_shrink_inode_mappings(struct inode *inode, size_t size,$/;"	f
none	kernel/cgroup.c	/^	bool none;$/;"	m	struct:cgroup_sb_opts	file:
nonlazy_posted	kernel/rcutree.h	/^	unsigned long nonlazy_posted;$/;"	m	struct:rcu_dynticks
nonlazy_posted_snap	kernel/rcutree.h	/^	unsigned long nonlazy_posted_snap;$/;"	m	struct:rcu_dynticks
nonseekable_open	fs/open.c	/^EXPORT_SYMBOL(nonseekable_open);$/;"	v
nonseekable_open	fs/open.c	/^int nonseekable_open(struct inode *inode, struct file *filp)$/;"	f
noop_backing_dev_info	mm/backing-dev.c	/^EXPORT_SYMBOL_GPL(noop_backing_dev_info);$/;"	v
noop_backing_dev_info	mm/backing-dev.c	/^struct backing_dev_info noop_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info
noop_count	kernel/lockdep.c	/^static int noop_count(struct lock_list *entry, void *data)$/;"	f	file:
noop_fsync	fs/libfs.c	/^EXPORT_SYMBOL(noop_fsync);$/;"	v
noop_fsync	fs/libfs.c	/^int noop_fsync(struct file *file, loff_t start, loff_t end, int datasync)$/;"	f
noop_llseek	fs/read_write.c	/^EXPORT_SYMBOL(noop_llseek);$/;"	v
noop_llseek	fs/read_write.c	/^loff_t noop_llseek(struct file *file, loff_t offset, int whence)$/;"	f
nosmp	kernel/smp.c	/^static int __init nosmp(char *str)$/;"	f	file:
nosoftlockup_setup	kernel/watchdog.c	/^static int __init nosoftlockup_setup(char *str)$/;"	f	file:
not_found	fs/ext3/xattr.c	/^	int not_found;$/;"	m	struct:ext3_xattr_search	file:
not_in_range	kernel/lockdep.c	/^static inline int not_in_range(const void* mem_from, unsigned long mem_len,$/;"	f	file:
notask_error	kernel/exit.c	/^	int			notask_error;$/;"	m	struct:wait_opts	file:
note_cmpxchg_failure	mm/slub.c	/^static inline void note_cmpxchg_failure(const char *n,$/;"	f	file:
note_new_gpnum	kernel/rcutree.c	/^static void note_new_gpnum(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
notes	fs/binfmt_elf.c	/^	struct memelfnote *notes;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
notes	fs/binfmt_elf.c	/^	struct memelfnote notes[0];$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::memelfnote	file:
notes	fs/binfmt_elf.c	/^	struct memelfnote notes[3];$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::memelfnote	file:
notes	fs/binfmt_elf_fdpic.c	/^	struct memelfnote notes[3];$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::memelfnote	file:
notes	kernel/module.c	/^	unsigned int notes;$/;"	m	struct:module_notes_attrs	file:
notes_attr	kernel/ksysfs.c	/^static struct bin_attribute notes_attr = {$/;"	v	typeref:struct:bin_attribute	file:
notes_read	kernel/ksysfs.c	/^static ssize_t notes_read(struct file *filp, struct kobject *kobj,$/;"	f	file:
notes_size	kernel/ksysfs.c	165;"	d	file:
notesize	fs/binfmt_elf.c	/^static int notesize(struct memelfnote *en)$/;"	f	file:
notesize	fs/binfmt_elf_fdpic.c	/^static int notesize(struct memelfnote *en)$/;"	f	file:
notifier_call_chain	kernel/notifier.c	/^static int __kprobes notifier_call_chain(struct notifier_block **nl,$/;"	f	file:
notifier_chain_cond_register	kernel/notifier.c	/^static int notifier_chain_cond_register(struct notifier_block **nl,$/;"	f	file:
notifier_chain_register	kernel/notifier.c	/^static int notifier_chain_register(struct notifier_block **nl,$/;"	f	file:
notifier_chain_unregister	kernel/notifier.c	/^static int notifier_chain_unregister(struct notifier_block **nl,$/;"	f	file:
notify_change	fs/attr.c	/^EXPORT_SYMBOL(notify_change);$/;"	v
notify_change	fs/attr.c	/^int notify_change(struct dentry * dentry, struct iattr * attr)$/;"	f
notify_cpu_starting	kernel/cpu.c	/^void __cpuinit notify_cpu_starting(unsigned int cpu)$/;"	f
notify_die	kernel/notifier.c	/^int notrace __kprobes notify_die(enum die_val val, const char *str,$/;"	f
notify_on_release	kernel/cgroup.c	/^static int notify_on_release(const struct cgroup *cgrp)$/;"	f	file:
nowatchdog_setup	kernel/watchdog.c	/^static int __init nowatchdog_setup(char *str)$/;"	f	file:
nr	fs/buffer.c	/^	int nr;			\/* Number of live bh's *\/$/;"	m	struct:bh_accounting	file:
nr	lib/radix-tree.c	/^	int nr;$/;"	m	struct:radix_tree_preload	file:
nr_active	kernel/workqueue.c	/^	int			nr_active;	\/* L: nr of active works *\/$/;"	m	struct:pool_workqueue	file:
nr_all_pages	mm/page_alloc.c	/^static unsigned long __meminitdata nr_all_pages;$/;"	v	file:
nr_bdi_congested	mm/backing-dev.c	/^static atomic_t nr_bdi_congested[2];$/;"	v	file:
nr_blockdev_pages	fs/block_dev.c	/^long nr_blockdev_pages(void)$/;"	f
nr_blocks	mm/scm.h	/^	unsigned long nr_blocks;	$/;"	m	struct:__anon13
nr_chain_hlocks	kernel/lockdep.c	/^int nr_chain_hlocks;$/;"	v
nr_cpu_ids	kernel/smp.c	/^EXPORT_SYMBOL(nr_cpu_ids);$/;"	v
nr_cyclic_check_recursions	kernel/lockdep_internals.h	/^	int	nr_cyclic_check_recursions;$/;"	m	struct:lockdep_stats
nr_cyclic_checks	kernel/lockdep_internals.h	/^	int	nr_cyclic_checks;$/;"	m	struct:lockdep_stats
nr_drainers	kernel/workqueue.c	/^	int			nr_drainers;	\/* W: drain in progress *\/$/;"	m	struct:workqueue_struct	file:
nr_falloced	mm/shmem.c	/^	pgoff_t nr_falloced;	\/* how many new pages have been fallocated *\/$/;"	m	struct:shmem_falloc	file:
nr_find_usage_backwards_checks	kernel/lockdep_internals.h	/^	int	nr_find_usage_backwards_checks;$/;"	m	struct:lockdep_stats
nr_find_usage_backwards_recursions	kernel/lockdep_internals.h	/^	int	nr_find_usage_backwards_recursions;$/;"	m	struct:lockdep_stats
nr_find_usage_forwards_checks	kernel/lockdep_internals.h	/^	int	nr_find_usage_forwards_checks;$/;"	m	struct:lockdep_stats
nr_find_usage_forwards_recursions	kernel/lockdep_internals.h	/^	int	nr_find_usage_forwards_recursions;$/;"	m	struct:lockdep_stats
nr_free_buffer_pages	mm/page_alloc.c	/^EXPORT_SYMBOL_GPL(nr_free_buffer_pages);$/;"	v
nr_free_buffer_pages	mm/page_alloc.c	/^unsigned long nr_free_buffer_pages(void)$/;"	f
nr_free_highpages	mm/highmem.c	/^unsigned int nr_free_highpages (void)$/;"	f
nr_free_pagecache_pages	mm/page_alloc.c	/^unsigned long nr_free_pagecache_pages(void)$/;"	f
nr_free_zone_pages	mm/page_alloc.c	/^static unsigned long nr_free_zone_pages(int offset)$/;"	f	file:
nr_freepages	mm/internal.h	/^	unsigned long nr_freepages;	\/* Number of isolated free pages *\/$/;"	m	struct:compact_control
nr_garbage	kernel/kprobes.c	/^	int nr_garbage;$/;"	m	struct:kprobe_insn_cache	file:
nr_hardirq_chains	kernel/lockdep.c	/^unsigned int nr_hardirq_chains;$/;"	v
nr_hugepages	mm/hugetlb.c	/^HSTATE_ATTR(nr_hugepages);$/;"	v
nr_hugepages_mempolicy	mm/hugetlb.c	/^HSTATE_ATTR(nr_hugepages_mempolicy);$/;"	v
nr_hugepages_mempolicy_show	mm/hugetlb.c	/^static ssize_t nr_hugepages_mempolicy_show(struct kobject *kobj,$/;"	f	file:
nr_hugepages_mempolicy_store	mm/hugetlb.c	/^static ssize_t nr_hugepages_mempolicy_store(struct kobject *kobj,$/;"	f	file:
nr_hugepages_show	mm/hugetlb.c	/^static ssize_t nr_hugepages_show(struct kobject *kobj,$/;"	f	file:
nr_hugepages_show_common	mm/hugetlb.c	/^static ssize_t nr_hugepages_show_common(struct kobject *kobj,$/;"	f	file:
nr_hugepages_store	mm/hugetlb.c	/^static ssize_t nr_hugepages_store(struct kobject *kobj,$/;"	f	file:
nr_hugepages_store_common	mm/hugetlb.c	/^static ssize_t nr_hugepages_store_common(bool obey_mempolicy,$/;"	f	file:
nr_idle	kernel/workqueue.c	/^	int			nr_idle;	\/* L: currently idle ones *\/$/;"	m	struct:worker_pool	file:
nr_ids	kernel/pid_namespace.c	/^	int nr_ids;$/;"	m	struct:pid_cache	file:
nr_in_flight	kernel/workqueue.c	/^	int			nr_in_flight[WORK_NR_COLORS];$/;"	m	struct:pool_workqueue	file:
nr_kernel_pages	mm/page_alloc.c	/^static unsigned long __meminitdata nr_kernel_pages;$/;"	v	file:
nr_list_entries	kernel/lockdep.c	/^unsigned long nr_list_entries;$/;"	v
nr_lock_chains	kernel/lockdep.c	/^unsigned long nr_lock_chains;$/;"	v
nr_lock_classes	kernel/lockdep.c	/^unsigned long nr_lock_classes;$/;"	v
nr_migratepages	mm/internal.h	/^	unsigned long nr_migratepages;	\/* Number of pages to migrate *\/$/;"	m	struct:compact_control
nr_node_ids	mm/page_alloc.c	/^EXPORT_SYMBOL(nr_node_ids);$/;"	v
nr_online_nodes	mm/page_alloc.c	/^EXPORT_SYMBOL(nr_online_nodes);$/;"	v
nr_overcommit_hugepages	mm/hugetlb.c	/^HSTATE_ATTR(nr_overcommit_hugepages);$/;"	v
nr_overcommit_hugepages_show	mm/hugetlb.c	/^static ssize_t nr_overcommit_hugepages_show(struct kobject *kobj,$/;"	f	file:
nr_overcommit_hugepages_store	mm/hugetlb.c	/^static ssize_t nr_overcommit_hugepages_store(struct kobject *kobj,$/;"	f	file:
nr_page_events	mm/memcontrol.c	/^	unsigned long nr_page_events;$/;"	m	struct:mem_cgroup_stat_cpu	file:
nr_pages	fs/fs-writeback.c	/^	long nr_pages;$/;"	m	struct:wb_writeback_work	file:
nr_pages	mm/memcontrol.c	/^	unsigned int nr_pages;$/;"	m	struct:memcg_stock_pcp	file:
nr_process_chains	kernel/lockdep.c	/^unsigned int nr_process_chains;$/;"	v
nr_processes	kernel/fork.c	/^int nr_processes(void)$/;"	f
nr_pwqs_to_flush	kernel/workqueue.c	/^	atomic_t		nr_pwqs_to_flush; \/* flush in progress *\/$/;"	m	struct:workqueue_struct	file:
nr_reclaimed	mm/vmscan.c	/^	unsigned long nr_reclaimed;$/;"	m	struct:scan_control	file:
nr_scanned	mm/vmscan.c	/^	unsigned long nr_scanned;$/;"	m	struct:scan_control	file:
nr_sgvecs	fs/bio.c	/^	int nr_sgvecs;$/;"	m	struct:bio_map_data	file:
nr_softirq_chains	kernel/lockdep.c	/^unsigned int nr_softirq_chains;$/;"	v
nr_stack_trace_entries	kernel/lockdep.c	/^unsigned long nr_stack_trace_entries;$/;"	v
nr_swap_pages	mm/swapfile.c	/^atomic_long_t nr_swap_pages;$/;"	v
nr_swapfiles	mm/swapfile.c	/^static unsigned int nr_swapfiles;$/;"	v	file:
nr_threads	kernel/fork.c	/^int nr_threads;			\/* The idle threads do not count.. *\/$/;"	v
nr_to_reclaim	mm/vmscan.c	/^	unsigned long nr_to_reclaim;$/;"	m	struct:scan_control	file:
nr_todo	kernel/stop_machine.c	/^	atomic_t		nr_todo;	\/* nr left to execute *\/$/;"	m	struct:cpu_stop_done	file:
nr_unswapped	mm/shmem.c	/^	pgoff_t nr_unswapped;	\/* how often writepage refused to swap out *\/$/;"	m	struct:shmem_falloc	file:
nr_unused_locks	kernel/lockdep_internals.h	/^	int	nr_unused_locks;$/;"	m	struct:lockdep_stats
nr_vecs	fs/bio-integrity.c	/^	unsigned short nr_vecs;$/;"	m	struct:integrity_slab	file:
nr_workers	kernel/workqueue.c	/^	int			nr_workers;	\/* L: total number of workers *\/$/;"	m	struct:worker_pool	file:
nrcpus	kernel/smp.c	/^static int __init nrcpus(char *str)$/;"	f	file:
nreaders	kernel/rcutorture.c	/^static int nreaders = -1;	\/* # reader threads, defaults to 2*ncpus *\/$/;"	v	file:
nrealreaders	kernel/rcutorture.c	/^static int nrealreaders;$/;"	v	file:
ns	fs/mount.h	/^	struct mnt_namespace *ns;$/;"	m	struct:proc_mounts	typeref:struct:proc_mounts::mnt_namespace
ns	kernel/acct.c	/^	struct pid_namespace	*ns;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::pid_namespace	file:
ns	kernel/cgroup.c	/^	struct { enum cgroup_filetype type; struct pid_namespace *ns; } key;$/;"	m	struct:cgroup_pidlist::__anon54	typeref:struct:cgroup_pidlist::__anon54::pid_namespace	file:
ns_capable	kernel/capability.c	/^EXPORT_SYMBOL(ns_capable);$/;"	v
ns_capable	kernel/capability.c	/^bool ns_capable(struct user_namespace *ns, int cap)$/;"	f
ns_set_super	fs/super.c	/^static int ns_set_super(struct super_block *sb, void *data)$/;"	f	file:
ns_test_super	fs/super.c	/^static int ns_test_super(struct super_block *sb, void *data)$/;"	f	file:
ns_to_timespec	kernel/time.c	/^EXPORT_SYMBOL(ns_to_timespec);$/;"	v
ns_to_timespec	kernel/time.c	/^struct timespec ns_to_timespec(const s64 nsec)$/;"	f
ns_to_timeval	kernel/time.c	/^EXPORT_SYMBOL(ns_to_timeval);$/;"	v
ns_to_timeval	kernel/time.c	/^struct timeval ns_to_timeval(const s64 nsec)$/;"	f
nsec_to_clock_t	kernel/time.c	/^u64 nsec_to_clock_t(u64 x)$/;"	f
nsec_valid	fs/utimes.c	/^static bool nsec_valid(long nsec)$/;"	f	file:
nsecs_to_jiffies	kernel/time.c	/^unsigned long nsecs_to_jiffies(u64 n)$/;"	f
nsecs_to_jiffies64	kernel/time.c	/^u64 nsecs_to_jiffies64(u64 n)$/;"	f
nsections	kernel/module.c	/^	unsigned int nsections;$/;"	m	struct:module_sect_attrs	file:
nsown_capable	kernel/capability.c	/^bool nsown_capable(int cap)$/;"	f
nsproxy_cache_init	kernel/nsproxy.c	/^int __init nsproxy_cache_init(void)$/;"	f
nsproxy_cachep	kernel/nsproxy.c	/^static struct kmem_cache *nsproxy_cachep;$/;"	v	typeref:struct:kmem_cache	file:
num	kernel/params.c	/^	unsigned int num;$/;"	m	struct:module_param_attrs	file:
num_debug	kernel/module.c	/^	unsigned int num_debug;$/;"	m	struct:load_info	file:
num_notes	fs/binfmt_elf.c	/^	int num_notes;$/;"	m	struct:elf_thread_status	file:
num_notes	fs/binfmt_elf_fdpic.c	/^	int num_notes;$/;"	m	struct:elf_thread_status	file:
num_objs	mm/slab.h	/^	unsigned long num_objs;$/;"	m	struct:slabinfo
num_physpages	mm/memory.c	/^EXPORT_SYMBOL(num_physpages);$/;"	v
num_physpages	mm/memory.c	/^unsigned long num_physpages;$/;"	v
num_physpages	mm/nommu.c	/^EXPORT_SYMBOL(num_physpages);$/;"	v
num_physpages	mm/nommu.c	/^unsigned long num_physpages;$/;"	v
num_rcu_lvl	kernel/rcutree.c	/^static int num_rcu_lvl[] = {  \/* Number of rcu_nodes at specified level. *\/$/;"	v	file:
num_slabs	mm/slab.h	/^	unsigned long num_slabs;$/;"	m	struct:slabinfo
num_tests	kernel/test_kprobes.c	/^static int errors, handler_errors, num_tests;$/;"	v	file:
num_threads	kernel/stop_machine.c	/^	unsigned int		num_threads;$/;"	m	struct:stop_machine_data	file:
numa_default_policy	mm/mempolicy.c	/^void numa_default_policy(void)$/;"	f
numa_migrate_prep	mm/memory.c	/^int numa_migrate_prep(struct page *page, struct vm_area_struct *vma,$/;"	f
numa_node	mm/page_alloc.c	/^EXPORT_PER_CPU_SYMBOL(numa_node);$/;"	v
numa_policy_init	mm/mempolicy.c	/^void __init numa_policy_init(void)$/;"	f
numa_zonelist_order	mm/page_alloc.c	/^char numa_zonelist_order[16] = "default";$/;"	v
numa_zonelist_order_handler	mm/page_alloc.c	/^int numa_zonelist_order_handler(ctl_table *table, int write,$/;"	f
numabalancing_override	mm/mempolicy.c	/^static bool __initdata numabalancing_override;$/;"	v	file:
numainfo_events	mm/memcontrol.c	/^	atomic_t	numainfo_events;$/;"	m	struct:mem_cgroup	file:
numainfo_updating	mm/memcontrol.c	/^	atomic_t	numainfo_updating;$/;"	m	struct:mem_cgroup	file:
numamigrate_isolate_page	mm/migrate.c	/^int numamigrate_isolate_page(pg_data_t *pgdat, struct page *page)$/;"	f
numamigrate_update_ratelimit	mm/migrate.c	/^bool numamigrate_update_ratelimit(pg_data_t *pgdat, unsigned long nr_pages)$/;"	f
number_of_cgroups	kernel/cgroup.c	/^	int number_of_cgroups;$/;"	m	struct:cgroupfs_root	file:
numnote	fs/binfmt_elf.c	/^	int numnote;$/;"	m	struct:elf_note_info	file:
nused	kernel/kprobes.c	/^	int nused;$/;"	m	struct:kprobe_insn_page	file:
nwait	fs/eventpoll.c	/^	int nwait;$/;"	m	struct:epitem	file:
nxtcompleted	kernel/rcutree.h	/^	unsigned long	nxtcompleted[RCU_NEXT_SIZE];$/;"	m	struct:rcu_data
nxtlist	kernel/rcutree.h	/^	struct rcu_head *nxtlist;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
nxttail	kernel/rcutree.h	/^	struct rcu_head **nxttail[RCU_NEXT_SIZE];$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
obj-y	fs/Makefile	/^obj-y :=	open.o read_write.o file_table.o super.o \\$/;"	m
obj-y	kernel/Makefile	/^obj-y     = fork.o exec_domain.o panic.o printk.o \\$/;"	m
obj-y	mm/Makefile	/^obj-y			:= filemap.o mempool.o oom_kill.o fadvise.o \\$/;"	m
obj_offset	mm/slab.c	/^static int obj_offset(struct kmem_cache *cachep)$/;"	f	file:
obj_offset	mm/slab.c	478;"	d	file:
obj_to_index	mm/slab.c	/^static inline unsigned int obj_to_index(const struct kmem_cache *cache,$/;"	f	file:
object_cache	mm/kmemleak.c	/^static struct kmem_cache *object_cache;$/;"	v	typeref:struct:kmem_cache	file:
object_err	mm/slub.c	/^static void object_err(struct kmem_cache *s, struct page *page,$/;"	f	file:
object_list	mm/kmemleak.c	/^	struct list_head object_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::list_head	file:
object_no_scan	mm/kmemleak.c	/^static void object_no_scan(unsigned long ptr)$/;"	f	file:
object_size	mm/slub.c	/^SLAB_ATTR_RO(object_size);$/;"	v
object_size_show	mm/slub.c	/^static ssize_t object_size_show(struct kmem_cache *s, char *buf)$/;"	f	file:
object_tree_root	mm/kmemleak.c	/^static struct rb_root object_tree_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
objects	mm/slub.c	/^SLAB_ATTR_RO(objects);$/;"	v
objects_partial	mm/slub.c	/^SLAB_ATTR_RO(objects_partial);$/;"	v
objects_partial_show	mm/slub.c	/^static ssize_t objects_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objects_per_slab	mm/slab.h	/^	unsigned int objects_per_slab;$/;"	m	struct:slabinfo
objects_show	mm/slub.c	/^static ssize_t objects_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objs_per_slab	mm/slub.c	/^SLAB_ATTR_RO(objs_per_slab);$/;"	v
objs_per_slab_show	mm/slub.c	/^static ssize_t objs_per_slab_show(struct kmem_cache *s, char *buf)$/;"	f	file:
offline_fqs	kernel/rcutree.h	/^	unsigned long offline_fqs;	\/* Kicked due to being offline. *\/$/;"	m	struct:rcu_data
offline_isolated_pages	mm/memory_hotplug.c	/^offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
offline_isolated_pages_cb	mm/memory_hotplug.c	/^offline_isolated_pages_cb(unsigned long start, unsigned long nr_pages,$/;"	f	file:
offline_memory_block_cb	mm/memory_hotplug.c	/^static int offline_memory_block_cb(struct memory_block *mem, void *arg)$/;"	f	file:
offline_page_cgroup	mm/page_cgroup.c	/^int __meminit offline_page_cgroup(unsigned long start_pfn,$/;"	f
offline_pages	mm/memory_hotplug.c	/^int offline_pages(unsigned long start_pfn, unsigned long nr_pages)$/;"	f
offs	fs/ext3/namei.c	/^	u16 offs;$/;"	m	struct:dx_map_entry	file:
offset	fs/binfmt_misc.c	/^	int offset;			\/* offset of magic *\/$/;"	m	struct:__anon25	file:
offset	fs/ext3/ext3.h	/^	unsigned long offset;$/;"	m	struct:ext3_iloc
offset	mm/dmapool.c	/^	unsigned int offset;$/;"	m	struct:dma_page	file:
offset	mm/mmap.c	/^	unsigned long offset;$/;"	m	struct:mmap_arg_struct	file:
offset	mm/nommu.c	/^	unsigned long offset;$/;"	m	struct:mmap_arg_struct	file:
offset_il_node	mm/mempolicy.c	/^static unsigned offset_il_node(struct mempolicy *pol,$/;"	f	file:
oflag	kernel/auditsc.c	/^			int			oflag;$/;"	m	struct:audit_context::__anon43::__anon49	file:
old_linux_dirent	fs/readdir.c	/^struct old_linux_dirent {$/;"	s	file:
old_pcap	kernel/auditsc.c	/^	struct audit_cap_data	old_pcap;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_cap_data	file:
old_reloc	fs/binfmt_flat.c	/^void old_reloc(unsigned long rl)$/;"	f
oldchecksum	mm/ksm.c	/^	unsigned int oldchecksum;	\/* when unstable *\/$/;"	m	struct:rmap_item	file:
older_than_this	fs/fs-writeback.c	/^	unsigned long *older_than_this;$/;"	m	struct:wb_writeback_work	file:
oldlenp	kernel/sysctl_binary.c	/^	compat_uptr_t	oldlenp;$/;"	m	struct:compat_sysctl_args	file:
oldval	kernel/sysctl_binary.c	/^	compat_uptr_t	oldval;$/;"	m	struct:compat_sysctl_args	file:
on_each_cpu	kernel/smp.c	/^EXPORT_SYMBOL(on_each_cpu);$/;"	v
on_each_cpu	kernel/smp.c	/^int on_each_cpu(void (*func) (void *info), void *info, int wait)$/;"	f
on_each_cpu_cond	kernel/smp.c	/^EXPORT_SYMBOL(on_each_cpu_cond);$/;"	v
on_each_cpu_cond	kernel/smp.c	/^void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),$/;"	f
on_each_cpu_mask	kernel/smp.c	/^EXPORT_SYMBOL(on_each_cpu_mask);$/;"	v
on_each_cpu_mask	kernel/smp.c	/^void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,$/;"	f
on_freelist	mm/slub.c	/^static int on_freelist(struct kmem_cache *s, struct page *page, void *search)$/;"	f	file:
on_slab_alc_key	mm/slab.c	/^static struct lock_class_key on_slab_alc_key;$/;"	v	typeref:struct:lock_class_key	file:
on_slab_l3_key	mm/slab.c	/^static struct lock_class_key on_slab_l3_key;$/;"	v	typeref:struct:lock_class_key	file:
on_slab_lock_classes	mm/slab.c	/^static inline void on_slab_lock_classes(struct kmem_cache *cachep)$/;"	f	file:
on_slab_lock_classes_node	mm/slab.c	/^static inline void on_slab_lock_classes_node(struct kmem_cache *cachep, int node)$/;"	f	file:
on_slab_lock_classes_node	mm/slab.c	/^static void on_slab_lock_classes_node(struct kmem_cache *cachep, int q)$/;"	f	file:
on_tree	mm/memcontrol.c	/^	bool			on_tree;$/;"	m	struct:mem_cgroup_per_zone	file:
ondemand_readahead	mm/readahead.c	/^ondemand_readahead(struct address_space *mapping,$/;"	f	file:
one	kernel/sysctl.c	/^static int __maybe_unused one = 1;$/;"	v	file:
one_hundred	kernel/sysctl.c	/^static int one_hundred = 100;$/;"	v	file:
one_stable_tree	mm/ksm.c	/^static struct rb_root one_stable_tree[1] = { RB_ROOT };$/;"	v	typeref:struct:rb_root	file:
one_ul	kernel/sysctl.c	/^static unsigned long one_ul = 1;$/;"	v	file:
one_unstable_tree	mm/ksm.c	/^static struct rb_root one_unstable_tree[1] = { RB_ROOT };$/;"	v	typeref:struct:rb_root	file:
onecputick	kernel/posix-cpu-timers.c	/^static u32 onecputick;$/;"	v	file:
online_css	kernel/cgroup.c	/^static int online_css(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
online_page_callback	mm/memory_hotplug.c	/^static online_page_callback_t online_page_callback = generic_online_page;$/;"	v	file:
online_page_cgroup	mm/page_cgroup.c	/^int __meminit online_page_cgroup(unsigned long start_pfn,$/;"	f
online_pages	mm/memory_hotplug.c	/^int __ref online_pages(unsigned long pfn, unsigned long nr_pages, int online_type)$/;"	f
online_pages_range	mm/memory_hotplug.c	/^static int online_pages_range(unsigned long start_pfn, unsigned long nr_pages,$/;"	f	file:
onoff_holdoff	kernel/rcutorture.c	/^static int onoff_holdoff;	\/* Seconds after boot before CPU hotplugs. *\/$/;"	v	file:
onoff_interval	kernel/rcutorture.c	/^static int onoff_interval;	\/* Wait time between CPU hotplugs, 0=disable. *\/$/;"	v	file:
onoff_mutex	kernel/rcutree.h	/^	struct mutex onoff_mutex;		\/* Coordinate hotplug & GPs. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::mutex
onoff_task	kernel/rcutorture.c	/^static struct task_struct *onoff_task;$/;"	v	typeref:struct:task_struct	file:
oo_make	mm/slub.c	/^static inline struct kmem_cache_order_objects oo_make(int order,$/;"	f	file:
oo_objects	mm/slub.c	/^static inline int oo_objects(struct kmem_cache_order_objects x)$/;"	f	file:
oo_order	mm/slub.c	/^static inline int oo_order(struct kmem_cache_order_objects x)$/;"	f	file:
oom_badness	mm/oom_kill.c	/^unsigned long oom_badness(struct task_struct *p, struct mem_cgroup *memcg,$/;"	f
oom_callback_count	kernel/rcutree_plugin.h	/^static atomic_t oom_callback_count;$/;"	v
oom_head	kernel/rcutree.h	/^	struct rcu_head oom_head;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
oom_kill_disable	mm/memcontrol.c	/^	int		oom_kill_disable;$/;"	m	struct:mem_cgroup	file:
oom_kill_process	mm/oom_kill.c	/^void oom_kill_process(struct task_struct *p, gfp_t gfp_mask, int order,$/;"	f
oom_lock	mm/memcontrol.c	/^	bool		oom_lock;$/;"	m	struct:mem_cgroup	file:
oom_notify	mm/memcontrol.c	/^	struct list_head oom_notify;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::list_head	file:
oom_scan_process_thread	mm/oom_kill.c	/^enum oom_scan_t oom_scan_process_thread(struct task_struct *task,$/;"	f
oom_unkillable_task	mm/oom_kill.c	/^static bool oom_unkillable_task(struct task_struct *p,$/;"	f	file:
oom_wait_info	mm/memcontrol.c	/^struct oom_wait_info {$/;"	s	file:
oops_enter	kernel/panic.c	/^void oops_enter(void)$/;"	f
oops_exit	kernel/panic.c	/^void oops_exit(void)$/;"	f
oops_id	kernel/panic.c	/^static u64 oops_id;$/;"	v	file:
oops_in_progress	kernel/printk.c	/^EXPORT_SYMBOL(oops_in_progress);$/;"	v
oops_in_progress	kernel/printk.c	/^int oops_in_progress;$/;"	v
oops_may_print	kernel/panic.c	/^int oops_may_print(void)$/;"	f
oops_setup	kernel/panic.c	/^static int __init oops_setup(char *s)$/;"	f	file:
op_type	mm/kmemleak.c	/^	int op_type;			\/* kmemleak operation type *\/$/;"	m	struct:early_log	file:
opcode	kernel/rtmutex-tester.c	/^	int			opcode;$/;"	m	struct:test_thread_data	file:
opdata	kernel/rtmutex-tester.c	/^	int			opdata;$/;"	m	struct:test_thread_data	file:
open_arg	kernel/auditsc.c	/^static inline int open_arg(int flags, int mask)$/;"	f	file:
open_check_o_direct	fs/open.c	/^int open_check_o_direct(struct file *f)$/;"	f
open_exec	fs/exec.c	/^EXPORT_SYMBOL(open_exec);$/;"	v
open_exec	fs/exec.c	/^struct file *open_exec(const char *name)$/;"	f
open_flag	fs/internal.h	/^	int open_flag;$/;"	m	struct:open_flags
open_flags	fs/internal.h	/^struct open_flags {$/;"	s
open_softirq	kernel/softirq.c	/^void open_softirq(int nr, void (*action)(struct softirq_action *))$/;"	f
open_to_namei_flags	fs/namei.c	/^static inline int open_to_namei_flags(int flag)$/;"	f	file:
opipe_prep	fs/splice.c	/^static int opipe_prep(struct pipe_inode_info *pipe, unsigned int flags)$/;"	f	file:
opt_pre_handler	kernel/kprobes.c	/^void __kprobes opt_pre_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f
optimize_all_kprobes	kernel/kprobes.c	/^static void __kprobes optimize_all_kprobes(void)$/;"	f	file:
optimize_kprobe	kernel/kprobes.c	/^static __kprobes void optimize_kprobe(struct kprobe *p)$/;"	f	file:
optimize_kprobe	kernel/kprobes.c	904;"	d	file:
options	kernel/printk.c	/^	char	*options;			\/* Options for the driver   *\/$/;"	m	struct:console_cmdline	file:
order	mm/internal.h	/^	int order;			\/* order a direct compactor needs *\/$/;"	m	struct:compact_control
order	mm/slub.c	/^SLAB_ATTR(order);$/;"	v
order	mm/vmscan.c	/^	int order;$/;"	m	struct:scan_control	file:
order_objects	mm/slub.c	/^static inline int order_objects(int order, unsigned long size, int reserved)$/;"	f	file:
order_show	mm/slub.c	/^static ssize_t order_show(struct kmem_cache *s, char *buf)$/;"	f	file:
order_store	mm/slub.c	/^static ssize_t order_store(struct kmem_cache *s,$/;"	f	file:
orderly_poweroff	kernel/sys.c	/^EXPORT_SYMBOL_GPL(orderly_poweroff);$/;"	v
orderly_poweroff	kernel/sys.c	/^int orderly_poweroff(bool force)$/;"	f
orphan	fs/compat_ioctl.c	/^	char orphan;$/;"	m	struct:compat_sg_req_info	file:
orphan_donelist	kernel/rcutree.h	/^	struct rcu_head *orphan_donelist;	\/* Orphaned callbacks that *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_head
orphan_donetail	kernel/rcutree.h	/^	struct rcu_head **orphan_donetail;	\/* Tail of above. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_head
orphan_list_entry	fs/ext3/super.c	/^static inline struct inode *orphan_list_entry(struct list_head *l)$/;"	f	file:
orphan_nxtlist	kernel/rcutree.h	/^	struct rcu_head *orphan_nxtlist;	\/* Orphaned callbacks that *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_head
orphan_nxttail	kernel/rcutree.h	/^	struct rcu_head **orphan_nxttail;	\/* Tail of above. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_head
osd1	fs/ext3/ext3.h	/^	} osd1;				\/* OS dependent 1 *\/$/;"	m	struct:ext3_inode	typeref:union:ext3_inode::__anon31
osd2	fs/ext3/ext3.h	/^	} osd2;				\/* OS dependent 2 *\/$/;"	m	struct:ext3_inode	typeref:union:ext3_inode::__anon35
osid	kernel/auditsc.c	/^			u32			osid;$/;"	m	struct:audit_context::__anon43::__anon45	file:
osid	kernel/auditsc.c	/^	u32			osid;$/;"	m	struct:audit_names	file:
osync_buffers_list	fs/buffer.c	/^static int osync_buffers_list(spinlock_t *lock, struct list_head *list)$/;"	f	file:
our_mnt	fs/namespace.c	/^bool our_mnt(struct vfsmount *mnt)$/;"	f
out_of_line_wait_on_bit	kernel/wait.c	/^EXPORT_SYMBOL(out_of_line_wait_on_bit);$/;"	v
out_of_line_wait_on_bit	kernel/wait.c	/^int __sched out_of_line_wait_on_bit(void *word, int bit,$/;"	f
out_of_line_wait_on_bit_lock	kernel/wait.c	/^EXPORT_SYMBOL(out_of_line_wait_on_bit_lock);$/;"	v
out_of_line_wait_on_bit_lock	kernel/wait.c	/^int __sched out_of_line_wait_on_bit_lock(void *word, int bit,$/;"	f
out_of_memory	mm/oom_kill.c	/^void out_of_memory(struct zonelist *zonelist, gfp_t gfp_mask,$/;"	f
outcome	mm/memory-failure.c	/^enum outcome {$/;"	g	file:
outp	fs/compat.c	/^	compat_uptr_t outp;$/;"	m	struct:compat_sel_arg_struct	file:
outp	fs/select.c	/^	fd_set __user *inp, *outp, *exp;$/;"	m	struct:sel_arg_struct	file:
outside	fs/ext3/resize.c	17;"	d	file:
over_bground_thresh	fs/fs-writeback.c	/^static bool over_bground_thresh(struct backing_dev_info *bdi)$/;"	f	file:
overflowgid	kernel/sys.c	/^EXPORT_SYMBOL(overflowgid);$/;"	v
overflowgid	kernel/sys.c	/^int overflowgid = DEFAULT_OVERFLOWGID;$/;"	v
overflowuid	kernel/sys.c	/^EXPORT_SYMBOL(overflowuid);$/;"	v
overflowuid	kernel/sys.c	/^int overflowuid = DEFAULT_OVERFLOWUID;$/;"	v
override_architecture	kernel/sys.c	1259;"	d	file:
override_architecture	kernel/sys.c	1264;"	d	file:
override_creds	kernel/cred.c	/^EXPORT_SYMBOL(override_creds);$/;"	v
override_creds	kernel/cred.c	/^const struct cred *override_creds(const struct cred *new)$/;"	f
override_release	kernel/sys.c	/^static int override_release(char __user *release, size_t len)$/;"	f	file:
ovflist	fs/eventpoll.c	/^	struct epitem *ovflist;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::epitem	file:
owner	kernel/audit_tree.c	/^		struct audit_tree *owner;$/;"	m	struct:audit_chunk::node	typeref:struct:audit_chunk::node::audit_tree	file:
owner	kernel/cgroup.c	/^	struct cgroup *owner;$/;"	m	struct:cgroup_pidlist	typeref:struct:cgroup_pidlist::cgroup	file:
owner	kernel/futex.c	/^	struct task_struct *owner;$/;"	m	struct:futex_pi_state	typeref:struct:futex_pi_state::task_struct	file:
owner	kernel/module.c	/^	struct module *owner;$/;"	m	struct:find_symbol_arg	typeref:struct:find_symbol_arg::module	file:
owner	kernel/printk.c	/^	struct task_struct *owner;	\/* task of first print*\/$/;"	m	struct:cont	typeref:struct:cont::task_struct	file:
owners	kernel/audit_tree.c	/^	} owners[];$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::node	file:
p	fs/aio.c	/^	struct task_struct	*p;$/;"	m	struct:aio_timeout	typeref:struct:aio_timeout::task_struct	file:
p	fs/ext3/inode.c	/^	__le32	*p;$/;"	m	struct:__anon40	file:
p_index	mm/scm.h	/^	unsigned long p_index;$/;"	m	struct:__anon13
pack_id	fs/compat_ioctl.c	/^	compat_int_t pack_id;		\/* [i->o] unused internally (normally) *\/$/;"	m	struct:sg_io_hdr32	file:
pack_id	fs/compat_ioctl.c	/^	int pack_id;$/;"	m	struct:compat_sg_req_info	file:
packet_pipe_buf_ops	fs/pipe.c	/^static const struct pipe_buf_operations packet_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
pad	kernel/compat.c	/^	u16 pad;$/;"	m	struct:compat_sysinfo	file:
padata_add_cpu	kernel/padata.c	/^EXPORT_SYMBOL(padata_add_cpu);$/;"	v
padata_add_cpu	kernel/padata.c	/^int padata_add_cpu(struct padata_instance *pinst, int cpu, int mask)$/;"	f
padata_alloc	kernel/padata.c	/^EXPORT_SYMBOL(padata_alloc);$/;"	v
padata_alloc	kernel/padata.c	/^struct padata_instance *padata_alloc(struct workqueue_struct *wq,$/;"	f
padata_alloc_pd	kernel/padata.c	/^static struct parallel_data *padata_alloc_pd(struct padata_instance *pinst,$/;"	f	file:
padata_alloc_possible	kernel/padata.c	/^EXPORT_SYMBOL(padata_alloc_possible);$/;"	v
padata_alloc_possible	kernel/padata.c	/^struct padata_instance *padata_alloc_possible(struct workqueue_struct *wq)$/;"	f
padata_attr_type	kernel/padata.c	/^static struct kobj_type padata_attr_type = {$/;"	v	typeref:struct:kobj_type	file:
padata_cpu_callback	kernel/padata.c	/^static int padata_cpu_callback(struct notifier_block *nfb,$/;"	f	file:
padata_cpu_hash	kernel/padata.c	/^static int padata_cpu_hash(struct parallel_data *pd)$/;"	f	file:
padata_default_attrs	kernel/padata.c	/^static struct attribute *padata_default_attrs[] = {$/;"	v	typeref:struct:attribute	file:
padata_do_parallel	kernel/padata.c	/^EXPORT_SYMBOL(padata_do_parallel);$/;"	v
padata_do_parallel	kernel/padata.c	/^int padata_do_parallel(struct padata_instance *pinst,$/;"	f
padata_do_serial	kernel/padata.c	/^EXPORT_SYMBOL(padata_do_serial);$/;"	v
padata_do_serial	kernel/padata.c	/^void padata_do_serial(struct padata_priv *padata)$/;"	f
padata_flush_queues	kernel/padata.c	/^static void padata_flush_queues(struct parallel_data *pd)$/;"	f	file:
padata_free	kernel/padata.c	/^EXPORT_SYMBOL(padata_free);$/;"	v
padata_free	kernel/padata.c	/^void padata_free(struct padata_instance *pinst)$/;"	f
padata_free_pd	kernel/padata.c	/^static void padata_free_pd(struct parallel_data *pd)$/;"	f	file:
padata_get_next	kernel/padata.c	/^static struct padata_priv *padata_get_next(struct parallel_data *pd)$/;"	f	file:
padata_index_to_cpu	kernel/padata.c	/^static int padata_index_to_cpu(struct parallel_data *pd, int cpu_index)$/;"	f	file:
padata_init_pqueues	kernel/padata.c	/^static void padata_init_pqueues(struct parallel_data *pd)$/;"	f	file:
padata_init_squeues	kernel/padata.c	/^static void padata_init_squeues(struct parallel_data *pd)$/;"	f	file:
padata_parallel_worker	kernel/padata.c	/^static void padata_parallel_worker(struct work_struct *parallel_work)$/;"	f	file:
padata_register_cpumask_notifier	kernel/padata.c	/^EXPORT_SYMBOL(padata_register_cpumask_notifier);$/;"	v
padata_register_cpumask_notifier	kernel/padata.c	/^int padata_register_cpumask_notifier(struct padata_instance *pinst,$/;"	f
padata_remove_cpu	kernel/padata.c	/^EXPORT_SYMBOL(padata_remove_cpu);$/;"	v
padata_remove_cpu	kernel/padata.c	/^int padata_remove_cpu(struct padata_instance *pinst, int cpu, int mask)$/;"	f
padata_reorder	kernel/padata.c	/^static void padata_reorder(struct parallel_data *pd)$/;"	f	file:
padata_reorder_timer	kernel/padata.c	/^static void padata_reorder_timer(unsigned long arg)$/;"	f	file:
padata_replace	kernel/padata.c	/^static void padata_replace(struct padata_instance *pinst,$/;"	f	file:
padata_serial_worker	kernel/padata.c	/^static void padata_serial_worker(struct work_struct *serial_work)$/;"	f	file:
padata_set_cpumask	kernel/padata.c	/^EXPORT_SYMBOL(padata_set_cpumask);$/;"	v
padata_set_cpumask	kernel/padata.c	/^int padata_set_cpumask(struct padata_instance *pinst, int cpumask_type,$/;"	f
padata_set_cpumasks	kernel/padata.c	/^EXPORT_SYMBOL(padata_set_cpumasks);$/;"	v
padata_set_cpumasks	kernel/padata.c	/^int padata_set_cpumasks(struct padata_instance *pinst, cpumask_var_t pcpumask,$/;"	f
padata_setup_cpumasks	kernel/padata.c	/^static int padata_setup_cpumasks(struct parallel_data *pd,$/;"	f	file:
padata_start	kernel/padata.c	/^EXPORT_SYMBOL(padata_start);$/;"	v
padata_start	kernel/padata.c	/^int padata_start(struct padata_instance *pinst)$/;"	f
padata_stop	kernel/padata.c	/^EXPORT_SYMBOL(padata_stop);$/;"	v
padata_stop	kernel/padata.c	/^void padata_stop(struct padata_instance *pinst)$/;"	f
padata_sysfs_entry	kernel/padata.c	/^struct padata_sysfs_entry {$/;"	s	file:
padata_sysfs_ops	kernel/padata.c	/^static const struct sysfs_ops padata_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
padata_sysfs_release	kernel/padata.c	/^static void padata_sysfs_release(struct kobject *kobj)$/;"	f	file:
padata_sysfs_show	kernel/padata.c	/^static ssize_t padata_sysfs_show(struct kobject *kobj,$/;"	f	file:
padata_sysfs_store	kernel/padata.c	/^static ssize_t padata_sysfs_store(struct kobject *kobj, struct attribute *attr,$/;"	f	file:
padata_unregister_cpumask_notifier	kernel/padata.c	/^EXPORT_SYMBOL(padata_unregister_cpumask_notifier);$/;"	v
padata_unregister_cpumask_notifier	kernel/padata.c	/^int padata_unregister_cpumask_notifier(struct padata_instance *pinst,$/;"	f
padata_validate_cpumask	kernel/padata.c	/^static bool padata_validate_cpumask(struct padata_instance *pinst,$/;"	f	file:
paddr_vmcoreinfo_note	kernel/kexec.c	/^unsigned long __attribute__ ((weak)) paddr_vmcoreinfo_note(void)$/;"	f
padzero	fs/binfmt_elf.c	/^static int padzero(unsigned long elf_bss)$/;"	f	file:
page	mm/highmem.c	/^	struct page *page;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::page	file:
page	mm/memcontrol.c	/^	struct page	*page;$/;"	m	union:mc_target	typeref:struct:mc_target::page	file:
page	mm/migrate.c	/^	struct page *page;$/;"	m	struct:page_to_node	typeref:struct:page_to_node::page	file:
page_action	mm/memory-failure.c	/^static int page_action(struct page_state *ps, struct page *p,$/;"	f	file:
page_add_anon_rmap	mm/rmap.c	/^void page_add_anon_rmap(struct page *page,$/;"	f
page_add_file_rmap	mm/rmap.c	/^void page_add_file_rmap(struct page *page)$/;"	f
page_add_new_anon_rmap	mm/rmap.c	/^void page_add_new_anon_rmap(struct page *page,$/;"	f
page_address	mm/highmem.c	/^EXPORT_SYMBOL(page_address);$/;"	v
page_address	mm/highmem.c	/^void *page_address(const struct page *page)$/;"	f
page_address_htable	mm/highmem.c	/^} ____cacheline_aligned_in_smp page_address_htable[1<<PA_HASH_ORDER];$/;"	v	typeref:struct:page_address_slot	file:
page_address_in_vma	mm/rmap.c	/^unsigned long page_address_in_vma(struct page *page, struct vm_area_struct *vma)$/;"	f
page_address_init	mm/highmem.c	/^void __init page_address_init(void)$/;"	f
page_address_map	mm/highmem.c	/^struct page_address_map {$/;"	s	file:
page_address_maps	mm/highmem.c	/^static struct page_address_map page_address_maps[LAST_PKMAP];$/;"	v	typeref:struct:page_address_map	file:
page_address_slot	mm/highmem.c	/^static struct page_address_slot {$/;"	s	file:
page_alloc_cpu_notify	mm/page_alloc.c	/^static int page_alloc_cpu_notify(struct notifier_block *self,$/;"	f	file:
page_alloc_init	mm/page_alloc.c	/^void __init page_alloc_init(void)$/;"	f
page_cache_add_speculative	include/linux/pagemap.h	/^static inline int page_cache_add_speculative(struct page *page, int count)$/;"	f
page_cache_alloc	include/linux/pagemap.h	/^static inline struct page *page_cache_alloc(struct address_space *x)$/;"	f
page_cache_alloc_cold	include/linux/pagemap.h	/^static inline struct page *page_cache_alloc_cold(struct address_space *x)$/;"	f
page_cache_alloc_readahead	include/linux/pagemap.h	/^static inline struct page *page_cache_alloc_readahead(struct address_space *x)$/;"	f
page_cache_async_readahead	mm/readahead.c	/^EXPORT_SYMBOL_GPL(page_cache_async_readahead);$/;"	v
page_cache_async_readahead	mm/readahead.c	/^page_cache_async_readahead(struct address_space *mapping,$/;"	f
page_cache_get	include/linux/pagemap.h	100;"	d
page_cache_get_speculative	include/linux/pagemap.h	/^static inline int page_cache_get_speculative(struct page *page)$/;"	f
page_cache_pipe_buf_confirm	fs/splice.c	/^static int page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe,$/;"	f	file:
page_cache_pipe_buf_ops	fs/splice.c	/^const struct pipe_buf_operations page_cache_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations
page_cache_pipe_buf_release	fs/splice.c	/^static void page_cache_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f	file:
page_cache_pipe_buf_steal	fs/splice.c	/^static int page_cache_pipe_buf_steal(struct pipe_inode_info *pipe,$/;"	f	file:
page_cache_read	mm/filemap.c	/^static int page_cache_read(struct file *file, pgoff_t offset)$/;"	f	file:
page_cache_release	include/linux/pagemap.h	101;"	d
page_cache_sync_readahead	mm/readahead.c	/^EXPORT_SYMBOL_GPL(page_cache_sync_readahead);$/;"	v
page_cache_sync_readahead	mm/readahead.c	/^void page_cache_sync_readahead(struct address_space *mapping,$/;"	f
page_cgroup_callback	mm/page_cgroup.c	/^static int __meminit page_cgroup_callback(struct notifier_block *self,$/;"	f	file:
page_cgroup_init	mm/page_cgroup.c	/^void __init page_cgroup_init(void)$/;"	f
page_cgroup_init_flatmem	mm/page_cgroup.c	/^void __init page_cgroup_init_flatmem(void)$/;"	f
page_cgroup_zoneinfo	mm/memcontrol.c	/^page_cgroup_zoneinfo(struct mem_cgroup *memcg, struct page *page)$/;"	f	file:
page_check_address_pmd	mm/huge_memory.c	/^pmd_t *page_check_address_pmd(struct page *page,$/;"	f
page_check_references	mm/vmscan.c	/^static enum page_references page_check_references(struct page *page,$/;"	f	file:
page_cluster	mm/swap.c	/^int page_cluster;$/;"	v
page_errors	fs/direct-io.c	/^	int page_errors;		\/* errno from get_user_pages() *\/$/;"	m	struct:dio	file:
page_evictable	mm/vmscan.c	/^int page_evictable(struct page *page)$/;"	f
page_file_offset	include/linux/pagemap.h	/^static inline loff_t page_file_offset(struct page *page)$/;"	f
page_follow_link_light	fs/namei.c	/^EXPORT_SYMBOL(page_follow_link_light);$/;"	v
page_follow_link_light	fs/namei.c	/^void *page_follow_link_light(struct dentry *dentry, struct nameidata *nd)$/;"	f
page_freeze_refs	include/linux/pagemap.h	/^static inline int page_freeze_refs(struct page *page, int count)$/;"	f
page_get_anon_vma	mm/rmap.c	/^struct anon_vma *page_get_anon_vma(struct page *page)$/;"	f
page_getlink	fs/namei.c	/^static char *page_getlink(struct dentry * dentry, struct page **ppage)$/;"	f	file:
page_is_buddy	mm/page_alloc.c	/^static inline int page_is_buddy(struct page *page, struct page *buddy,$/;"	f	file:
page_is_consistent	mm/page_alloc.c	/^static int page_is_consistent(struct zone *zone, struct page *page)$/;"	f	file:
page_is_ram	kernel/resource.c	/^int __weak page_is_ram(unsigned long pfn)$/;"	f
page_list	mm/dmapool.c	/^	struct list_head page_list;$/;"	m	struct:dma_page	typeref:struct:dma_page::list_head	file:
page_list	mm/dmapool.c	/^	struct list_head page_list;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::list_head	file:
page_lock_anon_vma_read	mm/rmap.c	/^struct anon_vma *page_lock_anon_vma_read(struct page *page)$/;"	f
page_mapped_in_vma	mm/rmap.c	/^int page_mapped_in_vma(struct page *page, struct vm_area_struct *vma)$/;"	f
page_mapping	mm/util.c	/^struct address_space *page_mapping(struct page *page)$/;"	f
page_mkclean	mm/rmap.c	/^EXPORT_SYMBOL_GPL(page_mkclean);$/;"	v
page_mkclean	mm/rmap.c	/^int page_mkclean(struct page *page)$/;"	f
page_mkclean_file	mm/rmap.c	/^static int page_mkclean_file(struct address_space *mapping, struct page *page)$/;"	f	file:
page_mkclean_one	mm/rmap.c	/^static int page_mkclean_one(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
page_move_anon_rmap	mm/rmap.c	/^void page_move_anon_rmap(struct page *page,$/;"	f
page_nid_xchg_last	mm/mmzone.c	/^int page_nid_xchg_last(struct page *page, int nid)$/;"	f
page_offset	include/linux/pagemap.h	/^static inline loff_t page_offset(struct page *page)$/;"	f
page_order	mm/internal.h	/^static inline unsigned long page_order(struct page *page)$/;"	f
page_outside_zone_boundaries	mm/page_alloc.c	/^static int page_outside_zone_boundaries(struct zone *zone, struct page *page)$/;"	f	file:
page_poison	mm/debug-pagealloc.c	/^static inline bool page_poison(struct page *page)$/;"	f	file:
page_pool	mm/bounce.c	/^static mempool_t *page_pool, *isa_page_pool;$/;"	v	file:
page_prot_map	mm/scm.h	/^	unsigned long page_prot_map[6*1024*1024];$/;"	m	struct:__anon15
page_put_link	fs/namei.c	/^EXPORT_SYMBOL(page_put_link);$/;"	v
page_put_link	fs/namei.c	/^void page_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)$/;"	f
page_readlink	fs/namei.c	/^EXPORT_SYMBOL(page_readlink);$/;"	v
page_readlink	fs/namei.c	/^int page_readlink(struct dentry *dentry, char __user *buffer, int buflen)$/;"	f
page_referenced	mm/rmap.c	/^int page_referenced(struct page *page,$/;"	f
page_referenced_anon	mm/rmap.c	/^static int page_referenced_anon(struct page *page,$/;"	f	file:
page_referenced_file	mm/rmap.c	/^static int page_referenced_file(struct page *page,$/;"	f	file:
page_referenced_ksm	mm/ksm.c	/^int page_referenced_ksm(struct page *page, struct mem_cgroup *memcg,$/;"	f
page_referenced_one	mm/rmap.c	/^int page_referenced_one(struct page *page, struct vm_area_struct *vma,$/;"	f
page_references	mm/vmscan.c	/^enum page_references {$/;"	g	file:
page_remove_rmap	mm/rmap.c	/^void page_remove_rmap(struct page *page)$/;"	f
page_slot	mm/highmem.c	/^static struct page_address_slot *page_slot(const struct page *page)$/;"	f	file:
page_state	mm/memory-failure.c	/^static struct page_state {$/;"	s	file:
page_swap_info	mm/swapfile.c	/^struct swap_info_struct *page_swap_info(struct page *page)$/;"	f
page_swapcount	mm/swapfile.c	/^int page_swapcount(struct page *page)$/;"	f
page_symlink	fs/namei.c	/^EXPORT_SYMBOL(page_symlink);$/;"	v
page_symlink	fs/namei.c	/^int page_symlink(struct inode *inode, const char *symname, int len)$/;"	f
page_symlink_inode_operations	fs/namei.c	/^EXPORT_SYMBOL(page_symlink_inode_operations);$/;"	v
page_symlink_inode_operations	fs/namei.c	/^const struct inode_operations page_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
page_to_nid	mm/sparse.c	/^EXPORT_SYMBOL(page_to_nid);$/;"	v
page_to_nid	mm/sparse.c	/^int page_to_nid(const struct page *page)$/;"	f
page_to_node	mm/migrate.c	/^struct page_to_node {$/;"	s	file:
page_trans_compound_anon	mm/ksm.c	/^static struct page *page_trans_compound_anon(struct page *page)$/;"	f	file:
page_trans_compound_anon_split	mm/ksm.c	/^static int page_trans_compound_anon_split(struct page *page)$/;"	f	file:
page_unfreeze_refs	include/linux/pagemap.h	/^static inline void page_unfreeze_refs(struct page *page, int count)$/;"	f
page_unlock_anon_vma_read	mm/rmap.c	/^void page_unlock_anon_vma_read(struct anon_vma *anon_vma)$/;"	f
page_waitqueue	mm/filemap.c	/^static wait_queue_head_t *page_waitqueue(struct page *page)$/;"	f	file:
page_writeback_init	mm/page-writeback.c	/^void __init page_writeback_init(void)$/;"	f
page_zero_new_buffers	fs/buffer.c	/^EXPORT_SYMBOL(page_zero_new_buffers);$/;"	v
page_zero_new_buffers	fs/buffer.c	/^void page_zero_new_buffers(struct page *page, unsigned from, unsigned to)$/;"	f
pageblock_free	mm/memory_hotplug.c	/^static inline int pageblock_free(struct page *page)$/;"	f	file:
pageblock_is_reserved	mm/page_alloc.c	/^static int pageblock_is_reserved(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
pagecache_write_begin	mm/filemap.c	/^EXPORT_SYMBOL(pagecache_write_begin);$/;"	v
pagecache_write_begin	mm/filemap.c	/^int pagecache_write_begin(struct file *file, struct address_space *mapping,$/;"	f
pagecache_write_end	mm/filemap.c	/^EXPORT_SYMBOL(pagecache_write_end);$/;"	v
pagecache_write_end	mm/filemap.c	/^int pagecache_write_end(struct file *file, struct address_space *mapping,$/;"	f
pagefault_out_of_memory	mm/oom_kill.c	/^void pagefault_out_of_memory(void)$/;"	f
pageflag_names	mm/page_alloc.c	/^static const struct trace_print_flags pageflag_names[] = {$/;"	v	typeref:struct:trace_print_flags	file:
pageout	mm/vmscan.c	/^static pageout_t pageout(struct page *page, struct address_space *mapping,$/;"	f	file:
pageout_t	mm/vmscan.c	/^} pageout_t;$/;"	t	typeref:enum:__anon21	file:
pages	fs/direct-io.c	/^	struct page *pages[DIO_PAGES];	\/* page buffer *\/$/;"	m	struct:dio	typeref:struct:dio::page	file:
pages	kernel/kprobes.c	/^	struct list_head pages;	\/* list of kprobe_insn_page *\/$/;"	m	struct:kprobe_insn_cache	typeref:struct:kprobe_insn_cache::list_head	file:
pages_collapsed_attr	mm/huge_memory.c	/^static struct kobj_attribute pages_collapsed_attr =$/;"	v	typeref:struct:kobj_attribute	file:
pages_collapsed_show	mm/huge_memory.c	/^static ssize_t pages_collapsed_show(struct kobject *kobj,$/;"	f	file:
pages_identical	mm/ksm.c	/^static inline int pages_identical(struct page *page1, struct page *page2)$/;"	f	file:
pages_in_io	fs/direct-io.c	/^	int pages_in_io;		\/* approximate total IO pages *\/$/;"	m	struct:dio_submit	file:
pages_shared	mm/ksm.c	/^KSM_ATTR_RO(pages_shared);$/;"	v
pages_shared_show	mm/ksm.c	/^static ssize_t pages_shared_show(struct kobject *kobj,$/;"	f	file:
pages_sharing	mm/ksm.c	/^KSM_ATTR_RO(pages_sharing);$/;"	v
pages_sharing_show	mm/ksm.c	/^static ssize_t pages_sharing_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan	mm/ksm.c	/^KSM_ATTR(pages_to_scan);$/;"	v
pages_to_scan_attr	mm/huge_memory.c	/^static struct kobj_attribute pages_to_scan_attr =$/;"	v	typeref:struct:kobj_attribute	file:
pages_to_scan_show	mm/huge_memory.c	/^static ssize_t pages_to_scan_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan_show	mm/ksm.c	/^static ssize_t pages_to_scan_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan_store	mm/huge_memory.c	/^static ssize_t pages_to_scan_store(struct kobject *kobj,$/;"	f	file:
pages_to_scan_store	mm/ksm.c	/^static ssize_t pages_to_scan_store(struct kobject *kobj,$/;"	f	file:
pages_unshared	mm/ksm.c	/^KSM_ATTR_RO(pages_unshared);$/;"	v
pages_unshared_show	mm/ksm.c	/^static ssize_t pages_unshared_show(struct kobject *kobj,$/;"	f	file:
pages_volatile	mm/ksm.c	/^KSM_ATTR_RO(pages_volatile);$/;"	v
pages_volatile_show	mm/ksm.c	/^static ssize_t pages_volatile_show(struct kobject *kobj,$/;"	f	file:
pagetypeinfo_file_ops	mm/vmstat.c	/^static const struct file_operations pagetypeinfo_file_ops = {$/;"	v	typeref:struct:file_operations	file:
pagetypeinfo_op	mm/vmstat.c	/^static const struct seq_operations pagetypeinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
pagetypeinfo_open	mm/vmstat.c	/^static int pagetypeinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
pagetypeinfo_show	mm/vmstat.c	/^static int pagetypeinfo_show(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showblockcount	mm/vmstat.c	/^static int pagetypeinfo_showblockcount(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showblockcount_print	mm/vmstat.c	/^static void pagetypeinfo_showblockcount_print(struct seq_file *m,$/;"	f	file:
pagetypeinfo_showfree	mm/vmstat.c	/^static int pagetypeinfo_showfree(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showfree_print	mm/vmstat.c	/^static void pagetypeinfo_showfree_print(struct seq_file *m,$/;"	f	file:
pagevec_lookup	mm/swap.c	/^EXPORT_SYMBOL(pagevec_lookup);$/;"	v
pagevec_lookup	mm/swap.c	/^unsigned pagevec_lookup(struct pagevec *pvec, struct address_space *mapping,$/;"	f
pagevec_lookup_tag	mm/swap.c	/^EXPORT_SYMBOL(pagevec_lookup_tag);$/;"	v
pagevec_lookup_tag	mm/swap.c	/^unsigned pagevec_lookup_tag(struct pagevec *pvec, struct address_space *mapping,$/;"	f
pagevec_lru_move_fn	mm/swap.c	/^static void pagevec_lru_move_fn(struct pagevec *pvec,$/;"	f	file:
pagevec_move_tail	mm/swap.c	/^static void pagevec_move_tail(struct pagevec *pvec)$/;"	f	file:
pagevec_move_tail_fn	mm/swap.c	/^static void pagevec_move_tail_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
paint_it	mm/kmemleak.c	/^static void paint_it(struct kmemleak_object *object, int color)$/;"	f	file:
paint_ptr	mm/kmemleak.c	/^static void paint_ptr(unsigned long ptr, int color)$/;"	f	file:
palette	fs/compat_ioctl.c	/^	compat_uptr_t palette;$/;"	m	struct:compat_video_spu_palette	file:
panic	kernel/panic.c	/^EXPORT_SYMBOL(panic);$/;"	v
panic	kernel/panic.c	/^void panic(const char *fmt, ...)$/;"	f
panic_blink	kernel/panic.c	/^EXPORT_SYMBOL(panic_blink);$/;"	v
panic_blink	kernel/panic.c	/^long (*panic_blink)(int state);$/;"	v
panic_block	kernel/hung_task.c	/^static struct notifier_block panic_block = {$/;"	v	typeref:struct:notifier_block	file:
panic_notifier_list	kernel/panic.c	/^ATOMIC_NOTIFIER_HEAD(panic_notifier_list);$/;"	v
panic_notifier_list	kernel/panic.c	/^EXPORT_SYMBOL(panic_notifier_list);$/;"	v
panic_on_oops	kernel/panic.c	/^int panic_on_oops = CONFIG_PANIC_ON_OOPS_VALUE;$/;"	v
panic_smp_self_stop	kernel/panic.c	/^void __weak panic_smp_self_stop(void)$/;"	f
panic_timeout	kernel/panic.c	/^EXPORT_SYMBOL_GPL(panic_timeout);$/;"	v
panic_timeout	kernel/panic.c	/^int panic_timeout;$/;"	v
param	kernel/params.c	/^	const struct kernel_param *param;$/;"	m	struct:param_attribute	typeref:struct:param_attribute::kernel_param	file:
param_array	kernel/params.c	/^static int param_array(const char *name,$/;"	f	file:
param_array_free	kernel/params.c	/^static void param_array_free(void *arg)$/;"	f	file:
param_array_get	kernel/params.c	/^static int param_array_get(char *buffer, const struct kernel_param *kp)$/;"	f	file:
param_array_ops	kernel/params.c	/^EXPORT_SYMBOL(param_array_ops);$/;"	v
param_array_ops	kernel/params.c	/^struct kernel_param_ops param_array_ops = {$/;"	v	typeref:struct:kernel_param_ops
param_array_set	kernel/params.c	/^static int param_array_set(const char *val, const struct kernel_param *kp)$/;"	f	file:
param_attr_show	kernel/params.c	/^static ssize_t param_attr_show(struct module_attribute *mattr,$/;"	f	file:
param_attr_store	kernel/params.c	/^static ssize_t param_attr_store(struct module_attribute *mattr,$/;"	f	file:
param_attribute	kernel/params.c	/^struct param_attribute$/;"	s	file:
param_check_bool_enable_only	kernel/module.c	142;"	d	file:
param_free_charp	kernel/params.c	/^static void param_free_charp(void *arg)$/;"	f	file:
param_get_bool	kernel/params.c	/^EXPORT_SYMBOL(param_get_bool);$/;"	v
param_get_bool	kernel/params.c	/^int param_get_bool(char *buffer, const struct kernel_param *kp)$/;"	f
param_get_charp	kernel/params.c	/^EXPORT_SYMBOL(param_get_charp);$/;"	v
param_get_charp	kernel/params.c	/^int param_get_charp(char *buffer, const struct kernel_param *kp)$/;"	f
param_get_invbool	kernel/params.c	/^EXPORT_SYMBOL(param_get_invbool);$/;"	v
param_get_invbool	kernel/params.c	/^int param_get_invbool(char *buffer, const struct kernel_param *kp)$/;"	f
param_get_string	kernel/params.c	/^EXPORT_SYMBOL(param_get_string);$/;"	v
param_get_string	kernel/params.c	/^int param_get_string(char *buffer, const struct kernel_param *kp)$/;"	f
param_ops_bint	kernel/params.c	/^EXPORT_SYMBOL(param_ops_bint);$/;"	v
param_ops_bint	kernel/params.c	/^struct kernel_param_ops param_ops_bint = {$/;"	v	typeref:struct:kernel_param_ops
param_ops_bool	kernel/params.c	/^EXPORT_SYMBOL(param_ops_bool);$/;"	v
param_ops_bool	kernel/params.c	/^struct kernel_param_ops param_ops_bool = {$/;"	v	typeref:struct:kernel_param_ops
param_ops_bool_enable_only	kernel/module.c	/^static const struct kernel_param_ops param_ops_bool_enable_only = {$/;"	v	typeref:struct:kernel_param_ops	file:
param_ops_charp	kernel/params.c	/^EXPORT_SYMBOL(param_ops_charp);$/;"	v
param_ops_charp	kernel/params.c	/^struct kernel_param_ops param_ops_charp = {$/;"	v	typeref:struct:kernel_param_ops
param_ops_invbool	kernel/params.c	/^EXPORT_SYMBOL(param_ops_invbool);$/;"	v
param_ops_invbool	kernel/params.c	/^struct kernel_param_ops param_ops_invbool = {$/;"	v	typeref:struct:kernel_param_ops
param_ops_string	kernel/params.c	/^EXPORT_SYMBOL(param_ops_string);$/;"	v
param_ops_string	kernel/params.c	/^struct kernel_param_ops param_ops_string = {$/;"	v	typeref:struct:kernel_param_ops
param_set_bint	kernel/params.c	/^EXPORT_SYMBOL(param_set_bint);$/;"	v
param_set_bint	kernel/params.c	/^int param_set_bint(const char *val, const struct kernel_param *kp)$/;"	f
param_set_bool	kernel/params.c	/^EXPORT_SYMBOL(param_set_bool);$/;"	v
param_set_bool	kernel/params.c	/^int param_set_bool(const char *val, const struct kernel_param *kp)$/;"	f
param_set_bool_enable_only	kernel/module.c	/^static int param_set_bool_enable_only(const char *val,$/;"	f	file:
param_set_charp	kernel/params.c	/^EXPORT_SYMBOL(param_set_charp);$/;"	v
param_set_charp	kernel/params.c	/^int param_set_charp(const char *val, const struct kernel_param *kp)$/;"	f
param_set_copystring	kernel/params.c	/^EXPORT_SYMBOL(param_set_copystring);$/;"	v
param_set_copystring	kernel/params.c	/^int param_set_copystring(const char *val, const struct kernel_param *kp)$/;"	f
param_set_invbool	kernel/params.c	/^EXPORT_SYMBOL(param_set_invbool);$/;"	v
param_set_invbool	kernel/params.c	/^int param_set_invbool(const char *val, const struct kernel_param *kp)$/;"	f
param_sysfs_builtin	kernel/params.c	/^static void __init param_sysfs_builtin(void)$/;"	f	file:
param_sysfs_init	kernel/params.c	/^static int __init param_sysfs_init(void)$/;"	f	file:
param_sysfs_init	kernel/params.c	/^subsys_initcall(param_sysfs_init);$/;"	v
parameq	kernel/params.c	/^bool parameq(const char *a, const char *b)$/;"	f
parameqn	kernel/params.c	/^bool parameqn(const char *a, const char *b, size_t n)$/;"	f
parent	kernel/audit_watch.c	/^	struct audit_parent	*parent; \/* associated parent *\/$/;"	m	struct:audit_watch	typeref:struct:audit_watch::audit_parent	file:
parent	kernel/rcutree.h	/^	struct rcu_node *parent;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::rcu_node
parent	kernel/resource.c	/^	struct resource *parent;$/;"	m	struct:region_devres	typeref:struct:region_devres::resource	file:
parent	lib/radix-tree.c	/^		struct radix_tree_node *parent;	\/* Used when ascending tree *\/$/;"	m	union:radix_tree_node::__anon68	typeref:struct:radix_tree_node::__anon68::radix_tree_node	file:
parent_cs	kernel/cpuset.c	/^static inline struct cpuset *parent_cs(const struct cpuset *cs)$/;"	f	file:
parent_freezer	kernel/cgroup_freezer.c	/^static struct freezer *parent_freezer(struct freezer *freezer)$/;"	f	file:
parent_hugetlb_cgroup	mm/hugetlb_cgroup.c	/^static inline struct hugetlb_cgroup *parent_hugetlb_cgroup(struct cgroup *cg)$/;"	f	file:
parent_len	kernel/auditfilter.c	/^int parent_len(const char *path)$/;"	f
parent_mem_cgroup	mm/memcontrol.c	/^EXPORT_SYMBOL(parent_mem_cgroup);$/;"	v
parent_mem_cgroup	mm/memcontrol.c	/^struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg)$/;"	f
parked	kernel/kthread.c	/^	struct completion parked;$/;"	m	struct:kthread	typeref:struct:kthread::completion	file:
parse	kernel/taskstats.c	/^static int parse(struct nlattr *na, struct cpumask *mask)$/;"	f	file:
parse_args	kernel/params.c	/^int parse_args(const char *doing,$/;"	f
parse_cgroupfs_options	kernel/cgroup.c	/^static int parse_cgroupfs_options(char *data, struct cgroup_sb_opts *opts)$/;"	f	file:
parse_command	fs/binfmt_misc.c	/^static int parse_command(const char __user *buffer, size_t count)$/;"	f	file:
parse_crashkernel	kernel/kexec.c	/^int __init parse_crashkernel(char *cmdline,$/;"	f
parse_crashkernel_high	kernel/kexec.c	/^int __init parse_crashkernel_high(char *cmdline,$/;"	f
parse_crashkernel_low	kernel/kexec.c	/^int __init parse_crashkernel_low(char *cmdline,$/;"	f
parse_crashkernel_mem	kernel/kexec.c	/^static int __init parse_crashkernel_mem(char 			*cmdline,$/;"	f	file:
parse_crashkernel_simple	kernel/kexec.c	/^static int __init parse_crashkernel_simple(char 		*cmdline,$/;"	f	file:
parse_crashkernel_suffix	kernel/kexec.c	/^static int __init parse_crashkernel_suffix(char *cmdline,$/;"	f	file:
parse_one	kernel/params.c	/^static int parse_one(char *param,$/;"	f	file:
parse_options	fs/ext3/super.c	/^static int parse_options (char *options, struct super_block *sb,$/;"	f	file:
parse_rcu_nocb_poll	kernel/rcutree_plugin.h	/^static int __init parse_rcu_nocb_poll(char *arg)$/;"	f
parsed_hstate	mm/hugetlb.c	/^static struct hstate * __initdata parsed_hstate;$/;"	v	typeref:struct:__initdata	file:
partial	mm/slub.c	/^SLAB_ATTR_RO(partial);$/;"	v
partial_show	mm/slub.c	/^static ssize_t partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
passed_quiesce	kernel/rcutree.h	/^	bool		passed_quiesce;	\/* User-mode\/idle loop etc. *\/$/;"	m	struct:rcu_data
passive_map1	mm/scm.c	/^virt_phys_map passive_map1;$/;"	v
passive_map2	mm/scm.c	/^virt_phys_map passive_map2;$/;"	v
past_time	fs/locks.c	/^static bool past_time(unsigned long then)$/;"	f	file:
path	fs/dcookies.c	/^	struct path path;$/;"	m	struct:dcookie_struct	typeref:struct:dcookie_struct::path	file:
path	kernel/audit_watch.c	/^	char			*path;	\/* insertion path *\/$/;"	m	struct:audit_watch	file:
path_count	fs/eventpoll.c	/^static int path_count[PATH_ARR_SIZE];$/;"	v	file:
path_count_inc	fs/eventpoll.c	/^static int path_count_inc(int nests)$/;"	f	file:
path_count_init	fs/eventpoll.c	/^static void path_count_init(void)$/;"	f	file:
path_get	fs/namei.c	/^EXPORT_SYMBOL(path_get);$/;"	v
path_get	fs/namei.c	/^void path_get(const struct path *path)$/;"	f
path_init	fs/namei.c	/^static int path_init(int dfd, const char *name, unsigned int flags,$/;"	f	file:
path_is_under	fs/namespace.c	/^EXPORT_SYMBOL(path_is_under);$/;"	v
path_is_under	fs/namespace.c	/^int path_is_under(struct path *path1, struct path *path2)$/;"	f
path_limits	fs/eventpoll.c	/^static const int path_limits[PATH_ARR_SIZE] = { 1000, 500, 100, 50, 10 };$/;"	v	file:
path_lookupat	fs/namei.c	/^static int path_lookupat(int dfd, const char *name,$/;"	f	file:
path_openat	fs/namei.c	/^static struct file *path_openat(int dfd, struct filename *pathname,$/;"	f	file:
path_put	fs/namei.c	/^EXPORT_SYMBOL(path_put);$/;"	v
path_put	fs/namei.c	/^void path_put(const struct path *path)$/;"	f
path_put_conditional	fs/namei.c	/^static void path_put_conditional(struct path *path, struct nameidata *nd)$/;"	f	file:
path_to_nameidata	fs/namei.c	/^static inline void path_to_nameidata(const struct path *path,$/;"	f	file:
path_with_deleted	fs/dcache.c	/^static int path_with_deleted(const struct path *path,$/;"	f	file:
pathname	kernel/audit_tree.c	/^	char pathname[];$/;"	m	struct:audit_tree	file:
pause_on_oops	kernel/panic.c	/^static int pause_on_oops;$/;"	v	file:
pause_on_oops_flag	kernel/panic.c	/^static int pause_on_oops_flag;$/;"	v	file:
pc	kernel/profile.c	/^	u32 pc, hits;$/;"	m	struct:profile_hit	file:
pcp_counter_lock	mm/memcontrol.c	/^	spinlock_t pcp_counter_lock;$/;"	m	struct:mem_cgroup	file:
pcpu	kernel/module.c	/^		unsigned int sym, str, mod, vers, info, pcpu;$/;"	m	struct:load_info::__anon60	file:
pcpu	kernel/workqueue.c	/^		struct pool_workqueue __percpu		*pcpu;$/;"	m	union:workqueue_struct::__anon66	typeref:struct:workqueue_struct::__anon66::__percpu	file:
pcpu_addr_in_first_chunk	mm/percpu.c	/^static bool pcpu_addr_in_first_chunk(void *addr)$/;"	f	file:
pcpu_addr_in_reserved_chunk	mm/percpu.c	/^static bool pcpu_addr_in_reserved_chunk(void *addr)$/;"	f	file:
pcpu_addr_to_page	mm/percpu-km.c	/^static struct page *pcpu_addr_to_page(void *addr)$/;"	f	file:
pcpu_addr_to_page	mm/percpu-vm.c	/^static struct page *pcpu_addr_to_page(void *addr)$/;"	f	file:
pcpu_alloc	mm/percpu.c	/^static void __percpu *pcpu_alloc(size_t size, size_t align, bool reserved)$/;"	f	file:
pcpu_alloc_alloc_info	mm/percpu.c	/^struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,$/;"	f
pcpu_alloc_area	mm/percpu.c	/^static int pcpu_alloc_area(struct pcpu_chunk *chunk, int size, int align)$/;"	f	file:
pcpu_alloc_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_alloc_chunk(void)$/;"	f	file:
pcpu_alloc_pages	mm/percpu-vm.c	/^static int pcpu_alloc_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_base_addr	mm/percpu.c	/^EXPORT_SYMBOL_GPL(pcpu_base_addr);$/;"	v
pcpu_build_alloc_info	mm/percpu.c	/^static struct pcpu_alloc_info * __init pcpu_build_alloc_info($/;"	f	file:
pcpu_chunk	mm/percpu.c	/^struct pcpu_chunk {$/;"	s	file:
pcpu_chunk_addr	mm/percpu.c	/^static unsigned long pcpu_chunk_addr(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_addr_search	mm/percpu.c	/^static struct pcpu_chunk *pcpu_chunk_addr_search(void *addr)$/;"	f	file:
pcpu_chunk_page	mm/percpu-vm.c	/^static struct page *pcpu_chunk_page(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_relocate	mm/percpu.c	/^static void pcpu_chunk_relocate(struct pcpu_chunk *chunk, int oslot)$/;"	f	file:
pcpu_chunk_slot	mm/percpu.c	/^static int pcpu_chunk_slot(const struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_create_chunk	mm/percpu-km.c	/^static struct pcpu_chunk *pcpu_create_chunk(void)$/;"	f	file:
pcpu_create_chunk	mm/percpu-vm.c	/^static struct pcpu_chunk *pcpu_create_chunk(void)$/;"	f	file:
pcpu_depopulate_chunk	mm/percpu-km.c	/^static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk, int off, int size)$/;"	f	file:
pcpu_depopulate_chunk	mm/percpu-vm.c	/^static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk, int off, int size)$/;"	f	file:
pcpu_destroy_chunk	mm/percpu-km.c	/^static void pcpu_destroy_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_destroy_chunk	mm/percpu-vm.c	/^static void pcpu_destroy_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_dfl_fc_alloc	mm/percpu.c	/^static void * __init pcpu_dfl_fc_alloc(unsigned int cpu, size_t size,$/;"	f	file:
pcpu_dfl_fc_free	mm/percpu.c	/^static void __init pcpu_dfl_fc_free(void *ptr, size_t size)$/;"	f	file:
pcpu_dump_alloc_info	mm/percpu.c	/^static void pcpu_dump_alloc_info(const char *lvl,$/;"	f	file:
pcpu_embed_first_chunk	mm/percpu.c	/^int __init pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,$/;"	f
pcpu_extend_area_map	mm/percpu.c	/^static int pcpu_extend_area_map(struct pcpu_chunk *chunk, int new_alloc)$/;"	f	file:
pcpu_first_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_first_chunk;$/;"	v	typeref:struct:pcpu_chunk	file:
pcpu_for_each_pop_region	mm/percpu.c	271;"	d	file:
pcpu_for_each_unpop_region	mm/percpu.c	266;"	d	file:
pcpu_free_alloc_info	mm/percpu.c	/^void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai)$/;"	f
pcpu_free_area	mm/percpu.c	/^static void pcpu_free_area(struct pcpu_chunk *chunk, int freeme)$/;"	f	file:
pcpu_free_chunk	mm/percpu.c	/^static void pcpu_free_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_free_pages	mm/percpu-vm.c	/^static void pcpu_free_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_free_vm_areas	mm/vmalloc.c	/^void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms)$/;"	f
pcpu_get_page_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_get_page_chunk(struct page *page)$/;"	f	file:
pcpu_get_pages_and_bitmap	mm/percpu-vm.c	/^static struct page **pcpu_get_pages_and_bitmap(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_get_vm_areas	mm/vmalloc.c	/^struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,$/;"	f
pcpu_map_pages	mm/percpu-vm.c	/^static int pcpu_map_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_mem_free	mm/percpu.c	/^static void pcpu_mem_free(void *ptr, size_t size)$/;"	f	file:
pcpu_mem_zalloc	mm/percpu.c	/^static void *pcpu_mem_zalloc(size_t size)$/;"	f	file:
pcpu_need_to_extend	mm/percpu.c	/^static int pcpu_need_to_extend(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_next_pop	mm/percpu.c	/^static void __maybe_unused pcpu_next_pop(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_next_unpop	mm/percpu.c	/^static void __maybe_unused pcpu_next_unpop(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_page_first_chunk	mm/percpu.c	/^int __init pcpu_page_first_chunk(size_t reserved_size,$/;"	f
pcpu_page_idx	mm/percpu.c	/^static int __maybe_unused pcpu_page_idx(unsigned int cpu, int page_idx)$/;"	f	file:
pcpu_populate_chunk	mm/percpu-km.c	/^static int pcpu_populate_chunk(struct pcpu_chunk *chunk, int off, int size)$/;"	f	file:
pcpu_populate_chunk	mm/percpu-vm.c	/^static int pcpu_populate_chunk(struct pcpu_chunk *chunk, int off, int size)$/;"	f	file:
pcpu_post_map_flush	mm/percpu-vm.c	/^static void pcpu_post_map_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_post_unmap_tlb_flush	mm/percpu-vm.c	/^static void pcpu_post_unmap_tlb_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_pre_unmap_flush	mm/percpu-vm.c	/^static void pcpu_pre_unmap_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_reclaim	mm/percpu.c	/^static void pcpu_reclaim(struct work_struct *work)$/;"	f	file:
pcpu_reserved_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_reserved_chunk;$/;"	v	typeref:struct:pcpu_chunk	file:
pcpu_reserved_chunk_limit	mm/percpu.c	/^static int pcpu_reserved_chunk_limit;$/;"	v	file:
pcpu_set_page_chunk	mm/percpu.c	/^static void pcpu_set_page_chunk(struct page *page, struct pcpu_chunk *pcpu)$/;"	f	file:
pcpu_setup_first_chunk	mm/percpu.c	/^int __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,$/;"	f
pcpu_size_to_slot	mm/percpu.c	/^static int pcpu_size_to_slot(int size)$/;"	f	file:
pcpu_split_block	mm/percpu.c	/^static void pcpu_split_block(struct pcpu_chunk *chunk, int i,$/;"	f	file:
pcpu_unmap_pages	mm/percpu-vm.c	/^static void pcpu_unmap_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_verify_alloc_info	mm/percpu-km.c	/^static int __init pcpu_verify_alloc_info(const struct pcpu_alloc_info *ai)$/;"	f	file:
pcpu_verify_alloc_info	mm/percpu-vm.c	/^static int __init pcpu_verify_alloc_info(const struct pcpu_alloc_info *ai)$/;"	f	file:
pdflush_proc_obsolete	mm/backing-dev.c	/^int pdflush_proc_obsolete(struct ctl_table *table, int write,$/;"	f
per_cpu_ptr_to_phys	mm/percpu.c	/^phys_addr_t per_cpu_ptr_to_phys(void *addr)$/;"	f
per_node_hstate_attr_group	mm/hugetlb.c	/^static struct attribute_group per_node_hstate_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
per_node_hstate_attrs	mm/hugetlb.c	/^static struct attribute *per_node_hstate_attrs[] = {$/;"	v	typeref:struct:attribute	file:
percpu_alloc_setup	mm/percpu.c	/^static int __init percpu_alloc_setup(char *str)$/;"	f	file:
percpu_init_late	mm/percpu.c	/^void __init percpu_init_late(void)$/;"	f
percpu_modalloc	kernel/module.c	/^static inline int percpu_modalloc(struct module *mod,$/;"	f	file:
percpu_modalloc	kernel/module.c	/^static int percpu_modalloc(struct module *mod,$/;"	f	file:
percpu_modcopy	kernel/module.c	/^static inline void percpu_modcopy(struct module *mod,$/;"	f	file:
percpu_modcopy	kernel/module.c	/^static void percpu_modcopy(struct module *mod,$/;"	f	file:
percpu_modfree	kernel/module.c	/^static inline void percpu_modfree(struct module *mod)$/;"	f	file:
percpu_modfree	kernel/module.c	/^static void percpu_modfree(struct module *mod)$/;"	f	file:
percpu_pagelist_fraction	mm/page_alloc.c	/^int percpu_pagelist_fraction;$/;"	v
percpu_pagelist_fraction_sysctl_handler	mm/page_alloc.c	/^int percpu_pagelist_fraction_sysctl_handler(ctl_table *table, int write,$/;"	f
perm_gid	kernel/auditsc.c	/^			gid_t			perm_gid;$/;"	m	struct:audit_context::__anon43::__anon45	file:
perm_mode	kernel/auditsc.c	/^			umode_t			perm_mode;$/;"	m	struct:audit_context::__anon43::__anon45	file:
perm_uid	kernel/auditsc.c	/^			uid_t			perm_uid;$/;"	m	struct:audit_context::__anon43::__anon45	file:
permitted	kernel/auditsc.c	/^	kernel_cap_t		permitted;$/;"	m	struct:audit_cap_data	file:
persistent_clock_is_local	kernel/time.c	/^int persistent_clock_is_local;$/;"	v
persistent_huge_pages	mm/hugetlb.c	1385;"	d	file:
personality	kernel/auditsc.c	/^	unsigned long	    personality;$/;"	m	struct:audit_context	file:
pfmemalloc_match	mm/slub.c	/^static inline bool pfmemalloc_match(struct page *page, gfp_t gfpflags)$/;"	f	file:
pfmemalloc_watermark_ok	mm/vmscan.c	/^static bool pfmemalloc_watermark_ok(pg_data_t *pgdat)$/;"	f	file:
pfn	mm/memory-failure.c	/^	unsigned long pfn;$/;"	m	struct:memory_failure_entry	file:
pfn_inject_exit	mm/hwpoison-inject.c	/^module_exit(pfn_inject_exit);$/;"	v
pfn_inject_exit	mm/hwpoison-inject.c	/^static void pfn_inject_exit(void)$/;"	f	file:
pfn_inject_init	mm/hwpoison-inject.c	/^module_init(pfn_inject_init);$/;"	v
pfn_inject_init	mm/hwpoison-inject.c	/^static int pfn_inject_init(void)$/;"	f	file:
pfn_max_align_down	mm/page_alloc.c	/^static unsigned long pfn_max_align_down(unsigned long pfn)$/;"	f	file:
pfn_max_align_up	mm/page_alloc.c	/^static unsigned long pfn_max_align_up(unsigned long pfn)$/;"	f	file:
pfn_to_bitidx	mm/page_alloc.c	/^static inline int pfn_to_bitidx(struct zone *zone, unsigned long pfn)$/;"	f	file:
pfn_to_virt	mm/page_alloc.c	2684;"	d	file:
pg_prot_mapsize	mm/scm.c	/^unsigned long pg_prot_mapsize = 0; \/\/ map size in unsigned long$/;"	v
pgd_clear_bad	mm/memory.c	/^void pgd_clear_bad(pgd_t *pgd)$/;"	f
pgdat_balanced	mm/vmscan.c	/^static bool pgdat_balanced(pg_data_t *pgdat, int order, int classzone_idx)$/;"	f	file:
pgdat_page_cgroup_init	mm/page_cgroup.c	/^void __meminit pgdat_page_cgroup_init(struct pglist_data *pgdat)$/;"	f
pgfault_serviced	mm/scm.c	/^unsigned long pgfault_serviced = 0;$/;"	v
pgprot_modify	mm/mprotect.c	/^static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)$/;"	f	file:
pgtable_trans_huge_deposit	mm/pgtable-generic.c	/^void pgtable_trans_huge_deposit(struct mm_struct *mm, pgtable_t pgtable)$/;"	f
pgtable_trans_huge_withdraw	mm/pgtable-generic.c	/^pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm)$/;"	f
pi_list_entry	kernel/rtmutex_common.h	/^	struct plist_node	pi_list_entry;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::plist_node
pi_mutex	kernel/futex.c	/^	struct rt_mutex pi_mutex;$/;"	m	struct:futex_pi_state	typeref:struct:futex_pi_state::rt_mutex	file:
pi_state	kernel/futex.c	/^	struct futex_pi_state *pi_state;$/;"	m	struct:futex_q	typeref:struct:futex_q::futex_pi_state	file:
pid	kernel/audit.c	/^	int pid;$/;"	m	struct:audit_reply	file:
pid	kernel/audit.h	/^	int pid;$/;"	m	struct:audit_netlink_list
pid	kernel/auditsc.c	/^			pid_t			pid;$/;"	m	struct:audit_context::__anon43::__anon50	file:
pid	kernel/auditsc.c	/^	pid_t			pid;$/;"	m	struct:audit_aux_data_capset	file:
pid	kernel/auditsc.c	/^	pid_t		    pid, ppid;$/;"	m	struct:audit_context	file:
pid	kernel/taskstats.c	/^	pid_t pid;$/;"	m	struct:listener	file:
pid	mm/kmemleak.c	/^	pid_t pid;			\/* pid of the current task *\/$/;"	m	struct:kmemleak_object	file:
pid	mm/slub.c	/^	int pid;		\/* Pid context *\/$/;"	m	struct:track	file:
pid_before	kernel/pid.c	/^static int pid_before(int base, int a, int b)$/;"	f	file:
pid_cache	kernel/pid_namespace.c	/^struct pid_cache {$/;"	s	file:
pid_count	kernel/auditsc.c	/^	int			pid_count;$/;"	m	struct:audit_aux_data_pids	file:
pid_hash	kernel/pid.c	/^static struct hlist_head *pid_hash;$/;"	v	typeref:struct:hlist_head	file:
pid_hashfn	kernel/pid.c	41;"	d	file:
pid_max	kernel/pid.c	/^int pid_max = PID_MAX_DEFAULT;$/;"	v
pid_max_max	kernel/pid.c	/^int pid_max_max = PID_MAX_LIMIT;$/;"	v
pid_max_min	kernel/pid.c	/^int pid_max_min = RESERVED_PIDS + 1;$/;"	v
pid_namespaces_init	kernel/pid_namespace.c	/^__initcall(pid_namespaces_init);$/;"	v
pid_namespaces_init	kernel/pid_namespace.c	/^static __init int pid_namespaces_init(void)$/;"	f	file:
pid_nr_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(pid_nr_ns);$/;"	v
pid_nr_ns	kernel/pid.c	/^pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns)$/;"	f
pid_ns_cachep	kernel/pid_namespace.c	/^static struct kmem_cache *pid_ns_cachep;$/;"	v	typeref:struct:kmem_cache	file:
pid_ns_ctl_handler	kernel/pid_namespace.c	/^static int pid_ns_ctl_handler(struct ctl_table *table, int write,$/;"	f	file:
pid_ns_ctl_table	kernel/pid_namespace.c	/^static struct ctl_table pid_ns_ctl_table[] = {$/;"	v	typeref:struct:ctl_table	file:
pid_task	kernel/pid.c	/^EXPORT_SYMBOL(pid_task);$/;"	v
pid_task	kernel/pid.c	/^struct task_struct *pid_task(struct pid *pid, enum pid_type type)$/;"	f
pid_vnr	kernel/pid.c	/^EXPORT_SYMBOL_GPL(pid_vnr);$/;"	v
pid_vnr	kernel/pid.c	/^pid_t pid_vnr(struct pid *pid)$/;"	f
pidhash_init	kernel/pid.c	/^void __init pidhash_init(void)$/;"	f
pidhash_shift	kernel/pid.c	/^static unsigned int pidhash_shift = 4;$/;"	v	file:
pidlist_allocate	kernel/cgroup.c	/^static void *pidlist_allocate(int count)$/;"	f	file:
pidlist_array_load	kernel/cgroup.c	/^static int pidlist_array_load(struct cgroup *cgrp, enum cgroup_filetype type,$/;"	f	file:
pidlist_free	kernel/cgroup.c	/^static void pidlist_free(void *p)$/;"	f	file:
pidlist_resize	kernel/cgroup.c	/^static void *pidlist_resize(void *p, int newcount)$/;"	f	file:
pidlist_uniq	kernel/cgroup.c	/^static int pidlist_uniq(pid_t **p, int length)$/;"	f	file:
pidmap_init	kernel/pid.c	/^void __init pidmap_init(void)$/;"	f
pidns_get	kernel/pid_namespace.c	/^static void *pidns_get(struct task_struct *task)$/;"	f	file:
pidns_install	kernel/pid_namespace.c	/^static int pidns_install(struct nsproxy *nsproxy, void *ns)$/;"	f	file:
pidns_inum	kernel/pid_namespace.c	/^static unsigned int pidns_inum(void *ns)$/;"	f	file:
pidns_operations	kernel/pid_namespace.c	/^const struct proc_ns_operations pidns_operations = {$/;"	v	typeref:struct:proc_ns_operations
pidns_put	kernel/pid_namespace.c	/^static void pidns_put(void *ns)$/;"	f	file:
pinst_has_cpu	kernel/padata.c	/^static inline int pinst_has_cpu(struct padata_instance *pinst, int cpu)$/;"	f	file:
pipe_double_lock	fs/pipe.c	/^void pipe_double_lock(struct pipe_inode_info *pipe1,$/;"	f
pipe_fcntl	fs/pipe.c	/^long pipe_fcntl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f
pipe_fs_type	fs/pipe.c	/^static struct file_system_type pipe_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
pipe_ioctl	fs/pipe.c	/^static long pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f	file:
pipe_iov_copy_from_user	fs/pipe.c	/^pipe_iov_copy_from_user(void *to, struct iovec *iov, unsigned long len,$/;"	f	file:
pipe_iov_copy_to_user	fs/pipe.c	/^pipe_iov_copy_to_user(struct iovec *iov, const void *from, unsigned long len,$/;"	f	file:
pipe_lock	fs/pipe.c	/^EXPORT_SYMBOL(pipe_lock);$/;"	v
pipe_lock	fs/pipe.c	/^void pipe_lock(struct pipe_inode_info *pipe)$/;"	f
pipe_lock_nested	fs/pipe.c	/^static void pipe_lock_nested(struct pipe_inode_info *pipe, int subclass)$/;"	f	file:
pipe_max_size	fs/pipe.c	/^unsigned int pipe_max_size = 1048576;$/;"	v
pipe_min_size	fs/pipe.c	/^unsigned int pipe_min_size = PAGE_SIZE;$/;"	v
pipe_poll	fs/pipe.c	/^pipe_poll(struct file *filp, poll_table *wait)$/;"	f	file:
pipe_proc_fn	fs/pipe.c	/^int pipe_proc_fn(struct ctl_table *table, int write, void __user *buf,$/;"	f
pipe_rdwr_fasync	fs/pipe.c	/^pipe_rdwr_fasync(int fd, struct file *filp, int on)$/;"	f	file:
pipe_rdwr_open	fs/pipe.c	/^pipe_rdwr_open(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_rdwr_release	fs/pipe.c	/^pipe_rdwr_release(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_read	fs/pipe.c	/^pipe_read(struct kiocb *iocb, const struct iovec *_iov,$/;"	f	file:
pipe_read_fasync	fs/pipe.c	/^pipe_read_fasync(int fd, struct file *filp, int on)$/;"	f	file:
pipe_read_open	fs/pipe.c	/^pipe_read_open(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_read_release	fs/pipe.c	/^pipe_read_release(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_release	fs/pipe.c	/^pipe_release(struct inode *inode, int decr, int decw)$/;"	f	file:
pipe_set_size	fs/pipe.c	/^static long pipe_set_size(struct pipe_inode_info *pipe, unsigned long nr_pages)$/;"	f	file:
pipe_to_file	fs/splice.c	/^EXPORT_SYMBOL(pipe_to_file);$/;"	v
pipe_to_file	fs/splice.c	/^int pipe_to_file(struct pipe_inode_info *pipe, struct pipe_buffer *buf,$/;"	f
pipe_to_sendpage	fs/splice.c	/^static int pipe_to_sendpage(struct pipe_inode_info *pipe,$/;"	f	file:
pipe_to_user	fs/splice.c	/^static int pipe_to_user(struct pipe_inode_info *pipe, struct pipe_buffer *buf,$/;"	f	file:
pipe_unlock	fs/pipe.c	/^EXPORT_SYMBOL(pipe_unlock);$/;"	v
pipe_unlock	fs/pipe.c	/^void pipe_unlock(struct pipe_inode_info *pipe)$/;"	f
pipe_wait	fs/pipe.c	/^void pipe_wait(struct pipe_inode_info *pipe)$/;"	f
pipe_write	fs/pipe.c	/^pipe_write(struct kiocb *iocb, const struct iovec *_iov,$/;"	f	file:
pipe_write_fasync	fs/pipe.c	/^pipe_write_fasync(int fd, struct file *filp, int on)$/;"	f	file:
pipe_write_open	fs/pipe.c	/^pipe_write_open(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_write_release	fs/pipe.c	/^pipe_write_release(struct inode *inode, struct file *filp)$/;"	f	file:
pipefs_dentry_operations	fs/pipe.c	/^static const struct dentry_operations pipefs_dentry_operations = {$/;"	v	typeref:struct:dentry_operations	file:
pipefs_dname	fs/pipe.c	/^static char *pipefs_dname(struct dentry *dentry, char *buffer, int buflen)$/;"	f	file:
pipefs_mount	fs/pipe.c	/^static struct dentry *pipefs_mount(struct file_system_type *fs_type,$/;"	f	file:
pipefs_ops	fs/pipe.c	/^static const struct super_operations pipefs_ops = {$/;"	v	typeref:struct:super_operations	file:
pkmap_count	mm/highmem.c	/^static int pkmap_count[LAST_PKMAP];$/;"	v	file:
pkmap_page_table	mm/highmem.c	/^pte_t * pkmap_page_table;$/;"	v
pm_freezing	kernel/freezer.c	/^bool pm_freezing;$/;"	v
pm_nosig_freezing	kernel/freezer.c	/^bool pm_nosig_freezing;$/;"	v
pm_power_off_prepare	kernel/sys.c	/^void (*pm_power_off_prepare)(void);$/;"	v
pm_restore_gfp_mask	mm/page_alloc.c	/^void pm_restore_gfp_mask(void)$/;"	f
pm_restrict_gfp_mask	mm/page_alloc.c	/^void pm_restrict_gfp_mask(void)$/;"	f
pm_suspended_storage	mm/page_alloc.c	/^bool pm_suspended_storage(void)$/;"	f
pmd_clear_bad	mm/memory.c	/^void pmd_clear_bad(pmd_t *pmd)$/;"	f
pmdp_clear_flush	mm/pgtable-generic.c	/^pmd_t pmdp_clear_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
pmdp_clear_flush_young	mm/pgtable-generic.c	/^int pmdp_clear_flush_young(struct vm_area_struct *vma,$/;"	f
pmdp_invalidate	mm/pgtable-generic.c	/^void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,$/;"	f
pmdp_set_access_flags	mm/pgtable-generic.c	/^int pmdp_set_access_flags(struct vm_area_struct *vma,$/;"	f
pmdp_splitting_flush	mm/pgtable-generic.c	/^void pmdp_splitting_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
pn	kernel/cpuset.c	/^	int pn;$/;"	m	struct:cpuset	file:
pointer	mm/kmemleak.c	/^	unsigned long pointer;$/;"	m	struct:kmemleak_object	file:
poison	mm/slub.c	/^SLAB_ATTR(poison);$/;"	v
poison_obj	mm/slab.c	/^static void poison_obj(struct kmem_cache *cachep, void *addr, unsigned char val)$/;"	f	file:
poison_page	mm/debug-pagealloc.c	/^static void poison_page(struct page *page)$/;"	f	file:
poison_pages	mm/debug-pagealloc.c	/^static void poison_pages(struct page *page, int n)$/;"	f	file:
poison_show	mm/slub.c	/^static ssize_t poison_show(struct kmem_cache *s, char *buf)$/;"	f	file:
poison_store	mm/slub.c	/^static ssize_t poison_store(struct kmem_cache *s,$/;"	f	file:
policy_cache	mm/mempolicy.c	/^static struct kmem_cache *policy_cache;$/;"	v	typeref:struct:kmem_cache	file:
policy_modes	mm/mempolicy.c	/^static const char * const policy_modes[] =$/;"	v	file:
policy_nodemask	mm/mempolicy.c	/^static nodemask_t *policy_nodemask(gfp_t gfp, struct mempolicy *policy)$/;"	f	file:
policy_zone	mm/mempolicy.c	/^enum zone_type policy_zone = 0;$/;"	v	typeref:enum:zone_type
policy_zonelist	mm/mempolicy.c	/^static struct zonelist *policy_zonelist(gfp_t gfp, struct mempolicy *policy,$/;"	f	file:
poll	fs/mount.h	/^	wait_queue_head_t poll;$/;"	m	struct:mnt_namespace
poll_freewait	fs/select.c	/^EXPORT_SYMBOL(poll_freewait);$/;"	v
poll_freewait	fs/select.c	/^void poll_freewait(struct poll_wqueues *pwq)$/;"	f
poll_get_entry	fs/select.c	/^static struct poll_table_entry *poll_get_entry(struct poll_wqueues *p)$/;"	f	file:
poll_initwait	fs/select.c	/^EXPORT_SYMBOL(poll_initwait);$/;"	v
poll_initwait	fs/select.c	/^void poll_initwait(struct poll_wqueues *pwq)$/;"	f
poll_list	fs/select.c	/^struct poll_list {$/;"	s	file:
poll_loop_ncalls	fs/eventpoll.c	/^static struct nested_calls poll_loop_ncalls;$/;"	v	typeref:struct:nested_calls	file:
poll_readywalk_ncalls	fs/eventpoll.c	/^static struct nested_calls poll_readywalk_ncalls;$/;"	v	typeref:struct:nested_calls	file:
poll_safewake_ncalls	fs/eventpoll.c	/^static struct nested_calls poll_safewake_ncalls;$/;"	v	typeref:struct:nested_calls	file:
poll_schedule_timeout	fs/select.c	/^EXPORT_SYMBOL(poll_schedule_timeout);$/;"	v
poll_schedule_timeout	fs/select.c	/^int poll_schedule_timeout(struct poll_wqueues *pwq, int state,$/;"	f
poll_select_copy_remaining	fs/compat.c	/^static int poll_select_copy_remaining(struct timespec *end_time, void __user *p,$/;"	f	file:
poll_select_copy_remaining	fs/select.c	/^static int poll_select_copy_remaining(struct timespec *end_time, void __user *p,$/;"	f	file:
poll_select_set_timeout	fs/select.c	/^int poll_select_set_timeout(struct timespec *to, long sec, long nsec)$/;"	f
poll_table_page	fs/select.c	/^struct poll_table_page {$/;"	s	file:
poll_wait	fs/eventpoll.c	/^	wait_queue_head_t poll_wait;$/;"	m	struct:eventpoll	file:
pollwake	fs/select.c	/^static int pollwake(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
pool	kernel/workqueue.c	/^	struct worker_pool	*pool;		\/* I: the associated pool *\/$/;"	m	struct:pool_workqueue	typeref:struct:pool_workqueue::worker_pool	file:
pool	kernel/workqueue_internal.h	/^	struct worker_pool	*pool;		\/* I: the associated pool *\/$/;"	m	struct:worker	typeref:struct:worker::worker_pool
pool_alloc_page	mm/dmapool.c	/^static struct dma_page *pool_alloc_page(struct dma_pool *pool, gfp_t mem_flags)$/;"	f	file:
pool_find_page	mm/dmapool.c	/^static struct dma_page *pool_find_page(struct dma_pool *pool, dma_addr_t dma)$/;"	f	file:
pool_free_page	mm/dmapool.c	/^static void pool_free_page(struct dma_pool *pool, struct dma_page *page)$/;"	f	file:
pool_initialise_page	mm/dmapool.c	/^static void pool_initialise_page(struct dma_pool *pool, struct dma_page *page)$/;"	f	file:
pool_mayday_timeout	kernel/workqueue.c	/^static void pool_mayday_timeout(unsigned long __pool)$/;"	f	file:
pool_workqueue	kernel/workqueue.c	/^struct pool_workqueue {$/;"	s	file:
pool_wq	kernel/workqueue.c	/^	} pool_wq;				\/* I: pwq's *\/$/;"	m	struct:workqueue_struct	typeref:union:workqueue_struct::__anon66	file:
pools	mm/dmapool.c	/^	struct list_head pools;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::list_head	file:
populated	mm/percpu.c	/^	unsigned long		populated[];	\/* populated bitmap *\/$/;"	m	struct:pcpu_chunk	file:
port	fs/compat_ioctl.c	/^        compat_uint_t   port;$/;"	m	struct:serial_struct32	file:
port_high	fs/compat_ioctl.c	/^        unsigned int    port_high;$/;"	m	struct:serial_struct32	file:
pos	kernel/kallsyms.c	/^	loff_t pos;$/;"	m	struct:kallsym_iter	file:
pos2maj_hash	fs/ext3/dir.c	/^static inline __u32 pos2maj_hash(struct file *filp, loff_t pos)$/;"	f	file:
pos2min_hash	fs/ext3/dir.c	/^static inline __u32 pos2min_hash(struct file *filp, loff_t pos)$/;"	f	file:
pos_from_hilo	fs/read_write.c	/^static inline loff_t pos_from_hilo(unsigned long high, unsigned long low)$/;"	f	file:
position	mm/memcontrol.c	/^	int position;$/;"	m	struct:mem_cgroup_reclaim_iter	file:
posix_acl_alloc	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_alloc);$/;"	v
posix_acl_alloc	fs/posix_acl.c	/^posix_acl_alloc(int count, gfp_t flags)$/;"	f
posix_acl_chmod	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_chmod);$/;"	v
posix_acl_chmod	fs/posix_acl.c	/^posix_acl_chmod(struct posix_acl **acl, gfp_t gfp, umode_t mode)$/;"	f
posix_acl_chmod_masq	fs/posix_acl.c	/^static int posix_acl_chmod_masq(struct posix_acl *acl, umode_t mode)$/;"	f	file:
posix_acl_clone	fs/posix_acl.c	/^posix_acl_clone(const struct posix_acl *acl, gfp_t flags)$/;"	f	file:
posix_acl_create	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_create);$/;"	v
posix_acl_create	fs/posix_acl.c	/^posix_acl_create(struct posix_acl **acl, gfp_t gfp, umode_t *mode_p)$/;"	f
posix_acl_create_masq	fs/posix_acl.c	/^static int posix_acl_create_masq(struct posix_acl *acl, umode_t *mode_p)$/;"	f	file:
posix_acl_equiv_mode	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_equiv_mode);$/;"	v
posix_acl_equiv_mode	fs/posix_acl.c	/^posix_acl_equiv_mode(const struct posix_acl *acl, umode_t *mode_p)$/;"	f
posix_acl_fix_xattr_from_user	fs/xattr_acl.c	/^void posix_acl_fix_xattr_from_user(void *value, size_t size)$/;"	f
posix_acl_fix_xattr_to_user	fs/xattr_acl.c	/^void posix_acl_fix_xattr_to_user(void *value, size_t size)$/;"	f
posix_acl_fix_xattr_userns	fs/xattr_acl.c	/^static void posix_acl_fix_xattr_userns($/;"	f	file:
posix_acl_from_mode	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_from_mode);$/;"	v
posix_acl_from_mode	fs/posix_acl.c	/^posix_acl_from_mode(umode_t mode, gfp_t flags)$/;"	f
posix_acl_from_xattr	fs/xattr_acl.c	/^EXPORT_SYMBOL (posix_acl_from_xattr);$/;"	v
posix_acl_from_xattr	fs/xattr_acl.c	/^posix_acl_from_xattr(struct user_namespace *user_ns,$/;"	f
posix_acl_init	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_init);$/;"	v
posix_acl_init	fs/posix_acl.c	/^posix_acl_init(struct posix_acl *acl, int count)$/;"	f
posix_acl_permission	fs/posix_acl.c	/^posix_acl_permission(struct inode *inode, const struct posix_acl *acl, int want)$/;"	f
posix_acl_to_xattr	fs/xattr_acl.c	/^EXPORT_SYMBOL (posix_acl_to_xattr);$/;"	v
posix_acl_to_xattr	fs/xattr_acl.c	/^posix_acl_to_xattr(struct user_namespace *user_ns, const struct posix_acl *acl,$/;"	f
posix_acl_valid	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_valid);$/;"	v
posix_acl_valid	fs/posix_acl.c	/^posix_acl_valid(const struct posix_acl *acl)$/;"	f
posix_clock_realtime_adj	kernel/posix-timers.c	/^static int posix_clock_realtime_adj(const clockid_t which_clock,$/;"	f	file:
posix_clock_realtime_get	kernel/posix-timers.c	/^static int posix_clock_realtime_get(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_clock_realtime_set	kernel/posix-timers.c	/^static int posix_clock_realtime_set(const clockid_t which_clock,$/;"	f	file:
posix_clocks	kernel/posix-timers.c	/^static struct k_clock posix_clocks[MAX_CLOCKS];$/;"	v	typeref:struct:k_clock	file:
posix_cpu_clock_get	kernel/posix-cpu-timers.c	/^static int posix_cpu_clock_get(const clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_cpu_clock_getres	kernel/posix-cpu-timers.c	/^posix_cpu_clock_getres(const clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_cpu_clock_set	kernel/posix-cpu-timers.c	/^posix_cpu_clock_set(const clockid_t which_clock, const struct timespec *tp)$/;"	f	file:
posix_cpu_nsleep	kernel/posix-cpu-timers.c	/^static int posix_cpu_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
posix_cpu_nsleep_restart	kernel/posix-cpu-timers.c	/^static long posix_cpu_nsleep_restart(struct restart_block *restart_block)$/;"	f	file:
posix_cpu_timer_create	kernel/posix-cpu-timers.c	/^static int posix_cpu_timer_create(struct k_itimer *new_timer)$/;"	f	file:
posix_cpu_timer_del	kernel/posix-cpu-timers.c	/^static int posix_cpu_timer_del(struct k_itimer *timer)$/;"	f	file:
posix_cpu_timer_get	kernel/posix-cpu-timers.c	/^static void posix_cpu_timer_get(struct k_itimer *timer, struct itimerspec *itp)$/;"	f	file:
posix_cpu_timer_schedule	kernel/posix-cpu-timers.c	/^void posix_cpu_timer_schedule(struct k_itimer *timer)$/;"	f
posix_cpu_timer_set	kernel/posix-cpu-timers.c	/^static int posix_cpu_timer_set(struct k_itimer *timer, int flags,$/;"	f	file:
posix_cpu_timers_exit	kernel/posix-cpu-timers.c	/^void posix_cpu_timers_exit(struct task_struct *tsk)$/;"	f
posix_cpu_timers_exit_group	kernel/posix-cpu-timers.c	/^void posix_cpu_timers_exit_group(struct task_struct *tsk)$/;"	f
posix_cpu_timers_init	kernel/fork.c	/^static void posix_cpu_timers_init(struct task_struct *tsk)$/;"	f	file:
posix_cpu_timers_init_group	kernel/fork.c	/^static void posix_cpu_timers_init_group(struct signal_struct *sig)$/;"	f	file:
posix_get_boottime	kernel/posix-timers.c	/^static int posix_get_boottime(const clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_get_coarse_res	kernel/posix-timers.c	/^static int posix_get_coarse_res(const clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_get_monotonic_coarse	kernel/posix-timers.c	/^static int posix_get_monotonic_coarse(clockid_t which_clock,$/;"	f	file:
posix_get_monotonic_raw	kernel/posix-timers.c	/^static int posix_get_monotonic_raw(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_get_realtime_coarse	kernel/posix-timers.c	/^static int posix_get_realtime_coarse(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_ktime_get_ts	kernel/posix-timers.c	/^static int posix_ktime_get_ts(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_lock_file	fs/locks.c	/^EXPORT_SYMBOL(posix_lock_file);$/;"	v
posix_lock_file	fs/locks.c	/^int posix_lock_file(struct file *filp, struct file_lock *fl,$/;"	f
posix_lock_file_wait	fs/locks.c	/^EXPORT_SYMBOL(posix_lock_file_wait);$/;"	v
posix_lock_file_wait	fs/locks.c	/^int posix_lock_file_wait(struct file *filp, struct file_lock *fl)$/;"	f
posix_lock_to_flock	fs/locks.c	/^static int posix_lock_to_flock(struct flock *flock, struct file_lock *fl)$/;"	f	file:
posix_lock_to_flock64	fs/locks.c	/^static void posix_lock_to_flock64(struct flock64 *flock, struct file_lock *fl)$/;"	f	file:
posix_locks_conflict	fs/locks.c	/^static int posix_locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)$/;"	f	file:
posix_locks_deadlock	fs/locks.c	/^static int posix_locks_deadlock(struct file_lock *caller_fl,$/;"	f	file:
posix_same_owner	fs/locks.c	/^static int posix_same_owner(struct file_lock *fl1, struct file_lock *fl2)$/;"	f	file:
posix_test_lock	fs/locks.c	/^EXPORT_SYMBOL(posix_test_lock);$/;"	v
posix_test_lock	fs/locks.c	/^posix_test_lock(struct file *filp, struct file_lock *fl)$/;"	f
posix_timer_event	kernel/posix-timers.c	/^EXPORT_SYMBOL_GPL(posix_timer_event);$/;"	v
posix_timer_event	kernel/posix-timers.c	/^int posix_timer_event(struct k_itimer *timr, int si_private)$/;"	f
posix_timer_fn	kernel/posix-timers.c	/^static enum hrtimer_restart posix_timer_fn(struct hrtimer *timer)$/;"	f	file:
posix_timers_cache	kernel/posix-timers.c	/^static struct kmem_cache *posix_timers_cache;$/;"	v	typeref:struct:kmem_cache	file:
posix_timers_id	kernel/posix-timers.c	/^static struct idr posix_timers_id;$/;"	v	typeref:struct:idr	file:
posix_timers_register_clock	kernel/posix-timers.c	/^EXPORT_SYMBOL_GPL(posix_timers_register_clock);$/;"	v
posix_timers_register_clock	kernel/posix-timers.c	/^void posix_timers_register_clock(const clockid_t clock_id,$/;"	f
posix_unblock_lock	fs/locks.c	/^EXPORT_SYMBOL(posix_unblock_lock);$/;"	v
posix_unblock_lock	fs/locks.c	/^posix_unblock_lock(struct file *filp, struct file_lock *waiter)$/;"	f
post_relocation	kernel/module.c	/^static int post_relocation(struct module *mod, const struct load_info *info)$/;"	f	file:
posth_val	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
poweroff_cmd	kernel/sys.c	/^char poweroff_cmd[POWEROFF_CMD_PATH_LEN] = "\/sbin\/poweroff";$/;"	v
poweroff_force	kernel/sys.c	/^static bool poweroff_force;$/;"	v	file:
poweroff_work_func	kernel/sys.c	/^static void poweroff_work_func(struct work_struct *work)$/;"	f	file:
ppc_rtas	kernel/sys_ni.c	/^cond_syscall(ppc_rtas);$/;"	v
ppg_tracker	mm/scm.c	/^bool ppg_tracker = false;$/;"	v
ppgtable_user	mm/scm.h	/^}ppgtable_user;$/;"	t	typeref:struct:__anon15
ppgtbl	mm/scm.c	/^ppgtable_user ppgtbl[MAXUSERS];$/;"	v
ppgtbl_index	mm/scm.c	/^unsigned long ppgtbl_index = 0;$/;"	v
ppgtbl_lock	mm/scm.c	/^DEFINE_MUTEX(ppgtbl_lock);$/;"	v
ppid	kernel/auditsc.c	/^	pid_t		    pid, ppid;$/;"	m	struct:audit_context	file:
ppmd	mm/memory.c	/^unsigned long ppmd;$/;"	v
ppmd_tracker	mm/memory.c	/^bool ppmd_tracker;$/;"	v
ppp_gidle	fs/compat_ioctl.c	/^static int ppp_gidle(unsigned int fd, unsigned int cmd,$/;"	f	file:
ppp_idle32	fs/compat_ioctl.c	/^struct ppp_idle32 {$/;"	s	file:
ppp_option_data32	fs/compat_ioctl.c	/^struct ppp_option_data32 {$/;"	s	file:
ppp_scompress	fs/compat_ioctl.c	/^static int ppp_scompress(unsigned int fd, unsigned int cmd,$/;"	f	file:
ppp_sock_fprog_ioctl_trans	fs/compat_ioctl.c	/^static int ppp_sock_fprog_ioctl_trans(unsigned int fd, unsigned int cmd,$/;"	f	file:
ppud	mm/scm.h	/^	pud_t *ppud;$/;"	m	struct:__anon15
pr_fmt	kernel/resource.c	10;"	d	file:
pr_fmt	kernel/watchdog.c	12;"	d	file:
pr_fmt	mm/kmemleak.c	64;"	d	file:
prctl_get_seccomp	kernel/seccomp.c	/^long prctl_get_seccomp(void)$/;"	f
prctl_get_tid_address	kernel/sys.c	/^static int prctl_get_tid_address(struct task_struct *me, int __user **tid_addr)$/;"	f	file:
prctl_set_mm	kernel/sys.c	/^static int prctl_set_mm(int opt, unsigned long addr,$/;"	f	file:
prctl_set_mm_exe_file	kernel/sys.c	/^static int prctl_set_mm_exe_file(struct mm_struct *mm, unsigned int fd)$/;"	f	file:
prctl_set_seccomp	kernel/seccomp.c	/^long prctl_set_seccomp(unsigned long seccomp_mode, char __user *filter)$/;"	f
pre_handler_kretprobe	kernel/kprobes.c	/^static int __kprobes pre_handler_kretprobe(struct kprobe *p,$/;"	f	file:
pread64	fs/read_write.c	/^SYSCALL_DEFINE(pread64)(unsigned int fd, char __user *buf,$/;"	f
preallocated_names	kernel/auditsc.c	/^	struct audit_names  preallocated_names[AUDIT_NAMES];$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_names	file:
precharge	mm/memcontrol.c	/^	unsigned long precharge;$/;"	m	struct:move_charge_struct	file:
preemptible	kernel/rcutree.h	/^	bool		preemptible;	\/* Preemptible RCU? *\/$/;"	m	struct:rcu_data
preferred_console	kernel/printk.c	/^static int preferred_console = -1;$/;"	v	file:
preferred_node_policy	mm/mempolicy.c	/^static struct mempolicy preferred_node_policy[MAX_NUMNODES];$/;"	v	typeref:struct:mempolicy	file:
prefetch_freepointer	mm/slub.c	/^static void prefetch_freepointer(const struct kmem_cache *s, void *object)$/;"	f	file:
prefetch_prev_lru_page	mm/vmscan.c	100;"	d	file:
prefetch_prev_lru_page	mm/vmscan.c	110;"	d	file:
prefetchw_prev_lru_page	mm/vmscan.c	114;"	d	file:
prefetchw_prev_lru_page	mm/vmscan.c	124;"	d	file:
preh_val	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
prep_compound_gigantic_page	mm/hugetlb.c	/^static void prep_compound_gigantic_page(struct page *page, unsigned long order)$/;"	f	file:
prep_compound_huge_page	mm/hugetlb.c	/^static void prep_compound_huge_page(struct page *page, int order)$/;"	f	file:
prep_compound_page	mm/page_alloc.c	/^void prep_compound_page(struct page *page, unsigned long order)$/;"	f
prep_new_huge_page	mm/hugetlb.c	/^static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)$/;"	f	file:
prep_new_page	mm/page_alloc.c	/^static int prep_new_page(struct page *page, int order, gfp_t gfp_flags)$/;"	f	file:
prep_zero_page	mm/page_alloc.c	/^static inline void prep_zero_page(struct page *page, int order, gfp_t gfp_flags)$/;"	f	file:
prepare_binprm	fs/exec.c	/^EXPORT_SYMBOL(prepare_binprm);$/;"	v
prepare_binprm	fs/exec.c	/^int prepare_binprm(struct linux_binprm *bprm)$/;"	f
prepare_bprm_creds	fs/exec.c	/^int prepare_bprm_creds(struct linux_binprm *bprm)$/;"	f
prepare_creds	kernel/cred.c	/^EXPORT_SYMBOL(prepare_creds);$/;"	v
prepare_creds	kernel/cred.c	/^struct cred *prepare_creds(void)$/;"	f
prepare_exec_creds	kernel/cred.c	/^struct cred *prepare_exec_creds(void)$/;"	f
prepare_kernel_cred	kernel/cred.c	/^EXPORT_SYMBOL(prepare_kernel_cred);$/;"	v
prepare_kernel_cred	kernel/cred.c	/^struct cred *prepare_kernel_cred(struct task_struct *daemon)$/;"	f
prepare_kprobe	kernel/kprobes.c	/^static int __kprobes prepare_kprobe(struct kprobe *p)$/;"	f	file:
prepare_kprobe	kernel/kprobes.c	979;"	d	file:
prepare_kswapd_sleep	mm/vmscan.c	/^static bool prepare_kswapd_sleep(pg_data_t *pgdat, int order, long remaining,$/;"	f	file:
prepare_optimized_kprobe	kernel/kprobes.c	/^static __kprobes void prepare_optimized_kprobe(struct kprobe *p)$/;"	f	file:
prepare_optimized_kprobe	kernel/kprobes.c	907;"	d	file:
prepare_reply	kernel/taskstats.c	/^static int prepare_reply(struct genl_info *info, u8 cmd, struct sk_buff **skbp,$/;"	f	file:
prepare_signal	kernel/signal.c	/^static int prepare_signal(int sig, struct task_struct *p, bool force)$/;"	f	file:
prepare_to_wait	kernel/wait.c	/^EXPORT_SYMBOL(prepare_to_wait);$/;"	v
prepare_to_wait	kernel/wait.c	/^prepare_to_wait(wait_queue_head_t *q, wait_queue_t *wait, int state)$/;"	f
prepare_to_wait_exclusive	kernel/wait.c	/^EXPORT_SYMBOL(prepare_to_wait_exclusive);$/;"	v
prepare_to_wait_exclusive	kernel/wait.c	/^prepare_to_wait_exclusive(wait_queue_head_t *q, wait_queue_t *wait, int state)$/;"	f
prepend	fs/dcache.c	/^static int prepend(char **buffer, int *buflen, const char *str, int namelen)$/;"	f	file:
prepend_name	fs/dcache.c	/^static int prepend_name(char **buffer, int *buflen, struct qstr *name)$/;"	f	file:
prepend_path	fs/dcache.c	/^static int prepend_path(const struct path *path,$/;"	f	file:
prepend_unreachable	fs/dcache.c	/^static int prepend_unreachable(char **buffer, int *buflen)$/;"	f	file:
prev	kernel/printk.c	/^	enum log_flags prev;$/;"	m	struct:devkmsg_user	typeref:enum:devkmsg_user::log_flags	file:
prev	kernel/seccomp.c	/^	struct seccomp_filter *prev;$/;"	m	struct:seccomp_filter	typeref:struct:seccomp_filter::seccomp_filter	file:
previous	fs/compat.c	/^	struct compat_linux_dirent __user *previous;$/;"	m	struct:compat_getdents_callback	typeref:struct:compat_getdents_callback::__user	file:
previous	fs/compat.c	/^	struct linux_dirent64 __user *previous;$/;"	m	struct:compat_getdents_callback64	typeref:struct:compat_getdents_callback64::__user	file:
previous	fs/readdir.c	/^	struct linux_dirent __user * previous;$/;"	m	struct:getdents_callback	typeref:struct:getdents_callback::__user	file:
previous	fs/readdir.c	/^	struct linux_dirent64 __user * previous;$/;"	m	struct:getdents_callback64	typeref:struct:getdents_callback64::__user	file:
primary	mm/memcontrol.c	/^	struct mem_cgroup_threshold_ary *primary;$/;"	m	struct:mem_cgroup_thresholds	typeref:struct:mem_cgroup_thresholds::mem_cgroup_threshold_ary	file:
print_bad_irq_dependency	kernel/lockdep.c	/^print_bad_irq_dependency(struct task_struct *curr,$/;"	f	file:
print_bad_pte	mm/memory.c	/^static void print_bad_pte(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
print_bfs_bug	kernel/lockdep.c	/^static noinline int print_bfs_bug(int ret)$/;"	f	file:
print_circular_bug	kernel/lockdep.c	/^static noinline int print_circular_bug(struct lock_list *this,$/;"	f	file:
print_circular_bug_entry	kernel/lockdep.c	/^print_circular_bug_entry(struct lock_list *target, int depth)$/;"	f	file:
print_circular_bug_header	kernel/lockdep.c	/^print_circular_bug_header(struct lock_list *entry, unsigned int depth,$/;"	f	file:
print_circular_lock_scenario	kernel/lockdep.c	/^print_circular_lock_scenario(struct held_lock *src,$/;"	f	file:
print_cpu_stall	kernel/rcutree.c	/^static void print_cpu_stall(struct rcu_state *rsp)$/;"	f	file:
print_cpu_stall_fast_no_hz	kernel/rcutree_plugin.h	/^static void print_cpu_stall_fast_no_hz(char *cp, int cpu)$/;"	f
print_cpu_stall_info	kernel/rcutree_plugin.h	/^static void print_cpu_stall_info(struct rcu_state *rsp, int cpu)$/;"	f
print_cpu_stall_info_begin	kernel/rcutree_plugin.h	/^static void print_cpu_stall_info_begin(void)$/;"	f
print_cpu_stall_info_end	kernel/rcutree_plugin.h	/^static void print_cpu_stall_info_end(void)$/;"	f
print_deadlock_bug	kernel/lockdep.c	/^print_deadlock_bug(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
print_deadlock_scenario	kernel/lockdep.c	/^print_deadlock_scenario(struct held_lock *nxt,$/;"	f	file:
print_dropped_signal	kernel/signal.c	/^static inline void print_dropped_signal(int sig)$/;"	f	file:
print_fatal_signal	kernel/signal.c	/^static void print_fatal_signal(int signr)$/;"	f	file:
print_freed_lock_bug	kernel/lockdep.c	/^print_freed_lock_bug(struct task_struct *curr, const void *mem_from,$/;"	f	file:
print_held_locks_bug	kernel/lockdep.c	/^static void print_held_locks_bug(struct task_struct *curr)$/;"	f	file:
print_irq_inversion_bug	kernel/lockdep.c	/^print_irq_inversion_bug(struct task_struct *curr,$/;"	f	file:
print_irq_lock_scenario	kernel/lockdep.c	/^print_irq_lock_scenario(struct lock_list *safe_entry,$/;"	f	file:
print_irqtrace_events	kernel/lockdep.c	/^void print_irqtrace_events(struct task_struct *curr)$/;"	f
print_kernel_ident	kernel/lockdep.c	/^static void print_kernel_ident(void)$/;"	f	file:
print_lock	kernel/lockdep.c	/^static void print_lock(struct held_lock *hlock)$/;"	f	file:
print_lock_class_header	kernel/lockdep.c	/^static void print_lock_class_header(struct lock_class *class, int depth)$/;"	f	file:
print_lock_contention_bug	kernel/lockdep.c	/^print_lock_contention_bug(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
print_lock_name	kernel/lockdep.c	/^static void print_lock_name(struct lock_class *class)$/;"	f	file:
print_lock_nested_lock_not_held	kernel/lockdep.c	/^print_lock_nested_lock_not_held(struct task_struct *curr,$/;"	f	file:
print_lockdep_cache	kernel/lockdep.c	/^static void print_lockdep_cache(struct lockdep_map *lock)$/;"	f	file:
print_log_trace	mm/kmemleak.c	/^static void __init print_log_trace(struct early_log *log)$/;"	f	file:
print_modules	kernel/module.c	/^void print_modules(void)$/;"	f
print_name	kernel/lockdep_proc.c	/^static void print_name(struct seq_file *m, struct lock_class *class)$/;"	f	file:
print_objinfo	mm/slab.c	/^static void print_objinfo(struct kmem_cache *cachep, void *objp, int lines)$/;"	f	file:
print_one_rcu_data	kernel/rcutree_trace.c	/^static void print_one_rcu_data(struct seq_file *m, struct rcu_data *rdp)$/;"	f	file:
print_one_rcu_node_boost	kernel/rcutree_trace.c	/^static void print_one_rcu_node_boost(struct seq_file *m, struct rcu_node *rnp)$/;"	f	file:
print_one_rcu_pending	kernel/rcutree_trace.c	/^static void print_one_rcu_pending(struct seq_file *m, struct rcu_data *rdp)$/;"	f	file:
print_one_rcu_state	kernel/rcutree_trace.c	/^static void print_one_rcu_state(struct seq_file *m, struct rcu_state *rsp)$/;"	f	file:
print_oops_end_marker	kernel/panic.c	/^void print_oops_end_marker(void)$/;"	f
print_other_cpu_stall	kernel/rcutree.c	/^static void print_other_cpu_stall(struct rcu_state *rsp)$/;"	f	file:
print_page_info	mm/slub.c	/^static void print_page_info(struct page *page)$/;"	f	file:
print_prefix	kernel/printk.c	/^static size_t print_prefix(const struct log *msg, bool syslog, char *buf)$/;"	f	file:
print_section	mm/slub.c	/^static void print_section(char *text, u8 *addr, unsigned int length)$/;"	f	file:
print_shortest_lock_dependencies	kernel/lockdep.c	/^print_shortest_lock_dependencies(struct lock_list *leaf,$/;"	f	file:
print_slabinfo_header	mm/slab_common.c	/^void print_slabinfo_header(struct seq_file *m)$/;"	f
print_stack_trace	kernel/stacktrace.c	/^EXPORT_SYMBOL_GPL(print_stack_trace);$/;"	v
print_stack_trace	kernel/stacktrace.c	/^void print_stack_trace(struct stack_trace *trace, int spaces)$/;"	f
print_tainted	kernel/panic.c	/^const char *print_tainted(void)$/;"	f
print_time	kernel/printk.c	/^static size_t print_time(u64 ts, char *buf)$/;"	f	file:
print_track	mm/slub.c	/^static void print_track(const char *s, struct track *t)$/;"	f	file:
print_tracking	mm/slub.c	/^static void print_tracking(struct kmem_cache *s, void *object)$/;"	f	file:
print_trailer	mm/slub.c	/^static void print_trailer(struct kmem_cache *s, struct page *page, u8 *p)$/;"	f	file:
print_unload_info	kernel/module.c	/^static inline void print_unload_info(struct seq_file *m, struct module *mod)$/;"	f	file:
print_unlock_imbalance_bug	kernel/lockdep.c	/^print_unlock_imbalance_bug(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
print_unreferenced	mm/kmemleak.c	/^static void print_unreferenced(struct seq_file *seq,$/;"	f	file:
print_usage_bug	kernel/lockdep.c	/^print_usage_bug(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
print_usage_bug_scenario	kernel/lockdep.c	/^print_usage_bug_scenario(struct held_lock *lock)$/;"	f	file:
print_vma_addr	mm/memory.c	/^void print_vma_addr(char *prefix, unsigned long ip)$/;"	f
printable	fs/exec.c	1431;"	d	file:
printk	kernel/printk.c	/^EXPORT_SYMBOL(printk);$/;"	v
printk	kernel/printk.c	/^asmlinkage int printk(const char *fmt, ...)$/;"	f
printk_buf	kernel/rcutorture.c	/^static char printk_buf[4096];$/;"	v	file:
printk_delay	kernel/printk.c	/^static inline void printk_delay(void)$/;"	f	file:
printk_emit	kernel/printk.c	/^EXPORT_SYMBOL(printk_emit);$/;"	v
printk_emit	kernel/printk.c	/^asmlinkage int printk_emit(int facility, int level,$/;"	f
printk_late_init	kernel/printk.c	/^late_initcall(printk_late_init);$/;"	v
printk_late_init	kernel/printk.c	/^static int __init printk_late_init(void)$/;"	f	file:
printk_lock	kernel/rtmutex-debug.c	/^static void printk_lock(struct rt_mutex *lock, int print_owner)$/;"	f	file:
printk_sched	kernel/printk.c	/^int printk_sched(const char *fmt, ...)$/;"	f
printk_task	kernel/rtmutex-debug.c	/^static void printk_task(struct task_struct *p)$/;"	f	file:
printk_time	kernel/printk.c	/^static bool printk_time = 1;$/;"	v	file:
printk_time	kernel/printk.c	/^static bool printk_time;$/;"	v	file:
printk_timed_ratelimit	kernel/printk.c	/^EXPORT_SYMBOL(printk_timed_ratelimit);$/;"	v
printk_timed_ratelimit	kernel/printk.c	/^bool printk_timed_ratelimit(unsigned long *caller_jiffies,$/;"	f
prio	kernel/auditsc.c	/^	u64		    prio;$/;"	m	struct:audit_context	file:
prio_high	kernel/auditfilter.c	/^static u64 prio_high = ~0ULL\/2 - 1;$/;"	v	file:
prio_low	kernel/auditfilter.c	/^static u64 prio_low = ~0ULL\/2;$/;"	v	file:
priority	mm/vmscan.c	/^	int priority;$/;"	m	struct:scan_control	file:
private	fs/direct-io.c	/^	void *private;			\/* copy from map_bh.b_private *\/$/;"	m	struct:dio	file:
probe_kernel_read	mm/maccess.c	/^EXPORT_SYMBOL_GPL(probe_kernel_read);$/;"	v
probe_kernel_write	mm/maccess.c	/^EXPORT_SYMBOL_GPL(probe_kernel_write);$/;"	v
probes	kernel/tracepoint.c	/^	struct tracepoint_func probes[0];$/;"	m	struct:tp_probes	typeref:struct:tp_probes::tracepoint_func	file:
problem	fs/compat_ioctl.c	/^	char problem;$/;"	m	struct:compat_sg_req_info	file:
proc_caches_init	kernel/fork.c	/^void __init proc_caches_init(void)$/;"	f
proc_cap_handler	kernel/kmod.c	/^static int proc_cap_handler(struct ctl_table *table, int write,$/;"	f	file:
proc_cgroup_operations	kernel/cgroup.c	/^const struct file_operations proc_cgroup_operations = {$/;"	v	typeref:struct:file_operations
proc_cgroup_show	kernel/cgroup.c	/^static int proc_cgroup_show(struct seq_file *m, void *v)$/;"	f	file:
proc_cgroupstats_operations	kernel/cgroup.c	/^static const struct file_operations proc_cgroupstats_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_cgroupstats_operations	kernel/cgroup.c	/^static const struct file_operations proc_cgroupstats_operations;$/;"	v	typeref:struct:file_operations	file:
proc_cgroupstats_show	kernel/cgroup.c	/^static int proc_cgroupstats_show(struct seq_file *m, void *v)$/;"	f	file:
proc_cleanup_work	kernel/pid_namespace.c	/^static void proc_cleanup_work(struct work_struct *work)$/;"	f	file:
proc_cpuset_operations	kernel/cpuset.c	/^const struct file_operations proc_cpuset_operations = {$/;"	v	typeref:struct:file_operations
proc_cpuset_show	kernel/cpuset.c	/^static int proc_cpuset_show(struct seq_file *m, void *unused_v)$/;"	f	file:
proc_dma_init	kernel/dma.c	/^__initcall(proc_dma_init);$/;"	v
proc_dma_init	kernel/dma.c	/^static int __init proc_dma_init(void)$/;"	f	file:
proc_dma_open	kernel/dma.c	/^static int proc_dma_open(struct inode *inode, struct file *file)$/;"	f	file:
proc_dma_operations	kernel/dma.c	/^static const struct file_operations proc_dma_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_dma_show	kernel/dma.c	/^static int proc_dma_show(struct seq_file *m, void *v)$/;"	f	file:
proc_do_cad_pid	kernel/sysctl.c	/^static int proc_do_cad_pid(struct ctl_table *table, int write,$/;"	f	file:
proc_do_large_bitmap	kernel/sysctl.c	/^int proc_do_large_bitmap(struct ctl_table *table, int write,$/;"	f
proc_do_uts_string	kernel/utsname_sysctl.c	/^static int proc_do_uts_string(ctl_table *table, int write,$/;"	f	file:
proc_do_uts_string	kernel/utsname_sysctl.c	63;"	d	file:
proc_dohung_task_timeout_secs	kernel/hung_task.c	/^int proc_dohung_task_timeout_secs(struct ctl_table *table, int write,$/;"	f
proc_dointvec	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec);$/;"	v
proc_dointvec	kernel/sysctl.c	/^int proc_dointvec(struct ctl_table *table, int write,$/;"	f
proc_dointvec_jiffies	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_jiffies);$/;"	v
proc_dointvec_jiffies	kernel/sysctl.c	/^int proc_dointvec_jiffies(struct ctl_table *table, int write,$/;"	f
proc_dointvec_minmax	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_minmax);$/;"	v
proc_dointvec_minmax	kernel/sysctl.c	/^int proc_dointvec_minmax(struct ctl_table *table, int write,$/;"	f
proc_dointvec_minmax_coredump	kernel/sysctl.c	/^static int proc_dointvec_minmax_coredump(struct ctl_table *table, int write,$/;"	f	file:
proc_dointvec_minmax_sysadmin	kernel/sysctl.c	/^static int proc_dointvec_minmax_sysadmin(struct ctl_table *table, int write,$/;"	f	file:
proc_dointvec_ms_jiffies	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_ms_jiffies);$/;"	v
proc_dointvec_ms_jiffies	kernel/sysctl.c	/^int proc_dointvec_ms_jiffies(struct ctl_table *table, int write,$/;"	f
proc_dointvec_userhz_jiffies	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_userhz_jiffies);$/;"	v
proc_dointvec_userhz_jiffies	kernel/sysctl.c	/^int proc_dointvec_userhz_jiffies(struct ctl_table *table, int write,$/;"	f
proc_dostring	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dostring);$/;"	v
proc_dostring	kernel/sysctl.c	/^int proc_dostring(struct ctl_table *table, int write,$/;"	f
proc_dostring_coredump	kernel/sysctl.c	/^static int proc_dostring_coredump(struct ctl_table *table, int write,$/;"	f	file:
proc_doulongvec_minmax	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_doulongvec_minmax);$/;"	v
proc_doulongvec_minmax	kernel/sysctl.c	/^int proc_doulongvec_minmax(struct ctl_table *table, int write,$/;"	f
proc_doulongvec_ms_jiffies_minmax	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_doulongvec_ms_jiffies_minmax);$/;"	v
proc_doulongvec_ms_jiffies_minmax	kernel/sysctl.c	/^int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int write,$/;"	f
proc_dowatchdog	kernel/watchdog.c	/^int proc_dowatchdog(struct ctl_table *table, int write,$/;"	f
proc_execdomains_init	kernel/exec_domain.c	/^module_init(proc_execdomains_init);$/;"	v
proc_execdomains_init	kernel/exec_domain.c	/^static int __init proc_execdomains_init(void)$/;"	f	file:
proc_filesystems_init	fs/filesystems.c	/^module_init(proc_filesystems_init);$/;"	v
proc_filesystems_init	fs/filesystems.c	/^static int __init proc_filesystems_init(void)$/;"	f	file:
proc_fs_info	fs/proc_namespace.c	/^struct proc_fs_info {$/;"	s	file:
proc_get_long	kernel/sysctl.c	/^static int proc_get_long(char **buf, size_t *size,$/;"	f	file:
proc_gid_map_write	kernel/user_namespace.c	/^ssize_t proc_gid_map_write(struct file *file, const char __user *buf, size_t size, loff_t *ppos)$/;"	f
proc_gid_seq_operations	kernel/user_namespace.c	/^struct seq_operations proc_gid_seq_operations = {$/;"	v	typeref:struct:seq_operations
proc_inum	fs/mount.h	/^	unsigned int		proc_inum;$/;"	m	struct:mnt_namespace
proc_iomem_operations	kernel/resource.c	/^static const struct file_operations proc_iomem_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_ioports_operations	kernel/resource.c	/^static const struct file_operations proc_ioports_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_kprobes_optimization_handler	kernel/kprobes.c	/^int proc_kprobes_optimization_handler(struct ctl_table *table, int write,$/;"	f
proc_lock_stat_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lock_stat_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lockdep_chains_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lockdep_chains_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lockdep_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lockdep_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lockdep_stats_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lockdep_stats_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_locks_init	fs/locks.c	/^module_init(proc_locks_init);$/;"	v
proc_locks_init	fs/locks.c	/^static int __init proc_locks_init(void)$/;"	f	file:
proc_locks_operations	fs/locks.c	/^static const struct file_operations proc_locks_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_modules_init	kernel/module.c	/^module_init(proc_modules_init);$/;"	v
proc_modules_init	kernel/module.c	/^static int __init proc_modules_init(void)$/;"	f	file:
proc_modules_operations	kernel/module.c	/^static const struct file_operations proc_modules_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_mountinfo_operations	fs/proc_namespace.c	/^const struct file_operations proc_mountinfo_operations = {$/;"	v	typeref:struct:file_operations
proc_mounts	fs/mount.h	/^struct proc_mounts {$/;"	s
proc_mounts	fs/mount.h	86;"	d
proc_mounts_operations	fs/proc_namespace.c	/^const struct file_operations proc_mounts_operations = {$/;"	v	typeref:struct:file_operations
proc_mountstats_operations	fs/proc_namespace.c	/^const struct file_operations proc_mountstats_operations = {$/;"	v	typeref:struct:file_operations
proc_nr_dentry	fs/dcache.c	/^int proc_nr_dentry(ctl_table *table, int write, void __user *buffer,$/;"	f
proc_nr_files	fs/file_table.c	/^int proc_nr_files(ctl_table *table, int write,$/;"	f
proc_nr_inodes	fs/inode.c	/^int proc_nr_inodes(ctl_table *table, int write,$/;"	f
proc_poll_event	mm/swapfile.c	/^static atomic_t proc_poll_event = ATOMIC_INIT(0);$/;"	v	file:
proc_profile_operations	kernel/profile.c	/^static const struct file_operations proc_profile_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_projid_map_write	kernel/user_namespace.c	/^ssize_t proc_projid_map_write(struct file *file, const char __user *buf, size_t size, loff_t *ppos)$/;"	f
proc_projid_seq_operations	kernel/user_namespace.c	/^struct seq_operations proc_projid_seq_operations = {$/;"	v	typeref:struct:seq_operations
proc_put_char	kernel/sysctl.c	/^static int proc_put_char(void __user **buf, size_t *size, char c)$/;"	f	file:
proc_put_long	kernel/sysctl.c	/^static int proc_put_long(void __user **buf, size_t *size, unsigned long val,$/;"	f	file:
proc_skip_char	kernel/sysctl.c	/^static void proc_skip_char(char **buf, size_t *size, const char v)$/;"	f	file:
proc_skip_spaces	kernel/sysctl.c	/^static size_t proc_skip_spaces(char **buf)$/;"	f	file:
proc_slabinfo_operations	mm/slab_common.c	/^static const struct file_operations proc_slabinfo_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_slabstats_operations	mm/slab.c	/^static const struct file_operations proc_slabstats_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_swaps_operations	mm/swapfile.c	/^static const struct file_operations proc_swaps_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_taint	kernel/sysctl.c	/^static int proc_taint(struct ctl_table *table, int write,$/;"	f	file:
proc_uid_map_write	kernel/user_namespace.c	/^ssize_t proc_uid_map_write(struct file *file, const char __user *buf, size_t size, loff_t *ppos)$/;"	f
proc_uid_seq_operations	kernel/user_namespace.c	/^struct seq_operations proc_uid_seq_operations = {$/;"	v	typeref:struct:seq_operations
proc_vmalloc_init	mm/vmalloc.c	/^module_init(proc_vmalloc_init);$/;"	v
proc_vmalloc_init	mm/vmalloc.c	/^static int __init proc_vmalloc_init(void)$/;"	f	file:
proc_vmalloc_operations	mm/vmalloc.c	/^static const struct file_operations proc_vmalloc_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_vmstat_file_operations	mm/vmstat.c	/^static const struct file_operations proc_vmstat_file_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_wspace_sep	kernel/sysctl.c	/^static const char proc_wspace_sep[] = { ' ', '\\t', '\\n' };$/;"	v	file:
proc_zoneinfo_file_operations	mm/vmstat.c	/^static const struct file_operations proc_zoneinfo_file_operations = {$/;"	v	typeref:struct:file_operations	file:
process_cpu_clock_get	kernel/posix-cpu-timers.c	/^static int process_cpu_clock_get(const clockid_t which_clock,$/;"	f	file:
process_cpu_clock_getres	kernel/posix-cpu-timers.c	/^static int process_cpu_clock_getres(const clockid_t which_clock,$/;"	f	file:
process_cpu_nsleep	kernel/posix-cpu-timers.c	/^static int process_cpu_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
process_cpu_nsleep_restart	kernel/posix-cpu-timers.c	/^static long process_cpu_nsleep_restart(struct restart_block *restart_block)$/;"	f	file:
process_cpu_timer_create	kernel/posix-cpu-timers.c	/^static int process_cpu_timer_create(struct k_itimer *timer)$/;"	f	file:
process_scheduled_works	kernel/workqueue.c	/^static void process_scheduled_works(struct worker *worker)$/;"	f	file:
process_slab	mm/slub.c	/^static void process_slab(struct loc_track *t, struct kmem_cache *s,$/;"	f	file:
process_srcu	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(process_srcu);$/;"	v
process_srcu	kernel/srcu.c	/^void process_srcu(struct work_struct *work)$/;"	f
process_timeout	kernel/timer.c	/^static void process_timeout(unsigned long __data)$/;"	f	file:
process_vm_rw	mm/process_vm_access.c	/^static ssize_t process_vm_rw(pid_t pid,$/;"	f	file:
process_vm_rw_core	mm/process_vm_access.c	/^static ssize_t process_vm_rw_core(pid_t pid, const struct iovec *lvec,$/;"	f	file:
process_vm_rw_pages	mm/process_vm_access.c	/^static int process_vm_rw_pages(struct task_struct *task,$/;"	f	file:
process_vm_rw_single_vec	mm/process_vm_access.c	/^static int process_vm_rw_single_vec(unsigned long addr,$/;"	f	file:
procname	kernel/sysctl_binary.c	/^	const char		*procname;$/;"	m	struct:bin_table	file:
procs	kernel/compat.c	/^	u16 procs;$/;"	m	struct:compat_sysinfo	file:
procswaps_init	mm/swapfile.c	/^__initcall(procswaps_init);$/;"	v
procswaps_init	mm/swapfile.c	/^static int __init procswaps_init(void)$/;"	f	file:
prof_buffer	kernel/profile.c	/^static atomic_t *prof_buffer;$/;"	v	file:
prof_cpu_mask	kernel/profile.c	/^static cpumask_var_t prof_cpu_mask;$/;"	v	file:
prof_cpu_mask_proc_fops	kernel/profile.c	/^static const struct file_operations prof_cpu_mask_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
prof_cpu_mask_proc_open	kernel/profile.c	/^static int prof_cpu_mask_proc_open(struct inode *inode, struct file *file)$/;"	f	file:
prof_cpu_mask_proc_show	kernel/profile.c	/^static int prof_cpu_mask_proc_show(struct seq_file *m, void *v)$/;"	f	file:
prof_cpu_mask_proc_write	kernel/profile.c	/^static ssize_t prof_cpu_mask_proc_write(struct file *file,$/;"	f	file:
prof_len	kernel/profile.c	/^static unsigned long prof_len, prof_shift;$/;"	v	file:
prof_on	kernel/profile.c	/^EXPORT_SYMBOL_GPL(prof_on);$/;"	v
prof_shift	kernel/profile.c	/^static unsigned long prof_len, prof_shift;$/;"	v	file:
prof_ticks	kernel/posix-cpu-timers.c	/^static inline cputime_t prof_ticks(struct task_struct *p)$/;"	f	file:
profile_cpu_callback	kernel/profile.c	/^static int __cpuinit profile_cpu_callback(struct notifier_block *info,$/;"	f	file:
profile_cpu_callback	kernel/profile.c	395;"	d	file:
profile_discard_flip_buffers	kernel/profile.c	/^static void profile_discard_flip_buffers(void)$/;"	f	file:
profile_discard_flip_buffers	kernel/profile.c	394;"	d	file:
profile_event_register	kernel/profile.c	/^EXPORT_SYMBOL_GPL(profile_event_register);$/;"	v
profile_event_register	kernel/profile.c	/^int profile_event_register(enum profile_type type, struct notifier_block *n)$/;"	f
profile_event_unregister	kernel/profile.c	/^EXPORT_SYMBOL_GPL(profile_event_unregister);$/;"	v
profile_event_unregister	kernel/profile.c	/^int profile_event_unregister(enum profile_type type, struct notifier_block *n)$/;"	f
profile_flip_buffers	kernel/profile.c	/^static void profile_flip_buffers(void)$/;"	f	file:
profile_flip_buffers	kernel/profile.c	393;"	d	file:
profile_handoff_task	kernel/profile.c	/^int profile_handoff_task(struct task_struct *task)$/;"	f
profile_hit	kernel/profile.c	/^struct profile_hit {$/;"	s	file:
profile_hits	kernel/profile.c	/^EXPORT_SYMBOL_GPL(profile_hits);$/;"	v
profile_hits	kernel/profile.c	/^void profile_hits(int type, void *__pc, unsigned int nr_hits)$/;"	f
profile_init	kernel/profile.c	/^int __ref profile_init(void)$/;"	f
profile_munmap	kernel/profile.c	/^void profile_munmap(unsigned long addr)$/;"	f
profile_nop	kernel/profile.c	/^static void profile_nop(void *unused)$/;"	f	file:
profile_setup	kernel/profile.c	/^int profile_setup(char *str)$/;"	f
profile_task_exit	kernel/profile.c	/^void profile_task_exit(struct task_struct *task)$/;"	f
profile_tick	kernel/profile.c	/^void profile_tick(int type)$/;"	f
profiling	kernel/ksysfs.c	/^KERNEL_ATTR_RW(profiling);$/;"	v
profiling_show	kernel/ksysfs.c	/^static ssize_t profiling_show(struct kobject *kobj,$/;"	f	file:
profiling_store	kernel/ksysfs.c	/^static ssize_t profiling_store(struct kobject *kobj,$/;"	f	file:
projid_m_show	kernel/user_namespace.c	/^static int projid_m_show(struct seq_file *seq, void *v)$/;"	f	file:
projid_m_start	kernel/user_namespace.c	/^static void *projid_m_start(struct seq_file *seq, loff_t *ppos)$/;"	f	file:
propagate_mnt	fs/pnode.c	/^int propagate_mnt(struct mount *dest_mnt, struct dentry *dest_dentry,$/;"	f
propagate_mount_busy	fs/pnode.c	/^int propagate_mount_busy(struct mount *mnt, int refcnt)$/;"	f
propagate_umount	fs/pnode.c	/^int propagate_umount(struct list_head *list)$/;"	f
propagation_next	fs/pnode.c	/^static struct mount *propagation_next(struct mount *m,$/;"	f	file:
prot	mm/mmap.c	/^	unsigned long prot;$/;"	m	struct:mmap_arg_struct	file:
prot	mm/nommu.c	/^	unsigned long prot;$/;"	m	struct:mmap_arg_struct	file:
protect_vma	mm/nommu.c	/^static void protect_vma(struct vm_area_struct *vma, unsigned long flags)$/;"	f	file:
protection_map	mm/mmap.c	/^pgprot_t protection_map[16] = {$/;"	v
proto	fs/compat.c	/^	compat_int_t proto;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
prove_locking	kernel/lockdep.c	/^int prove_locking = 1;$/;"	v
prove_locking	kernel/lockdep.c	60;"	d	file:
prstatus	fs/binfmt_elf.c	/^	struct elf_prstatus *prstatus;	\/* NT_PRSTATUS *\/$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::elf_prstatus	file:
prstatus	fs/binfmt_elf.c	/^	struct elf_prstatus prstatus;	\/* NT_PRSTATUS *\/$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::elf_prstatus	file:
prstatus	fs/binfmt_elf.c	/^	struct elf_prstatus prstatus;$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::elf_prstatus	file:
prstatus	fs/binfmt_elf_fdpic.c	/^	struct elf_prstatus prstatus;	\/* NT_PRSTATUS *\/$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::elf_prstatus	file:
prune_dcache_sb	fs/dcache.c	/^void prune_dcache_sb(struct super_block *sb, int count)$/;"	f
prune_icache_sb	fs/inode.c	/^void prune_icache_sb(struct super_block *sb, int nr_to_scan)$/;"	f
prune_one	kernel/audit_tree.c	/^static void prune_one(struct audit_tree *victim)$/;"	f	file:
prune_super	fs/super.c	/^static int prune_super(struct shrinker *shrink, struct shrink_control *sc)$/;"	f	file:
prune_tree_thread	kernel/audit_tree.c	/^static int prune_tree_thread(void *unused)$/;"	f	file:
psinfo	fs/binfmt_elf.c	/^	struct elf_prpsinfo *psinfo;	\/* NT_PRPSINFO *\/$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::elf_prpsinfo	file:
psinfo	fs/binfmt_elf.c	/^	struct memelfnote psinfo;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
pt	fs/eventpoll.c	/^	poll_table pt;$/;"	m	struct:ep_pqueue	file:
pt	kernel/cgroup.c	/^	poll_table pt;$/;"	m	struct:cgroup_event	file:
pte_alloc_pagesz	mm/memory.c	/^EXPORT_SYMBOL(pte_alloc_pagesz);$/;"	v
pte_alloc_pagesz	mm/memory.c	/^pte_t *pte_alloc_pagesz(struct mm_struct *mm, unsigned long addr, $/;"	f
pte_mkpresent	mm/scm.h	/^static pte_t inline pte_mkpresent(pte_t pte)$/;"	f
pte_offset_pagesz	mm/memory.c	/^EXPORT_SYMBOL(pte_offset_pagesz);$/;"	v
pte_offset_pagesz	mm/memory.c	/^pte_t *pte_offset_pagesz(struct mm_struct *mm, unsigned long addr,$/;"	f
pte_unmap_same	mm/memory.c	/^static inline int pte_unmap_same(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
ptep_clear_flush	mm/pgtable-generic.c	/^pte_t ptep_clear_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
ptep_clear_flush_young	mm/pgtable-generic.c	/^int ptep_clear_flush_young(struct vm_area_struct *vma,$/;"	f
ptep_set_access_flags	mm/pgtable-generic.c	/^int ptep_set_access_flags(struct vm_area_struct *vma,$/;"	f
ptr	fs/compat_ioctl.c	/^	compat_caddr_t	ptr;$/;"	m	struct:ppp_option_data32	file:
ptr	fs/exec.c	/^	} ptr;$/;"	m	struct:user_arg_ptr	typeref:union:user_arg_ptr::__anon27	file:
ptr	mm/kmemleak.c	/^	const void *ptr;		\/* allocated\/freed memory block *\/$/;"	m	struct:early_log	file:
ptr_to_indirect	lib/radix-tree.c	/^static inline void *ptr_to_indirect(void *ptr)$/;"	f	file:
ptrace_attach	kernel/ptrace.c	/^static int ptrace_attach(struct task_struct *task, long request,$/;"	f	file:
ptrace_check_attach	kernel/ptrace.c	/^static int ptrace_check_attach(struct task_struct *child, bool ignore_state)$/;"	f	file:
ptrace_detach	kernel/ptrace.c	/^static int ptrace_detach(struct task_struct *child, unsigned int data)$/;"	f	file:
ptrace_do_notify	kernel/signal.c	/^static void ptrace_do_notify(int signr, int exit_code, int why)$/;"	f	file:
ptrace_do_wait	kernel/exit.c	/^static int ptrace_do_wait(struct wait_opts *wo, struct task_struct *tsk)$/;"	f	file:
ptrace_freeze_traced	kernel/ptrace.c	/^static bool ptrace_freeze_traced(struct task_struct *task)$/;"	f	file:
ptrace_get_breakpoints	kernel/ptrace.c	/^int ptrace_get_breakpoints(struct task_struct *tsk)$/;"	f
ptrace_get_task_struct	kernel/ptrace.c	/^static struct task_struct *ptrace_get_task_struct(pid_t pid)$/;"	f	file:
ptrace_getsiginfo	kernel/ptrace.c	/^static int ptrace_getsiginfo(struct task_struct *child, siginfo_t *info)$/;"	f	file:
ptrace_has_cap	kernel/ptrace.c	/^static int ptrace_has_cap(struct user_namespace *ns, unsigned int mode)$/;"	f	file:
ptrace_may_access	kernel/ptrace.c	/^bool ptrace_may_access(struct task_struct *task, unsigned int mode)$/;"	f
ptrace_notify	kernel/signal.c	/^void ptrace_notify(int exit_code)$/;"	f
ptrace_put_breakpoints	kernel/ptrace.c	/^void ptrace_put_breakpoints(struct task_struct *tsk)$/;"	f
ptrace_readdata	kernel/ptrace.c	/^int ptrace_readdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len)$/;"	f
ptrace_regset	kernel/ptrace.c	/^static int ptrace_regset(struct task_struct *task, int req, unsigned int type,$/;"	f	file:
ptrace_request	kernel/ptrace.c	/^int ptrace_request(struct task_struct *child, long request,$/;"	f
ptrace_resume	kernel/ptrace.c	/^static int ptrace_resume(struct task_struct *child, long request,$/;"	f	file:
ptrace_setoptions	kernel/ptrace.c	/^static int ptrace_setoptions(struct task_struct *child, unsigned long data)$/;"	f	file:
ptrace_setsiginfo	kernel/ptrace.c	/^static int ptrace_setsiginfo(struct task_struct *child, const siginfo_t *info)$/;"	f	file:
ptrace_signal	kernel/signal.c	/^static int ptrace_signal(int signr, siginfo_t *info)$/;"	f	file:
ptrace_traceme	kernel/ptrace.c	/^static int ptrace_traceme(void)$/;"	f	file:
ptrace_trap_notify	kernel/signal.c	/^static void ptrace_trap_notify(struct task_struct *t)$/;"	f	file:
ptrace_trapping_sleep_fn	kernel/ptrace.c	/^static int ptrace_trapping_sleep_fn(void *flags)$/;"	f	file:
ptrace_unfreeze_traced	kernel/ptrace.c	/^static void ptrace_unfreeze_traced(struct task_struct *task)$/;"	f	file:
ptrace_writedata	kernel/ptrace.c	/^int ptrace_writedata(struct task_struct *tsk, char __user *src, unsigned long dst, int len)$/;"	f
pud_assign	mm/scm.c	/^void pud_assign(struct mm_struct *mm, pgd_t *pgd, pud_t *new)$/;"	f
pud_clear_bad	mm/memory.c	/^void pud_clear_bad(pud_t *pud)$/;"	f
purge	mm/vmalloc.c	/^	struct list_head purge;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
purge_fragmented_blocks	mm/vmalloc.c	/^static void purge_fragmented_blocks(int cpu)$/;"	f	file:
purge_fragmented_blocks_allcpus	mm/vmalloc.c	/^static void purge_fragmented_blocks_allcpus(void)$/;"	f	file:
purge_fragmented_blocks_thiscpu	mm/vmalloc.c	/^static void purge_fragmented_blocks_thiscpu(void)$/;"	f	file:
purge_list	mm/vmalloc.c	/^	struct list_head purge_list;	\/* "lazy purge" list *\/$/;"	m	struct:vmap_area	typeref:struct:vmap_area::list_head	file:
purge_vmap_area_lazy	mm/vmalloc.c	/^static void purge_vmap_area_lazy(void)$/;"	f	file:
put_aio_ring_event	fs/aio.c	188;"	d	file:
put_arg_page	fs/exec.c	/^static void put_arg_page(struct page *page)$/;"	f	file:
put_binfmt	fs/exec.c	/^static inline void put_binfmt(struct linux_binfmt * fmt)$/;"	f	file:
put_compat_flock	fs/compat.c	/^static int put_compat_flock(struct flock *kfl, struct compat_flock __user *ufl)$/;"	f	file:
put_compat_flock64	fs/compat.c	/^static int put_compat_flock64(struct flock *kfl, struct compat_flock64 __user *ufl)$/;"	f	file:
put_compat_itimerspec	kernel/compat.c	/^int put_compat_itimerspec(struct compat_itimerspec __user *dst,$/;"	f
put_compat_itimerval	kernel/compat.c	/^static inline long put_compat_itimerval(struct compat_itimerval __user *o,$/;"	f	file:
put_compat_rusage	kernel/compat.c	/^int put_compat_rusage(const struct rusage *r, struct compat_rusage __user *ru)$/;"	f
put_compat_statfs	fs/compat.c	/^static int put_compat_statfs(struct compat_statfs __user *ubuf, struct kstatfs *kbuf)$/;"	f	file:
put_compat_statfs64	fs/compat.c	/^static int put_compat_statfs64(struct compat_statfs64 __user *ubuf, struct kstatfs *kbuf)$/;"	f	file:
put_compat_timespec	kernel/compat.c	/^EXPORT_SYMBOL_GPL(put_compat_timespec);$/;"	v
put_compat_timespec	kernel/compat.c	/^int put_compat_timespec(const struct timespec *ts, struct compat_timespec __user *cts)$/;"	f
put_compat_timeval	kernel/compat.c	/^EXPORT_SYMBOL_GPL(put_compat_timeval);$/;"	v
put_compat_timeval	kernel/compat.c	/^int put_compat_timeval(const struct timeval *tv, struct compat_timeval __user *ctv)$/;"	f
put_compound_page	mm/swap.c	/^static void put_compound_page(struct page *page)$/;"	f	file:
put_count	kernel/auditsc.c	/^	int		    put_count;$/;"	m	struct:audit_context	file:
put_cpu_partial	mm/slub.c	/^static int put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)$/;"	f	file:
put_cred_rcu	kernel/cred.c	/^static void put_cred_rcu(struct rcu_head *rcu)$/;"	f	file:
put_css_set	kernel/cgroup.c	/^static inline void put_css_set(struct css_set *cg)$/;"	f	file:
put_css_set_taskexit	kernel/cgroup.c	/^static inline void put_css_set_taskexit(struct css_set *cg)$/;"	f	file:
put_files_struct	fs/file.c	/^void put_files_struct(struct files_struct *files)$/;"	f
put_filesystem	fs/filesystems.c	/^void put_filesystem(struct file_system_type *fs)$/;"	f
put_filp	fs/file_table.c	/^void put_filp(struct file *file)$/;"	f
put_futex_key	kernel/futex.c	/^static inline void put_futex_key(union futex_key *key)$/;"	f	file:
put_huge_zero_page	mm/huge_memory.c	/^static void put_huge_zero_page(void)$/;"	f	file:
put_ioctx	fs/aio.c	/^static inline void put_ioctx(struct kioctx *kioctx)$/;"	f	file:
put_link	fs/namei.c	/^static inline void put_link(struct nameidata *nd, struct path *link, void *cookie)$/;"	f	file:
put_lock_stats	kernel/lockdep.c	/^static void put_lock_stats(struct lock_class_stats *stats)$/;"	f	file:
put_mnt_ns	fs/namespace.c	/^void put_mnt_ns(struct mnt_namespace *ns)$/;"	f
put_nommu_region	mm/nommu.c	/^static void put_nommu_region(struct vm_region *region)$/;"	f	file:
put_object	mm/kmemleak.c	/^static void put_object(struct kmemleak_object *object)$/;"	f	file:
put_online_cpus	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(put_online_cpus);$/;"	v
put_online_cpus	kernel/cpu.c	/^void put_online_cpus(void)$/;"	f
put_page	mm/swap.c	/^EXPORT_SYMBOL(put_page);$/;"	v
put_page	mm/swap.c	/^void put_page(struct page *page)$/;"	f
put_page_bootmem	mm/memory_hotplug.c	/^void __ref put_page_bootmem(struct page *page)$/;"	f
put_pages_list	mm/swap.c	/^EXPORT_SYMBOL(put_pages_list);$/;"	v
put_pages_list	mm/swap.c	/^void put_pages_list(struct list_head *pages)$/;"	f
put_pid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(put_pid);$/;"	v
put_pid	kernel/pid.c	/^void put_pid(struct pid *pid)$/;"	f
put_pid_ns	kernel/pid_namespace.c	/^EXPORT_SYMBOL_GPL(put_pid_ns);$/;"	v
put_pid_ns	kernel/pid_namespace.c	/^void put_pid_ns(struct pid_namespace *ns)$/;"	f
put_seccomp_filter	kernel/seccomp.c	/^void put_seccomp_filter(struct task_struct *tsk)$/;"	f
put_signal_struct	kernel/fork.c	/^static inline void put_signal_struct(struct signal_struct *sig)$/;"	f	file:
put_super	fs/super.c	/^static void put_super(struct super_block *sb)$/;"	f	file:
put_tree	kernel/audit_tree.c	/^static inline void put_tree(struct audit_tree *tree)$/;"	f	file:
put_tree_ref	kernel/auditsc.c	/^static int put_tree_ref(struct audit_context *ctx, struct audit_chunk *chunk)$/;"	f	file:
put_unused_fd	fs/file.c	/^EXPORT_SYMBOL(put_unused_fd);$/;"	v
put_unused_fd	fs/file.c	/^void put_unused_fd(unsigned int fd)$/;"	f
put_uts	kernel/utsname_sysctl.c	/^static void put_uts(ctl_table *table, int write, void *which)$/;"	f	file:
putback_inactive_pages	mm/vmscan.c	/^putback_inactive_pages(struct lruvec *lruvec, struct list_head *page_list)$/;"	f	file:
putback_lru_page	mm/vmscan.c	/^void putback_lru_page(struct page *page)$/;"	f
putback_lru_pages	mm/migrate.c	/^void putback_lru_pages(struct list_head *l)$/;"	f
putback_movable_pages	mm/migrate.c	/^void putback_movable_pages(struct list_head *l)$/;"	f
putname	fs/namei.c	/^void putname(struct filename *name)$/;"	f
pvm_determine_end	mm/vmalloc.c	/^static unsigned long pvm_determine_end(struct vmap_area **pnext,$/;"	f	file:
pvm_find_next_prev	mm/vmalloc.c	/^static bool pvm_find_next_prev(unsigned long end,$/;"	f	file:
pwd	kernel/auditsc.c	/^	struct path	    pwd;$/;"	m	struct:audit_context	typeref:struct:audit_context::path	file:
pwq_activate_delayed_work	kernel/workqueue.c	/^static void pwq_activate_delayed_work(struct work_struct *work)$/;"	f	file:
pwq_activate_first_delayed	kernel/workqueue.c	/^static void pwq_activate_first_delayed(struct pool_workqueue *pwq)$/;"	f	file:
pwq_dec_nr_in_flight	kernel/workqueue.c	/^static void pwq_dec_nr_in_flight(struct pool_workqueue *pwq, int color)$/;"	f	file:
pwq_set_max_active	kernel/workqueue.c	/^static void pwq_set_max_active(struct pool_workqueue *pwq, int max_active)$/;"	f	file:
pwqlist	fs/eventpoll.c	/^	struct list_head pwqlist;$/;"	m	struct:epitem	typeref:struct:epitem::list_head	file:
pwrite64	fs/read_write.c	/^SYSCALL_DEFINE(pwrite64)(unsigned int fd, const char __user *buf,$/;"	f
q	kernel/audit.h	/^	struct sk_buff_head q;$/;"	m	struct:audit_netlink_list	typeref:struct:audit_netlink_list::sk_buff_head
qbytes	kernel/auditsc.c	/^			unsigned long		qbytes;$/;"	m	struct:audit_context::__anon43::__anon45	file:
qhimark	kernel/rcutree.c	/^static long qhimark = 10000;	\/* If this many pending, ignore blimit. *\/$/;"	v	file:
qlen	kernel/rcutree.h	/^	long		qlen;		\/* # of queued callbacks, incl lazy *\/$/;"	m	struct:rcu_data
qlen	kernel/rcutree.h	/^	long qlen;				\/* Total number of callbacks. *\/$/;"	m	struct:rcu_state
qlen_last_fqs_check	kernel/rcutree.h	/^	long		qlen_last_fqs_check;$/;"	m	struct:rcu_data
qlen_lazy	kernel/rcutree.h	/^	long		qlen_lazy;	\/* # of lazy queued callbacks *\/$/;"	m	struct:rcu_data
qlen_lazy	kernel/rcutree.h	/^	long qlen_lazy;				\/* Number of lazy callbacks. *\/$/;"	m	struct:rcu_state
qlowmark	kernel/rcutree.c	/^static long qlowmark = 100;	\/* Once only this many pending, use blimit. *\/$/;"	v	file:
qs_pending	kernel/rcutree.h	/^	bool		qs_pending;	\/* Core waits for quiesc state. *\/$/;"	m	struct:rcu_data
qsmask	kernel/rcutree.h	/^	unsigned long qsmask;	\/* CPUs or groups that need to switch in *\/$/;"	m	struct:rcu_node
qsmaskinit	kernel/rcutree.h	/^	unsigned long qsmaskinit;$/;"	m	struct:rcu_node
queue_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_delayed_work);$/;"	v
queue_delayed_work	kernel/workqueue.c	/^bool queue_delayed_work(struct workqueue_struct *wq,$/;"	f
queue_delayed_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_delayed_work_on);$/;"	v
queue_delayed_work_on	kernel/workqueue.c	/^bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,$/;"	f
queue_io	fs/fs-writeback.c	/^static void queue_io(struct bdi_writeback *wb, struct wb_writeback_work *work)$/;"	f	file:
queue_kthread_work	kernel/kthread.c	/^EXPORT_SYMBOL_GPL(queue_kthread_work);$/;"	v
queue_kthread_work	kernel/kthread.c	/^bool queue_kthread_work(struct kthread_worker *worker,$/;"	f
queue_stop_cpus_work	kernel/stop_machine.c	/^static void queue_stop_cpus_work(const struct cpumask *cpumask,$/;"	f	file:
queue_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_work);$/;"	v
queue_work	kernel/workqueue.c	/^bool queue_work(struct workqueue_struct *wq, struct work_struct *work)$/;"	f
queue_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_work_on);$/;"	v
queue_work_on	kernel/workqueue.c	/^bool queue_work_on(int cpu, struct workqueue_struct *wq,$/;"	f
quicklist_total_size	mm/quicklist.c	/^unsigned long quicklist_total_size(void)$/;"	f
quicklist_trim	mm/quicklist.c	/^void quicklist_trim(int nr, void (*dtor)(void *),$/;"	f
quiet_cmd_bc	kernel/Makefile	/^quiet_cmd_bc  = BC      $@$/;"	m
quiet_cmd_hzfile	kernel/Makefile	/^quiet_cmd_hzfile = HZFILE  $@$/;"	m
quiet_cmd_touch	kernel/Makefile	/^quiet_cmd_touch = TOUCH   $@$/;"	m
quiet_error	fs/buffer.c	/^static int quiet_error(struct buffer_head *bh)$/;"	f	file:
r_next	kernel/rcutree_trace.c	/^static void *r_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
r_next	kernel/resource.c	/^static void *r_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
r_open	kernel/rcutree_trace.c	/^static int r_open(struct inode *inode, struct file *file,$/;"	f	file:
r_show	kernel/resource.c	/^static int r_show(struct seq_file *m, void *v)$/;"	f	file:
r_start	kernel/rcutree_trace.c	/^static void *r_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
r_stop	kernel/rcutree_trace.c	/^static void r_stop(struct seq_file *m, void *v)$/;"	f	file:
ra_submit	mm/readahead.c	/^unsigned long ra_submit(struct file_ra_state *ra,$/;"	f
radix_tree_callback	lib/radix-tree.c	/^static int radix_tree_callback(struct notifier_block *nfb,$/;"	f	file:
radix_tree_delete	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_delete);$/;"	v
radix_tree_delete	lib/radix-tree.c	/^void *radix_tree_delete(struct radix_tree_root *root, unsigned long index)$/;"	f
radix_tree_extend	lib/radix-tree.c	/^static int radix_tree_extend(struct radix_tree_root *root, unsigned long index)$/;"	f	file:
radix_tree_find_next_bit	lib/radix-tree.c	/^radix_tree_find_next_bit(const unsigned long *addr,$/;"	f	file:
radix_tree_gang_lookup	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup);$/;"	v
radix_tree_gang_lookup	lib/radix-tree.c	/^radix_tree_gang_lookup(struct radix_tree_root *root, void **results,$/;"	f
radix_tree_gang_lookup_slot	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup_slot);$/;"	v
radix_tree_gang_lookup_slot	lib/radix-tree.c	/^radix_tree_gang_lookup_slot(struct radix_tree_root *root,$/;"	f
radix_tree_gang_lookup_tag	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup_tag);$/;"	v
radix_tree_gang_lookup_tag	lib/radix-tree.c	/^radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,$/;"	f
radix_tree_gang_lookup_tag_slot	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup_tag_slot);$/;"	v
radix_tree_gang_lookup_tag_slot	lib/radix-tree.c	/^radix_tree_gang_lookup_tag_slot(struct radix_tree_root *root, void ***results,$/;"	f
radix_tree_init	lib/radix-tree.c	/^void __init radix_tree_init(void)$/;"	f
radix_tree_init_maxindex	lib/radix-tree.c	/^static __init void radix_tree_init_maxindex(void)$/;"	f	file:
radix_tree_insert	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_insert);$/;"	v
radix_tree_insert	lib/radix-tree.c	/^int radix_tree_insert(struct radix_tree_root *root,$/;"	f
radix_tree_locate_item	lib/radix-tree.c	/^unsigned long radix_tree_locate_item(struct radix_tree_root *root, void *item)$/;"	f
radix_tree_lookup	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_lookup);$/;"	v
radix_tree_lookup	lib/radix-tree.c	/^void *radix_tree_lookup(struct radix_tree_root *root, unsigned long index)$/;"	f
radix_tree_lookup_element	lib/radix-tree.c	/^static void *radix_tree_lookup_element(struct radix_tree_root *root,$/;"	f	file:
radix_tree_lookup_slot	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_lookup_slot);$/;"	v
radix_tree_lookup_slot	lib/radix-tree.c	/^void **radix_tree_lookup_slot(struct radix_tree_root *root, unsigned long index)$/;"	f
radix_tree_maxindex	lib/radix-tree.c	/^static inline unsigned long radix_tree_maxindex(unsigned int height)$/;"	f	file:
radix_tree_next_chunk	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_next_chunk);$/;"	v
radix_tree_next_chunk	lib/radix-tree.c	/^void **radix_tree_next_chunk(struct radix_tree_root *root,$/;"	f
radix_tree_next_hole	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_next_hole);$/;"	v
radix_tree_next_hole	lib/radix-tree.c	/^unsigned long radix_tree_next_hole(struct radix_tree_root *root,$/;"	f
radix_tree_node	lib/radix-tree.c	/^struct radix_tree_node {$/;"	s	file:
radix_tree_node_alloc	lib/radix-tree.c	/^radix_tree_node_alloc(struct radix_tree_root *root)$/;"	f	file:
radix_tree_node_cachep	lib/radix-tree.c	/^static struct kmem_cache *radix_tree_node_cachep;$/;"	v	typeref:struct:kmem_cache	file:
radix_tree_node_ctor	lib/radix-tree.c	/^radix_tree_node_ctor(void *node)$/;"	f	file:
radix_tree_node_free	lib/radix-tree.c	/^radix_tree_node_free(struct radix_tree_node *node)$/;"	f	file:
radix_tree_node_rcu_free	lib/radix-tree.c	/^static void radix_tree_node_rcu_free(struct rcu_head *head)$/;"	f	file:
radix_tree_preload	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_preload);$/;"	v
radix_tree_preload	lib/radix-tree.c	/^int radix_tree_preload(gfp_t gfp_mask)$/;"	f
radix_tree_preload	lib/radix-tree.c	/^struct radix_tree_preload {$/;"	s	file:
radix_tree_prev_hole	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_prev_hole);$/;"	v
radix_tree_prev_hole	lib/radix-tree.c	/^unsigned long radix_tree_prev_hole(struct radix_tree_root *root,$/;"	f
radix_tree_range_tag_if_tagged	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_range_tag_if_tagged);$/;"	v
radix_tree_range_tag_if_tagged	lib/radix-tree.c	/^unsigned long radix_tree_range_tag_if_tagged(struct radix_tree_root *root,$/;"	f
radix_tree_shrink	lib/radix-tree.c	/^static inline void radix_tree_shrink(struct radix_tree_root *root)$/;"	f	file:
radix_tree_tag_clear	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tag_clear);$/;"	v
radix_tree_tag_clear	lib/radix-tree.c	/^void *radix_tree_tag_clear(struct radix_tree_root *root,$/;"	f
radix_tree_tag_get	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tag_get);$/;"	v
radix_tree_tag_get	lib/radix-tree.c	/^int radix_tree_tag_get(struct radix_tree_root *root,$/;"	f
radix_tree_tag_set	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tag_set);$/;"	v
radix_tree_tag_set	lib/radix-tree.c	/^void *radix_tree_tag_set(struct radix_tree_root *root,$/;"	f
radix_tree_tagged	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tagged);$/;"	v
radix_tree_tagged	lib/radix-tree.c	/^int radix_tree_tagged(struct radix_tree_root *root, unsigned int tag)$/;"	f
raise_softirq	kernel/softirq.c	/^void raise_softirq(unsigned int nr)$/;"	f
raise_softirq_irqoff	kernel/softirq.c	/^inline void raise_softirq_irqoff(unsigned int nr)$/;"	f
rand1	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
randomize_stack_top	fs/binfmt_elf.c	/^static unsigned long randomize_stack_top(unsigned long stack_top)$/;"	f	file:
range_cyclic	fs/fs-writeback.c	/^	unsigned int range_cyclic:1;$/;"	m	struct:wb_writeback_work	file:
ratelimit	fs/buffer.c	/^	int ratelimit;		\/* Limit cacheline bouncing *\/$/;"	m	struct:bh_accounting	file:
ratelimit_handler	mm/page-writeback.c	/^ratelimit_handler(struct notifier_block *self, unsigned long action,$/;"	f	file:
ratelimit_nb	mm/page-writeback.c	/^static struct notifier_block __cpuinitdata ratelimit_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
ratelimit_pages	mm/page-writeback.c	/^static long ratelimit_pages = 32;$/;"	v	file:
raw_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(raw_notifier_call_chain);$/;"	v
raw_notifier_call_chain	kernel/notifier.c	/^int raw_notifier_call_chain(struct raw_notifier_head *nh,$/;"	f
raw_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(raw_notifier_chain_register);$/;"	v
raw_notifier_chain_register	kernel/notifier.c	/^int raw_notifier_chain_register(struct raw_notifier_head *nh,$/;"	f
raw_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(raw_notifier_chain_unregister);$/;"	v
raw_notifier_chain_unregister	kernel/notifier.c	/^int raw_notifier_chain_unregister(struct raw_notifier_head *nh,$/;"	f
raw_read_can_lock	kernel/spinlock.c	35;"	d	file:
raw_spin_can_lock	include/linux/spinlock.h	254;"	d
raw_spin_is_contended	include/linux/spinlock.h	110;"	d
raw_spin_is_contended	include/linux/spinlock.h	114;"	d
raw_spin_is_contended	include/linux/spinlock.h	116;"	d
raw_spin_is_locked	include/linux/spinlock.h	107;"	d
raw_spin_lock	include/linux/spinlock.h	170;"	d
raw_spin_lock_bh	include/linux/spinlock.h	222;"	d
raw_spin_lock_init	include/linux/spinlock.h	103;"	d
raw_spin_lock_init	include/linux/spinlock.h	95;"	d
raw_spin_lock_irq	include/linux/spinlock.h	221;"	d
raw_spin_lock_irqsave	include/linux/spinlock.h	188;"	d
raw_spin_lock_irqsave	include/linux/spinlock.h	210;"	d
raw_spin_lock_irqsave_nested	include/linux/spinlock.h	195;"	d
raw_spin_lock_irqsave_nested	include/linux/spinlock.h	201;"	d
raw_spin_lock_irqsave_nested	include/linux/spinlock.h	216;"	d
raw_spin_lock_nest_lock	include/linux/spinlock.h	176;"	d
raw_spin_lock_nest_lock	include/linux/spinlock.h	183;"	d
raw_spin_lock_nested	include/linux/spinlock.h	173;"	d
raw_spin_lock_nested	include/linux/spinlock.h	182;"	d
raw_spin_trylock	include/linux/spinlock.h	168;"	d
raw_spin_trylock_bh	include/linux/spinlock.h	233;"	d
raw_spin_trylock_irq	include/linux/spinlock.h	236;"	d
raw_spin_trylock_irqsave	include/linux/spinlock.h	243;"	d
raw_spin_unlock	include/linux/spinlock.h	223;"	d
raw_spin_unlock_bh	include/linux/spinlock.h	231;"	d
raw_spin_unlock_irq	include/linux/spinlock.h	224;"	d
raw_spin_unlock_irqrestore	include/linux/spinlock.h	226;"	d
raw_spin_unlock_wait	include/linux/spinlock.h	129;"	d
raw_write_can_lock	kernel/spinlock.c	36;"	d	file:
rb_hash	fs/ext3/dir.c	/^	struct rb_node	rb_hash;$/;"	m	struct:fname	typeref:struct:fname::rb_node	file:
rb_node	mm/kmemleak.c	/^	struct rb_node rb_node;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::rb_node	file:
rb_node	mm/vmalloc.c	/^	struct rb_node rb_node;		\/* address sorted rbtree *\/$/;"	m	struct:vmap_area	typeref:struct:vmap_area::rb_node	file:
rb_root	mm/memcontrol.c	/^	struct rb_root rb_root;$/;"	m	struct:mem_cgroup_tree_per_zone	typeref:struct:mem_cgroup_tree_per_zone::rb_root	file:
rb_tree_per_node	mm/memcontrol.c	/^	struct mem_cgroup_tree_per_node *rb_tree_per_node[MAX_NUMNODES];$/;"	m	struct:mem_cgroup_tree	typeref:struct:mem_cgroup_tree::mem_cgroup_tree_per_node	file:
rb_tree_per_zone	mm/memcontrol.c	/^	struct mem_cgroup_tree_per_zone rb_tree_per_zone[MAX_NR_ZONES];$/;"	m	struct:mem_cgroup_tree_per_node	typeref:struct:mem_cgroup_tree_per_node::mem_cgroup_tree_per_zone	file:
rbn	fs/eventpoll.c	/^	struct rb_node rbn;$/;"	m	struct:epitem	typeref:struct:epitem::rb_node	file:
rbr	fs/eventpoll.c	/^	struct rb_root rbr;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::rb_root	file:
rcb	kernel/rcutiny_plugin.h	/^	struct rcu_ctrlblk rcb;	\/* curtail: ->next ptr of last CB for GP. *\/$/;"	m	struct:rcu_preempt_ctrlblk	typeref:struct:rcu_preempt_ctrlblk::rcu_ctrlblk
rchan_percpu_buf_dispatcher	kernel/relay.c	/^struct rchan_percpu_buf_dispatcher {$/;"	s	file:
rcu	fs/timerfd.c	/^	struct rcu_head rcu;$/;"	m	struct:timerfd_ctx	typeref:struct:timerfd_ctx::rcu_head	file:
rcu	kernel/audit.h	/^	struct rcu_head		rcu;$/;"	m	struct:audit_entry	typeref:struct:audit_entry::rcu_head
rcu	kernel/rcutorture.c	/^	struct rcu_head rcu;$/;"	m	struct:rcu_boost_inflight	typeref:struct:rcu_boost_inflight::rcu_head	file:
rcu	kernel/tracepoint.c	/^		struct rcu_head rcu;$/;"	m	union:tp_probes::__anon64	typeref:struct:tp_probes::__anon64::rcu_head	file:
rcu	mm/kmemleak.c	/^	struct rcu_head rcu;		\/* object_list lockless traversal *\/$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::rcu_head	file:
rcu_accelerate_cbs	kernel/rcutree.c	/^static void rcu_accelerate_cbs(struct rcu_state *rsp, struct rcu_node *rnp,$/;"	f	file:
rcu_adopt_orphan_cbs	kernel/rcutree.c	/^static void rcu_adopt_orphan_cbs(struct rcu_state *rsp)$/;"	f	file:
rcu_advance_cbs	kernel/rcutree.c	/^static void rcu_advance_cbs(struct rcu_state *rsp, struct rcu_node *rnp,$/;"	f	file:
rcu_barrier	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_barrier);$/;"	v
rcu_barrier	kernel/rcutree_plugin.h	/^void rcu_barrier(void)$/;"	f
rcu_barrier_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_barrier_bh);$/;"	v
rcu_barrier_bh	kernel/rcutree.c	/^void rcu_barrier_bh(void)$/;"	f
rcu_barrier_callback	kernel/rcutree.c	/^static void rcu_barrier_callback(struct rcu_head *rhp)$/;"	f	file:
rcu_barrier_func	kernel/rcutree.c	/^static void rcu_barrier_func(void *type)$/;"	f	file:
rcu_barrier_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_barrier_sched);$/;"	v
rcu_barrier_sched	kernel/rcutree.c	/^void rcu_barrier_sched(void)$/;"	f
rcu_batch_dequeue	kernel/srcu.c	/^static inline struct rcu_head *rcu_batch_dequeue(struct rcu_batch *b)$/;"	f	file:
rcu_batch_empty	kernel/srcu.c	/^static inline bool rcu_batch_empty(struct rcu_batch *b)$/;"	f	file:
rcu_batch_init	kernel/srcu.c	/^static inline void rcu_batch_init(struct rcu_batch *b)$/;"	f	file:
rcu_batch_move	kernel/srcu.c	/^static inline void rcu_batch_move(struct rcu_batch *to, struct rcu_batch *from)$/;"	f	file:
rcu_batch_queue	kernel/srcu.c	/^static inline void rcu_batch_queue(struct rcu_batch *b, struct rcu_head *head)$/;"	f	file:
rcu_batches_completed	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_batches_completed);$/;"	v
rcu_batches_completed	kernel/rcutree_plugin.h	/^long rcu_batches_completed(void)$/;"	f
rcu_batches_completed_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_batches_completed_bh);$/;"	v
rcu_batches_completed_bh	kernel/rcutree.c	/^long rcu_batches_completed_bh(void)$/;"	f
rcu_batches_completed_preempt	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_batches_completed_preempt);$/;"	v
rcu_batches_completed_preempt	kernel/rcutree_plugin.h	/^long rcu_batches_completed_preempt(void)$/;"	f
rcu_batches_completed_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_batches_completed_sched);$/;"	v
rcu_batches_completed_sched	kernel/rcutree.c	/^long rcu_batches_completed_sched(void)$/;"	f
rcu_bh_ctrlblk	kernel/rcutiny_plugin.h	/^static struct rcu_ctrlblk rcu_bh_ctrlblk = {$/;"	v	typeref:struct:rcu_ctrlblk
rcu_bh_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_bh_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_bh_force_quiescent_state	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_bh_force_quiescent_state);$/;"	v
rcu_bh_force_quiescent_state	kernel/rcutree.c	/^void rcu_bh_force_quiescent_state(void)$/;"	f
rcu_bh_lock_key	kernel/rcupdate.c	/^static struct lock_class_key rcu_bh_lock_key;$/;"	v	typeref:struct:lock_class_key	file:
rcu_bh_lock_map	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcu_bh_lock_map);$/;"	v
rcu_bh_lock_map	kernel/rcupdate.c	/^struct lockdep_map rcu_bh_lock_map =$/;"	v	typeref:struct:lockdep_map
rcu_bh_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_bh_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_bh_qs	kernel/rcutiny.c	/^void rcu_bh_qs(int cpu)$/;"	f
rcu_bh_qs	kernel/rcutree.c	/^void rcu_bh_qs(int cpu)$/;"	f
rcu_bh_state	kernel/rcutree.c	/^struct rcu_state rcu_bh_state = RCU_STATE_INITIALIZER(rcu_bh, call_rcu_bh);$/;"	v	typeref:struct:rcu_state
rcu_bh_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_bh_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_bh_torture_completed	kernel/rcutorture.c	/^static int rcu_bh_torture_completed(void)$/;"	f	file:
rcu_bh_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_bh_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_blocking_is_gp	kernel/rcutree.c	/^static inline int rcu_blocking_is_gp(void)$/;"	f	file:
rcu_boost	kernel/rcutiny_plugin.h	/^static int rcu_boost(void)$/;"	f
rcu_boost	kernel/rcutree_plugin.h	/^static int rcu_boost(struct rcu_node *rnp)$/;"	f
rcu_boost_inflight	kernel/rcutorture.c	/^struct rcu_boost_inflight {$/;"	s	file:
rcu_boost_kthread	kernel/rcutree_plugin.h	/^static int rcu_boost_kthread(void *arg)$/;"	f
rcu_boost_kthread_setaffinity	kernel/rcutree_plugin.h	/^static void rcu_boost_kthread_setaffinity(struct rcu_node *rnp, int outgoingcpu)$/;"	f
rcu_boot_init_nocb_percpu_data	kernel/rcutree_plugin.h	/^static void __init rcu_boot_init_nocb_percpu_data(struct rcu_data *rdp)$/;"	f
rcu_boot_init_percpu_data	kernel/rcutree.c	/^rcu_boot_init_percpu_data(int cpu, struct rcu_state *rsp)$/;"	f	file:
rcu_bootup_announce	kernel/rcutree_plugin.h	/^static void __init rcu_bootup_announce(void)$/;"	f
rcu_bootup_announce_oddness	kernel/rcutree_plugin.h	/^static void __init rcu_bootup_announce_oddness(void)$/;"	f
rcu_can_boost	kernel/rcutorture.c	206;"	d	file:
rcu_can_boost	kernel/rcutorture.c	208;"	d	file:
rcu_cbs_completed	kernel/rcutree.c	/^static unsigned long rcu_cbs_completed(struct rcu_state *rsp,$/;"	f	file:
rcu_check_callbacks	kernel/rcutiny.c	/^void rcu_check_callbacks(int cpu, int user)$/;"	f
rcu_check_callbacks	kernel/rcutree.c	/^void rcu_check_callbacks(int cpu, int user)$/;"	f
rcu_check_quiescent_state	kernel/rcutree.c	/^rcu_check_quiescent_state(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_cleanup_after_idle	kernel/rcutree_plugin.h	/^static void rcu_cleanup_after_idle(int cpu)$/;"	f
rcu_cleanup_dead_cpu	kernel/rcutree.c	/^static void rcu_cleanup_dead_cpu(int cpu, struct rcu_state *rsp)$/;"	f	file:
rcu_cleanup_dying_cpu	kernel/rcutree.c	/^static void rcu_cleanup_dying_cpu(struct rcu_state *rsp)$/;"	f	file:
rcu_cpu_blocking_cur_gp	kernel/rcutiny_plugin.h	/^static int rcu_cpu_blocking_cur_gp(void)$/;"	f
rcu_cpu_has_callbacks	kernel/rcutree.c	/^static int rcu_cpu_has_callbacks(int cpu)$/;"	f	file:
rcu_cpu_has_nonlazy_callbacks	kernel/rcutree_plugin.h	/^static bool rcu_cpu_has_nonlazy_callbacks(int cpu)$/;"	f
rcu_cpu_kthread	kernel/rcutree_plugin.h	/^static void rcu_cpu_kthread(unsigned int cpu)$/;"	f
rcu_cpu_kthread_park	kernel/rcutree_plugin.h	/^static void rcu_cpu_kthread_park(unsigned int cpu)$/;"	f
rcu_cpu_kthread_setup	kernel/rcutree_plugin.h	/^static void rcu_cpu_kthread_setup(unsigned int cpu)$/;"	f
rcu_cpu_kthread_should_run	kernel/rcutree_plugin.h	/^static int rcu_cpu_kthread_should_run(unsigned int cpu)$/;"	f
rcu_cpu_notify	kernel/rcutree.c	/^static int __cpuinit rcu_cpu_notify(struct notifier_block *self,$/;"	f	file:
rcu_cpu_stall_reset	kernel/rcutree.c	/^void rcu_cpu_stall_reset(void)$/;"	f
rcu_cpu_thread_spec	kernel/rcutree_plugin.h	/^static struct smp_hotplug_thread rcu_cpu_thread_spec = {$/;"	v	typeref:struct:smp_hotplug_thread
rcu_ctrlblk	kernel/rcutiny_plugin.h	/^struct rcu_ctrlblk {$/;"	s
rcu_data	kernel/rcutree.h	/^struct rcu_data {$/;"	s
rcu_do_batch	kernel/rcutree.c	/^static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_dump_cpu_stacks	kernel/rcutree.c	/^static void rcu_dump_cpu_stacks(struct rcu_state *rsp)$/;"	f	file:
rcu_dynticks	kernel/rcutree.h	/^struct rcu_dynticks {$/;"	s
rcu_dynticks_nesting	kernel/rcutiny.c	/^static long long rcu_dynticks_nesting = DYNTICK_TASK_EXIT_IDLE;$/;"	v	file:
rcu_eqs_enter	kernel/rcutree.c	/^static void rcu_eqs_enter(bool user)$/;"	f	file:
rcu_eqs_enter_common	kernel/rcutree.c	/^static void rcu_eqs_enter_common(struct rcu_dynticks *rdtp, long long oldval,$/;"	f	file:
rcu_eqs_exit	kernel/rcutree.c	/^static void rcu_eqs_exit(bool user)$/;"	f	file:
rcu_eqs_exit_common	kernel/rcutree.c	/^static void rcu_eqs_exit_common(struct rcu_dynticks *rdtp, long long oldval,$/;"	f	file:
rcu_expedited	kernel/ksysfs.c	/^KERNEL_ATTR_RW(rcu_expedited);$/;"	v
rcu_expedited	kernel/ksysfs.c	/^int rcu_expedited;$/;"	v
rcu_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_expedited_show	kernel/ksysfs.c	/^static ssize_t rcu_expedited_show(struct kobject *kobj,$/;"	f	file:
rcu_expedited_store	kernel/ksysfs.c	/^static ssize_t rcu_expedited_store(struct kobject *kobj,$/;"	f	file:
rcu_fanout_leaf	kernel/rcutree.c	/^static int rcu_fanout_leaf = CONFIG_RCU_FANOUT_LEAF;$/;"	v	file:
rcu_for_each_leaf_node	kernel/rcutree.h	225;"	d
rcu_for_each_node_breadth_first	kernel/rcutree.h	206;"	d
rcu_for_each_nonleaf_node_breadth_first	kernel/rcutree.h	215;"	d
rcu_force_quiescent_state	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_force_quiescent_state);$/;"	v
rcu_force_quiescent_state	kernel/rcutree_plugin.h	/^void rcu_force_quiescent_state(void)$/;"	f
rcu_fqs_class	kernel/rcutree.c	/^static struct lock_class_key rcu_fqs_class[RCU_NUM_LVLS];$/;"	v	typeref:struct:lock_class_key	file:
rcu_free_old_probes	kernel/tracepoint.c	/^static void rcu_free_old_probes(struct rcu_head *head)$/;"	f	file:
rcu_free_slab	mm/slub.c	/^static void rcu_free_slab(struct rcu_head *h)$/;"	f	file:
rcu_freeing	mm/memcontrol.c	/^		struct rcu_head rcu_freeing;$/;"	m	union:mem_cgroup::__anon9	typeref:struct:mem_cgroup::__anon9::rcu_head	file:
rcu_get_root	kernel/rcutree.c	/^	__releases(rcu_get_root(rsp)->lock)$/;"	f
rcu_get_root	kernel/rcutree.c	/^static struct rcu_node *rcu_get_root(struct rcu_state *rsp)$/;"	f	file:
rcu_gp_cleanup	kernel/rcutree.c	/^static void rcu_gp_cleanup(struct rcu_state *rsp)$/;"	f	file:
rcu_gp_fqs	kernel/rcutree.c	/^int rcu_gp_fqs(struct rcu_state *rsp, int fqs_state_in)$/;"	f
rcu_gp_in_progress	kernel/rcutree.c	/^static int rcu_gp_in_progress(struct rcu_state *rsp)$/;"	f	file:
rcu_gp_init	kernel/rcutree.c	/^static int rcu_gp_init(struct rcu_state *rsp)$/;"	f	file:
rcu_gp_kthread	kernel/rcutree.c	/^static int __noreturn rcu_gp_kthread(void *arg)$/;"	f	file:
rcu_head	kernel/cgroup.c	/^	struct rcu_head rcu_head;$/;"	m	struct:css_id	typeref:struct:css_id::rcu_head	file:
rcu_head	lib/radix-tree.c	/^		struct rcu_head	rcu_head;	\/* Used when freeing node *\/$/;"	m	union:radix_tree_node::__anon68	typeref:struct:radix_tree_node::__anon68::rcu_head	file:
rcu_head	mm/vmalloc.c	/^	struct rcu_head rcu_head;$/;"	m	struct:vmap_area	typeref:struct:vmap_area::rcu_head	file:
rcu_head	mm/vmalloc.c	/^	struct rcu_head rcu_head;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::rcu_head	file:
rcu_head_remote	kernel/rcutree_plugin.h	/^struct rcu_head_remote {$/;"	s
rcu_idle_count_callbacks_posted	kernel/rcutree_plugin.h	/^static void rcu_idle_count_callbacks_posted(void)$/;"	f
rcu_idle_cpu	kernel/rcutorture.c	/^static int rcu_idle_cpu;	\/* Force all torture tasks off this CPU *\/$/;"	v	file:
rcu_idle_demigrate	kernel/rcutree_plugin.h	/^void rcu_idle_demigrate(void *unused)$/;"	f
rcu_idle_enter	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_idle_enter);$/;"	v
rcu_idle_enter	kernel/rcutiny.c	/^void rcu_idle_enter(void)$/;"	f
rcu_idle_enter	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_idle_enter);$/;"	v
rcu_idle_enter	kernel/rcutree.c	/^void rcu_idle_enter(void)$/;"	f
rcu_idle_enter_common	kernel/rcutiny.c	/^static void rcu_idle_enter_common(long long newval)$/;"	f	file:
rcu_idle_exit	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_idle_exit);$/;"	v
rcu_idle_exit	kernel/rcutiny.c	/^void rcu_idle_exit(void)$/;"	f
rcu_idle_exit	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_idle_exit);$/;"	v
rcu_idle_exit	kernel/rcutree.c	/^void rcu_idle_exit(void)$/;"	f
rcu_idle_exit_common	kernel/rcutiny.c	/^static void rcu_idle_exit_common(long long oldval)$/;"	f	file:
rcu_idle_gp_timer_func	kernel/rcutree_plugin.h	/^static void rcu_idle_gp_timer_func(unsigned long cpu_in)$/;"	f
rcu_implicit_dynticks_qs	kernel/rcutree.c	/^static int rcu_implicit_dynticks_qs(struct rcu_data *rdp)$/;"	f	file:
rcu_init	kernel/rcutree.c	/^void __init rcu_init(void)$/;"	f
rcu_init_geometry	kernel/rcutree.c	/^static void __init rcu_init_geometry(void)$/;"	f	file:
rcu_init_levelspread	kernel/rcutree.c	/^static void __init rcu_init_levelspread(struct rcu_state *rsp)$/;"	f	file:
rcu_init_nocb	kernel/rcutree_plugin.h	/^static void __init rcu_init_nocb(void)$/;"	f
rcu_init_one	kernel/rcutree.c	/^static void __init rcu_init_one(struct rcu_state *rsp,$/;"	f	file:
rcu_init_percpu_data	kernel/rcutree.c	/^rcu_init_percpu_data(int cpu, struct rcu_state *rsp, int preemptible)$/;"	f	file:
rcu_initiate_boost	kernel/rcutiny_plugin.h	/^static int rcu_initiate_boost(void)$/;"	f
rcu_initiate_boost	kernel/rcutree_plugin.h	/^static void rcu_initiate_boost(struct rcu_node *rnp, unsigned long flags)$/;"	f
rcu_initiate_boost_trace	kernel/rcutiny_plugin.h	/^static void rcu_initiate_boost_trace(void)$/;"	f
rcu_initiate_boost_trace	kernel/rcutree_plugin.h	/^static void rcu_initiate_boost_trace(struct rcu_node *rnp)$/;"	f
rcu_irq_enter	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_irq_enter);$/;"	v
rcu_irq_enter	kernel/rcutiny.c	/^void rcu_irq_enter(void)$/;"	f
rcu_irq_enter	kernel/rcutree.c	/^void rcu_irq_enter(void)$/;"	f
rcu_irq_exit	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_irq_exit);$/;"	v
rcu_irq_exit	kernel/rcutiny.c	/^void rcu_irq_exit(void)$/;"	f
rcu_irq_exit	kernel/rcutree.c	/^void rcu_irq_exit(void)$/;"	f
rcu_is_callbacks_kthread	kernel/rcutiny_plugin.h	/^static bool rcu_is_callbacks_kthread(void)$/;"	f
rcu_is_callbacks_kthread	kernel/rcutree_plugin.h	/^static bool rcu_is_callbacks_kthread(void)$/;"	f
rcu_is_cpu_idle	kernel/rcutiny.c	/^EXPORT_SYMBOL(rcu_is_cpu_idle);$/;"	v
rcu_is_cpu_idle	kernel/rcutiny.c	/^int rcu_is_cpu_idle(void)$/;"	f
rcu_is_cpu_idle	kernel/rcutree.c	/^EXPORT_SYMBOL(rcu_is_cpu_idle);$/;"	v
rcu_is_cpu_idle	kernel/rcutree.c	/^int rcu_is_cpu_idle(void)$/;"	f
rcu_is_cpu_rrupt_from_idle	kernel/rcutiny.c	/^static int rcu_is_cpu_rrupt_from_idle(void)$/;"	f	file:
rcu_is_cpu_rrupt_from_idle	kernel/rcutree.c	/^static int rcu_is_cpu_rrupt_from_idle(void)$/;"	f	file:
rcu_jiffies_till_stall_check	kernel/rcupdate.c	/^int rcu_jiffies_till_stall_check(void)$/;"	f
rcu_kthread	kernel/rcutiny_plugin.h	/^static int rcu_kthread(void *arg)$/;"	f
rcu_kthread_do_work	kernel/rcutree_plugin.h	/^static void rcu_kthread_do_work(void)$/;"	f
rcu_kthread_task	kernel/rcutiny_plugin.h	/^static struct task_struct *rcu_kthread_task;$/;"	v	typeref:struct:task_struct
rcu_lock_break	kernel/hung_task.c	/^static bool rcu_lock_break(struct task_struct *g, struct task_struct *t)$/;"	f	file:
rcu_lock_key	kernel/rcupdate.c	/^static struct lock_class_key rcu_lock_key;$/;"	v	typeref:struct:lock_class_key	file:
rcu_lock_map	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcu_lock_map);$/;"	v
rcu_lock_map	kernel/rcupdate.c	/^struct lockdep_map rcu_lock_map =$/;"	v	typeref:struct:lockdep_map
rcu_lockdep_current_cpu_online	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_lockdep_current_cpu_online);$/;"	v
rcu_lockdep_current_cpu_online	kernel/rcutree.c	/^bool rcu_lockdep_current_cpu_online(void)$/;"	f
rcu_my_thread_group_empty	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcu_my_thread_group_empty);$/;"	v
rcu_my_thread_group_empty	kernel/rcupdate.c	/^int rcu_my_thread_group_empty(void)$/;"	f
rcu_needs_cpu	kernel/rcutree_plugin.h	/^int rcu_needs_cpu(int cpu, unsigned long *delta_jiffies)$/;"	f
rcu_next_node_entry	kernel/rcutiny_plugin.h	/^static struct list_head *rcu_next_node_entry(struct task_struct *t)$/;"	f
rcu_next_node_entry	kernel/rcutree_plugin.h	/^static struct list_head *rcu_next_node_entry(struct task_struct *t,$/;"	f
rcu_nmi_enter	kernel/rcutree.c	/^void rcu_nmi_enter(void)$/;"	f
rcu_nmi_exit	kernel/rcutree.c	/^void rcu_nmi_exit(void)$/;"	f
rcu_no_completed	kernel/rcutorture.c	/^static int rcu_no_completed(void)$/;"	f	file:
rcu_nocb_adopt_orphan_cbs	kernel/rcutree_plugin.h	/^static bool __maybe_unused rcu_nocb_adopt_orphan_cbs(struct rcu_state *rsp,$/;"	f
rcu_nocb_kthread	kernel/rcutree_plugin.h	/^static int rcu_nocb_kthread(void *arg)$/;"	f
rcu_nocb_mask	kernel/rcutree_plugin.h	/^static cpumask_var_t rcu_nocb_mask; \/* CPUs to have callbacks offloaded. *\/$/;"	v
rcu_nocb_poll	kernel/rcutree_plugin.h	/^static bool __read_mostly rcu_nocb_poll;    \/* Offload kthread are to poll. *\/$/;"	v
rcu_nocb_q_lengths	kernel/rcutree.h	/^static inline void rcu_nocb_q_lengths(struct rcu_data *rdp, long *ql, long *qll)$/;"	f
rcu_nocb_setup	kernel/rcutree_plugin.h	/^static int __init rcu_nocb_setup(char *str)$/;"	f
rcu_node	kernel/rcutree.h	/^struct rcu_node {$/;"	s
rcu_node_boost_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcu_node_boost_fops = {$/;"	v	typeref:struct:file_operations	file:
rcu_node_boost_open	kernel/rcutree_trace.c	/^static int rcu_node_boost_open(struct inode *inode, struct file *file)$/;"	f	file:
rcu_node_class	kernel/rcutree.c	/^static struct lock_class_key rcu_node_class[RCU_NUM_LVLS];$/;"	v	typeref:struct:lock_class_key	file:
rcu_note_context_switch	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_note_context_switch);$/;"	v
rcu_note_context_switch	kernel/rcutree.c	/^void rcu_note_context_switch(int cpu)$/;"	f
rcu_oom_callback	kernel/rcutree_plugin.h	/^static void rcu_oom_callback(struct rcu_head *rhp)$/;"	f
rcu_oom_nb	kernel/rcutree_plugin.h	/^static struct notifier_block rcu_oom_nb = {$/;"	v	typeref:struct:notifier_block
rcu_oom_notify	kernel/rcutree_plugin.h	/^static int rcu_oom_notify(struct notifier_block *self,$/;"	f
rcu_oom_notify_cpu	kernel/rcutree_plugin.h	/^static void rcu_oom_notify_cpu(void *unused)$/;"	f
rcu_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_panic	kernel/rcupdate.c	/^static int rcu_panic(struct notifier_block *this, unsigned long ev, void *ptr)$/;"	f	file:
rcu_panic_block	kernel/rcupdate.c	/^static struct notifier_block rcu_panic_block = {$/;"	v	typeref:struct:notifier_block	file:
rcu_pending	kernel/rcutree.c	/^static int rcu_pending(int cpu)$/;"	f	file:
rcu_pending_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcu_pending_fops = {$/;"	v	typeref:struct:file_operations	file:
rcu_pending_op	kernel/rcutree_trace.c	/^static const struct seq_operations rcu_pending_op = {$/;"	v	typeref:struct:seq_operations	file:
rcu_pending_open	kernel/rcutree_trace.c	/^static int rcu_pending_open(struct inode *inode, struct file *file)$/;"	f	file:
rcu_preempt_blocked_readers_any	kernel/rcutiny_plugin.h	/^static int rcu_preempt_blocked_readers_any(void)$/;"	f
rcu_preempt_blocked_readers_cgp	kernel/rcutiny_plugin.h	/^static int rcu_preempt_blocked_readers_cgp(void)$/;"	f
rcu_preempt_blocked_readers_cgp	kernel/rcutree_plugin.h	/^static int rcu_preempt_blocked_readers_cgp(struct rcu_node *rnp)$/;"	f
rcu_preempt_boost_start_gp	kernel/rcutiny_plugin.h	/^static void rcu_preempt_boost_start_gp(void)$/;"	f
rcu_preempt_boost_start_gp	kernel/rcutree_plugin.h	/^static void rcu_preempt_boost_start_gp(struct rcu_node *rnp)$/;"	f
rcu_preempt_check_blocked_tasks	kernel/rcutree_plugin.h	/^static void rcu_preempt_check_blocked_tasks(struct rcu_node *rnp)$/;"	f
rcu_preempt_check_callbacks	kernel/rcutiny_plugin.h	/^static void rcu_preempt_check_callbacks(void)$/;"	f
rcu_preempt_check_callbacks	kernel/rcutree_plugin.h	/^static void rcu_preempt_check_callbacks(int cpu)$/;"	f
rcu_preempt_cpu_has_nonlazy_callbacks	kernel/rcutree_plugin.h	/^static bool rcu_preempt_cpu_has_nonlazy_callbacks(int cpu)$/;"	f
rcu_preempt_cpu_qs	kernel/rcutiny_plugin.h	/^static void rcu_preempt_cpu_qs(void)$/;"	f
rcu_preempt_ctrlblk	kernel/rcutiny_plugin.h	/^static struct rcu_preempt_ctrlblk rcu_preempt_ctrlblk = {$/;"	v	typeref:struct:rcu_preempt_ctrlblk
rcu_preempt_ctrlblk	kernel/rcutiny_plugin.h	/^struct rcu_preempt_ctrlblk {$/;"	s
rcu_preempt_do_callbacks	kernel/rcutree_plugin.h	/^static void rcu_preempt_do_callbacks(void)$/;"	f
rcu_preempt_gp_in_progress	kernel/rcutiny_plugin.h	/^static int rcu_preempt_gp_in_progress(void)$/;"	f
rcu_preempt_needs_another_gp	kernel/rcutiny_plugin.h	/^static int rcu_preempt_needs_another_gp(void)$/;"	f
rcu_preempt_needs_cpu	kernel/rcutiny_plugin.h	/^int rcu_preempt_needs_cpu(void)$/;"	f
rcu_preempt_note_context_switch	kernel/rcutiny_plugin.h	/^void rcu_preempt_note_context_switch(void)$/;"	f
rcu_preempt_note_context_switch	kernel/rcutree_plugin.h	/^static void rcu_preempt_note_context_switch(int cpu)$/;"	f
rcu_preempt_offline_tasks	kernel/rcutree_plugin.h	/^static int rcu_preempt_offline_tasks(struct rcu_state *rsp,$/;"	f
rcu_preempt_process_callbacks	kernel/rcutiny_plugin.h	/^static void rcu_preempt_process_callbacks(void)$/;"	f
rcu_preempt_qs	kernel/rcutree_plugin.h	/^static void rcu_preempt_qs(int cpu)$/;"	f
rcu_preempt_remove_callbacks	kernel/rcutiny_plugin.h	/^static void rcu_preempt_remove_callbacks(struct rcu_ctrlblk *rcp)$/;"	f
rcu_preempt_running_reader	kernel/rcutiny_plugin.h	/^static int rcu_preempt_running_reader(void)$/;"	f
rcu_preempt_start_gp	kernel/rcutiny_plugin.h	/^static void rcu_preempt_start_gp(void)$/;"	f
rcu_preempt_state	kernel/rcutree_plugin.h	/^struct rcu_state rcu_preempt_state =$/;"	v	typeref:struct:rcu_state
rcu_preempted_readers_exp	kernel/rcutiny_plugin.h	/^static int rcu_preempted_readers_exp(void)$/;"	f
rcu_preempted_readers_exp	kernel/rcutree_plugin.h	/^static int rcu_preempted_readers_exp(struct rcu_node *rnp)$/;"	f
rcu_prepare_cpu	kernel/rcutree.c	/^static void __cpuinit rcu_prepare_cpu(int cpu)$/;"	f	file:
rcu_prepare_for_idle	kernel/rcutree_plugin.h	/^static void rcu_prepare_for_idle(int cpu)$/;"	f
rcu_prepare_for_idle_init	kernel/rcutree_plugin.h	/^static void rcu_prepare_for_idle_init(int cpu)$/;"	f
rcu_prepare_kthreads	kernel/rcutree_plugin.h	/^static void __cpuinit rcu_prepare_kthreads(int cpu)$/;"	f
rcu_print_detail_task_stall	kernel/rcutree_plugin.h	/^static void rcu_print_detail_task_stall(struct rcu_state *rsp)$/;"	f
rcu_print_detail_task_stall_rnp	kernel/rcutree_plugin.h	/^static void rcu_print_detail_task_stall_rnp(struct rcu_node *rnp)$/;"	f
rcu_print_task_stall	kernel/rcutree_plugin.h	/^static int rcu_print_task_stall(struct rcu_node *rnp)$/;"	f
rcu_print_task_stall_begin	kernel/rcutree_plugin.h	/^static void rcu_print_task_stall_begin(struct rcu_node *rnp)$/;"	f
rcu_print_task_stall_end	kernel/rcutree_plugin.h	/^static void rcu_print_task_stall_end(void)$/;"	f
rcu_process_callbacks	kernel/rcutiny.c	/^static void rcu_process_callbacks(struct softirq_action *unused)$/;"	f	file:
rcu_process_callbacks	kernel/rcutree.c	/^static void rcu_process_callbacks(struct softirq_action *unused)$/;"	f	file:
rcu_process_gp_end	kernel/rcutree.c	/^rcu_process_gp_end(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_qsctr_help	kernel/rcutiny.c	/^static int rcu_qsctr_help(struct rcu_ctrlblk *rcp)$/;"	f	file:
rcu_random	kernel/rcutorture.c	/^rcu_random(struct rcu_random_state *rrsp)$/;"	f	file:
rcu_random_state	kernel/rcutorture.c	/^struct rcu_random_state {$/;"	s	file:
rcu_read_delay	kernel/rcutorture.c	/^static void rcu_read_delay(struct rcu_random_state *rrsp)$/;"	f	file:
rcu_read_lock_bh_held	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcu_read_lock_bh_held);$/;"	v
rcu_read_lock_bh_held	kernel/rcupdate.c	/^int rcu_read_lock_bh_held(void)$/;"	f
rcu_read_unlock_special	kernel/rcutiny_plugin.h	/^void rcu_read_unlock_special(struct task_struct *t)$/;"	f
rcu_read_unlock_special	kernel/rcutree_plugin.h	/^void rcu_read_unlock_special(struct task_struct *t)$/;"	f
rcu_register_oom_notifier	kernel/rcutree_plugin.h	/^early_initcall(rcu_register_oom_notifier);$/;"	v
rcu_register_oom_notifier	kernel/rcutree_plugin.h	/^static int __init rcu_register_oom_notifier(void)$/;"	f
rcu_report_exp_done	kernel/rcutiny_plugin.h	/^static void rcu_report_exp_done(void)$/;"	f
rcu_report_exp_rnp	kernel/rcutree_plugin.h	/^static void rcu_report_exp_rnp(struct rcu_state *rsp, struct rcu_node *rnp,$/;"	f
rcu_report_qs_rdp	kernel/rcutree.c	/^rcu_report_qs_rdp(int cpu, struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_report_unblock_qs_rnp	kernel/rcutree_plugin.h	/^static void rcu_report_unblock_qs_rnp(struct rcu_node *rnp, unsigned long flags)$/;"	f
rcu_sched_ctrlblk	kernel/rcutiny_plugin.h	/^static struct rcu_ctrlblk rcu_sched_ctrlblk = {$/;"	v	typeref:struct:rcu_ctrlblk
rcu_sched_force_quiescent_state	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_sched_force_quiescent_state);$/;"	v
rcu_sched_force_quiescent_state	kernel/rcutree.c	/^void rcu_sched_force_quiescent_state(void)$/;"	f
rcu_sched_lock_key	kernel/rcupdate.c	/^static struct lock_class_key rcu_sched_lock_key;$/;"	v	typeref:struct:lock_class_key	file:
rcu_sched_lock_map	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcu_sched_lock_map);$/;"	v
rcu_sched_lock_map	kernel/rcupdate.c	/^struct lockdep_map rcu_sched_lock_map =$/;"	v	typeref:struct:lockdep_map
rcu_sched_qs	kernel/rcutiny.c	/^void rcu_sched_qs(int cpu)$/;"	f
rcu_sched_qs	kernel/rcutree.c	/^void rcu_sched_qs(int cpu)$/;"	f
rcu_sched_state	kernel/rcutree.c	/^struct rcu_state rcu_sched_state =$/;"	v	typeref:struct:rcu_state
rcu_sched_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_sched_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_scheduler_active	kernel/rcutiny_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_scheduler_active);$/;"	v
rcu_scheduler_active	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_scheduler_active);$/;"	v
rcu_scheduler_really_started	kernel/rcutiny_plugin.h	/^early_initcall(rcu_scheduler_really_started);$/;"	v
rcu_scheduler_really_started	kernel/rcutiny_plugin.h	/^static int __init rcu_scheduler_really_started(void)$/;"	f
rcu_scheduler_really_started	kernel/rcutree_plugin.h	/^early_initcall(rcu_scheduler_really_started);$/;"	v
rcu_scheduler_really_started	kernel/rcutree_plugin.h	/^static int __init rcu_scheduler_really_started(void)$/;"	f
rcu_scheduler_starting	kernel/rcutiny_plugin.h	/^void __init rcu_scheduler_starting(void)$/;"	f
rcu_scheduler_starting	kernel/rcutree.c	/^void rcu_scheduler_starting(void)$/;"	f
rcu_send_cbs_to_orphanage	kernel/rcutree.c	/^rcu_send_cbs_to_orphanage(int cpu, struct rcu_state *rsp,$/;"	f	file:
rcu_spawn_gp_kthread	kernel/rcutree.c	/^early_initcall(rcu_spawn_gp_kthread);$/;"	v
rcu_spawn_gp_kthread	kernel/rcutree.c	/^static int __init rcu_spawn_gp_kthread(void)$/;"	f	file:
rcu_spawn_kthreads	kernel/rcutiny_plugin.h	/^early_initcall(rcu_spawn_kthreads);$/;"	v
rcu_spawn_kthreads	kernel/rcutiny_plugin.h	/^static int __init rcu_spawn_kthreads(void)$/;"	f
rcu_spawn_kthreads	kernel/rcutree_plugin.h	/^early_initcall(rcu_spawn_kthreads);$/;"	v
rcu_spawn_kthreads	kernel/rcutree_plugin.h	/^static int __init rcu_spawn_kthreads(void)$/;"	f
rcu_spawn_nocb_kthreads	kernel/rcutree_plugin.h	/^static void __init rcu_spawn_nocb_kthreads(struct rcu_state *rsp)$/;"	f
rcu_spawn_one_boost_kthread	kernel/rcutree_plugin.h	/^static int __cpuinit rcu_spawn_one_boost_kthread(struct rcu_state *rsp,$/;"	f
rcu_start_gp_per_cpu	kernel/rcutree.c	/^rcu_start_gp_per_cpu(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)$/;"	f	file:
rcu_state	kernel/rcutree.c	/^static struct rcu_state *rcu_state;$/;"	v	typeref:struct:rcu_state	file:
rcu_state	kernel/rcutree.h	/^struct rcu_state {$/;"	s
rcu_state	kernel/rcutree_plugin.h	/^static struct rcu_state *rcu_state = &rcu_preempt_state;$/;"	v	typeref:struct:rcu_state
rcu_state	kernel/rcutree_plugin.h	/^static struct rcu_state *rcu_state = &rcu_sched_state;$/;"	v	typeref:struct:rcu_state
rcu_struct_flavors	kernel/rcutree.c	/^LIST_HEAD(rcu_struct_flavors);$/;"	v
rcu_stutter_wait	kernel/rcutorture.c	/^rcu_stutter_wait(char *title)$/;"	f	file:
rcu_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_sync_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_sync_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_sync_torture_init	kernel/rcutorture.c	/^static void rcu_sync_torture_init(void)$/;"	f	file:
rcu_synchronize	kernel/rcupdate.c	/^struct rcu_synchronize {$/;"	s	file:
rcu_synchronize	kernel/srcu.c	/^struct rcu_synchronize {$/;"	s	file:
rcu_torture	kernel/rcutorture.c	/^struct rcu_torture {$/;"	s	file:
rcu_torture_alloc	kernel/rcutorture.c	/^rcu_torture_alloc(void)$/;"	f	file:
rcu_torture_barrier	kernel/rcutorture.c	/^static int rcu_torture_barrier(void *arg)$/;"	f	file:
rcu_torture_barrier_cbf	kernel/rcutorture.c	/^void rcu_torture_barrier_cbf(struct rcu_head *rcu)$/;"	f
rcu_torture_barrier_cbs	kernel/rcutorture.c	/^static int rcu_torture_barrier_cbs(void *arg)$/;"	f	file:
rcu_torture_barrier_cleanup	kernel/rcutorture.c	/^static void rcu_torture_barrier_cleanup(void)$/;"	f	file:
rcu_torture_barrier_init	kernel/rcutorture.c	/^static int rcu_torture_barrier_init(void)$/;"	f	file:
rcu_torture_boost	kernel/rcutorture.c	/^static int rcu_torture_boost(void *arg)$/;"	f	file:
rcu_torture_boost_cb	kernel/rcutorture.c	/^static void rcu_torture_boost_cb(struct rcu_head *head)$/;"	f	file:
rcu_torture_cb	kernel/rcutorture.c	/^rcu_torture_cb(struct rcu_head *p)$/;"	f	file:
rcu_torture_cleanup	kernel/rcutorture.c	/^module_exit(rcu_torture_cleanup);$/;"	v
rcu_torture_cleanup	kernel/rcutorture.c	/^rcu_torture_cleanup(void)$/;"	f	file:
rcu_torture_completed	kernel/rcutorture.c	/^static int rcu_torture_completed(void)$/;"	f	file:
rcu_torture_current	kernel/rcutorture.c	/^static struct rcu_torture __rcu *rcu_torture_current;$/;"	v	typeref:struct:__rcu	file:
rcu_torture_current_version	kernel/rcutorture.c	/^static unsigned long rcu_torture_current_version;$/;"	v	file:
rcu_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_torture_fakewriter	kernel/rcutorture.c	/^rcu_torture_fakewriter(void *arg)$/;"	f	file:
rcu_torture_fqs	kernel/rcutorture.c	/^rcu_torture_fqs(void *arg)$/;"	f	file:
rcu_torture_free	kernel/rcutorture.c	/^rcu_torture_free(struct rcu_torture *p)$/;"	f	file:
rcu_torture_init	kernel/rcutorture.c	/^module_init(rcu_torture_init);$/;"	v
rcu_torture_init	kernel/rcutorture.c	/^rcu_torture_init(void)$/;"	f	file:
rcu_torture_onoff	kernel/rcutorture.c	/^rcu_torture_onoff(void *arg)$/;"	f	file:
rcu_torture_onoff_cleanup	kernel/rcutorture.c	/^static void rcu_torture_onoff_cleanup(void)$/;"	f	file:
rcu_torture_onoff_init	kernel/rcutorture.c	/^rcu_torture_onoff_init(void)$/;"	f	file:
rcu_torture_ops	kernel/rcutorture.c	/^struct rcu_torture_ops {$/;"	s	file:
rcu_torture_print_module_parms	kernel/rcutorture.c	/^rcu_torture_print_module_parms(struct rcu_torture_ops *cur_ops, char *tag)$/;"	f	file:
rcu_torture_printk	kernel/rcutorture.c	/^rcu_torture_printk(char *page)$/;"	f	file:
rcu_torture_reader	kernel/rcutorture.c	/^rcu_torture_reader(void *arg)$/;"	f	file:
rcu_torture_removed	kernel/rcutorture.c	/^static struct list_head rcu_torture_removed;$/;"	v	typeref:struct:list_head	file:
rcu_torture_shuffle	kernel/rcutorture.c	/^rcu_torture_shuffle(void *arg)$/;"	f	file:
rcu_torture_shuffle_tasks	kernel/rcutorture.c	/^static void rcu_torture_shuffle_tasks(void)$/;"	f	file:
rcu_torture_shutdown	kernel/rcutorture.c	/^rcu_torture_shutdown(void *arg)$/;"	f	file:
rcu_torture_stall	kernel/rcutorture.c	/^static int __cpuinit rcu_torture_stall(void *args)$/;"	f	file:
rcu_torture_stall_cleanup	kernel/rcutorture.c	/^static void rcu_torture_stall_cleanup(void)$/;"	f	file:
rcu_torture_stall_init	kernel/rcutorture.c	/^static int __init rcu_torture_stall_init(void)$/;"	f	file:
rcu_torture_stats	kernel/rcutorture.c	/^rcu_torture_stats(void *arg)$/;"	f	file:
rcu_torture_stats_print	kernel/rcutorture.c	/^rcu_torture_stats_print(void)$/;"	f	file:
rcu_torture_stutter	kernel/rcutorture.c	/^rcu_torture_stutter(void *arg)$/;"	f	file:
rcu_torture_timer	kernel/rcutorture.c	/^static void rcu_torture_timer(unsigned long unused)$/;"	f	file:
rcu_torture_wcount	kernel/rcutorture.c	/^static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1];$/;"	v	file:
rcu_torture_writer	kernel/rcutorture.c	/^rcu_torture_writer(void *arg)$/;"	f	file:
rcu_tortures	kernel/rcutorture.c	/^static struct rcu_torture rcu_tortures[10 * RCU_TORTURE_PIPE_LEN];$/;"	v	typeref:struct:rcu_torture	file:
rcu_trace_clock_local	kernel/rcutorture.c	/^static u64 notrace rcu_trace_clock_local(void)$/;"	f	file:
rcu_trace_sub_qlen	kernel/rcutiny_plugin.h	/^static void rcu_trace_sub_qlen(struct rcu_ctrlblk *rcp, int n)$/;"	f
rcu_user_enter	kernel/rcutree.c	/^void rcu_user_enter(void)$/;"	f
rcu_user_enter_after_irq	kernel/rcutree.c	/^void rcu_user_enter_after_irq(void)$/;"	f
rcu_user_exit	kernel/rcutree.c	/^void rcu_user_exit(void)$/;"	f
rcu_user_exit_after_irq	kernel/rcutree.c	/^void rcu_user_exit_after_irq(void)$/;"	f
rcu_wait	kernel/rcutree.h	349;"	d
rcu_wake_cond	kernel/rcutree_plugin.h	/^static void rcu_wake_cond(struct task_struct *t, int status)$/;"	f
rcubarrier_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcubarrier_fops = {$/;"	v	typeref:struct:file_operations	file:
rcubarrier_open	kernel/rcutree_trace.c	/^static int rcubarrier_open(struct inode *inode, struct file *file)$/;"	f	file:
rcucblist	kernel/rcutiny_plugin.h	/^	struct rcu_head *rcucblist;	\/* List of pending callbacks (CBs). *\/$/;"	m	struct:rcu_ctrlblk	typeref:struct:rcu_ctrlblk::rcu_head
rcudata_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcudata_fops = {$/;"	v	typeref:struct:file_operations	file:
rcudata_open	kernel/rcutree_trace.c	/^static int rcudata_open(struct inode *inode, struct file *file)$/;"	f	file:
rcudate_op	kernel/rcutree_trace.c	/^static const struct seq_operations rcudate_op = {$/;"	v	typeref:struct:seq_operations	file:
rcudir	kernel/rcutiny_plugin.h	/^static struct dentry *rcudir;$/;"	v	typeref:struct:dentry
rcudir	kernel/rcutree_trace.c	/^static struct dentry *rcudir;$/;"	v	typeref:struct:dentry	file:
rcuexp_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcuexp_fops = {$/;"	v	typeref:struct:file_operations	file:
rcuexp_open	kernel/rcutree_trace.c	/^static int rcuexp_open(struct inode *inode, struct file *file)$/;"	f	file:
rcugp_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcugp_fops = {$/;"	v	typeref:struct:file_operations	file:
rcugp_open	kernel/rcutree_trace.c	/^static int rcugp_open(struct inode *inode, struct file *file)$/;"	f	file:
rcuhead_debug_descr	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcuhead_debug_descr);$/;"	v
rcuhead_debug_descr	kernel/rcupdate.c	/^struct debug_obj_descr rcuhead_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr
rcuhead_fixup_activate	kernel/rcupdate.c	/^static int rcuhead_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
rcuhead_fixup_free	kernel/rcupdate.c	/^static int rcuhead_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
rcuhead_fixup_init	kernel/rcupdate.c	/^static int rcuhead_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
rcuhier_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcuhier_fops = {$/;"	v	typeref:struct:file_operations	file:
rcuhier_open	kernel/rcutree_trace.c	/^static int rcuhier_open(struct inode *inode, struct file *file)$/;"	f	file:
rcutiny_trace_cleanup	kernel/rcutiny_plugin.h	/^module_exit(rcutiny_trace_cleanup);$/;"	v
rcutiny_trace_cleanup	kernel/rcutiny_plugin.h	/^static void __exit rcutiny_trace_cleanup(void)$/;"	f
rcutiny_trace_init	kernel/rcutiny_plugin.h	/^module_init(rcutiny_trace_init);$/;"	v
rcutiny_trace_init	kernel/rcutiny_plugin.h	/^static int __init rcutiny_trace_init(void)$/;"	f
rcutorture_booster_cleanup	kernel/rcutorture.c	/^static void rcutorture_booster_cleanup(int cpu)$/;"	f	file:
rcutorture_booster_init	kernel/rcutorture.c	/^static int rcutorture_booster_init(int cpu)$/;"	f	file:
rcutorture_cpu_nb	kernel/rcutorture.c	/^static struct notifier_block rcutorture_cpu_nb = {$/;"	v	typeref:struct:notifier_block	file:
rcutorture_cpu_notify	kernel/rcutorture.c	/^static int rcutorture_cpu_notify(struct notifier_block *self,$/;"	f	file:
rcutorture_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcutorture_fops = {$/;"	v	typeref:struct:file_operations	file:
rcutorture_open	kernel/rcutree_trace.c	/^static int rcutorture_open(struct inode *inode, struct file *file)$/;"	f	file:
rcutorture_record_progress	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcutorture_record_progress);$/;"	v
rcutorture_record_progress	kernel/rcutree.c	/^void rcutorture_record_progress(unsigned long vernum)$/;"	f
rcutorture_record_test_transition	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcutorture_record_test_transition);$/;"	v
rcutorture_record_test_transition	kernel/rcutree.c	/^void rcutorture_record_test_transition(void)$/;"	f
rcutorture_runnable	kernel/rcutorture.c	/^int rcutorture_runnable = RCUTORTURE_RUNNABLE_INIT;$/;"	v
rcutorture_shutdown_absorb	kernel/rcutorture.c	/^static void rcutorture_shutdown_absorb(char *title)$/;"	f	file:
rcutorture_shutdown_nb	kernel/rcutorture.c	/^static struct notifier_block rcutorture_shutdown_nb = {$/;"	v	typeref:struct:notifier_block	file:
rcutorture_shutdown_notify	kernel/rcutorture.c	/^rcutorture_shutdown_notify(struct notifier_block *unused1,$/;"	f	file:
rcutorture_testseq	kernel/rcutree.c	/^unsigned long rcutorture_testseq;$/;"	v
rcutorture_trace_dump	kernel/rcutorture.c	/^void rcutorture_trace_dump(void)$/;"	f
rcutorture_vernum	kernel/rcutree.c	/^unsigned long rcutorture_vernum;$/;"	v
rcutree_trace_cleanup	kernel/rcutree_trace.c	/^module_exit(rcutree_trace_cleanup);$/;"	v
rcutree_trace_cleanup	kernel/rcutree_trace.c	/^static void __exit rcutree_trace_cleanup(void)$/;"	f	file:
rcutree_trace_init	kernel/rcutree_trace.c	/^module_init(rcutree_trace_init);$/;"	v
rcutree_trace_init	kernel/rcutree_trace.c	/^static int __init rcutree_trace_init(void)$/;"	f	file:
rda	kernel/rcutree.h	/^	struct rcu_data __percpu *rda;		\/* pointer of percu rcu_data. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::__percpu
rdev	kernel/auditsc.c	/^	dev_t			rdev;$/;"	m	struct:audit_names	file:
rdllink	fs/eventpoll.c	/^	struct list_head rdllink;$/;"	m	struct:epitem	typeref:struct:epitem::list_head	file:
rdllist	fs/eventpoll.c	/^	struct list_head rdllist;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::list_head	file:
rdwr_pipefifo_fops	fs/pipe.c	/^const struct file_operations rdwr_pipefifo_fops = {$/;"	v	typeref:struct:file_operations
read_ahead_kb_store	mm/backing-dev.c	/^static ssize_t read_ahead_kb_store(struct device *dev,$/;"	f	file:
read_block_bitmap	fs/ext3/balloc.c	/^read_block_bitmap(struct super_block *sb, unsigned int block_group)$/;"	f	file:
read_cache_page	mm/filemap.c	/^EXPORT_SYMBOL(read_cache_page);$/;"	v
read_cache_page	mm/filemap.c	/^struct page *read_cache_page(struct address_space *mapping,$/;"	f
read_cache_page_async	mm/filemap.c	/^EXPORT_SYMBOL(read_cache_page_async);$/;"	v
read_cache_page_async	mm/filemap.c	/^struct page *read_cache_page_async(struct address_space *mapping,$/;"	f
read_cache_page_gfp	mm/filemap.c	/^EXPORT_SYMBOL(read_cache_page_gfp);$/;"	v
read_cache_page_gfp	mm/filemap.c	/^struct page *read_cache_page_gfp(struct address_space *mapping,$/;"	f
read_cache_pages	mm/readahead.c	/^EXPORT_SYMBOL(read_cache_pages);$/;"	v
read_cache_pages	mm/readahead.c	/^int read_cache_pages(struct address_space *mapping, struct list_head *pages,$/;"	f
read_cache_pages_invalidate_page	mm/readahead.c	/^static void read_cache_pages_invalidate_page(struct address_space *mapping,$/;"	f	file:
read_cache_pages_invalidate_pages	mm/readahead.c	/^static void read_cache_pages_invalidate_pages(struct address_space *mapping,$/;"	f	file:
read_cred_subscribers	kernel/cred.c	/^static inline int read_cred_subscribers(const struct cred *cred)$/;"	f	file:
read_delay	kernel/rcutorture.c	/^	void (*read_delay)(struct rcu_random_state *rrsp);$/;"	m	struct:rcu_torture_ops	file:
read_enabled_file_bool	kernel/kprobes.c	/^static ssize_t read_enabled_file_bool(struct file *file,$/;"	f	file:
read_events	fs/aio.c	/^static int read_events(struct kioctx *ctx,$/;"	f	file:
read_inode_bitmap	fs/ext3/ialloc.c	/^read_inode_bitmap(struct super_block * sb, unsigned long block_group)$/;"	f	file:
read_mapping_page	include/linux/pagemap.h	/^static inline struct page *read_mapping_page(struct address_space *mapping,$/;"	f
read_mapping_page_async	include/linux/pagemap.h	/^static inline struct page *read_mapping_page_async($/;"	f
read_pages	mm/readahead.c	/^static int read_pages(struct address_space *mapping, struct file *filp,$/;"	f	file:
read_pipefifo_fops	fs/pipe.c	/^const struct file_operations read_pipefifo_fops = {$/;"	v	typeref:struct:file_operations
read_profile	kernel/profile.c	/^read_profile(struct file *file, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
read_scan_unevictable_node	mm/vmscan.c	/^static ssize_t read_scan_unevictable_node(struct device *dev,$/;"	f	file:
read_swap_cache_async	mm/swap_state.c	/^struct page *read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
read_swap_header	mm/swapfile.c	/^static unsigned long read_swap_header(struct swap_info_struct *p,$/;"	f	file:
read_write	fs/compat_ioctl.c	/^	u8 read_write;$/;"	m	struct:i2c_smbus_ioctl_data32	file:
readahead	mm/readahead.c	/^SYSCALL_DEFINE(readahead)(int fd, loff_t offset, size_t count)$/;"	f
readdir_callback	fs/readdir.c	/^struct readdir_callback {$/;"	s	file:
reader_tasks	kernel/rcutorture.c	/^static struct task_struct **reader_tasks;$/;"	v	typeref:struct:task_struct	file:
readlock	kernel/rcutorture.c	/^	int (*readlock)(void);$/;"	m	struct:rcu_torture_ops	file:
readunlock	kernel/rcutorture.c	/^	void (*readunlock)(int idx);$/;"	m	struct:rcu_torture_ops	file:
real_mount	fs/mount.h	/^static inline struct mount *real_mount(struct vfsmount *mnt)$/;"	f
reallocate_resource	kernel/resource.c	/^int reallocate_resource(struct resource *root, struct resource *old,$/;"	f
really_put_req	fs/aio.c	/^static inline void really_put_req(struct kioctx *ctx, struct kiocb *req)$/;"	f	file:
reap_alien	mm/slab.c	/^static void reap_alien(struct kmem_cache *cachep, struct kmem_list3 *l3)$/;"	f	file:
reap_alien	mm/slab.c	1074;"	d	file:
reap_counter	fs/direct-io.c	/^	int reap_counter;		\/* rate limit reaping *\/$/;"	m	struct:dio_submit	file:
rear	kernel/lockdep.c	/^	unsigned int  front, rear;$/;"	m	struct:circular_queue	file:
reason	fs/fs-writeback.c	/^	enum wb_reason reason;		\/* why was writeback initiated? *\/$/;"	m	struct:wb_writeback_work	typeref:enum:wb_writeback_work::wb_reason	file:
rebind	mm/mempolicy.c	/^	void (*rebind)(struct mempolicy *pol, const nodemask_t *nodes,$/;"	m	struct:mempolicy_operations	file:
rebind_subsystems	kernel/cgroup.c	/^static int rebind_subsystems(struct cgroupfs_root *root,$/;"	f	file:
rebind_work	kernel/workqueue_internal.h	/^	struct work_struct	rebind_work;	\/* L: for busy worker *\/$/;"	m	struct:worker	typeref:struct:worker::work_struct
rebind_workers	kernel/workqueue.c	/^static void rebind_workers(struct worker_pool *pool)$/;"	f	file:
reboot_notifier_list	kernel/notifier.c	/^BLOCKING_NOTIFIER_HEAD(reboot_notifier_list);$/;"	v
reboot_pid_ns	kernel/pid_namespace.c	/^int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd)$/;"	f
rebuild_sched_domains	kernel/cpuset.c	/^void rebuild_sched_domains(void)$/;"	f
rebuild_sched_domains_locked	kernel/cpuset.c	/^static void rebuild_sched_domains_locked(void)$/;"	f	file:
rec_len	fs/ext3/ext3.h	/^	__le16	rec_len;		\/* Directory entry length *\/$/;"	m	struct:ext3_dir_entry
rec_len	fs/ext3/ext3.h	/^	__le16	rec_len;		\/* Directory entry length *\/$/;"	m	struct:ext3_dir_entry_2
rec_len	fs/ext3/namei.c	/^	__le16 rec_len;$/;"	m	struct:fake_dirent	file:
recalc_bh_state	fs/buffer.c	/^static void recalc_bh_state(void)$/;"	f	file:
recalc_sigpending	kernel/signal.c	/^EXPORT_SYMBOL(recalc_sigpending);$/;"	v
recalc_sigpending	kernel/signal.c	/^void recalc_sigpending(void)$/;"	f
recalc_sigpending_and_wake	kernel/signal.c	/^void recalc_sigpending_and_wake(struct task_struct *t)$/;"	f
recalc_sigpending_tsk	kernel/signal.c	/^static int recalc_sigpending_tsk(struct task_struct *t)$/;"	f	file:
recheck_pfmemalloc_active	mm/slab.c	/^static void recheck_pfmemalloc_active(struct kmem_cache *cachep,$/;"	f	file:
reclaim_account	mm/slub.c	/^SLAB_ATTR(reclaim_account);$/;"	v
reclaim_account_show	mm/slub.c	/^static ssize_t reclaim_account_show(struct kmem_cache *s, char *buf)$/;"	f	file:
reclaim_account_store	mm/slub.c	/^static ssize_t reclaim_account_store(struct kmem_cache *s,$/;"	f	file:
reclaim_clean_pages_from_list	mm/vmscan.c	/^unsigned long reclaim_clean_pages_from_list(struct zone *zone,$/;"	f
reclaim_iter	mm/memcontrol.c	/^	struct mem_cgroup_reclaim_iter reclaim_iter[DEF_PRIORITY + 1];$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::mem_cgroup_reclaim_iter	file:
record_gp_stall_check_time	kernel/rcutree.c	/^static void record_gp_stall_check_time(struct rcu_state *rsp)$/;"	f	file:
recv_idle	fs/compat_ioctl.c	/^	compat_time_t recv_idle;$/;"	m	struct:ppp_idle32	file:
recycle_rp_inst	kernel/kprobes.c	/^void __kprobes recycle_rp_inst(struct kretprobe_instance *ri,$/;"	f
red_zone	mm/slub.c	/^SLAB_ATTR(red_zone);$/;"	v
red_zone_show	mm/slub.c	/^static ssize_t red_zone_show(struct kmem_cache *s, char *buf)$/;"	f	file:
red_zone_store	mm/slub.c	/^static ssize_t red_zone_store(struct kmem_cache *s,$/;"	f	file:
redirty_page_for_writepage	mm/page-writeback.c	/^EXPORT_SYMBOL(redirty_page_for_writepage);$/;"	v
redirty_page_for_writepage	mm/page-writeback.c	/^int redirty_page_for_writepage(struct writeback_control *wbc, struct page *page)$/;"	f
redirty_tail	fs/fs-writeback.c	/^static void redirty_tail(struct inode *inode, struct bdi_writeback *wb)$/;"	f	file:
redundant_hardirqs_off	kernel/lockdep_internals.h	/^	int	redundant_hardirqs_off;$/;"	m	struct:lockdep_stats
redundant_hardirqs_on	kernel/lockdep_internals.h	/^	int	redundant_hardirqs_on;$/;"	m	struct:lockdep_stats
redundant_softirqs_off	kernel/lockdep_internals.h	/^	int	redundant_softirqs_off;$/;"	m	struct:lockdep_stats
redundant_softirqs_on	kernel/lockdep_internals.h	/^	int	redundant_softirqs_on;$/;"	m	struct:lockdep_stats
ref_module	kernel/module.c	/^EXPORT_SYMBOL_GPL(ref_module);$/;"	v
ref_module	kernel/module.c	/^int ref_module(struct module *a, struct module *b)$/;"	f
refcnt	fs/block_dev.c	/^	int			refcnt;$/;"	m	struct:bd_holder_disk	file:
refcnt	mm/memcontrol.c	/^	atomic_t	refcnt;$/;"	m	struct:mem_cgroup	file:
refcount	fs/direct-io.c	/^	unsigned long refcount;		\/* direct_io_worker() and bios *\/$/;"	m	struct:dio	file:
refcount	kernel/cpu.c	/^	int refcount;$/;"	m	struct:__anon55	file:
refcount	kernel/futex.c	/^	atomic_t refcount;$/;"	m	struct:futex_pi_state	file:
refcount	kernel/tracepoint.c	/^	int refcount;	\/* Number of times armed. 0 if disarmed. *\/$/;"	m	struct:tracepoint_entry	file:
refill_pi_state_cache	kernel/futex.c	/^static int refill_pi_state_cache(void)$/;"	f	file:
refill_stock	mm/memcontrol.c	/^static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f	file:
refresh_cpu_vm_stats	mm/vmstat.c	/^void refresh_cpu_vm_stats(int cpu)$/;"	f
refresh_zone_stat_thresholds	mm/vmstat.c	/^void refresh_zone_stat_thresholds(void)$/;"	f
refs	kernel/audit_tree.c	/^	atomic_long_t refs;$/;"	m	struct:audit_chunk	file:
refs	mm/hugetlb.c	/^	struct kref refs;$/;"	m	struct:resv_map	typeref:struct:resv_map::kref	file:
region_add	mm/hugetlb.c	/^static long region_add(struct list_head *head, long f, long t)$/;"	f	file:
region_chg	mm/hugetlb.c	/^static long region_chg(struct list_head *head, long f, long t)$/;"	f	file:
region_count	mm/hugetlb.c	/^static long region_count(struct list_head *head, long f, long t)$/;"	f	file:
region_devres	kernel/resource.c	/^struct region_devres {$/;"	s	file:
region_truncate	mm/hugetlb.c	/^static long region_truncate(struct list_head *head, long end)$/;"	f	file:
regions	mm/hugetlb.c	/^	struct list_head regions;$/;"	m	struct:resv_map	typeref:struct:resv_map::list_head	file:
register_aggr_kprobe	kernel/kprobes.c	/^static int __kprobes register_aggr_kprobe(struct kprobe *orig_p,$/;"	f	file:
register_chrdev_region	fs/char_dev.c	/^EXPORT_SYMBOL(register_chrdev_region);$/;"	v
register_chrdev_region	fs/char_dev.c	/^int register_chrdev_region(dev_t from, unsigned count, const char *name)$/;"	f
register_console	kernel/printk.c	/^EXPORT_SYMBOL(register_console);$/;"	v
register_console	kernel/printk.c	/^void register_console(struct console *newcon)$/;"	f
register_cpu_notifier	kernel/cpu.c	/^EXPORT_SYMBOL(register_cpu_notifier);$/;"	v
register_cpu_notifier	kernel/cpu.c	/^int __ref register_cpu_notifier(struct notifier_block *nb)$/;"	f
register_die_notifier	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(register_die_notifier);$/;"	v
register_die_notifier	kernel/notifier.c	/^int register_die_notifier(struct notifier_block *nb)$/;"	f
register_exec_domain	kernel/exec_domain.c	/^EXPORT_SYMBOL(register_exec_domain);$/;"	v
register_exec_domain	kernel/exec_domain.c	/^register_exec_domain(struct exec_domain *ep)$/;"	f
register_filesystem	fs/filesystems.c	/^EXPORT_SYMBOL(register_filesystem);$/;"	v
register_filesystem	fs/filesystems.c	/^int register_filesystem(struct file_system_type * fs)$/;"	f
register_jprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_jprobe);$/;"	v
register_jprobe	kernel/kprobes.c	/^int __kprobes register_jprobe(struct jprobe *jp)$/;"	f
register_jprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_jprobes);$/;"	v
register_jprobes	kernel/kprobes.c	/^int __kprobes register_jprobes(struct jprobe **jps, int num)$/;"	f
register_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kprobe);$/;"	v
register_kprobe	kernel/kprobes.c	/^int __kprobes register_kprobe(struct kprobe *p)$/;"	f
register_kprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kprobes);$/;"	v
register_kprobes	kernel/kprobes.c	/^int __kprobes register_kprobes(struct kprobe **kps, int num)$/;"	f
register_kretprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kretprobe);$/;"	v
register_kretprobe	kernel/kprobes.c	/^int __kprobes register_kretprobe(struct kretprobe *rp)$/;"	f
register_kretprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kretprobes);$/;"	v
register_kretprobes	kernel/kprobes.c	/^int __kprobes register_kretprobes(struct kretprobe **rps, int num)$/;"	f
register_lock_class	kernel/lockdep.c	/^register_lock_class(struct lockdep_map *lock, unsigned int subclass, int force)$/;"	f	file:
register_memory_resource	mm/memory_hotplug.c	/^static struct resource *register_memory_resource(u64 start, u64 size)$/;"	f	file:
register_module_notifier	kernel/module.c	/^EXPORT_SYMBOL(register_module_notifier);$/;"	v
register_module_notifier	kernel/module.c	/^int register_module_notifier(struct notifier_block * nb)$/;"	f
register_oom_notifier	mm/oom_kill.c	/^EXPORT_SYMBOL_GPL(register_oom_notifier);$/;"	v
register_oom_notifier	mm/oom_kill.c	/^int register_oom_notifier(struct notifier_block *nb)$/;"	f
register_page_bootmem_info_node	mm/memory_hotplug.c	/^void register_page_bootmem_info_node(struct pglist_data *pgdat)$/;"	f
register_page_bootmem_info_section	mm/memory_hotplug.c	/^static void register_page_bootmem_info_section(unsigned long start_pfn)$/;"	f	file:
register_reboot_notifier	kernel/sys.c	/^EXPORT_SYMBOL(register_reboot_notifier);$/;"	v
register_reboot_notifier	kernel/sys.c	/^int register_reboot_notifier(struct notifier_block *nb)$/;"	f
register_shrinker	mm/vmscan.c	/^EXPORT_SYMBOL(register_shrinker);$/;"	v
register_shrinker	mm/vmscan.c	/^void register_shrinker(struct shrinker *shrinker)$/;"	f
reinsert_swap_info	mm/swapfile.c	/^static void reinsert_swap_info(struct swap_info_struct *p)$/;"	f	file:
relatime_need_update	fs/inode.c	/^static int relatime_need_update(struct vfsmount *mnt, struct inode *inode,$/;"	f	file:
relax_domain_level	kernel/cpuset.c	/^	int relax_domain_level;$/;"	m	struct:cpuset	file:
relay_alloc_buf	kernel/relay.c	/^static void *relay_alloc_buf(struct rchan_buf *buf, size_t *size)$/;"	f	file:
relay_alloc_page_array	kernel/relay.c	/^static struct page **relay_alloc_page_array(unsigned int n_pages)$/;"	f	file:
relay_buf_empty	kernel/relay.c	/^static int relay_buf_empty(struct rchan_buf *buf)$/;"	f	file:
relay_buf_fault	kernel/relay.c	/^static int relay_buf_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
relay_buf_full	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_buf_full);$/;"	v
relay_buf_full	kernel/relay.c	/^int relay_buf_full(struct rchan_buf *buf)$/;"	f
relay_close	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_close);$/;"	v
relay_close	kernel/relay.c	/^void relay_close(struct rchan *chan)$/;"	f
relay_close_buf	kernel/relay.c	/^static void relay_close_buf(struct rchan_buf *buf)$/;"	f	file:
relay_consume_bytes	kernel/relay.c	/^static void relay_consume_bytes(struct rchan_buf *rbuf, int bytes_consumed)$/;"	f	file:
relay_create_buf	kernel/relay.c	/^static struct rchan_buf *relay_create_buf(struct rchan *chan)$/;"	f	file:
relay_create_buf_file	kernel/relay.c	/^static struct dentry *relay_create_buf_file(struct rchan *chan,$/;"	f	file:
relay_destroy_buf	kernel/relay.c	/^static void relay_destroy_buf(struct rchan_buf *buf)$/;"	f	file:
relay_destroy_channel	kernel/relay.c	/^static void relay_destroy_channel(struct kref *kref)$/;"	f	file:
relay_file_mmap	kernel/relay.c	/^static int relay_file_mmap(struct file *filp, struct vm_area_struct *vma)$/;"	f	file:
relay_file_mmap_close	kernel/relay.c	/^static void relay_file_mmap_close(struct vm_area_struct *vma)$/;"	f	file:
relay_file_mmap_ops	kernel/relay.c	/^static const struct vm_operations_struct relay_file_mmap_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
relay_file_open	kernel/relay.c	/^static int relay_file_open(struct inode *inode, struct file *filp)$/;"	f	file:
relay_file_operations	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_file_operations);$/;"	v
relay_file_operations	kernel/relay.c	/^const struct file_operations relay_file_operations = {$/;"	v	typeref:struct:file_operations
relay_file_poll	kernel/relay.c	/^static unsigned int relay_file_poll(struct file *filp, poll_table *wait)$/;"	f	file:
relay_file_read	kernel/relay.c	/^static ssize_t relay_file_read(struct file *filp,$/;"	f	file:
relay_file_read_avail	kernel/relay.c	/^static int relay_file_read_avail(struct rchan_buf *buf, size_t read_pos)$/;"	f	file:
relay_file_read_consume	kernel/relay.c	/^static void relay_file_read_consume(struct rchan_buf *buf,$/;"	f	file:
relay_file_read_end_pos	kernel/relay.c	/^static size_t relay_file_read_end_pos(struct rchan_buf *buf,$/;"	f	file:
relay_file_read_start_pos	kernel/relay.c	/^static size_t relay_file_read_start_pos(size_t read_pos,$/;"	f	file:
relay_file_read_subbuf_avail	kernel/relay.c	/^static size_t relay_file_read_subbuf_avail(size_t read_pos,$/;"	f	file:
relay_file_read_subbufs	kernel/relay.c	/^static ssize_t relay_file_read_subbufs(struct file *filp, loff_t *ppos,$/;"	f	file:
relay_file_release	kernel/relay.c	/^static int relay_file_release(struct inode *inode, struct file *filp)$/;"	f	file:
relay_file_splice_read	kernel/relay.c	/^static ssize_t relay_file_splice_read(struct file *in,$/;"	f	file:
relay_flush	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_flush);$/;"	v
relay_flush	kernel/relay.c	/^void relay_flush(struct rchan *chan)$/;"	f
relay_free_page_array	kernel/relay.c	/^static void relay_free_page_array(struct page **array)$/;"	f	file:
relay_hotcpu_callback	kernel/relay.c	/^static int __cpuinit relay_hotcpu_callback(struct notifier_block *nb,$/;"	f	file:
relay_init	kernel/relay.c	/^early_initcall(relay_init);$/;"	v
relay_init	kernel/relay.c	/^static __init int relay_init(void)$/;"	f	file:
relay_late_setup_files	kernel/relay.c	/^int relay_late_setup_files(struct rchan *chan,$/;"	f
relay_mmap_buf	kernel/relay.c	/^static int relay_mmap_buf(struct rchan_buf *buf, struct vm_area_struct *vma)$/;"	f	file:
relay_open	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_open);$/;"	v
relay_open	kernel/relay.c	/^struct rchan *relay_open(const char *base_filename,$/;"	f
relay_open_buf	kernel/relay.c	/^static struct rchan_buf *relay_open_buf(struct rchan *chan, unsigned int cpu)$/;"	f	file:
relay_page_release	kernel/relay.c	/^static void relay_page_release(struct splice_pipe_desc *spd, unsigned int i)$/;"	f	file:
relay_pipe_buf_ops	kernel/relay.c	/^static const struct pipe_buf_operations relay_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
relay_pipe_buf_release	kernel/relay.c	/^static void relay_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f	file:
relay_remove_buf	kernel/relay.c	/^static void relay_remove_buf(struct kref *kref)$/;"	f	file:
relay_reset	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_reset);$/;"	v
relay_reset	kernel/relay.c	/^void relay_reset(struct rchan *chan)$/;"	f
relay_set_buf_dentry	kernel/relay.c	/^static inline void relay_set_buf_dentry(struct rchan_buf *buf,$/;"	f	file:
relay_subbufs_consumed	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_subbufs_consumed);$/;"	v
relay_subbufs_consumed	kernel/relay.c	/^void relay_subbufs_consumed(struct rchan *chan,$/;"	f
relay_switch_subbuf	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_switch_subbuf);$/;"	v
relay_switch_subbuf	kernel/relay.c	/^size_t relay_switch_subbuf(struct rchan_buf *buf, size_t length)$/;"	f
releasable_read	kernel/cgroup.c	/^static u64 releasable_read(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
release_agent	kernel/cgroup.c	/^	char *release_agent;$/;"	m	struct:cgroup_sb_opts	file:
release_agent_path	kernel/cgroup.c	/^	char release_agent_path[PATH_MAX];$/;"	m	struct:cgroupfs_root	file:
release_child_resources	kernel/resource.c	/^void release_child_resources(struct resource *r)$/;"	f
release_freepages	mm/compaction.c	/^static unsigned long release_freepages(struct list_head *freelist)$/;"	f	file:
release_memory_resource	mm/memory_hotplug.c	/^static void release_memory_resource(struct resource *res)$/;"	f	file:
release_mounts	fs/namespace.c	/^void release_mounts(struct list_head *head)$/;"	f
release_pages	mm/swap.c	/^EXPORT_SYMBOL(release_pages);$/;"	v
release_pages	mm/swap.c	/^void release_pages(struct page **pages, int nr, int cold)$/;"	f
release_posix_timer	kernel/posix-timers.c	/^static void release_posix_timer(struct k_itimer *tmr, int it_id_set)$/;"	f	file:
release_probes	kernel/tracepoint.c	/^static inline void release_probes(struct tracepoint_func *old)$/;"	f	file:
release_pte_page	mm/huge_memory.c	/^static void release_pte_page(struct page *page)$/;"	f	file:
release_pte_pages	mm/huge_memory.c	/^static void release_pte_pages(pte_t *pte, pte_t *_pte)$/;"	f	file:
release_resource	kernel/resource.c	/^EXPORT_SYMBOL(release_resource);$/;"	v
release_resource	kernel/resource.c	/^int release_resource(struct resource *old)$/;"	f
release_task	kernel/exit.c	/^void release_task(struct task_struct * p)$/;"	f
remap_pfn_range	mm/memory.c	/^EXPORT_SYMBOL(remap_pfn_range);$/;"	v
remap_pfn_range	mm/memory.c	/^int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr,$/;"	f
remap_pfn_range	mm/nommu.c	/^EXPORT_SYMBOL(remap_pfn_range);$/;"	v
remap_pfn_range	mm/nommu.c	/^int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr,$/;"	f
remap_pmd_range	mm/memory.c	/^static inline int remap_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
remap_pte_range	mm/memory.c	/^static int remap_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
remap_pud_range	mm/memory.c	/^static inline int remap_pud_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
remap_vmalloc_range	mm/nommu.c	/^EXPORT_SYMBOL(remap_vmalloc_range);$/;"	v
remap_vmalloc_range	mm/nommu.c	/^int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,$/;"	f
remap_vmalloc_range	mm/vmalloc.c	/^EXPORT_SYMBOL(remap_vmalloc_range);$/;"	v
remap_vmalloc_range	mm/vmalloc.c	/^int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,$/;"	f
remote_node_defrag_ratio	mm/slub.c	/^SLAB_ATTR(remote_node_defrag_ratio);$/;"	v
remote_node_defrag_ratio_show	mm/slub.c	/^static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *s, char *buf)$/;"	f	file:
remote_node_defrag_ratio_store	mm/slub.c	/^static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *s,$/;"	f	file:
remote_softirq_cpu_notifier	kernel/softirq.c	/^static struct notifier_block __cpuinitdata remote_softirq_cpu_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
remote_softirq_cpu_notify	kernel/softirq.c	/^static int __cpuinit remote_softirq_cpu_notify(struct notifier_block *self,$/;"	f	file:
remote_softirq_receive	kernel/softirq.c	/^static void remote_softirq_receive(void *data)$/;"	f	file:
remove	kernel/cgroup.c	/^	struct work_struct remove;$/;"	m	struct:cgroup_event	typeref:struct:cgroup_event::work_struct	file:
remove_all_stable_nodes	mm/ksm.c	/^static int remove_all_stable_nodes(void)$/;"	f	file:
remove_arg_zero	fs/exec.c	/^EXPORT_SYMBOL(remove_arg_zero);$/;"	v
remove_arg_zero	fs/exec.c	/^int remove_arg_zero(struct linux_binprm *bprm)$/;"	f
remove_buf_file_default_callback	kernel/relay.c	/^static int remove_buf_file_default_callback(struct dentry *dentry)$/;"	f	file:
remove_dir	kernel/cgroup.c	/^static void remove_dir(struct dentry *d)$/;"	f	file:
remove_element	mm/mempool.c	/^static void *remove_element(mempool_t *pool)$/;"	f	file:
remove_full	mm/slub.c	/^static inline void remove_full(struct kmem_cache *s, struct page *page) {}$/;"	f	file:
remove_full	mm/slub.c	/^static void remove_full(struct kmem_cache *s, struct page *page)$/;"	f	file:
remove_hrtimer	kernel/hrtimer.c	/^remove_hrtimer(struct hrtimer *timer, struct hrtimer_clock_base *base)$/;"	f	file:
remove_inode_buffers	fs/buffer.c	/^int remove_inode_buffers(struct inode *inode)$/;"	f
remove_mapping	mm/vmscan.c	/^int remove_mapping(struct address_space *mapping, struct page *page)$/;"	f
remove_memory	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(remove_memory);$/;"	v
remove_memory	mm/memory_hotplug.c	/^int __ref remove_memory(int nid, u64 start, u64 size)$/;"	f
remove_memory	mm/memory_hotplug.c	/^int remove_memory(int nid, u64 start, u64 size)$/;"	f
remove_migration_pte	mm/migrate.c	/^static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,$/;"	f	file:
remove_migration_ptes	mm/migrate.c	/^static void remove_migration_ptes(struct page *old, struct page *new)$/;"	f	file:
remove_node_from_stable_tree	mm/ksm.c	/^static void remove_node_from_stable_tree(struct stable_node *stable_node)$/;"	f	file:
remove_notes_attrs	kernel/module.c	/^static inline void remove_notes_attrs(struct module *mod)$/;"	f	file:
remove_notes_attrs	kernel/module.c	/^static void remove_notes_attrs(struct module *mod)$/;"	f	file:
remove_partial	mm/slub.c	/^static inline void remove_partial(struct kmem_cache_node *n,$/;"	f	file:
remove_rmap_item_from_tree	mm/ksm.c	/^static void remove_rmap_item_from_tree(struct rmap_item *rmap_item)$/;"	f	file:
remove_sect_attrs	kernel/module.c	/^static inline void remove_sect_attrs(struct module *mod)$/;"	f	file:
remove_sect_attrs	kernel/module.c	/^static void remove_sect_attrs(struct module *mod)$/;"	f	file:
remove_stable_node	mm/ksm.c	/^static int remove_stable_node(struct stable_node *stable_node)$/;"	f	file:
remove_tasks_in_empty_cpuset	kernel/cpuset.c	/^static void remove_tasks_in_empty_cpuset(struct cpuset *cs)$/;"	f	file:
remove_tracepoint	kernel/tracepoint.c	/^static inline void remove_tracepoint(struct tracepoint_entry *e)$/;"	f	file:
remove_trailing_rmap_items	mm/ksm.c	/^static void remove_trailing_rmap_items(struct mm_slot *mm_slot,$/;"	f	file:
remove_vm_area	mm/vmalloc.c	/^struct vm_struct *remove_vm_area(const void *addr)$/;"	f
remove_vma	mm/mmap.c	/^static struct vm_area_struct *remove_vma(struct vm_area_struct *vma)$/;"	f	file:
remove_vma_list	mm/mmap.c	/^static void remove_vma_list(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
remove_wait_queue	kernel/wait.c	/^EXPORT_SYMBOL(remove_wait_queue);$/;"	v
remove_wait_queue	kernel/wait.c	/^void remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
remove_waiter	kernel/rtmutex.c	/^static void remove_waiter(struct rt_mutex *lock,$/;"	f	file:
removexattr	fs/xattr.c	/^removexattr(struct dentry *d, const char __user *name)$/;"	f	file:
rename_lock	fs/dcache.c	/^EXPORT_SYMBOL(rename_lock);$/;"	v
reparent_leader	kernel/exit.c	/^static void reparent_leader(struct task_struct *father, struct task_struct *p,$/;"	f	file:
replace_fd	fs/file.c	/^int replace_fd(unsigned fd, struct file *file, unsigned flags)$/;"	f
replace_mount_options	fs/namespace.c	/^EXPORT_SYMBOL(replace_mount_options);$/;"	v
replace_mount_options	fs/namespace.c	/^void replace_mount_options(struct super_block *sb, char *options)$/;"	f
replace_page	mm/ksm.c	/^static int replace_page(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
replace_page_cache_page	mm/filemap.c	/^EXPORT_SYMBOL_GPL(replace_page_cache_page);$/;"	v
replace_page_cache_page	mm/filemap.c	/^int replace_page_cache_page(struct page *old, struct page *new, gfp_t gfp_mask)$/;"	f
replace_path	fs/fs_struct.c	/^static inline int replace_path(struct path *p, const struct path *old, const struct path *new)$/;"	f	file:
report_hugepages	mm/hugetlb.c	/^static void __init report_hugepages(void)$/;"	f	file:
report_probe	kernel/kprobes.c	/^static void __kprobes report_probe(struct seq_file *pi, struct kprobe *p,$/;"	f	file:
req_state	fs/compat_ioctl.c	/^	char req_state;$/;"	m	struct:compat_sg_req_info	file:
request_asymmetric_key	kernel/module_signing.c	/^static struct key *request_asymmetric_key(const char *signer, size_t signer_len,$/;"	f	file:
request_dma	kernel/dma.c	/^EXPORT_SYMBOL(request_dma);$/;"	v
request_dma	kernel/dma.c	/^int request_dma(unsigned int dmanr, const char * device_id)$/;"	f
request_dma	kernel/dma.c	/^int request_dma(unsigned int dmanr, const char *device_id)$/;"	f
request_resource	kernel/resource.c	/^EXPORT_SYMBOL(request_resource);$/;"	v
request_resource	kernel/resource.c	/^int request_resource(struct resource *root, struct resource *new)$/;"	f
request_resource_conflict	kernel/resource.c	/^struct resource *request_resource_conflict(struct resource *root, struct resource *new)$/;"	f
requeue_futex	kernel/futex.c	/^void requeue_futex(struct futex_q *q, struct futex_hash_bucket *hb1,$/;"	f	file:
requeue_inode	fs/fs-writeback.c	/^static void requeue_inode(struct inode *inode, struct bdi_writeback *wb,$/;"	f	file:
requeue_io	fs/fs-writeback.c	/^static void requeue_io(struct inode *inode, struct bdi_writeback *wb)$/;"	f	file:
requeue_pi_key	kernel/futex.c	/^	union futex_key *requeue_pi_key;$/;"	m	struct:futex_q	typeref:union:futex_q::futex_key	file:
requeue_pi_wake_futex	kernel/futex.c	/^void requeue_pi_wake_futex(struct futex_q *q, union futex_key *key,$/;"	f	file:
required_kernelcore	mm/page_alloc.c	/^static unsigned long __initdata required_kernelcore;$/;"	v	file:
required_movablecore	mm/page_alloc.c	/^static unsigned long __initdata required_movablecore;$/;"	v	file:
res	mm/memcontrol.c	/^	struct res_counter res;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::res_counter	file:
res	mm/memory-failure.c	/^	unsigned long res;$/;"	m	struct:page_state	file:
res_counter_charge	kernel/res_counter.c	/^int res_counter_charge(struct res_counter *counter, unsigned long val,$/;"	f
res_counter_charge_locked	kernel/res_counter.c	/^int res_counter_charge_locked(struct res_counter *counter, unsigned long val,$/;"	f
res_counter_charge_nofail	kernel/res_counter.c	/^int res_counter_charge_nofail(struct res_counter *counter, unsigned long val,$/;"	f
res_counter_init	kernel/res_counter.c	/^void res_counter_init(struct res_counter *counter, struct res_counter *parent)$/;"	f
res_counter_member	kernel/res_counter.c	/^res_counter_member(struct res_counter *counter, int member)$/;"	f	file:
res_counter_memparse_write_strategy	kernel/res_counter.c	/^int res_counter_memparse_write_strategy(const char *buf,$/;"	f
res_counter_read	kernel/res_counter.c	/^ssize_t res_counter_read(struct res_counter *counter, int member,$/;"	f
res_counter_read_u64	kernel/res_counter.c	/^u64 res_counter_read_u64(struct res_counter *counter, int member)$/;"	f
res_counter_uncharge	kernel/res_counter.c	/^u64 res_counter_uncharge(struct res_counter *counter, unsigned long val)$/;"	f
res_counter_uncharge_locked	kernel/res_counter.c	/^u64 res_counter_uncharge_locked(struct res_counter *counter, unsigned long val)$/;"	f
res_counter_uncharge_until	kernel/res_counter.c	/^u64 res_counter_uncharge_until(struct res_counter *counter,$/;"	f
res_type	mm/memcontrol.c	/^enum res_type {$/;"	g	file:
rescue_wq	kernel/workqueue_internal.h	/^	struct workqueue_struct	*rescue_wq;	\/* I: the workqueue to rescue *\/$/;"	m	struct:worker	typeref:struct:worker::workqueue_struct
rescuer	kernel/workqueue.c	/^	struct worker		*rescuer;	\/* I: rescue worker *\/$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::worker	file:
rescuer_thread	kernel/workqueue.c	/^static int rescuer_thread(void *__rescuer)$/;"	f	file:
reserve_backup_gdb	fs/ext3/resize.c	/^static int reserve_backup_gdb(handle_t *handle, struct inode *inode,$/;"	f	file:
reserve_bootmem	mm/bootmem.c	/^int __init reserve_bootmem(unsigned long addr, unsigned long size,$/;"	f
reserve_bootmem_node	mm/bootmem.c	/^int __init reserve_bootmem_node(pg_data_t *pgdat, unsigned long physaddr,$/;"	f
reserve_region_with_split	kernel/resource.c	/^void __init reserve_region_with_split(struct resource *root,$/;"	f
reserve_setup	kernel/resource.c	/^static int __init reserve_setup(char *str)$/;"	f	file:
reserved	fs/compat_ioctl.c	/^        compat_int_t    reserved[1];$/;"	m	struct:serial_struct32	file:
reserved	mm/memory-failure.c	756;"	d	file:
reserved	mm/memory-failure.c	813;"	d	file:
reserved	mm/slub.c	/^SLAB_ATTR_RO(reserved);$/;"	v
reserved_blocks	fs/ext3/ext3.h	/^	__u16 reserved_blocks;  \/* Number of reserved blocks in this group *\/$/;"	m	struct:ext3_new_group_input
reserved_blocks	fs/ext3/ext3.h	/^	__u16 reserved_blocks;$/;"	m	struct:ext3_new_group_data
reserved_char	fs/compat_ioctl.c	/^        char    reserved_char[1];$/;"	m	struct:serial_struct32	file:
reserved_show	mm/slub.c	/^static ssize_t reserved_show(struct kmem_cache *s, char *buf)$/;"	f	file:
reserved_zero	fs/ext3/namei.c	/^		__le32 reserved_zero;$/;"	m	struct:dx_root::dx_root_info	file:
reset_cpu_stall_ticks	kernel/rcutiny_plugin.h	/^static void reset_cpu_stall_ticks(struct rcu_ctrlblk *rcp)$/;"	f
reset_files_struct	fs/file.c	/^void reset_files_struct(struct files_struct *files)$/;"	f
reset_isolation_suitable	mm/compaction.c	/^void reset_isolation_suitable(pg_data_t *pgdat)$/;"	f
reset_iter	kernel/kallsyms.c	/^static void reset_iter(struct kallsym_iter *iter, loff_t new_pos)$/;"	f	file:
reset_kprobe_instance	kernel/kprobes.c	/^static inline void reset_kprobe_instance(void)$/;"	f	file:
reset_node_lowmem_managed_pages	mm/bootmem.c	/^static void reset_node_lowmem_managed_pages(pg_data_t *pgdat)$/;"	f	file:
reset_node_lowmem_managed_pages	mm/nobootmem.c	/^static void reset_node_lowmem_managed_pages(pg_data_t *pgdat)$/;"	f	file:
reset_vma_resv_huge_pages	mm/hugetlb.c	/^void reset_vma_resv_huge_pages(struct vm_area_struct *vma)$/;"	f
resid	fs/compat_ioctl.c	/^	compat_int_t resid;		\/* [o] dxfer_len - actual_transferred *\/$/;"	m	struct:sg_io_hdr32	file:
resiliency_test	mm/slub.c	/^static void resiliency_test(void) {};$/;"	f	file:
resiliency_test	mm/slub.c	/^static void resiliency_test(void)$/;"	f	file:
resize_zone	mm/memory_hotplug.c	/^static void resize_zone(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
resolve_symbol	kernel/module.c	/^static const struct kernel_symbol *resolve_symbol(struct module *mod,$/;"	f	file:
resolve_symbol_wait	kernel/module.c	/^resolve_symbol_wait(struct module *mod,$/;"	f	file:
resource_alignment	kernel/resource.c	/^resource_size_t resource_alignment(struct resource *res)$/;"	f
resource_clip	kernel/resource.c	/^static void resource_clip(struct resource *res, resource_size_t min,$/;"	f	file:
resource_constraint	kernel/resource.c	/^struct resource_constraint {$/;"	s	file:
resource_contains	kernel/resource.c	/^static bool resource_contains(struct resource *res1, struct resource *res2)$/;"	f	file:
resource_op	kernel/resource.c	/^static const struct seq_operations resource_op = {$/;"	v	typeref:struct:seq_operations	file:
restore_altstack	kernel/signal.c	/^int restore_altstack(const stack_t __user *uss)$/;"	f
restore_bytes	mm/slub.c	/^static void restore_bytes(struct kmem_cache *s, char *message, u8 data,$/;"	f	file:
restore_online_page_callback	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(restore_online_page_callback);$/;"	v
restore_online_page_callback	mm/memory_hotplug.c	/^int restore_online_page_callback(online_page_callback_t callback)$/;"	f
result	fs/compat.c	/^	int result;$/;"	m	struct:compat_readdir_callback	file:
result	fs/direct-io.c	/^	ssize_t result;                 \/* IO result *\/$/;"	m	struct:dio	file:
result	fs/readdir.c	/^	int result;$/;"	m	struct:readdir_callback	file:
result	kernel/kthread.c	/^	struct task_struct *result;$/;"	m	struct:kthread_create_info	typeref:struct:kthread_create_info::task_struct	file:
resume_console	kernel/printk.c	/^void resume_console(void)$/;"	f
resv_hugepages	mm/hugetlb.c	/^HSTATE_ATTR_RO(resv_hugepages);$/;"	v
resv_hugepages_show	mm/hugetlb.c	/^static ssize_t resv_hugepages_show(struct kobject *kobj,$/;"	f	file:
resv_map	mm/hugetlb.c	/^struct resv_map {$/;"	s	file:
resv_map_alloc	mm/hugetlb.c	/^static struct resv_map *resv_map_alloc(void)$/;"	f	file:
resv_map_put	mm/hugetlb.c	/^static void resv_map_put(struct vm_area_struct *vma)$/;"	f	file:
resv_map_release	mm/hugetlb.c	/^static void resv_map_release(struct kref *ref)$/;"	f	file:
ret	kernel/stop_machine.c	/^	int			ret;		\/* collected return value *\/$/;"	m	struct:cpu_stop_done	file:
ret	kernel/workqueue.c	/^	long ret;$/;"	m	struct:work_for_cpu	file:
retarget_shared_pending	kernel/signal.c	/^static void retarget_shared_pending(struct task_struct *tsk, sigset_t *which)$/;"	f	file:
retrans	fs/compat.c	/^	compat_int_t retrans;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
retrigger_next_event	kernel/hrtimer.c	/^static inline void retrigger_next_event(void *arg) { }$/;"	f	file:
retrigger_next_event	kernel/hrtimer.c	/^static void retrigger_next_event(void *arg)$/;"	f	file:
retry_count	fs/compat.c	/^	compat_uint_t retry_count;$/;"	m	struct:compat_ncp_mount_data	file:
retry_count	fs/compat.c	/^	compat_uint_t retry_count;$/;"	m	struct:compat_ncp_mount_data_v4	file:
return_code	kernel/auditsc.c	/^	long		    return_code;\/* syscall return code *\/$/;"	m	struct:audit_context	file:
return_handler	kernel/test_kprobes.c	/^static int return_handler(struct kretprobe_instance *ri, struct pt_regs *regs)$/;"	f	file:
return_handler2	kernel/test_kprobes.c	/^static int return_handler2(struct kretprobe_instance *ri, struct pt_regs *regs)$/;"	f	file:
return_unused_surplus_pages	mm/hugetlb.c	/^static void return_unused_surplus_pages(struct hstate *h,$/;"	f	file:
return_valid	kernel/auditsc.c	/^	int		    return_valid; \/* return code is valid *\/$/;"	m	struct:audit_context	file:
reusable_anon_vma	mm/mmap.c	/^static struct anon_vma *reusable_anon_vma(struct vm_area_struct *old, struct vm_area_struct *a, struct vm_area_struct *b)$/;"	f	file:
reuse_swap_page	mm/swapfile.c	/^int reuse_swap_page(struct page *page)$/;"	f
reuse_unused_kprobe	kernel/kprobes.c	/^static void reuse_unused_kprobe(struct kprobe *ap)$/;"	f	file:
revalidate_disk	fs/block_dev.c	/^EXPORT_SYMBOL(revalidate_disk);$/;"	v
revalidate_disk	fs/block_dev.c	/^int revalidate_disk(struct gendisk *disk)$/;"	f
reverse_path_check	fs/eventpoll.c	/^static int reverse_path_check(void)$/;"	f	file:
reverse_path_check_proc	fs/eventpoll.c	/^static int reverse_path_check_proc(void *priv, void *cookie, int call_nests)$/;"	f	file:
revert_creds	kernel/cred.c	/^EXPORT_SYMBOL(revert_creds);$/;"	v
revert_creds	kernel/cred.c	/^void revert_creds(const struct cred *old)$/;"	f
rewrite_section_headers	kernel/module.c	/^static int rewrite_section_headers(struct load_info *info, int flags)$/;"	f	file:
rhp	kernel/rcutree_plugin.h	/^	struct rcu_head *rhp;$/;"	m	struct:rcu_head_remote	typeref:struct:rcu_head_remote::rcu_head
rlim64_is_infinity	kernel/sys.c	/^static inline bool rlim64_is_infinity(__u64 rlim64)$/;"	f	file:
rlim64_to_rlim	kernel/sys.c	/^static void rlim64_to_rlim(const struct rlimit64 *rlim64, struct rlimit *rlim)$/;"	f	file:
rlim_to_rlim64	kernel/sys.c	/^static void rlim_to_rlim64(const struct rlimit *rlim, struct rlimit64 *rlim64)$/;"	f	file:
rm_from_queue	kernel/signal.c	/^static int rm_from_queue(unsigned long mask, struct sigpending *s)$/;"	f	file:
rm_from_queue_full	kernel/signal.c	/^static int rm_from_queue_full(sigset_t *mask, struct sigpending *s)$/;"	f	file:
rmap_item	mm/ksm.c	/^struct rmap_item {$/;"	s	file:
rmap_item_cache	mm/ksm.c	/^static struct kmem_cache *rmap_item_cache;$/;"	v	typeref:struct:kmem_cache	file:
rmap_list	mm/ksm.c	/^	struct rmap_item **rmap_list;$/;"	m	struct:ksm_scan	typeref:struct:ksm_scan::rmap_item	file:
rmap_list	mm/ksm.c	/^	struct rmap_item *rmap_list;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::rmap_item	file:
rmap_list	mm/ksm.c	/^	struct rmap_item *rmap_list;$/;"	m	struct:rmap_item	typeref:struct:rmap_item::rmap_item	file:
rmap_walk	mm/rmap.c	/^int rmap_walk(struct page *page, int (*rmap_one)(struct page *,$/;"	f
rmap_walk_anon	mm/rmap.c	/^static int rmap_walk_anon(struct page *page, int (*rmap_one)(struct page *,$/;"	f	file:
rmap_walk_file	mm/rmap.c	/^static int rmap_walk_file(struct page *page, int (*rmap_one)(struct page *,$/;"	f	file:
rmap_walk_ksm	mm/ksm.c	/^int rmap_walk_ksm(struct page *page, int (*rmap_one)(struct page *,$/;"	f
rmqueue_bulk	mm/page_alloc.c	/^static int rmqueue_bulk(struct zone *zone, unsigned int order,$/;"	f	file:
rmv_page_order	mm/page_alloc.c	/^static inline void rmv_page_order(struct page *page)$/;"	f	file:
rollback_node_hotadd	mm/memory_hotplug.c	/^static void rollback_node_hotadd(int nid, pg_data_t *pgdat)$/;"	f	file:
root	fs/ext3/ext3.h	/^	struct rb_root	root;$/;"	m	struct:dir_private_info	typeref:struct:dir_private_info::rb_root
root	fs/mount.h	/^	struct mount *	root;$/;"	m	struct:mnt_namespace	typeref:struct:mnt_namespace::mount
root	fs/mount.h	/^	struct path root;$/;"	m	struct:proc_mounts	typeref:struct:proc_mounts::path
root	kernel/audit_tree.c	/^	struct audit_chunk *root;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::audit_chunk	file:
root_count	kernel/cgroup.c	/^static int root_count;$/;"	v	file:
root_gfp_mask	lib/radix-tree.c	/^static inline gfp_t root_gfp_mask(struct radix_tree_root *root)$/;"	f	file:
root_list	kernel/cgroup.c	/^	struct list_head root_list;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::list_head	file:
root_stable_tree	mm/ksm.c	/^static struct rb_root *root_stable_tree = one_stable_tree;$/;"	v	typeref:struct:rb_root	file:
root_tag_clear	lib/radix-tree.c	/^static inline void root_tag_clear(struct radix_tree_root *root, unsigned int tag)$/;"	f	file:
root_tag_clear_all	lib/radix-tree.c	/^static inline void root_tag_clear_all(struct radix_tree_root *root)$/;"	f	file:
root_tag_get	lib/radix-tree.c	/^static inline int root_tag_get(struct radix_tree_root *root, unsigned int tag)$/;"	f	file:
root_tag_set	lib/radix-tree.c	/^static inline void root_tag_set(struct radix_tree_root *root, unsigned int tag)$/;"	f	file:
root_unstable_tree	mm/ksm.c	/^static struct rb_root *root_unstable_tree = one_unstable_tree;$/;"	v	typeref:struct:rb_root	file:
root_user	kernel/user.c	/^struct user_struct root_user = {$/;"	v	typeref:struct:user_struct
rootnode	kernel/cgroup.c	/^static struct cgroupfs_root rootnode;$/;"	v	typeref:struct:cgroupfs_root	file:
rotate_reclaimable_page	mm/swap.c	/^void rotate_reclaimable_page(struct page *page)$/;"	f
round_hint_to_min	mm/mmap.c	/^static inline unsigned long round_hint_to_min(unsigned long hint)$/;"	f	file:
round_jiffies	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies);$/;"	v
round_jiffies	kernel/timer.c	/^unsigned long round_jiffies(unsigned long j)$/;"	f
round_jiffies_common	kernel/timer.c	/^static unsigned long round_jiffies_common(unsigned long j, int cpu,$/;"	f	file:
round_jiffies_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies_relative);$/;"	v
round_jiffies_relative	kernel/timer.c	/^unsigned long round_jiffies_relative(unsigned long j)$/;"	f
round_jiffies_up	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies_up);$/;"	v
round_jiffies_up	kernel/timer.c	/^unsigned long round_jiffies_up(unsigned long j)$/;"	f
round_jiffies_up_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies_up_relative);$/;"	v
round_jiffies_up_relative	kernel/timer.c	/^unsigned long round_jiffies_up_relative(unsigned long j)$/;"	f
round_pipe_size	fs/pipe.c	/^static inline unsigned int round_pipe_size(unsigned int size)$/;"	f	file:
rp	kernel/test_kprobes.c	/^static struct kretprobe rp = {$/;"	v	typeref:struct:kretprobe	file:
rp2	kernel/test_kprobes.c	/^static struct kretprobe rp2 = {$/;"	v	typeref:struct:kretprobe	file:
rrs_count	kernel/rcutorture.c	/^	long rrs_count;$/;"	m	struct:rcu_random_state	file:
rrs_state	kernel/rcutorture.c	/^	unsigned long rrs_state;$/;"	m	struct:rcu_random_state	file:
rsize	fs/compat.c	/^	compat_int_t rsize;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
rsp	kernel/rcutree.h	/^	struct rcu_state *rsp;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_state
rsv_alloc_hit	fs/ext3/ext3.h	/^	__u32			rsv_alloc_hit;$/;"	m	struct:ext3_reserve_window_node
rsv_end	fs/ext3/ext3.h	533;"	d
rsv_goal_size	fs/ext3/ext3.h	/^	__u32			rsv_goal_size;$/;"	m	struct:ext3_reserve_window_node
rsv_is_empty	fs/ext3/balloc.c	/^static inline int rsv_is_empty(struct ext3_reserve_window *rsv)$/;"	f	file:
rsv_node	fs/ext3/ext3.h	/^	struct rb_node		rsv_node;$/;"	m	struct:ext3_reserve_window_node	typeref:struct:ext3_reserve_window_node::rb_node
rsv_start	fs/ext3/ext3.h	532;"	d
rsv_window	fs/ext3/ext3.h	/^	struct ext3_reserve_window	rsv_window;$/;"	m	struct:ext3_reserve_window_node	typeref:struct:ext3_reserve_window_node::ext3_reserve_window
rsv_window_dump	fs/ext3/balloc.c	249;"	d	file:
rsv_window_dump	fs/ext3/balloc.c	252;"	d	file:
rsv_window_node	fs/ext3/ext3.h	/^	struct ext3_reserve_window_node	rsv_window_node;$/;"	m	struct:ext3_block_alloc_info	typeref:struct:ext3_block_alloc_info::ext3_reserve_window_node
rsv_window_remove	fs/ext3/balloc.c	/^static void rsv_window_remove(struct super_block *sb,$/;"	f	file:
rt_mutex_adjust_pi	kernel/rtmutex.c	/^void rt_mutex_adjust_pi(struct task_struct *task)$/;"	f
rt_mutex_adjust_prio	kernel/rtmutex.c	/^static void rt_mutex_adjust_prio(struct task_struct *task)$/;"	f	file:
rt_mutex_adjust_prio_chain	kernel/rtmutex.c	/^static int rt_mutex_adjust_prio_chain(struct task_struct *task,$/;"	f	file:
rt_mutex_cmpxchg	kernel/rtmutex.c	76;"	d	file:
rt_mutex_cmpxchg	kernel/rtmutex.c	86;"	d	file:
rt_mutex_deadlock_account_lock	kernel/rtmutex-debug.c	/^rt_mutex_deadlock_account_lock(struct rt_mutex *lock, struct task_struct *task)$/;"	f
rt_mutex_deadlock_account_lock	kernel/rtmutex.h	14;"	d
rt_mutex_deadlock_account_unlock	kernel/rtmutex-debug.c	/^void rt_mutex_deadlock_account_unlock(struct task_struct *task)$/;"	f
rt_mutex_deadlock_account_unlock	kernel/rtmutex.h	15;"	d
rt_mutex_deadlock_check	kernel/rtmutex.h	13;"	d
rt_mutex_debug_task_free	kernel/rtmutex-debug.c	/^void rt_mutex_debug_task_free(struct task_struct *task)$/;"	f
rt_mutex_destroy	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_destroy);$/;"	v
rt_mutex_destroy	kernel/rtmutex.c	/^void rt_mutex_destroy(struct rt_mutex *lock)$/;"	f
rt_mutex_fastlock	kernel/rtmutex.c	/^rt_mutex_fastlock(struct rt_mutex *lock, int state,$/;"	f	file:
rt_mutex_fasttrylock	kernel/rtmutex.c	/^rt_mutex_fasttrylock(struct rt_mutex *lock,$/;"	f	file:
rt_mutex_fastunlock	kernel/rtmutex.c	/^rt_mutex_fastunlock(struct rt_mutex *lock,$/;"	f	file:
rt_mutex_finish_proxy_lock	kernel/rtmutex.c	/^int rt_mutex_finish_proxy_lock(struct rt_mutex *lock,$/;"	f
rt_mutex_getprio	kernel/rtmutex.c	/^int rt_mutex_getprio(struct task_struct *task)$/;"	f
rt_mutex_has_waiters	kernel/rtmutex_common.h	/^static inline int rt_mutex_has_waiters(struct rt_mutex *lock)$/;"	f
rt_mutex_init_proxy_locked	kernel/rtmutex.c	/^void rt_mutex_init_proxy_locked(struct rt_mutex *lock,$/;"	f
rt_mutex_init_task	kernel/fork.c	/^static void rt_mutex_init_task(struct task_struct *p)$/;"	f	file:
rt_mutex_lock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_lock);$/;"	v
rt_mutex_lock	kernel/rtmutex.c	/^void __sched rt_mutex_lock(struct rt_mutex *lock)$/;"	f
rt_mutex_lock_interruptible	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_lock_interruptible);$/;"	v
rt_mutex_lock_interruptible	kernel/rtmutex.c	/^int __sched rt_mutex_lock_interruptible(struct rt_mutex *lock,$/;"	f
rt_mutex_next_owner	kernel/rtmutex.c	/^struct task_struct *rt_mutex_next_owner(struct rt_mutex *lock)$/;"	f
rt_mutex_owner	kernel/rtmutex_common.h	/^static inline struct task_struct *rt_mutex_owner(struct rt_mutex *lock)$/;"	f
rt_mutex_proxy_unlock	kernel/rtmutex.c	/^void rt_mutex_proxy_unlock(struct rt_mutex *lock,$/;"	f
rt_mutex_set_owner	kernel/rtmutex.c	/^rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner)$/;"	f	file:
rt_mutex_slowlock	kernel/rtmutex.c	/^rt_mutex_slowlock(struct rt_mutex *lock, int state,$/;"	f	file:
rt_mutex_slowtrylock	kernel/rtmutex.c	/^rt_mutex_slowtrylock(struct rt_mutex *lock)$/;"	f	file:
rt_mutex_slowunlock	kernel/rtmutex.c	/^rt_mutex_slowunlock(struct rt_mutex *lock)$/;"	f	file:
rt_mutex_start_proxy_lock	kernel/rtmutex.c	/^int rt_mutex_start_proxy_lock(struct rt_mutex *lock,$/;"	f
rt_mutex_timed_fastlock	kernel/rtmutex.c	/^rt_mutex_timed_fastlock(struct rt_mutex *lock, int state,$/;"	f	file:
rt_mutex_timed_lock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_timed_lock);$/;"	v
rt_mutex_timed_lock	kernel/rtmutex.c	/^rt_mutex_timed_lock(struct rt_mutex *lock, struct hrtimer_sleeper *timeout,$/;"	f
rt_mutex_top_waiter	kernel/rtmutex_common.h	/^rt_mutex_top_waiter(struct rt_mutex *lock)$/;"	f
rt_mutex_trylock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_trylock);$/;"	v
rt_mutex_trylock	kernel/rtmutex.c	/^int __sched rt_mutex_trylock(struct rt_mutex *lock)$/;"	f
rt_mutex_unlock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_unlock);$/;"	v
rt_mutex_unlock	kernel/rtmutex.c	/^void __sched rt_mutex_unlock(struct rt_mutex *lock)$/;"	f
rt_mutex_waiter	kernel/rtmutex_common.h	/^struct rt_mutex_waiter {$/;"	s
rt_waiter	kernel/futex.c	/^	struct rt_mutex_waiter *rt_waiter;$/;"	m	struct:futex_q	typeref:struct:futex_q::rt_mutex_waiter	file:
rtc_ioctl	fs/compat_ioctl.c	/^static int rtc_ioctl(unsigned fd, unsigned cmd, void __user *argp)$/;"	f	file:
rtort_free	kernel/rcutorture.c	/^	struct list_head rtort_free;$/;"	m	struct:rcu_torture	typeref:struct:rcu_torture::list_head	file:
rtort_mbtest	kernel/rcutorture.c	/^	int rtort_mbtest;$/;"	m	struct:rcu_torture	file:
rtort_pipe_count	kernel/rcutorture.c	/^	int rtort_pipe_count;$/;"	m	struct:rcu_torture	file:
rtort_rcu	kernel/rcutorture.c	/^	struct rcu_head rtort_rcu;$/;"	m	struct:rcu_torture	typeref:struct:rcu_torture::rcu_head	file:
rttest_event	kernel/rtmutex-tester.c	/^static atomic_t rttest_event;$/;"	v	file:
rttest_lock	kernel/rtmutex-tester.c	/^static spinlock_t rttest_lock;$/;"	v	file:
rttest_subsys	kernel/rtmutex-tester.c	/^static struct bus_type rttest_subsys = {$/;"	v	typeref:struct:bus_type	file:
rule	kernel/audit.h	/^	struct audit_krule	rule;$/;"	m	struct:audit_entry	typeref:struct:audit_entry::audit_krule
rules	kernel/audit_tree.c	/^	struct list_head rules;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
rules	kernel/audit_watch.c	/^	struct list_head	rules;	\/* anchor for krule->rlist *\/$/;"	m	struct:audit_watch	typeref:struct:audit_watch::list_head	file:
run	mm/ksm.c	/^KSM_ATTR(run);$/;"	v
run_hrtimer_softirq	kernel/hrtimer.c	/^static void run_hrtimer_softirq(struct softirq_action *h)$/;"	f	file:
run_ksoftirqd	kernel/softirq.c	/^static void run_ksoftirqd(unsigned int cpu)$/;"	f	file:
run_local_timers	kernel/timer.c	/^void run_local_timers(void)$/;"	f
run_posix_cpu_timers	kernel/posix-cpu-timers.c	/^void run_posix_cpu_timers(struct task_struct *tsk)$/;"	f
run_show	mm/ksm.c	/^static ssize_t run_show(struct kobject *kobj, struct kobj_attribute *attr,$/;"	f	file:
run_store	mm/ksm.c	/^static ssize_t run_store(struct kobject *kobj, struct kobj_attribute *attr,$/;"	f	file:
run_timer_softirq	kernel/timer.c	/^static void run_timer_softirq(struct softirq_action *h)$/;"	f	file:
running_helpers	kernel/kmod.c	/^static atomic_t running_helpers = ATOMIC_INIT(0);$/;"	v	file:
running_timer	kernel/timer.c	/^	struct timer_list *running_timer;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::timer_list	file:
rw	fs/direct-io.c	/^	int rw;$/;"	m	struct:dio	file:
rw	mm/scm.h	/^	int rw;$/;"	m	struct:__anon17
rw_copy_check_uvector	fs/read_write.c	/^ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector,$/;"	f
rw_verify_area	fs/read_write.c	/^int rw_verify_area(int read_write, struct file *file, loff_t *ppos, size_t count)$/;"	f
rwsem_is_locked	lib/rwsem-spinlock.c	/^EXPORT_SYMBOL(rwsem_is_locked);$/;"	v
rwsem_is_locked	lib/rwsem-spinlock.c	/^int rwsem_is_locked(struct rw_semaphore *sem)$/;"	f
rwsem_waiter	lib/rwsem-spinlock.c	/^struct rwsem_waiter {$/;"	s	file:
s	fs/ext3/xattr.c	/^	struct ext3_xattr_search s;$/;"	m	struct:ext3_xattr_block_find	typeref:struct:ext3_xattr_block_find::ext3_xattr_search	file:
s	fs/ext3/xattr.c	/^	struct ext3_xattr_search s;$/;"	m	struct:ext3_xattr_ibody_find	typeref:struct:ext3_xattr_ibody_find::ext3_xattr_search	file:
s	mm/slub.c	/^	struct kmem_cache *s;$/;"	m	struct:saved_alias	typeref:struct:saved_alias::kmem_cache	file:
s_addr_per_block_bits	fs/ext3/ext3.h	/^	int s_addr_per_block_bits;$/;"	m	struct:ext3_sb_info
s_algorithm_usage_bitmap	fs/ext3/ext3.h	/^\/*C8*\/	__le32	s_algorithm_usage_bitmap; \/* For compression *\/$/;"	m	struct:ext3_super_block
s_block_group_nr	fs/ext3/ext3.h	/^	__le16	s_block_group_nr;	\/* block group # of this superblock *\/$/;"	m	struct:ext3_super_block
s_blockgroup_lock	fs/ext3/ext3.h	/^	struct blockgroup_lock *s_blockgroup_lock;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::blockgroup_lock
s_blocks_count	fs/ext3/ext3.h	/^	__le32	s_blocks_count;		\/* Blocks count *\/$/;"	m	struct:ext3_super_block
s_blocks_count_hi	fs/ext3/ext3.h	/^\/*150*\/	__le32	s_blocks_count_hi;	\/* Blocks count *\/$/;"	m	struct:ext3_super_block
s_blocks_last	fs/ext3/ext3.h	/^	unsigned long s_blocks_last;    \/* Last seen block count *\/$/;"	m	struct:ext3_sb_info
s_blocks_per_group	fs/ext3/ext3.h	/^	unsigned long s_blocks_per_group;\/* Number of blocks in a group *\/$/;"	m	struct:ext3_sb_info
s_blocks_per_group	fs/ext3/ext3.h	/^\/*20*\/	__le32	s_blocks_per_group;	\/* # Blocks per group *\/$/;"	m	struct:ext3_super_block
s_checkinterval	fs/ext3/ext3.h	/^	__le32	s_checkinterval;	\/* max. time between checks *\/$/;"	m	struct:ext3_super_block
s_commit_interval	fs/ext3/ext3.h	/^	unsigned long s_commit_interval;$/;"	m	struct:ext3_mount_options
s_commit_interval	fs/ext3/ext3.h	/^	unsigned long s_commit_interval;$/;"	m	struct:ext3_sb_info
s_creator_os	fs/ext3/ext3.h	/^	__le32	s_creator_os;		\/* OS *\/$/;"	m	struct:ext3_super_block
s_def_hash_version	fs/ext3/ext3.h	/^	__u8	s_def_hash_version;	\/* Default hash version to use *\/$/;"	m	struct:ext3_super_block
s_def_hash_version	fs/ext3/ext3.h	/^	int s_def_hash_version;$/;"	m	struct:ext3_sb_info
s_def_resgid	fs/ext3/ext3.h	/^	__le16	s_def_resgid;		\/* Default gid for reserved blocks *\/$/;"	m	struct:ext3_super_block
s_def_resuid	fs/ext3/ext3.h	/^\/*50*\/	__le16	s_def_resuid;		\/* Default uid for reserved blocks *\/$/;"	m	struct:ext3_super_block
s_default_mount_opts	fs/ext3/ext3.h	/^	__le32	s_default_mount_opts;$/;"	m	struct:ext3_super_block
s_desc_per_block	fs/ext3/ext3.h	/^	unsigned long s_desc_per_block;	\/* Number of group descriptors per block *\/$/;"	m	struct:ext3_sb_info
s_desc_per_block_bits	fs/ext3/ext3.h	/^	int s_desc_per_block_bits;$/;"	m	struct:ext3_sb_info
s_dirs_counter	fs/ext3/ext3.h	/^	struct percpu_counter s_dirs_counter;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::percpu_counter
s_errors	fs/ext3/ext3.h	/^	__le16	s_errors;		\/* Behaviour when detecting errors *\/$/;"	m	struct:ext3_super_block
s_es	fs/ext3/ext3.h	/^	struct ext3_super_block * s_es;	\/* Pointer to the super block in the buffer *\/$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::ext3_super_block
s_feature_compat	fs/ext3/ext3.h	/^	__le32	s_feature_compat;	\/* compatible feature set *\/$/;"	m	struct:ext3_super_block
s_feature_incompat	fs/ext3/ext3.h	/^\/*60*\/	__le32	s_feature_incompat;	\/* incompatible feature set *\/$/;"	m	struct:ext3_super_block
s_feature_ro_compat	fs/ext3/ext3.h	/^	__le32	s_feature_ro_compat;	\/* readonly-compatible feature set *\/$/;"	m	struct:ext3_super_block
s_first_data_block	fs/ext3/ext3.h	/^	__le32	s_first_data_block;	\/* First Data Block *\/$/;"	m	struct:ext3_super_block
s_first_ino	fs/ext3/ext3.h	/^	__le32	s_first_ino;		\/* First non-reserved inode *\/$/;"	m	struct:ext3_super_block
s_first_ino	fs/ext3/ext3.h	/^	int s_first_ino;$/;"	m	struct:ext3_sb_info
s_first_meta_bg	fs/ext3/ext3.h	/^	__le32	s_first_meta_bg;	\/* First metablock block group *\/$/;"	m	struct:ext3_super_block
s_flags	fs/ext3/ext3.h	/^	__le32	s_flags;		\/* Miscellaneous flags *\/$/;"	m	struct:ext3_super_block
s_frag_size	fs/ext3/ext3.h	/^	unsigned long s_frag_size;	\/* Size of a fragment in bytes *\/$/;"	m	struct:ext3_sb_info
s_frags_per_block	fs/ext3/ext3.h	/^	unsigned long s_frags_per_block;\/* Number of fragments per block *\/$/;"	m	struct:ext3_sb_info
s_frags_per_group	fs/ext3/ext3.h	/^	__le32	s_frags_per_group;	\/* # Fragments per group *\/$/;"	m	struct:ext3_super_block
s_frags_per_group	fs/ext3/ext3.h	/^	unsigned long s_frags_per_group;\/* Number of fragments in a group *\/$/;"	m	struct:ext3_sb_info
s_free_blocks_count	fs/ext3/ext3.h	/^	__le32	s_free_blocks_count;	\/* Free blocks count *\/$/;"	m	struct:ext3_super_block
s_free_blocks_count_hi	fs/ext3/ext3.h	/^	__le32	s_free_blocks_count_hi;	\/* Free blocks count *\/$/;"	m	struct:ext3_super_block
s_free_inodes_count	fs/ext3/ext3.h	/^\/*10*\/	__le32	s_free_inodes_count;	\/* Free inodes count *\/$/;"	m	struct:ext3_super_block
s_freeblocks_counter	fs/ext3/ext3.h	/^	struct percpu_counter s_freeblocks_counter;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::percpu_counter
s_freeinodes_counter	fs/ext3/ext3.h	/^	struct percpu_counter s_freeinodes_counter;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::percpu_counter
s_gdb_count	fs/ext3/ext3.h	/^	unsigned long s_gdb_count;	\/* Number of group descriptor blocks *\/$/;"	m	struct:ext3_sb_info
s_group_desc	fs/ext3/ext3.h	/^	struct buffer_head ** s_group_desc;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::buffer_head
s_groups_count	fs/ext3/ext3.h	/^	unsigned long s_groups_count;	\/* Number of groups in the fs *\/$/;"	m	struct:ext3_sb_info
s_hash_seed	fs/ext3/ext3.h	/^	__le32	s_hash_seed[4];		\/* HTREE hash seed *\/$/;"	m	struct:ext3_super_block
s_hash_seed	fs/ext3/ext3.h	/^	u32 s_hash_seed[4];$/;"	m	struct:ext3_sb_info
s_hash_unsigned	fs/ext3/ext3.h	/^	int s_hash_unsigned;	\/* 3 if hash should be signed, 0 if not *\/$/;"	m	struct:ext3_sb_info
s_inode_size	fs/ext3/ext3.h	/^	__le16   s_inode_size;		\/* size of inode structure *\/$/;"	m	struct:ext3_super_block
s_inode_size	fs/ext3/ext3.h	/^	int s_inode_size;$/;"	m	struct:ext3_sb_info
s_inodes_count	fs/ext3/ext3.h	/^\/*00*\/	__le32	s_inodes_count;		\/* Inodes count *\/$/;"	m	struct:ext3_super_block
s_inodes_per_block	fs/ext3/ext3.h	/^	unsigned long s_inodes_per_block;\/* Number of inodes per block *\/$/;"	m	struct:ext3_sb_info
s_inodes_per_group	fs/ext3/ext3.h	/^	__le32	s_inodes_per_group;	\/* # Inodes per group *\/$/;"	m	struct:ext3_super_block
s_inodes_per_group	fs/ext3/ext3.h	/^	unsigned long s_inodes_per_group;\/* Number of inodes in a group *\/$/;"	m	struct:ext3_sb_info
s_itb_per_group	fs/ext3/ext3.h	/^	unsigned long s_itb_per_group;	\/* Number of inode table blocks per group *\/$/;"	m	struct:ext3_sb_info
s_jnl_blocks	fs/ext3/ext3.h	/^	__le32	s_jnl_blocks[17];	\/* Backup of the journal inode *\/$/;"	m	struct:ext3_super_block
s_journal	fs/ext3/ext3.h	/^	struct journal_s * s_journal;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::journal_s
s_journal_dev	fs/ext3/ext3.h	/^	__le32	s_journal_dev;		\/* device number of journal file *\/$/;"	m	struct:ext3_super_block
s_journal_inode	fs/ext3/ext3.h	/^	struct inode * s_journal_inode;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::inode
s_journal_inum	fs/ext3/ext3.h	/^\/*E0*\/	__le32	s_journal_inum;		\/* inode number of journal file *\/$/;"	m	struct:ext3_super_block
s_journal_uuid	fs/ext3/ext3.h	/^\/*D0*\/	__u8	s_journal_uuid[16];	\/* uuid of journal superblock *\/$/;"	m	struct:ext3_super_block
s_jquota_fmt	fs/ext3/ext3.h	/^	int s_jquota_fmt;			\/* Format of quota to use *\/$/;"	m	struct:ext3_sb_info
s_jquota_fmt	fs/ext3/ext3.h	/^	int s_jquota_fmt;$/;"	m	struct:ext3_mount_options
s_last_mounted	fs/ext3/ext3.h	/^\/*88*\/	char	s_last_mounted[64];	\/* directory where last mounted *\/$/;"	m	struct:ext3_super_block
s_last_orphan	fs/ext3/ext3.h	/^	__le32	s_last_orphan;		\/* start of list of inodes to delete *\/$/;"	m	struct:ext3_super_block
s_lastcheck	fs/ext3/ext3.h	/^\/*40*\/	__le32	s_lastcheck;		\/* time of last check *\/$/;"	m	struct:ext3_super_block
s_log_block_size	fs/ext3/ext3.h	/^	__le32	s_log_block_size;	\/* Block size *\/$/;"	m	struct:ext3_super_block
s_log_frag_size	fs/ext3/ext3.h	/^	__le32	s_log_frag_size;	\/* Fragment size *\/$/;"	m	struct:ext3_super_block
s_log_groups_per_flex	fs/ext3/ext3.h	/^	__u8	s_log_groups_per_flex;  \/* FLEX_BG group size *\/$/;"	m	struct:ext3_super_block
s_magic	fs/ext3/ext3.h	/^	__le16	s_magic;		\/* Magic signature *\/$/;"	m	struct:ext3_super_block
s_max_mnt_count	fs/ext3/ext3.h	/^	__le16	s_max_mnt_count;	\/* Maximal mount count *\/$/;"	m	struct:ext3_super_block
s_mem	mm/slab.c	/^			void *s_mem;		\/* including colour offset *\/$/;"	m	struct:slab::__anon18::__anon19	file:
s_min_extra_isize	fs/ext3/ext3.h	/^	__le16	s_min_extra_isize;	\/* All inodes have at least # bytes *\/$/;"	m	struct:ext3_super_block
s_minor_rev_level	fs/ext3/ext3.h	/^	__le16	s_minor_rev_level;	\/* minor revision level *\/$/;"	m	struct:ext3_super_block
s_mkfs_time	fs/ext3/ext3.h	/^	__le32	s_mkfs_time;		\/* When the filesystem was created *\/$/;"	m	struct:ext3_super_block
s_mmp_block	fs/ext3/ext3.h	/^	__le64  s_mmp_block;            \/* Block for multi-mount protection *\/$/;"	m	struct:ext3_super_block
s_mmp_interval	fs/ext3/ext3.h	/^	__le16  s_mmp_interval;         \/* # seconds to wait in MMP checking *\/$/;"	m	struct:ext3_super_block
s_mnt_count	fs/ext3/ext3.h	/^	__le16	s_mnt_count;		\/* Mount count *\/$/;"	m	struct:ext3_super_block
s_mount_opt	fs/ext3/ext3.h	/^	unsigned long  s_mount_opt;$/;"	m	struct:ext3_sb_info
s_mount_opt	fs/ext3/ext3.h	/^	unsigned long s_mount_opt;$/;"	m	struct:ext3_mount_options
s_mount_state	fs/ext3/ext3.h	/^	unsigned short s_mount_state;$/;"	m	struct:ext3_sb_info
s_mtime	fs/ext3/ext3.h	/^	__le32	s_mtime;		\/* Mount time *\/$/;"	m	struct:ext3_super_block
s_next	kernel/kallsyms.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next	mm/slab.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next	mm/slab_common.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next	mm/vmalloc.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next_gen_lock	fs/ext3/ext3.h	/^	spinlock_t s_next_gen_lock;$/;"	m	struct:ext3_sb_info
s_next_generation	fs/ext3/ext3.h	/^	u32 s_next_generation;$/;"	m	struct:ext3_sb_info
s_ops	fs/binfmt_misc.c	/^static const struct super_operations s_ops = {$/;"	v	typeref:struct:super_operations	file:
s_orphan	fs/ext3/ext3.h	/^	struct list_head s_orphan;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::list_head
s_orphan_lock	fs/ext3/ext3.h	/^	struct mutex s_orphan_lock;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::mutex
s_overhead_last	fs/ext3/ext3.h	/^	unsigned long s_overhead_last;  \/* Last calculated overhead *\/$/;"	m	struct:ext3_sb_info
s_pad	fs/ext3/ext3.h	/^	unsigned short s_pad;$/;"	m	struct:ext3_sb_info
s_prealloc_blocks	fs/ext3/ext3.h	/^	__u8	s_prealloc_blocks;	\/* Nr of blocks to try to preallocate*\/$/;"	m	struct:ext3_super_block
s_prealloc_dir_blocks	fs/ext3/ext3.h	/^	__u8	s_prealloc_dir_blocks;	\/* Nr to preallocate for dirs *\/$/;"	m	struct:ext3_super_block
s_qf_names	fs/ext3/ext3.h	/^	char *s_qf_names[MAXQUOTAS];		\/* Names of quota files with journalled quota *\/$/;"	m	struct:ext3_sb_info
s_qf_names	fs/ext3/ext3.h	/^	char *s_qf_names[MAXQUOTAS];$/;"	m	struct:ext3_mount_options
s_r_blocks_count	fs/ext3/ext3.h	/^	__le32	s_r_blocks_count;	\/* Reserved blocks count *\/$/;"	m	struct:ext3_super_block
s_r_blocks_count_hi	fs/ext3/ext3.h	/^	__le32	s_r_blocks_count_hi;	\/* Reserved blocks count *\/$/;"	m	struct:ext3_super_block
s_raid_stride	fs/ext3/ext3.h	/^	__le16  s_raid_stride;		\/* RAID stride *\/$/;"	m	struct:ext3_super_block
s_raid_stripe_width	fs/ext3/ext3.h	/^	__le32  s_raid_stripe_width;    \/* blocks on all data disks (N*stride)*\/$/;"	m	struct:ext3_super_block
s_reserved	fs/ext3/ext3.h	/^	__u32   s_reserved[162];        \/* Padding to the end of the block *\/$/;"	m	struct:ext3_super_block
s_reserved_char_pad	fs/ext3/ext3.h	/^	__u8	s_reserved_char_pad;$/;"	m	struct:ext3_super_block
s_reserved_char_pad2	fs/ext3/ext3.h	/^	__u8	s_reserved_char_pad2;$/;"	m	struct:ext3_super_block
s_reserved_gdt_blocks	fs/ext3/ext3.h	/^	__le16	s_reserved_gdt_blocks;	\/* Per group desc for online growth *\/$/;"	m	struct:ext3_super_block
s_reserved_pad	fs/ext3/ext3.h	/^	__le16  s_reserved_pad;$/;"	m	struct:ext3_super_block
s_reserved_word_pad	fs/ext3/ext3.h	/^	__u16	s_reserved_word_pad;$/;"	m	struct:ext3_super_block
s_resgid	fs/ext3/ext3.h	/^	kgid_t s_resgid;$/;"	m	struct:ext3_mount_options
s_resgid	fs/ext3/ext3.h	/^	kgid_t s_resgid;$/;"	m	struct:ext3_sb_info
s_resize_lock	fs/ext3/ext3.h	/^	struct mutex s_resize_lock;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::mutex
s_resuid	fs/ext3/ext3.h	/^	kuid_t s_resuid;$/;"	m	struct:ext3_mount_options
s_resuid	fs/ext3/ext3.h	/^	kuid_t s_resuid;$/;"	m	struct:ext3_sb_info
s_rev_level	fs/ext3/ext3.h	/^	__le32	s_rev_level;		\/* Revision level *\/$/;"	m	struct:ext3_super_block
s_rsv_window_head	fs/ext3/ext3.h	/^	struct ext3_reserve_window_node s_rsv_window_head;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::ext3_reserve_window_node
s_rsv_window_lock	fs/ext3/ext3.h	/^	spinlock_t s_rsv_window_lock;$/;"	m	struct:ext3_sb_info
s_rsv_window_root	fs/ext3/ext3.h	/^	struct rb_root s_rsv_window_root;$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::rb_root
s_sb_block	fs/ext3/ext3.h	/^	ext3_fsblk_t s_sb_block;$/;"	m	struct:ext3_sb_info
s_sbh	fs/ext3/ext3.h	/^	struct buffer_head * s_sbh;	\/* Buffer containing the super block *\/$/;"	m	struct:ext3_sb_info	typeref:struct:ext3_sb_info::buffer_head
s_show	kernel/kallsyms.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_show	mm/slab_common.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_show	mm/vmalloc.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_start	kernel/kallsyms.c	/^static void *s_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
s_start	mm/slab_common.c	/^static void *s_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
s_state	fs/ext3/ext3.h	/^	__le16	s_state;		\/* File system state *\/$/;"	m	struct:ext3_super_block
s_stop	kernel/kallsyms.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
s_stop	mm/slab.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
s_stop	mm/slab_common.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
s_uuid	fs/ext3/ext3.h	/^\/*68*\/	__u8	s_uuid[16];		\/* 128-bit uuid for volume *\/$/;"	m	struct:ext3_super_block
s_volume_name	fs/ext3/ext3.h	/^\/*78*\/	char	s_volume_name[16];	\/* volume name *\/$/;"	m	struct:ext3_super_block
s_want_extra_isize	fs/ext3/ext3.h	/^	__le16	s_want_extra_isize; 	\/* New inodes should reserve # bytes *\/$/;"	m	struct:ext3_super_block
s_wtime	fs/ext3/ext3.h	/^\/*30*\/	__le32	s_wtime;		\/* Write time *\/$/;"	m	struct:ext3_super_block
safe_hardlink_source	fs/namei.c	/^static bool safe_hardlink_source(struct inode *inode)$/;"	f	file:
same_magic	kernel/module.c	/^static inline int same_magic(const char *amagic, const char *bmagic,$/;"	f	file:
same_root	kernel/audit_tree.c	/^	struct list_head same_root;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
sample_period	kernel/watchdog.c	/^static u64 __read_mostly sample_period;$/;"	v	file:
sample_to_timespec	kernel/posix-cpu-timers.c	/^static void sample_to_timespec(const clockid_t which_clock,$/;"	f	file:
sanity_checks	mm/slub.c	/^SLAB_ATTR(sanity_checks);$/;"	v
sanity_checks_show	mm/slub.c	/^static ssize_t sanity_checks_show(struct kmem_cache *s, char *buf)$/;"	f	file:
sanity_checks_store	mm/slub.c	/^static ssize_t sanity_checks_store(struct kmem_cache *s,$/;"	f	file:
save_mount_options	fs/namespace.c	/^EXPORT_SYMBOL(save_mount_options);$/;"	v
save_mount_options	fs/namespace.c	/^void save_mount_options(struct super_block *sb, char *options)$/;"	f
save_stack_trace_regs	kernel/stacktrace.c	/^save_stack_trace_regs(struct pt_regs *regs, struct stack_trace *trace)$/;"	f
save_stack_trace_tsk	kernel/stacktrace.c	/^save_stack_trace_tsk(struct task_struct *tsk, struct stack_trace *trace)$/;"	f
save_trace	kernel/lockdep.c	/^static int save_trace(struct stack_trace *trace)$/;"	f	file:
saved_alias	mm/slub.c	/^struct saved_alias {$/;"	s	file:
saved_gfp_mask	mm/page_alloc.c	/^static gfp_t saved_gfp_mask;$/;"	v	file:
saved_max_active	kernel/workqueue.c	/^	int			saved_max_active; \/* W: saved pwq max_active *\/$/;"	m	struct:workqueue_struct	file:
saved_max_pfn	kernel/crash_dump.c	/^unsigned long saved_max_pfn;$/;"	v
sb	fs/fs-writeback.c	/^	struct super_block *sb;$/;"	m	struct:wb_writeback_work	typeref:struct:wb_writeback_work::super_block	file:
sb	kernel/cgroup.c	/^	struct super_block *sb;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::super_block	file:
sb_bgl_lock	fs/ext3/ext3.h	/^sb_bgl_lock(struct ext3_sb_info *sbi, unsigned int block_group)$/;"	f
sb_is_blkdev_sb	fs/block_dev.c	/^static inline int sb_is_blkdev_sb(struct super_block *sb)$/;"	f	file:
sb_len_wr	fs/compat_ioctl.c	/^	unsigned char sb_len_wr;		\/* [o] byte count actually written to sbp *\/$/;"	m	struct:sg_io_hdr32	file:
sb_lock	fs/super.c	/^DEFINE_SPINLOCK(sb_lock);$/;"	v
sb_min_blocksize	fs/block_dev.c	/^EXPORT_SYMBOL(sb_min_blocksize);$/;"	v
sb_min_blocksize	fs/block_dev.c	/^int sb_min_blocksize(struct super_block *sb, int size)$/;"	f
sb_permission	fs/namei.c	/^static int sb_permission(struct super_block *sb, struct inode *inode, int mask)$/;"	f	file:
sb_prepare_remount_readonly	fs/namespace.c	/^int sb_prepare_remount_readonly(struct super_block *sb)$/;"	f
sb_set_blocksize	fs/block_dev.c	/^EXPORT_SYMBOL(sb_set_blocksize);$/;"	v
sb_set_blocksize	fs/block_dev.c	/^int sb_set_blocksize(struct super_block *sb, int size)$/;"	f
sb_wait_write	fs/super.c	/^static void sb_wait_write(struct super_block *sb, int level)$/;"	f	file:
sb_writers_name	fs/super.c	/^static char *sb_writers_name[SB_FREEZE_LEVELS] = {$/;"	v	file:
sbp	fs/compat_ioctl.c	/^	compat_uptr_t sbp;		\/* [i], [*o] points to sense_buffer memory *\/$/;"	m	struct:sg_io_hdr32	file:
sc	mm/memory-failure.c	746;"	d	file:
sc	mm/memory-failure.c	803;"	d	file:
scan_area_cache	mm/kmemleak.c	/^static struct kmem_cache *scan_area_cache;$/;"	v	typeref:struct:kmem_cache	file:
scan_balance	mm/vmscan.c	/^enum scan_balance {$/;"	g	file:
scan_block	mm/kmemleak.c	/^static void scan_block(void *_start, void *_end,$/;"	f	file:
scan_control	mm/vmscan.c	/^struct scan_control {$/;"	s	file:
scan_get_next_rmap_item	mm/ksm.c	/^static struct rmap_item *scan_get_next_rmap_item(struct page **page)$/;"	f	file:
scan_gray_list	mm/kmemleak.c	/^static void scan_gray_list(void)$/;"	f	file:
scan_lru_pages	mm/memory_hotplug.c	/^static unsigned long scan_lru_pages(unsigned long start, unsigned long end)$/;"	f	file:
scan_nodes	mm/memcontrol.c	/^	nodemask_t	scan_nodes;$/;"	m	struct:mem_cgroup	file:
scan_object	mm/kmemleak.c	/^static void scan_object(struct kmemleak_object *object)$/;"	f	file:
scan_should_stop	mm/kmemleak.c	/^static int scan_should_stop(void)$/;"	f	file:
scan_sleep_millisecs_attr	mm/huge_memory.c	/^static struct kobj_attribute scan_sleep_millisecs_attr =$/;"	v	typeref:struct:kobj_attribute	file:
scan_sleep_millisecs_show	mm/huge_memory.c	/^static ssize_t scan_sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
scan_sleep_millisecs_store	mm/huge_memory.c	/^static ssize_t scan_sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
scan_swap_map	mm/swapfile.c	/^static unsigned long scan_swap_map(struct swap_info_struct *si,$/;"	f	file:
scan_thread	mm/kmemleak.c	/^static struct task_struct *scan_thread;$/;"	v	typeref:struct:task_struct	file:
scan_unevictable_handler	mm/vmscan.c	/^int scan_unevictable_handler(struct ctl_table *table, int write,$/;"	f
scan_unevictable_pages	mm/vmscan.c	/^unsigned long scan_unevictable_pages;$/;"	v
scan_unevictable_register_node	mm/vmscan.c	/^int scan_unevictable_register_node(struct node *node)$/;"	f
scan_unevictable_unregister_node	mm/vmscan.c	/^void scan_unevictable_unregister_node(struct node *node)$/;"	f
scanarg	fs/binfmt_misc.c	/^static char *scanarg(char *s, char del)$/;"	f	file:
sched_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops sched_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
sched_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops sched_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
sched_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops sched_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
sched_torture_read_lock	kernel/rcutorture.c	/^static int sched_torture_read_lock(void)$/;"	f	file:
sched_torture_read_unlock	kernel/rcutorture.c	/^static void sched_torture_read_unlock(int idx)$/;"	f	file:
schedule_cpuset_propagate_hotplug	kernel/cpuset.c	/^static void schedule_cpuset_propagate_hotplug(struct cpuset *cs)$/;"	f	file:
schedule_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_delayed_work);$/;"	v
schedule_delayed_work	kernel/workqueue.c	/^bool schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)$/;"	f
schedule_delayed_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_delayed_work_on);$/;"	v
schedule_delayed_work_on	kernel/workqueue.c	/^bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,$/;"	f
schedule_hrtimeout	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(schedule_hrtimeout);$/;"	v
schedule_hrtimeout	kernel/hrtimer.c	/^int __sched schedule_hrtimeout(ktime_t *expires,$/;"	f
schedule_hrtimeout_range	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(schedule_hrtimeout_range);$/;"	v
schedule_hrtimeout_range	kernel/hrtimer.c	/^int __sched schedule_hrtimeout_range(ktime_t *expires, unsigned long delta,$/;"	f
schedule_hrtimeout_range_clock	kernel/hrtimer.c	/^schedule_hrtimeout_range_clock(ktime_t *expires, unsigned long delta,$/;"	f
schedule_next_timer	kernel/posix-timers.c	/^static void schedule_next_timer(struct k_itimer *timr)$/;"	f	file:
schedule_on_each_cpu	kernel/workqueue.c	/^int schedule_on_each_cpu(work_func_t func)$/;"	f
schedule_rt_mutex	kernel/rtmutex_common.h	27;"	d
schedule_rt_mutex	kernel/rtmutex_common.h	36;"	d
schedule_rt_mutex_test	kernel/rtmutex-tester.c	/^void schedule_rt_mutex_test(struct rt_mutex *mutex)$/;"	f
schedule_timeout	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout);$/;"	v
schedule_timeout	kernel/timer.c	/^signed long __sched schedule_timeout(signed long timeout)$/;"	f
schedule_timeout_interruptible	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout_interruptible);$/;"	v
schedule_timeout_interruptible	kernel/timer.c	/^signed long __sched schedule_timeout_interruptible(signed long timeout)$/;"	f
schedule_timeout_killable	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout_killable);$/;"	v
schedule_timeout_killable	kernel/timer.c	/^signed long __sched schedule_timeout_killable(signed long timeout)$/;"	f
schedule_timeout_uninterruptible	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout_uninterruptible);$/;"	v
schedule_timeout_uninterruptible	kernel/timer.c	/^signed long __sched schedule_timeout_uninterruptible(signed long timeout)$/;"	f
schedule_work	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_work);$/;"	v
schedule_work	kernel/workqueue.c	/^bool schedule_work(struct work_struct *work)$/;"	f
schedule_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_work_on);$/;"	v
schedule_work_on	kernel/workqueue.c	/^bool schedule_work_on(int cpu, struct work_struct *work)$/;"	f
scheduled	kernel/workqueue_internal.h	/^	struct list_head	scheduled;	\/* L: scheduled works *\/$/;"	m	struct:worker	typeref:struct:worker::list_head
scm_lock	mm/scm.c	/^DEFINE_MUTEX(scm_lock);$/;"	v
script_format	fs/binfmt_script.c	/^static struct linux_binfmt script_format = {$/;"	v	typeref:struct:linux_binfmt	file:
search_binary_handler	fs/exec.c	/^EXPORT_SYMBOL(search_binary_handler);$/;"	v
search_binary_handler	fs/exec.c	/^int search_binary_handler(struct linux_binprm *bprm)$/;"	f
search_dirblock	fs/ext3/namei.c	/^static inline int search_dirblock(struct buffer_head * bh,$/;"	f	file:
search_exception_tables	kernel/extable.c	/^const struct exception_table_entry *search_exception_tables(unsigned long addr)$/;"	f
search_module_extables	kernel/module.c	/^const struct exception_table_entry *search_module_extables(unsigned long addr)$/;"	f
search_reserve_window	fs/ext3/balloc.c	/^search_reserve_window(struct rb_root *root, ext3_fsblk_t goal)$/;"	f	file:
seccomp_attach_filter	kernel/seccomp.c	/^static long seccomp_attach_filter(struct sock_fprog *fprog)$/;"	f	file:
seccomp_attach_user_filter	kernel/seccomp.c	/^long seccomp_attach_user_filter(char __user *user_filter)$/;"	f
seccomp_bpf_load	kernel/seccomp.c	/^u32 seccomp_bpf_load(int off)$/;"	f
seccomp_check_filter	kernel/seccomp.c	/^static int seccomp_check_filter(struct sock_filter *filter, unsigned int flen)$/;"	f	file:
seccomp_filter	kernel/seccomp.c	/^struct seccomp_filter {$/;"	s	file:
seccomp_run_filters	kernel/seccomp.c	/^static u32 seccomp_run_filters(int syscall)$/;"	f	file:
seccomp_send_sigsys	kernel/seccomp.c	/^static void seccomp_send_sigsys(int syscall, int reason)$/;"	f	file:
sechdrs	kernel/module.c	/^	Elf_Shdr *sechdrs;$/;"	m	struct:load_info	file:
secstrings	kernel/module.c	/^	char *secstrings, *strtab;$/;"	m	struct:load_info	file:
sect_empty	kernel/module.c	/^static inline bool sect_empty(const Elf_Shdr *sect)$/;"	f	file:
section_addr	kernel/module.c	/^static void *section_addr(const struct load_info *info, const char *name)$/;"	f	file:
section_objs	kernel/module.c	/^static void *section_objs(const struct load_info *info,$/;"	f	file:
seed	fs/ext3/ext3.h	/^	u32		*seed;$/;"	m	struct:dx_hash_info
sel_arg_struct	fs/select.c	/^struct sel_arg_struct {$/;"	s	file:
select_bad_process	mm/oom_kill.c	/^static struct task_struct *select_bad_process(unsigned int *ppoints,$/;"	f	file:
select_estimate_accuracy	fs/select.c	/^long select_estimate_accuracy(struct timespec *tv)$/;"	f
select_parent	fs/dcache.c	/^static int select_parent(struct dentry *parent, struct list_head *dispose)$/;"	f	file:
select_submounts	fs/namespace.c	/^static int select_submounts(struct mount *parent, struct list_head *graveyard)$/;"	f	file:
selected_console	kernel/printk.c	/^static int selected_console = -1;$/;"	v	file:
sem	kernel/taskstats.c	/^	struct rw_semaphore sem;$/;"	m	struct:listener_list	typeref:struct:listener_list::rw_semaphore	file:
semaphore_waiter	kernel/semaphore.c	/^struct semaphore_waiter {$/;"	s	file:
send_cpu_listeners	kernel/taskstats.c	/^static void send_cpu_listeners(struct sk_buff *skb,$/;"	f	file:
send_mayday	kernel/workqueue.c	/^static bool send_mayday(struct work_struct *work)$/;"	f	file:
send_remote_softirq	kernel/softirq.c	/^EXPORT_SYMBOL(send_remote_softirq);$/;"	v
send_remote_softirq	kernel/softirq.c	/^void send_remote_softirq(struct call_single_data *cp, int cpu, int softirq)$/;"	f
send_reply	kernel/taskstats.c	/^static int send_reply(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
send_sig	kernel/signal.c	/^EXPORT_SYMBOL(send_sig);$/;"	v
send_sig	kernel/signal.c	/^send_sig(int sig, struct task_struct *p, int priv)$/;"	f
send_sig_info	kernel/signal.c	/^EXPORT_SYMBOL(send_sig_info);$/;"	v
send_sig_info	kernel/signal.c	/^int send_sig_info(int sig, struct siginfo *info, struct task_struct *p)$/;"	f
send_sigio	fs/fcntl.c	/^void send_sigio(struct fown_struct *fown, int fd, int band)$/;"	f
send_sigio_to_task	fs/fcntl.c	/^static void send_sigio_to_task(struct task_struct *p,$/;"	f	file:
send_signal	kernel/signal.c	/^static int send_signal(int sig, struct siginfo *info, struct task_struct *t,$/;"	f	file:
send_sigqueue	kernel/signal.c	/^int send_sigqueue(struct sigqueue *q, struct task_struct *t, int group)$/;"	f
send_sigurg	fs/fcntl.c	/^int send_sigurg(struct fown_struct *fown)$/;"	f
send_sigurg_to_task	fs/fcntl.c	/^static void send_sigurg_to_task(struct task_struct *p,$/;"	f	file:
send_to_group	fs/notify/fsnotify.c	/^static int send_to_group(struct inode *to_tell,$/;"	f	file:
separate_irq_context	kernel/lockdep.c	/^static inline int separate_irq_context(struct task_struct *curr,$/;"	f	file:
separate_irq_context	kernel/lockdep.c	/^static int separate_irq_context(struct task_struct *curr,$/;"	f	file:
seq	fs/mount.h	/^	u64			seq;	\/* Sequence number to prevent loops *\/$/;"	m	struct:mnt_namespace
seq	kernel/printk.c	/^	u64 seq;$/;"	m	struct:devkmsg_user	file:
seq_bitmap	fs/seq_file.c	/^EXPORT_SYMBOL(seq_bitmap);$/;"	v
seq_bitmap	fs/seq_file.c	/^int seq_bitmap(struct seq_file *m, const unsigned long *bits,$/;"	f
seq_bitmap_list	fs/seq_file.c	/^EXPORT_SYMBOL(seq_bitmap_list);$/;"	v
seq_bitmap_list	fs/seq_file.c	/^int seq_bitmap_list(struct seq_file *m, const unsigned long *bits,$/;"	f
seq_dentry	fs/seq_file.c	/^int seq_dentry(struct seq_file *m, struct dentry *dentry, const char *esc)$/;"	f
seq_escape	fs/seq_file.c	/^EXPORT_SYMBOL(seq_escape);$/;"	v
seq_escape	fs/seq_file.c	/^int seq_escape(struct seq_file *m, const char *s, const char *esc)$/;"	f
seq_header	kernel/lockdep_proc.c	/^static void seq_header(struct seq_file *m)$/;"	f	file:
seq_hlist_next	fs/seq_file.c	/^EXPORT_SYMBOL(seq_hlist_next);$/;"	v
seq_hlist_next	fs/seq_file.c	/^struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,$/;"	f
seq_hlist_next_rcu	fs/seq_file.c	/^EXPORT_SYMBOL(seq_hlist_next_rcu);$/;"	v
seq_hlist_next_rcu	fs/seq_file.c	/^struct hlist_node *seq_hlist_next_rcu(void *v,$/;"	f
seq_hlist_start	fs/seq_file.c	/^EXPORT_SYMBOL(seq_hlist_start);$/;"	v
seq_hlist_start	fs/seq_file.c	/^struct hlist_node *seq_hlist_start(struct hlist_head *head, loff_t pos)$/;"	f
seq_hlist_start_head	fs/seq_file.c	/^EXPORT_SYMBOL(seq_hlist_start_head);$/;"	v
seq_hlist_start_head	fs/seq_file.c	/^struct hlist_node *seq_hlist_start_head(struct hlist_head *head, loff_t pos)$/;"	f
seq_hlist_start_head_rcu	fs/seq_file.c	/^EXPORT_SYMBOL(seq_hlist_start_head_rcu);$/;"	v
seq_hlist_start_head_rcu	fs/seq_file.c	/^struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,$/;"	f
seq_hlist_start_rcu	fs/seq_file.c	/^EXPORT_SYMBOL(seq_hlist_start_rcu);$/;"	v
seq_hlist_start_rcu	fs/seq_file.c	/^struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,$/;"	f
seq_line	kernel/lockdep_proc.c	/^static void seq_line(struct seq_file *m, char c, int offset, int length)$/;"	f	file:
seq_list_next	fs/seq_file.c	/^EXPORT_SYMBOL(seq_list_next);$/;"	v
seq_list_next	fs/seq_file.c	/^struct list_head *seq_list_next(void *v, struct list_head *head, loff_t *ppos)$/;"	f
seq_list_start	fs/seq_file.c	/^EXPORT_SYMBOL(seq_list_start);$/;"	v
seq_list_start	fs/seq_file.c	/^struct list_head *seq_list_start(struct list_head *head, loff_t pos)$/;"	f
seq_list_start_head	fs/seq_file.c	/^EXPORT_SYMBOL(seq_list_start_head);$/;"	v
seq_list_start_head	fs/seq_file.c	/^struct list_head *seq_list_start_head(struct list_head *head, loff_t pos)$/;"	f
seq_lock_time	kernel/lockdep_proc.c	/^static void seq_lock_time(struct seq_file *m, struct lock_time *lt)$/;"	f	file:
seq_lseek	fs/seq_file.c	/^EXPORT_SYMBOL(seq_lseek);$/;"	v
seq_lseek	fs/seq_file.c	/^loff_t seq_lseek(struct file *file, loff_t offset, int whence)$/;"	f
seq_open	fs/seq_file.c	/^EXPORT_SYMBOL(seq_open);$/;"	v
seq_open	fs/seq_file.c	/^int seq_open(struct file *file, const struct seq_operations *op)$/;"	f
seq_open_private	fs/seq_file.c	/^EXPORT_SYMBOL(seq_open_private);$/;"	v
seq_open_private	fs/seq_file.c	/^int seq_open_private(struct file *filp, const struct seq_operations *ops,$/;"	f
seq_overflow	fs/seq_file.c	/^static bool seq_overflow(struct seq_file *m)$/;"	f	file:
seq_path	fs/seq_file.c	/^EXPORT_SYMBOL(seq_path);$/;"	v
seq_path	fs/seq_file.c	/^int seq_path(struct seq_file *m, const struct path *path, const char *esc)$/;"	f
seq_path_root	fs/seq_file.c	/^int seq_path_root(struct seq_file *m, const struct path *path,$/;"	f
seq_printf	fs/seq_file.c	/^EXPORT_SYMBOL(seq_printf);$/;"	v
seq_printf	fs/seq_file.c	/^int seq_printf(struct seq_file *m, const char *f, ...)$/;"	f
seq_put_decimal_ll	fs/seq_file.c	/^EXPORT_SYMBOL(seq_put_decimal_ll);$/;"	v
seq_put_decimal_ll	fs/seq_file.c	/^int seq_put_decimal_ll(struct seq_file *m, char delimiter,$/;"	f
seq_put_decimal_ull	fs/seq_file.c	/^EXPORT_SYMBOL(seq_put_decimal_ull);$/;"	v
seq_put_decimal_ull	fs/seq_file.c	/^int seq_put_decimal_ull(struct seq_file *m, char delimiter,$/;"	f
seq_putc	fs/seq_file.c	/^EXPORT_SYMBOL(seq_putc);$/;"	v
seq_putc	fs/seq_file.c	/^int seq_putc(struct seq_file *m, char c)$/;"	f
seq_puts	fs/seq_file.c	/^EXPORT_SYMBOL(seq_puts);$/;"	v
seq_puts	fs/seq_file.c	/^int seq_puts(struct seq_file *m, const char *s)$/;"	f
seq_read	fs/seq_file.c	/^EXPORT_SYMBOL(seq_read);$/;"	v
seq_read	fs/seq_file.c	/^ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)$/;"	f
seq_release	fs/seq_file.c	/^EXPORT_SYMBOL(seq_release);$/;"	v
seq_release	fs/seq_file.c	/^int seq_release(struct inode *inode, struct file *file)$/;"	f
seq_release_private	fs/seq_file.c	/^EXPORT_SYMBOL(seq_release_private);$/;"	v
seq_release_private	fs/seq_file.c	/^int seq_release_private(struct inode *inode, struct file *file)$/;"	f
seq_set_overflow	fs/seq_file.c	/^static void seq_set_overflow(struct seq_file *m)$/;"	f	file:
seq_stats	kernel/lockdep_proc.c	/^static void seq_stats(struct seq_file *m, struct lock_stat_data *data)$/;"	f	file:
seq_time	kernel/lockdep_proc.c	/^static void seq_time(struct seq_file *m, s64 time)$/;"	f	file:
seq_vprintf	fs/seq_file.c	/^EXPORT_SYMBOL(seq_vprintf);$/;"	v
seq_vprintf	fs/seq_file.c	/^int seq_vprintf(struct seq_file *m, const char *f, va_list args)$/;"	f
seq_write	fs/seq_file.c	/^EXPORT_SYMBOL(seq_write);$/;"	v
seq_write	fs/seq_file.c	/^int seq_write(struct seq_file *seq, const void *data, size_t len)$/;"	f
seqnr	mm/ksm.c	/^	unsigned long seqnr;$/;"	m	struct:ksm_scan	file:
serial	kernel/auditsc.c	/^	unsigned int	    serial;     \/* serial number for record *\/$/;"	m	struct:audit_context	file:
serial_struct32	fs/compat_ioctl.c	/^struct serial_struct32 {$/;"	s	file:
serial_struct_ioctl	fs/compat_ioctl.c	/^static int serial_struct_ioctl(unsigned fd, unsigned cmd,$/;"	f	file:
session_id	kernel/auditsc.c	/^static atomic_t session_id = ATOMIC_INIT(0);$/;"	v	file:
session_of_pgrp	kernel/exit.c	/^struct pid *session_of_pgrp(struct pid *pgrp)$/;"	f
set	fs/libfs.c	/^	int (*set)(void *, u64);$/;"	m	struct:simple_attr	file:
set_all_modules_text_ro	kernel/module.c	/^void set_all_modules_text_ro(void)$/;"	f
set_all_modules_text_rw	kernel/module.c	/^void set_all_modules_text_rw(void)$/;"	f
set_anon_super	fs/super.c	/^EXPORT_SYMBOL(set_anon_super);$/;"	v
set_anon_super	fs/super.c	/^int set_anon_super(struct super_block *s, void *data)$/;"	f
set_base_pte_flags	mm/scm.h	/^static pte_t inline set_base_pte_flags(pte_t pte)$/;"	f
set_bdev_super	fs/super.c	/^static int set_bdev_super(struct super_block *s, void *data)$/;"	f	file:
set_bdi_congested	mm/backing-dev.c	/^EXPORT_SYMBOL(set_bdi_congested);$/;"	v
set_bdi_congested	mm/backing-dev.c	/^void set_bdi_congested(struct backing_dev_info *bdi, int sync)$/;"	f
set_bh_page	fs/buffer.c	/^EXPORT_SYMBOL(set_bh_page);$/;"	v
set_bh_page	fs/buffer.c	/^void set_bh_page(struct buffer_head *bh,$/;"	f
set_binfmt	fs/exec.c	/^EXPORT_SYMBOL(set_binfmt);$/;"	v
set_binfmt	fs/exec.c	/^void set_binfmt(struct linux_binfmt *new)$/;"	f
set_blocksize	fs/block_dev.c	/^EXPORT_SYMBOL(set_blocksize);$/;"	v
set_blocksize	fs/block_dev.c	/^int set_blocksize(struct block_device *bdev, int size)$/;"	f
set_brk	fs/binfmt_aout.c	/^static int set_brk(unsigned long start, unsigned long end)$/;"	f	file:
set_brk	fs/binfmt_elf.c	/^static int set_brk(unsigned long start, unsigned long end)$/;"	f	file:
set_buf	fs/libfs.c	/^	char set_buf[24];$/;"	m	struct:simple_attr	file:
set_close_on_exec	fs/file.c	/^void set_close_on_exec(unsigned int fd, int flag)$/;"	f
set_cpu_active	kernel/cpu.c	/^void set_cpu_active(unsigned int cpu, bool active)$/;"	f
set_cpu_itimer	kernel/itimer.c	/^static void set_cpu_itimer(struct task_struct *tsk, unsigned int clock_id,$/;"	f	file:
set_cpu_online	kernel/cpu.c	/^void set_cpu_online(unsigned int cpu, bool online)$/;"	f
set_cpu_possible	kernel/cpu.c	/^void set_cpu_possible(unsigned int cpu, bool possible)$/;"	f
set_cpu_present	kernel/cpu.c	/^void set_cpu_present(unsigned int cpu, bool present)$/;"	f
set_create_files_as	kernel/cred.c	/^EXPORT_SYMBOL(set_create_files_as);$/;"	v
set_create_files_as	kernel/cred.c	/^int set_create_files_as(struct cred *new, struct inode *inode)$/;"	f
set_cred_subscribers	kernel/cred.c	/^static inline void set_cred_subscribers(struct cred *cred, int n)$/;"	f	file:
set_cred_user_ns	kernel/user_namespace.c	/^static void set_cred_user_ns(struct cred *cred, struct user_namespace *user_ns)$/;"	f	file:
set_current_blocked	kernel/signal.c	/^void set_current_blocked(sigset_t *newset)$/;"	f
set_current_groups	kernel/groups.c	/^EXPORT_SYMBOL(set_current_groups);$/;"	v
set_current_groups	kernel/groups.c	/^int set_current_groups(struct group_info *group_info)$/;"	f
set_dhash_entries	fs/dcache.c	/^static int __init set_dhash_entries(char *str)$/;"	f	file:
set_dma_reserve	mm/page_alloc.c	/^void __init set_dma_reserve(unsigned long new_dma_reserve)$/;"	f
set_dumpable	fs/exec.c	/^void set_dumpable(struct mm_struct *mm, int value)$/;"	f
set_freepointer	mm/slub.c	/^static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)$/;"	f	file:
set_freezable	kernel/freezer.c	/^EXPORT_SYMBOL(set_freezable);$/;"	v
set_freezable	kernel/freezer.c	/^bool set_freezable(void)$/;"	f
set_fs_pwd	fs/fs_struct.c	/^void set_fs_pwd(struct fs_struct *fs, const struct path *path)$/;"	f
set_fs_root	fs/fs_struct.c	/^void set_fs_root(struct fs_struct *fs, const struct path *path)$/;"	f
set_groups	kernel/groups.c	/^EXPORT_SYMBOL(set_groups);$/;"	v
set_groups	kernel/groups.c	/^int set_groups(struct cred *new, struct group_info *group_info)$/;"	f
set_hashdist	mm/page_alloc.c	/^static int __init set_hashdist(char *str)$/;"	f	file:
set_highest_priority_index	mm/swapfile.c	/^static void set_highest_priority_index(int type)$/;"	f	file:
set_huge_ptep_writable	mm/hugetlb.c	/^static void set_huge_ptep_writable(struct vm_area_struct *vma,$/;"	f	file:
set_huge_zero_page	mm/huge_memory.c	/^static bool set_huge_zero_page(pgtable_t pgtable, struct mm_struct *mm,$/;"	f	file:
set_ihash_entries	fs/inode.c	/^static int __init set_ihash_entries(char *str)$/;"	f	file:
set_iounmap_nonlazy	mm/vmalloc.c	/^void set_iounmap_nonlazy(void)$/;"	f
set_kprobe_instance	kernel/kprobes.c	/^static inline void set_kprobe_instance(struct kprobe *kp)$/;"	f	file:
set_last_pid	kernel/pid.c	/^static void set_last_pid(struct pid_namespace *pid_ns, int base, int pid)$/;"	f	file:
set_license	kernel/module.c	/^static void set_license(struct module *mod, const char *license)$/;"	f	file:
set_max_huge_pages	mm/hugetlb.c	/^static unsigned long set_max_huge_pages(struct hstate *h, unsigned long count,$/;"	f	file:
set_migratetype_isolate	mm/page_isolation.c	/^int set_migratetype_isolate(struct page *page, bool skip_hwpoisoned_pages)$/;"	f
set_min_partial	mm/slub.c	/^static void set_min_partial(struct kmem_cache *s, unsigned long min)$/;"	f	file:
set_mm_exe_file	kernel/fork.c	/^void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file)$/;"	f
set_mminit_loglevel	mm/mm_init.c	/^static __init int set_mminit_loglevel(char *str)$/;"	f	file:
set_mnt_shared	fs/pnode.h	/^static inline void set_mnt_shared(struct mount *mnt)$/;"	f
set_nlink	fs/inode.c	/^EXPORT_SYMBOL(set_nlink);$/;"	v
set_nlink	fs/inode.c	/^void set_nlink(struct inode *inode, unsigned int nlink)$/;"	f
set_normalized_timespec	kernel/time.c	/^EXPORT_SYMBOL(set_normalized_timespec);$/;"	v
set_normalized_timespec	kernel/time.c	/^void set_normalized_timespec(struct timespec *ts, time_t sec, s64 nsec)$/;"	f
set_obj_pfmemalloc	mm/slab.c	/^static inline void set_obj_pfmemalloc(void **objp)$/;"	f	file:
set_one_prio	kernel/sys.c	/^static int set_one_prio(struct task_struct *p, int niceval, int error)$/;"	f	file:
set_one_prio_perm	kernel/sys.c	/^static bool set_one_prio_perm(struct task_struct *p)$/;"	f	file:
set_online_page_callback	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(set_online_page_callback);$/;"	v
set_online_page_callback	mm/memory_hotplug.c	/^int set_online_page_callback(online_page_callback_t callback)$/;"	f
set_opt	fs/ext3/ext3.h	371;"	d
set_page_address	mm/highmem.c	/^void set_page_address(struct page *page, void *virtual)$/;"	f
set_page_attributes	kernel/module.c	/^void set_page_attributes(void *start, void *end, int (*set)(unsigned long start, int num_pages))$/;"	f
set_page_count	mm/internal.h	/^static inline void set_page_count(struct page *page, int v)$/;"	f
set_page_dirty	mm/page-writeback.c	/^EXPORT_SYMBOL(set_page_dirty);$/;"	v
set_page_dirty	mm/page-writeback.c	/^int set_page_dirty(struct page *page)$/;"	f
set_page_dirty_balance	mm/page-writeback.c	/^void set_page_dirty_balance(struct page *page, int page_mkwrite)$/;"	f
set_page_dirty_lock	mm/page-writeback.c	/^EXPORT_SYMBOL(set_page_dirty_lock);$/;"	v
set_page_dirty_lock	mm/page-writeback.c	/^int set_page_dirty_lock(struct page *page)$/;"	f
set_page_guard_flag	mm/page_alloc.c	/^static inline void set_page_guard_flag(struct page *page) { }$/;"	f	file:
set_page_guard_flag	mm/page_alloc.c	/^static inline void set_page_guard_flag(struct page *page)$/;"	f	file:
set_page_hwpoison_huge_page	mm/memory-failure.c	/^static void set_page_hwpoison_huge_page(struct page *hpage)$/;"	f	file:
set_page_order	mm/page_alloc.c	/^static inline void set_page_order(struct page *page, int order)$/;"	f	file:
set_page_poison	mm/debug-pagealloc.c	/^static inline void set_page_poison(struct page *page)$/;"	f	file:
set_page_refcounted	mm/internal.h	/^static inline void set_page_refcounted(struct page *page)$/;"	f
set_pageblock_flags_group	mm/page_alloc.c	/^void set_pageblock_flags_group(struct page *page, unsigned long flags,$/;"	f
set_pageblock_migratetype	mm/page_alloc.c	/^void set_pageblock_migratetype(struct page *page, int migratetype)$/;"	f
set_pageblock_order	mm/page_alloc.c	/^void __init set_pageblock_order(void)$/;"	f
set_pgdat_percpu_threshold	mm/vmstat.c	/^void set_pgdat_percpu_threshold(pg_data_t *pgdat,$/;"	f
set_process_cpu_timer	kernel/posix-cpu-timers.c	/^void set_process_cpu_timer(struct task_struct *tsk, unsigned int clock_idx,$/;"	f
set_qf_name	fs/ext3/super.c	/^static int set_qf_name(struct super_block *sb, int qtype, substring_t *args)$/;"	f	file:
set_recommended_min_free_kbytes	mm/huge_memory.c	/^late_initcall(set_recommended_min_free_kbytes);$/;"	v
set_recommended_min_free_kbytes	mm/huge_memory.c	/^static int set_recommended_min_free_kbytes(void)$/;"	f	file:
set_root	fs/namei.c	/^static __always_inline void set_root(struct nameidata *nd)$/;"	f	file:
set_root_rcu	fs/namei.c	/^static __always_inline void set_root_rcu(struct nameidata *nd)$/;"	f	file:
set_sample_period	kernel/watchdog.c	/^static void set_sample_period(void)$/;"	f	file:
set_section_nid	mm/sparse.c	/^static inline void set_section_nid(unsigned long section_nr, int nid)$/;"	f	file:
set_section_nid	mm/sparse.c	/^static void set_section_nid(unsigned long section_nr, int nid)$/;"	f	file:
set_section_ro_nx	kernel/module.c	/^static inline void set_section_ro_nx(void *base, unsigned long text_size, unsigned long ro_size, unsigned long total_size) { }$/;"	f	file:
set_section_ro_nx	kernel/module.c	/^static void set_section_ro_nx(void *base,$/;"	f	file:
set_security_override	kernel/cred.c	/^EXPORT_SYMBOL(set_security_override);$/;"	v
set_security_override	kernel/cred.c	/^int set_security_override(struct cred *new, u32 secid)$/;"	f
set_security_override_from_ctx	kernel/cred.c	/^EXPORT_SYMBOL(set_security_override_from_ctx);$/;"	v
set_security_override_from_ctx	kernel/cred.c	/^int set_security_override_from_ctx(struct cred *new, const char *secctx)$/;"	f
set_slob	mm/slob.c	/^static void set_slob(slob_t *s, slobidx_t size, slob_t *next)$/;"	f	file:
set_slob_page_free	mm/slob.c	/^static void set_slob_page_free(struct page *sp, struct list_head *list)$/;"	f	file:
set_state	kernel/stop_machine.c	/^static void set_state(struct stop_machine_data *smdata,$/;"	f	file:
set_task_comm	fs/exec.c	/^void set_task_comm(struct task_struct *tsk, char *buf)$/;"	f
set_task_ioprio	fs/ioprio.c	/^EXPORT_SYMBOL_GPL(set_task_ioprio);$/;"	v
set_task_ioprio	fs/ioprio.c	/^int set_task_ioprio(struct task_struct *task, int ioprio)$/;"	f
set_timeout	fs/aio.c	/^static inline void set_timeout(long start_jiffies, struct aio_timeout *to,$/;"	f	file:
set_timer_slack	kernel/timer.c	/^EXPORT_SYMBOL_GPL(set_timer_slack);$/;"	v
set_timer_slack	kernel/timer.c	/^void set_timer_slack(struct timer_list *timer, int slack_hz)$/;"	f
set_tracepoint	kernel/tracepoint.c	/^static void set_tracepoint(struct tracepoint_entry **entry,$/;"	f	file:
set_track	mm/slub.c	/^static void set_track(struct kmem_cache *s, void *object,$/;"	f	file:
set_up_list3s	mm/slab.c	/^static void __init set_up_list3s(struct kmem_cache *cachep, int index)$/;"	f	file:
set_user	kernel/sys.c	/^static int set_user(struct cred *new)$/;"	f	file:
set_vma_private_data	mm/hugetlb.c	/^static void set_vma_private_data(struct vm_area_struct *vma,$/;"	f	file:
set_vma_resv_flags	mm/hugetlb.c	/^static void set_vma_resv_flags(struct vm_area_struct *vma, unsigned long flags)$/;"	f	file:
set_vma_resv_map	mm/hugetlb.c	/^static void set_vma_resv_map(struct vm_area_struct *vma, struct resv_map *map)$/;"	f	file:
set_work_data	kernel/workqueue.c	/^static inline void set_work_data(struct work_struct *work, unsigned long data,$/;"	f	file:
set_work_pool_and_clear_pending	kernel/workqueue.c	/^static void set_work_pool_and_clear_pending(struct work_struct *work,$/;"	f	file:
set_work_pool_and_keep_pending	kernel/workqueue.c	/^static void set_work_pool_and_keep_pending(struct work_struct *work,$/;"	f	file:
set_work_pwq	kernel/workqueue.c	/^static void set_work_pwq(struct work_struct *work, struct pool_workqueue *pwq,$/;"	f	file:
set_zonelist_order	mm/page_alloc.c	/^static void set_zonelist_order(void)$/;"	f	file:
setattr_copy	fs/attr.c	/^EXPORT_SYMBOL(setattr_copy);$/;"	v
setattr_copy	fs/attr.c	/^void setattr_copy(struct inode *inode, const struct iattr *attr)$/;"	f
setfl	fs/fcntl.c	/^static int setfl(int fd, struct file * filp, unsigned long arg)$/;"	f	file:
setup_arg_pages	fs/exec.c	/^EXPORT_SYMBOL(setup_arg_pages);$/;"	v
setup_arg_pages	fs/exec.c	/^int setup_arg_pages(struct linux_binprm *bprm,$/;"	f
setup_callbacks	kernel/relay.c	/^static void setup_callbacks(struct rchan *chan,$/;"	f	file:
setup_cpu_cache	mm/slab.c	/^static int __init_refok setup_cpu_cache(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
setup_elfcorehdr	kernel/crash_dump.c	/^static int __init setup_elfcorehdr(char *arg)$/;"	f	file:
setup_fail_page_alloc	mm/page_alloc.c	/^static int __init setup_fail_page_alloc(char *str)$/;"	f	file:
setup_failslab	mm/failslab.c	/^static int __init setup_failslab(char *str)$/;"	f	file:
setup_hrtimer_hres	kernel/hrtimer.c	/^static int __init setup_hrtimer_hres(char *str)$/;"	f	file:
setup_load_info	kernel/module.c	/^static struct module *setup_load_info(struct load_info *info, int flags)$/;"	f	file:
setup_log_buf	kernel/printk.c	/^void __init setup_log_buf(int early)$/;"	f
setup_max_cpus	kernel/smp.c	/^EXPORT_SYMBOL(setup_max_cpus);$/;"	v
setup_max_cpus	kernel/smp.c	/^unsigned int setup_max_cpus = NR_CPUS;$/;"	v
setup_modinfo	kernel/module.c	/^static void setup_modinfo(struct module *mod, struct load_info *info)$/;"	f	file:
setup_new_exec	fs/exec.c	/^EXPORT_SYMBOL(setup_new_exec);$/;"	v
setup_new_exec	fs/exec.c	/^void setup_new_exec(struct linux_binprm * bprm)$/;"	f
setup_new_group_blocks	fs/ext3/resize.c	/^static int setup_new_group_blocks(struct super_block *sb,$/;"	f	file:
setup_nodelists_pointer	mm/slab.c	/^static void setup_nodelists_pointer(struct kmem_cache *cachep)$/;"	f	file:
setup_nr_cpu_ids	kernel/smp.c	/^void __init setup_nr_cpu_ids(void)$/;"	f
setup_nr_node_ids	mm/page_alloc.c	/^static inline void setup_nr_node_ids(void)$/;"	f	file:
setup_nr_node_ids	mm/page_alloc.c	/^static void __init setup_nr_node_ids(void)$/;"	f	file:
setup_numa_zonelist_order	mm/page_alloc.c	/^static __init int setup_numa_zonelist_order(char *s)$/;"	f	file:
setup_numabalancing	mm/mempolicy.c	/^static int __init setup_numabalancing(char *str)$/;"	f	file:
setup_object	mm/slub.c	/^static void setup_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
setup_object_debug	mm/slub.c	/^static inline void setup_object_debug(struct kmem_cache *s,$/;"	f	file:
setup_object_debug	mm/slub.c	/^static void setup_object_debug(struct kmem_cache *s, struct page *page,$/;"	f	file:
setup_pagelist_highmark	mm/page_alloc.c	/^static void setup_pagelist_highmark(struct per_cpu_pageset *p,$/;"	f	file:
setup_pageset	mm/page_alloc.c	/^static void setup_pageset(struct per_cpu_pageset *p, unsigned long batch)$/;"	f	file:
setup_per_cpu_areas	mm/percpu.c	/^void __init setup_per_cpu_areas(void)$/;"	f
setup_per_cpu_pageset	mm/page_alloc.c	/^void __init setup_per_cpu_pageset(void)$/;"	f
setup_per_zone_inactive_ratio	mm/page_alloc.c	/^static void __meminit setup_per_zone_inactive_ratio(void)$/;"	f	file:
setup_per_zone_lowmem_reserve	mm/page_alloc.c	/^static void setup_per_zone_lowmem_reserve(void)$/;"	f	file:
setup_per_zone_wmarks	mm/page_alloc.c	/^void setup_per_zone_wmarks(void)$/;"	f
setup_print_fatal_signals	kernel/signal.c	/^static int __init setup_print_fatal_signals(char *str)$/;"	f	file:
setup_slub_debug	mm/slub.c	/^static int __init setup_slub_debug(char *str)$/;"	f	file:
setup_slub_max_order	mm/slub.c	/^static int __init setup_slub_max_order(char *str)$/;"	f	file:
setup_slub_min_objects	mm/slub.c	/^static int __init setup_slub_min_objects(char *str)$/;"	f	file:
setup_slub_min_order	mm/slub.c	/^static int __init setup_slub_min_order(char *str)$/;"	f	file:
setup_slub_nomerge	mm/slub.c	/^static int __init setup_slub_nomerge(char *str)$/;"	f	file:
setup_swap_extents	mm/swapfile.c	/^static int setup_swap_extents(struct swap_info_struct *sis, sector_t *span)$/;"	f	file:
setup_swap_map_and_extents	mm/swapfile.c	/^static int setup_swap_map_and_extents(struct swap_info_struct *p,$/;"	f	file:
setup_transparent_hugepage	mm/huge_memory.c	/^static int __init setup_transparent_hugepage(char *str)$/;"	f	file:
setup_usemap	mm/page_alloc.c	/^static inline void setup_usemap(struct pglist_data *pgdat, struct zone *zone,$/;"	f	file:
setup_usemap	mm/page_alloc.c	/^static void __init setup_usemap(struct pglist_data *pgdat,$/;"	f	file:
setup_vmalloc_vm	mm/vmalloc.c	/^static void setup_vmalloc_vm(struct vm_struct *vm, struct vmap_area *va,$/;"	f	file:
setup_vmstat	mm/vmstat.c	/^static int __init setup_vmstat(void)$/;"	f	file:
setup_zone_migrate_reserve	mm/page_alloc.c	/^static void setup_zone_migrate_reserve(struct zone *zone)$/;"	f	file:
setup_zone_pageset	mm/page_alloc.c	/^static void __meminit setup_zone_pageset(struct zone *zone)$/;"	f	file:
setxattr	fs/xattr.c	/^setxattr(struct dentry *d, const char __user *name, const void __user *value,$/;"	f	file:
sg_build_iovec	fs/compat_ioctl.c	/^static int sg_build_iovec(sg_io_hdr_t __user *sgio, void __user *dxferp, u16 iovec_count)$/;"	f	file:
sg_grt_trans	fs/compat_ioctl.c	/^static int sg_grt_trans(unsigned int fd, unsigned int cmd, struct$/;"	f	file:
sg_io_hdr32	fs/compat_ioctl.c	/^typedef struct sg_io_hdr32 {$/;"	s	file:
sg_io_hdr32_t	fs/compat_ioctl.c	/^} sg_io_hdr32_t;  \/* 64 bytes long (on sparc32) *\/$/;"	t	typeref:struct:sg_io_hdr32	file:
sg_io_owned	fs/compat_ioctl.c	/^	char sg_io_owned;$/;"	m	struct:compat_sg_req_info	file:
sg_ioctl_trans	fs/compat_ioctl.c	/^static int sg_ioctl_trans(unsigned int fd, unsigned int cmd,$/;"	f	file:
sg_iovec32	fs/compat_ioctl.c	/^typedef struct sg_iovec32 {$/;"	s	file:
sg_iovec32_t	fs/compat_ioctl.c	/^} sg_iovec32_t;$/;"	t	typeref:struct:sg_iovec32	file:
sget	fs/super.c	/^EXPORT_SYMBOL(sget);$/;"	v
sget	fs/super.c	/^struct super_block *sget(struct file_system_type *type,$/;"	f
sgid	kernel/auditsc.c	/^	kgid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
sgp_type	mm/shmem.c	/^enum sgp_type {$/;"	g	file:
sgvecs	fs/bio.c	/^	struct sg_iovec *sgvecs;$/;"	m	struct:bio_map_data	typeref:struct:bio_map_data::sg_iovec	file:
shake_page	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(shake_page);$/;"	v
shake_page	mm/memory-failure.c	/^void shake_page(struct page *p, int access)$/;"	f
shared	mm/slab.c	/^	struct array_cache *shared;	\/* shared per node *\/$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::array_cache	file:
shared	mm/slab.h	/^	unsigned int shared;$/;"	m	struct:slabinfo
shared_avail	mm/slab.h	/^	unsigned long shared_avail;$/;"	m	struct:slabinfo
shared_policy_replace	mm/mempolicy.c	/^static int shared_policy_replace(struct shared_policy *sp, unsigned long start,$/;"	f	file:
sharedram	kernel/compat.c	/^	u32 sharedram;$/;"	m	struct:compat_sysinfo	file:
shift_arg_pages	fs/exec.c	/^static int shift_arg_pages(struct vm_area_struct *vma, unsigned long shift)$/;"	f	file:
shm_mnt	mm/shmem.c	/^static struct vfsmount *shm_mnt;$/;"	v	typeref:struct:vfsmount	file:
shmem_acct_block	mm/shmem.c	/^static inline int shmem_acct_block(unsigned long flags)$/;"	f	file:
shmem_acct_size	mm/shmem.c	/^static inline int shmem_acct_size(unsigned long flags, loff_t size)$/;"	f	file:
shmem_acct_size	mm/shmem.c	2875;"	d	file:
shmem_add_to_page_cache	mm/shmem.c	/^static int shmem_add_to_page_cache(struct page *page,$/;"	f	file:
shmem_alloc_inode	mm/shmem.c	/^static struct inode *shmem_alloc_inode(struct super_block *sb)$/;"	f	file:
shmem_alloc_page	mm/shmem.c	/^static inline struct page *shmem_alloc_page(gfp_t gfp,$/;"	f	file:
shmem_alloc_page	mm/shmem.c	/^static struct page *shmem_alloc_page(gfp_t gfp,$/;"	f	file:
shmem_aops	mm/shmem.c	/^static const struct address_space_operations shmem_aops = {$/;"	v	typeref:struct:address_space_operations	file:
shmem_aops	mm/shmem.c	/^static const struct address_space_operations shmem_aops;$/;"	v	typeref:struct:address_space_operations	file:
shmem_confirm_swap	mm/shmem.c	/^static bool shmem_confirm_swap(struct address_space *mapping,$/;"	f	file:
shmem_create	mm/shmem.c	/^static int shmem_create(struct inode *dir, struct dentry *dentry, umode_t mode,$/;"	f	file:
shmem_default_max_blocks	mm/shmem.c	/^static unsigned long shmem_default_max_blocks(void)$/;"	f	file:
shmem_default_max_inodes	mm/shmem.c	/^static unsigned long shmem_default_max_inodes(void)$/;"	f	file:
shmem_delete_from_page_cache	mm/shmem.c	/^static void shmem_delete_from_page_cache(struct page *page, void *radswap)$/;"	f	file:
shmem_destroy_callback	mm/shmem.c	/^static void shmem_destroy_callback(struct rcu_head *head)$/;"	f	file:
shmem_destroy_inode	mm/shmem.c	/^static void shmem_destroy_inode(struct inode *inode)$/;"	f	file:
shmem_destroy_inodecache	mm/shmem.c	/^static void shmem_destroy_inodecache(void)$/;"	f	file:
shmem_deswap_pagevec	mm/shmem.c	/^static void shmem_deswap_pagevec(struct pagevec *pvec)$/;"	f	file:
shmem_dir_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_dir_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_dir_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_dname	mm/shmem.c	/^static char *shmem_dname(struct dentry *dentry, char *buffer, int buflen)$/;"	f	file:
shmem_encode_fh	mm/shmem.c	/^static int shmem_encode_fh(struct inode *inode, __u32 *fh, int *len,$/;"	f	file:
shmem_evict_inode	mm/shmem.c	/^static void shmem_evict_inode(struct inode *inode)$/;"	f	file:
shmem_export_ops	mm/shmem.c	/^static const struct export_operations shmem_export_ops = {$/;"	v	typeref:struct:export_operations	file:
shmem_falloc	mm/shmem.c	/^struct shmem_falloc {$/;"	s	file:
shmem_fallocate	mm/shmem.c	/^static long shmem_fallocate(struct file *file, int mode, loff_t offset,$/;"	f	file:
shmem_fault	mm/shmem.c	/^static int shmem_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
shmem_fh_to_dentry	mm/shmem.c	/^static struct dentry *shmem_fh_to_dentry(struct super_block *sb,$/;"	f	file:
shmem_file_aio_read	mm/shmem.c	/^static ssize_t shmem_file_aio_read(struct kiocb *iocb,$/;"	f	file:
shmem_file_llseek	mm/shmem.c	/^static loff_t shmem_file_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
shmem_file_operations	mm/shmem.c	/^static const struct file_operations shmem_file_operations = {$/;"	v	typeref:struct:file_operations	file:
shmem_file_operations	mm/shmem.c	/^static const struct file_operations shmem_file_operations;$/;"	v	typeref:struct:file_operations	file:
shmem_file_operations	mm/shmem.c	2873;"	d	file:
shmem_file_setup	mm/shmem.c	/^EXPORT_SYMBOL_GPL(shmem_file_setup);$/;"	v
shmem_file_setup	mm/shmem.c	/^struct file *shmem_file_setup(const char *name, loff_t size, unsigned long flags)$/;"	f
shmem_file_splice_read	mm/shmem.c	/^static ssize_t shmem_file_splice_read(struct file *in, loff_t *ppos,$/;"	f	file:
shmem_fill_super	mm/shmem.c	/^int shmem_fill_super(struct super_block *sb, void *data, int silent)$/;"	f
shmem_find_get_pages_and_swap	mm/shmem.c	/^static unsigned shmem_find_get_pages_and_swap(struct address_space *mapping,$/;"	f	file:
shmem_follow_link	mm/shmem.c	/^static void *shmem_follow_link(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
shmem_follow_short_symlink	mm/shmem.c	/^static void *shmem_follow_short_symlink(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
shmem_free_inode	mm/shmem.c	/^static void shmem_free_inode(struct super_block *sb)$/;"	f	file:
shmem_free_swap	mm/shmem.c	/^static int shmem_free_swap(struct address_space *mapping,$/;"	f	file:
shmem_fs_type	mm/shmem.c	/^static struct file_system_type shmem_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
shmem_get_inode	mm/shmem.c	/^static struct inode *shmem_get_inode(struct super_block *sb, const struct inode *dir,$/;"	f	file:
shmem_get_inode	mm/shmem.c	2874;"	d	file:
shmem_get_parent	mm/shmem.c	/^static struct dentry *shmem_get_parent(struct dentry *child)$/;"	f	file:
shmem_get_policy	mm/shmem.c	/^static struct mempolicy *shmem_get_policy(struct vm_area_struct *vma,$/;"	f	file:
shmem_get_sbmpol	mm/shmem.c	/^static inline struct mempolicy *shmem_get_sbmpol(struct shmem_sb_info *sbinfo)$/;"	f	file:
shmem_get_sbmpol	mm/shmem.c	/^static struct mempolicy *shmem_get_sbmpol(struct shmem_sb_info *sbinfo)$/;"	f	file:
shmem_getpage	mm/shmem.c	/^static inline int shmem_getpage(struct inode *inode, pgoff_t index,$/;"	f	file:
shmem_getpage_gfp	mm/shmem.c	/^static int shmem_getpage_gfp(struct inode *inode, pgoff_t index,$/;"	f	file:
shmem_getxattr	mm/shmem.c	/^static ssize_t shmem_getxattr(struct dentry *dentry, const char *name,$/;"	f	file:
shmem_init	mm/shmem.c	/^int __init shmem_init(void)$/;"	f
shmem_init_inode	mm/shmem.c	/^static void shmem_init_inode(void *foo)$/;"	f	file:
shmem_init_inodecache	mm/shmem.c	/^static int shmem_init_inodecache(void)$/;"	f	file:
shmem_initxattrs	mm/shmem.c	/^static int shmem_initxattrs(struct inode *inode,$/;"	f	file:
shmem_initxattrs	mm/shmem.c	1427;"	d	file:
shmem_inode_cachep	mm/shmem.c	/^static struct kmem_cache *shmem_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
shmem_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_link	mm/shmem.c	/^static int shmem_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_listxattr	mm/shmem.c	/^static ssize_t shmem_listxattr(struct dentry *dentry, char *buffer, size_t size)$/;"	f	file:
shmem_lock	mm/shmem.c	/^int shmem_lock(struct file *file, int lock, struct user_struct *user)$/;"	f
shmem_match	mm/shmem.c	/^static int shmem_match(struct inode *ino, void *vfh)$/;"	f	file:
shmem_mkdir	mm/shmem.c	/^static int shmem_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
shmem_mknod	mm/shmem.c	/^shmem_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)$/;"	f	file:
shmem_mmap	mm/shmem.c	/^static int shmem_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
shmem_mount	mm/shmem.c	/^static struct dentry *shmem_mount(struct file_system_type *fs_type,$/;"	f	file:
shmem_ops	mm/shmem.c	/^static const struct super_operations shmem_ops = {$/;"	v	typeref:struct:super_operations	file:
shmem_ops	mm/shmem.c	/^static const struct super_operations shmem_ops;$/;"	v	typeref:struct:super_operations	file:
shmem_parse_options	mm/shmem.c	/^static int shmem_parse_options(char *options, struct shmem_sb_info *sbinfo,$/;"	f	file:
shmem_put_link	mm/shmem.c	/^static void shmem_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)$/;"	f	file:
shmem_put_super	mm/shmem.c	/^static void shmem_put_super(struct super_block *sb)$/;"	f	file:
shmem_radix_tree_replace	mm/shmem.c	/^static int shmem_radix_tree_replace(struct address_space *mapping,$/;"	f	file:
shmem_read_mapping_page_gfp	mm/shmem.c	/^EXPORT_SYMBOL_GPL(shmem_read_mapping_page_gfp);$/;"	v
shmem_read_mapping_page_gfp	mm/shmem.c	/^struct page *shmem_read_mapping_page_gfp(struct address_space *mapping,$/;"	f
shmem_recalc_inode	mm/shmem.c	/^static void shmem_recalc_inode(struct inode *inode)$/;"	f	file:
shmem_remount_fs	mm/shmem.c	/^static int shmem_remount_fs(struct super_block *sb, int *flags, char *data)$/;"	f	file:
shmem_removexattr	mm/shmem.c	/^static int shmem_removexattr(struct dentry *dentry, const char *name)$/;"	f	file:
shmem_rename	mm/shmem.c	/^static int shmem_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)$/;"	f	file:
shmem_replace_page	mm/shmem.c	/^static int shmem_replace_page(struct page **pagep, gfp_t gfp,$/;"	f	file:
shmem_reserve_inode	mm/shmem.c	/^static int shmem_reserve_inode(struct super_block *sb)$/;"	f	file:
shmem_rmdir	mm/shmem.c	/^static int shmem_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_seek_hole_data	mm/shmem.c	/^static pgoff_t shmem_seek_hole_data(struct address_space *mapping,$/;"	f	file:
shmem_set_policy	mm/shmem.c	/^static int shmem_set_policy(struct vm_area_struct *vma, struct mempolicy *mpol)$/;"	f	file:
shmem_setattr	mm/shmem.c	/^static int shmem_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f	file:
shmem_setxattr	mm/shmem.c	/^static int shmem_setxattr(struct dentry *dentry, const char *name,$/;"	f	file:
shmem_short_symlink_operations	mm/shmem.c	/^static const struct inode_operations shmem_short_symlink_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_short_symlink_operations	mm/shmem.c	/^static const struct inode_operations shmem_short_symlink_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_should_replace_page	mm/shmem.c	/^static bool shmem_should_replace_page(struct page *page, gfp_t gfp)$/;"	f	file:
shmem_show_mpol	mm/shmem.c	/^static inline void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)$/;"	f	file:
shmem_show_mpol	mm/shmem.c	/^static void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)$/;"	f	file:
shmem_show_options	mm/shmem.c	/^static int shmem_show_options(struct seq_file *seq, struct dentry *root)$/;"	f	file:
shmem_special_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_special_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_special_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_special_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_statfs	mm/shmem.c	/^static int shmem_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
shmem_swapin	mm/shmem.c	/^static inline struct page *shmem_swapin(swp_entry_t swap, gfp_t gfp,$/;"	f	file:
shmem_swapin	mm/shmem.c	/^static struct page *shmem_swapin(swp_entry_t swap, gfp_t gfp,$/;"	f	file:
shmem_symlink	mm/shmem.c	/^static int shmem_symlink(struct inode *dir, struct dentry *dentry, const char *symname)$/;"	f	file:
shmem_symlink_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_symlink_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_symlink_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_truncate_range	mm/shmem.c	/^EXPORT_SYMBOL_GPL(shmem_truncate_range);$/;"	v
shmem_truncate_range	mm/shmem.c	/^void shmem_truncate_range(struct inode *inode, loff_t lstart, loff_t lend)$/;"	f
shmem_unacct_blocks	mm/shmem.c	/^static inline void shmem_unacct_blocks(unsigned long flags, long pages)$/;"	f	file:
shmem_unacct_size	mm/shmem.c	/^static inline void shmem_unacct_size(unsigned long flags, loff_t size)$/;"	f	file:
shmem_unacct_size	mm/shmem.c	2876;"	d	file:
shmem_undo_range	mm/shmem.c	/^static void shmem_undo_range(struct inode *inode, loff_t lstart, loff_t lend,$/;"	f	file:
shmem_unlink	mm/shmem.c	/^static int shmem_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_unlock_mapping	mm/shmem.c	/^void shmem_unlock_mapping(struct address_space *mapping)$/;"	f
shmem_unuse	mm/shmem.c	/^int shmem_unuse(swp_entry_t swap, struct page *page)$/;"	f
shmem_unuse_inode	mm/shmem.c	/^static int shmem_unuse_inode(struct shmem_inode_info *info,$/;"	f	file:
shmem_vm_ops	mm/shmem.c	/^static const struct vm_operations_struct shmem_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
shmem_vm_ops	mm/shmem.c	/^static const struct vm_operations_struct shmem_vm_ops;$/;"	v	typeref:struct:vm_operations_struct	file:
shmem_vm_ops	mm/shmem.c	2872;"	d	file:
shmem_write_begin	mm/shmem.c	/^shmem_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
shmem_write_end	mm/shmem.c	/^shmem_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
shmem_writepage	mm/shmem.c	/^static int shmem_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
shmem_xattr_handlers	mm/shmem.c	/^static const struct xattr_handler *shmem_xattr_handlers[] = {$/;"	v	typeref:struct:xattr_handler	file:
shmem_xattr_validate	mm/shmem.c	/^static int shmem_xattr_validate(const char *name)$/;"	f	file:
shmem_zero_setup	mm/shmem.c	/^int shmem_zero_setup(struct vm_area_struct *vma)$/;"	f
should_alloc_retry	mm/page_alloc.c	/^should_alloc_retry(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
should_continue_reclaim	mm/vmscan.c	/^static inline bool should_continue_reclaim(struct zone *zone,$/;"	f	file:
should_fail_alloc_page	mm/page_alloc.c	/^static bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
should_fail_alloc_page	mm/page_alloc.c	/^static inline bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
should_failslab	mm/failslab.c	/^bool should_failslab(size_t size, gfp_t gfpflags, unsigned long cache_flags)$/;"	f
should_follow_link	fs/namei.c	/^static inline int should_follow_link(struct inode *inode, int follow)$/;"	f	file:
should_free	kernel/auditsc.c	/^	bool			should_free;$/;"	m	struct:audit_names	file:
should_release_lock	mm/compaction.c	/^static inline bool should_release_lock(spinlock_t *lock)$/;"	f	file:
should_remove_suid	fs/inode.c	/^EXPORT_SYMBOL(should_remove_suid);$/;"	v
should_remove_suid	fs/inode.c	/^int should_remove_suid(struct dentry *dentry)$/;"	f
should_suppress_show_mem	mm/page_alloc.c	/^static inline bool should_suppress_show_mem(void)$/;"	f	file:
show	fs/mount.h	/^	int (*show)(struct seq_file *, struct vfsmount *);$/;"	m	struct:proc_mounts
show	kernel/padata.c	/^	ssize_t (*show)(struct padata_instance *, struct attribute *, char *);$/;"	m	struct:padata_sysfs_entry	file:
show	mm/slub.c	/^	ssize_t (*show)(struct kmem_cache *s, char *buf);$/;"	m	struct:slab_attribute	file:
show_coresize	kernel/module.c	/^static ssize_t show_coresize(struct module_attribute *mattr,$/;"	f	file:
show_cpumask	kernel/padata.c	/^static ssize_t show_cpumask(struct padata_instance *pinst,$/;"	f	file:
show_free_areas	mm/page_alloc.c	/^void show_free_areas(unsigned int filter)$/;"	f
show_initsize	kernel/module.c	/^static ssize_t show_initsize(struct module_attribute *mattr,$/;"	f	file:
show_initstate	kernel/module.c	/^static ssize_t show_initstate(struct module_attribute *mattr,$/;"	f	file:
show_kprobe_addr	kernel/kprobes.c	/^static int __kprobes show_kprobe_addr(struct seq_file *pi, void *v)$/;"	f	file:
show_migration_types	mm/page_alloc.c	/^static void show_migration_types(unsigned char type)$/;"	f	file:
show_mnt_opts	fs/proc_namespace.c	/^static void show_mnt_opts(struct seq_file *m, struct vfsmount *mnt)$/;"	f	file:
show_mountinfo	fs/proc_namespace.c	/^static int show_mountinfo(struct seq_file *m, struct vfsmount *mnt)$/;"	f	file:
show_node	mm/page_alloc.c	/^static inline void show_node(struct zone *zone)$/;"	f	file:
show_numa_info	mm/vmalloc.c	/^static void show_numa_info(struct seq_file *m, struct vm_struct *v)$/;"	f	file:
show_one_rcugp	kernel/rcutree_trace.c	/^static void show_one_rcugp(struct seq_file *m, struct rcu_state *rsp)$/;"	f	file:
show_pools	mm/dmapool.c	/^show_pools(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
show_rcu_node_boost	kernel/rcutree_trace.c	/^static int show_rcu_node_boost(struct seq_file *m, void *unused)$/;"	f	file:
show_rcu_pending	kernel/rcutree_trace.c	/^static int show_rcu_pending(struct seq_file *m, void *v)$/;"	f	file:
show_rcubarrier	kernel/rcutree_trace.c	/^static int show_rcubarrier(struct seq_file *m, void *v)$/;"	f	file:
show_rcudata	kernel/rcutree_trace.c	/^static int show_rcudata(struct seq_file *m, void *v)$/;"	f	file:
show_rcuexp	kernel/rcutree_trace.c	/^static int show_rcuexp(struct seq_file *m, void *v)$/;"	f	file:
show_rcugp	kernel/rcutree_trace.c	/^static int show_rcugp(struct seq_file *m, void *v)$/;"	f	file:
show_rcuhier	kernel/rcutree_trace.c	/^static int show_rcuhier(struct seq_file *m, void *v)$/;"	f	file:
show_rcutorture	kernel/rcutree_trace.c	/^static int show_rcutorture(struct seq_file *m, void *unused)$/;"	f	file:
show_refcnt	kernel/module.c	/^static ssize_t show_refcnt(struct module_attribute *mattr,$/;"	f	file:
show_sb_opts	fs/proc_namespace.c	/^static int show_sb_opts(struct seq_file *m, struct super_block *sb)$/;"	f	file:
show_slab_objects	mm/slub.c	/^static ssize_t show_slab_objects(struct kmem_cache *s,$/;"	f	file:
show_special	kernel/auditsc.c	/^static void show_special(struct audit_context *context, int *call_panic)$/;"	f	file:
show_stat	mm/slub.c	/^static int show_stat(struct kmem_cache *s, char *buf, enum stat_item si)$/;"	f	file:
show_swap_cache_info	mm/swap_state.c	/^void show_swap_cache_info(void)$/;"	f
show_symbol	mm/slab.c	/^static void show_symbol(struct seq_file *m, unsigned long address)$/;"	f	file:
show_taint	kernel/module.c	/^static ssize_t show_taint(struct module_attribute *mattr,$/;"	f	file:
show_tiny_preempt_stats	kernel/rcutiny_plugin.h	/^static void show_tiny_preempt_stats(struct seq_file *m)$/;"	f
show_tiny_stats	kernel/rcutiny_plugin.h	/^static int show_tiny_stats(struct seq_file *m, void *unused)$/;"	f
show_tiny_stats_fops	kernel/rcutiny_plugin.h	/^static const struct file_operations show_tiny_stats_fops = {$/;"	v	typeref:struct:file_operations
show_tiny_stats_open	kernel/rcutiny_plugin.h	/^static int show_tiny_stats_open(struct inode *inode, struct file *file)$/;"	f
show_type	fs/proc_namespace.c	/^static void show_type(struct seq_file *m, struct super_block *sb)$/;"	f	file:
show_vfsmnt	fs/proc_namespace.c	/^static int show_vfsmnt(struct seq_file *m, struct vfsmount *mnt)$/;"	f	file:
show_vfsstat	fs/proc_namespace.c	/^static int show_vfsstat(struct seq_file *m, struct vfsmount *mnt)$/;"	f	file:
shrink	mm/slub.c	/^SLAB_ATTR(shrink);$/;"	v
shrink_active_list	mm/vmscan.c	/^static void shrink_active_list(unsigned long nr_to_scan,$/;"	f	file:
shrink_all_memory	mm/vmscan.c	/^unsigned long shrink_all_memory(unsigned long nr_to_reclaim)$/;"	f
shrink_dcache_for_umount	fs/dcache.c	/^void shrink_dcache_for_umount(struct super_block *sb)$/;"	f
shrink_dcache_for_umount_subtree	fs/dcache.c	/^static void shrink_dcache_for_umount_subtree(struct dentry *dentry)$/;"	f	file:
shrink_dcache_parent	fs/dcache.c	/^EXPORT_SYMBOL(shrink_dcache_parent);$/;"	v
shrink_dcache_parent	fs/dcache.c	/^void shrink_dcache_parent(struct dentry * parent)$/;"	f
shrink_dcache_sb	fs/dcache.c	/^EXPORT_SYMBOL(shrink_dcache_sb);$/;"	v
shrink_dcache_sb	fs/dcache.c	/^void shrink_dcache_sb(struct super_block *sb)$/;"	f
shrink_dentry_list	fs/dcache.c	/^static void shrink_dentry_list(struct list_head *list)$/;"	f	file:
shrink_huge_zero_page	mm/huge_memory.c	/^static int shrink_huge_zero_page(struct shrinker *shrink,$/;"	f	file:
shrink_inactive_list	mm/vmscan.c	/^shrink_inactive_list(unsigned long nr_to_scan, struct lruvec *lruvec,$/;"	f	file:
shrink_list	mm/vmscan.c	/^static unsigned long shrink_list(enum lru_list lru, unsigned long nr_to_scan,$/;"	f	file:
shrink_lruvec	mm/vmscan.c	/^static void shrink_lruvec(struct lruvec *lruvec, struct scan_control *sc)$/;"	f	file:
shrink_page_list	mm/vmscan.c	/^static unsigned long shrink_page_list(struct list_head *page_list,$/;"	f	file:
shrink_pgdat_span	mm/memory_hotplug.c	/^static void shrink_pgdat_span(struct pglist_data *pgdat,$/;"	f	file:
shrink_readahead_size_eio	mm/filemap.c	/^static void shrink_readahead_size_eio(struct file *filp,$/;"	f	file:
shrink_show	mm/slub.c	/^static ssize_t shrink_show(struct kmem_cache *s, char *buf)$/;"	f	file:
shrink_slab	mm/vmscan.c	/^unsigned long shrink_slab(struct shrink_control *shrink,$/;"	f
shrink_store	mm/slub.c	/^static ssize_t shrink_store(struct kmem_cache *s,$/;"	f	file:
shrink_submounts	fs/namespace.c	/^static void shrink_submounts(struct mount *mnt, struct list_head *umounts)$/;"	f	file:
shrink_vma	mm/nommu.c	/^static int shrink_vma(struct mm_struct *mm,$/;"	f	file:
shrink_zone	mm/vmscan.c	/^static void shrink_zone(struct zone *zone, struct scan_control *sc)$/;"	f	file:
shrink_zone_span	mm/memory_hotplug.c	/^static void shrink_zone_span(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
shrink_zones	mm/vmscan.c	/^static bool shrink_zones(struct zonelist *zonelist, struct scan_control *sc)$/;"	f	file:
shuffle_interval	kernel/rcutorture.c	/^static int shuffle_interval = 3; \/* Interval between shuffles (in sec)*\/$/;"	v	file:
shuffle_tmp_mask	kernel/rcutorture.c	/^static cpumask_var_t shuffle_tmp_mask;$/;"	v	file:
shuffler_task	kernel/rcutorture.c	/^static struct task_struct *shuffler_task;$/;"	v	typeref:struct:task_struct	file:
shutdown_secs	kernel/rcutorture.c	/^static int shutdown_secs;	\/* Shutdown time (s).  <=0 for no shutdown. *\/$/;"	v	file:
shutdown_task	kernel/rcutorture.c	/^static struct task_struct *shutdown_task;$/;"	v	typeref:struct:task_struct	file:
shutdown_time	kernel/rcutorture.c	/^static unsigned long shutdown_time;	\/* jiffies to system shutdown. *\/$/;"	v	file:
si_fromuser	kernel/signal.c	/^static inline bool si_fromuser(const struct siginfo *info)$/;"	f	file:
si_meminfo	mm/page_alloc.c	/^EXPORT_SYMBOL(si_meminfo);$/;"	v
si_meminfo	mm/page_alloc.c	/^void si_meminfo(struct sysinfo *val)$/;"	f
si_meminfo_node	mm/page_alloc.c	/^void si_meminfo_node(struct sysinfo *val, int nid)$/;"	f
si_swapinfo	mm/swapfile.c	/^void si_swapinfo(struct sysinfo *val)$/;"	f
sig_enforce	kernel/module.c	/^static bool sig_enforce = false;$/;"	v	file:
sig_enforce	kernel/module.c	/^static bool sig_enforce = true;$/;"	v	file:
sig_handler	kernel/signal.c	/^static void __user *sig_handler(struct task_struct *t, int sig)$/;"	f	file:
sig_handler_ignored	kernel/signal.c	/^static int sig_handler_ignored(void __user *handler, int sig)$/;"	f	file:
sig_ignored	kernel/signal.c	/^static int sig_ignored(struct task_struct *t, int sig, bool force)$/;"	f	file:
sig_len	kernel/module_signing.c	/^	__be32	sig_len;	\/* Length of signature data *\/$/;"	m	struct:module_signature	file:
sig_ok	kernel/module.c	/^	bool sig_ok;$/;"	m	struct:load_info	file:
sig_task_ignored	kernel/signal.c	/^static int sig_task_ignored(struct task_struct *t, int sig, bool force)$/;"	f	file:
sigev_signo	kernel/auditsc.c	/^			int			sigev_signo;$/;"	m	struct:audit_context::__anon43::__anon47	file:
sighand_cachep	kernel/fork.c	/^struct kmem_cache *sighand_cachep;$/;"	v	typeref:struct:kmem_cache
sighand_ctor	kernel/fork.c	/^static void sighand_ctor(void *data)$/;"	f	file:
sigio_perm	fs/fcntl.c	/^static inline int sigio_perm(struct task_struct *p,$/;"	f	file:
sigkill_pending	kernel/signal.c	/^static int sigkill_pending(struct task_struct *tsk)$/;"	f	file:
sigmask	fs/signalfd.c	/^	sigset_t sigmask;$/;"	m	struct:signalfd_ctx	file:
signal_cachep	kernel/fork.c	/^static struct kmem_cache *signal_cachep;$/;"	v	typeref:struct:kmem_cache	file:
signal_delivered	kernel/signal.c	/^void signal_delivered(int sig, siginfo_t *info, struct k_sigaction *ka,$/;"	f
signal_setup_done	kernel/signal.c	/^void signal_setup_done(int failed, struct ksignal *ksig, int stepping)$/;"	f
signal_wake_up_state	kernel/signal.c	/^void signal_wake_up_state(struct task_struct *t, unsigned int state)$/;"	f
signalfd_cleanup	fs/signalfd.c	/^void signalfd_cleanup(struct sighand_struct *sighand)$/;"	f
signalfd_copyinfo	fs/signalfd.c	/^static int signalfd_copyinfo(struct signalfd_siginfo __user *uinfo,$/;"	f	file:
signalfd_ctx	fs/signalfd.c	/^struct signalfd_ctx {$/;"	s	file:
signalfd_dequeue	fs/signalfd.c	/^static ssize_t signalfd_dequeue(struct signalfd_ctx *ctx, siginfo_t *info,$/;"	f	file:
signalfd_fops	fs/signalfd.c	/^static const struct file_operations signalfd_fops = {$/;"	v	typeref:struct:file_operations	file:
signalfd_poll	fs/signalfd.c	/^static unsigned int signalfd_poll(struct file *file, poll_table *wait)$/;"	f	file:
signalfd_read	fs/signalfd.c	/^static ssize_t signalfd_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
signalfd_release	fs/signalfd.c	/^static int signalfd_release(struct inode *inode, struct file *file)$/;"	f	file:
signalfd_show_fdinfo	fs/signalfd.c	/^static int signalfd_show_fdinfo(struct seq_file *m, struct file *f)$/;"	f	file:
signals_init	kernel/signal.c	/^void __init signals_init(void)$/;"	f
signer_len	kernel/module_signing.c	/^	u8	signer_len;	\/* Length of signer's name *\/$/;"	m	struct:module_signature	file:
signote	fs/binfmt_elf.c	/^	struct memelfnote signote;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
sigprocmask	kernel/signal.c	/^EXPORT_SYMBOL(sigprocmask);$/;"	v
sigprocmask	kernel/signal.c	/^int sigprocmask(int how, sigset_t *set, sigset_t *oldset)$/;"	f
sigqueue_alloc	kernel/signal.c	/^struct sigqueue *sigqueue_alloc(void)$/;"	f
sigqueue_cachep	kernel/signal.c	/^static struct kmem_cache *sigqueue_cachep;$/;"	v	typeref:struct:kmem_cache	file:
sigqueue_free	kernel/signal.c	/^void sigqueue_free(struct sigqueue *q)$/;"	f
sigset_from_compat	kernel/compat.c	/^EXPORT_SYMBOL_GPL(sigset_from_compat);$/;"	v
sigset_from_compat	kernel/compat.c	/^sigset_from_compat(sigset_t *set, const compat_sigset_t *compat)$/;"	f
sigset_to_compat	kernel/compat.c	/^sigset_to_compat(compat_sigset_t *compat, const sigset_t *set)$/;"	f
sigsuspend	kernel/signal.c	/^int sigsuspend(sigset_t *set)$/;"	f
simple_align_resource	kernel/resource.c	/^static resource_size_t simple_align_resource(void *data,$/;"	f	file:
simple_attr	fs/libfs.c	/^struct simple_attr {$/;"	s	file:
simple_attr_open	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_open);$/;"	v
simple_attr_open	fs/libfs.c	/^int simple_attr_open(struct inode *inode, struct file *file,$/;"	f
simple_attr_read	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_read);$/;"	v
simple_attr_read	fs/libfs.c	/^ssize_t simple_attr_read(struct file *file, char __user *buf,$/;"	f
simple_attr_release	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_release);$/;"	v
simple_attr_release	fs/libfs.c	/^int simple_attr_release(struct inode *inode, struct file *file)$/;"	f
simple_attr_write	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_write);$/;"	v
simple_attr_write	fs/libfs.c	/^ssize_t simple_attr_write(struct file *file, const char __user *buf,$/;"	f
simple_delete_dentry	fs/libfs.c	/^static int simple_delete_dentry(const struct dentry *dentry)$/;"	f	file:
simple_dir_inode_operations	fs/libfs.c	/^EXPORT_SYMBOL(simple_dir_inode_operations);$/;"	v
simple_dir_inode_operations	fs/libfs.c	/^const struct inode_operations simple_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations
simple_dir_operations	fs/libfs.c	/^EXPORT_SYMBOL(simple_dir_operations);$/;"	v
simple_dir_operations	fs/libfs.c	/^const struct file_operations simple_dir_operations = {$/;"	v	typeref:struct:file_operations
simple_empty	fs/libfs.c	/^EXPORT_SYMBOL(simple_empty);$/;"	v
simple_empty	fs/libfs.c	/^int simple_empty(struct dentry *dentry)$/;"	f
simple_fill_super	fs/libfs.c	/^EXPORT_SYMBOL(simple_fill_super);$/;"	v
simple_fill_super	fs/libfs.c	/^int simple_fill_super(struct super_block *s, unsigned long magic,$/;"	f
simple_getattr	fs/libfs.c	/^EXPORT_SYMBOL(simple_getattr);$/;"	v
simple_getattr	fs/libfs.c	/^int simple_getattr(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
simple_link	fs/libfs.c	/^EXPORT_SYMBOL(simple_link);$/;"	v
simple_link	fs/libfs.c	/^int simple_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)$/;"	f
simple_lookup	fs/libfs.c	/^EXPORT_SYMBOL(simple_lookup);$/;"	v
simple_lookup	fs/libfs.c	/^struct dentry *simple_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags)$/;"	f
simple_open	fs/libfs.c	/^EXPORT_SYMBOL(simple_open);$/;"	v
simple_open	fs/libfs.c	/^int simple_open(struct inode *inode, struct file *file)$/;"	f
simple_pin_fs	fs/libfs.c	/^EXPORT_SYMBOL(simple_pin_fs);$/;"	v
simple_pin_fs	fs/libfs.c	/^int simple_pin_fs(struct file_system_type *type, struct vfsmount **mount, int *count)$/;"	f
simple_positive	fs/libfs.c	/^static inline int simple_positive(struct dentry *dentry)$/;"	f	file:
simple_read_from_buffer	fs/libfs.c	/^EXPORT_SYMBOL(simple_read_from_buffer);$/;"	v
simple_read_from_buffer	fs/libfs.c	/^ssize_t simple_read_from_buffer(void __user *to, size_t count, loff_t *ppos,$/;"	f
simple_readpage	fs/libfs.c	/^EXPORT_SYMBOL(simple_readpage);$/;"	v
simple_readpage	fs/libfs.c	/^int simple_readpage(struct file *file, struct page *page)$/;"	f
simple_release_fs	fs/libfs.c	/^EXPORT_SYMBOL(simple_release_fs);$/;"	v
simple_release_fs	fs/libfs.c	/^void simple_release_fs(struct vfsmount **mount, int *count)$/;"	f
simple_rename	fs/libfs.c	/^EXPORT_SYMBOL(simple_rename);$/;"	v
simple_rename	fs/libfs.c	/^int simple_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f
simple_rmdir	fs/libfs.c	/^EXPORT_SYMBOL(simple_rmdir);$/;"	v
simple_rmdir	fs/libfs.c	/^int simple_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f
simple_setattr	fs/libfs.c	/^EXPORT_SYMBOL(simple_setattr);$/;"	v
simple_setattr	fs/libfs.c	/^int simple_setattr(struct dentry *dentry, struct iattr *iattr)$/;"	f
simple_statfs	fs/libfs.c	/^EXPORT_SYMBOL(simple_statfs);$/;"	v
simple_statfs	fs/libfs.c	/^int simple_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f
simple_super_operations	fs/libfs.c	/^static const struct super_operations simple_super_operations = {$/;"	v	typeref:struct:super_operations	file:
simple_transaction_get	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_get);$/;"	v
simple_transaction_get	fs/libfs.c	/^char *simple_transaction_get(struct file *file, const char __user *buf, size_t size)$/;"	f
simple_transaction_read	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_read);$/;"	v
simple_transaction_read	fs/libfs.c	/^ssize_t simple_transaction_read(struct file *file, char __user *buf, size_t size, loff_t *pos)$/;"	f
simple_transaction_release	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_release);$/;"	v
simple_transaction_release	fs/libfs.c	/^int simple_transaction_release(struct inode *inode, struct file *file)$/;"	f
simple_transaction_set	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_set);$/;"	v
simple_transaction_set	fs/libfs.c	/^void simple_transaction_set(struct file *file, size_t n)$/;"	f
simple_unlink	fs/libfs.c	/^EXPORT_SYMBOL(simple_unlink);$/;"	v
simple_unlink	fs/libfs.c	/^int simple_unlink(struct inode *dir, struct dentry *dentry)$/;"	f
simple_write_begin	fs/libfs.c	/^EXPORT_SYMBOL(simple_write_begin);$/;"	v
simple_write_begin	fs/libfs.c	/^int simple_write_begin(struct file *file, struct address_space *mapping,$/;"	f
simple_write_end	fs/libfs.c	/^EXPORT_SYMBOL(simple_write_end);$/;"	v
simple_write_end	fs/libfs.c	/^int simple_write_end(struct file *file, struct address_space *mapping,$/;"	f
simple_write_to_buffer	fs/libfs.c	/^EXPORT_SYMBOL(simple_write_to_buffer);$/;"	v
simple_write_to_buffer	fs/libfs.c	/^ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,$/;"	f
simple_xattr_alloc	fs/xattr.c	/^struct simple_xattr *simple_xattr_alloc(const void *value, size_t size)$/;"	f
simple_xattr_get	fs/xattr.c	/^int simple_xattr_get(struct simple_xattrs *xattrs, const char *name,$/;"	f
simple_xattr_list	fs/xattr.c	/^ssize_t simple_xattr_list(struct simple_xattrs *xattrs, char *buffer,$/;"	f
simple_xattr_list_add	fs/xattr.c	/^void simple_xattr_list_add(struct simple_xattrs *xattrs,$/;"	f
simple_xattr_remove	fs/xattr.c	/^int simple_xattr_remove(struct simple_xattrs *xattrs, const char *name)$/;"	f
simple_xattr_set	fs/xattr.c	/^int simple_xattr_set(struct simple_xattrs *xattrs, const char *name,$/;"	f
simplify_symbols	kernel/module.c	/^static int simplify_symbols(struct module *mod, const struct load_info *info)$/;"	f	file:
single	kernel/cgroup.c	/^	struct task_and_cgroup	single;$/;"	m	struct:cgroup_taskset	typeref:struct:cgroup_taskset::task_and_cgroup	file:
single	kernel/workqueue.c	/^		struct pool_workqueue			*single;$/;"	m	union:workqueue_struct::__anon66	typeref:struct:workqueue_struct::__anon66::pool_workqueue	file:
single_bit_flip	mm/debug-pagealloc.c	/^static bool single_bit_flip(unsigned char a, unsigned char b)$/;"	f	file:
single_flag_show	mm/huge_memory.c	/^static ssize_t single_flag_show(struct kobject *kobj,$/;"	f	file:
single_flag_store	mm/huge_memory.c	/^static ssize_t single_flag_store(struct kobject *kobj,$/;"	f	file:
single_next	fs/seq_file.c	/^static void *single_next(struct seq_file *p, void *v, loff_t *pos)$/;"	f	file:
single_open	fs/seq_file.c	/^EXPORT_SYMBOL(single_open);$/;"	v
single_open	fs/seq_file.c	/^int single_open(struct file *file, int (*show)(struct seq_file *, void *),$/;"	f
single_release	fs/seq_file.c	/^EXPORT_SYMBOL(single_release);$/;"	v
single_release	fs/seq_file.c	/^int single_release(struct inode *inode, struct file *file)$/;"	f
single_start	fs/seq_file.c	/^static void *single_start(struct seq_file *p, loff_t *pos)$/;"	f	file:
single_stop	fs/seq_file.c	/^static void single_stop(struct seq_file *p, void *v)$/;"	f	file:
sixty	kernel/sysctl.c	/^static int sixty = 60;$/;"	v	file:
size	fs/binfmt_elf.c	/^	size_t size;$/;"	m	struct:elf_note_info	file:
size	fs/binfmt_misc.c	/^	int size;			\/* size of magic\/mask *\/$/;"	m	struct:__anon25	file:
size	fs/compat_ioctl.c	/^	        video_size_t size;$/;"	m	union:compat_video_event::__anon26	file:
size	fs/compat_ioctl.c	/^	u32 size;$/;"	m	struct:i2c_smbus_ioctl_data32	file:
size	fs/compat_ioctl.c	/^        int32_t size;$/;"	m	struct:compat_video_still_picture	file:
size	fs/coredump.c	/^	int used, size;$/;"	m	struct:core_name	file:
size	fs/direct-io.c	/^	size_t	size;			\/* total request size (doesn't change)*\/$/;"	m	struct:dio_submit	file:
size	fs/ext3/namei.c	/^	u16 size;$/;"	m	struct:dx_map_entry	file:
size	mm/dmapool.c	/^	size_t size;$/;"	m	struct:dma_pool	file:
size	mm/kmemleak.c	/^	size_t size;			\/* memory block size *\/$/;"	m	struct:early_log	file:
size	mm/kmemleak.c	/^	size_t size;$/;"	m	struct:kmemleak_object	file:
size	mm/kmemleak.c	/^	size_t size;$/;"	m	struct:kmemleak_scan_area	file:
size	mm/memcontrol.c	/^	unsigned int size;$/;"	m	struct:mem_cgroup_threshold_ary	file:
size	mm/scm.h	/^	unsigned long size;$/;"	m	struct:__anon13
size	mm/scm.h	/^	unsigned long size;$/;"	m	struct:__anon16
size	mm/slob.c	/^	int size;$/;"	m	struct:slob_rcu	file:
size_index	mm/slub.c	/^static s8 size_index[24] = {$/;"	v	file:
size_index_elem	mm/slub.c	/^static inline int size_index_elem(size_t bytes)$/;"	f	file:
size_to_hstate	mm/hugetlb.c	/^struct hstate *size_to_hstate(unsigned long size)$/;"	f
skb	kernel/audit.c	/^	struct sk_buff       *skb;	\/* formatted skb ready to send *\/$/;"	m	struct:audit_buffer	typeref:struct:audit_buffer::sk_buff	file:
skb	kernel/audit.c	/^	struct sk_buff *skb;$/;"	m	struct:audit_reply	typeref:struct:audit_reply::sk_buff	file:
skip_free_areas_node	mm/page_alloc.c	/^bool skip_free_areas_node(unsigned int flags, int nid)$/;"	f
skip_mnt_tree	fs/namespace.c	/^static struct mount *skip_mnt_tree(struct mount *p)$/;"	f	file:
skip_spaces	lib/string.c	/^EXPORT_SYMBOL(skip_spaces);$/;"	v
skip_spaces	lib/string.c	/^char *skip_spaces(const char *str)$/;"	f
slab	fs/bio-integrity.c	/^	struct kmem_cache *slab;$/;"	m	struct:integrity_slab	typeref:struct:integrity_slab::kmem_cache	file:
slab	fs/bio.c	/^	struct kmem_cache *slab;$/;"	m	struct:bio_slab	typeref:struct:bio_slab::kmem_cache	file:
slab	mm/memory-failure.c	755;"	d	file:
slab	mm/memory-failure.c	812;"	d	file:
slab	mm/slab.c	/^struct slab {$/;"	s	file:
slab_alloc	mm/slab.c	/^slab_alloc(struct kmem_cache *cachep, gfp_t flags, unsigned long caller)$/;"	f	file:
slab_alloc	mm/slub.c	/^static __always_inline void *slab_alloc(struct kmem_cache *s,$/;"	f	file:
slab_alloc_node	mm/slab.c	/^slab_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid,$/;"	f	file:
slab_alloc_node	mm/slub.c	/^static __always_inline void *slab_alloc_node(struct kmem_cache *s,$/;"	f	file:
slab_attr_group	mm/slub.c	/^static struct attribute_group slab_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
slab_attr_show	mm/slub.c	/^static ssize_t slab_attr_show(struct kobject *kobj,$/;"	f	file:
slab_attr_store	mm/slub.c	/^static ssize_t slab_attr_store(struct kobject *kobj,$/;"	f	file:
slab_attribute	mm/slub.c	/^struct slab_attribute {$/;"	s	file:
slab_attrs	mm/slub.c	/^static struct attribute *slab_attrs[] = {$/;"	v	typeref:struct:attribute	file:
slab_bufctl	mm/slab.c	/^static inline kmem_bufctl_t *slab_bufctl(struct slab *slabp)$/;"	f	file:
slab_bug	mm/slub.c	/^static void slab_bug(struct kmem_cache *s, char *fmt, ...)$/;"	f	file:
slab_caches	mm/slab_common.c	/^LIST_HEAD(slab_caches);$/;"	v
slab_caches_mutex	mm/memcontrol.c	/^	struct mutex slab_caches_mutex;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mutex	file:
slab_cpuup_callback	mm/slub.c	/^static int __cpuinit slab_cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
slab_destroy	mm/slab.c	/^static void slab_destroy(struct kmem_cache *cachep, struct slab *slabp)$/;"	f	file:
slab_destroy_debugcheck	mm/slab.c	/^static void slab_destroy_debugcheck(struct kmem_cache *cachep, struct slab *slabp)$/;"	f	file:
slab_early_init	mm/slab.c	/^static int slab_early_init = 1;$/;"	v	file:
slab_equal_or_root	mm/slab.h	/^static inline bool slab_equal_or_root(struct kmem_cache *s,$/;"	f
slab_err	mm/slub.c	/^static void slab_err(struct kmem_cache *s, struct page *page, const char *fmt, ...)$/;"	f	file:
slab_error	mm/slab.c	807;"	d	file:
slab_fix	mm/slub.c	/^static void slab_fix(struct kmem_cache *s, char *fmt, ...)$/;"	f	file:
slab_free	mm/slub.c	/^static __always_inline void slab_free(struct kmem_cache *s,$/;"	f	file:
slab_free_hook	mm/slub.c	/^static inline void slab_free_hook(struct kmem_cache *s, void *x) {}$/;"	f	file:
slab_free_hook	mm/slub.c	/^static inline void slab_free_hook(struct kmem_cache *s, void *x)$/;"	f	file:
slab_get_obj	mm/slab.c	/^static void *slab_get_obj(struct kmem_cache *cachep, struct slab *slabp,$/;"	f	file:
slab_index	mm/slub.c	/^static inline int slab_index(void *p, struct kmem_cache *s, void *addr)$/;"	f	file:
slab_is_available	mm/slab_common.c	/^int slab_is_available(void)$/;"	f
slab_kset	mm/slub.c	/^static struct kset *slab_kset;$/;"	v	typeref:struct:kset	file:
slab_ksize	mm/slub.c	/^static inline size_t slab_ksize(const struct kmem_cache *s)$/;"	f	file:
slab_ktype	mm/slub.c	/^static struct kobj_type slab_ktype = {$/;"	v	typeref:struct:kobj_type	file:
slab_lock	mm/slub.c	/^static __always_inline void slab_lock(struct page *page)$/;"	f	file:
slab_map_pages	mm/slab.c	/^static void slab_map_pages(struct kmem_cache *cache, struct slab *slab,$/;"	f	file:
slab_max_order	mm/slab.c	/^static int slab_max_order = SLAB_MAX_ORDER_LO;$/;"	v	file:
slab_max_order_setup	mm/slab.c	/^static int __init slab_max_order_setup(char *str)$/;"	f	file:
slab_mem_going_offline_callback	mm/slub.c	/^static int slab_mem_going_offline_callback(void *arg)$/;"	f	file:
slab_mem_going_online_callback	mm/slub.c	/^static int slab_mem_going_online_callback(void *arg)$/;"	f	file:
slab_mem_offline_callback	mm/slub.c	/^static void slab_mem_offline_callback(void *arg)$/;"	f	file:
slab_memory_callback	mm/slab.c	/^static int __meminit slab_memory_callback(struct notifier_block *self,$/;"	f	file:
slab_memory_callback	mm/slub.c	/^static int slab_memory_callback(struct notifier_block *self,$/;"	f	file:
slab_mgmt_size	mm/slab.c	/^static size_t slab_mgmt_size(size_t nr_objs, size_t align)$/;"	f	file:
slab_mutex	mm/slab_common.c	/^DEFINE_MUTEX(slab_mutex);$/;"	v
slab_node	mm/mempolicy.c	/^unsigned slab_node(void)$/;"	f
slab_notifier	mm/slub.c	/^static struct notifier_block __cpuinitdata slab_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
slab_notifier	mm/slub.c	/^static struct notifier_block slab_notifier;$/;"	v	typeref:struct:notifier_block	file:
slab_order	mm/slub.c	/^static inline int slab_order(int size, int min_objects,$/;"	f	file:
slab_out_of_memory	mm/slab.c	/^slab_out_of_memory(struct kmem_cache *cachep, gfp_t gfpflags, int nodeid)$/;"	f	file:
slab_out_of_memory	mm/slub.c	/^slab_out_of_memory(struct kmem_cache *s, gfp_t gfpflags, int nid)$/;"	f	file:
slab_pad_check	mm/slub.c	/^static inline int slab_pad_check(struct kmem_cache *s, struct page *page)$/;"	f	file:
slab_pad_check	mm/slub.c	/^static int slab_pad_check(struct kmem_cache *s, struct page *page)$/;"	f	file:
slab_post_alloc_hook	mm/slub.c	/^static inline void slab_post_alloc_hook(struct kmem_cache *s, gfp_t flags, void *object)$/;"	f	file:
slab_post_alloc_hook	mm/slub.c	/^static inline void slab_post_alloc_hook(struct kmem_cache *s, gfp_t flags,$/;"	f	file:
slab_pre_alloc_hook	mm/slub.c	/^static inline int slab_pre_alloc_hook(struct kmem_cache *s, gfp_t flags)$/;"	f	file:
slab_proc_init	mm/slab.c	/^module_init(slab_proc_init);$/;"	v
slab_proc_init	mm/slab.c	/^static int __init slab_proc_init(void)$/;"	f	file:
slab_proc_init	mm/slab_common.c	/^module_init(slab_proc_init);$/;"	v
slab_proc_init	mm/slab_common.c	/^static int __init slab_proc_init(void)$/;"	f	file:
slab_put_obj	mm/slab.c	/^static void slab_put_obj(struct kmem_cache *cachep, struct slab *slabp,$/;"	f	file:
slab_rcu	mm/slab.c	/^struct slab_rcu {$/;"	s	file:
slab_ref	fs/bio.c	/^	unsigned int slab_ref;$/;"	m	struct:bio_slab	file:
slab_set_debugobj_lock_classes	mm/slab.c	/^static void slab_set_debugobj_lock_classes(struct kmem_cache *cachep)$/;"	f	file:
slab_set_debugobj_lock_classes_node	mm/slab.c	/^static void slab_set_debugobj_lock_classes_node(struct kmem_cache *cachep, int node)$/;"	f	file:
slab_set_lock_classes	mm/slab.c	/^static void slab_set_lock_classes(struct kmem_cache *cachep,$/;"	f	file:
slab_should_failslab	mm/slab.c	/^static bool slab_should_failslab(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
slab_size	fs/bio.c	/^	unsigned int slab_size;$/;"	m	struct:bio_slab	file:
slab_size	mm/slub.c	/^SLAB_ATTR_RO(slab_size);$/;"	v
slab_size_show	mm/slub.c	/^static ssize_t slab_size_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slab_stat_type	mm/slub.c	/^enum slab_stat_type {$/;"	g	file:
slab_state	mm/slab.h	/^enum slab_state {$/;"	g
slab_state	mm/slab_common.c	/^enum slab_state slab_state;$/;"	v	typeref:enum:slab_state
slab_sysfs_init	mm/slub.c	/^__initcall(slab_sysfs_init);$/;"	v
slab_sysfs_init	mm/slub.c	/^static int __init slab_sysfs_init(void)$/;"	f	file:
slab_sysfs_ops	mm/slub.c	/^static const struct sysfs_ops slab_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
slab_uevent_ops	mm/slub.c	/^static const struct kset_uevent_ops slab_uevent_ops = {$/;"	v	typeref:struct:kset_uevent_ops	file:
slab_unlock	mm/slub.c	/^static __always_inline void slab_unlock(struct page *page)$/;"	f	file:
slab_unmergeable	mm/slub.c	/^static int slab_unmergeable(struct kmem_cache *s)$/;"	f	file:
slabinfo	mm/slab.h	/^struct slabinfo {$/;"	s
slabinfo_op	mm/slab_common.c	/^static const struct seq_operations slabinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
slabinfo_open	mm/slab_common.c	/^static int slabinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
slabinfo_show_stats	mm/slab.c	/^void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *cachep)$/;"	f
slabinfo_show_stats	mm/slub.c	/^void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *s)$/;"	f
slabinfo_write	mm/slab.c	/^ssize_t slabinfo_write(struct file *file, const char __user *buffer,$/;"	f
slabinfo_write	mm/slub.c	/^ssize_t slabinfo_write(struct file *file, const char __user *buffer,$/;"	f
slabs	mm/slub.c	/^SLAB_ATTR_RO(slabs);$/;"	v
slabs_cpu_partial	mm/slub.c	/^SLAB_ATTR_RO(slabs_cpu_partial);$/;"	v
slabs_cpu_partial_show	mm/slub.c	/^static ssize_t slabs_cpu_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slabs_free	mm/slab.c	/^	struct list_head slabs_free;$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::list_head	file:
slabs_full	mm/slab.c	/^	struct list_head slabs_full;$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::list_head	file:
slabs_node	mm/slub.c	/^static inline unsigned long slabs_node(struct kmem_cache *s, int node)$/;"	f	file:
slabs_partial	mm/slab.c	/^	struct list_head slabs_partial;	\/* partial list first, better asm code *\/$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::list_head	file:
slabs_show	mm/slub.c	/^static ssize_t slabs_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slabstats_op	mm/slab.c	/^static const struct seq_operations slabstats_op = {$/;"	v	typeref:struct:seq_operations	file:
slabstats_open	mm/slab.c	/^static int slabstats_open(struct inode *inode, struct file *file)$/;"	f	file:
sleep_millisecs	mm/ksm.c	/^KSM_ATTR(sleep_millisecs);$/;"	v
sleep_millisecs_show	mm/ksm.c	/^static ssize_t sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
sleep_millisecs_store	mm/ksm.c	/^static ssize_t sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
sleep_on_buffer	fs/buffer.c	/^static int sleep_on_buffer(void *word)$/;"	f	file:
sleep_on_page	mm/filemap.c	/^static int sleep_on_page(void *word)$/;"	f	file:
sleep_on_page_killable	mm/filemap.c	/^static int sleep_on_page_killable(void *word)$/;"	f	file:
slob_alloc	mm/slob.c	/^static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)$/;"	f	file:
slob_block	mm/slob.c	/^struct slob_block {$/;"	s	file:
slob_free	mm/slob.c	/^static void slob_free(void *block, int size)$/;"	f	file:
slob_free_pages	mm/slob.c	/^static void slob_free_pages(void *b, int order)$/;"	f	file:
slob_last	mm/slob.c	/^static int slob_last(slob_t *s)$/;"	f	file:
slob_new_pages	mm/slob.c	/^static void *slob_new_pages(gfp_t gfp, int order, int node)$/;"	f	file:
slob_next	mm/slob.c	/^static slob_t *slob_next(slob_t *s)$/;"	f	file:
slob_page_alloc	mm/slob.c	/^static void *slob_page_alloc(struct page *sp, size_t size, int align)$/;"	f	file:
slob_page_free	mm/slob.c	/^static inline int slob_page_free(struct page *sp)$/;"	f	file:
slob_rcu	mm/slob.c	/^struct slob_rcu {$/;"	s	file:
slob_t	mm/slob.c	/^typedef struct slob_block slob_t;$/;"	t	typeref:struct:slob_block	file:
slob_units	mm/slob.c	/^static slobidx_t slob_units(slob_t *s)$/;"	f	file:
slobidx_t	mm/slob.c	/^typedef s16 slobidx_t;$/;"	t	file:
slobidx_t	mm/slob.c	/^typedef s32 slobidx_t;$/;"	t	file:
slot_used	kernel/kprobes.c	/^	char slot_used[];$/;"	m	struct:kprobe_insn_page	file:
slots	lib/radix-tree.c	/^	void __rcu	*slots[RADIX_TREE_MAP_SIZE];$/;"	m	struct:radix_tree_node	file:
slots_per_page	kernel/kprobes.c	/^static int slots_per_page(struct kprobe_insn_cache *c)$/;"	f	file:
slow_d_compare	fs/dcache.c	/^enum slow_d_compare {$/;"	g	file:
slow_dentry_cmp	fs/dcache.c	/^static noinline enum slow_d_compare slow_dentry_cmp($/;"	f	file:
slowpath_args	kernel/panic.c	/^struct slowpath_args {$/;"	s	file:
slub_debug	mm/slub.c	/^static int slub_debug = DEBUG_DEFAULT_FLAGS;$/;"	v	file:
slub_debug	mm/slub.c	/^static int slub_debug;$/;"	v	file:
slub_debug	mm/slub.c	1233;"	d	file:
slub_debug_slabs	mm/slub.c	/^static char *slub_debug_slabs;$/;"	v	file:
slub_max_order	mm/slub.c	/^static int slub_max_order = PAGE_ALLOC_COSTLY_ORDER;$/;"	v	file:
slub_min_objects	mm/slub.c	/^static int slub_min_objects;$/;"	v	file:
slub_min_order	mm/slub.c	/^static int slub_min_order;$/;"	v	file:
slub_nomerge	mm/slub.c	/^static int slub_nomerge;$/;"	v	file:
smp_call_function	kernel/smp.c	/^EXPORT_SYMBOL(smp_call_function);$/;"	v
smp_call_function	kernel/smp.c	/^int smp_call_function(smp_call_func_t func, void *info, int wait)$/;"	f
smp_call_function_any	kernel/smp.c	/^EXPORT_SYMBOL_GPL(smp_call_function_any);$/;"	v
smp_call_function_any	kernel/smp.c	/^int smp_call_function_any(const struct cpumask *mask,$/;"	f
smp_call_function_many	kernel/smp.c	/^EXPORT_SYMBOL(smp_call_function_many);$/;"	v
smp_call_function_many	kernel/smp.c	/^void smp_call_function_many(const struct cpumask *mask,$/;"	f
smp_call_function_single	kernel/smp.c	/^EXPORT_SYMBOL(smp_call_function_single);$/;"	v
smp_call_function_single	kernel/smp.c	/^int smp_call_function_single(int cpu, smp_call_func_t func, void *info,$/;"	f
smp_call_function_single	kernel/up.c	/^EXPORT_SYMBOL(smp_call_function_single);$/;"	v
smp_call_function_single	kernel/up.c	/^int smp_call_function_single(int cpu, void (*func) (void *info), void *info,$/;"	f
smp_init	kernel/smp.c	/^void __init smp_init(void)$/;"	f
smp_mb__after_lock	include/linux/spinlock.h	/^static inline void smp_mb__after_lock(void) { smp_mb(); }$/;"	f
smpboot_create_threads	kernel/smpboot.c	/^int smpboot_create_threads(unsigned int cpu)$/;"	f
smpboot_destroy_threads	kernel/smpboot.c	/^static void smpboot_destroy_threads(struct smp_hotplug_thread *ht)$/;"	f	file:
smpboot_park_thread	kernel/smpboot.c	/^static void smpboot_park_thread(struct smp_hotplug_thread *ht, unsigned int cpu)$/;"	f	file:
smpboot_park_threads	kernel/smpboot.c	/^void smpboot_park_threads(unsigned int cpu)$/;"	f
smpboot_register_percpu_thread	kernel/smpboot.c	/^EXPORT_SYMBOL_GPL(smpboot_register_percpu_thread);$/;"	v
smpboot_register_percpu_thread	kernel/smpboot.c	/^int smpboot_register_percpu_thread(struct smp_hotplug_thread *plug_thread)$/;"	f
smpboot_thread_data	kernel/smpboot.c	/^struct smpboot_thread_data {$/;"	s	file:
smpboot_thread_fn	kernel/smpboot.c	/^static int smpboot_thread_fn(void *data)$/;"	f	file:
smpboot_unpark_thread	kernel/smpboot.c	/^static void smpboot_unpark_thread(struct smp_hotplug_thread *ht, unsigned int cpu)$/;"	f	file:
smpboot_unpark_threads	kernel/smpboot.c	/^void smpboot_unpark_threads(unsigned int cpu)$/;"	f
smpboot_unregister_percpu_thread	kernel/smpboot.c	/^EXPORT_SYMBOL_GPL(smpboot_unregister_percpu_thread);$/;"	v
smpboot_unregister_percpu_thread	kernel/smpboot.c	/^void smpboot_unregister_percpu_thread(struct smp_hotplug_thread *plug_thread)$/;"	f
sn_cache	mm/mempolicy.c	/^static struct kmem_cache *sn_cache;$/;"	v	typeref:struct:kmem_cache	file:
snprint_time	kernel/lockdep_proc.c	/^static void snprint_time(char *buf, size_t bufsiz, s64 nr)$/;"	f	file:
sock_fprog32	fs/compat_ioctl.c	/^struct sock_fprog32 {$/;"	s	file:
sock_release_memcg	mm/memcontrol.c	/^void sock_release_memcg(struct sock *sk)$/;"	f
sock_update_memcg	mm/memcontrol.c	/^EXPORT_SYMBOL(sock_update_memcg);$/;"	v
sock_update_memcg	mm/memcontrol.c	/^void sock_update_memcg(struct sock *sk)$/;"	f
sockaddr	kernel/auditsc.c	/^	struct sockaddr_storage *sockaddr;$/;"	m	struct:audit_context	typeref:struct:audit_context::sockaddr_storage	file:
sockaddr_len	kernel/auditsc.c	/^	size_t sockaddr_len;$/;"	m	struct:audit_context	file:
socketcall	kernel/auditsc.c	/^		} socketcall;$/;"	m	union:audit_context::__anon43	typeref:struct:audit_context::__anon43::__anon44	file:
soft_limit_tree_from_page	mm/memcontrol.c	/^soft_limit_tree_from_page(struct page *page)$/;"	f	file:
soft_limit_tree_node_zone	mm/memcontrol.c	/^soft_limit_tree_node_zone(int nid, int zid)$/;"	f	file:
soft_offline_huge_page	mm/memory-failure.c	/^static int soft_offline_huge_page(struct page *page, int flags)$/;"	f	file:
soft_offline_page	mm/memory-failure.c	/^int soft_offline_page(struct page *page, int flags)$/;"	f
softirq_init	kernel/softirq.c	/^void __init softirq_init(void)$/;"	f
softirq_threads	kernel/softirq.c	/^static struct smp_hotplug_thread softirq_threads = {$/;"	v	typeref:struct:smp_hotplug_thread	file:
softirq_to_name	kernel/softirq.c	/^char *softirq_to_name[NR_SOFTIRQS] = {$/;"	v
softirq_work_list	kernel/softirq.c	/^EXPORT_PER_CPU_SYMBOL(softirq_work_list);$/;"	v
softirqs_off_events	kernel/lockdep_internals.h	/^	int	softirqs_off_events;$/;"	m	struct:lockdep_stats
softirqs_on_events	kernel/lockdep_internals.h	/^	int	softirqs_on_events;$/;"	m	struct:lockdep_stats
softlockup_panic	kernel/watchdog.c	/^unsigned int __read_mostly softlockup_panic =$/;"	v
softlockup_panic_setup	kernel/watchdog.c	/^static int __init softlockup_panic_setup(char *str)$/;"	f	file:
som_core_dump	fs/binfmt_som.c	48;"	d	file:
som_format	fs/binfmt_som.c	/^static struct linux_binfmt som_format = {$/;"	v	typeref:struct:linux_binfmt	file:
sort_main_extable	kernel/extable.c	/^void __init sort_main_extable(void)$/;"	f
sort_range	kernel/range.c	/^void sort_range(struct range *range, int nr_range)$/;"	f
sp_alloc	mm/mempolicy.c	/^static struct sp_node *sp_alloc(unsigned long start, unsigned long end,$/;"	f	file:
sp_delete	mm/mempolicy.c	/^static void sp_delete(struct shared_policy *sp, struct sp_node *n)$/;"	f	file:
sp_free	mm/mempolicy.c	/^static void sp_free(struct sp_node *n)$/;"	f	file:
sp_insert	mm/mempolicy.c	/^static void sp_insert(struct shared_policy *sp, struct sp_node *new)$/;"	f	file:
sp_lookup	mm/mempolicy.c	/^sp_lookup(struct shared_policy *sp, unsigned long start, unsigned long end)$/;"	f	file:
sp_node_init	mm/mempolicy.c	/^static void sp_node_init(struct sp_node *node, unsigned long start,$/;"	f	file:
space	fs/ext3/namei.c	/^	unsigned space;$/;"	m	struct:stats	file:
space_resv_32	fs/compat_ioctl.c	/^struct space_resv_32 {$/;"	s	file:
spare	mm/memcontrol.c	/^	struct mem_cgroup_threshold_ary *spare;$/;"	m	struct:mem_cgroup_thresholds	typeref:struct:mem_cgroup_thresholds::mem_cgroup_threshold_ary	file:
sparse_add_one_section	mm/sparse.c	/^int __meminit sparse_add_one_section(struct zone *zone, unsigned long start_pfn,$/;"	f
sparse_decode_mem_map	mm/sparse.c	/^struct page *sparse_decode_mem_map(unsigned long coded_mem_map, unsigned long pnum)$/;"	f
sparse_early_mem_map_alloc	mm/sparse.c	/^static struct page __init *sparse_early_mem_map_alloc(unsigned long pnum)$/;"	f	file:
sparse_early_mem_maps_alloc_node	mm/sparse.c	/^static void __init sparse_early_mem_maps_alloc_node(struct page **map_map,$/;"	f	file:
sparse_early_nid	mm/sparse.c	/^static inline int sparse_early_nid(struct mem_section *section)$/;"	f	file:
sparse_early_usemaps_alloc_node	mm/sparse.c	/^static void __init sparse_early_usemaps_alloc_node(unsigned long**usemap_map,$/;"	f	file:
sparse_early_usemaps_alloc_pgdat_section	mm/sparse.c	/^sparse_early_usemaps_alloc_pgdat_section(struct pglist_data *pgdat,$/;"	f	file:
sparse_encode_early_nid	mm/sparse.c	/^static inline unsigned long sparse_encode_early_nid(int nid)$/;"	f	file:
sparse_encode_mem_map	mm/sparse.c	/^static unsigned long sparse_encode_mem_map(struct page *mem_map, unsigned long pnum)$/;"	f	file:
sparse_index_alloc	mm/sparse.c	/^static struct mem_section noinline __init_refok *sparse_index_alloc(int nid)$/;"	f	file:
sparse_index_init	mm/sparse.c	/^static inline int sparse_index_init(unsigned long section_nr, int nid)$/;"	f	file:
sparse_index_init	mm/sparse.c	/^static int __meminit sparse_index_init(unsigned long section_nr, int nid)$/;"	f	file:
sparse_init	mm/sparse.c	/^void __init sparse_init(void)$/;"	f
sparse_init_one_section	mm/sparse.c	/^static int __meminit sparse_init_one_section(struct mem_section *ms,$/;"	f	file:
sparse_mem_map_populate	mm/sparse-vmemmap.c	/^struct page * __meminit sparse_mem_map_populate(unsigned long pnum, int nid)$/;"	f
sparse_mem_map_populate	mm/sparse.c	/^struct page __init *sparse_mem_map_populate(unsigned long pnum, int nid)$/;"	f
sparse_mem_maps_populate_node	mm/sparse-vmemmap.c	/^void __init sparse_mem_maps_populate_node(struct page **map_map,$/;"	f
sparse_mem_maps_populate_node	mm/sparse.c	/^void __init sparse_mem_maps_populate_node(struct page **map_map,$/;"	f
sparse_memory_present_with_active_regions	mm/page_alloc.c	/^void __init sparse_memory_present_with_active_regions(int nid)$/;"	f
sparse_remove_one_section	mm/sparse.c	/^void sparse_remove_one_section(struct zone *zone, struct mem_section *ms)$/;"	f
spawn_ksoftirqd	kernel/softirq.c	/^early_initcall(spawn_ksoftirqd);$/;"	v
spawn_ksoftirqd	kernel/softirq.c	/^static __init int spawn_ksoftirqd(void)$/;"	f	file:
spd_release_page	fs/splice.c	/^void spd_release_page(struct splice_pipe_desc *spd, unsigned int i)$/;"	f
special_mapping_close	mm/mmap.c	/^static void special_mapping_close(struct vm_area_struct *vma)$/;"	f	file:
special_mapping_fault	mm/mmap.c	/^static int special_mapping_fault(struct vm_area_struct *vma,$/;"	f	file:
special_mapping_vmops	mm/mmap.c	/^static const struct vm_operations_struct special_mapping_vmops = {$/;"	v	typeref:struct:vm_operations_struct	file:
specific_send_sig_info	kernel/signal.c	/^specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t)$/;"	f	file:
spin_can_lock	include/linux/spinlock.h	/^static inline int spin_can_lock(spinlock_t *lock)$/;"	f
spin_is_contended	include/linux/spinlock.h	/^static inline int spin_is_contended(spinlock_t *lock)$/;"	f
spin_is_locked	include/linux/spinlock.h	/^static inline int spin_is_locked(spinlock_t *lock)$/;"	f
spin_lock	include/linux/spinlock.h	/^static inline void spin_lock(spinlock_t *lock)$/;"	f
spin_lock_bh	include/linux/spinlock.h	/^static inline void spin_lock_bh(spinlock_t *lock)$/;"	f
spin_lock_init	include/linux/spinlock.h	277;"	d
spin_lock_irq	include/linux/spinlock.h	/^static inline void spin_lock_irq(spinlock_t *lock)$/;"	f
spin_lock_irqsave	include/linux/spinlock.h	313;"	d
spin_lock_irqsave_nested	include/linux/spinlock.h	318;"	d
spin_lock_mutex	kernel/mutex-debug.h	40;"	d
spin_lock_mutex	kernel/mutex.h	12;"	d
spin_lock_nest_lock	include/linux/spinlock.h	303;"	d
spin_lock_nested	include/linux/spinlock.h	298;"	d
spin_msec	kernel/panic.c	/^static void spin_msec(int msecs)$/;"	f	file:
spin_trylock	include/linux/spinlock.h	/^static inline int spin_trylock(spinlock_t *lock)$/;"	f
spin_trylock_bh	include/linux/spinlock.h	/^static inline int spin_trylock_bh(spinlock_t *lock)$/;"	f
spin_trylock_irq	include/linux/spinlock.h	/^static inline int spin_trylock_irq(spinlock_t *lock)$/;"	f
spin_trylock_irqsave	include/linux/spinlock.h	353;"	d
spin_unlock	include/linux/spinlock.h	/^static inline void spin_unlock(spinlock_t *lock)$/;"	f
spin_unlock_bh	include/linux/spinlock.h	/^static inline void spin_unlock_bh(spinlock_t *lock)$/;"	f
spin_unlock_irq	include/linux/spinlock.h	/^static inline void spin_unlock_irq(spinlock_t *lock)$/;"	f
spin_unlock_irqrestore	include/linux/spinlock.h	/^static inline void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)$/;"	f
spin_unlock_mutex	kernel/mutex-debug.h	50;"	d
spin_unlock_mutex	kernel/mutex.h	14;"	d
spin_unlock_wait	include/linux/spinlock.h	/^static inline void spin_unlock_wait(spinlock_t *lock)$/;"	f
spinlock_check	include/linux/spinlock.h	/^static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)$/;"	f
splice_direct_to_actor	fs/splice.c	/^EXPORT_SYMBOL(splice_direct_to_actor);$/;"	v
splice_direct_to_actor	fs/splice.c	/^ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,$/;"	f
splice_from_pipe	fs/splice.c	/^ssize_t splice_from_pipe(struct pipe_inode_info *pipe, struct file *out,$/;"	f
splice_from_pipe_begin	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_begin);$/;"	v
splice_from_pipe_begin	fs/splice.c	/^void splice_from_pipe_begin(struct splice_desc *sd)$/;"	f
splice_from_pipe_end	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_end);$/;"	v
splice_from_pipe_end	fs/splice.c	/^void splice_from_pipe_end(struct pipe_inode_info *pipe, struct splice_desc *sd)$/;"	f
splice_from_pipe_feed	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_feed);$/;"	v
splice_from_pipe_feed	fs/splice.c	/^int splice_from_pipe_feed(struct pipe_inode_info *pipe, struct splice_desc *sd,$/;"	f
splice_from_pipe_next	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_next);$/;"	v
splice_from_pipe_next	fs/splice.c	/^int splice_from_pipe_next(struct pipe_inode_info *pipe, struct splice_desc *sd)$/;"	f
splice_grow_spd	fs/splice.c	/^int splice_grow_spd(const struct pipe_inode_info *pipe, struct splice_pipe_desc *spd)$/;"	f
splice_pipe_to_pipe	fs/splice.c	/^static int splice_pipe_to_pipe(struct pipe_inode_info *ipipe,$/;"	f	file:
splice_shrink_spd	fs/splice.c	/^void splice_shrink_spd(struct splice_pipe_desc *spd)$/;"	f
splice_to_pipe	fs/splice.c	/^ssize_t splice_to_pipe(struct pipe_inode_info *pipe,$/;"	f
split_free_page	mm/page_alloc.c	/^int split_free_page(struct page *page)$/;"	f
split_huge_page	mm/huge_memory.c	/^int split_huge_page(struct page *page)$/;"	f
split_huge_page_address	mm/huge_memory.c	/^static void split_huge_page_address(struct mm_struct *mm,$/;"	f	file:
split_huge_page_pmd_mm	mm/huge_memory.c	/^void split_huge_page_pmd_mm(struct mm_struct *mm, unsigned long address,$/;"	f
split_page	mm/page_alloc.c	/^void split_page(struct page *page, unsigned int order)$/;"	f
split_vma	mm/mmap.c	/^int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
split_vma	mm/nommu.c	/^int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
sprint_backtrace	kernel/kallsyms.c	/^int sprint_backtrace(char *buffer, unsigned long address)$/;"	f
sprint_symbol	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(sprint_symbol);$/;"	v
sprint_symbol	kernel/kallsyms.c	/^int sprint_symbol(char *buffer, unsigned long address)$/;"	f
sprint_symbol_no_offset	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(sprint_symbol_no_offset);$/;"	v
sprint_symbol_no_offset	kernel/kallsyms.c	/^int sprint_symbol_no_offset(char *buffer, unsigned long address)$/;"	f
srcu	mm/mmu_notifier.c	/^static struct srcu_struct srcu;$/;"	v	typeref:struct:srcu_struct	file:
srcu_advance_batches	kernel/srcu.c	/^static void srcu_advance_batches(struct srcu_struct *sp, int trycount)$/;"	f	file:
srcu_barrier	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(srcu_barrier);$/;"	v
srcu_barrier	kernel/srcu.c	/^void srcu_barrier(struct srcu_struct *sp)$/;"	f
srcu_batches_completed	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(srcu_batches_completed);$/;"	v
srcu_batches_completed	kernel/srcu.c	/^long srcu_batches_completed(struct srcu_struct *sp)$/;"	f
srcu_collect_new	kernel/srcu.c	/^static void srcu_collect_new(struct srcu_struct *sp)$/;"	f	file:
srcu_ctl	kernel/rcutorture.c	/^DEFINE_STATIC_SRCU(srcu_ctl);$/;"	v
srcu_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_flip	kernel/srcu.c	/^static void srcu_flip(struct srcu_struct *sp)$/;"	f	file:
srcu_init_notifier_head	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_init_notifier_head);$/;"	v
srcu_init_notifier_head	kernel/notifier.c	/^void srcu_init_notifier_head(struct srcu_notifier_head *nh)$/;"	f
srcu_invoke_callbacks	kernel/srcu.c	/^static void srcu_invoke_callbacks(struct srcu_struct *sp)$/;"	f	file:
srcu_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_notifier_call_chain);$/;"	v
srcu_notifier_call_chain	kernel/notifier.c	/^int srcu_notifier_call_chain(struct srcu_notifier_head *nh,$/;"	f
srcu_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_notifier_chain_register);$/;"	v
srcu_notifier_chain_register	kernel/notifier.c	/^int srcu_notifier_chain_register(struct srcu_notifier_head *nh,$/;"	f
srcu_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_notifier_chain_unregister);$/;"	v
srcu_notifier_chain_unregister	kernel/notifier.c	/^int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,$/;"	f
srcu_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_raw_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_raw_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_raw_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_raw_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_read_delay	kernel/rcutorture.c	/^static void srcu_read_delay(struct rcu_random_state *rrsp)$/;"	f	file:
srcu_readers_active	kernel/srcu.c	/^static int srcu_readers_active(struct srcu_struct *sp)$/;"	f	file:
srcu_readers_active_idx	kernel/srcu.c	/^static unsigned long srcu_readers_active_idx(struct srcu_struct *sp, int idx)$/;"	f	file:
srcu_readers_active_idx_check	kernel/srcu.c	/^static bool srcu_readers_active_idx_check(struct srcu_struct *sp, int idx)$/;"	f	file:
srcu_readers_seq_idx	kernel/srcu.c	/^static unsigned long srcu_readers_seq_idx(struct srcu_struct *sp, int idx)$/;"	f	file:
srcu_reschedule	kernel/srcu.c	/^static void srcu_reschedule(struct srcu_struct *sp)$/;"	f	file:
srcu_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_torture_barrier	kernel/rcutorture.c	/^static void srcu_torture_barrier(void)$/;"	f	file:
srcu_torture_call	kernel/rcutorture.c	/^static void srcu_torture_call(struct rcu_head *head,$/;"	f	file:
srcu_torture_completed	kernel/rcutorture.c	/^static int srcu_torture_completed(void)$/;"	f	file:
srcu_torture_deferred_free	kernel/rcutorture.c	/^static void srcu_torture_deferred_free(struct rcu_torture *rp)$/;"	f	file:
srcu_torture_stats	kernel/rcutorture.c	/^static int srcu_torture_stats(char *page)$/;"	f	file:
srcu_torture_synchronize	kernel/rcutorture.c	/^static void srcu_torture_synchronize(void)$/;"	f	file:
srcu_torture_synchronize_expedited	kernel/rcutorture.c	/^static void srcu_torture_synchronize_expedited(void)$/;"	f	file:
srcversion	kernel/module.c	/^MODINFO_ATTR(srcversion);$/;"	v
stable_node	mm/ksm.c	/^struct stable_node {$/;"	s	file:
stable_node_cache	mm/ksm.c	/^static struct kmem_cache *stable_node_cache;$/;"	v	typeref:struct:kmem_cache	file:
stable_pages_required_show	mm/backing-dev.c	/^static ssize_t stable_pages_required_show(struct device *dev,$/;"	f	file:
stable_tree_append	mm/ksm.c	/^static void stable_tree_append(struct rmap_item *rmap_item,$/;"	f	file:
stable_tree_insert	mm/ksm.c	/^static struct stable_node *stable_tree_insert(struct page *kpage)$/;"	f	file:
stable_tree_search	mm/ksm.c	/^static struct page *stable_tree_search(struct page *page)$/;"	f	file:
stack	kernel/cgroup.c	/^	unsigned short stack[0]; \/* Array of Length (depth+1) *\/$/;"	m	struct:css_id	file:
stack_guard_page	mm/memory.c	/^static inline int stack_guard_page(struct vm_area_struct *vma, unsigned long addr)$/;"	f	file:
stack_trace	kernel/lockdep.c	/^static unsigned long stack_trace[MAX_STACK_TRACE_ENTRIES];$/;"	v	file:
stall_cpu	kernel/rcutorture.c	/^static int stall_cpu;		\/* CPU-stall duration (s).  0 for no stall. *\/$/;"	v	file:
stall_cpu_holdoff	kernel/rcutorture.c	/^static int stall_cpu_holdoff = 10; \/* Time to wait until stall (s).  *\/$/;"	v	file:
stall_task	kernel/rcutorture.c	/^static struct task_struct *stall_task;$/;"	v	typeref:struct:task_struct	file:
start	kernel/resource.c	/^	resource_size_t start;$/;"	m	struct:region_devres	file:
start	mm/kmemleak.c	/^	unsigned long start;$/;"	m	struct:kmemleak_scan_area	file:
start	mm/shmem.c	/^	pgoff_t start;		\/* start of range currently being fallocated *\/$/;"	m	struct:shmem_falloc	file:
start_brk	fs/binfmt_flat.c	/^		unsigned long start_brk;		\/* End of data segment *\/$/;"	m	struct:lib_info::__anon22	file:
start_code	fs/binfmt_flat.c	/^		unsigned long start_code;		\/* Start of text segment *\/$/;"	m	struct:lib_info::__anon22	file:
start_cpu_timer	mm/slab.c	/^static void __cpuinit start_cpu_timer(int cpu)$/;"	f	file:
start_cpu_timer	mm/vmstat.c	/^static void __cpuinit start_cpu_timer(int cpu)$/;"	f	file:
start_data	fs/binfmt_flat.c	/^		unsigned long start_data;		\/* Start of data segment *\/$/;"	m	struct:lib_info::__anon22	file:
start_flush_work	kernel/workqueue.c	/^static bool start_flush_work(struct work_struct *work, struct wq_barrier *barr)$/;"	f	file:
start_isolate_page_range	mm/page_isolation.c	/^int start_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
start_khugepaged	mm/huge_memory.c	/^static int start_khugepaged(void)$/;"	f	file:
start_scan_thread	mm/kmemleak.c	/^static void start_scan_thread(void)$/;"	f	file:
start_thread	fs/compat_binfmt_elf.c	117;"	d	file:
start_thread	fs/compat_binfmt_elf.c	118;"	d	file:
start_transaction	fs/ext3/inode.c	/^static handle_t *start_transaction(struct inode *inode)$/;"	f	file:
start_worker	kernel/workqueue.c	/^static void start_worker(struct worker *worker)$/;"	f	file:
start_zero_done	fs/direct-io.c	/^	unsigned start_zero_done;	\/* flag: sub-blocksize zeroing has$/;"	m	struct:dio_submit	file:
started_after	kernel/cgroup.c	/^static inline int started_after(void *p1, void *p2)$/;"	f	file:
started_after_time	kernel/cgroup.c	/^static inline int started_after_time(struct task_struct *t1,$/;"	f	file:
stat	mm/memcontrol.c	/^	struct mem_cgroup_stat_cpu __percpu *stat;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::__percpu	file:
stat	mm/slub.c	/^static inline void stat(const struct kmem_cache *s, enum stat_item si)$/;"	f	file:
stat_interval	kernel/rcutorture.c	/^static int stat_interval = 60;	\/* Interval between stats, in seconds. *\/$/;"	v	file:
state	kernel/auditsc.c	/^	enum audit_state    state, current_state;$/;"	m	struct:audit_context	typeref:enum:audit_context::audit_state	file:
state	kernel/cgroup_freezer.c	/^	unsigned int			state;$/;"	m	struct:freezer	file:
state	kernel/stop_machine.c	/^	enum stopmachine_state	state;$/;"	m	struct:stop_machine_data	typeref:enum:stop_machine_data::stopmachine_state	file:
state_name	kernel/lockdep.c	/^static inline const char *state_name(enum lock_usage_bit bit)$/;"	f	file:
state_names	kernel/lockdep.c	/^static const char *state_names[] = {$/;"	v	file:
state_rnames	kernel/lockdep.c	/^static const char *state_rnames[] = {$/;"	v	file:
state_verbose	kernel/lockdep.c	/^static inline int state_verbose(enum lock_usage_bit bit,$/;"	f	file:
state_verbose_f	kernel/lockdep.c	/^static int (*state_verbose_f[])(struct lock_class *class) = {$/;"	v	file:
statfs_by_dentry	fs/statfs.c	/^static int statfs_by_dentry(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
static_key_mod	kernel/jump_label.c	/^struct static_key_mod {$/;"	s	file:
static_key_slow_dec	kernel/jump_label.c	/^EXPORT_SYMBOL_GPL(static_key_slow_dec);$/;"	v
static_key_slow_dec	kernel/jump_label.c	/^void static_key_slow_dec(struct static_key *key)$/;"	f
static_key_slow_dec_deferred	kernel/jump_label.c	/^EXPORT_SYMBOL_GPL(static_key_slow_dec_deferred);$/;"	v
static_key_slow_dec_deferred	kernel/jump_label.c	/^void static_key_slow_dec_deferred(struct static_key_deferred *key)$/;"	f
static_key_slow_inc	kernel/jump_label.c	/^EXPORT_SYMBOL_GPL(static_key_slow_inc);$/;"	v
static_key_slow_inc	kernel/jump_label.c	/^void static_key_slow_inc(struct static_key *key)$/;"	f
static_obj	kernel/lockdep.c	/^static int static_obj(void *obj)$/;"	f	file:
stats	fs/ext3/namei.c	/^struct stats$/;"	s	file:
stats	kernel/lockdep_proc.c	/^	struct lock_class_stats stats;$/;"	m	struct:lock_stat_data	typeref:struct:lock_stat_data::lock_class_stats	file:
stats	kernel/lockdep_proc.c	/^	struct lock_stat_data stats[MAX_LOCKDEP_KEYS];$/;"	m	struct:lock_stat_seq	typeref:struct:lock_stat_seq::lock_stat_data	file:
stats	kernel/rcutorture.c	/^	int (*stats)(char *page);$/;"	m	struct:rcu_torture_ops	file:
stats_task	kernel/rcutorture.c	/^static struct task_struct *stats_task;$/;"	v	typeref:struct:task_struct	file:
status	fs/compat_ioctl.c	/^	unsigned char status;		\/* [o] scsi status *\/$/;"	m	struct:sg_io_hdr32	file:
status	kernel/smpboot.c	/^	unsigned int			status;$/;"	m	struct:smpboot_thread_data	file:
status	mm/migrate.c	/^	int status;$/;"	m	struct:page_to_node	file:
std_worker_pool_pri	kernel/workqueue.c	/^static int std_worker_pool_pri(struct worker_pool *pool)$/;"	f	file:
std_worker_pools	kernel/workqueue.c	/^static struct worker_pool *std_worker_pools(int cpu)$/;"	f	file:
stop_cpus	kernel/stop_machine.c	/^int stop_cpus(const struct cpumask *cpumask, cpu_stop_fn_t fn, void *arg)$/;"	f
stop_machine	kernel/stop_machine.c	/^EXPORT_SYMBOL_GPL(stop_machine);$/;"	v
stop_machine	kernel/stop_machine.c	/^int stop_machine(int (*fn)(void *), void *data, const struct cpumask *cpus)$/;"	f
stop_machine_cpu_stop	kernel/stop_machine.c	/^static int stop_machine_cpu_stop(void *data)$/;"	f	file:
stop_machine_data	kernel/stop_machine.c	/^struct stop_machine_data {$/;"	s	file:
stop_machine_from_inactive_cpu	kernel/stop_machine.c	/^int stop_machine_from_inactive_cpu(int (*fn)(void *), void *data,$/;"	f
stop_machine_initialized	kernel/stop_machine.c	/^static bool stop_machine_initialized = false;$/;"	v	file:
stop_one_cpu	kernel/stop_machine.c	/^int stop_one_cpu(unsigned int cpu, cpu_stop_fn_t fn, void *arg)$/;"	f
stop_one_cpu_nowait	kernel/stop_machine.c	/^void stop_one_cpu_nowait(unsigned int cpu, cpu_stop_fn_t fn, void *arg,$/;"	f
stop_process_timers	kernel/posix-cpu-timers.c	/^static void stop_process_timers(struct signal_struct *sig)$/;"	f	file:
stop_scan_thread	mm/kmemleak.c	/^static void stop_scan_thread(void)$/;"	f	file:
stopmachine_state	kernel/stop_machine.c	/^enum stopmachine_state {$/;"	g	file:
stopref	kernel/module.c	/^struct stopref$/;"	s	file:
store	kernel/padata.c	/^	ssize_t (*store)(struct padata_instance *, struct attribute *,$/;"	m	struct:padata_sysfs_entry	file:
store	mm/slub.c	/^	ssize_t (*store)(struct kmem_cache *s, const char *x, size_t count);$/;"	m	struct:slab_attribute	file:
store_cpumask	kernel/padata.c	/^static ssize_t store_cpumask(struct padata_instance *pinst,$/;"	f	file:
store_stackinfo	mm/slab.c	/^static void store_stackinfo(struct kmem_cache *cachep, unsigned long *addr,$/;"	f	file:
store_stacktrace	kernel/latencytop.c	/^static inline void store_stacktrace(struct task_struct *tsk,$/;"	f	file:
store_uevent	kernel/module.c	/^static ssize_t store_uevent(struct module_attribute *mattr,$/;"	f	file:
store_user	mm/slub.c	/^SLAB_ATTR(store_user);$/;"	v
store_user_show	mm/slub.c	/^static ssize_t store_user_show(struct kmem_cache *s, char *buf)$/;"	f	file:
store_user_store	mm/slub.c	/^static ssize_t store_user_store(struct kmem_cache *s,$/;"	f	file:
str	fs/proc_namespace.c	/^	const char *str;$/;"	m	struct:proc_fs_info	file:
str	kernel/module.c	/^		unsigned int sym, str, mod, vers, info, pcpu;$/;"	m	struct:load_info::__anon60	file:
str2hashbuf_signed	fs/ext3/hash.c	/^static void str2hashbuf_signed(const char *msg, int len, __u32 *buf, int num)$/;"	f	file:
str2hashbuf_unsigned	fs/ext3/hash.c	/^static void str2hashbuf_unsigned(const char *msg, int len, __u32 *buf, int num)$/;"	f	file:
strcasecmp	lib/string.c	/^EXPORT_SYMBOL(strcasecmp);$/;"	v
strcasecmp	lib/string.c	/^int strcasecmp(const char *s1, const char *s2)$/;"	f
strcat	lib/string.c	/^EXPORT_SYMBOL(strcat);$/;"	v
strcat	lib/string.c	/^char *strcat(char *dest, const char *src)$/;"	f
strcat	lib/string.c	169;"	d	file:
strchr	lib/string.c	/^EXPORT_SYMBOL(strchr);$/;"	v
strchr	lib/string.c	/^char *strchr(const char *s, int c)$/;"	f
strcmp	lib/string.c	/^EXPORT_SYMBOL(strcmp);$/;"	v
strcmp	lib/string.c	/^int strcmp(const char *cs, const char *ct)$/;"	f
strcmp	lib/string.c	245;"	d	file:
strcmp_prefix	fs/xattr.c	/^strcmp_prefix(const char *a, const char *a_prefix)$/;"	f	file:
strcpy	lib/string.c	/^EXPORT_SYMBOL(strcpy);$/;"	v
strcpy	lib/string.c	/^char *strcpy(char *dest, const char *src)$/;"	f
strcpy	lib/string.c	96;"	d	file:
strcspn	lib/string.c	/^EXPORT_SYMBOL(strcspn);$/;"	v
strcspn	lib/string.c	/^size_t strcspn(const char *s, const char *reject)$/;"	f
strict_iomem	kernel/resource.c	/^static int __init strict_iomem(char *str)$/;"	f	file:
strict_iomem_checks	kernel/resource.c	/^static int strict_iomem_checks = 1;$/;"	v	file:
strict_iomem_checks	kernel/resource.c	/^static int strict_iomem_checks;$/;"	v	file:
strim	lib/string.c	/^EXPORT_SYMBOL(strim);$/;"	v
strim	lib/string.c	/^char *strim(char *s)$/;"	f
strlcat	lib/string.c	/^EXPORT_SYMBOL(strlcat);$/;"	v
strlcat	lib/string.c	/^size_t strlcat(char *dest, const char *src, size_t count)$/;"	f
strlcpy	lib/string.c	/^EXPORT_SYMBOL(strlcpy);$/;"	v
strlcpy	lib/string.c	/^size_t strlcpy(char *dest, const char *src, size_t size)$/;"	f
strlen	lib/string.c	/^EXPORT_SYMBOL(strlen);$/;"	v
strlen	lib/string.c	/^size_t strlen(const char *s)$/;"	f
strncasecmp	lib/string.c	/^EXPORT_SYMBOL(strncasecmp);$/;"	v
strncasecmp	lib/string.c	/^int strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f
strncat	lib/string.c	/^EXPORT_SYMBOL(strncat);$/;"	v
strncat	lib/string.c	/^char *strncat(char *dest, const char *src, size_t count)$/;"	f
strnchr	lib/string.c	/^EXPORT_SYMBOL(strnchr);$/;"	v
strnchr	lib/string.c	/^char *strnchr(const char *s, size_t count, int c)$/;"	f
strncmp	lib/string.c	/^EXPORT_SYMBOL(strncmp);$/;"	v
strncmp	lib/string.c	/^int strncmp(const char *cs, const char *ct, size_t count)$/;"	f
strncpy	lib/string.c	/^EXPORT_SYMBOL(strncpy);$/;"	v
strncpy	lib/string.c	/^char *strncpy(char *dest, const char *src, size_t count)$/;"	f
strndup_user	mm/util.c	/^EXPORT_SYMBOL(strndup_user);$/;"	v
strndup_user	mm/util.c	/^char *strndup_user(const char __user *s, long n)$/;"	f
strnicmp	lib/string.c	/^EXPORT_SYMBOL(strnicmp);$/;"	v
strnicmp	lib/string.c	/^int strnicmp(const char *s1, const char *s2, size_t len)$/;"	f
strnlen	lib/string.c	/^EXPORT_SYMBOL(strnlen);$/;"	v
strnlen	lib/string.c	/^size_t strnlen(const char *s, size_t count)$/;"	f
strnstr	lib/string.c	/^EXPORT_SYMBOL(strnstr);$/;"	v
strnstr	lib/string.c	/^char *strnstr(const char *s1, const char *s2, size_t len)$/;"	f
stroffs	kernel/module.c	/^	unsigned long symoffs, stroffs;$/;"	m	struct:load_info	file:
strong_try_module_get	kernel/module.c	/^static inline int strong_try_module_get(struct module *mod)$/;"	f	file:
strpbrk	lib/string.c	/^EXPORT_SYMBOL(strpbrk);$/;"	v
strpbrk	lib/string.c	/^char *strpbrk(const char *cs, const char *ct)$/;"	f
strrchr	lib/string.c	/^EXPORT_SYMBOL(strrchr);$/;"	v
strrchr	lib/string.c	/^char *strrchr(const char *s, int c)$/;"	f
strsep	lib/string.c	/^EXPORT_SYMBOL(strsep);$/;"	v
strsep	lib/string.c	/^char *strsep(char **s, const char *ct)$/;"	f
strspn	lib/string.c	/^EXPORT_SYMBOL(strspn);$/;"	v
strspn	lib/string.c	/^size_t strspn(const char *s, const char *accept)$/;"	f
strstr	lib/string.c	/^EXPORT_SYMBOL(strstr);$/;"	v
strstr	lib/string.c	/^char *strstr(const char *s1, const char *s2)$/;"	f
strtab	kernel/module.c	/^	char *secstrings, *strtab;$/;"	m	struct:load_info	file:
strtobool	lib/string.c	/^EXPORT_SYMBOL(strtobool);$/;"	v
strtobool	lib/string.c	/^int strtobool(const char *s, bool *res)$/;"	f
stub_timer	kernel/timer.c	/^static void stub_timer(unsigned long data)$/;"	f	file:
stutter	kernel/rcutorture.c	/^static int stutter = 5;		\/* Start\/stop testing interval (in sec) *\/$/;"	v	file:
stutter_pause_test	kernel/rcutorture.c	/^static int stutter_pause_test;$/;"	v	file:
stutter_task	kernel/rcutorture.c	/^static struct task_struct *stutter_task;$/;"	v	typeref:struct:task_struct	file:
subbuf_actor_t	kernel/relay.c	/^typedef int (*subbuf_actor_t) (size_t read_start,$/;"	t	file:
subbuf_read_actor	kernel/relay.c	/^static int subbuf_read_actor(size_t read_start,$/;"	f	file:
subbuf_splice_actor	kernel/relay.c	/^static ssize_t subbuf_splice_actor(struct file *in,$/;"	f	file:
subbuf_start_default_callback	kernel/relay.c	/^static int subbuf_start_default_callback (struct rchan_buf *buf,$/;"	f	file:
submit_bh	fs/buffer.c	/^EXPORT_SYMBOL(submit_bh);$/;"	v
submit_bh	fs/buffer.c	/^int submit_bh(int rw, struct buffer_head * bh)$/;"	f
submit_io	fs/direct-io.c	/^	dio_submit_t *submit_io;	\/* IO submition function *\/$/;"	m	struct:dio_submit	file:
submit_page_section	fs/direct-io.c	/^submit_page_section(struct dio *dio, struct dio_submit *sdio, struct page *page,$/;"	f	file:
subpool_inode	mm/hugetlb.c	/^static inline struct hugepage_subpool *subpool_inode(struct inode *inode)$/;"	f	file:
subpool_vma	mm/hugetlb.c	/^static inline struct hugepage_subpool *subpool_vma(struct vm_area_struct *vma)$/;"	f	file:
subsys	kernel/cgroup.c	/^static struct cgroup_subsys *subsys[CGROUP_SUBSYS_COUNT] = {$/;"	v	typeref:struct:cgroup_subsys	file:
subsys_list	kernel/cgroup.c	/^	struct list_head subsys_list;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::list_head	file:
subsys_mask	kernel/cgroup.c	/^	unsigned long subsys_mask;$/;"	m	struct:cgroup_sb_opts	file:
subsys_mask	kernel/cgroup.c	/^	unsigned long subsys_mask;$/;"	m	struct:cgroupfs_root	file:
subtract_range	kernel/range.c	/^void subtract_range(struct range *range, int az, u64 start, u64 end)$/;"	f
suffix_tbl	kernel/kexec.c	/^static __initdata char *suffix_tbl[] = {$/;"	v	file:
suid	kernel/auditsc.c	/^	kuid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
suid_dumpable	fs/exec.c	/^int suid_dumpable = 0;$/;"	v
suitable_migration_target	mm/compaction.c	/^static bool suitable_migration_target(struct page *page)$/;"	f	file:
sum_offline	kernel/rcutorture.c	/^static unsigned long sum_offline;$/;"	v	file:
sum_online	kernel/rcutorture.c	/^static unsigned long sum_online;$/;"	v	file:
sum_time	mm/slub.c	/^	long long sum_time;$/;"	m	struct:location	file:
sum_vm_events	mm/vmstat.c	/^static void sum_vm_events(unsigned long *ret)$/;"	f	file:
super_blocks	fs/super.c	/^LIST_HEAD(super_blocks);$/;"	v
surplus_hugepages	mm/hugetlb.c	/^HSTATE_ATTR_RO(surplus_hugepages);$/;"	v
surplus_hugepages_show	mm/hugetlb.c	/^static ssize_t surplus_hugepages_show(struct kobject *kobj,$/;"	f	file:
suspend_console	kernel/printk.c	/^void suspend_console(void)$/;"	f
swap_aops	mm/swap_state.c	/^static const struct address_space_operations swap_aops = {$/;"	v	typeref:struct:address_space_operations	file:
swap_backing_dev_info	mm/swap_state.c	/^static struct backing_dev_info swap_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info	file:
swap_cache_info	mm/swap_state.c	/^} swap_cache_info;$/;"	v	typeref:struct:__anon20	file:
swap_cgroup	mm/page_cgroup.c	/^struct swap_cgroup {$/;"	s	file:
swap_cgroup_cmpxchg	mm/page_cgroup.c	/^unsigned short swap_cgroup_cmpxchg(swp_entry_t ent,$/;"	f
swap_cgroup_ctrl	mm/page_cgroup.c	/^static struct swap_cgroup_ctrl swap_cgroup_ctrl[MAX_SWAPFILES];$/;"	v	typeref:struct:swap_cgroup_ctrl	file:
swap_cgroup_ctrl	mm/page_cgroup.c	/^struct swap_cgroup_ctrl {$/;"	s	file:
swap_cgroup_prepare	mm/page_cgroup.c	/^static int swap_cgroup_prepare(int type)$/;"	f	file:
swap_cgroup_record	mm/page_cgroup.c	/^unsigned short swap_cgroup_record(swp_entry_t ent, unsigned short id)$/;"	f
swap_cgroup_swapoff	mm/page_cgroup.c	/^void swap_cgroup_swapoff(int type)$/;"	f
swap_cgroup_swapon	mm/page_cgroup.c	/^int swap_cgroup_swapon(int type, unsigned long max_pages)$/;"	f
swap_count	mm/swapfile.c	/^static inline unsigned char swap_count(unsigned char ent)$/;"	f	file:
swap_count_continued	mm/swapfile.c	/^static bool swap_count_continued(struct swap_info_struct *si,$/;"	f	file:
swap_duplicate	mm/swapfile.c	/^int swap_duplicate(swp_entry_t entry)$/;"	f
swap_entry_free	mm/swapfile.c	/^static unsigned char swap_entry_free(struct swap_info_struct *p,$/;"	f	file:
swap_free	mm/swapfile.c	/^void swap_free(swp_entry_t entry)$/;"	f
swap_info	mm/swapfile.c	/^struct swap_info_struct *swap_info[MAX_SWAPFILES];$/;"	v	typeref:struct:swap_info_struct
swap_info_get	mm/swapfile.c	/^static struct swap_info_struct *swap_info_get(swp_entry_t entry)$/;"	f	file:
swap_list	mm/swapfile.c	/^struct swap_list_t swap_list = {-1, -1};$/;"	v	typeref:struct:swap_list_t
swap_lock	mm/swapfile.c	/^DEFINE_SPINLOCK(swap_lock);$/;"	v
swap_next	mm/swapfile.c	/^static void *swap_next(struct seq_file *swap, void *v, loff_t *pos)$/;"	f	file:
swap_readpage	mm/page_io.c	/^int swap_readpage(struct page *page)$/;"	f
swap_set_page_dirty	mm/page_io.c	/^int swap_set_page_dirty(struct page *page)$/;"	f
swap_setup	mm/swap.c	/^void __init swap_setup(void)$/;"	f
swap_shmem_alloc	mm/swapfile.c	/^void swap_shmem_alloc(swp_entry_t entry)$/;"	f
swap_show	mm/swapfile.c	/^static int swap_show(struct seq_file *swap, void *v)$/;"	f	file:
swap_start	mm/swapfile.c	/^static void *swap_start(struct seq_file *swap, loff_t *pos)$/;"	f	file:
swap_stop	mm/swapfile.c	/^static void swap_stop(struct seq_file *swap, void *v)$/;"	f	file:
swap_type_of	mm/swapfile.c	/^int swap_type_of(dev_t device, sector_t offset, struct block_device **bdev_p)$/;"	f
swap_writepage	mm/page_io.c	/^int swap_writepage(struct page *page, struct writeback_control *wbc)$/;"	f
swapbacked	mm/memory-failure.c	751;"	d	file:
swapbacked	mm/memory-failure.c	808;"	d	file:
swapcache_free	mm/swapfile.c	/^void swapcache_free(swp_entry_t entry, struct page *page)$/;"	f
swapcache_prepare	mm/swapfile.c	/^int swapcache_prepare(swp_entry_t entry)$/;"	f
swapdev_block	mm/swapfile.c	/^sector_t swapdev_block(int type, pgoff_t offset)$/;"	f
swapin_readahead	mm/swap_state.c	/^struct page *swapin_readahead(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
swapin_walk_pmd_entry	mm/madvise.c	/^static int swapin_walk_pmd_entry(pmd_t *pmd, unsigned long start,$/;"	f	file:
swapper_spaces	mm/swap_state.c	/^struct address_space swapper_spaces[MAX_SWAPFILES] = {$/;"	v	typeref:struct:address_space
swappiness	mm/memcontrol.c	/^	int	swappiness;$/;"	m	struct:mem_cgroup	file:
swaps_op	mm/swapfile.c	/^static const struct seq_operations swaps_op = {$/;"	v	typeref:struct:seq_operations	file:
swaps_open	mm/swapfile.c	/^static int swaps_open(struct inode *inode, struct file *file)$/;"	f	file:
swaps_poll	mm/swapfile.c	/^static unsigned swaps_poll(struct file *file, poll_table *wait)$/;"	f	file:
switch_hrtimer_base	kernel/hrtimer.c	/^switch_hrtimer_base(struct hrtimer *timer, struct hrtimer_clock_base *base,$/;"	f	file:
switch_hrtimer_base	kernel/hrtimer.c	253;"	d	file:
switch_names	fs/dcache.c	/^static void switch_names(struct dentry *dentry, struct dentry *target)$/;"	f	file:
switch_task_namespaces	kernel/nsproxy.c	/^void switch_task_namespaces(struct task_struct *p, struct nsproxy *new)$/;"	f
sym	kernel/module.c	/^		unsigned int sym, str, mod, vers, info, pcpu;$/;"	m	struct:load_info::__anon60	file:
sym	kernel/module.c	/^	const struct kernel_symbol *sym;$/;"	m	struct:find_symbol_arg	typeref:struct:find_symbol_arg::kernel_symbol	file:
symbol_put_addr	kernel/module.c	/^EXPORT_SYMBOL_GPL(symbol_put_addr);$/;"	v
symbol_put_addr	kernel/module.c	/^void symbol_put_addr(void *addr)$/;"	f
symoffs	kernel/module.c	/^	unsigned long symoffs, stroffs;$/;"	m	struct:load_info	file:
symversion	kernel/module.c	273;"	d	file:
symversion	kernel/module.c	275;"	d	file:
sync	kernel/rcutorture.c	/^	void (*sync)(void);$/;"	m	struct:rcu_torture_ops	file:
sync	mm/internal.h	/^	bool sync;			\/* Synchronous migration *\/$/;"	m	struct:compact_control
sync_blockdev	fs/block_dev.c	/^EXPORT_SYMBOL(sync_blockdev);$/;"	v
sync_blockdev	fs/block_dev.c	/^int sync_blockdev(struct block_device *bdev)$/;"	f
sync_dirty_buffer	fs/buffer.c	/^EXPORT_SYMBOL(sync_dirty_buffer);$/;"	v
sync_dirty_buffer	fs/buffer.c	/^int sync_dirty_buffer(struct buffer_head *bh)$/;"	f
sync_file_range	fs/sync.c	/^SYSCALL_DEFINE(sync_file_range)(int fd, loff_t offset, loff_t nbytes,$/;"	f
sync_file_range2	fs/sync.c	/^SYSCALL_DEFINE(sync_file_range2)(int fd, unsigned int flags,$/;"	f
sync_filesystem	fs/sync.c	/^EXPORT_SYMBOL_GPL(sync_filesystem);$/;"	v
sync_filesystem	fs/sync.c	/^int sync_filesystem(struct super_block *sb)$/;"	f
sync_fs_one_sb	fs/sync.c	/^static void sync_fs_one_sb(struct super_block *sb, void *arg)$/;"	f	file:
sync_inode	fs/fs-writeback.c	/^EXPORT_SYMBOL(sync_inode);$/;"	v
sync_inode	fs/fs-writeback.c	/^int sync_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f
sync_inode_metadata	fs/fs-writeback.c	/^EXPORT_SYMBOL(sync_inode_metadata);$/;"	v
sync_inode_metadata	fs/fs-writeback.c	/^int sync_inode_metadata(struct inode *inode, int wait)$/;"	f
sync_inodes_one_sb	fs/sync.c	/^static void sync_inodes_one_sb(struct super_block *sb, void *arg)$/;"	f	file:
sync_inodes_sb	fs/fs-writeback.c	/^EXPORT_SYMBOL(sync_inodes_sb);$/;"	v
sync_inodes_sb	fs/fs-writeback.c	/^void sync_inodes_sb(struct super_block *sb)$/;"	f
sync_mapping_buffers	fs/buffer.c	/^EXPORT_SYMBOL(sync_mapping_buffers);$/;"	v
sync_mapping_buffers	fs/buffer.c	/^int sync_mapping_buffers(struct address_space *mapping)$/;"	f
sync_mm_rss	mm/memory.c	/^void sync_mm_rss(struct mm_struct *mm)$/;"	f
sync_mode	fs/fs-writeback.c	/^	enum writeback_sync_modes sync_mode;$/;"	m	struct:wb_writeback_work	typeref:enum:wb_writeback_work::writeback_sync_modes	file:
sync_rcu_preempt_exp_count	kernel/rcutiny_plugin.h	/^static unsigned long sync_rcu_preempt_exp_count;$/;"	v
sync_rcu_preempt_exp_count	kernel/rcutree_plugin.h	/^static unsigned long sync_rcu_preempt_exp_count;$/;"	v
sync_rcu_preempt_exp_done	kernel/rcutree_plugin.h	/^static int sync_rcu_preempt_exp_done(struct rcu_node *rnp)$/;"	f
sync_rcu_preempt_exp_init	kernel/rcutree_plugin.h	/^sync_rcu_preempt_exp_init(struct rcu_state *rsp, struct rcu_node *rnp)$/;"	f
synchronize_rcu	kernel/rcutiny_plugin.h	/^EXPORT_SYMBOL_GPL(synchronize_rcu);$/;"	v
synchronize_rcu	kernel/rcutiny_plugin.h	/^void synchronize_rcu(void)$/;"	f
synchronize_rcu	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(synchronize_rcu);$/;"	v
synchronize_rcu	kernel/rcutree_plugin.h	/^void synchronize_rcu(void)$/;"	f
synchronize_rcu_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(synchronize_rcu_bh);$/;"	v
synchronize_rcu_bh	kernel/rcutree.c	/^void synchronize_rcu_bh(void)$/;"	f
synchronize_rcu_expedited	kernel/rcutiny_plugin.h	/^EXPORT_SYMBOL_GPL(synchronize_rcu_expedited);$/;"	v
synchronize_rcu_expedited	kernel/rcutiny_plugin.h	/^void synchronize_rcu_expedited(void)$/;"	f
synchronize_rcu_expedited	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(synchronize_rcu_expedited);$/;"	v
synchronize_rcu_expedited	kernel/rcutree_plugin.h	/^void synchronize_rcu_expedited(void)$/;"	f
synchronize_sched	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(synchronize_sched);$/;"	v
synchronize_sched	kernel/rcutiny.c	/^void synchronize_sched(void)$/;"	f
synchronize_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(synchronize_sched);$/;"	v
synchronize_sched	kernel/rcutree.c	/^void synchronize_sched(void)$/;"	f
synchronize_sched_expedited	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(synchronize_sched_expedited);$/;"	v
synchronize_sched_expedited	kernel/rcutree.c	/^void synchronize_sched_expedited(void)$/;"	f
synchronize_sched_expedited_cpu_stop	kernel/rcutree.c	/^static int synchronize_sched_expedited_cpu_stop(void *data)$/;"	f	file:
synchronize_srcu	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(synchronize_srcu);$/;"	v
synchronize_srcu	kernel/srcu.c	/^void synchronize_srcu(struct srcu_struct *sp)$/;"	f
synchronize_srcu_expedited	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(synchronize_srcu_expedited);$/;"	v
synchronize_srcu_expedited	kernel/srcu.c	/^void synchronize_srcu_expedited(struct srcu_struct *sp)$/;"	f
sys32_ipc	kernel/sys_ni.c	/^cond_syscall(sys32_ipc);$/;"	v
sys32_quotactl	kernel/sys_ni.c	/^cond_syscall(sys32_quotactl);$/;"	v
sys_accept	kernel/sys_ni.c	/^cond_syscall(sys_accept);$/;"	v
sys_accept4	kernel/sys_ni.c	/^cond_syscall(sys_accept4);$/;"	v
sys_acct	kernel/sys_ni.c	/^cond_syscall(sys_acct);$/;"	v
sys_add_key	kernel/sys_ni.c	/^cond_syscall(sys_add_key);$/;"	v
sys_bdflush	kernel/sys_ni.c	/^cond_syscall(sys_bdflush);$/;"	v
sys_bind	kernel/sys_ni.c	/^cond_syscall(sys_bind);$/;"	v
sys_chown16	kernel/sys_ni.c	/^cond_syscall(sys_chown16);$/;"	v
sys_close	fs/open.c	/^EXPORT_SYMBOL(sys_close);$/;"	v
sys_connect	kernel/sys_ni.c	/^cond_syscall(sys_connect);$/;"	v
sys_delete_module	kernel/sys_ni.c	/^cond_syscall(sys_delete_module);$/;"	v
sys_epoll_create	kernel/sys_ni.c	/^cond_syscall(sys_epoll_create);$/;"	v
sys_epoll_create1	kernel/sys_ni.c	/^cond_syscall(sys_epoll_create1);$/;"	v
sys_epoll_ctl	kernel/sys_ni.c	/^cond_syscall(sys_epoll_ctl);$/;"	v
sys_epoll_pwait	kernel/sys_ni.c	/^cond_syscall(sys_epoll_pwait);$/;"	v
sys_epoll_wait	kernel/sys_ni.c	/^cond_syscall(sys_epoll_wait);$/;"	v
sys_eventfd	kernel/sys_ni.c	/^cond_syscall(sys_eventfd);$/;"	v
sys_eventfd2	kernel/sys_ni.c	/^cond_syscall(sys_eventfd2);$/;"	v
sys_fanotify_init	kernel/sys_ni.c	/^cond_syscall(sys_fanotify_init);$/;"	v
sys_fanotify_mark	kernel/sys_ni.c	/^cond_syscall(sys_fanotify_mark);$/;"	v
sys_fchown16	kernel/sys_ni.c	/^cond_syscall(sys_fchown16);$/;"	v
sys_finit_module	kernel/sys_ni.c	/^cond_syscall(sys_finit_module);$/;"	v
sys_flock	kernel/sys_ni.c	/^cond_syscall(sys_flock);$/;"	v
sys_futex	kernel/sys_ni.c	/^cond_syscall(sys_futex);$/;"	v
sys_get_mempolicy	kernel/sys_ni.c	/^cond_syscall(sys_get_mempolicy);$/;"	v
sys_get_robust_list	kernel/sys_ni.c	/^cond_syscall(sys_get_robust_list);$/;"	v
sys_getegid16	kernel/sys_ni.c	/^cond_syscall(sys_getegid16);$/;"	v
sys_geteuid16	kernel/sys_ni.c	/^cond_syscall(sys_geteuid16);$/;"	v
sys_getgid16	kernel/sys_ni.c	/^cond_syscall(sys_getgid16);$/;"	v
sys_getgroups16	kernel/sys_ni.c	/^cond_syscall(sys_getgroups16);$/;"	v
sys_getpeername	kernel/sys_ni.c	/^cond_syscall(sys_getpeername);$/;"	v
sys_getresgid16	kernel/sys_ni.c	/^cond_syscall(sys_getresgid16);$/;"	v
sys_getresuid16	kernel/sys_ni.c	/^cond_syscall(sys_getresuid16);$/;"	v
sys_getsockname	kernel/sys_ni.c	/^cond_syscall(sys_getsockname);$/;"	v
sys_getsockopt	kernel/sys_ni.c	/^cond_syscall(sys_getsockopt);$/;"	v
sys_getuid16	kernel/sys_ni.c	/^cond_syscall(sys_getuid16);$/;"	v
sys_init_module	kernel/sys_ni.c	/^cond_syscall(sys_init_module);$/;"	v
sys_inotify_add_watch	kernel/sys_ni.c	/^cond_syscall(sys_inotify_add_watch);$/;"	v
sys_inotify_init	kernel/sys_ni.c	/^cond_syscall(sys_inotify_init);$/;"	v
sys_inotify_init1	kernel/sys_ni.c	/^cond_syscall(sys_inotify_init1);$/;"	v
sys_inotify_rm_watch	kernel/sys_ni.c	/^cond_syscall(sys_inotify_rm_watch);$/;"	v
sys_io_cancel	kernel/sys_ni.c	/^cond_syscall(sys_io_cancel);$/;"	v
sys_io_destroy	kernel/sys_ni.c	/^cond_syscall(sys_io_destroy);$/;"	v
sys_io_getevents	kernel/sys_ni.c	/^cond_syscall(sys_io_getevents);$/;"	v
sys_io_setup	kernel/sys_ni.c	/^cond_syscall(sys_io_setup);$/;"	v
sys_io_submit	kernel/sys_ni.c	/^cond_syscall(sys_io_submit);$/;"	v
sys_ioprio_get	kernel/sys_ni.c	/^cond_syscall(sys_ioprio_get);$/;"	v
sys_ioprio_set	kernel/sys_ni.c	/^cond_syscall(sys_ioprio_set);$/;"	v
sys_ipc	kernel/sys_ni.c	/^cond_syscall(sys_ipc);$/;"	v
sys_kcmp	kernel/sys_ni.c	/^cond_syscall(sys_kcmp);$/;"	v
sys_kexec_load	kernel/sys_ni.c	/^cond_syscall(sys_kexec_load);$/;"	v
sys_keyctl	kernel/sys_ni.c	/^cond_syscall(sys_keyctl);$/;"	v
sys_lchown16	kernel/sys_ni.c	/^cond_syscall(sys_lchown16);$/;"	v
sys_listen	kernel/sys_ni.c	/^cond_syscall(sys_listen);$/;"	v
sys_lookup_dcookie	kernel/sys_ni.c	/^cond_syscall(sys_lookup_dcookie);$/;"	v
sys_madvise	kernel/sys_ni.c	/^cond_syscall(sys_madvise);$/;"	v
sys_mbind	kernel/sys_ni.c	/^cond_syscall(sys_mbind);$/;"	v
sys_migrate_pages	kernel/sys_ni.c	/^cond_syscall(sys_migrate_pages);$/;"	v
sys_mincore	kernel/sys_ni.c	/^cond_syscall(sys_mincore);$/;"	v
sys_mlock	kernel/sys_ni.c	/^cond_syscall(sys_mlock);$/;"	v
sys_mlockall	kernel/sys_ni.c	/^cond_syscall(sys_mlockall);$/;"	v
sys_move_pages	kernel/sys_ni.c	/^cond_syscall(sys_move_pages);$/;"	v
sys_mprotect	kernel/sys_ni.c	/^cond_syscall(sys_mprotect);$/;"	v
sys_mq_getsetattr	kernel/sys_ni.c	/^cond_syscall(sys_mq_getsetattr);$/;"	v
sys_mq_notify	kernel/sys_ni.c	/^cond_syscall(sys_mq_notify);$/;"	v
sys_mq_open	kernel/sys_ni.c	/^cond_syscall(sys_mq_open);$/;"	v
sys_mq_timedreceive	kernel/sys_ni.c	/^cond_syscall(sys_mq_timedreceive);$/;"	v
sys_mq_timedsend	kernel/sys_ni.c	/^cond_syscall(sys_mq_timedsend);$/;"	v
sys_mq_unlink	kernel/sys_ni.c	/^cond_syscall(sys_mq_unlink);$/;"	v
sys_mremap	kernel/sys_ni.c	/^cond_syscall(sys_mremap);$/;"	v
sys_msgctl	kernel/sys_ni.c	/^cond_syscall(sys_msgctl);$/;"	v
sys_msgget	kernel/sys_ni.c	/^cond_syscall(sys_msgget);$/;"	v
sys_msgrcv	kernel/sys_ni.c	/^cond_syscall(sys_msgrcv);$/;"	v
sys_msgsnd	kernel/sys_ni.c	/^cond_syscall(sys_msgsnd);$/;"	v
sys_msync	kernel/sys_ni.c	/^cond_syscall(sys_msync);$/;"	v
sys_munlock	kernel/sys_ni.c	/^cond_syscall(sys_munlock);$/;"	v
sys_munlockall	kernel/sys_ni.c	/^cond_syscall(sys_munlockall);$/;"	v
sys_name_to_handle_at	kernel/sys_ni.c	/^cond_syscall(sys_name_to_handle_at);$/;"	v
sys_ni_syscall	kernel/sys_ni.c	/^asmlinkage long sys_ni_syscall(void)$/;"	f
sys_open_by_handle_at	kernel/sys_ni.c	/^cond_syscall(sys_open_by_handle_at);$/;"	v
sys_pciconfig_iobase	kernel/sys_ni.c	/^cond_syscall(sys_pciconfig_iobase);$/;"	v
sys_pciconfig_read	kernel/sys_ni.c	/^cond_syscall(sys_pciconfig_read);$/;"	v
sys_pciconfig_write	kernel/sys_ni.c	/^cond_syscall(sys_pciconfig_write);$/;"	v
sys_perf_event_open	kernel/sys_ni.c	/^cond_syscall(sys_perf_event_open);$/;"	v
sys_process_vm_readv	kernel/sys_ni.c	/^cond_syscall(sys_process_vm_readv);$/;"	v
sys_process_vm_writev	kernel/sys_ni.c	/^cond_syscall(sys_process_vm_writev);$/;"	v
sys_quotactl	kernel/sys_ni.c	/^cond_syscall(sys_quotactl);$/;"	v
sys_recv	kernel/sys_ni.c	/^cond_syscall(sys_recv);$/;"	v
sys_recvfrom	kernel/sys_ni.c	/^cond_syscall(sys_recvfrom);$/;"	v
sys_recvmmsg	kernel/sys_ni.c	/^cond_syscall(sys_recvmmsg);$/;"	v
sys_recvmsg	kernel/sys_ni.c	/^cond_syscall(sys_recvmsg);$/;"	v
sys_remap_file_pages	kernel/sys_ni.c	/^cond_syscall(sys_remap_file_pages);$/;"	v
sys_request_key	kernel/sys_ni.c	/^cond_syscall(sys_request_key);$/;"	v
sys_semctl	kernel/sys_ni.c	/^cond_syscall(sys_semctl);$/;"	v
sys_semget	kernel/sys_ni.c	/^cond_syscall(sys_semget);$/;"	v
sys_semop	kernel/sys_ni.c	/^cond_syscall(sys_semop);$/;"	v
sys_semtimedop	kernel/sys_ni.c	/^cond_syscall(sys_semtimedop);$/;"	v
sys_send	kernel/sys_ni.c	/^cond_syscall(sys_send);$/;"	v
sys_sendmmsg	kernel/sys_ni.c	/^cond_syscall(sys_sendmmsg);$/;"	v
sys_sendmsg	kernel/sys_ni.c	/^cond_syscall(sys_sendmsg);$/;"	v
sys_sendto	kernel/sys_ni.c	/^cond_syscall(sys_sendto);$/;"	v
sys_set_mempolicy	kernel/sys_ni.c	/^cond_syscall(sys_set_mempolicy);$/;"	v
sys_set_robust_list	kernel/sys_ni.c	/^cond_syscall(sys_set_robust_list);$/;"	v
sys_setfsgid16	kernel/sys_ni.c	/^cond_syscall(sys_setfsgid16);$/;"	v
sys_setfsuid16	kernel/sys_ni.c	/^cond_syscall(sys_setfsuid16);$/;"	v
sys_setgid16	kernel/sys_ni.c	/^cond_syscall(sys_setgid16);$/;"	v
sys_setgroups16	kernel/sys_ni.c	/^cond_syscall(sys_setgroups16);$/;"	v
sys_setregid16	kernel/sys_ni.c	/^cond_syscall(sys_setregid16);$/;"	v
sys_setresgid16	kernel/sys_ni.c	/^cond_syscall(sys_setresgid16);$/;"	v
sys_setresuid16	kernel/sys_ni.c	/^cond_syscall(sys_setresuid16);$/;"	v
sys_setreuid16	kernel/sys_ni.c	/^cond_syscall(sys_setreuid16);$/;"	v
sys_setsockopt	kernel/sys_ni.c	/^cond_syscall(sys_setsockopt);$/;"	v
sys_setuid16	kernel/sys_ni.c	/^cond_syscall(sys_setuid16);$/;"	v
sys_shmat	kernel/sys_ni.c	/^cond_syscall(sys_shmat);$/;"	v
sys_shmctl	kernel/sys_ni.c	/^cond_syscall(sys_shmctl);$/;"	v
sys_shmdt	kernel/sys_ni.c	/^cond_syscall(sys_shmdt);$/;"	v
sys_shmget	kernel/sys_ni.c	/^cond_syscall(sys_shmget);$/;"	v
sys_shutdown	kernel/sys_ni.c	/^cond_syscall(sys_shutdown);$/;"	v
sys_signalfd	kernel/sys_ni.c	/^cond_syscall(sys_signalfd);$/;"	v
sys_signalfd4	kernel/sys_ni.c	/^cond_syscall(sys_signalfd4);$/;"	v
sys_socket	kernel/sys_ni.c	/^cond_syscall(sys_socket);$/;"	v
sys_socketcall	kernel/sys_ni.c	/^cond_syscall(sys_socketcall);$/;"	v
sys_socketpair	kernel/sys_ni.c	/^cond_syscall(sys_socketpair);$/;"	v
sys_spu_create	kernel/sys_ni.c	/^cond_syscall(sys_spu_create);$/;"	v
sys_spu_run	kernel/sys_ni.c	/^cond_syscall(sys_spu_run);$/;"	v
sys_subpage_prot	kernel/sys_ni.c	/^cond_syscall(sys_subpage_prot);$/;"	v
sys_swapoff	kernel/sys_ni.c	/^cond_syscall(sys_swapoff);$/;"	v
sys_swapon	kernel/sys_ni.c	/^cond_syscall(sys_swapon);$/;"	v
sys_syslog	kernel/sys_ni.c	/^cond_syscall(sys_syslog);$/;"	v
sys_timerfd_create	kernel/sys_ni.c	/^cond_syscall(sys_timerfd_create);$/;"	v
sys_timerfd_gettime	kernel/sys_ni.c	/^cond_syscall(sys_timerfd_gettime);$/;"	v
sys_timerfd_settime	kernel/sys_ni.c	/^cond_syscall(sys_timerfd_settime);$/;"	v
sys_tracepoint_refcount	kernel/tracepoint.c	/^static int sys_tracepoint_refcount;$/;"	v	file:
sys_tz	kernel/time.c	/^EXPORT_SYMBOL(sys_tz);$/;"	v
sys_tz	kernel/time.c	/^struct timezone sys_tz;$/;"	v	typeref:struct:timezone
sys_vm86	kernel/sys_ni.c	/^cond_syscall(sys_vm86);$/;"	v
sys_vm86old	kernel/sys_ni.c	/^cond_syscall(sys_vm86old);$/;"	v
syscall_regfunc	kernel/tracepoint.c	/^void syscall_regfunc(void)$/;"	f
syscall_unregfunc	kernel/tracepoint.c	/^void syscall_unregfunc(void)$/;"	f
sysctl_base_table	kernel/sysctl.c	/^static struct ctl_table sysctl_base_table[] = {$/;"	v	typeref:struct:ctl_table	file:
sysctl_compact_memory	mm/compaction.c	/^int sysctl_compact_memory;$/;"	v
sysctl_compaction_handler	mm/compaction.c	/^int sysctl_compaction_handler(struct ctl_table *table, int write,$/;"	f
sysctl_drop_caches	fs/drop_caches.c	/^int sysctl_drop_caches;$/;"	v
sysctl_extfrag_handler	mm/compaction.c	/^int sysctl_extfrag_handler(struct ctl_table *table, int write,$/;"	f
sysctl_extfrag_threshold	mm/compaction.c	/^int sysctl_extfrag_threshold = 500;$/;"	v
sysctl_getname	kernel/sysctl_binary.c	/^static char *sysctl_getname(const int *name, int nlen, const struct bin_table **tablep)$/;"	f	file:
sysctl_hung_task_check_count	kernel/hung_task.c	/^unsigned long __read_mostly sysctl_hung_task_check_count = PID_MAX_LIMIT;$/;"	v
sysctl_hung_task_panic	kernel/hung_task.c	/^unsigned int __read_mostly sysctl_hung_task_panic =$/;"	v
sysctl_hung_task_timeout_secs	kernel/hung_task.c	/^unsigned long __read_mostly sysctl_hung_task_timeout_secs = CONFIG_DEFAULT_HUNG_TASK_TIMEOUT;$/;"	v
sysctl_hung_task_warnings	kernel/hung_task.c	/^unsigned long __read_mostly sysctl_hung_task_warnings = 10;$/;"	v
sysctl_init	kernel/sysctl.c	/^int __init sysctl_init(void)$/;"	f
sysctl_kprobes_optimization	kernel/kprobes.c	/^int sysctl_kprobes_optimization;$/;"	v
sysctl_legacy_va_layout	kernel/sysctl.c	/^int sysctl_legacy_va_layout;$/;"	v
sysctl_lowmem_reserve_ratio	mm/page_alloc.c	/^int sysctl_lowmem_reserve_ratio[MAX_NR_ZONES-1] = {$/;"	v
sysctl_max_map_count	mm/nommu.c	/^int sysctl_max_map_count = DEFAULT_MAX_MAP_COUNT;$/;"	v
sysctl_min_slab_ratio	mm/vmscan.c	/^int sysctl_min_slab_ratio = 5;$/;"	v
sysctl_min_slab_ratio_sysctl_handler	mm/page_alloc.c	/^int sysctl_min_slab_ratio_sysctl_handler(ctl_table *table, int write,$/;"	f
sysctl_min_unmapped_ratio	mm/vmscan.c	/^int sysctl_min_unmapped_ratio = 1;$/;"	v
sysctl_min_unmapped_ratio_sysctl_handler	mm/page_alloc.c	/^int sysctl_min_unmapped_ratio_sysctl_handler(ctl_table *table, int write,$/;"	f
sysctl_nr_open_max	fs/file.c	/^int sysctl_nr_open_max = 1024 * 1024; \/* raised later *\/$/;"	v
sysctl_nr_open_min	fs/file.c	/^int sysctl_nr_open_min = BITS_PER_LONG;$/;"	v
sysctl_nr_trim_pages	mm/nommu.c	/^int sysctl_nr_trim_pages = CONFIG_NOMMU_INITIAL_TRIM_EXCESS;$/;"	v
sysctl_oom_dump_tasks	mm/oom_kill.c	/^int sysctl_oom_dump_tasks = 1;$/;"	v
sysctl_oom_kill_allocating_task	mm/oom_kill.c	/^int sysctl_oom_kill_allocating_task;$/;"	v
sysctl_overcommit_memory	mm/nommu.c	/^int sysctl_overcommit_memory = OVERCOMMIT_GUESS; \/* heuristic overcommit *\/$/;"	v
sysctl_overcommit_ratio	mm/nommu.c	/^int sysctl_overcommit_ratio = 50; \/* default is 50% *\/$/;"	v
sysctl_panic_on_oom	mm/oom_kill.c	/^int sysctl_panic_on_oom;$/;"	v
sysctl_vfs_cache_pressure	fs/dcache.c	/^EXPORT_SYMBOL_GPL(sysctl_vfs_cache_pressure);$/;"	v
sysfs_compact_node	mm/compaction.c	/^ssize_t sysfs_compact_node(struct device *dev,$/;"	f
sysfs_slab_add	mm/slub.c	/^static inline int sysfs_slab_add(struct kmem_cache *s) { return 0; }$/;"	f	file:
sysfs_slab_add	mm/slub.c	/^static int sysfs_slab_add(struct kmem_cache *s)$/;"	f	file:
sysfs_slab_alias	mm/slub.c	/^static inline int sysfs_slab_alias(struct kmem_cache *s, const char *p)$/;"	f	file:
sysfs_slab_alias	mm/slub.c	/^static int sysfs_slab_alias(struct kmem_cache *s, const char *name)$/;"	f	file:
sysfs_slab_remove	mm/slub.c	/^static inline void sysfs_slab_remove(struct kmem_cache *s) { }$/;"	f	file:
sysfs_slab_remove	mm/slub.c	/^static void sysfs_slab_remove(struct kmem_cache *s)$/;"	f	file:
sysfs_streq	lib/string.c	/^EXPORT_SYMBOL(sysfs_streq);$/;"	v
sysfs_streq	lib/string.c	/^bool sysfs_streq(const char *s1, const char *s2)$/;"	f
sysfs_test_command	kernel/rtmutex-tester.c	/^static ssize_t sysfs_test_command(struct device *dev, struct device_attribute *attr,$/;"	f	file:
sysfs_test_status	kernel/rtmutex-tester.c	/^static ssize_t sysfs_test_status(struct device *dev, struct device_attribute *attr,$/;"	f	file:
syslog_action_restricted	kernel/printk.c	/^static int syslog_action_restricted(int type)$/;"	f	file:
syslog_idx	kernel/printk.c	/^static u32 syslog_idx;$/;"	v	file:
syslog_partial	kernel/printk.c	/^static size_t syslog_partial;$/;"	v	file:
syslog_prev	kernel/printk.c	/^static enum log_flags syslog_prev;$/;"	v	typeref:enum:log_flags	file:
syslog_print	kernel/printk.c	/^static int syslog_print(char __user *buf, int size)$/;"	f	file:
syslog_print_all	kernel/printk.c	/^static int syslog_print_all(char __user *buf, int size, bool clear)$/;"	f	file:
syslog_seq	kernel/printk.c	/^static u64 syslog_seq;$/;"	v	file:
sysrq_sysctl_handler	kernel/sysctl.c	/^static int sysrq_sysctl_handler(ctl_table *table, int write,$/;"	f	file:
system_freezable_wq	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(system_freezable_wq);$/;"	v
system_freezing_cnt	kernel/freezer.c	/^EXPORT_SYMBOL(system_freezing_cnt);$/;"	v
system_freezing_cnt	kernel/freezer.c	/^atomic_t system_freezing_cnt = ATOMIC_INIT(0);$/;"	v
system_highpri_wq	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(system_highpri_wq);$/;"	v
system_long_wq	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(system_long_wq);$/;"	v
system_unbound_wq	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(system_unbound_wq);$/;"	v
system_wq	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(system_wq);$/;"	v
tag_chunk	kernel/audit_tree.c	/^static int tag_chunk(struct inode *inode, struct audit_tree *tree)$/;"	f	file:
tag_clear	lib/radix-tree.c	/^static inline void tag_clear(struct radix_tree_node *node, unsigned int tag,$/;"	f	file:
tag_get	lib/radix-tree.c	/^static inline int tag_get(struct radix_tree_node *node, unsigned int tag,$/;"	f	file:
tag_mount	kernel/audit_tree.c	/^static int tag_mount(struct vfsmount *mnt, void *arg)$/;"	f	file:
tag_pages_for_writeback	mm/page-writeback.c	/^EXPORT_SYMBOL(tag_pages_for_writeback);$/;"	v
tag_pages_for_writeback	mm/page-writeback.c	/^void tag_pages_for_writeback(struct address_space *mapping,$/;"	f
tag_set	lib/radix-tree.c	/^static inline void tag_set(struct radix_tree_node *node, unsigned int tag,$/;"	f	file:
tagged_writepages	fs/fs-writeback.c	/^	unsigned int tagged_writepages:1;$/;"	m	struct:wb_writeback_work	file:
tags	lib/radix-tree.c	/^	unsigned long	tags[RADIX_TREE_MAX_TAGS][RADIX_TREE_TAG_LONGS];$/;"	m	struct:radix_tree_node	file:
tail	fs/direct-io.c	/^	unsigned tail;			\/* last valid page + 1 *\/$/;"	m	struct:dio_submit	file:
tail	kernel/softirq.c	/^	struct tasklet_struct **tail;$/;"	m	struct:tasklet_head	typeref:struct:tasklet_head::tasklet_struct	file:
tail	mm/memory-failure.c	753;"	d	file:
tail	mm/memory-failure.c	810;"	d	file:
tainted_mask	kernel/panic.c	/^static unsigned long tainted_mask;$/;"	v	file:
take_cpu_down	kernel/cpu.c	/^static int __ref take_cpu_down(void *_param)$/;"	f	file:
take_cpu_down_param	kernel/cpu.c	/^struct take_cpu_down_param {$/;"	s	file:
takeover_tasklets	kernel/softirq.c	/^static void takeover_tasklets(unsigned int cpu)$/;"	f	file:
target	kernel/test_kprobes.c	/^static u32 (*target)(u32 value);$/;"	v	file:
target2	kernel/test_kprobes.c	/^static u32 (*target2)(u32 value);$/;"	v	file:
target_auid	kernel/auditsc.c	/^	kuid_t			target_auid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_auid	kernel/auditsc.c	/^	kuid_t		    target_auid;$/;"	m	struct:audit_context	file:
target_comm	kernel/auditsc.c	/^	char		    target_comm[TASK_COMM_LEN];$/;"	m	struct:audit_context	file:
target_comm	kernel/auditsc.c	/^	char 			target_comm[AUDIT_AUX_PIDS][TASK_COMM_LEN];$/;"	m	struct:audit_aux_data_pids	file:
target_leasetype	fs/locks.c	/^static int target_leasetype(struct file_lock *fl)$/;"	f	file:
target_mem_cgroup	mm/vmscan.c	/^	struct mem_cgroup *target_mem_cgroup;$/;"	m	struct:scan_control	typeref:struct:scan_control::mem_cgroup	file:
target_pid	kernel/auditsc.c	/^	pid_t			target_pid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_pid	kernel/auditsc.c	/^	pid_t		    target_pid;$/;"	m	struct:audit_context	file:
target_sessionid	kernel/auditsc.c	/^	unsigned int		target_sessionid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_sessionid	kernel/auditsc.c	/^	unsigned int	    target_sessionid;$/;"	m	struct:audit_context	file:
target_sid	kernel/auditsc.c	/^	u32			target_sid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_sid	kernel/auditsc.c	/^	u32		    target_sid;$/;"	m	struct:audit_context	file:
target_uid	kernel/auditsc.c	/^	kuid_t			target_uid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_uid	kernel/auditsc.c	/^	kuid_t		    target_uid;$/;"	m	struct:audit_context	file:
targets	mm/memcontrol.c	/^	unsigned long targets[MEM_CGROUP_NTARGETS];$/;"	m	struct:mem_cgroup_stat_cpu	file:
task	fs/binfmt_elf.c	/^	struct task_struct *task;$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::task_struct	file:
task	kernel/cgroup.c	/^	struct task_struct	*task;$/;"	m	struct:task_and_cgroup	typeref:struct:task_and_cgroup::task_struct	file:
task	kernel/futex.c	/^	struct task_struct *task;$/;"	m	struct:futex_q	typeref:struct:futex_q::task_struct	file:
task	kernel/rtmutex_common.h	/^	struct task_struct	*task;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::task_struct
task	kernel/semaphore.c	/^	struct task_struct *task;$/;"	m	struct:semaphore_waiter	typeref:struct:semaphore_waiter::task_struct	file:
task	kernel/workqueue_internal.h	/^	struct task_struct	*task;		\/* I: worker task *\/$/;"	m	struct:worker	typeref:struct:worker::task_struct
task	lib/rwsem-spinlock.c	/^	struct task_struct *task;$/;"	m	struct:rwsem_waiter	typeref:struct:rwsem_waiter::task_struct	file:
task_active_pid_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(task_active_pid_ns);$/;"	v
task_active_pid_ns	kernel/pid.c	/^struct pid_namespace *task_active_pid_ns(struct task_struct *tsk)$/;"	f
task_and_cgroup	kernel/cgroup.c	/^struct task_and_cgroup {$/;"	s	file:
task_blocks_on_rt_mutex	kernel/rtmutex.c	/^static int task_blocks_on_rt_mutex(struct rt_mutex *lock,$/;"	f	file:
task_cgroup_from_root	kernel/cgroup.c	/^static struct cgroup *task_cgroup_from_root(struct task_struct *task,$/;"	f	file:
task_clear_jobctl_pending	kernel/signal.c	/^void task_clear_jobctl_pending(struct task_struct *task, unsigned int mask)$/;"	f
task_clear_jobctl_trapping	kernel/signal.c	/^void task_clear_jobctl_trapping(struct task_struct *task)$/;"	f
task_cputime_expired	kernel/posix-cpu-timers.c	/^static inline int task_cputime_expired(const struct task_cputime *sample,$/;"	f	file:
task_cputime_zero	kernel/posix-cpu-timers.c	/^static inline int task_cputime_zero(const struct task_cputime *cputime)$/;"	f	file:
task_cs	kernel/cpuset.c	/^static inline struct cpuset *task_cs(struct task_struct *task)$/;"	f	file:
task_early_kill	mm/memory-failure.c	/^static int task_early_kill(struct task_struct *tsk)$/;"	f	file:
task_freezer	kernel/cgroup_freezer.c	/^static inline struct freezer *task_freezer(struct task_struct *task)$/;"	f	file:
task_get_live_kthread	kernel/kthread.c	/^static struct kthread *task_get_live_kthread(struct task_struct *k)$/;"	f	file:
task_handoff_register	kernel/profile.c	/^EXPORT_SYMBOL_GPL(task_handoff_register);$/;"	v
task_handoff_register	kernel/profile.c	/^int task_handoff_register(struct notifier_block *n)$/;"	f
task_handoff_unregister	kernel/profile.c	/^EXPORT_SYMBOL_GPL(task_handoff_unregister);$/;"	v
task_handoff_unregister	kernel/profile.c	/^int task_handoff_unregister(struct notifier_block *n)$/;"	f
task_has_mempolicy	kernel/cpuset.c	/^static inline bool task_has_mempolicy(struct task_struct *task)$/;"	f	file:
task_has_pi_waiters	kernel/rtmutex_common.h	/^static inline int task_has_pi_waiters(struct task_struct *p)$/;"	f
task_in_mem_cgroup	mm/memcontrol.c	/^int task_in_mem_cgroup(struct task_struct *task, const struct mem_cgroup *memcg)$/;"	f
task_participate_group_stop	kernel/signal.c	/^static bool task_participate_group_stop(struct task_struct *task)$/;"	f	file:
task_pid_type	kernel/exit.c	/^struct pid *task_pid_type(struct task_struct *task, enum pid_type type)$/;"	f	file:
task_set_jobctl_pending	kernel/signal.c	/^bool task_set_jobctl_pending(struct task_struct *task, unsigned int mask)$/;"	f
task_stopped_code	kernel/exit.c	/^static int *task_stopped_code(struct task_struct *p, bool ptrace)$/;"	f	file:
task_struct_cachep	kernel/fork.c	/^static struct kmem_cache *task_struct_cachep;$/;"	v	typeref:struct:kmem_cache	file:
task_tgid_nr_ns	kernel/pid.c	/^EXPORT_SYMBOL(task_tgid_nr_ns);$/;"	v
task_tgid_nr_ns	kernel/pid.c	/^pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)$/;"	f
task_top_pi_waiter	kernel/rtmutex_common.h	/^task_top_pi_waiter(struct task_struct *p)$/;"	f
task_user_regset_view	kernel/ptrace.c	/^EXPORT_SYMBOL_GPL(task_user_regset_view);$/;"	v
task_work_add	kernel/task_work.c	/^task_work_add(struct task_struct *task, struct callback_head *work, bool notify)$/;"	f
task_work_cancel	kernel/task_work.c	/^task_work_cancel(struct task_struct *task, task_work_func_t func)$/;"	f
task_work_run	kernel/task_work.c	/^void task_work_run(void)$/;"	f
tasklet_action	kernel/softirq.c	/^static void tasklet_action(struct softirq_action *a)$/;"	f	file:
tasklet_head	kernel/softirq.c	/^struct tasklet_head$/;"	s	file:
tasklet_hi_action	kernel/softirq.c	/^static void tasklet_hi_action(struct softirq_action *a)$/;"	f	file:
tasklet_hrtimer_init	kernel/softirq.c	/^EXPORT_SYMBOL_GPL(tasklet_hrtimer_init);$/;"	v
tasklet_hrtimer_init	kernel/softirq.c	/^void tasklet_hrtimer_init(struct tasklet_hrtimer *ttimer,$/;"	f
tasklet_init	kernel/softirq.c	/^EXPORT_SYMBOL(tasklet_init);$/;"	v
tasklet_init	kernel/softirq.c	/^void tasklet_init(struct tasklet_struct *t,$/;"	f
tasklet_kill	kernel/softirq.c	/^EXPORT_SYMBOL(tasklet_kill);$/;"	v
tasklet_kill	kernel/softirq.c	/^void tasklet_kill(struct tasklet_struct *t)$/;"	f
tasklet_kill_immediate	kernel/softirq.c	/^void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu)$/;"	f
tasks_call_list	fs/eventpoll.c	/^	struct list_head tasks_call_list;$/;"	m	struct:nested_calls	typeref:struct:nested_calls::list_head	file:
taskstats_cache	kernel/taskstats.c	/^struct kmem_cache *taskstats_cache;$/;"	v	typeref:struct:kmem_cache
taskstats_cmd_get_policy	kernel/taskstats.c	/^static const struct nla_policy taskstats_cmd_get_policy[TASKSTATS_CMD_ATTR_MAX+1] = {$/;"	v	typeref:struct:nla_policy	file:
taskstats_exit	kernel/taskstats.c	/^void taskstats_exit(struct task_struct *tsk, int group_dead)$/;"	f
taskstats_init	kernel/taskstats.c	/^late_initcall(taskstats_init);$/;"	v
taskstats_init	kernel/taskstats.c	/^static int __init taskstats_init(void)$/;"	f	file:
taskstats_init_early	kernel/taskstats.c	/^void __init taskstats_init_early(void)$/;"	f
taskstats_ops	kernel/taskstats.c	/^static struct genl_ops taskstats_ops = {$/;"	v	typeref:struct:genl_ops	file:
taskstats_packet_size	kernel/taskstats.c	/^static size_t taskstats_packet_size(void)$/;"	f	file:
taskstats_tgid_alloc	kernel/taskstats.c	/^static struct taskstats *taskstats_tgid_alloc(struct task_struct *tsk)$/;"	f	file:
taskstats_user_cmd	kernel/taskstats.c	/^static int taskstats_user_cmd(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
tbase_get_base	kernel/timer.c	/^static inline struct tvec_base *tbase_get_base(struct tvec_base *base)$/;"	f	file:
tbase_get_deferrable	kernel/timer.c	/^static inline unsigned int tbase_get_deferrable(struct tvec_base *base)$/;"	f	file:
tbase_get_irqsafe	kernel/timer.c	/^static inline unsigned int tbase_get_irqsafe(struct tvec_base *base)$/;"	f	file:
tc_array	kernel/cgroup.c	/^	struct flex_array	*tc_array;$/;"	m	struct:cgroup_taskset	typeref:struct:cgroup_taskset::flex_array	file:
tc_array_len	kernel/cgroup.c	/^	int			tc_array_len;$/;"	m	struct:cgroup_taskset	file:
tcp_mem	mm/memcontrol.c	/^	struct tcp_memcontrol tcp_mem;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::tcp_memcontrol	file:
tcp_proto_cgroup	mm/memcontrol.c	/^EXPORT_SYMBOL(tcp_proto_cgroup);$/;"	v
tcp_proto_cgroup	mm/memcontrol.c	/^struct cg_proto *tcp_proto_cgroup(struct mem_cgroup *memcg)$/;"	f
ten_thousand	kernel/sysctl.c	/^static int ten_thousand = 10000;$/;"	v	file:
terminate_walk	fs/namei.c	/^static void terminate_walk(struct nameidata *nd)$/;"	f	file:
test_bdev_super	fs/super.c	/^static int test_bdev_super(struct super_block *s, void *data)$/;"	f	file:
test_boost	kernel/rcutorture.c	/^static int test_boost = 1;	\/* Test RCU prio boost: 0=no, 1=maybe, 2=yes. *\/$/;"	v	file:
test_boost_duration	kernel/rcutorture.c	/^static int test_boost_duration = 4; \/* Duration of each boost test, seconds. *\/$/;"	v	file:
test_boost_interval	kernel/rcutorture.c	/^static int test_boost_interval = 7; \/* Interval between boost tests, seconds. *\/$/;"	v	file:
test_clear_page_writeback	mm/page-writeback.c	/^int test_clear_page_writeback(struct page *page)$/;"	f
test_func	kernel/rtmutex-tester.c	/^static int test_func(void *data)$/;"	f	file:
test_inode_iunique	fs/inode.c	/^static int test_inode_iunique(struct super_block *sb, unsigned long ino)$/;"	f	file:
test_jprobe	kernel/test_kprobes.c	/^static int test_jprobe(void)$/;"	f	file:
test_jprobes	kernel/test_kprobes.c	/^static int test_jprobes(void)$/;"	f	file:
test_kprobe	kernel/test_kprobes.c	/^static int test_kprobe(void)$/;"	f	file:
test_kprobes	kernel/test_kprobes.c	/^static int test_kprobes(void)$/;"	f	file:
test_kretprobe	kernel/test_kprobes.c	/^static int test_kretprobe(void)$/;"	f	file:
test_kretprobes	kernel/test_kprobes.c	/^static int test_kretprobes(void)$/;"	f	file:
test_mem_cgroup_node_reclaimable	mm/memcontrol.c	/^static bool test_mem_cgroup_node_reclaimable(struct mem_cgroup *memcg,$/;"	f	file:
test_no_idle_hz	kernel/rcutorture.c	/^static bool test_no_idle_hz = true;$/;"	v	file:
test_node	mm/kmemleak-test.c	/^struct test_node {$/;"	s	file:
test_opcodes	kernel/rtmutex-tester.c	/^enum test_opcodes {$/;"	g	file:
test_opt	fs/ext3/ext3.h	372;"	d
test_pages_in_a_zone	mm/memory_hotplug.c	/^static int test_pages_in_a_zone(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
test_pages_isolated	mm/page_isolation.c	/^int test_pages_isolated(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
test_root	fs/ext3/balloc.c	/^static inline int test_root(int a, int b)$/;"	f	file:
test_set_page_writeback	mm/page-writeback.c	/^EXPORT_SYMBOL(test_set_page_writeback);$/;"	v
test_set_page_writeback	mm/page-writeback.c	/^int test_set_page_writeback(struct page *page)$/;"	f
test_taint	kernel/panic.c	/^EXPORT_SYMBOL(test_taint);$/;"	v
test_taint	kernel/panic.c	/^int test_taint(unsigned flag)$/;"	f
test_thread_data	kernel/rtmutex-tester.c	/^struct test_thread_data {$/;"	s	file:
text_len	fs/binfmt_flat.c	/^		unsigned long text_len;			\/* Length of text segment *\/$/;"	m	struct:lib_info::__anon22	file:
text_len	kernel/printk.c	/^	u16 text_len;		\/* length of text buffer *\/$/;"	m	struct:log	file:
text_mutex	kernel/extable.c	/^DEFINE_MUTEX(text_mutex);$/;"	v
thaw_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(thaw_bdev);$/;"	v
thaw_bdev	fs/block_dev.c	/^int thaw_bdev(struct block_device *bdev, struct super_block *sb)$/;"	f
thaw_super	fs/super.c	/^EXPORT_SYMBOL(thaw_super);$/;"	v
thaw_super	fs/super.c	/^int thaw_super(struct super_block *sb)$/;"	f
thaw_workqueues	kernel/workqueue.c	/^void thaw_workqueues(void)$/;"	f
thread	fs/binfmt_elf.c	/^	struct elf_thread_core_info *thread;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::elf_thread_core_info	file:
thread	fs/binfmt_elf.c	/^	struct task_struct *thread;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::task_struct	file:
thread	fs/binfmt_elf_fdpic.c	/^	struct task_struct *thread;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::task_struct	file:
thread_ack	kernel/stop_machine.c	/^	atomic_t		thread_ack;$/;"	m	struct:stop_machine_data	file:
thread_cpu_clock_get	kernel/posix-cpu-timers.c	/^static int thread_cpu_clock_get(const clockid_t which_clock,$/;"	f	file:
thread_cpu_clock_getres	kernel/posix-cpu-timers.c	/^static int thread_cpu_clock_getres(const clockid_t which_clock,$/;"	f	file:
thread_cpu_timer_create	kernel/posix-cpu-timers.c	/^static int thread_cpu_timer_create(struct k_itimer *timer)$/;"	f	file:
thread_data	kernel/rtmutex-tester.c	/^static struct test_thread_data thread_data[MAX_RT_TEST_THREADS];$/;"	v	typeref:struct:test_thread_data	file:
thread_group_cputimer	kernel/posix-cpu-timers.c	/^void thread_group_cputimer(struct task_struct *tsk, struct task_cputime *times)$/;"	f
thread_info_cache	kernel/fork.c	/^static struct kmem_cache *thread_info_cache;$/;"	v	typeref:struct:kmem_cache	file:
thread_info_cache_init	kernel/fork.c	/^void thread_info_cache_init(void)$/;"	f
thread_list	fs/binfmt_elf.c	/^	struct list_head thread_list;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::list_head	file:
thread_notes	fs/binfmt_elf.c	/^	int thread_notes;$/;"	m	struct:elf_note_info	file:
thread_status_size	fs/binfmt_elf.c	/^	int thread_status_size;$/;"	m	struct:elf_note_info	file:
threadfn	kernel/kthread.c	/^	int (*threadfn)(void *data);$/;"	m	struct:kthread_create_info	file:
threads	kernel/rtmutex-tester.c	/^static struct task_struct *threads[MAX_RT_TEST_THREADS];$/;"	v	typeref:struct:task_struct	file:
three	kernel/sysctl.c	/^static int __maybe_unused three = 3;$/;"	v	file:
threshold	mm/memcontrol.c	/^	u64 threshold;$/;"	m	struct:mem_cgroup_threshold	file:
thresholds	mm/memcontrol.c	/^	struct mem_cgroup_thresholds thresholds;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mem_cgroup_thresholds	file:
thresholds_lock	mm/memcontrol.c	/^	struct mutex thresholds_lock;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mutex	file:
throttle_direct_reclaim	mm/vmscan.c	/^static bool throttle_direct_reclaim(gfp_t gfp_mask, struct zonelist *zonelist,$/;"	f	file:
throttle_vm_writeout	mm/page-writeback.c	/^void throttle_vm_writeout(gfp_t gfp_mask)$/;"	f
tick_nohz_enabled_snap	kernel/rcutree.h	/^	int tick_nohz_enabled_snap; \/* Previously seen value from sysfs. *\/$/;"	m	struct:rcu_dynticks
ticks	fs/timerfd.c	/^	u64 ticks;$/;"	m	struct:timerfd_ctx	file:
ticks_this_gp	kernel/rcutree.h	/^	unsigned long	ticks_this_gp;	\/* The number of scheduling-clock *\/$/;"	m	struct:rcu_data
tid_to_cpu	mm/slub.c	/^static inline unsigned int tid_to_cpu(unsigned long tid)$/;"	f	file:
tid_to_event	mm/slub.c	/^static inline unsigned long tid_to_event(unsigned long tid)$/;"	f	file:
time	kernel/cpuset.c	/^	time_t time;		\/* clock (secs) when val computed *\/$/;"	m	struct:fmeter	file:
time_out	fs/compat.c	/^	compat_uint_t time_out;$/;"	m	struct:compat_ncp_mount_data	file:
time_out	fs/compat.c	/^	compat_uint_t time_out;$/;"	m	struct:compat_ncp_mount_data_v4	file:
time_out_leases	fs/locks.c	/^static void time_out_leases(struct inode *inode)$/;"	f	file:
timed_out	fs/aio.c	/^	int			timed_out;$/;"	m	struct:aio_timeout	file:
timeo	fs/compat.c	/^	compat_int_t timeo;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
timeout	fs/compat_ioctl.c	/^	compat_uint_t timeout;		\/* [i] MAX_UINT->no timeout (unit: millisec) *\/$/;"	m	struct:sg_io_hdr32	file:
timeout_func	fs/aio.c	/^static void timeout_func(unsigned long data)$/;"	f	file:
timeout_jiffies	kernel/hung_task.c	/^static unsigned long timeout_jiffies(unsigned long timeout)$/;"	f	file:
timer	fs/aio.c	/^	struct timer_list	timer;$/;"	m	struct:aio_timeout	typeref:struct:aio_timeout::timer_list	file:
timer_cpu_notify	kernel/timer.c	/^static int __cpuinit timer_cpu_notify(struct notifier_block *self,$/;"	f	file:
timer_debug_descr	kernel/timer.c	/^static struct debug_obj_descr timer_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr	file:
timer_debug_descr	kernel/timer.c	/^static struct debug_obj_descr timer_debug_descr;$/;"	v	typeref:struct:debug_obj_descr	file:
timer_debug_hint	kernel/timer.c	/^static void *timer_debug_hint(void *addr)$/;"	f	file:
timer_delete_hook	kernel/posix-timers.c	/^static inline int timer_delete_hook(struct k_itimer *timer)$/;"	f	file:
timer_fixup_activate	kernel/timer.c	/^static int timer_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_fixup_assert_init	kernel/timer.c	/^static int timer_fixup_assert_init(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_fixup_free	kernel/timer.c	/^static int timer_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_fixup_init	kernel/timer.c	/^static int timer_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_jiffies	kernel/timer.c	/^	unsigned long timer_jiffies;$/;"	m	struct:tvec_base	file:
timer_set_base	kernel/timer.c	/^timer_set_base(struct timer_list *timer, struct tvec_base *new_base)$/;"	f	file:
timer_stats_account_hrtimer	kernel/hrtimer.c	/^static inline void timer_stats_account_hrtimer(struct hrtimer *timer)$/;"	f	file:
timer_stats_account_timer	kernel/timer.c	/^static void timer_stats_account_timer(struct timer_list *timer) {}$/;"	f	file:
timer_stats_account_timer	kernel/timer.c	/^static void timer_stats_account_timer(struct timer_list *timer)$/;"	f	file:
timer_stats_hrtimer_clear_start_info	kernel/hrtimer.c	/^static inline void timer_stats_hrtimer_clear_start_info(struct hrtimer *timer)$/;"	f	file:
timer_stats_hrtimer_set_start_info	kernel/hrtimer.c	/^static inline void timer_stats_hrtimer_set_start_info(struct hrtimer *timer)$/;"	f	file:
timerfd_canceled	fs/timerfd.c	/^static bool timerfd_canceled(struct timerfd_ctx *ctx)$/;"	f	file:
timerfd_clock_was_set	fs/timerfd.c	/^void timerfd_clock_was_set(void)$/;"	f
timerfd_ctx	fs/timerfd.c	/^struct timerfd_ctx {$/;"	s	file:
timerfd_fget	fs/timerfd.c	/^static int timerfd_fget(int fd, struct fd *p)$/;"	f	file:
timerfd_fops	fs/timerfd.c	/^static const struct file_operations timerfd_fops = {$/;"	v	typeref:struct:file_operations	file:
timerfd_get_remaining	fs/timerfd.c	/^static ktime_t timerfd_get_remaining(struct timerfd_ctx *ctx)$/;"	f	file:
timerfd_poll	fs/timerfd.c	/^static unsigned int timerfd_poll(struct file *file, poll_table *wait)$/;"	f	file:
timerfd_read	fs/timerfd.c	/^static ssize_t timerfd_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
timerfd_release	fs/timerfd.c	/^static int timerfd_release(struct inode *inode, struct file *file)$/;"	f	file:
timerfd_remove_cancel	fs/timerfd.c	/^static void timerfd_remove_cancel(struct timerfd_ctx *ctx)$/;"	f	file:
timerfd_setup	fs/timerfd.c	/^static int timerfd_setup(struct timerfd_ctx *ctx, int flags,$/;"	f	file:
timerfd_setup_cancel	fs/timerfd.c	/^static void timerfd_setup_cancel(struct timerfd_ctx *ctx, int flags)$/;"	f	file:
timerfd_tmrproc	fs/timerfd.c	/^static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *htmr)$/;"	f	file:
timers_nb	kernel/timer.c	/^static struct notifier_block __cpuinitdata timers_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
timespec_add_safe	kernel/time.c	/^struct timespec timespec_add_safe(const struct timespec lhs,$/;"	f
timespec_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(timespec_to_jiffies);$/;"	v
timespec_to_jiffies	kernel/time.c	/^timespec_to_jiffies(const struct timespec *value)$/;"	f
timespec_to_sample	kernel/posix-cpu-timers.c	/^timespec_to_sample(const clockid_t which_clock, const struct timespec *tp)$/;"	f	file:
timespec_trunc	kernel/time.c	/^EXPORT_SYMBOL(timespec_trunc);$/;"	v
timespec_trunc	kernel/time.c	/^struct timespec timespec_trunc(struct timespec t, unsigned gran)$/;"	f
timestamp	fs/compat_ioctl.c	/^	compat_time_t	timestamp;$/;"	m	struct:compat_video_event	file:
timeval_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(timeval_to_jiffies);$/;"	v
timeval_to_jiffies	kernel/time.c	/^timeval_to_jiffies(const struct timeval *value)$/;"	f
timeval_valid	kernel/itimer.c	187;"	d	file:
tintv	fs/timerfd.c	/^	ktime_t tintv;$/;"	m	struct:timerfd_ctx	file:
tlb_finish_mmu	mm/memory.c	/^void tlb_finish_mmu(struct mmu_gather *tlb, unsigned long start, unsigned long end)$/;"	f
tlb_flush_mmu	mm/memory.c	/^void tlb_flush_mmu(struct mmu_gather *tlb)$/;"	f
tlb_gather_mmu	mm/memory.c	/^void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm, bool fullmm)$/;"	f
tlb_next_batch	mm/memory.c	/^static int tlb_next_batch(struct mmu_gather *tlb)$/;"	f	file:
tlb_remove_table	mm/memory.c	/^void tlb_remove_table(struct mmu_gather *tlb, void *table)$/;"	f
tlb_remove_table_one	mm/memory.c	/^static void tlb_remove_table_one(void *table)$/;"	f	file:
tlb_remove_table_rcu	mm/memory.c	/^static void tlb_remove_table_rcu(struct rcu_head *head)$/;"	f	file:
tlb_remove_table_smp_sync	mm/memory.c	/^static void tlb_remove_table_smp_sync(void *arg)$/;"	f	file:
tlb_table_flush	mm/memory.c	/^void tlb_table_flush(struct mmu_gather *tlb)$/;"	f
tmr	fs/timerfd.c	/^	struct hrtimer tmr;$/;"	m	struct:timerfd_ctx	typeref:struct:timerfd_ctx::hrtimer	file:
tnt	kernel/panic.c	/^struct tnt {$/;"	s	file:
tnts	kernel/panic.c	/^static const struct tnt tnts[] = {$/;"	v	typeref:struct:tnt	file:
to	mm/hugetlb.c	/^	long to;$/;"	m	struct:file_region	file:
to	mm/memcontrol.c	/^	struct mem_cgroup *to;$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::mem_cgroup	file:
to_kill	mm/memory-failure.c	/^struct to_kill {$/;"	s	file:
to_kthread	kernel/kthread.c	55;"	d	file:
to_module_attr	kernel/params.c	503;"	d	file:
to_module_kobject	kernel/params.c	504;"	d	file:
to_param_attr	kernel/params.c	522;"	d	file:
to_slab	mm/slub.c	4500;"	d	file:
to_slab_attr	mm/slub.c	4499;"	d	file:
tokens	fs/ext3/super.c	/^static const match_table_t tokens = {$/;"	v	file:
too_many_isolated	mm/compaction.c	/^static bool too_many_isolated(struct zone *zone)$/;"	f	file:
too_many_isolated	mm/vmscan.c	/^static int too_many_isolated(struct zone *zone, int file,$/;"	f	file:
too_many_workers	kernel/workqueue.c	/^static bool too_many_workers(struct worker_pool *pool)$/;"	f	file:
top_cgroup	kernel/cgroup.c	/^	struct cgroup top_cgroup;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::cgroup	file:
top_cpuset	kernel/cpuset.c	/^static struct cpuset top_cpuset = {$/;"	v	typeref:struct:cpuset	file:
torture_type	kernel/rcutorture.c	/^static char *torture_type = "rcu"; \/* What RCU implementation to torture. *\/$/;"	v	file:
total_forks	kernel/fork.c	/^unsigned long total_forks;	\/* Handle normal Linux uptimes. *\/$/;"	v
total_mapping_size	fs/binfmt_elf.c	/^static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr)$/;"	f	file:
total_objects	mm/slub.c	/^SLAB_ATTR_RO(total_objects);$/;"	v
total_objects_show	mm/slub.c	/^static ssize_t total_objects_show(struct kmem_cache *s, char *buf)$/;"	f	file:
total_pages	fs/direct-io.c	/^	int total_pages;		\/* doesn't change *\/$/;"	m	struct:dio_submit	file:
total_swap_pages	mm/swapfile.c	/^long total_swap_pages;$/;"	v
total_swapcache_pages	mm/swap_state.c	/^unsigned long total_swapcache_pages(void)$/;"	f
total_usage	mm/page_cgroup.c	/^static unsigned long total_usage;$/;"	v	file:
totalhigh	kernel/compat.c	/^	u32 totalhigh;$/;"	m	struct:compat_sysinfo	file:
totalhigh_pages	mm/highmem.c	/^EXPORT_SYMBOL(totalhigh_pages);$/;"	v
totalram	kernel/compat.c	/^	u32 totalram;$/;"	m	struct:compat_sysinfo	file:
totalram_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(totalram_pages);$/;"	v
totalswap	kernel/compat.c	/^	u32 totalswap;$/;"	m	struct:compat_sysinfo	file:
touch_all_softlockup_watchdogs	kernel/watchdog.c	/^void touch_all_softlockup_watchdogs(void)$/;"	f
touch_atime	fs/inode.c	/^EXPORT_SYMBOL(touch_atime);$/;"	v
touch_atime	fs/inode.c	/^void touch_atime(struct path *path)$/;"	f
touch_buffer	fs/buffer.c	/^EXPORT_SYMBOL(touch_buffer);$/;"	v
touch_buffer	fs/buffer.c	/^inline void touch_buffer(struct buffer_head *bh)$/;"	f
touch_mnt_namespace	fs/namespace.c	/^static void touch_mnt_namespace(struct mnt_namespace *ns)$/;"	f	file:
touch_nmi_watchdog	kernel/watchdog.c	/^EXPORT_SYMBOL(touch_nmi_watchdog);$/;"	v
touch_nmi_watchdog	kernel/watchdog.c	/^void touch_nmi_watchdog(void)$/;"	f
touch_softlockup_watchdog	kernel/watchdog.c	/^EXPORT_SYMBOL(touch_softlockup_watchdog);$/;"	v
touch_softlockup_watchdog	kernel/watchdog.c	/^void touch_softlockup_watchdog(void)$/;"	f
touch_softlockup_watchdog_sync	kernel/watchdog.c	/^void touch_softlockup_watchdog_sync(void)$/;"	f
touched	mm/slab.c	/^	unsigned int touched;$/;"	m	struct:array_cache	file:
tp_probes	kernel/tracepoint.c	/^struct tp_probes {$/;"	s	file:
trace	mm/kmemleak.c	/^	unsigned long trace[MAX_TRACE];	\/* stack trace *\/$/;"	m	struct:early_log	file:
trace	mm/kmemleak.c	/^	unsigned long trace[MAX_TRACE];$/;"	m	struct:kmemleak_object	file:
trace	mm/slub.c	/^SLAB_ATTR(trace);$/;"	v
trace	mm/slub.c	/^static void trace(struct kmem_cache *s, struct page *page, void *object,$/;"	f	file:
trace_hardirqs_off	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_off);$/;"	v
trace_hardirqs_off	kernel/lockdep.c	/^void trace_hardirqs_off(void)$/;"	f
trace_hardirqs_off_caller	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_off_caller);$/;"	v
trace_hardirqs_off_caller	kernel/lockdep.c	/^void trace_hardirqs_off_caller(unsigned long ip)$/;"	f
trace_hardirqs_on	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_on);$/;"	v
trace_hardirqs_on	kernel/lockdep.c	/^void trace_hardirqs_on(void)$/;"	f
trace_hardirqs_on_caller	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_on_caller);$/;"	v
trace_hardirqs_on_caller	kernel/lockdep.c	/^void trace_hardirqs_on_caller(unsigned long ip)$/;"	f
trace_len	mm/kmemleak.c	/^	unsigned int trace_len;		\/* stack trace length *\/$/;"	m	struct:early_log	file:
trace_len	mm/kmemleak.c	/^	unsigned int trace_len;$/;"	m	struct:kmemleak_object	file:
trace_show	mm/slub.c	/^static ssize_t trace_show(struct kmem_cache *s, char *buf)$/;"	f	file:
trace_softirqs_off	kernel/lockdep.c	/^void trace_softirqs_off(unsigned long ip)$/;"	f
trace_softirqs_on	kernel/lockdep.c	/^void trace_softirqs_on(unsigned long ip)$/;"	f
trace_store	mm/slub.c	/^static ssize_t trace_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
tracepoint_add_old_probes	kernel/tracepoint.c	/^static void tracepoint_add_old_probes(void *old)$/;"	f	file:
tracepoint_add_probe	kernel/tracepoint.c	/^tracepoint_add_probe(const char *name, void *probe, void *data)$/;"	f	file:
tracepoint_debug	kernel/tracepoint.c	/^static const int tracepoint_debug;$/;"	v	file:
tracepoint_entry	kernel/tracepoint.c	/^struct tracepoint_entry {$/;"	s	file:
tracepoint_entry_add_probe	kernel/tracepoint.c	/^tracepoint_entry_add_probe(struct tracepoint_entry *entry,$/;"	f	file:
tracepoint_entry_remove_probe	kernel/tracepoint.c	/^tracepoint_entry_remove_probe(struct tracepoint_entry *entry,$/;"	f	file:
tracepoint_get_iter	kernel/tracepoint.c	/^static void tracepoint_get_iter(struct tracepoint_iter *iter)$/;"	f	file:
tracepoint_get_iter_range	kernel/tracepoint.c	/^static int tracepoint_get_iter_range(struct tracepoint * const **tracepoint,$/;"	f	file:
tracepoint_iter_next	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_next);$/;"	v
tracepoint_iter_next	kernel/tracepoint.c	/^void tracepoint_iter_next(struct tracepoint_iter *iter)$/;"	f
tracepoint_iter_reset	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_reset);$/;"	v
tracepoint_iter_reset	kernel/tracepoint.c	/^void tracepoint_iter_reset(struct tracepoint_iter *iter)$/;"	f
tracepoint_iter_start	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_start);$/;"	v
tracepoint_iter_start	kernel/tracepoint.c	/^void tracepoint_iter_start(struct tracepoint_iter *iter)$/;"	f
tracepoint_iter_stop	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_stop);$/;"	v
tracepoint_iter_stop	kernel/tracepoint.c	/^void tracepoint_iter_stop(struct tracepoint_iter *iter)$/;"	f
tracepoint_module_coming	kernel/tracepoint.c	/^static int tracepoint_module_coming(struct module *mod)$/;"	f	file:
tracepoint_module_going	kernel/tracepoint.c	/^static int tracepoint_module_going(struct module *mod)$/;"	f	file:
tracepoint_module_nb	kernel/tracepoint.c	/^struct notifier_block tracepoint_module_nb = {$/;"	v	typeref:struct:notifier_block
tracepoint_module_notify	kernel/tracepoint.c	/^int tracepoint_module_notify(struct notifier_block *self,$/;"	f
tracepoint_probe_register	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_register);$/;"	v
tracepoint_probe_register	kernel/tracepoint.c	/^int tracepoint_probe_register(const char *name, void *probe, void *data)$/;"	f
tracepoint_probe_register_noupdate	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_register_noupdate);$/;"	v
tracepoint_probe_register_noupdate	kernel/tracepoint.c	/^int tracepoint_probe_register_noupdate(const char *name, void *probe,$/;"	f
tracepoint_probe_unregister	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_unregister);$/;"	v
tracepoint_probe_unregister	kernel/tracepoint.c	/^int tracepoint_probe_unregister(const char *name, void *probe, void *data)$/;"	f
tracepoint_probe_unregister_noupdate	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_unregister_noupdate);$/;"	v
tracepoint_probe_unregister_noupdate	kernel/tracepoint.c	/^int tracepoint_probe_unregister_noupdate(const char *name, void *probe,$/;"	f
tracepoint_probe_update_all	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_update_all);$/;"	v
tracepoint_probe_update_all	kernel/tracepoint.c	/^void tracepoint_probe_update_all(void)$/;"	f
tracepoint_remove_probe	kernel/tracepoint.c	/^tracepoint_remove_probe(const char *name, void *probe, void *data)$/;"	f	file:
tracepoint_table	kernel/tracepoint.c	/^static struct hlist_head tracepoint_table[TRACEPOINT_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
tracepoint_update_probe_range	kernel/tracepoint.c	/^static void tracepoint_update_probe_range(struct tracepoint * const *begin,$/;"	f	file:
tracepoint_update_probes	kernel/tracepoint.c	/^static void tracepoint_update_probes(void)$/;"	f	file:
track	mm/slub.c	/^struct track {$/;"	s	file:
track_item	mm/slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	g	file:
transfer_objects	mm/slab.c	/^static int transfer_objects(struct array_cache *to,$/;"	f	file:
transfer_pid	kernel/pid.c	/^void transfer_pid(struct task_struct *old, struct task_struct *new,$/;"	f
transmit	fs/compat_ioctl.c	/^	compat_int_t		transmit;$/;"	m	struct:ppp_option_data32	file:
trapno	mm/memory-failure.c	/^	int trapno;$/;"	m	struct:memory_failure_entry	file:
traverse	fs/seq_file.c	/^static int traverse(struct seq_file *m, loff_t offset)$/;"	f	file:
tree_contains_unbindable	fs/namespace.c	/^static inline int tree_contains_unbindable(struct mount *mnt)$/;"	f	file:
tree_count	kernel/auditsc.c	/^	int tree_count;$/;"	m	struct:audit_context	file:
tree_node	mm/memcontrol.c	/^	struct rb_node		tree_node;	\/* RB tree node *\/$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::rb_node	file:
trees	kernel/audit_tree.c	/^	struct list_head trees;		\/* with root here *\/$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::list_head	file:
trees	kernel/auditsc.c	/^	struct audit_tree_refs *trees, *first_trees;$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_tree_refs	file:
trim_marked	kernel/audit_tree.c	/^static void trim_marked(struct audit_tree *tree)$/;"	f	file:
true	kernel/panic.c	/^	char	true;$/;"	m	struct:tnt	file:
truncate64	fs/open.c	/^SYSCALL_DEFINE(truncate64)(const char __user * path, loff_t length)$/;"	f
truncate_complete_page	mm/truncate.c	/^truncate_complete_page(struct address_space *mapping, struct page *page)$/;"	f	file:
truncate_inode_page	mm/truncate.c	/^int truncate_inode_page(struct address_space *mapping, struct page *page)$/;"	f
truncate_inode_pages	mm/truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages);$/;"	v
truncate_inode_pages	mm/truncate.c	/^void truncate_inode_pages(struct address_space *mapping, loff_t lstart)$/;"	f
truncate_inode_pages_range	mm/truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages_range);$/;"	v
truncate_inode_pages_range	mm/truncate.c	/^void truncate_inode_pages_range(struct address_space *mapping,$/;"	f
truncate_mutex	fs/ext3/ext3.h	/^	struct mutex truncate_mutex;$/;"	m	struct:ext3_inode_info	typeref:struct:ext3_inode_info::mutex
truncate_pagecache	mm/truncate.c	/^EXPORT_SYMBOL(truncate_pagecache);$/;"	v
truncate_pagecache	mm/truncate.c	/^void truncate_pagecache(struct inode *inode, loff_t oldsize, loff_t newsize)$/;"	f
truncate_pagecache_range	mm/truncate.c	/^EXPORT_SYMBOL(truncate_pagecache_range);$/;"	v
truncate_pagecache_range	mm/truncate.c	/^void truncate_pagecache_range(struct inode *inode, loff_t lstart, loff_t lend)$/;"	f
truncate_partial_page	mm/truncate.c	/^static inline void truncate_partial_page(struct page *page, unsigned partial)$/;"	f	file:
truncate_restart_transaction	fs/ext3/inode.c	/^static int truncate_restart_transaction(handle_t *handle, struct inode *inode)$/;"	f	file:
truncate_setsize	mm/truncate.c	/^EXPORT_SYMBOL(truncate_setsize);$/;"	v
truncate_setsize	mm/truncate.c	/^void truncate_setsize(struct inode *inode, loff_t newsize)$/;"	f
try_check_zero	kernel/srcu.c	/^static bool try_check_zero(struct srcu_struct *sp, int idx, int trycount)$/;"	f	file:
try_context_readahead	mm/readahead.c	/^static int try_context_readahead(struct address_space *mapping,$/;"	f	file:
try_force_unload	kernel/module.c	/^static inline int try_force_unload(unsigned int flags)$/;"	f	file:
try_get_ioctx	fs/aio.c	/^static inline int try_get_ioctx(struct kioctx *kioctx)$/;"	f	file:
try_get_mem_cgroup_from_mm	mm/memcontrol.c	/^struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm)$/;"	f
try_get_mem_cgroup_from_page	mm/memcontrol.c	/^struct mem_cgroup *try_get_mem_cgroup_from_page(struct page *page)$/;"	f
try_module_get	kernel/module.c	/^EXPORT_SYMBOL(try_module_get);$/;"	v
try_module_get	kernel/module.c	/^bool try_module_get(struct module *module)$/;"	f
try_offline_node	mm/memory_hotplug.c	/^EXPORT_SYMBOL(try_offline_node);$/;"	v
try_offline_node	mm/memory_hotplug.c	/^void try_offline_node(int nid)$/;"	f
try_purge_vmap_area_lazy	mm/vmalloc.c	/^static void try_purge_vmap_area_lazy(void)$/;"	f	file:
try_queue_kicked_iocb	fs/aio.c	/^static void try_queue_kicked_iocb(struct kiocb *iocb)$/;"	f	file:
try_set_zonelist_oom	mm/oom_kill.c	/^int try_set_zonelist_oom(struct zonelist *zonelist, gfp_t gfp_mask)$/;"	f
try_stop_cpus	kernel/stop_machine.c	/^int try_stop_cpus(const struct cpumask *cpumask, cpu_stop_fn_t fn, void *arg)$/;"	f
try_stop_module	kernel/module.c	/^static int try_stop_module(struct module *mod, int flags, int *forced)$/;"	f	file:
try_to_ascend	fs/dcache.c	/^static struct dentry *try_to_ascend(struct dentry *old, int locked, unsigned seq)$/;"	f	file:
try_to_compact_pages	mm/compaction.c	/^unsigned long try_to_compact_pages(struct zonelist *zonelist,$/;"	f
try_to_del_timer_sync	kernel/timer.c	/^EXPORT_SYMBOL(try_to_del_timer_sync);$/;"	v
try_to_del_timer_sync	kernel/timer.c	/^int try_to_del_timer_sync(struct timer_list *timer)$/;"	f
try_to_extend_reservation	fs/ext3/balloc.c	/^static void try_to_extend_reservation(struct ext3_reserve_window_node *my_rsv,$/;"	f	file:
try_to_extend_transaction	fs/ext3/inode.c	/^static int try_to_extend_transaction(handle_t *handle, struct inode *inode)$/;"	f	file:
try_to_force_load	kernel/module.c	/^static int try_to_force_load(struct module *mod, const char *reason)$/;"	f	file:
try_to_free_buffers	fs/buffer.c	/^EXPORT_SYMBOL(try_to_free_buffers);$/;"	v
try_to_free_buffers	fs/buffer.c	/^int try_to_free_buffers(struct page *page)$/;"	f
try_to_free_low	mm/hugetlb.c	/^static inline void try_to_free_low(struct hstate *h, unsigned long count,$/;"	f	file:
try_to_free_low	mm/hugetlb.c	/^static void try_to_free_low(struct hstate *h, unsigned long count,$/;"	f	file:
try_to_free_mem_cgroup_pages	mm/vmscan.c	/^unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *memcg,$/;"	f
try_to_free_pages	mm/vmscan.c	/^unsigned long try_to_free_pages(struct zonelist *zonelist, int order,$/;"	f
try_to_free_swap	mm/swapfile.c	/^int try_to_free_swap(struct page *page)$/;"	f
try_to_grab_pending	kernel/workqueue.c	/^static int try_to_grab_pending(struct work_struct *work, bool is_dwork,$/;"	f	file:
try_to_merge_one_page	mm/ksm.c	/^static int try_to_merge_one_page(struct vm_area_struct *vma,$/;"	f	file:
try_to_merge_two_pages	mm/ksm.c	/^static struct page *try_to_merge_two_pages(struct rmap_item *rmap_item,$/;"	f	file:
try_to_merge_with_ksm_page	mm/ksm.c	/^static int try_to_merge_with_ksm_page(struct rmap_item *rmap_item,$/;"	f	file:
try_to_munlock	mm/rmap.c	/^int try_to_munlock(struct page *page)$/;"	f
try_to_optimize_kprobe	kernel/kprobes.c	/^static __kprobes void try_to_optimize_kprobe(struct kprobe *p)$/;"	f	file:
try_to_optimize_kprobe	kernel/kprobes.c	908;"	d	file:
try_to_release_page	mm/filemap.c	/^EXPORT_SYMBOL(try_to_release_page);$/;"	v
try_to_release_page	mm/filemap.c	/^int try_to_release_page(struct page *page, gfp_t gfp_mask)$/;"	f
try_to_take_rt_mutex	kernel/rtmutex.c	/^static int try_to_take_rt_mutex(struct rt_mutex *lock, struct task_struct *task,$/;"	f	file:
try_to_unmap	mm/rmap.c	/^int try_to_unmap(struct page *page, enum ttu_flags flags)$/;"	f
try_to_unmap_anon	mm/rmap.c	/^static int try_to_unmap_anon(struct page *page, enum ttu_flags flags)$/;"	f	file:
try_to_unmap_cluster	mm/rmap.c	/^static int try_to_unmap_cluster(unsigned long cursor, unsigned int *mapcount,$/;"	f	file:
try_to_unmap_file	mm/rmap.c	/^static int try_to_unmap_file(struct page *page, enum ttu_flags flags)$/;"	f	file:
try_to_unmap_ksm	mm/ksm.c	/^int try_to_unmap_ksm(struct page *page, enum ttu_flags flags)$/;"	f
try_to_unmap_one	mm/rmap.c	/^int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,$/;"	f
try_to_unuse	mm/swapfile.c	/^int try_to_unuse(unsigned int type, bool frontswap,$/;"	f
try_to_writeback_inodes_sb	fs/fs-writeback.c	/^EXPORT_SYMBOL(try_to_writeback_inodes_sb);$/;"	v
try_to_writeback_inodes_sb	fs/fs-writeback.c	/^int try_to_writeback_inodes_sb(struct super_block *sb, enum wb_reason reason)$/;"	f
try_to_writeback_inodes_sb_nr	fs/fs-writeback.c	/^EXPORT_SYMBOL(try_to_writeback_inodes_sb_nr);$/;"	v
try_to_writeback_inodes_sb_nr	fs/fs-writeback.c	/^int try_to_writeback_inodes_sb_nr(struct super_block *sb,$/;"	f
trylock_page	include/linux/pagemap.h	/^static inline int trylock_page(struct page *page)$/;"	f
ts_nsec	kernel/printk.c	/^	u64 ts_nsec;			\/* time of first print *\/$/;"	m	struct:cont	file:
ts_nsec	kernel/printk.c	/^	u64 ts_nsec;		\/* timestamp in nanoseconds *\/$/;"	m	struct:log	file:
tsk	mm/memory-failure.c	/^	struct task_struct *tsk;$/;"	m	struct:to_kill	typeref:struct:to_kill::task_struct	file:
tsk_fork_get_node	kernel/kthread.c	/^int tsk_fork_get_node(struct task_struct *tsk)$/;"	f
tv1	kernel/timer.c	/^	struct tvec_root tv1;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec_root	file:
tv2	kernel/timer.c	/^	struct tvec tv2;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tv3	kernel/timer.c	/^	struct tvec tv3;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tv4	kernel/timer.c	/^	struct tvec tv4;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tv5	kernel/timer.c	/^	struct tvec tv5;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tvec	kernel/timer.c	/^struct tvec {$/;"	s	file:
tvec_base	kernel/timer.c	/^struct tvec_base {$/;"	s	file:
tvec_root	kernel/timer.c	/^struct tvec_root {$/;"	s	file:
tvp	fs/compat.c	/^	compat_uptr_t tvp;$/;"	m	struct:compat_sel_arg_struct	file:
tvp	fs/select.c	/^	struct timeval __user *tvp;$/;"	m	struct:sel_arg_struct	typeref:struct:sel_arg_struct::__user	file:
two	kernel/sysctl.c	/^static int __maybe_unused two = 2;$/;"	v	file:
type	fs/binfmt_elf.c	/^	int type;$/;"	m	struct:memelfnote	file:
type	fs/binfmt_elf_fdpic.c	/^	int type;$/;"	m	struct:memelfnote	file:
type	fs/compat_ioctl.c	/^	int32_t		type;$/;"	m	struct:compat_video_event	file:
type	fs/compat_ioctl.c	/^        compat_int_t    type;$/;"	m	struct:serial_struct32	file:
type	kernel/auditsc.c	/^	int			type;$/;"	m	struct:audit_aux_data	file:
type	kernel/auditsc.c	/^	int type;$/;"	m	struct:audit_context	file:
type	kernel/auditsc.c	/^	unsigned char		type;		\/* record type *\/$/;"	m	struct:audit_names	file:
type	kernel/cgroup.c	/^	struct cftype			*type;$/;"	m	struct:cfent	typeref:struct:cfent::cftype	file:
type	kernel/cgroup.c	/^	struct { enum cgroup_filetype type; struct pid_namespace *ns; } key;$/;"	m	struct:cgroup_pidlist::__anon54	typeref:enum:cgroup_pidlist::__anon54::cgroup_filetype	file:
type	kernel/kallsyms.c	/^	char type;$/;"	m	struct:kallsym_iter	file:
u	fs/compat_ioctl.c	/^	} u;$/;"	m	struct:compat_video_event	typeref:union:compat_video_event::__anon26	file:
u	kernel/tracepoint.c	/^	} u;$/;"	m	struct:tp_probes	typeref:union:tp_probes::__anon64	file:
uevent_filter	kernel/params.c	/^static int uevent_filter(struct kset *kset, struct kobject *kobj)$/;"	f	file:
uevent_filter	mm/slub.c	/^static int uevent_filter(struct kset *kset, struct kobject *kobj)$/;"	f	file:
uevent_helper	kernel/ksysfs.c	/^KERNEL_ATTR_RW(uevent_helper);$/;"	v
uevent_helper_show	kernel/ksysfs.c	/^static ssize_t uevent_helper_show(struct kobject *kobj,$/;"	f	file:
uevent_helper_store	kernel/ksysfs.c	/^static ssize_t uevent_helper_store(struct kobject *kobj,$/;"	f	file:
uevent_seqnum	kernel/ksysfs.c	/^KERNEL_ATTR_RO(uevent_seqnum);$/;"	v
uevent_seqnum_show	kernel/ksysfs.c	/^static ssize_t uevent_seqnum_show(struct kobject *kobj,$/;"	f	file:
uid	fs/compat.c	/^	__compat_uid_t uid;$/;"	m	struct:compat_ncp_mount_data	file:
uid	fs/compat.c	/^	compat_ulong_t uid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
uid	kernel/auditsc.c	/^			kuid_t			uid;$/;"	m	struct:audit_context::__anon43::__anon45	file:
uid	kernel/auditsc.c	/^	kuid_t			uid;$/;"	m	struct:audit_names	file:
uid	kernel/auditsc.c	/^	kuid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
uid	mm/scm.h	/^	uid_t uid;$/;"	m	struct:__anon15
uid	mm/scm.h	/^	uid_t uid;$/;"	m	struct:__anon17
uid_cache_init	kernel/user.c	/^module_init(uid_cache_init);$/;"	v
uid_cache_init	kernel/user.c	/^static int __init uid_cache_init(void)$/;"	f	file:
uid_cachep	kernel/user.c	/^static struct kmem_cache *uid_cachep;$/;"	v	typeref:struct:kmem_cache	file:
uid_hash_find	kernel/user.c	/^static struct user_struct *uid_hash_find(kuid_t uid, struct hlist_head *hashent)$/;"	f	file:
uid_hash_insert	kernel/user.c	/^static void uid_hash_insert(struct user_struct *up, struct hlist_head *hashent)$/;"	f	file:
uid_hash_remove	kernel/user.c	/^static void uid_hash_remove(struct user_struct *up)$/;"	f	file:
uid_m_show	kernel/user_namespace.c	/^static int uid_m_show(struct seq_file *seq, void *v)$/;"	f	file:
uid_m_start	kernel/user_namespace.c	/^static void *uid_m_start(struct seq_file *seq, loff_t *ppos)$/;"	f	file:
uidhash_table	kernel/user.c	/^struct hlist_head uidhash_table[UIDHASH_SZ];$/;"	v	typeref:struct:hlist_head
uidhashentry	kernel/user.c	68;"	d	file:
ulong2long	kernel/rcutree_trace.c	49;"	d	file:
umh_complete	kernel/kmod.c	/^static void umh_complete(struct subprocess_info *sub_info)$/;"	f	file:
umh_pipe_setup	fs/coredump.c	/^static int umh_pipe_setup(struct subprocess_info *info, struct cred *new)$/;"	f	file:
umount_tree	fs/namespace.c	/^void umount_tree(struct mount *mnt, int propagate, struct list_head *kill)$/;"	f
unblock_all_signals	kernel/signal.c	/^EXPORT_SYMBOL(unblock_all_signals);$/;"	v
unblock_all_signals	kernel/signal.c	/^unblock_all_signals(void)$/;"	f
unbound_std_worker_pools	kernel/workqueue.c	/^static struct worker_pool unbound_std_worker_pools[NR_STD_WORKER_POOLS];$/;"	v	typeref:struct:worker_pool	file:
under_oom	mm/memcontrol.c	/^	atomic_t	under_oom;$/;"	m	struct:mem_cgroup	file:
undo_isolate_page_range	mm/page_isolation.c	/^int undo_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
unevict	mm/memory-failure.c	747;"	d	file:
unevict	mm/memory-failure.c	804;"	d	file:
unfreeze_cgroup	kernel/cgroup_freezer.c	/^static void unfreeze_cgroup(struct freezer *freezer)$/;"	f	file:
unfreeze_partials	mm/slub.c	/^static void unfreeze_partials(struct kmem_cache *s,$/;"	f	file:
unhandled_signal	kernel/signal.c	/^int unhandled_signal(struct task_struct *tsk, int sig)$/;"	f
units	mm/slob.c	/^	slobidx_t units;$/;"	m	struct:slob_block	file:
unlazy_walk	fs/namei.c	/^static int unlazy_walk(struct nameidata *nd, struct dentry *dentry)$/;"	f	file:
unlink_anon_vmas	mm/rmap.c	/^void unlink_anon_vmas(struct vm_area_struct *vma)$/;"	f
unlink_file_vma	mm/mmap.c	/^void unlink_file_vma(struct vm_area_struct *vma)$/;"	f
unlock_anon_vma_root	mm/rmap.c	/^static inline void unlock_anon_vma_root(struct anon_vma *root)$/;"	f	file:
unlock_buffer	fs/buffer.c	/^EXPORT_SYMBOL(unlock_buffer);$/;"	v
unlock_buffer	fs/buffer.c	/^void unlock_buffer(struct buffer_head *bh)$/;"	f
unlock_flocks	fs/locks.c	/^EXPORT_SYMBOL_GPL(unlock_flocks);$/;"	v
unlock_flocks	fs/locks.c	/^void unlock_flocks(void)$/;"	f
unlock_futex_pi	kernel/futex.c	/^static int unlock_futex_pi(u32 __user *uaddr, u32 uval)$/;"	f	file:
unlock_hrtimer_base	kernel/hrtimer.c	/^void unlock_hrtimer_base(const struct hrtimer *timer, unsigned long *flags)$/;"	f	file:
unlock_kmap	mm/highmem.c	85;"	d	file:
unlock_kmap	mm/highmem.c	90;"	d	file:
unlock_kmap_any	mm/highmem.c	87;"	d	file:
unlock_kmap_any	mm/highmem.c	93;"	d	file:
unlock_memory_hotplug	mm/memory_hotplug.c	/^void unlock_memory_hotplug(void)$/;"	f
unlock_mount	fs/namespace.c	/^static void unlock_mount(struct path *path)$/;"	f	file:
unlock_new_inode	fs/inode.c	/^EXPORT_SYMBOL(unlock_new_inode);$/;"	v
unlock_new_inode	fs/inode.c	/^void unlock_new_inode(struct inode *inode)$/;"	f
unlock_or_release_subpool	mm/hugetlb.c	/^static inline void unlock_or_release_subpool(struct hugepage_subpool *spool)$/;"	f	file:
unlock_page	mm/filemap.c	/^EXPORT_SYMBOL(unlock_page);$/;"	v
unlock_page	mm/filemap.c	/^void unlock_page(struct page *page)$/;"	f
unlock_rcu_walk	fs/namei.c	/^static inline void unlock_rcu_walk(void)$/;"	f	file:
unlock_rename	fs/namei.c	/^EXPORT_SYMBOL(unlock_rename);$/;"	v
unlock_rename	fs/namei.c	/^void unlock_rename(struct dentry *p1, struct dentry *p2)$/;"	f
unlock_timer	kernel/posix-timers.c	/^static inline void unlock_timer(struct k_itimer *timr, unsigned long flags)$/;"	f	file:
unmap_and_move	mm/migrate.c	/^static int unmap_and_move(new_page_t get_new_page, unsigned long private,$/;"	f	file:
unmap_and_move_huge_page	mm/migrate.c	/^static int unmap_and_move_huge_page(new_page_t get_new_page,$/;"	f	file:
unmap_cpu_on_node	mm/memory_hotplug.c	/^static void unmap_cpu_on_node(void *data)$/;"	f	file:
unmap_hugepage_range	mm/hugetlb.c	/^void unmap_hugepage_range(struct vm_area_struct *vma, unsigned long start,$/;"	f
unmap_kernel_range	mm/vmalloc.c	/^void unmap_kernel_range(unsigned long addr, unsigned long size)$/;"	f
unmap_kernel_range_noflush	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(unmap_kernel_range_noflush);$/;"	v
unmap_kernel_range_noflush	mm/vmalloc.c	/^void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)$/;"	f
unmap_mapping_range	mm/memory.c	/^EXPORT_SYMBOL(unmap_mapping_range);$/;"	v
unmap_mapping_range	mm/memory.c	/^void unmap_mapping_range(struct address_space *mapping,$/;"	f
unmap_mapping_range	mm/nommu.c	/^EXPORT_SYMBOL(unmap_mapping_range);$/;"	v
unmap_mapping_range	mm/nommu.c	/^void unmap_mapping_range(struct address_space *mapping,$/;"	f
unmap_mapping_range_list	mm/memory.c	/^static inline void unmap_mapping_range_list(struct list_head *head,$/;"	f	file:
unmap_mapping_range_tree	mm/memory.c	/^static inline void unmap_mapping_range_tree(struct rb_root *root,$/;"	f	file:
unmap_mapping_range_vma	mm/memory.c	/^static void unmap_mapping_range_vma(struct vm_area_struct *vma,$/;"	f	file:
unmap_page_range	mm/memory.c	/^static void unmap_page_range(struct mmu_gather *tlb,$/;"	f	file:
unmap_ref_private	mm/hugetlb.c	/^static int unmap_ref_private(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
unmap_region	mm/mmap.c	/^static void unmap_region(struct mm_struct *mm,$/;"	f	file:
unmap_single_vma	mm/memory.c	/^static void unmap_single_vma(struct mmu_gather *tlb,$/;"	f	file:
unmap_underlying_metadata	fs/buffer.c	/^EXPORT_SYMBOL(unmap_underlying_metadata);$/;"	v
unmap_underlying_metadata	fs/buffer.c	/^void unmap_underlying_metadata(struct block_device *bdev, sector_t block)$/;"	f
unmap_vmap_area	mm/vmalloc.c	/^static void unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
unmap_vmas	mm/memory.c	/^void unmap_vmas(struct mmu_gather *tlb,$/;"	f
unmap_xip_hugetlb_range	mm/memory.c	/^EXPORT_SYMBOL(unmap_xip_hugetlb_range);$/;"	v
unmap_xip_hugetlb_range	mm/memory.c	/^void unmap_xip_hugetlb_range(struct vm_area_struct *vma,$/;"	f
unmapped_area	mm/mmap.c	/^unsigned long unmapped_area(struct vm_unmapped_area_info *info)$/;"	f
unmapped_area_topdown	mm/mmap.c	/^unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info)$/;"	f
unmerge_and_remove_all_rmap_items	mm/ksm.c	/^static int unmerge_and_remove_all_rmap_items(void)$/;"	f	file:
unmerge_ksm_pages	mm/ksm.c	/^static int unmerge_ksm_pages(struct vm_area_struct *vma,$/;"	f	file:
unnamed_dev_start	fs/super.c	/^static int unnamed_dev_start = 0; \/* don't bother trying below it *\/$/;"	v	file:
unoptimize_all_kprobes	kernel/kprobes.c	/^static void __kprobes unoptimize_all_kprobes(void)$/;"	f	file:
unoptimize_kprobe	kernel/kprobes.c	/^static __kprobes void unoptimize_kprobe(struct kprobe *p, bool force)$/;"	f	file:
unoptimize_kprobe	kernel/kprobes.c	905;"	d	file:
unpoison_memory	mm/memory-failure.c	/^EXPORT_SYMBOL(unpoison_memory);$/;"	v
unpoison_memory	mm/memory-failure.c	/^int unpoison_memory(unsigned long pfn)$/;"	f
unpoison_page	mm/debug-pagealloc.c	/^static void unpoison_page(struct page *page)$/;"	f	file:
unpoison_pages	mm/debug-pagealloc.c	/^static void unpoison_pages(struct page *page, int n)$/;"	f	file:
unqueue_me	kernel/futex.c	/^static int unqueue_me(struct futex_q *q)$/;"	f	file:
unquote	fs/binfmt_misc.c	/^static int unquote(char *from)$/;"	f	file:
unreferenced_object	mm/kmemleak.c	/^static bool unreferenced_object(struct kmemleak_object *object)$/;"	f	file:
unregister_binfmt	fs/exec.c	/^EXPORT_SYMBOL(unregister_binfmt);$/;"	v
unregister_binfmt	fs/exec.c	/^void unregister_binfmt(struct linux_binfmt * fmt)$/;"	f
unregister_chrdev_region	fs/char_dev.c	/^EXPORT_SYMBOL(unregister_chrdev_region);$/;"	v
unregister_chrdev_region	fs/char_dev.c	/^void unregister_chrdev_region(dev_t from, unsigned count)$/;"	f
unregister_console	kernel/printk.c	/^EXPORT_SYMBOL(unregister_console);$/;"	v
unregister_console	kernel/printk.c	/^int unregister_console(struct console *console)$/;"	f
unregister_cpu_notifier	kernel/cpu.c	/^EXPORT_SYMBOL(unregister_cpu_notifier);$/;"	v
unregister_cpu_notifier	kernel/cpu.c	/^void __ref unregister_cpu_notifier(struct notifier_block *nb)$/;"	f
unregister_die_notifier	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(unregister_die_notifier);$/;"	v
unregister_die_notifier	kernel/notifier.c	/^int unregister_die_notifier(struct notifier_block *nb)$/;"	f
unregister_exec_domain	kernel/exec_domain.c	/^EXPORT_SYMBOL(unregister_exec_domain);$/;"	v
unregister_exec_domain	kernel/exec_domain.c	/^unregister_exec_domain(struct exec_domain *ep)$/;"	f
unregister_filesystem	fs/filesystems.c	/^EXPORT_SYMBOL(unregister_filesystem);$/;"	v
unregister_filesystem	fs/filesystems.c	/^int unregister_filesystem(struct file_system_type * fs)$/;"	f
unregister_jprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_jprobe);$/;"	v
unregister_jprobe	kernel/kprobes.c	/^void __kprobes unregister_jprobe(struct jprobe *jp)$/;"	f
unregister_jprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_jprobes);$/;"	v
unregister_jprobes	kernel/kprobes.c	/^void __kprobes unregister_jprobes(struct jprobe **jps, int num)$/;"	f
unregister_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kprobe);$/;"	v
unregister_kprobe	kernel/kprobes.c	/^void __kprobes unregister_kprobe(struct kprobe *p)$/;"	f
unregister_kprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kprobes);$/;"	v
unregister_kprobes	kernel/kprobes.c	/^void __kprobes unregister_kprobes(struct kprobe **kps, int num)$/;"	f
unregister_kretprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kretprobe);$/;"	v
unregister_kretprobe	kernel/kprobes.c	/^void __kprobes unregister_kretprobe(struct kretprobe *rp)$/;"	f
unregister_kretprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kretprobes);$/;"	v
unregister_kretprobes	kernel/kprobes.c	/^void __kprobes unregister_kretprobes(struct kretprobe **rps, int num)$/;"	f
unregister_module_notifier	kernel/module.c	/^EXPORT_SYMBOL(unregister_module_notifier);$/;"	v
unregister_module_notifier	kernel/module.c	/^int unregister_module_notifier(struct notifier_block * nb)$/;"	f
unregister_oom_notifier	mm/oom_kill.c	/^EXPORT_SYMBOL_GPL(unregister_oom_notifier);$/;"	v
unregister_oom_notifier	mm/oom_kill.c	/^int unregister_oom_notifier(struct notifier_block *nb)$/;"	f
unregister_reboot_notifier	kernel/sys.c	/^EXPORT_SYMBOL(unregister_reboot_notifier);$/;"	v
unregister_reboot_notifier	kernel/sys.c	/^int unregister_reboot_notifier(struct notifier_block *nb)$/;"	f
unregister_shrinker	mm/vmscan.c	/^EXPORT_SYMBOL(unregister_shrinker);$/;"	v
unregister_shrinker	mm/vmscan.c	/^void unregister_shrinker(struct shrinker *shrinker)$/;"	f
unroll_tree_refs	kernel/auditsc.c	/^static void unroll_tree_refs(struct audit_context *ctx,$/;"	f	file:
unset_migratetype_isolate	mm/page_isolation.c	/^void unset_migratetype_isolate(struct page *page, unsigned migratetype)$/;"	f
unset_module_core_ro_nx	kernel/module.c	/^static void unset_module_core_ro_nx(struct module *mod) { }$/;"	f	file:
unset_module_core_ro_nx	kernel/module.c	/^static void unset_module_core_ro_nx(struct module *mod)$/;"	f	file:
unset_module_init_ro_nx	kernel/module.c	/^static void unset_module_init_ro_nx(struct module *mod) { }$/;"	f	file:
unset_module_init_ro_nx	kernel/module.c	/^static void unset_module_init_ro_nx(struct module *mod)$/;"	f	file:
unshare_fd	kernel/fork.c	/^static int unshare_fd(unsigned long unshare_flags, struct files_struct **new_fdp)$/;"	f	file:
unshare_files	kernel/fork.c	/^int unshare_files(struct files_struct **displaced)$/;"	f
unshare_fs	kernel/fork.c	/^static int unshare_fs(unsigned long unshare_flags, struct fs_struct **new_fsp)$/;"	f	file:
unshare_fs_struct	fs/fs_struct.c	/^EXPORT_SYMBOL_GPL(unshare_fs_struct);$/;"	v
unshare_fs_struct	fs/fs_struct.c	/^int unshare_fs_struct(void)$/;"	f
unshare_nsproxy_namespaces	kernel/nsproxy.c	/^int unshare_nsproxy_namespaces(unsigned long unshare_flags,$/;"	f
unshare_userns	kernel/user_namespace.c	/^int unshare_userns(unsigned long unshare_flags, struct cred **new_cred)$/;"	f
unsigned_offsets	fs/read_write.c	/^static inline int unsigned_offsets(struct file *file)$/;"	f	file:
unstable_tree_search_insert	mm/ksm.c	/^struct rmap_item *unstable_tree_search_insert(struct rmap_item *rmap_item,$/;"	f	file:
untag_chunk	kernel/audit_tree.c	/^static void untag_chunk(struct node *p)$/;"	f	file:
unusable_file_ops	mm/vmstat.c	/^static const struct file_operations unusable_file_ops = {$/;"	v	typeref:struct:file_operations	file:
unusable_free_index	mm/vmstat.c	/^static int unusable_free_index(unsigned int order,$/;"	f	file:
unusable_op	mm/vmstat.c	/^static const struct seq_operations unusable_op = {$/;"	v	typeref:struct:seq_operations	file:
unusable_open	mm/vmstat.c	/^static int unusable_open(struct inode *inode, struct file *file)$/;"	f	file:
unusable_show	mm/vmstat.c	/^static int unusable_show(struct seq_file *m, void *arg)$/;"	f	file:
unusable_show_print	mm/vmstat.c	/^static void unusable_show_print(struct seq_file *m,$/;"	f	file:
unuse_mm	mm/mmu_context.c	/^EXPORT_SYMBOL_GPL(unuse_mm);$/;"	v
unuse_mm	mm/mmu_context.c	/^void unuse_mm(struct mm_struct *mm)$/;"	f
unuse_mm	mm/swapfile.c	/^static int unuse_mm(struct mm_struct *mm,$/;"	f	file:
unuse_pmd_range	mm/swapfile.c	/^static inline int unuse_pmd_range(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
unuse_pte	mm/swapfile.c	/^static int unuse_pte(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
unuse_pte_range	mm/swapfile.c	/^static int unuse_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
unuse_pud_range	mm/swapfile.c	/^static inline int unuse_pud_range(struct vm_area_struct *vma, pgd_t *pgd,$/;"	f	file:
unuse_vma	mm/swapfile.c	/^static int unuse_vma(struct vm_area_struct *vma,$/;"	f	file:
unused	fs/compat_ioctl.c	/^	int unused;$/;"	m	struct:compat_sg_req_info	file:
unused	fs/ext3/ext3.h	/^	__u16 unused;$/;"	m	struct:ext3_new_group_data
unused	fs/ext3/ext3.h	/^	__u16 unused;$/;"	m	struct:ext3_new_group_input
unused_flags	fs/ext3/namei.c	/^		u8 unused_flags;$/;"	m	struct:dx_root::dx_root_info	file:
up	kernel/semaphore.c	/^	int up;$/;"	m	struct:semaphore_waiter	file:
up	kernel/semaphore.c	/^EXPORT_SYMBOL(up);$/;"	v
up	kernel/semaphore.c	/^void up(struct semaphore *sem)$/;"	f
up_read	kernel/rwsem.c	/^EXPORT_SYMBOL(up_read);$/;"	v
up_read	kernel/rwsem.c	/^void up_read(struct rw_semaphore *sem)$/;"	f
up_write	kernel/rwsem.c	/^EXPORT_SYMBOL(up_write);$/;"	v
up_write	kernel/rwsem.c	/^void up_write(struct rw_semaphore *sem)$/;"	f
update_and_free_page	mm/hugetlb.c	/^static void update_and_free_page(struct hstate *h, struct page *page)$/;"	f	file:
update_backups	fs/ext3/resize.c	/^static void update_backups(struct super_block *sb,$/;"	f	file:
update_checksum	mm/kmemleak.c	/^static bool update_checksum(struct kmemleak_object *object)$/;"	f	file:
update_console_cmdline	kernel/printk.c	/^int update_console_cmdline(char *name, int idx, char *name_new, int idx_new, char *options)$/;"	f
update_cpumask	kernel/cpuset.c	/^static int update_cpumask(struct cpuset *cs, struct cpuset *trialcs,$/;"	f	file:
update_dirty_limit	mm/page-writeback.c	/^static void update_dirty_limit(unsigned long thresh, unsigned long dirty)$/;"	f	file:
update_domain_attr	kernel/cpuset.c	/^update_domain_attr(struct sched_domain_attr *dattr, struct cpuset *c)$/;"	f	file:
update_domain_attr_tree	kernel/cpuset.c	/^static void update_domain_attr_tree(struct sched_domain_attr *dattr,$/;"	f	file:
update_file_sizes	fs/ext3/inode.c	/^static void update_file_sizes(struct inode *inode, loff_t pos, unsigned copied)$/;"	f	file:
update_flag	kernel/cpuset.c	/^static int update_flag(cpuset_flagbits_t bit, struct cpuset *cs,$/;"	f	file:
update_gt_cputime	kernel/posix-cpu-timers.c	/^static void update_gt_cputime(struct task_cputime *a, struct task_cputime *b)$/;"	f	file:
update_if_frozen	kernel/cgroup_freezer.c	/^static void update_if_frozen(struct cgroup *cgroup)$/;"	f	file:
update_iter	kernel/kallsyms.c	/^static int update_iter(struct kallsym_iter *iter, loff_t pos)$/;"	f	file:
update_lsm_rule	kernel/auditfilter.c	/^static int update_lsm_rule(struct audit_krule *r)$/;"	f	file:
update_mnt_policy	fs/namespace.c	/^void update_mnt_policy(struct user_namespace *userns)$/;"	f
update_nodemask	kernel/cpuset.c	/^static int update_nodemask(struct cpuset *cs, struct cpuset *trialcs,$/;"	f	file:
update_nr_listpages	mm/compaction.c	/^static void update_nr_listpages(struct compact_control *cc)$/;"	f	file:
update_page_reclaim_stat	mm/swap.c	/^static void update_page_reclaim_stat(struct lruvec *lruvec,$/;"	f	file:
update_pageblock_skip	mm/compaction.c	/^static void update_pageblock_skip(struct compact_control *cc,$/;"	f	file:
update_process_times	kernel/timer.c	/^void update_process_times(int user_tick)$/;"	f
update_relax_domain_level	kernel/cpuset.c	/^static int update_relax_domain_level(struct cpuset *cs, s64 val)$/;"	f	file:
update_removable_memblocks	mm/scm.c	/^static void update_removable_memblocks()$/;"	f	file:
update_rlimit_cpu	kernel/posix-cpu-timers.c	/^void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new)$/;"	f
update_rmtp	kernel/hrtimer.c	/^static int update_rmtp(struct hrtimer *timer, struct timespec __user *rmtp)$/;"	f	file:
update_tasks_cpumask	kernel/cpuset.c	/^static void update_tasks_cpumask(struct cpuset *cs, struct ptr_heap *heap)$/;"	f	file:
update_tasks_flags	kernel/cpuset.c	/^static void update_tasks_flags(struct cpuset *cs, struct ptr_heap *heap)$/;"	f	file:
update_tasks_nodemask	kernel/cpuset.c	/^static void update_tasks_nodemask(struct cpuset *cs, const nodemask_t *oldmem,$/;"	f	file:
update_time	fs/inode.c	/^static int update_time(struct inode *inode, struct timespec *time, int flags)$/;"	f	file:
update_vmcoreinfo_note	kernel/kexec.c	/^static void update_vmcoreinfo_note(void)$/;"	f	file:
uptime	kernel/compat.c	/^	s32 uptime;$/;"	m	struct:compat_sysinfo	file:
usage	kernel/seccomp.c	/^	atomic_t usage;$/;"	m	struct:seccomp_filter	file:
usage_in_excess	mm/memcontrol.c	/^	unsigned long long	usage_in_excess;\/* Set to the value by which *\/$/;"	m	struct:mem_cgroup_per_zone	file:
usage_match	kernel/lockdep.c	/^static inline int usage_match(struct lock_list *entry, void *bit)$/;"	f	file:
usage_str	kernel/lockdep.c	/^static const char *usage_str[] =$/;"	v	file:
use_bip_pool	fs/bio-integrity.c	/^static inline int use_bip_pool(unsigned int idx)$/;"	f	file:
use_count	kernel/cgroup.c	/^	int use_count;$/;"	m	struct:cgroup_pidlist	file:
use_count	mm/kmemleak.c	/^	atomic_t use_count;$/;"	m	struct:kmemleak_object	file:
use_hierarchy	mm/memcontrol.c	/^	bool use_hierarchy;$/;"	m	struct:mem_cgroup	file:
use_mm	mm/mmu_context.c	/^EXPORT_SYMBOL_GPL(use_mm);$/;"	v
use_mm	mm/mmu_context.c	/^void use_mm(struct mm_struct *mm)$/;"	f
use_writepage	fs/mpage.c	/^	unsigned use_writepage;$/;"	m	struct:mpage_data	file:
use_zero_page_attr	mm/huge_memory.c	/^static struct kobj_attribute use_zero_page_attr =$/;"	v	typeref:struct:kobj_attribute	file:
use_zero_page_show	mm/huge_memory.c	/^static ssize_t use_zero_page_show(struct kobject *kobj,$/;"	f	file:
use_zero_page_store	mm/huge_memory.c	/^static ssize_t use_zero_page_store(struct kobject *kobj,$/;"	f	file:
usecs_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(usecs_to_jiffies);$/;"	v
usecs_to_jiffies	kernel/time.c	/^unsigned long usecs_to_jiffies(const unsigned int u)$/;"	f
used	fs/coredump.c	/^	int used, size;$/;"	m	struct:core_name	file:
usemap_size	mm/page_alloc.c	/^static unsigned long __init usemap_size(unsigned long zone_start_pfn, unsigned long zonesize)$/;"	f	file:
usemap_size	mm/sparse.c	/^unsigned long usemap_size(void)$/;"	f
user	fs/eventpoll.c	/^	struct user_struct *user;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::user_struct	file:
user_arg_ptr	fs/exec.c	/^struct user_arg_ptr {$/;"	s	file:
user_enter	kernel/context_tracking.c	/^void user_enter(void)$/;"	f
user_exit	kernel/context_tracking.c	/^void user_exit(void)$/;"	f
user_file_rights	mm/scm.h	/^}user_file_rights;$/;"	t	typeref:struct:__anon17
user_get_super	fs/super.c	/^struct super_block *user_get_super(dev_t dev)$/;"	f
user_long_t	fs/binfmt_elf.c	42;"	d	file:
user_long_t	fs/compat_binfmt_elf.c	43;"	d	file:
user_namespaces_init	kernel/user_namespace.c	/^module_init(user_namespaces_init);$/;"	v
user_namespaces_init	kernel/user_namespace.c	/^static __init int user_namespaces_init(void)$/;"	f	file:
user_ns	fs/mount.h	/^	struct user_namespace	*user_ns;$/;"	m	struct:mnt_namespace	typeref:struct:mnt_namespace::user_namespace
user_page_pipe_buf_ops	fs/splice.c	/^static const struct pipe_buf_operations user_page_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
user_page_pipe_buf_steal	fs/splice.c	/^static int user_page_pipe_buf_steal(struct pipe_inode_info *pipe,$/;"	f	file:
user_path_at	fs/namei.c	/^EXPORT_SYMBOL(user_path_at);$/;"	v
user_path_at	fs/namei.c	/^int user_path_at(int dfd, const char __user *name, unsigned flags,$/;"	f
user_path_at_empty	fs/namei.c	/^int user_path_at_empty(int dfd, const char __user *name, unsigned flags,$/;"	f
user_path_create	fs/namei.c	/^EXPORT_SYMBOL(user_path_create);$/;"	v
user_path_create	fs/namei.c	/^struct dentry *user_path_create(int dfd, const char __user *pathname,$/;"	f
user_path_parent	fs/namei.c	/^user_path_parent(int dfd, const char __user *path, struct nameidata *nd,$/;"	f	file:
user_return_notifier_register	kernel/user-return-notifier.c	/^EXPORT_SYMBOL_GPL(user_return_notifier_register);$/;"	v
user_return_notifier_register	kernel/user-return-notifier.c	/^void user_return_notifier_register(struct user_return_notifier *urn)$/;"	f
user_return_notifier_unregister	kernel/user-return-notifier.c	/^EXPORT_SYMBOL_GPL(user_return_notifier_unregister);$/;"	v
user_return_notifier_unregister	kernel/user-return-notifier.c	/^void user_return_notifier_unregister(struct user_return_notifier *urn)$/;"	f
user_shm_lock	mm/mlock.c	/^int user_shm_lock(size_t size, struct user_struct *user)$/;"	f
user_shm_unlock	mm/mlock.c	/^void user_shm_unlock(size_t size, struct user_struct *user)$/;"	f
user_siginfo_t	fs/binfmt_elf.c	45;"	d	file:
user_siginfo_t	fs/compat_binfmt_elf.c	44;"	d	file:
user_statfs	fs/statfs.c	/^int user_statfs(const char __user *pathname, struct kstatfs *st)$/;"	f
user_zonelist_order	mm/page_alloc.c	/^static int user_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
usermodehelper_bset	kernel/kmod.c	/^static kernel_cap_t usermodehelper_bset = CAP_FULL_SET;$/;"	v	file:
usermodehelper_disabled	kernel/kmod.c	/^static enum umh_disable_depth usermodehelper_disabled = UMH_DISABLED;$/;"	v	typeref:enum:umh_disable_depth	file:
usermodehelper_inheritable	kernel/kmod.c	/^static kernel_cap_t usermodehelper_inheritable = CAP_FULL_SET;$/;"	v	file:
usermodehelper_init	kernel/kmod.c	/^void __init usermodehelper_init(void)$/;"	f
usermodehelper_read_lock_wait	kernel/kmod.c	/^EXPORT_SYMBOL_GPL(usermodehelper_read_lock_wait);$/;"	v
usermodehelper_read_lock_wait	kernel/kmod.c	/^long usermodehelper_read_lock_wait(long timeout)$/;"	f
usermodehelper_read_trylock	kernel/kmod.c	/^EXPORT_SYMBOL_GPL(usermodehelper_read_trylock);$/;"	v
usermodehelper_read_trylock	kernel/kmod.c	/^int usermodehelper_read_trylock(void)$/;"	f
usermodehelper_read_unlock	kernel/kmod.c	/^EXPORT_SYMBOL_GPL(usermodehelper_read_unlock);$/;"	v
usermodehelper_read_unlock	kernel/kmod.c	/^void usermodehelper_read_unlock(void)$/;"	f
usermodehelper_table	kernel/kmod.c	/^struct ctl_table usermodehelper_table[] = {$/;"	v	typeref:struct:ctl_table
userns_fixup_signal_uid	kernel/signal.c	/^static inline void userns_fixup_signal_uid(struct siginfo *info, struct task_struct *t)$/;"	f	file:
userns_get	kernel/user_namespace.c	/^static void *userns_get(struct task_struct *task)$/;"	f	file:
userns_install	kernel/user_namespace.c	/^static int userns_install(struct nsproxy *nsproxy, void *ns)$/;"	f	file:
userns_inum	kernel/user_namespace.c	/^static unsigned int userns_inum(void *ns)$/;"	f	file:
userns_operations	kernel/user_namespace.c	/^const struct proc_ns_operations userns_operations = {$/;"	v	typeref:struct:proc_ns_operations
userns_put	kernel/user_namespace.c	/^static void userns_put(void *ns)$/;"	f	file:
usleep_range	kernel/timer.c	/^EXPORT_SYMBOL(usleep_range);$/;"	v
usleep_range	kernel/timer.c	/^void usleep_range(unsigned long min, unsigned long max)$/;"	f
usr_ptr	fs/compat_ioctl.c	/^	compat_uptr_t usr_ptr;		\/* [i->o] unused internally *\/$/;"	m	struct:sg_io_hdr32	file:
usr_ptr	fs/compat_ioctl.c	/^	compat_uptr_t usr_ptr;$/;"	m	struct:compat_sg_req_info	file:
utimes_common	fs/utimes.c	/^static int utimes_common(struct path *path, struct timespec *times)$/;"	f	file:
uts_kern_table	kernel/utsname_sysctl.c	/^static struct ctl_table uts_kern_table[] = {$/;"	v	typeref:struct:ctl_table	file:
uts_proc_notify	kernel/utsname_sysctl.c	/^void uts_proc_notify(enum uts_proc proc)$/;"	f
uts_root_table	kernel/utsname_sysctl.c	/^static struct ctl_table uts_root_table[] = {$/;"	v	typeref:struct:ctl_table	file:
uts_sem	kernel/sys.c	/^DECLARE_RWSEM(uts_sem);$/;"	v
utsname_sysctl_init	kernel/utsname_sysctl.c	/^__initcall(utsname_sysctl_init);$/;"	v
utsname_sysctl_init	kernel/utsname_sysctl.c	/^static int __init utsname_sysctl_init(void)$/;"	f	file:
utsns_get	kernel/utsname.c	/^static void *utsns_get(struct task_struct *task)$/;"	f	file:
utsns_install	kernel/utsname.c	/^static int utsns_install(struct nsproxy *nsproxy, void *new)$/;"	f	file:
utsns_inum	kernel/utsname.c	/^static unsigned int utsns_inum(void *vp)$/;"	f	file:
utsns_operations	kernel/utsname.c	/^const struct proc_ns_operations utsns_operations = {$/;"	v	typeref:struct:proc_ns_operations
utsns_put	kernel/utsname.c	/^static void utsns_put(void *ns)$/;"	f	file:
v	kernel/workqueue.c	/^		unsigned long				v;$/;"	m	union:workqueue_struct::__anon66	file:
v_startaddr	mm/scm.h	/^	unsigned long v_startaddr;$/;"	m	struct:__anon13
va	mm/vmalloc.c	/^	struct vmap_area *va;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_area	file:
va_end	mm/vmalloc.c	/^	unsigned long va_end;$/;"	m	struct:vmap_area	file:
va_start	mm/vmalloc.c	/^	unsigned long va_start;$/;"	m	struct:vmap_area	file:
vaddr	mm/dmapool.c	/^	void *vaddr;$/;"	m	struct:dma_page	file:
val	kernel/cpuset.c	/^	int val;		\/* most recent output value *\/$/;"	m	struct:fmeter	file:
val	kernel/params.c	/^	char val[];$/;"	m	struct:kmalloced_param	file:
valid	kernel/taskstats.c	/^	char valid;$/;"	m	struct:listener	file:
valid_arg_len	fs/exec.c	/^static bool valid_arg_len(struct linux_binprm *bprm, long len)$/;"	f	file:
valid_dev	fs/stat.c	203;"	d	file:
valid_state	kernel/lockdep.c	/^valid_state(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
validate	mm/slub.c	/^SLAB_ATTR(validate);$/;"	v
validate_chain	kernel/lockdep.c	/^static inline int validate_chain(struct task_struct *curr,$/;"	f	file:
validate_chain	kernel/lockdep.c	/^static int validate_chain(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
validate_change	kernel/cpuset.c	/^static int validate_change(const struct cpuset *cur, const struct cpuset *trial)$/;"	f	file:
validate_coredump_safety	kernel/sysctl.c	/^static void validate_coredump_safety(void)$/;"	f	file:
validate_creds_for_do_exit	kernel/cred.c	/^void validate_creds_for_do_exit(struct task_struct *tsk)$/;"	f
validate_mm	mm/mmap.c	/^void validate_mm(struct mm_struct *mm)$/;"	f
validate_mm	mm/mmap.c	436;"	d	file:
validate_mm_rb	mm/mmap.c	/^static void validate_mm_rb(struct rb_root *root, struct vm_area_struct *ignore)$/;"	f	file:
validate_mm_rb	mm/mmap.c	435;"	d	file:
validate_mmap_request	mm/nommu.c	/^static int validate_mmap_request(struct file *file,$/;"	f	file:
validate_nommu_regions	mm/nommu.c	/^static noinline void validate_nommu_regions(void)$/;"	f	file:
validate_nommu_regions	mm/nommu.c	/^static void validate_nommu_regions(void)$/;"	f	file:
validate_show	mm/slub.c	/^static ssize_t validate_show(struct kmem_cache *s, char *buf)$/;"	f	file:
validate_slab	mm/slub.c	/^static int validate_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
validate_slab_cache	mm/slub.c	/^static long validate_slab_cache(struct kmem_cache *s)$/;"	f	file:
validate_slab_node	mm/slub.c	/^static int validate_slab_node(struct kmem_cache *s,$/;"	f	file:
validate_slab_slab	mm/slub.c	/^static void validate_slab_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
validate_store	mm/slub.c	/^static ssize_t validate_store(struct kmem_cache *s,$/;"	f	file:
value	fs/ext3/xattr.c	/^	const void *value;$/;"	m	struct:ext3_xattr_info	file:
value	kernel/kallsyms.c	/^	unsigned long value;$/;"	m	struct:kallsym_iter	file:
value_len	fs/ext3/xattr.c	/^	size_t value_len;$/;"	m	struct:ext3_xattr_info	file:
vb_alloc	mm/vmalloc.c	/^static void *vb_alloc(unsigned long size, gfp_t gfp_mask)$/;"	f	file:
vb_free	mm/vmalloc.c	/^static void vb_free(const void *addr, unsigned long size)$/;"	f	file:
vbq	mm/vmalloc.c	/^	struct vmap_block_queue *vbq;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_block_queue	file:
vec	kernel/timer.c	/^	struct list_head vec[TVN_SIZE];$/;"	m	struct:tvec	typeref:struct:tvec::list_head	file:
vec	kernel/timer.c	/^	struct list_head vec[TVR_SIZE];$/;"	m	struct:tvec_root	typeref:struct:tvec_root::list_head	file:
vecs_to_idx	fs/bio-integrity.c	/^static inline unsigned int vecs_to_idx(unsigned int nr)$/;"	f	file:
verbose	kernel/lockdep.c	/^static int verbose(struct lock_class *class)$/;"	f	file:
verbose	kernel/rcutorture.c	/^static bool verbose;		\/* Print more debug info. *\/$/;"	v	file:
verify_chain	fs/ext3/inode.c	/^static int verify_chain(Indirect *from, Indirect *to)$/;"	f	file:
verify_export_symbols	kernel/module.c	/^static int verify_export_symbols(struct module *mod)$/;"	f	file:
verify_group_input	fs/ext3/resize.c	/^static int verify_group_input(struct super_block *sb,$/;"	f	file:
verify_mem_not_deleted	mm/slub.c	/^EXPORT_SYMBOL(verify_mem_not_deleted);$/;"	v
verify_mem_not_deleted	mm/slub.c	/^bool verify_mem_not_deleted(const void *x)$/;"	f
verify_mm_writelocked	mm/mmap.c	/^static inline void verify_mm_writelocked(struct mm_struct *mm)$/;"	f	file:
verify_redzone_free	mm/slab.c	/^static inline void verify_redzone_free(struct kmem_cache *cache, void *obj)$/;"	f	file:
verify_reserved_gdb	fs/ext3/resize.c	/^static int verify_reserved_gdb(struct super_block *sb,$/;"	f	file:
vermagic	kernel/module.c	/^static const char vermagic[] = VERMAGIC_STRING;$/;"	v	file:
vers	kernel/module.c	/^		unsigned int sym, str, mod, vers, info, pcpu;$/;"	m	struct:load_info::__anon60	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_ncp_mount_data	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_ncp_mount_data_v4	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
version	kernel/module.c	/^MODINFO_ATTR(version);$/;"	v
version_sysfs_builtin	kernel/params.c	/^static void __init version_sysfs_builtin(void)$/;"	f	file:
very_verbose	kernel/lockdep.c	/^static int very_verbose(struct lock_class *class)$/;"	f	file:
vfree	mm/nommu.c	/^EXPORT_SYMBOL(vfree);$/;"	v
vfree	mm/nommu.c	/^void vfree(const void *addr)$/;"	f
vfree	mm/vmalloc.c	/^EXPORT_SYMBOL(vfree);$/;"	v
vfree	mm/vmalloc.c	/^void vfree(const void *addr)$/;"	f
vfs_caches_init	fs/dcache.c	/^void __init vfs_caches_init(unsigned long mempages)$/;"	f
vfs_caches_init_early	fs/dcache.c	/^void __init vfs_caches_init_early(void)$/;"	f
vfs_cancel_lock	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_cancel_lock);$/;"	v
vfs_cancel_lock	fs/locks.c	/^int vfs_cancel_lock(struct file *filp, struct file_lock *fl)$/;"	f
vfs_create	fs/namei.c	/^EXPORT_SYMBOL(vfs_create);$/;"	v
vfs_create	fs/namei.c	/^int vfs_create(struct inode *dir, struct dentry *dentry, umode_t mode,$/;"	f
vfs_dentry_acceptable	fs/fhandle.c	/^static int vfs_dentry_acceptable(void *context, struct dentry *dentry)$/;"	f	file:
vfs_follow_link	fs/namei.c	/^EXPORT_SYMBOL(vfs_follow_link);$/;"	v
vfs_follow_link	fs/namei.c	/^int vfs_follow_link(struct nameidata *nd, const char *link)$/;"	f
vfs_fstat	fs/stat.c	/^EXPORT_SYMBOL(vfs_fstat);$/;"	v
vfs_fstat	fs/stat.c	/^int vfs_fstat(unsigned int fd, struct kstat *stat)$/;"	f
vfs_fstatat	fs/stat.c	/^EXPORT_SYMBOL(vfs_fstatat);$/;"	v
vfs_fstatat	fs/stat.c	/^int vfs_fstatat(int dfd, const char __user *filename, struct kstat *stat,$/;"	f
vfs_fsync	fs/sync.c	/^EXPORT_SYMBOL(vfs_fsync);$/;"	v
vfs_fsync	fs/sync.c	/^int vfs_fsync(struct file *file, int datasync)$/;"	f
vfs_fsync_range	fs/sync.c	/^EXPORT_SYMBOL(vfs_fsync_range);$/;"	v
vfs_fsync_range	fs/sync.c	/^int vfs_fsync_range(struct file *file, loff_t start, loff_t end, int datasync)$/;"	f
vfs_getattr	fs/stat.c	/^EXPORT_SYMBOL(vfs_getattr);$/;"	v
vfs_getattr	fs/stat.c	/^int vfs_getattr(struct path *path, struct kstat *stat)$/;"	f
vfs_getxattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_getxattr);$/;"	v
vfs_getxattr	fs/xattr.c	/^vfs_getxattr(struct dentry *dentry, const char *name, void *value, size_t size)$/;"	f
vfs_getxattr_alloc	fs/xattr.c	/^vfs_getxattr_alloc(struct dentry *dentry, const char *name, char **xattr_value,$/;"	f
vfs_inode	fs/block_dev.c	/^	struct inode vfs_inode;$/;"	m	struct:bdev_inode	typeref:struct:bdev_inode::inode	file:
vfs_inode	fs/ext3/ext3.h	/^	struct inode vfs_inode;$/;"	m	struct:ext3_inode_info	typeref:struct:ext3_inode_info::inode
vfs_ioctl	fs/ioctl.c	/^static long vfs_ioctl(struct file *filp, unsigned int cmd,$/;"	f	file:
vfs_kern_mount	fs/namespace.c	/^EXPORT_SYMBOL_GPL(vfs_kern_mount);$/;"	v
vfs_kern_mount	fs/namespace.c	/^vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void *data)$/;"	f
vfs_link	fs/namei.c	/^EXPORT_SYMBOL(vfs_link);$/;"	v
vfs_link	fs/namei.c	/^int vfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *new_dentry)$/;"	f
vfs_listxattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_listxattr);$/;"	v
vfs_listxattr	fs/xattr.c	/^vfs_listxattr(struct dentry *d, char *list, size_t size)$/;"	f
vfs_llseek	fs/read_write.c	/^EXPORT_SYMBOL(vfs_llseek);$/;"	v
vfs_llseek	fs/read_write.c	/^loff_t vfs_llseek(struct file *file, loff_t offset, int whence)$/;"	f
vfs_lock_file	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_lock_file);$/;"	v
vfs_lock_file	fs/locks.c	/^int vfs_lock_file(struct file *filp, unsigned int cmd, struct file_lock *fl, struct file_lock *conf)$/;"	f
vfs_lstat	fs/stat.c	/^EXPORT_SYMBOL(vfs_lstat);$/;"	v
vfs_lstat	fs/stat.c	/^int vfs_lstat(const char __user *name, struct kstat *stat)$/;"	f
vfs_mkdir	fs/namei.c	/^EXPORT_SYMBOL(vfs_mkdir);$/;"	v
vfs_mkdir	fs/namei.c	/^int vfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f
vfs_mknod	fs/namei.c	/^EXPORT_SYMBOL(vfs_mknod);$/;"	v
vfs_mknod	fs/namei.c	/^int vfs_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)$/;"	f
vfs_path_lookup	fs/namei.c	/^EXPORT_SYMBOL(vfs_path_lookup);$/;"	v
vfs_path_lookup	fs/namei.c	/^int vfs_path_lookup(struct dentry *dentry, struct vfsmount *mnt,$/;"	f
vfs_read	fs/read_write.c	/^EXPORT_SYMBOL(vfs_read);$/;"	v
vfs_read	fs/read_write.c	/^ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)$/;"	f
vfs_readdir	fs/readdir.c	/^EXPORT_SYMBOL(vfs_readdir);$/;"	v
vfs_readdir	fs/readdir.c	/^int vfs_readdir(struct file *file, filldir_t filler, void *buf)$/;"	f
vfs_readlink	fs/namei.c	/^EXPORT_SYMBOL(vfs_readlink);$/;"	v
vfs_readlink	fs/namei.c	/^int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen, const char *link)$/;"	f
vfs_readv	fs/read_write.c	/^EXPORT_SYMBOL(vfs_readv);$/;"	v
vfs_readv	fs/read_write.c	/^ssize_t vfs_readv(struct file *file, const struct iovec __user *vec,$/;"	f
vfs_removexattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_removexattr);$/;"	v
vfs_removexattr	fs/xattr.c	/^vfs_removexattr(struct dentry *dentry, const char *name)$/;"	f
vfs_rename	fs/namei.c	/^EXPORT_SYMBOL(vfs_rename);$/;"	v
vfs_rename	fs/namei.c	/^int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f
vfs_rename_dir	fs/namei.c	/^static int vfs_rename_dir(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
vfs_rename_other	fs/namei.c	/^static int vfs_rename_other(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
vfs_rmdir	fs/namei.c	/^EXPORT_SYMBOL(vfs_rmdir);$/;"	v
vfs_rmdir	fs/namei.c	/^int vfs_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f
vfs_setlease	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_setlease);$/;"	v
vfs_setlease	fs/locks.c	/^int vfs_setlease(struct file *filp, long arg, struct file_lock **lease)$/;"	f
vfs_setxattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_setxattr);$/;"	v
vfs_setxattr	fs/xattr.c	/^vfs_setxattr(struct dentry *dentry, const char *name, const void *value,$/;"	f
vfs_stat	fs/stat.c	/^EXPORT_SYMBOL(vfs_stat);$/;"	v
vfs_stat	fs/stat.c	/^int vfs_stat(const char __user *name, struct kstat *stat)$/;"	f
vfs_statfs	fs/statfs.c	/^EXPORT_SYMBOL(vfs_statfs);$/;"	v
vfs_statfs	fs/statfs.c	/^int vfs_statfs(struct path *path, struct kstatfs *buf)$/;"	f
vfs_symlink	fs/namei.c	/^EXPORT_SYMBOL(vfs_symlink);$/;"	v
vfs_symlink	fs/namei.c	/^int vfs_symlink(struct inode *dir, struct dentry *dentry, const char *oldname)$/;"	f
vfs_test_lock	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_test_lock);$/;"	v
vfs_test_lock	fs/locks.c	/^int vfs_test_lock(struct file *filp, struct file_lock *fl)$/;"	f
vfs_truncate	fs/open.c	/^EXPORT_SYMBOL_GPL(vfs_truncate);$/;"	v
vfs_truncate	fs/open.c	/^long vfs_truncate(struct path *path, loff_t length)$/;"	f
vfs_unlink	fs/namei.c	/^EXPORT_SYMBOL(vfs_unlink);$/;"	v
vfs_unlink	fs/namei.c	/^int vfs_unlink(struct inode *dir, struct dentry *dentry)$/;"	f
vfs_ustat	fs/statfs.c	/^int vfs_ustat(dev_t dev, struct kstatfs *sbuf)$/;"	f
vfs_write	fs/read_write.c	/^EXPORT_SYMBOL(vfs_write);$/;"	v
vfs_write	fs/read_write.c	/^ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)$/;"	f
vfs_writev	fs/read_write.c	/^EXPORT_SYMBOL(vfs_writev);$/;"	v
vfs_writev	fs/read_write.c	/^ssize_t vfs_writev(struct file *file, const struct iovec __user *vec,$/;"	f
vfs_xattr_cmp	fs/xattr.c	/^int vfs_xattr_cmp(struct dentry *dentry, const char *xattr_name,$/;"	f
vfsmount_lock	fs/namespace.c	/^DEFINE_BRLOCK(vfsmount_lock);$/;"	v
virt_phys_map	mm/scm.h	/^}virt_phys_map;$/;"	t	typeref:struct:__anon14
virt_ticks	kernel/posix-cpu-timers.c	/^static inline cputime_t virt_ticks(struct task_struct *p)$/;"	f	file:
virt_to_cache	mm/slab.c	/^static inline struct kmem_cache *virt_to_cache(const void *obj)$/;"	f	file:
virt_to_slab	mm/slab.c	/^static inline struct slab *virt_to_slab(const void *obj)$/;"	f	file:
virtual	mm/highmem.c	/^	void *virtual;$/;"	m	struct:page_address_map	file:
visited	fs/eventpoll.c	/^	int visited;$/;"	m	struct:eventpoll	file:
visited_list_link	fs/eventpoll.c	/^	struct list_head visited_list_link;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::list_head	file:
vm	mm/vmalloc.c	/^	struct vm_struct *vm;$/;"	m	struct:vmap_area	typeref:struct:vmap_area::vm_struct	file:
vm_area_add_early	mm/vmalloc.c	/^void __init vm_area_add_early(struct vm_struct *vm)$/;"	f
vm_area_cachep	kernel/fork.c	/^struct kmem_cache *vm_area_cachep;$/;"	v	typeref:struct:kmem_cache
vm_area_register_early	mm/vmalloc.c	/^void __init vm_area_register_early(struct vm_struct *vm, size_t align)$/;"	f
vm_brk	mm/mmap.c	/^EXPORT_SYMBOL(vm_brk);$/;"	v
vm_brk	mm/mmap.c	/^unsigned long vm_brk(unsigned long addr, unsigned long len)$/;"	f
vm_brk	mm/nommu.c	/^unsigned long vm_brk(unsigned long addr, unsigned long len)$/;"	f
vm_committed_as	mm/nommu.c	/^struct percpu_counter vm_committed_as;$/;"	v	typeref:struct:percpu_counter
vm_dirty_bytes	mm/page-writeback.c	/^unsigned long vm_dirty_bytes;$/;"	v
vm_dirty_ratio	mm/page-writeback.c	/^int vm_dirty_ratio = 20;$/;"	v
vm_event_states	mm/vmstat.c	/^EXPORT_PER_CPU_SYMBOL(vm_event_states);$/;"	v
vm_events_fold_cpu	mm/vmstat.c	/^void vm_events_fold_cpu(int cpu)$/;"	f
vm_get_page_prot	mm/mmap.c	/^EXPORT_SYMBOL(vm_get_page_prot);$/;"	v
vm_get_page_prot	mm/mmap.c	/^pgprot_t vm_get_page_prot(unsigned long vm_flags)$/;"	f
vm_highmem_is_dirtyable	mm/page-writeback.c	/^int vm_highmem_is_dirtyable;$/;"	v
vm_insert_mixed	mm/memory.c	/^EXPORT_SYMBOL(vm_insert_mixed);$/;"	v
vm_insert_mixed	mm/memory.c	/^int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_page	mm/memory.c	/^EXPORT_SYMBOL(vm_insert_page);$/;"	v
vm_insert_page	mm/memory.c	/^int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_page	mm/nommu.c	/^EXPORT_SYMBOL(vm_insert_page);$/;"	v
vm_insert_page	mm/nommu.c	/^int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_pfn	mm/memory.c	/^EXPORT_SYMBOL(vm_insert_pfn);$/;"	v
vm_insert_pfn	mm/memory.c	/^int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_iomap_memory	mm/memory.c	/^EXPORT_SYMBOL(vm_iomap_memory);$/;"	v
vm_iomap_memory	mm/memory.c	/^int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)$/;"	f
vm_iomap_memory	mm/nommu.c	/^EXPORT_SYMBOL(vm_iomap_memory);$/;"	v
vm_iomap_memory	mm/nommu.c	/^int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)$/;"	f
vm_is_stack	mm/util.c	/^pid_t vm_is_stack(struct task_struct *task,$/;"	f
vm_is_stack_for_task	mm/util.c	/^static int vm_is_stack_for_task(struct task_struct *t,$/;"	f	file:
vm_lock_anon_vma	mm/mmap.c	/^static void vm_lock_anon_vma(struct mm_struct *mm, struct anon_vma *anon_vma)$/;"	f	file:
vm_lock_mapping	mm/mmap.c	/^static void vm_lock_mapping(struct mm_struct *mm, struct address_space *mapping)$/;"	f	file:
vm_map_ram	mm/nommu.c	/^EXPORT_SYMBOL(vm_map_ram);$/;"	v
vm_map_ram	mm/nommu.c	/^void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)$/;"	f
vm_map_ram	mm/vmalloc.c	/^EXPORT_SYMBOL(vm_map_ram);$/;"	v
vm_map_ram	mm/vmalloc.c	/^void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)$/;"	f
vm_memory_committed	mm/mmap.c	/^EXPORT_SYMBOL_GPL(vm_memory_committed);$/;"	v
vm_memory_committed	mm/mmap.c	/^unsigned long vm_memory_committed(void)$/;"	f
vm_memory_committed	mm/nommu.c	/^EXPORT_SYMBOL_GPL(vm_memory_committed);$/;"	v
vm_memory_committed	mm/nommu.c	/^unsigned long vm_memory_committed(void)$/;"	f
vm_mmap	mm/util.c	/^EXPORT_SYMBOL(vm_mmap);$/;"	v
vm_mmap	mm/util.c	/^unsigned long vm_mmap(struct file *file, unsigned long addr,$/;"	f
vm_mmap_pgoff	mm/util.c	/^unsigned long vm_mmap_pgoff(struct file *file, unsigned long addr,$/;"	f
vm_munmap	mm/mmap.c	/^EXPORT_SYMBOL(vm_munmap);$/;"	v
vm_munmap	mm/mmap.c	/^int vm_munmap(unsigned long start, size_t len)$/;"	f
vm_munmap	mm/nommu.c	/^EXPORT_SYMBOL(vm_munmap);$/;"	v
vm_munmap	mm/nommu.c	/^int vm_munmap(unsigned long addr, size_t len)$/;"	f
vm_normal_page	mm/memory.c	/^struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_region_jar	mm/nommu.c	/^static struct kmem_cache *vm_region_jar;$/;"	v	typeref:struct:kmem_cache	file:
vm_stat	mm/vmstat.c	/^EXPORT_SYMBOL(vm_stat);$/;"	v
vm_stat_account	mm/mmap.c	/^void vm_stat_account(struct mm_struct *mm, unsigned long flags,$/;"	f
vm_swappiness	mm/vmscan.c	/^int vm_swappiness = 60;$/;"	v
vm_table	kernel/sysctl.c	/^static struct ctl_table vm_table[] = {$/;"	v	typeref:struct:ctl_table	file:
vm_table	kernel/sysctl.c	/^static struct ctl_table vm_table[];$/;"	v	typeref:struct:ctl_table	file:
vm_total_pages	mm/vmscan.c	/^unsigned long vm_total_pages;	\/* The total number of pages which the VM controls *\/$/;"	v
vm_unlock_anon_vma	mm/mmap.c	/^static void vm_unlock_anon_vma(struct anon_vma *anon_vma)$/;"	f	file:
vm_unlock_mapping	mm/mmap.c	/^static void vm_unlock_mapping(struct address_space *mapping)$/;"	f	file:
vm_unmap_aliases	mm/nommu.c	/^EXPORT_SYMBOL_GPL(vm_unmap_aliases);$/;"	v
vm_unmap_aliases	mm/nommu.c	/^void vm_unmap_aliases(void)$/;"	f
vm_unmap_aliases	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(vm_unmap_aliases);$/;"	v
vm_unmap_aliases	mm/vmalloc.c	/^void vm_unmap_aliases(void)$/;"	f
vm_unmap_ram	mm/nommu.c	/^EXPORT_SYMBOL(vm_unmap_ram);$/;"	v
vm_unmap_ram	mm/nommu.c	/^void vm_unmap_ram(const void *mem, unsigned int count)$/;"	f
vm_unmap_ram	mm/vmalloc.c	/^EXPORT_SYMBOL(vm_unmap_ram);$/;"	v
vm_unmap_ram	mm/vmalloc.c	/^void vm_unmap_ram(const void *mem, unsigned int count)$/;"	f
vma_address	mm/rmap.c	/^vma_address(struct page *page, struct vm_area_struct *vma)$/;"	f
vma_adjust	mm/mmap.c	/^int vma_adjust(struct vm_area_struct *vma, unsigned long start,$/;"	f
vma_commit_reservation	mm/hugetlb.c	/^static void vma_commit_reservation(struct hstate *h,$/;"	f	file:
vma_compute_subtree_gap	mm/mmap.c	/^static long vma_compute_subtree_gap(struct vm_area_struct *vma)$/;"	f	file:
vma_dump_size	fs/binfmt_elf.c	/^static unsigned long vma_dump_size(struct vm_area_struct *vma,$/;"	f	file:
vma_expandable	mm/mremap.c	/^static int vma_expandable(struct vm_area_struct *vma, unsigned long delta)$/;"	f	file:
vma_gap_update	mm/mmap.c	/^static void vma_gap_update(struct vm_area_struct *vma)$/;"	f	file:
vma_has_reserves	mm/hugetlb.c	/^static int vma_has_reserves(struct vm_area_struct *vma)$/;"	f	file:
vma_hugecache_offset	mm/hugetlb.c	/^static pgoff_t vma_hugecache_offset(struct hstate *h,$/;"	f	file:
vma_interval_tree_insert_after	mm/interval_tree.c	/^void vma_interval_tree_insert_after(struct vm_area_struct *node,$/;"	f
vma_kernel_pagesize	mm/hugetlb.c	/^EXPORT_SYMBOL_GPL(vma_kernel_pagesize);$/;"	v
vma_kernel_pagesize	mm/hugetlb.c	/^unsigned long vma_kernel_pagesize(struct vm_area_struct *vma)$/;"	f
vma_last_pgoff	mm/interval_tree.c	/^static inline unsigned long vma_last_pgoff(struct vm_area_struct *v)$/;"	f	file:
vma_link	mm/mmap.c	/^static void vma_link(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
vma_merge	mm/mmap.c	/^struct vm_area_struct *vma_merge(struct mm_struct *mm,$/;"	f
vma_mmu_pagesize	mm/hugetlb.c	/^unsigned long vma_mmu_pagesize(struct vm_area_struct *vma)$/;"	f
vma_needs_reservation	mm/hugetlb.c	/^static long vma_needs_reservation(struct hstate *h,$/;"	f	file:
vma_rb_erase	mm/mmap.c	/^static void vma_rb_erase(struct vm_area_struct *vma, struct rb_root *root)$/;"	f	file:
vma_rb_insert	mm/mmap.c	/^static inline void vma_rb_insert(struct vm_area_struct *vma,$/;"	f	file:
vma_replace_policy	mm/mempolicy.c	/^static int vma_replace_policy(struct vm_area_struct *vma,$/;"	f	file:
vma_resv_map	mm/hugetlb.c	/^static struct resv_map *vma_resv_map(struct vm_area_struct *vma)$/;"	f	file:
vma_start_pgoff	mm/interval_tree.c	/^static inline unsigned long vma_start_pgoff(struct vm_area_struct *v)$/;"	f	file:
vma_to_resize	mm/mremap.c	/^static struct vm_area_struct *vma_to_resize(unsigned long addr,$/;"	f	file:
vma_wants_writenotify	mm/mmap.c	/^int vma_wants_writenotify(struct vm_area_struct *vma)$/;"	f
vmalloc	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc);$/;"	v
vmalloc	mm/nommu.c	/^void *vmalloc(unsigned long size)$/;"	f
vmalloc	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc);$/;"	v
vmalloc	mm/vmalloc.c	/^void *vmalloc(unsigned long size)$/;"	f
vmalloc_32	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_32);$/;"	v
vmalloc_32	mm/nommu.c	/^void *vmalloc_32(unsigned long size)$/;"	f
vmalloc_32	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_32);$/;"	v
vmalloc_32	mm/vmalloc.c	/^void *vmalloc_32(unsigned long size)$/;"	f
vmalloc_32_user	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_32_user);$/;"	v
vmalloc_32_user	mm/nommu.c	/^void *vmalloc_32_user(unsigned long size)$/;"	f
vmalloc_32_user	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_32_user);$/;"	v
vmalloc_32_user	mm/vmalloc.c	/^void *vmalloc_32_user(unsigned long size)$/;"	f
vmalloc_exec	mm/nommu.c	/^void *vmalloc_exec(unsigned long size)$/;"	f
vmalloc_exec	mm/vmalloc.c	/^void *vmalloc_exec(unsigned long size)$/;"	f
vmalloc_init	mm/vmalloc.c	/^void __init vmalloc_init(void)$/;"	f
vmalloc_node	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_node);$/;"	v
vmalloc_node	mm/nommu.c	/^void *vmalloc_node(unsigned long size, int node)$/;"	f
vmalloc_node	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_node);$/;"	v
vmalloc_node	mm/vmalloc.c	/^void *vmalloc_node(unsigned long size, int node)$/;"	f
vmalloc_op	mm/vmalloc.c	/^static const struct seq_operations vmalloc_op = {$/;"	v	typeref:struct:seq_operations	file:
vmalloc_open	mm/vmalloc.c	/^static int vmalloc_open(struct inode *inode, struct file *file)$/;"	f	file:
vmalloc_sync_all	mm/nommu.c	/^void  __attribute__((weak)) vmalloc_sync_all(void)$/;"	f
vmalloc_sync_all	mm/vmalloc.c	/^void  __attribute__((weak)) vmalloc_sync_all(void)$/;"	f
vmalloc_to_page	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_to_page);$/;"	v
vmalloc_to_page	mm/nommu.c	/^struct page *vmalloc_to_page(const void *addr)$/;"	f
vmalloc_to_page	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_to_page);$/;"	v
vmalloc_to_page	mm/vmalloc.c	/^struct page *vmalloc_to_page(const void *vmalloc_addr)$/;"	f
vmalloc_to_pfn	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_to_pfn);$/;"	v
vmalloc_to_pfn	mm/nommu.c	/^unsigned long vmalloc_to_pfn(const void *addr)$/;"	f
vmalloc_to_pfn	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_to_pfn);$/;"	v
vmalloc_to_pfn	mm/vmalloc.c	/^unsigned long vmalloc_to_pfn(const void *vmalloc_addr)$/;"	f
vmalloc_user	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_user);$/;"	v
vmalloc_user	mm/nommu.c	/^void *vmalloc_user(unsigned long size)$/;"	f
vmalloc_user	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_user);$/;"	v
vmalloc_user	mm/vmalloc.c	/^void *vmalloc_user(unsigned long size)$/;"	f
vmap	mm/nommu.c	/^EXPORT_SYMBOL(vmap);$/;"	v
vmap	mm/nommu.c	/^void *vmap(struct page **pages, unsigned int count, unsigned long flags, pgprot_t prot)$/;"	f
vmap	mm/vmalloc.c	/^EXPORT_SYMBOL(vmap);$/;"	v
vmap	mm/vmalloc.c	/^void *vmap(struct page **pages, unsigned int count,$/;"	f
vmap_area	mm/vmalloc.c	/^struct vmap_area {$/;"	s	file:
vmap_area_pcpu_hole	mm/vmalloc.c	/^static unsigned long vmap_area_pcpu_hole;$/;"	v	file:
vmap_area_root	mm/vmalloc.c	/^static struct rb_root vmap_area_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
vmap_block	mm/vmalloc.c	/^struct vmap_block {$/;"	s	file:
vmap_block_queue	mm/vmalloc.c	/^struct vmap_block_queue {$/;"	s	file:
vmap_debug_free_range	mm/vmalloc.c	/^static void vmap_debug_free_range(unsigned long start, unsigned long end)$/;"	f	file:
vmap_lazy_nr	mm/vmalloc.c	/^static atomic_t vmap_lazy_nr = ATOMIC_INIT(0);$/;"	v	file:
vmap_page_range	mm/vmalloc.c	/^static int vmap_page_range(unsigned long start, unsigned long end,$/;"	f	file:
vmap_page_range_noflush	mm/vmalloc.c	/^static int vmap_page_range_noflush(unsigned long start, unsigned long end,$/;"	f	file:
vmap_pmd_range	mm/vmalloc.c	/^static int vmap_pmd_range(pud_t *pud, unsigned long addr,$/;"	f	file:
vmap_pte_range	mm/vmalloc.c	/^static int vmap_pte_range(pmd_t *pmd, unsigned long addr,$/;"	f	file:
vmap_pud_range	mm/vmalloc.c	/^static int vmap_pud_range(pgd_t *pgd, unsigned long addr,$/;"	f	file:
vmcoreinfo	kernel/ksysfs.c	/^KERNEL_ATTR_RO(vmcoreinfo);$/;"	v
vmcoreinfo_append_str	kernel/kexec.c	/^void vmcoreinfo_append_str(const char *fmt, ...)$/;"	f
vmcoreinfo_data	kernel/kexec.c	/^static unsigned char vmcoreinfo_data[VMCOREINFO_BYTES];$/;"	v	file:
vmcoreinfo_max_size	kernel/kexec.c	/^size_t vmcoreinfo_max_size = sizeof(vmcoreinfo_data);$/;"	v
vmcoreinfo_note	kernel/kexec.c	/^u32 vmcoreinfo_note[VMCOREINFO_NOTE_SIZE\/4];$/;"	v
vmcoreinfo_show	kernel/ksysfs.c	/^static ssize_t vmcoreinfo_show(struct kobject *kobj,$/;"	f	file:
vmcoreinfo_size	kernel/kexec.c	/^size_t vmcoreinfo_size;$/;"	v
vmemmap_alloc_block	mm/sparse-vmemmap.c	/^void * __meminit vmemmap_alloc_block(unsigned long size, int node)$/;"	f
vmemmap_alloc_block_buf	mm/sparse-vmemmap.c	/^void * __meminit vmemmap_alloc_block_buf(unsigned long size, int node)$/;"	f
vmemmap_buf	mm/sparse-vmemmap.c	/^static void *vmemmap_buf;$/;"	v	file:
vmemmap_buf_end	mm/sparse-vmemmap.c	/^static void *vmemmap_buf_end;$/;"	v	file:
vmemmap_pgd_populate	mm/sparse-vmemmap.c	/^pgd_t * __meminit vmemmap_pgd_populate(unsigned long addr, int node)$/;"	f
vmemmap_pmd_populate	mm/sparse-vmemmap.c	/^pmd_t * __meminit vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node)$/;"	f
vmemmap_populate_basepages	mm/sparse-vmemmap.c	/^int __meminit vmemmap_populate_basepages(struct page *start_page,$/;"	f
vmemmap_populate_print_last	mm/sparse.c	/^void __attribute__((weak)) __meminit vmemmap_populate_print_last(void)$/;"	f
vmemmap_pte_populate	mm/sparse-vmemmap.c	/^pte_t * __meminit vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node)$/;"	f
vmemmap_pud_populate	mm/sparse-vmemmap.c	/^pud_t * __meminit vmemmap_pud_populate(pgd_t *pgd, unsigned long addr, int node)$/;"	f
vmemmap_verify	mm/sparse-vmemmap.c	/^void __meminit vmemmap_verify(pte_t *pte, int node,$/;"	f
vmlist	mm/nommu.c	/^struct vm_struct *vmlist;$/;"	v	typeref:struct:vm_struct
vmlist	mm/vmalloc.c	/^struct vm_struct *vmlist;$/;"	v	typeref:struct:vm_struct
vmlist_lock	mm/nommu.c	/^DEFINE_RWLOCK(vmlist_lock);$/;"	v
vmlist_lock	mm/vmalloc.c	/^DEFINE_RWLOCK(vmlist_lock);$/;"	v
vmscan_swappiness	mm/vmscan.c	/^static int vmscan_swappiness(struct scan_control *sc)$/;"	f	file:
vmsplice_to_pipe	fs/splice.c	/^static long vmsplice_to_pipe(struct file *file, const struct iovec __user *iov,$/;"	f	file:
vmsplice_to_user	fs/splice.c	/^static long vmsplice_to_user(struct file *file, const struct iovec __user *iov,$/;"	f	file:
vmstat_cpuup_callback	mm/vmstat.c	/^static int __cpuinit vmstat_cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
vmstat_next	mm/vmstat.c	/^static void *vmstat_next(struct seq_file *m, void *arg, loff_t *pos)$/;"	f	file:
vmstat_notifier	mm/vmstat.c	/^static struct notifier_block __cpuinitdata vmstat_notifier =$/;"	v	typeref:struct:__cpuinitdata	file:
vmstat_op	mm/vmstat.c	/^static const struct seq_operations vmstat_op = {$/;"	v	typeref:struct:seq_operations	file:
vmstat_open	mm/vmstat.c	/^static int vmstat_open(struct inode *inode, struct file *file)$/;"	f	file:
vmstat_show	mm/vmstat.c	/^static int vmstat_show(struct seq_file *m, void *arg)$/;"	f	file:
vmstat_start	mm/vmstat.c	/^static void *vmstat_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
vmstat_stop	mm/vmstat.c	/^static void vmstat_stop(struct seq_file *m, void *arg)$/;"	f	file:
vmstat_text	mm/vmstat.c	/^const char * const vmstat_text[] = {$/;"	v
vmstat_update	mm/vmstat.c	/^static void vmstat_update(struct work_struct *w)$/;"	f	file:
vpblock	mm/scm.h	/^	vpmemblock vpblock[MAXVIRTBLOCKS];$/;"	m	struct:__anon14
vpmemblock	mm/scm.h	/^}vpmemblock;$/;"	t	typeref:struct:__anon13
vprintk	kernel/printk.c	/^EXPORT_SYMBOL(vprintk);$/;"	v
vprintk	kernel/printk.c	/^asmlinkage int vprintk(const char *fmt, va_list args)$/;"	f
vprintk_emit	kernel/printk.c	/^EXPORT_SYMBOL(vprintk_emit);$/;"	v
vprintk_emit	kernel/printk.c	/^asmlinkage int vprintk_emit(int facility, int level,$/;"	f
vread	mm/nommu.c	/^long vread(char *buf, char *addr, unsigned long count)$/;"	f
vread	mm/vmalloc.c	/^long vread(char *buf, char *addr, unsigned long count)$/;"	f
vrfy_dir	fs/compat.c	530;"	d	file:
vrfy_dir	fs/read_write.c	652;"	d	file:
vunmap	mm/nommu.c	/^EXPORT_SYMBOL(vunmap);$/;"	v
vunmap	mm/nommu.c	/^void vunmap(const void *addr)$/;"	f
vunmap	mm/vmalloc.c	/^EXPORT_SYMBOL(vunmap);$/;"	v
vunmap	mm/vmalloc.c	/^void vunmap(const void *addr)$/;"	f
vunmap_page_range	mm/vmalloc.c	/^static void vunmap_page_range(unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pmd_range	mm/vmalloc.c	/^static void vunmap_pmd_range(pud_t *pud, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pte_range	mm/vmalloc.c	/^static void vunmap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pud_range	mm/vmalloc.c	/^static void vunmap_pud_range(pgd_t *pgd, unsigned long addr, unsigned long end)$/;"	f	file:
vwrite	mm/nommu.c	/^long vwrite(char *buf, char *addr, unsigned long count)$/;"	f
vwrite	mm/vmalloc.c	/^long vwrite(char *buf, char *addr, unsigned long count)$/;"	f
vzalloc	mm/nommu.c	/^EXPORT_SYMBOL(vzalloc);$/;"	v
vzalloc	mm/nommu.c	/^void *vzalloc(unsigned long size)$/;"	f
vzalloc	mm/vmalloc.c	/^EXPORT_SYMBOL(vzalloc);$/;"	v
vzalloc	mm/vmalloc.c	/^void *vzalloc(unsigned long size)$/;"	f
vzalloc_node	mm/nommu.c	/^EXPORT_SYMBOL(vzalloc_node);$/;"	v
vzalloc_node	mm/nommu.c	/^void *vzalloc_node(unsigned long size, int node)$/;"	f
vzalloc_node	mm/vmalloc.c	/^EXPORT_SYMBOL(vzalloc_node);$/;"	v
vzalloc_node	mm/vmalloc.c	/^void *vzalloc_node(unsigned long size, int node)$/;"	f
w_long	fs/compat_ioctl.c	/^static int w_long(unsigned int fd, unsigned int cmd,$/;"	f	file:
wait	fs/eventpoll.c	/^	wait_queue_t wait;$/;"	m	struct:eppoll_entry	file:
wait	kernel/cgroup.c	/^	wait_queue_t wait;$/;"	m	struct:cgroup_event	file:
wait	mm/memcontrol.c	/^	wait_queue_t	wait;$/;"	m	struct:oom_wait_info	file:
wait_consider_task	kernel/exit.c	/^static int wait_consider_task(struct wait_opts *wo, int ptrace,$/;"	f	file:
wait_for_auditd	kernel/audit.c	/^static void wait_for_auditd(unsigned long sleep_time)$/;"	f	file:
wait_for_discard	mm/swapfile.c	/^static int wait_for_discard(void *word)$/;"	f	file:
wait_for_dump_helpers	fs/coredump.c	/^static void wait_for_dump_helpers(struct file *file)$/;"	f	file:
wait_for_helper	kernel/kmod.c	/^static int wait_for_helper(void *data)$/;"	f	file:
wait_for_kprobe_optimizer	kernel/kprobes.c	/^static __kprobes void wait_for_kprobe_optimizer(void)$/;"	f	file:
wait_for_kprobe_optimizer	kernel/kprobes.c	912;"	d	file:
wait_for_partner	fs/fifo.c	/^static int wait_for_partner(struct inode* inode, unsigned int *cnt)$/;"	f	file:
wait_for_stable_page	mm/page-writeback.c	/^EXPORT_SYMBOL_GPL(wait_for_stable_page);$/;"	v
wait_for_stable_page	mm/page-writeback.c	/^void wait_for_stable_page(struct page *page)$/;"	f
wait_for_vfork_done	kernel/fork.c	/^static int wait_for_vfork_done(struct task_struct *child,$/;"	f	file:
wait_for_zero_refcount	kernel/module.c	/^static void wait_for_zero_refcount(struct module *mod)$/;"	f	file:
wait_iff_congested	mm/backing-dev.c	/^EXPORT_SYMBOL(wait_iff_congested);$/;"	v
wait_iff_congested	mm/backing-dev.c	/^long wait_iff_congested(struct zone *zone, int sync, long timeout)$/;"	f
wait_key_set	fs/select.c	/^static inline void wait_key_set(poll_table *wait, unsigned long in,$/;"	f	file:
wait_noreap_copyout	kernel/exit.c	/^static int wait_noreap_copyout(struct wait_opts *wo, struct task_struct *p,$/;"	f	file:
wait_on_page_bit	mm/filemap.c	/^EXPORT_SYMBOL(wait_on_page_bit);$/;"	v
wait_on_page_bit	mm/filemap.c	/^void wait_on_page_bit(struct page *page, int bit_nr)$/;"	f
wait_on_page_bit_killable	mm/filemap.c	/^int wait_on_page_bit_killable(struct page *page, int bit_nr)$/;"	f
wait_on_page_locked	include/linux/pagemap.h	/^static inline void wait_on_page_locked(struct page *page)$/;"	f
wait_on_page_locked_killable	include/linux/pagemap.h	/^static inline int wait_on_page_locked_killable(struct page *page)$/;"	f
wait_on_page_read	mm/filemap.c	/^static struct page *wait_on_page_read(struct page *page)$/;"	f	file:
wait_on_page_writeback	include/linux/pagemap.h	/^static inline void wait_on_page_writeback(struct page *page)$/;"	f
wait_on_retry_sync_kiocb	fs/read_write.c	/^static void wait_on_retry_sync_kiocb(struct kiocb *iocb)$/;"	f	file:
wait_on_sync_kiocb	fs/aio.c	/^EXPORT_SYMBOL(wait_on_sync_kiocb);$/;"	v
wait_on_sync_kiocb	fs/aio.c	/^ssize_t wait_on_sync_kiocb(struct kiocb *iocb)$/;"	f
wait_opts	kernel/exit.c	/^struct wait_opts {$/;"	s	file:
wait_rcu_gp	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(wait_rcu_gp);$/;"	v
wait_rcu_gp	kernel/rcupdate.c	/^void wait_rcu_gp(call_rcu_func_t crf)$/;"	f
wait_sb_inodes	fs/fs-writeback.c	/^static void wait_sb_inodes(struct super_block *sb)$/;"	f	file:
wait_table_bits	mm/page_alloc.c	/^static inline unsigned long wait_table_bits(unsigned long size)$/;"	f	file:
wait_table_hash_nr_entries	mm/page_alloc.c	/^static inline unsigned long wait_table_hash_nr_entries(unsigned long pages)$/;"	f	file:
wait_task_continued	kernel/exit.c	/^static int wait_task_continued(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
wait_task_stopped	kernel/exit.c	/^static int wait_task_stopped(struct wait_opts *wo,$/;"	f	file:
wait_task_zombie	kernel/exit.c	/^static int wait_task_zombie(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
wait_while_offlining	mm/ksm.c	/^static void wait_while_offlining(void)$/;"	f	file:
waiter	fs/direct-io.c	/^	struct task_struct *waiter;	\/* waiting task (NULL if none) *\/$/;"	m	struct:dio	typeref:struct:dio::task_struct	file:
waitq	mm/memcontrol.c	/^	wait_queue_head_t waitq;		\/* a waitq for other context *\/$/;"	m	struct:move_charge_struct	file:
wake_all_kswapd	mm/page_alloc.c	/^void wake_all_kswapd(unsigned int order, struct zonelist *zonelist,$/;"	f	file:
wake_bit_function	kernel/wait.c	/^EXPORT_SYMBOL(wake_bit_function);$/;"	v
wake_bit_function	kernel/wait.c	/^int wake_bit_function(wait_queue_t *wait, unsigned mode, int sync, void *arg)$/;"	f
wake_futex	kernel/futex.c	/^static void wake_futex(struct futex_q *q)$/;"	f	file:
wake_futex_pi	kernel/futex.c	/^static int wake_futex_pi(u32 __user *uaddr, u32 uval, struct futex_q *this)$/;"	f	file:
wake_up_bit	kernel/wait.c	/^EXPORT_SYMBOL(wake_up_bit);$/;"	v
wake_up_bit	kernel/wait.c	/^void wake_up_bit(void *word, int bit)$/;"	f
wake_up_klogd	kernel/printk.c	/^void wake_up_klogd(void)$/;"	f
wake_up_klogd_work_func	kernel/printk.c	/^static void wake_up_klogd_work_func(struct irq_work *irq_work)$/;"	f	file:
wake_up_page	mm/filemap.c	/^static inline void wake_up_page(struct page *page, int bit)$/;"	f	file:
wake_up_partner	fs/fifo.c	/^static void wake_up_partner(struct inode* inode)$/;"	f	file:
wake_up_worker	kernel/workqueue.c	/^static void wake_up_worker(struct worker_pool *pool)$/;"	f	file:
wakemask	kernel/rcutree.h	/^	atomic_t wakemask;	\/* CPUs whose kthread needs to be awakened. *\/$/;"	m	struct:rcu_node
wakeme_after_rcu	kernel/rcupdate.c	/^static void wakeme_after_rcu(struct rcu_head  *head)$/;"	f	file:
wakeme_after_rcu	kernel/srcu.c	/^static void wakeme_after_rcu(struct rcu_head *head)$/;"	f	file:
wakeup_flusher_threads	fs/fs-writeback.c	/^void wakeup_flusher_threads(long nr_pages, enum wb_reason reason)$/;"	f
wakeup_kswapd	mm/vmscan.c	/^void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx)$/;"	f
wakeup_next_waiter	kernel/rtmutex.c	/^static void wakeup_next_waiter(struct rt_mutex *lock)$/;"	f	file:
wakeup_pipe_readers	fs/splice.c	/^static void wakeup_pipe_readers(struct pipe_inode_info *pipe)$/;"	f	file:
wakeup_pipe_writers	fs/splice.c	/^static void wakeup_pipe_writers(struct pipe_inode_info *pipe)$/;"	f	file:
wakeup_readers	kernel/relay.c	/^static void wakeup_readers(unsigned long data)$/;"	f	file:
wakeup_softirqd	kernel/softirq.c	/^static void wakeup_softirqd(void)$/;"	f	file:
wakeup_timer_fn	mm/backing-dev.c	/^static void wakeup_timer_fn(unsigned long data)$/;"	f	file:
walk_component	fs/namei.c	/^static inline int walk_component(struct nameidata *nd, struct path *path,$/;"	f	file:
walk_hugetlb_range	mm/pagewalk.c	/^static int walk_hugetlb_range(struct vm_area_struct *vma,$/;"	f	file:
walk_memory_range	mm/memory_hotplug.c	/^static int walk_memory_range(unsigned long start_pfn, unsigned long end_pfn,$/;"	f	file:
walk_page_buffers	fs/ext3/inode.c	/^static int walk_page_buffers(	handle_t *handle,$/;"	f	file:
walk_page_range	mm/pagewalk.c	/^int walk_page_range(unsigned long addr, unsigned long end,$/;"	f
walk_pmd_range	mm/pagewalk.c	/^static int walk_pmd_range(pud_t *pud, unsigned long addr, unsigned long end,$/;"	f	file:
walk_pte_range	mm/pagewalk.c	/^static int walk_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,$/;"	f	file:
walk_pud_range	mm/pagewalk.c	/^static int walk_pud_range(pgd_t *pgd, unsigned long addr, unsigned long end,$/;"	f	file:
walk_system_ram_range	kernel/resource.c	/^int walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,$/;"	f
walk_zones_in_node	mm/vmstat.c	/^static void walk_zones_in_node(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
wants_signal	kernel/signal.c	/^static inline int wants_signal(int sig, struct task_struct *p)$/;"	f	file:
warn	kernel/module.c	/^	bool warn;$/;"	m	struct:find_symbol_arg	file:
warn_alloc_failed	mm/page_alloc.c	/^void warn_alloc_failed(gfp_t gfp_mask, int order, const char *fmt, ...)$/;"	f
warn_deprecated_v2	kernel/capability.c	/^static void warn_deprecated_v2(void)$/;"	f	file:
warn_legacy_capability_use	kernel/capability.c	/^static void warn_legacy_capability_use(void)$/;"	f	file:
warn_on_bintable	kernel/sysctl_binary.c	/^static void warn_on_bintable(const int *name, int nlen)$/;"	f	file:
warn_scan_unevictable_pages	mm/vmscan.c	/^static void warn_scan_unevictable_pages(void)$/;"	f	file:
warn_slowpath_common	kernel/panic.c	/^static void warn_slowpath_common(const char *file, int line, void *caller,$/;"	f	file:
warn_slowpath_fmt	kernel/panic.c	/^EXPORT_SYMBOL(warn_slowpath_fmt);$/;"	v
warn_slowpath_fmt	kernel/panic.c	/^void warn_slowpath_fmt(const char *file, int line, const char *fmt, ...)$/;"	f
warn_slowpath_fmt_taint	kernel/panic.c	/^EXPORT_SYMBOL(warn_slowpath_fmt_taint);$/;"	v
warn_slowpath_fmt_taint	kernel/panic.c	/^void warn_slowpath_fmt_taint(const char *file, int line,$/;"	f
warn_slowpath_null	kernel/panic.c	/^EXPORT_SYMBOL(warn_slowpath_null);$/;"	v
warn_slowpath_null	kernel/panic.c	/^void warn_slowpath_null(const char *file, int line)$/;"	f
warp_clock	kernel/time.c	/^static inline void warp_clock(void)$/;"	f	file:
watchdog	kernel/hung_task.c	/^static int watchdog(void *dummy)$/;"	f	file:
watchdog	kernel/watchdog.c	/^static void watchdog(unsigned int cpu)$/;"	f	file:
watchdog_disable	kernel/watchdog.c	/^static void watchdog_disable(unsigned int cpu)$/;"	f	file:
watchdog_disable_all_cpus	kernel/watchdog.c	/^static void watchdog_disable_all_cpus(void)$/;"	f	file:
watchdog_disabled	kernel/watchdog.c	/^static int __read_mostly watchdog_disabled;$/;"	v	file:
watchdog_enable	kernel/watchdog.c	/^static void watchdog_enable(unsigned int cpu)$/;"	f	file:
watchdog_enable_all_cpus	kernel/watchdog.c	/^static void watchdog_enable_all_cpus(void)$/;"	f	file:
watchdog_enabled	kernel/watchdog.c	/^int watchdog_enabled = 1;$/;"	v
watchdog_interrupt_count	kernel/watchdog.c	/^static void watchdog_interrupt_count(void)$/;"	f	file:
watchdog_nmi_disable	kernel/watchdog.c	/^static void watchdog_nmi_disable(unsigned int cpu) { return; }$/;"	f	file:
watchdog_nmi_disable	kernel/watchdog.c	/^static void watchdog_nmi_disable(unsigned int cpu)$/;"	f	file:
watchdog_nmi_enable	kernel/watchdog.c	/^static int watchdog_nmi_enable(unsigned int cpu) { return 0; }$/;"	f	file:
watchdog_nmi_enable	kernel/watchdog.c	/^static int watchdog_nmi_enable(unsigned int cpu)$/;"	f	file:
watchdog_overflow_callback	kernel/watchdog.c	/^static void watchdog_overflow_callback(struct perf_event *event,$/;"	f	file:
watchdog_set_prio	kernel/watchdog.c	/^static void watchdog_set_prio(unsigned int policy, unsigned int prio)$/;"	f	file:
watchdog_should_run	kernel/watchdog.c	/^static int watchdog_should_run(unsigned int cpu)$/;"	f	file:
watchdog_task	kernel/hung_task.c	/^static struct task_struct *watchdog_task;$/;"	v	typeref:struct:task_struct	file:
watchdog_threads	kernel/watchdog.c	/^static struct smp_hotplug_thread watchdog_threads = {$/;"	v	typeref:struct:smp_hotplug_thread	file:
watchdog_thresh	kernel/watchdog.c	/^int __read_mostly watchdog_thresh = 10;$/;"	v
watchdog_timer_fn	kernel/watchdog.c	/^static enum hrtimer_restart watchdog_timer_fn(struct hrtimer *hrtimer)$/;"	f	file:
watches	kernel/audit_watch.c	/^	struct list_head	watches; \/* anchor for audit_watch->wlist *\/$/;"	m	struct:audit_parent	typeref:struct:audit_parent::list_head	file:
wb_check_background_flush	fs/fs-writeback.c	/^static long wb_check_background_flush(struct bdi_writeback *wb)$/;"	f	file:
wb_check_old_data_flush	fs/fs-writeback.c	/^static long wb_check_old_data_flush(struct bdi_writeback *wb)$/;"	f	file:
wb_do_writeback	fs/fs-writeback.c	/^long wb_do_writeback(struct bdi_writeback *wb, int force_wait)$/;"	f
wb_inode	fs/fs-writeback.c	/^static inline struct inode *wb_inode(struct list_head *head)$/;"	f	file:
wb_update_bandwidth	fs/fs-writeback.c	/^static void wb_update_bandwidth(struct bdi_writeback *wb,$/;"	f	file:
wb_writeback	fs/fs-writeback.c	/^static long wb_writeback(struct bdi_writeback *wb,$/;"	f	file:
wb_writeback_work	fs/fs-writeback.c	/^struct wb_writeback_work {$/;"	s	file:
wd	fs/notify/inotify/inotify.h	/^	int wd;$/;"	m	struct:inotify_event_private_data
wd	fs/notify/inotify/inotify.h	/^	int wd;$/;"	m	struct:inotify_inode_mark
wd_hw_attr	kernel/watchdog.c	/^static struct perf_event_attr wd_hw_attr = {$/;"	v	typeref:struct:perf_event_attr	file:
wdog_pid	fs/compat.c	/^	compat_long_t wdog_pid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
wdog_pid	fs/compat.c	/^	compat_pid_t wdog_pid;$/;"	m	struct:compat_ncp_mount_data	file:
what_owner_is_waiting_for	fs/locks.c	/^static struct file_lock *what_owner_is_waiting_for(struct file_lock *block_fl)$/;"	f	file:
whead	fs/eventpoll.c	/^	wait_queue_head_t *whead;$/;"	m	struct:eppoll_entry	file:
when	mm/slub.c	/^	unsigned long when;	\/* When did the operation occur *\/$/;"	m	struct:track	file:
while_file_list_for_each_entry	fs/file_table.c	421;"	d	file:
while_file_list_for_each_entry	fs/file_table.c	433;"	d	file:
will_become_orphaned_pgrp	kernel/exit.c	/^static int will_become_orphaned_pgrp(struct pid *pgrp, struct task_struct *ignored_task)$/;"	f	file:
within	kernel/lockdep.c	/^static inline int within(const void *addr, void *start, unsigned long size)$/;"	f	file:
within	kernel/module.c	/^static inline int within(unsigned long addr, void *start, unsigned long size)$/;"	f	file:
wlist	kernel/audit_watch.c	/^	struct list_head	wlist;	\/* entry in parent->watches list *\/$/;"	m	struct:audit_watch	typeref:struct:audit_watch::list_head	file:
wo_flags	kernel/exit.c	/^	int			wo_flags;$/;"	m	struct:wait_opts	file:
wo_info	kernel/exit.c	/^	struct siginfo __user	*wo_info;$/;"	m	struct:wait_opts	typeref:struct:wait_opts::__user	file:
wo_pid	kernel/exit.c	/^	struct pid		*wo_pid;$/;"	m	struct:wait_opts	typeref:struct:wait_opts::pid	file:
wo_rusage	kernel/exit.c	/^	struct rusage __user	*wo_rusage;$/;"	m	struct:wait_opts	typeref:struct:wait_opts::__user	file:
wo_stat	kernel/exit.c	/^	int __user		*wo_stat;$/;"	m	struct:wait_opts	file:
wo_type	kernel/exit.c	/^	enum pid_type		wo_type;$/;"	m	struct:wait_opts	typeref:enum:wait_opts::pid_type	file:
work	kernel/async.c	/^	struct work_struct	work;$/;"	m	struct:async_entry	typeref:struct:async_entry::work_struct	file:
work	kernel/kthread.c	/^	struct kthread_work	work;$/;"	m	struct:kthread_flush_work	typeref:struct:kthread_flush_work::kthread_work	file:
work	kernel/workqueue.c	/^	struct work_struct	work;$/;"	m	struct:wq_barrier	typeref:struct:wq_barrier::work_struct	file:
work	kernel/workqueue.c	/^	struct work_struct work;$/;"	m	struct:work_for_cpu	typeref:struct:work_for_cpu::work_struct	file:
work	mm/memcontrol.c	/^	struct work_struct work;$/;"	m	struct:create_work	typeref:struct:create_work::work_struct	file:
work	mm/memcontrol.c	/^	struct work_struct work;$/;"	m	struct:memcg_stock_pcp	typeref:struct:memcg_stock_pcp::work_struct	file:
work	mm/memory-failure.c	/^	struct work_struct work;$/;"	m	struct:memory_failure_cpu	typeref:struct:memory_failure_cpu::work_struct	file:
work_busy	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(work_busy);$/;"	v
work_busy	kernel/workqueue.c	/^unsigned int work_busy(struct work_struct *work)$/;"	f
work_color	kernel/workqueue.c	/^	int			work_color;	\/* F: current work color *\/$/;"	m	struct:workqueue_struct	file:
work_color	kernel/workqueue.c	/^	int			work_color;	\/* L: current color *\/$/;"	m	struct:pool_workqueue	file:
work_color_to_flags	kernel/workqueue.c	/^static unsigned int work_color_to_flags(int color)$/;"	f	file:
work_debug_descr	kernel/workqueue.c	/^static struct debug_obj_descr work_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr	file:
work_debug_descr	kernel/workqueue.c	/^static struct debug_obj_descr work_debug_descr;$/;"	v	typeref:struct:debug_obj_descr	file:
work_debug_hint	kernel/workqueue.c	/^static void *work_debug_hint(void *addr)$/;"	f	file:
work_exited	kernel/task_work.c	/^static struct callback_head work_exited; \/* all we need is ->next == NULL *\/$/;"	v	typeref:struct:callback_head	file:
work_fixup_activate	kernel/workqueue.c	/^static int work_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
work_fixup_free	kernel/workqueue.c	/^static int work_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
work_fixup_init	kernel/workqueue.c	/^static int work_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
work_for_cpu	kernel/workqueue.c	/^struct work_for_cpu {$/;"	s	file:
work_for_cpu_fn	kernel/workqueue.c	/^static void work_for_cpu_fn(struct work_struct *work)$/;"	f	file:
work_freeing	mm/memcontrol.c	/^		struct work_struct work_freeing;$/;"	m	union:mem_cgroup::__anon9	typeref:struct:mem_cgroup::__anon9::work_struct	file:
work_is_canceling	kernel/workqueue.c	/^static bool work_is_canceling(struct work_struct *work)$/;"	f	file:
work_next_color	kernel/workqueue.c	/^static int work_next_color(int color)$/;"	f	file:
work_on_cpu	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(work_on_cpu);$/;"	v
work_on_cpu	kernel/workqueue.c	/^long work_on_cpu(unsigned int cpu, long (*fn)(void *), void *arg)$/;"	f
worker	kernel/workqueue_internal.h	/^struct worker {$/;"	s
worker_clr_flags	kernel/workqueue.c	/^static inline void worker_clr_flags(struct worker *worker, unsigned int flags)$/;"	f	file:
worker_enter_idle	kernel/workqueue.c	/^static void worker_enter_idle(struct worker *worker)$/;"	f	file:
worker_ida	kernel/workqueue.c	/^	struct ida		worker_ida;	\/* L: for worker IDs *\/$/;"	m	struct:worker_pool	typeref:struct:worker_pool::ida	file:
worker_leave_idle	kernel/workqueue.c	/^static void worker_leave_idle(struct worker *worker)$/;"	f	file:
worker_pool	kernel/workqueue.c	/^struct worker_pool {$/;"	s	file:
worker_pool_assign_id	kernel/workqueue.c	/^static int worker_pool_assign_id(struct worker_pool *pool)$/;"	f	file:
worker_pool_by_id	kernel/workqueue.c	/^static struct worker_pool *worker_pool_by_id(int pool_id)$/;"	f	file:
worker_set_flags	kernel/workqueue.c	/^static inline void worker_set_flags(struct worker *worker, unsigned int flags,$/;"	f	file:
worker_thread	kernel/workqueue.c	/^static int worker_thread(void *__worker)$/;"	f	file:
worklist	kernel/workqueue.c	/^	struct list_head	worklist;	\/* L: list of pending works *\/$/;"	m	struct:worker_pool	typeref:struct:worker_pool::list_head	file:
workqueue_congested	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(workqueue_congested);$/;"	v
workqueue_congested	kernel/workqueue.c	/^bool workqueue_congested(unsigned int cpu, struct workqueue_struct *wq)$/;"	f
workqueue_cpu_down_callback	kernel/workqueue.c	/^static int __cpuinit workqueue_cpu_down_callback(struct notifier_block *nfb,$/;"	f	file:
workqueue_cpu_up_callback	kernel/workqueue.c	/^static int __cpuinit workqueue_cpu_up_callback(struct notifier_block *nfb,$/;"	f	file:
workqueue_freezing	kernel/workqueue.c	/^static bool workqueue_freezing;		\/* W: have wqs started freezing? *\/$/;"	v	file:
workqueue_set_max_active	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(workqueue_set_max_active);$/;"	v
workqueue_set_max_active	kernel/workqueue.c	/^void workqueue_set_max_active(struct workqueue_struct *wq, int max_active)$/;"	f
workqueue_struct	kernel/workqueue.c	/^struct workqueue_struct {$/;"	s	file:
works	kernel/stop_machine.c	/^	struct list_head	works;		\/* list of pending works *\/$/;"	m	struct:cpu_stopper	typeref:struct:cpu_stopper::list_head	file:
would_dump	fs/exec.c	/^EXPORT_SYMBOL(would_dump);$/;"	v
would_dump	fs/exec.c	/^void would_dump(struct linux_binprm *bprm, struct file *file)$/;"	f
wp_next_time	mm/page-writeback.c	/^static unsigned long wp_next_time(unsigned long cur_time)$/;"	f	file:
wq	fs/eventpoll.c	/^	wait_queue_head_t wq;$/;"	m	struct:eventpoll	file:
wq	fs/file.c	/^	struct work_struct wq;$/;"	m	struct:fdtable_defer	typeref:struct:fdtable_defer::work_struct	file:
wq	kernel/workqueue.c	/^	struct workqueue_struct *wq;		\/* I: the owning workqueue *\/$/;"	m	struct:pool_workqueue	typeref:struct:pool_workqueue::workqueue_struct	file:
wq_barrier	kernel/workqueue.c	/^struct wq_barrier {$/;"	s	file:
wq_barrier_func	kernel/workqueue.c	/^static void wq_barrier_func(struct work_struct *work)$/;"	f	file:
wq_clamp_max_active	kernel/workqueue.c	/^static int wq_clamp_max_active(int max_active, unsigned int flags,$/;"	f	file:
wq_flusher	kernel/workqueue.c	/^struct wq_flusher {$/;"	s	file:
wq_unbind_fn	kernel/workqueue.c	/^static void wq_unbind_fn(struct work_struct *work)$/;"	f	file:
wq_worker_sleeping	kernel/workqueue.c	/^struct task_struct *wq_worker_sleeping(struct task_struct *task,$/;"	f
wq_worker_waking_up	kernel/workqueue.c	/^void wq_worker_waking_up(struct task_struct *task, unsigned int cpu)$/;"	f
wqh	fs/eventfd.c	/^	wait_queue_head_t wqh;$/;"	m	struct:eventfd_ctx	file:
wqh	fs/timerfd.c	/^	wait_queue_head_t wqh;$/;"	m	struct:timerfd_ctx	file:
wqh	kernel/cgroup.c	/^	wait_queue_head_t *wqh;$/;"	m	struct:cgroup_event	file:
write_boundary_block	fs/buffer.c	/^void write_boundary_block(struct block_device *bdev,$/;"	f
write_cache_pages	mm/page-writeback.c	/^EXPORT_SYMBOL(write_cache_pages);$/;"	v
write_cache_pages	mm/page-writeback.c	/^int write_cache_pages(struct address_space *mapping,$/;"	f
write_dirty_buffer	fs/buffer.c	/^EXPORT_SYMBOL(write_dirty_buffer);$/;"	v
write_dirty_buffer	fs/buffer.c	/^void write_dirty_buffer(struct buffer_head *bh, int rw)$/;"	f
write_enabled_file_bool	kernel/kprobes.c	/^static ssize_t write_enabled_file_bool(struct file *file,$/;"	f	file:
write_end_fn	fs/ext3/inode.c	/^static int write_end_fn(handle_t *handle, struct buffer_head *bh)$/;"	f	file:
write_inode	fs/fs-writeback.c	/^static int write_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f	file:
write_inode_now	fs/fs-writeback.c	/^EXPORT_SYMBOL(write_inode_now);$/;"	v
write_inode_now	fs/fs-writeback.c	/^int write_inode_now(struct inode *inode, int sync)$/;"	f
write_note_info	fs/binfmt_elf.c	/^static int write_note_info(struct elf_note_info *info,$/;"	f	file:
write_one_page	mm/page-writeback.c	/^EXPORT_SYMBOL(write_one_page);$/;"	v
write_one_page	mm/page-writeback.c	/^int write_one_page(struct page *page, int wait)$/;"	f
write_pipe_buf	fs/splice.c	/^static int write_pipe_buf(struct pipe_inode_info *pipe, struct pipe_buffer *buf,$/;"	f	file:
write_pipefifo_fops	fs/pipe.c	/^const struct file_operations write_pipefifo_fops = {$/;"	v	typeref:struct:file_operations
write_profile	kernel/profile.c	/^static ssize_t write_profile(struct file *file, const char __user *buf,$/;"	f	file:
write_protect_page	mm/ksm.c	/^static int write_protect_page(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
write_scan_unevictable_node	mm/vmscan.c	/^static ssize_t write_scan_unevictable_node(struct device *dev,$/;"	f	file:
writeback	mm/memory-failure.c	749;"	d	file:
writeback	mm/memory-failure.c	806;"	d	file:
writeback_chunk_size	fs/fs-writeback.c	/^static long writeback_chunk_size(struct backing_dev_info *bdi,$/;"	f	file:
writeback_in_progress	fs/fs-writeback.c	/^EXPORT_SYMBOL(writeback_in_progress);$/;"	v
writeback_in_progress	fs/fs-writeback.c	/^int writeback_in_progress(struct backing_dev_info *bdi)$/;"	f
writeback_inodes_sb	fs/fs-writeback.c	/^EXPORT_SYMBOL(writeback_inodes_sb);$/;"	v
writeback_inodes_sb	fs/fs-writeback.c	/^void writeback_inodes_sb(struct super_block *sb, enum wb_reason reason)$/;"	f
writeback_inodes_sb_nr	fs/fs-writeback.c	/^EXPORT_SYMBOL(writeback_inodes_sb_nr);$/;"	v
writeback_inodes_sb_nr	fs/fs-writeback.c	/^void writeback_inodes_sb_nr(struct super_block *sb,$/;"	f
writeback_inodes_wb	fs/fs-writeback.c	/^long writeback_inodes_wb(struct bdi_writeback *wb, long nr_pages,$/;"	f
writeback_sb_inodes	fs/fs-writeback.c	/^static long writeback_sb_inodes(struct super_block *sb,$/;"	f	file:
writeback_set_ratelimit	mm/page-writeback.c	/^void writeback_set_ratelimit(void)$/;"	f
writeback_single_inode	fs/fs-writeback.c	/^writeback_single_inode(struct inode *inode, struct bdi_writeback *wb,$/;"	f	file:
writeback_stat_item	mm/vmstat.c	/^enum writeback_stat_item {$/;"	g	file:
writenote	fs/binfmt_elf.c	/^static int writenote(struct memelfnote *men, struct file *file,$/;"	f	file:
writenote	fs/binfmt_elf_fdpic.c	/^static int writenote(struct memelfnote *men, struct file *file,$/;"	f	file:
writeout	mm/migrate.c	/^static int writeout(struct address_space *mapping, struct page *page)$/;"	f	file:
writeout_completions	mm/page-writeback.c	/^static struct fprop_global writeout_completions;$/;"	v	typeref:struct:fprop_global	file:
writeout_period	mm/page-writeback.c	/^static void writeout_period(unsigned long t)$/;"	f	file:
writeout_period_time	mm/page-writeback.c	/^static unsigned long writeout_period_time = 0;$/;"	v	file:
writeout_period_timer	mm/page-writeback.c	/^static struct timer_list writeout_period_timer =$/;"	v	typeref:struct:timer_list	file:
writer_task	kernel/rcutorture.c	/^static struct task_struct *writer_task;$/;"	v	typeref:struct:task_struct	file:
ws	fs/eventpoll.c	/^	struct wakeup_source *ws;$/;"	m	struct:epitem	typeref:struct:epitem::wakeup_source	file:
ws	fs/eventpoll.c	/^	struct wakeup_source *ws;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::wakeup_source	file:
wsize	fs/compat.c	/^	compat_int_t wsize;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
xacct_add_tsk	kernel/tsacct.c	/^void xacct_add_tsk(struct taskstats *stats, struct task_struct *p)$/;"	f
xattr_enabled	kernel/cgroup.c	/^static inline int xattr_enabled(struct dentry *dentry)$/;"	f	file:
xattr_getsecurity	fs/xattr.c	/^EXPORT_SYMBOL_GPL(xattr_getsecurity);$/;"	v
xattr_getsecurity	fs/xattr.c	/^xattr_getsecurity(struct inode *inode, const char *name, void *value,$/;"	f
xattr_is_trusted	fs/xattr.c	/^static bool xattr_is_trusted(const char *name)$/;"	f	file:
xattr_permission	fs/xattr.c	/^xattr_permission(struct inode *inode, const char *name, int mask)$/;"	f	file:
xattr_resolve_name	fs/xattr.c	/^xattr_resolve_name(const struct xattr_handler **handlers, const char **name)$/;"	f	file:
xattr_sem	fs/ext3/ext3.h	/^	struct rw_semaphore xattr_sem;$/;"	m	struct:ext3_inode_info	typeref:struct:ext3_inode_info::rw_semaphore
xfpu	fs/binfmt_elf.c	/^	elf_fpxregset_t *xfpu;$/;"	m	struct:elf_note_info	file:
xfpu	fs/binfmt_elf.c	/^	elf_fpxregset_t xfpu;		\/* ELF_CORE_XFPREG_TYPE *\/$/;"	m	struct:elf_thread_status	file:
xfpu	fs/binfmt_elf_fdpic.c	/^	elf_fpxregset_t xfpu;		\/* ELF_CORE_XFPREG_TYPE *\/$/;"	m	struct:elf_thread_status	file:
xip_file_fault	mm/filemap_xip.c	/^static int xip_file_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
xip_file_mmap	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_file_mmap);$/;"	v
xip_file_mmap	mm/filemap_xip.c	/^int xip_file_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
xip_file_read	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_file_read);$/;"	v
xip_file_read	mm/filemap_xip.c	/^xip_file_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos)$/;"	f
xip_file_vm_ops	mm/filemap_xip.c	/^static const struct vm_operations_struct xip_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
xip_file_write	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_file_write);$/;"	v
xip_file_write	mm/filemap_xip.c	/^xip_file_write(struct file *filp, const char __user *buf, size_t len,$/;"	f
xip_sparse_page	mm/filemap_xip.c	/^static struct page *xip_sparse_page(void)$/;"	f	file:
xip_sparse_seq	mm/filemap_xip.c	/^static seqcount_t xip_sparse_seq = SEQCNT_ZERO;$/;"	v	file:
xip_truncate_page	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_truncate_page);$/;"	v
xip_truncate_page	mm/filemap_xip.c	/^xip_truncate_page(struct address_space *mapping, loff_t from)$/;"	f
xmit_fifo_size	fs/compat_ioctl.c	/^        compat_int_t    xmit_fifo_size;$/;"	m	struct:serial_struct32	file:
xmit_idle	fs/compat_ioctl.c	/^	compat_time_t xmit_idle;$/;"	m	struct:ppp_idle32	file:
zap_class	kernel/lockdep.c	/^static void zap_class(struct lock_class *class)$/;"	f	file:
zap_huge_pmd	mm/huge_memory.c	/^int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
zap_locks	kernel/printk.c	/^static void zap_locks(void)$/;"	f	file:
zap_other_threads	kernel/signal.c	/^int zap_other_threads(struct task_struct *p)$/;"	f
zap_page_range	mm/memory.c	/^void zap_page_range(struct vm_area_struct *vma, unsigned long start,$/;"	f
zap_page_range_single	mm/memory.c	/^static void zap_page_range_single(struct vm_area_struct *vma, unsigned long address,$/;"	f	file:
zap_pid_ns_processes	kernel/pid_namespace.c	/^void zap_pid_ns_processes(struct pid_namespace *pid_ns)$/;"	f
zap_pmd_range	mm/memory.c	/^static inline unsigned long zap_pmd_range(struct mmu_gather *tlb,$/;"	f	file:
zap_process	fs/coredump.c	/^static int zap_process(struct task_struct *start, int exit_code)$/;"	f	file:
zap_pte	mm/fremap.c	/^static void zap_pte(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
zap_pte_range	mm/memory.c	/^static unsigned long zap_pte_range(struct mmu_gather *tlb,$/;"	f	file:
zap_pud_range	mm/memory.c	/^static inline unsigned long zap_pud_range(struct mmu_gather *tlb,$/;"	f	file:
zap_threads	fs/coredump.c	/^static inline int zap_threads(struct task_struct *tsk, struct mm_struct *mm,$/;"	f	file:
zap_vma_ptes	mm/memory.c	/^EXPORT_SYMBOL_GPL(zap_vma_ptes);$/;"	v
zap_vma_ptes	mm/memory.c	/^int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,$/;"	f
zero	fs/eventpoll.c	/^static long zero;$/;"	v	file:
zero	fs/notify/inotify/inotify_user.c	/^static int zero;$/;"	v	file:
zero	kernel/pid_namespace.c	/^static int zero = 0;$/;"	v	file:
zero	kernel/sysctl.c	/^static int zero;$/;"	v	file:
zero_cpu_stall_ticks	kernel/rcutree_plugin.h	/^static void zero_cpu_stall_ticks(struct rcu_data *rdp)$/;"	f
zero_fill_bio	fs/bio.c	/^EXPORT_SYMBOL(zero_fill_bio);$/;"	v
zero_fill_bio	fs/bio.c	/^void zero_fill_bio(struct bio *bio)$/;"	f
zlc_clear_zones_full	mm/page_alloc.c	/^static void zlc_clear_zones_full(struct zonelist *zonelist)$/;"	f	file:
zlc_mark_zone_full	mm/page_alloc.c	/^static void zlc_mark_zone_full(struct zonelist *zonelist, struct zoneref *z)$/;"	f	file:
zlc_setup	mm/page_alloc.c	/^static nodemask_t *zlc_setup(struct zonelist *zonelist, int alloc_flags)$/;"	f	file:
zlc_zone_worth_trying	mm/page_alloc.c	/^static int zlc_zone_worth_trying(struct zonelist *zonelist, struct zoneref *z,$/;"	f	file:
zone	mm/internal.h	/^	struct zone *zone;$/;"	m	struct:compact_control	typeref:struct:compact_control::zone
zone_absent_pages_in_node	mm/page_alloc.c	/^static inline unsigned long __meminit zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_absent_pages_in_node	mm/page_alloc.c	/^static unsigned long __meminit zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_allows_reclaim	mm/page_alloc.c	/^static bool zone_allows_reclaim(struct zone *local_zone, struct zone *zone)$/;"	f	file:
zone_balanced	mm/vmscan.c	/^static bool zone_balanced(struct zone *zone, int order,$/;"	f	file:
zone_batchsize	mm/page_alloc.c	/^static int __meminit zone_batchsize(struct zone *zone)$/;"	f	file:
zone_dirty_limit	mm/page-writeback.c	/^static unsigned long zone_dirty_limit(struct zone *zone)$/;"	f	file:
zone_dirty_ok	mm/page-writeback.c	/^bool zone_dirty_ok(struct zone *zone)$/;"	f
zone_dirtyable_memory	mm/page-writeback.c	/^static unsigned long zone_dirtyable_memory(struct zone *zone)$/;"	f	file:
zone_init_free_lists	mm/page_alloc.c	/^static void __meminit zone_init_free_lists(struct zone *zone)$/;"	f	file:
zone_movable_pfn	mm/page_alloc.c	/^static unsigned long __meminitdata zone_movable_pfn[MAX_NUMNODES];$/;"	v	file:
zone_names	mm/page_alloc.c	/^static char * const zone_names[MAX_NR_ZONES] = {$/;"	v	file:
zone_pagecache_reclaimable	mm/vmscan.c	/^static long zone_pagecache_reclaimable(struct zone *zone)$/;"	f	file:
zone_pcp_init	mm/page_alloc.c	/^static __meminit void zone_pcp_init(struct zone *zone)$/;"	f	file:
zone_pcp_reset	mm/page_alloc.c	/^void zone_pcp_reset(struct zone *zone)$/;"	f
zone_pcp_update	mm/page_alloc.c	/^void __meminit zone_pcp_update(struct zone *zone)$/;"	f
zone_reclaim	mm/vmscan.c	/^int zone_reclaim(struct zone *zone, gfp_t gfp_mask, unsigned int order)$/;"	f
zone_reclaimable	mm/vmscan.c	/^static bool zone_reclaimable(struct zone *zone)$/;"	f	file:
zone_reclaimable_pages	mm/vmscan.c	/^unsigned long zone_reclaimable_pages(struct zone *zone)$/;"	f
zone_spanned_pages_in_node	mm/page_alloc.c	/^static inline unsigned long __meminit zone_spanned_pages_in_node(int nid,$/;"	f	file:
zone_spanned_pages_in_node	mm/page_alloc.c	/^static unsigned long __meminit zone_spanned_pages_in_node(int nid,$/;"	f	file:
zone_statistics	mm/vmstat.c	/^void zone_statistics(struct zone *preferred_zone, struct zone *z, gfp_t flags)$/;"	f
zone_unmapped_file_pages	mm/vmscan.c	/^static inline unsigned long zone_unmapped_file_pages(struct zone *zone)$/;"	f	file:
zone_wait_table_init	mm/page_alloc.c	/^int zone_wait_table_init(struct zone *zone, unsigned long zone_size_pages)$/;"	f	file:
zone_watermark_ok	mm/page_alloc.c	/^bool zone_watermark_ok(struct zone *z, int order, unsigned long mark,$/;"	f
zone_watermark_ok_safe	mm/page_alloc.c	/^bool zone_watermark_ok_safe(struct zone *z, int order, unsigned long mark,$/;"	f
zoneinfo	mm/memcontrol.c	/^	struct mem_cgroup_per_zone zoneinfo[MAX_NR_ZONES];$/;"	m	struct:mem_cgroup_per_node	typeref:struct:mem_cgroup_per_node::mem_cgroup_per_zone	file:
zoneinfo_op	mm/vmstat.c	/^static const struct seq_operations zoneinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
zoneinfo_open	mm/vmstat.c	/^static int zoneinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
zoneinfo_show	mm/vmstat.c	/^static int zoneinfo_show(struct seq_file *m, void *arg)$/;"	f	file:
zoneinfo_show_print	mm/vmstat.c	/^static void zoneinfo_show_print(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
zonelist_order_name	mm/page_alloc.c	/^static char zonelist_order_name[3][8] = {"Default", "Node", "Zone"};$/;"	v	file:
zonelists_mutex	mm/page_alloc.c	/^DEFINE_MUTEX(zonelists_mutex);$/;"	v
zoneref_set_zone	mm/page_alloc.c	/^static void zoneref_set_zone(struct zone *zone, struct zoneref *zoneref)$/;"	f	file:
zref_in_nodemask	mm/mmzone.c	/^static inline int zref_in_nodemask(struct zoneref *zref, nodemask_t *nodes)$/;"	f	file:
