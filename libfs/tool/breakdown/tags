!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCT_TIMEOUT	kernel/acct.c	73;"	d	file:
AIO_BATCH_HASH_BITS	fs/aio.c	67;"	d	file:
AIO_BATCH_HASH_SIZE	fs/aio.c	68;"	d	file:
AIO_EVENTS_FIRST_PAGE	fs/aio.c	191;"	d	file:
AIO_EVENTS_OFFSET	fs/aio.c	192;"	d	file:
AIO_EVENTS_PER_PAGE	fs/aio.c	190;"	d	file:
ALLOC_CPUSET	mm/page_alloc.c	1259;"	d	file:
ALLOC_HARDER	mm/page_alloc.c	1257;"	d	file:
ALLOC_HIGH	mm/page_alloc.c	1258;"	d	file:
ALLOC_NO_WATERMARKS	mm/page_alloc.c	1252;"	d	file:
ALLOC_WMARK_HIGH	mm/page_alloc.c	1251;"	d	file:
ALLOC_WMARK_LOW	mm/page_alloc.c	1250;"	d	file:
ALLOC_WMARK_MASK	mm/page_alloc.c	1255;"	d	file:
ALLOC_WMARK_MIN	mm/page_alloc.c	1249;"	d	file:
ARCH_DLINFO	fs/compat_binfmt_elf.c	83;"	d	file:
ARCH_DLINFO	fs/compat_binfmt_elf.c	84;"	d	file:
ARCH_HAS_SETUP_ADDITIONAL_PAGES	fs/compat_binfmt_elf.c	113;"	d	file:
ARCH_HAS_SETUP_ADDITIONAL_PAGES	fs/compat_binfmt_elf.c	114;"	d	file:
ARCH_KMALLOC_FLAGS	mm/slab.c	172;"	d	file:
ARCH_KMALLOC_MINALIGN	mm/slab.c	157;"	d	file:
ARCH_KMALLOC_MINALIGN	mm/slob.c	471;"	d	file:
ARCH_KMALLOC_MINALIGN	mm/slub.c	160;"	d	file:
ARCH_LOW_ADDRESS_LIMIT	mm/bootmem.c	755;"	d	file:
ARCH_MIN_MMSTRUCT_ALIGN	kernel/fork.c	1481;"	d	file:
ARCH_MIN_TASKALIGN	kernel/fork.c	185;"	d	file:
ARCH_SHF_SMALL	kernel/module.c	71;"	d	file:
ARCH_SLAB_MINALIGN	mm/slab.c	168;"	d	file:
ARCH_SLAB_MINALIGN	mm/slob.c	475;"	d	file:
ARCH_SLAB_MINALIGN	mm/slub.c	164;"	d	file:
ASCII_FLAG	fs/binfmt_flat.c	171;"	d	file:
AS_EIO	include/linux/pagemap.h	/^	AS_EIO		= __GFP_BITS_SHIFT + 0,	\/* IO error on async write *\/$/;"	e	enum:mapping_flags
AS_ENOSPC	include/linux/pagemap.h	/^	AS_ENOSPC	= __GFP_BITS_SHIFT + 1,	\/* ENOSPC on async write *\/$/;"	e	enum:mapping_flags
AS_MM_ALL_LOCKS	include/linux/pagemap.h	/^	AS_MM_ALL_LOCKS	= __GFP_BITS_SHIFT + 2,	\/* under mm_take_all_locks() *\/$/;"	e	enum:mapping_flags
AS_UNEVICTABLE	include/linux/pagemap.h	/^	AS_UNEVICTABLE	= __GFP_BITS_SHIFT + 3,	\/* e.g., ramdisk, SHM_LOCK *\/$/;"	e	enum:mapping_flags
AUDIT_AUX_IPCPERM	kernel/auditsc.c	123;"	d	file:
AUDIT_AUX_PIDS	kernel/auditsc.c	126;"	d	file:
AUDIT_BUFSIZ	kernel/audit.c	141;"	d	file:
AUDIT_BUILD_CONTEXT	kernel/audit.h	/^	AUDIT_BUILD_CONTEXT,	\/* Create the per-task audit_context,$/;"	e	enum:audit_state
AUDIT_DEBUG	kernel/audit.h	30;"	d
AUDIT_DISABLED	kernel/audit.c	66;"	d	file:
AUDIT_DISABLED	kernel/audit.h	/^	AUDIT_DISABLED,		\/* Do not create per-task audit_context.$/;"	e	enum:audit_state
AUDIT_INITIALIZED	kernel/audit.c	68;"	d	file:
AUDIT_INODE_BUCKETS	kernel/audit.h	73;"	d
AUDIT_IN_WATCH	kernel/audit_watch.c	78;"	d	file:
AUDIT_LOCKED	kernel/audit.c	73;"	d	file:
AUDIT_MAXFREE	kernel/audit.c	145;"	d	file:
AUDIT_NAMES	kernel/auditsc.c	75;"	d	file:
AUDIT_NAME_FULL	kernel/auditsc.c	78;"	d	file:
AUDIT_OFF	kernel/audit.c	71;"	d	file:
AUDIT_ON	kernel/audit.c	72;"	d	file:
AUDIT_PARENT_INVALID	kernel/audit_watch.c	75;"	d	file:
AUDIT_RECORD_CONTEXT	kernel/audit.h	/^	AUDIT_RECORD_CONTEXT	\/* Create the per-task audit_context,$/;"	e	enum:audit_state
AUDIT_SETUP_CONTEXT	kernel/audit.h	/^	AUDIT_SETUP_CONTEXT,	\/* Create the per-task audit_context,$/;"	e	enum:audit_state
AUDIT_UNINITIALIZED	kernel/audit.c	67;"	d	file:
AUTOFS_IOC_SETTIMEOUT32	fs/compat_ioctl.c	1558;"	d	file:
BAD_ADDR	fs/binfmt_aout.c	45;"	d	file:
BAD_ADDR	fs/binfmt_elf.c	76;"	d	file:
BAD_ALIEN_MAGIC	mm/slab.c	605;"	d	file:
BATCHREFILL_LIMIT	mm/slab.c	381;"	d	file:
BDEV_I	fs/block_dev.c	/^static inline struct bdev_inode *BDEV_I(struct inode *inode)$/;"	f	file:
BDI_SHOW	mm/backing-dev.c	171;"	d	file:
BH_ENTRY	fs/buffer.c	47;"	d	file:
BH_LRU_SIZE	fs/buffer.c	1252;"	d	file:
BIO_INLINE_VECS	fs/bio.c	36;"	d	file:
BITS	fs/select.c	336;"	d	file:
BITS_PER_PAGE	kernel/pid.c	53;"	d	file:
BITS_PER_PAGE	kernel/pid_namespace.c	17;"	d	file:
BITS_PER_PAGE_MASK	kernel/pid.c	54;"	d	file:
BLOCKS_PER_PAGE	mm/shmem.c	88;"	d	file:
BNEPCONNADD	fs/compat_ioctl.c	608;"	d	file:
BNEPCONNDEL	fs/compat_ioctl.c	609;"	d	file:
BNEPGETCONNINFO	fs/compat_ioctl.c	611;"	d	file:
BNEPGETCONNLIST	fs/compat_ioctl.c	610;"	d	file:
BOGO_DIRENT_SIZE	mm/shmem.c	99;"	d	file:
BOOT_CPUCACHE_ENTRIES	mm/slab.c	284;"	d	file:
BREAK_GFP_ORDER_HI	mm/slab.c	504;"	d	file:
BREAK_GFP_ORDER_LO	mm/slab.c	505;"	d	file:
BUFCTL_ACTIVE	mm/slab.c	214;"	d	file:
BUFCTL_END	mm/slab.c	212;"	d	file:
BUFCTL_FREE	mm/slab.c	213;"	d	file:
BUFSZ	kernel/sysctl_binary.c	37;"	d	file:
BUF_THREAD_ID_SIZE	kernel/kgdb.c	514;"	d	file:
BUILD_LOCK_OPS	kernel/spinlock.c	46;"	d	file:
BV	fs/bio.c	45;"	d	file:
BV	fs/bio.c	49;"	d	file:
BYTES_PER_POINTER	mm/kmemleak.c	114;"	d	file:
BYTES_PER_WORD	mm/slab.c	144;"	d	file:
Bad_file	mm/swapfile.c	/^static const char Bad_file[] = "Bad swap file entry ";$/;"	v	file:
Bad_offset	mm/swapfile.c	/^static const char Bad_offset[] = "Bad swap offset entry ";$/;"	v	file:
CACHE	mm/slab.c	334;"	d	file:
CACHE	mm/slab.c	340;"	d	file:
CACHE	mm/slab.c	571;"	d	file:
CACHE	mm/slab.c	574;"	d	file:
CACHE	mm/slab.c	585;"	d	file:
CACHE	mm/slab.c	588;"	d	file:
CACHE_CACHE	mm/slab.c	312;"	d	file:
CFLAGS_REMOVE_cgroup-debug.o	kernel/Makefile	/^CFLAGS_REMOVE_cgroup-debug.o = -pg$/;"	m
CFLAGS_REMOVE_lockdep.o	kernel/Makefile	/^CFLAGS_REMOVE_lockdep.o = -pg$/;"	m
CFLAGS_REMOVE_lockdep_proc.o	kernel/Makefile	/^CFLAGS_REMOVE_lockdep_proc.o = -pg$/;"	m
CFLAGS_REMOVE_mutex-debug.o	kernel/Makefile	/^CFLAGS_REMOVE_mutex-debug.o = -pg$/;"	m
CFLAGS_REMOVE_perf_event.o	kernel/Makefile	/^CFLAGS_REMOVE_perf_event.o = -pg$/;"	m
CFLAGS_REMOVE_rtmutex-debug.o	kernel/Makefile	/^CFLAGS_REMOVE_rtmutex-debug.o = -pg$/;"	m
CFLAGS_REMOVE_sched_clock.o	kernel/Makefile	/^CFLAGS_REMOVE_sched_clock.o = -pg$/;"	m
CFLAGS_sched.o	kernel/Makefile	/^CFLAGS_sched.o := $(PROFILING) -fno-omit-frame-pointer$/;"	m
CFLGS_OFF_SLAB	mm/slab.c	378;"	d	file:
CGROUP_FILE_GENERIC_PREFIX	kernel/cgroup.c	2795;"	d	file:
CGROUP_FREEZING	kernel/cgroup_freezer.c	/^	CGROUP_FREEZING,$/;"	e	enum:freezer_state	file:
CGROUP_FROZEN	kernel/cgroup_freezer.c	/^	CGROUP_FROZEN,$/;"	e	enum:freezer_state	file:
CGROUP_LOCAL_BUFFER_SIZE	kernel/cgroup.c	1694;"	d	file:
CGROUP_THAWED	kernel/cgroup_freezer.c	/^	CGROUP_THAWED = 0,$/;"	e	enum:freezer_state	file:
CHAINHASH_BITS	kernel/lockdep.c	291;"	d	file:
CHAINHASH_SIZE	kernel/lockdep.c	292;"	d	file:
CHARGE_SIZE	mm/memcontrol.c	1276;"	d	file:
CLASSHASH_BITS	kernel/lockdep.c	280;"	d	file:
CLASSHASH_SIZE	kernel/lockdep.c	281;"	d	file:
CLEAR_MNT_SHARED	fs/pnode.h	17;"	d
CLOCK_DISPATCH	kernel/posix-timers.c	158;"	d	file:
CLUSTER_MASK	mm/rmap.c	917;"	d	file:
CLUSTER_SIZE	mm/rmap.c	916;"	d	file:
CL_COPY_ALL	fs/pnode.h	22;"	d
CL_EXPIRE	fs/pnode.h	20;"	d
CL_MAKE_SHARED	fs/pnode.h	23;"	d
CL_PRIVATE	fs/pnode.h	25;"	d
CL_PROPAGATION	fs/pnode.h	24;"	d
CL_SLAVE	fs/pnode.h	21;"	d
CMTPCONNADD	fs/compat_ioctl.c	613;"	d	file:
CMTPCONNDEL	fs/compat_ioctl.c	614;"	d	file:
CMTPGETCONNINFO	fs/compat_ioctl.c	616;"	d	file:
CMTPGETCONNLIST	fs/compat_ioctl.c	615;"	d	file:
COMMENT	fs/binfmt_flat.c	175;"	d	file:
COMPATIBLE_IOCTL	fs/compat_ioctl.c	915;"	d	file:
CONTINUATION	fs/binfmt_flat.c	172;"	d	file:
CPUACCT_STAT_NSTATS	kernel/sched.c	/^	CPUACCT_STAT_NSTATS,$/;"	e	enum:cpuacct_stat_index	file:
CPUACCT_STAT_SYSTEM	kernel/sched.c	/^	CPUACCT_STAT_SYSTEM,	\/* ... kernel mode *\/$/;"	e	enum:cpuacct_stat_index	file:
CPUACCT_STAT_USER	kernel/sched.c	/^	CPUACCT_STAT_USER,	\/* ... user mode *\/$/;"	e	enum:cpuacct_stat_index	file:
CPUPRI_IDLE	kernel/sched_cpupri.h	10;"	d
CPUPRI_INVALID	kernel/sched_cpupri.h	9;"	d
CPUPRI_NORMAL	kernel/sched_cpupri.h	11;"	d
CPUPRI_NR_PRIORITIES	kernel/sched_cpupri.h	6;"	d
CPUPRI_NR_PRI_WORDS	kernel/sched_cpupri.h	7;"	d
CPUSET_NAME_LEN	kernel/cpuset.c	223;"	d	file:
CPUSET_NODELIST_LEN	kernel/cpuset.c	224;"	d	file:
CPU_DONT_CARE	kernel/taskstats.c	/^	CPU_DONT_CARE$/;"	e	enum:actions	file:
CPU_LOAD_IDX_MAX	kernel/sched.c	535;"	d	file:
CQ_MASK	kernel/lockdep.c	863;"	d	file:
CREATE_MASK	mm/slab.c	177;"	d	file:
CREATE_MASK	mm/slab.c	185;"	d	file:
CREATE_TRACE_POINTS	kernel/lockdep.c	51;"	d	file:
CREATE_TRACE_POINTS	kernel/module.c	59;"	d	file:
CREATE_TRACE_POINTS	kernel/sched.c	80;"	d	file:
CREATE_TRACE_POINTS	kernel/signal.c	31;"	d	file:
CREATE_TRACE_POINTS	kernel/softirq.c	28;"	d	file:
CREATE_TRACE_POINTS	kernel/timer.c	49;"	d	file:
CREATE_TRACE_POINTS	kernel/workqueue.c	36;"	d	file:
CREATE_TRACE_POINTS	mm/util.c	9;"	d	file:
CSD_FLAG_LOCK	kernel/smp.c	/^	CSD_FLAG_LOCK		= 0x01,$/;"	e	enum:__anon46	file:
CSS_ID_MAX	kernel/cgroup.c	121;"	d	file:
CSS_SET_HASH_BITS	kernel/cgroup.c	251;"	d	file:
CSS_SET_TABLE_SIZE	kernel/cgroup.c	252;"	d	file:
CS_CPU_EXCLUSIVE	kernel/cpuset.c	/^	CS_CPU_EXCLUSIVE,$/;"	e	enum:__anon33	file:
CS_MEMORY_MIGRATE	kernel/cpuset.c	/^	CS_MEMORY_MIGRATE,$/;"	e	enum:__anon33	file:
CS_MEM_EXCLUSIVE	kernel/cpuset.c	/^	CS_MEM_EXCLUSIVE,$/;"	e	enum:__anon33	file:
CS_MEM_HARDWALL	kernel/cpuset.c	/^	CS_MEM_HARDWALL,$/;"	e	enum:__anon33	file:
CS_SCHED_LOAD_BALANCE	kernel/cpuset.c	/^	CS_SCHED_LOAD_BALANCE,$/;"	e	enum:__anon33	file:
CS_SPREAD_PAGE	kernel/cpuset.c	/^	CS_SPREAD_PAGE,$/;"	e	enum:__anon33	file:
CS_SPREAD_SLAB	kernel/cpuset.c	/^	CS_SPREAD_SLAB,$/;"	e	enum:__anon33	file:
CTL_DIR	kernel/sysctl_binary.c	30;"	d	file:
CTL_DNADR	kernel/sysctl_binary.c	35;"	d	file:
CTL_INT	kernel/sysctl_binary.c	32;"	d	file:
CTL_STR	kernel/sysctl_binary.c	31;"	d	file:
CTL_ULONG	kernel/sysctl_binary.c	33;"	d	file:
CTL_UUID	kernel/sysctl_binary.c	34;"	d	file:
C_A_D	kernel/sys.c	/^int C_A_D = 1;$/;"	v
DBG_FLT	fs/binfmt_flat.c	53;"	d	file:
DBG_FLT	fs/binfmt_flat.c	55;"	d	file:
DEBUG	fs/aio.c	21;"	d	file:
DEBUG	mm/memory-failure.c	33;"	d	file:
DEBUG	mm/slab.c	134;"	d	file:
DEBUG	mm/slab.c	138;"	d	file:
DEBUGP	kernel/module.c	67;"	d	file:
DEBUGP	kernel/params.c	32;"	d	file:
DEBUG_DEFAULT_FLAGS	mm/slub.c	140;"	d	file:
DEBUG_METADATA_FLAGS	mm/slub.c	148;"	d	file:
DEBUG_MM_RB	mm/mmap.c	55;"	d	file:
DECLARE_TASKLET	kernel/backtracetest.c	/^static DECLARE_TASKLET(backtrace_tasklet, &backtrace_test_irq_callback, 0);$/;"	v	file:
DEFAULT_CONSOLE_LOGLEVEL	kernel/printk.c	61;"	d	file:
DEFAULT_MESSAGE_LOGLEVEL	kernel/printk.c	57;"	d	file:
DEFINE_RCU_RANDOM	kernel/rcutorture.c	222;"	d	file:
DEF_TIMESLICE	kernel/sched.c	115;"	d	file:
DELAYED	mm/memory-failure.c	/^	DELAYED,	\/* Will be handled later *\/$/;"	e	enum:outcome	file:
DEREGISTER	kernel/taskstats.c	/^	DEREGISTER,$/;"	e	enum:actions	file:
DIO_PAGES	fs/direct-io.c	44;"	d	file:
DISABLE_BRANCH_PROFILING	kernel/lockdep.c	28;"	d	file:
DLINFO_ITEMS	fs/binfmt_elf_fdpic.c	573;"	d	file:
DMAPOOL_DEBUG	mm/dmapool.c	41;"	d	file:
DNAME_INLINE_LEN	fs/dcache.c	48;"	d	file:
DOWN	mm/slub.c	/^	DOWN,		\/* No slab functionality available *\/$/;"	e	enum:__anon10	file:
DO_PAGES_STAT_CHUNK_NR	mm/migrate.c	1002;"	d	file:
DUMP_SEEK	fs/binfmt_aout.c	76;"	d	file:
DUMP_SEEK	fs/binfmt_elf_fdpic.c	1318;"	d	file:
DUMP_SEEK	fs/binfmt_elf_fdpic.c	1339;"	d	file:
DUMP_WRITE	fs/binfmt_aout.c	72;"	d	file:
DUMP_WRITE	fs/binfmt_elf.c	1222;"	d	file:
DUMP_WRITE	fs/binfmt_elf.c	1250;"	d	file:
DUMP_WRITE	fs/binfmt_elf.c	1252;"	d	file:
DUMP_WRITE	fs/binfmt_elf_fdpic.c	1316;"	d	file:
DUMP_WRITE	fs/binfmt_elf_fdpic.c	1338;"	d	file:
DUMP_WRITE	fs/binfmt_elf_fdpic.c	1341;"	d	file:
D_HASHBITS	fs/dcache.c	58;"	d	file:
D_HASHMASK	fs/dcache.c	59;"	d	file:
EARLY	mm/slab.c	/^	EARLY,$/;"	e	enum:__anon7	file:
ELF_ARCH	fs/compat_binfmt_elf.c	68;"	d	file:
ELF_BASE_PLATFORM	fs/binfmt_elf.c	133;"	d	file:
ELF_BASE_PLATFORM	fs/binfmt_elf_fdpic.c	474;"	d	file:
ELF_CLASS	fs/compat_binfmt_elf.c	26;"	d	file:
ELF_CLASS	fs/compat_binfmt_elf.c	27;"	d	file:
ELF_CORE_EFLAGS	fs/binfmt_elf.c	60;"	d	file:
ELF_ET_DYN_BASE	fs/compat_binfmt_elf.c	88;"	d	file:
ELF_ET_DYN_BASE	fs/compat_binfmt_elf.c	89;"	d	file:
ELF_EXEC_PAGESIZE	fs/compat_binfmt_elf.c	93;"	d	file:
ELF_EXEC_PAGESIZE	fs/compat_binfmt_elf.c	94;"	d	file:
ELF_HWCAP	fs/compat_binfmt_elf.c	78;"	d	file:
ELF_HWCAP	fs/compat_binfmt_elf.c	79;"	d	file:
ELF_MIN_ALIGN	fs/binfmt_elf.c	54;"	d	file:
ELF_MIN_ALIGN	fs/binfmt_elf.c	56;"	d	file:
ELF_PAGEALIGN	fs/binfmt_elf.c	65;"	d	file:
ELF_PAGEOFFSET	fs/binfmt_elf.c	64;"	d	file:
ELF_PAGESTART	fs/binfmt_elf.c	63;"	d	file:
ELF_PLATFORM	fs/compat_binfmt_elf.c	73;"	d	file:
ELF_PLATFORM	fs/compat_binfmt_elf.c	74;"	d	file:
ELF_PLAT_INIT	fs/compat_binfmt_elf.c	98;"	d	file:
ELF_PLAT_INIT	fs/compat_binfmt_elf.c	99;"	d	file:
EM86_INTERP	fs/binfmt_em86.c	23;"	d	file:
EM86_I_NAME	fs/binfmt_em86.c	24;"	d	file:
ENCRYPTED	fs/binfmt_flat.c	176;"	d	file:
ENQUEUE_MIGRATE	kernel/sched_fair.c	770;"	d	file:
ENQUEUE_WAKEUP	kernel/sched_fair.c	769;"	d	file:
ENTRIES_PER_PAGE	mm/shmem.c	79;"	d	file:
ENTRIES_PER_PAGEPAGE	mm/shmem.c	80;"	d	file:
EP_ITEM_COST	fs/eventpoll.c	87;"	d	file:
EP_MAX_EVENTS	fs/eventpoll.c	83;"	d	file:
EP_MAX_MSTIMEO	fs/eventpoll.c	81;"	d	file:
EP_MAX_NESTS	fs/eventpoll.c	78;"	d	file:
EP_PRIVATE_BITS	fs/eventpoll.c	75;"	d	file:
EP_UNACTIVE_PTR	fs/eventpoll.c	85;"	d	file:
EXPSIZE	kernel/acct.c	378;"	d	file:
EXPSIZE2	kernel/acct.c	419;"	d	file:
EXTRA_FIELD	fs/binfmt_flat.c	173;"	d	file:
EXTRA_STACK_VM_PAGES	fs/exec.c	557;"	d	file:
Enabled	fs/binfmt_misc.c	/^enum {Enabled, Magic};$/;"	e	enum:__anon15	file:
FAILED	mm/memory-failure.c	/^	FAILED,		\/* Error: handling failed *\/$/;"	e	enum:outcome	file:
FDS_EX	fs/select.c	334;"	d	file:
FDS_IN	fs/select.c	332;"	d	file:
FDS_OUT	fs/select.c	333;"	d	file:
FIEMAP_MAX_EXTENTS	fs/ioctl.c	23;"	d	file:
FILE_CPULIST	kernel/cpuset.c	/^	FILE_CPULIST,$/;"	e	enum:__anon34	file:
FILE_CPU_EXCLUSIVE	kernel/cpuset.c	/^	FILE_CPU_EXCLUSIVE,$/;"	e	enum:__anon34	file:
FILE_MEMLIST	kernel/cpuset.c	/^	FILE_MEMLIST,$/;"	e	enum:__anon34	file:
FILE_MEMORY_MIGRATE	kernel/cpuset.c	/^	FILE_MEMORY_MIGRATE,$/;"	e	enum:__anon34	file:
FILE_MEMORY_PRESSURE	kernel/cpuset.c	/^	FILE_MEMORY_PRESSURE,$/;"	e	enum:__anon34	file:
FILE_MEMORY_PRESSURE_ENABLED	kernel/cpuset.c	/^	FILE_MEMORY_PRESSURE_ENABLED,$/;"	e	enum:__anon34	file:
FILE_MEM_EXCLUSIVE	kernel/cpuset.c	/^	FILE_MEM_EXCLUSIVE,$/;"	e	enum:__anon34	file:
FILE_MEM_HARDWALL	kernel/cpuset.c	/^	FILE_MEM_HARDWALL,$/;"	e	enum:__anon34	file:
FILE_SCHED_LOAD_BALANCE	kernel/cpuset.c	/^	FILE_SCHED_LOAD_BALANCE,$/;"	e	enum:__anon34	file:
FILE_SCHED_RELAX_DOMAIN_LEVEL	kernel/cpuset.c	/^	FILE_SCHED_RELAX_DOMAIN_LEVEL,$/;"	e	enum:__anon34	file:
FILE_SPREAD_PAGE	kernel/cpuset.c	/^	FILE_SPREAD_PAGE,$/;"	e	enum:__anon34	file:
FILE_SPREAD_SLAB	kernel/cpuset.c	/^	FILE_SPREAD_SLAB,$/;"	e	enum:__anon34	file:
FILTER	fs/binfmt_elf.c	1125;"	d	file:
FILTER	fs/binfmt_elf.c	1194;"	d	file:
FLAGS_CLOCKRT	kernel/futex.c	1601;"	d	file:
FLAGS_HAS_TIMEOUT	kernel/futex.c	1602;"	d	file:
FLAGS_SHARED	kernel/futex.c	1600;"	d	file:
FLAT_DATA_ALIGN	fs/binfmt_flat.c	65;"	d	file:
FLAT_DATA_ALIGN	fs/binfmt_flat.c	67;"	d	file:
FM_COEF	kernel/cpuset.c	1269;"	d	file:
FM_MAXCNT	kernel/cpuset.c	1271;"	d	file:
FM_MAXTICKS	kernel/cpuset.c	1270;"	d	file:
FM_SCALE	kernel/cpuset.c	1272;"	d	file:
FNV32_OFFSET	kernel/sysctl_binary.c	1425;"	d	file:
FNV32_PRIME	kernel/sysctl_binary.c	1426;"	d	file:
FORCED_DEBUG	mm/slab.c	136;"	d	file:
FORCED_DEBUG	mm/slab.c	140;"	d	file:
FRACTION_OF_NODE_MEM	mm/quicklist.c	24;"	d	file:
FS_IOC_RESVSP64_32	fs/compat_ioctl.c	888;"	d	file:
FS_IOC_RESVSP_32	fs/compat_ioctl.c	887;"	d	file:
FULL	mm/slab.c	/^	FULL$/;"	e	enum:__anon7	file:
FULLSTOP_DONTSTOP	kernel/rcutorture.c	142;"	d	file:
FULLSTOP_RMMOD	kernel/rcutorture.c	144;"	d	file:
FULLSTOP_SHUTDOWN	kernel/rcutorture.c	143;"	d	file:
FUTEX_HASHBITS	kernel/futex.c	69;"	d	file:
GET_ENDIAN	kernel/sys.c	67;"	d	file:
GET_FPEMU_CTL	kernel/sys.c	58;"	d	file:
GET_FPEXC_CTL	kernel/sys.c	64;"	d	file:
GET_TSC_CTL	kernel/sys.c	73;"	d	file:
GET_UNALIGN_CTL	kernel/sys.c	52;"	d	file:
GFP_KMEMLEAK_MASK	mm/kmemleak.c	117;"	d	file:
GFP_VMALLOC32	mm/vmalloc.c	1666;"	d	file:
GFP_VMALLOC32	mm/vmalloc.c	1668;"	d	file:
GFP_VMALLOC32	mm/vmalloc.c	1670;"	d	file:
HALF_LONG_BITS	fs/read_write.c	736;"	d	file:
HARDIRQ_VERBOSE	kernel/lockdep.c	329;"	d	file:
HARDIRQ_VERBOSE	kernel/lockdep.c	333;"	d	file:
HARDIRQ_verbose	kernel/lockdep.c	/^static int HARDIRQ_verbose(struct lock_class *class)$/;"	f	file:
HASH_SHIFT	fs/namespace.c	37;"	d	file:
HASH_SIZE	fs/namespace.c	38;"	d	file:
HASH_SIZE	kernel/audit_tree.c	/^enum {HASH_SIZE = 128};$/;"	e	enum:__anon30	file:
HAVE_PTE_SPECIAL	mm/memory.c	517;"	d	file:
HAVE_PTE_SPECIAL	mm/memory.c	519;"	d	file:
HCIUARTGETPROTO	fs/compat_ioctl.c	606;"	d	file:
HCIUARTSETPROTO	fs/compat_ioctl.c	605;"	d	file:
HEAP_INDEX	mm/prio_tree.c	31;"	d	file:
HEX_ASCII	mm/kmemleak.c	175;"	d	file:
HEX_GROUP_SIZE	mm/kmemleak.c	173;"	d	file:
HEX_MAX_LINES	mm/kmemleak.c	177;"	d	file:
HEX_ROW_SIZE	mm/kmemleak.c	171;"	d	file:
HIDPCONNADD	fs/compat_ioctl.c	618;"	d	file:
HIDPCONNDEL	fs/compat_ioctl.c	619;"	d	file:
HIDPGETCONNINFO	fs/compat_ioctl.c	621;"	d	file:
HIDPGETCONNLIST	fs/compat_ioctl.c	620;"	d	file:
HLIST_HEAD	include/linux/list.h	549;"	d
HLIST_HEAD_INIT	include/linux/list.h	548;"	d
HPAGE_RESV_MASK	mm/hugetlb.c	260;"	d	file:
HPAGE_RESV_OWNER	mm/hugetlb.c	258;"	d	file:
HPAGE_RESV_UNMAPPED	mm/hugetlb.c	259;"	d	file:
HSTATE_ATTR	mm/hugetlb.c	1321;"	d	file:
HSTATE_ATTR_RO	mm/hugetlb.c	1318;"	d	file:
HUNG_TASK_BATCHING	kernel/hung_task.c	31;"	d	file:
HZ_TO_MSEC_ADJ32	kernel/timeconst.h	15;"	d
HZ_TO_MSEC_DEN	kernel/timeconst.h	18;"	d
HZ_TO_MSEC_MUL32	kernel/timeconst.h	14;"	d
HZ_TO_MSEC_NUM	kernel/timeconst.h	17;"	d
HZ_TO_MSEC_SHR32	kernel/timeconst.h	16;"	d
HZ_TO_USEC_ADJ32	kernel/timeconst.h	25;"	d
HZ_TO_USEC_DEN	kernel/timeconst.h	28;"	d
HZ_TO_USEC_MUL32	kernel/timeconst.h	24;"	d
HZ_TO_USEC_NUM	kernel/timeconst.h	27;"	d
HZ_TO_USEC_SHR32	kernel/timeconst.h	26;"	d
ID_STR_LENGTH	mm/slub.c	4547;"	d	file:
IGNORED	mm/memory-failure.c	/^	IGNORED,	\/* Error: cannot be handled *\/$/;"	e	enum:outcome	file:
IGNORE_IOCTL	fs/compat_ioctl.c	923;"	d	file:
INC_CACHE_INFO	mm/swap_state.c	50;"	d	file:
INDEX	kernel/timer.c	956;"	d	file:
INDEX_AC	mm/slab.c	349;"	d	file:
INDEX_L3	mm/slab.c	350;"	d	file:
INIT_HLIST_HEAD	include/linux/list.h	550;"	d
INIT_HLIST_NODE	include/linux/list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	include/linux/list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INIT_OFFSET_MASK	kernel/module.c	75;"	d	file:
INIT_TASK_GROUP_LOAD	kernel/sched.c	322;"	d	file:
INIT_TASK_GROUP_LOAD	kernel/sched.c	324;"	d	file:
INSNS_PER_PAGE	kernel/kprobes.c	106;"	d	file:
INTERPRETER_ELF	fs/binfmt_elf.c	541;"	d	file:
INTERPRETER_NONE	fs/binfmt_elf.c	540;"	d	file:
IS	fs/bio-integrity.c	34;"	d	file:
IS	fs/bio-integrity.c	38;"	d	file:
ISA_POOL_SIZE	mm/bounce.c	21;"	d	file:
ISOLATE_ACTIVE	mm/vmscan.c	808;"	d	file:
ISOLATE_BOTH	mm/vmscan.c	809;"	d	file:
ISOLATE_INACTIVE	mm/vmscan.c	807;"	d	file:
IS_FLOCK	fs/locks.c	134;"	d	file:
IS_LEASE	fs/locks.c	135;"	d	file:
IS_MNT_NEW	fs/pnode.h	16;"	d
IS_MNT_SHARED	fs/pnode.h	14;"	d
IS_MNT_SLAVE	fs/pnode.h	15;"	d
IS_MNT_UNBINDABLE	fs/pnode.h	18;"	d
IS_POSIX	fs/locks.c	133;"	d	file:
ITERATOR_COUNTER	kernel/slow-work-debugfs.c	21;"	d	file:
ITERATOR_SELECTOR	kernel/slow-work-debugfs.c	20;"	d	file:
ITERATOR_SHIFT	kernel/slow-work-debugfs.c	19;"	d	file:
IT_ID_NOT_SET	kernel/posix-timers.c	506;"	d	file:
IT_ID_SET	kernel/posix-timers.c	505;"	d	file:
I_BDEV	fs/block_dev.c	/^EXPORT_SYMBOL(I_BDEV);$/;"	v
I_BDEV	fs/block_dev.c	/^inline struct block_device *I_BDEV(struct inode *inode)$/;"	f
I_HASHBITS	fs/inode.c	59;"	d	file:
I_HASHMASK	fs/inode.c	60;"	d	file:
K	mm/backing-dev.c	110;"	d	file:
K	mm/backing-dev.c	169;"	d	file:
K	mm/backing-dev.c	88;"	d	file:
K	mm/oom_kill.c	375;"	d	file:
K	mm/page_alloc.c	2164;"	d	file:
KB	kernel/tsacct.c	113;"	d	file:
KB	kernel/tsacct.c	80;"	d	file:
KERNEL_ATTR_RO	kernel/ksysfs.c	20;"	d	file:
KERNEL_ATTR_RW	kernel/ksysfs.c	23;"	d	file:
KERNEL_TIMECONST_H	kernel/timeconst.h	5;"	d
KGDB_MAX_THREAD_QUERY	kernel/kgdb.c	59;"	d	file:
KIMAGE_NO_DEST	kernel/kexec.c	111;"	d	file:
KMEMLEAK_ALLOC	mm/kmemleak.c	/^	KMEMLEAK_ALLOC,$/;"	e	enum:__anon2	file:
KMEMLEAK_BLACK	mm/kmemleak.c	127;"	d	file:
KMEMLEAK_FREE	mm/kmemleak.c	/^	KMEMLEAK_FREE,$/;"	e	enum:__anon2	file:
KMEMLEAK_FREE_PART	mm/kmemleak.c	/^	KMEMLEAK_FREE_PART,$/;"	e	enum:__anon2	file:
KMEMLEAK_GREY	mm/kmemleak.c	126;"	d	file:
KMEMLEAK_IGNORE	mm/kmemleak.c	/^	KMEMLEAK_IGNORE,$/;"	e	enum:__anon2	file:
KMEMLEAK_NOT_LEAK	mm/kmemleak.c	/^	KMEMLEAK_NOT_LEAK,$/;"	e	enum:__anon2	file:
KMEMLEAK_NO_SCAN	mm/kmemleak.c	/^	KMEMLEAK_NO_SCAN$/;"	e	enum:__anon2	file:
KMEMLEAK_SCAN_AREA	mm/kmemleak.c	/^	KMEMLEAK_SCAN_AREA,$/;"	e	enum:__anon2	file:
KPROBE_HASH_BITS	kernel/kprobes.c	53;"	d	file:
KPROBE_TABLE_SIZE	kernel/kprobes.c	54;"	d	file:
KSM_ATTR	mm/ksm.c	1771;"	d	file:
KSM_ATTR_RO	mm/ksm.c	1769;"	d	file:
KSM_KMEM_CACHE	mm/ksm.c	197;"	d	file:
KSM_RUN_MERGE	mm/ksm.c	189;"	d	file:
KSM_RUN_STOP	mm/ksm.c	188;"	d	file:
KSM_RUN_UNMERGE	mm/ksm.c	190;"	d	file:
LATENCY_LIMIT	mm/mremap.c	130;"	d	file:
LATENCY_LIMIT	mm/shmem.c	96;"	d	file:
LATENCY_LIMIT	mm/swapfile.c	208;"	d	file:
LBUFSIZE	fs/binfmt_flat.c	168;"	d	file:
LIST_HEAD	include/linux/list.h	25;"	d
LIST_HEAD_INIT	include/linux/list.h	23;"	d
LOCKDEP_STATE	kernel/lockdep.c	1445;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1448;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1452;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1455;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1517;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	1521;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2193;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2196;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2261;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2263;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2645;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	2651;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	461;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	463;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	496;"	d	file:
LOCKDEP_STATE	kernel/lockdep.c	500;"	d	file:
LOCKDEP_STATE	kernel/lockdep_internals.h	13;"	d
LOCKDEP_STATE	kernel/lockdep_internals.h	19;"	d
LOCKDEP_STATE	kernel/lockdep_internals.h	30;"	d
LOCKDEP_STATE	kernel/lockdep_internals.h	36;"	d
LOCKF_ENABLED_IRQ	kernel/lockdep_internals.h	40;"	d
LOCKF_ENABLED_IRQ_READ	kernel/lockdep_internals.h	43;"	d
LOCKF_USED_IN_IRQ	kernel/lockdep_internals.h	41;"	d
LOCKF_USED_IN_IRQ_READ	kernel/lockdep_internals.h	45;"	d
LOCK_SECTION_END	include/linux/spinlock.h	72;"	d
LOCK_SECTION_NAME	include/linux/spinlock.h	63;"	d
LOCK_SECTION_START	include/linux/spinlock.h	65;"	d
LOCK_USAGE_CHARS	kernel/lockdep_internals.h	73;"	d
LOCK_USAGE_STATES	kernel/lockdep_internals.h	/^	LOCK_USAGE_STATES$/;"	e	enum:lock_usage_bit
LOCK_USED	kernel/lockdep_internals.h	/^	LOCK_USED,$/;"	e	enum:lock_usage_bit
LOG_BUF	kernel/printk.c	108;"	d	file:
LOG_BUF_MASK	kernel/printk.c	107;"	d	file:
LONG_ALIGN	mm/page_alloc.c	2869;"	d	file:
MAGIC_END	kernel/configs.c	47;"	d	file:
MAGIC_SIZE	kernel/configs.c	51;"	d	file:
MAGIC_START	kernel/configs.c	46;"	d	file:
MAKE_ALL_LISTS	mm/slab.c	371;"	d	file:
MAKE_LIST	mm/slab.c	365;"	d	file:
MANTSIZE	kernel/acct.c	377;"	d	file:
MANTSIZE2	kernel/acct.c	418;"	d	file:
MASK_DECLARE_1	kernel/cpu.c	483;"	d	file:
MASK_DECLARE_2	kernel/cpu.c	484;"	d	file:
MASK_DECLARE_4	kernel/cpu.c	485;"	d	file:
MASK_DECLARE_8	kernel/cpu.c	486;"	d	file:
MAXEXP2	kernel/acct.c	421;"	d	file:
MAXFRACT	kernel/acct.c	379;"	d	file:
MAXFRACT2	kernel/acct.c	420;"	d	file:
MAXLR	kernel/latencytop.c	64;"	d	file:
MAXRESERVE	kernel/resource.c	794;"	d	file:
MAX_ACTIVE_REGIONS	mm/page_alloc.c	141;"	d	file:
MAX_ACTIVE_REGIONS	mm/page_alloc.c	145;"	d	file:
MAX_ACTIVE_REGIONS	mm/page_alloc.c	148;"	d	file:
MAX_AIO_SUBMITS	fs/compat.c	585;"	d	file:
MAX_CGROUP_ROOT_NAMELEN	kernel/cgroup.c	66;"	d	file:
MAX_CIRCULAR_QUEUE_SIZE	kernel/lockdep.c	862;"	d	file:
MAX_CMDLINECONSOLES	kernel/printk.c	131;"	d	file:
MAX_DEADLK_ITERATIONS	fs/locks.c	690;"	d	file:
MAX_EXECVE_AUDIT_LEN	kernel/auditsc.c	81;"	d	file:
MAX_INTERRUPTS	kernel/perf_event.c	1349;"	d	file:
MAX_IORES_LEVEL	kernel/resource.c	/^enum { MAX_IORES_LEVEL = 5 };$/;"	e	enum:__anon41	file:
MAX_KMOD_CONCURRENT	kernel/kmod.c	80;"	d	file:
MAX_LOCKDEP_CHAINS	kernel/lockdep_internals.h	60;"	d
MAX_LOCKDEP_CHAINS_BITS	kernel/lockdep_internals.h	59;"	d
MAX_LOCKDEP_CHAIN_HLOCKS	kernel/lockdep_internals.h	62;"	d
MAX_LOCKDEP_ENTRIES	kernel/lockdep_internals.h	57;"	d
MAX_NODE_LOAD	mm/page_alloc.c	2432;"	d	file:
MAX_OBJS_PER_PAGE	mm/slub.c	169;"	d	file:
MAX_PARTIAL	mm/slub.c	138;"	d	file:
MAX_PINNED_INTERVAL	kernel/sched.c	4141;"	d	file:
MAX_RCU_LVLS	kernel/rcutree.h	37;"	d
MAX_RT_TEST_MUTEXES	kernel/rtmutex-tester.c	21;"	d	file:
MAX_RT_TEST_THREADS	kernel/rtmutex-tester.c	20;"	d	file:
MAX_RW_COUNT	fs/read_write.c	213;"	d	file:
MAX_SCAN_SIZE	mm/kmemleak.c	112;"	d	file:
MAX_SELECT_SECONDS	fs/compat.c	1699;"	d	file:
MAX_SELECT_SECONDS	fs/select.c	518;"	d	file:
MAX_SHARES	kernel/sched.c	336;"	d	file:
MAX_SLABINFO_WRITE	mm/slab.c	4272;"	d	file:
MAX_SLACK	fs/select.c	45;"	d	file:
MAX_SOFTIRQ_RESTART	kernel/softirq.c	189;"	d	file:
MAX_STACK_TRACE_ENTRIES	kernel/lockdep_internals.h	68;"	d
MAX_TASKS_SHOWN_PER_CSS	kernel/cgroup.c	4118;"	d	file:
MAX_THREADS	kernel/async.c	63;"	d	file:
MAX_TRACE	mm/kmemleak.c	108;"	d	file:
MAX_USER_PRIO	kernel/sched.c	99;"	d	file:
MAX_WORK	kernel/async.c	64;"	d	file:
MAX_WRITEBACK_PAGES	fs/fs-writeback.c	698;"	d	file:
MB	kernel/tsacct.c	114;"	d	file:
MB	kernel/tsacct.c	81;"	d	file:
MB_CACHE_WRITER	fs/mbcache.c	58;"	d	file:
MCS_ACTIVE_ANON	mm/memcontrol.c	/^	MCS_ACTIVE_ANON,$/;"	e	enum:__anon5	file:
MCS_ACTIVE_FILE	mm/memcontrol.c	/^	MCS_ACTIVE_FILE,$/;"	e	enum:__anon5	file:
MCS_CACHE	mm/memcontrol.c	/^	MCS_CACHE,$/;"	e	enum:__anon5	file:
MCS_FILE_MAPPED	mm/memcontrol.c	/^	MCS_FILE_MAPPED,$/;"	e	enum:__anon5	file:
MCS_INACTIVE_ANON	mm/memcontrol.c	/^	MCS_INACTIVE_ANON,$/;"	e	enum:__anon5	file:
MCS_INACTIVE_FILE	mm/memcontrol.c	/^	MCS_INACTIVE_FILE,$/;"	e	enum:__anon5	file:
MCS_PGPGIN	mm/memcontrol.c	/^	MCS_PGPGIN,$/;"	e	enum:__anon5	file:
MCS_PGPGOUT	mm/memcontrol.c	/^	MCS_PGPGOUT,$/;"	e	enum:__anon5	file:
MCS_RSS	mm/memcontrol.c	/^	MCS_RSS,$/;"	e	enum:__anon5	file:
MCS_SWAP	mm/memcontrol.c	/^	MCS_SWAP,$/;"	e	enum:__anon5	file:
MCS_UNEVICTABLE	mm/memcontrol.c	/^	MCS_UNEVICTABLE,$/;"	e	enum:__anon5	file:
MEMFILE_ATTR	mm/memcontrol.c	263;"	d	file:
MEMFILE_PRIVATE	mm/memcontrol.c	261;"	d	file:
MEMFILE_TYPE	mm/memcontrol.c	262;"	d	file:
MEM_CGROUP_CHARGE_TYPE_CACHE	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_CACHE = 0,$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_DROP	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_DROP,	\/* a page was unused swap cache *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_FORCE	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_FORCE,	\/* used by force_empty *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_MAPPED	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_MAPPED,$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_SHMEM	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_SHMEM,	\/* used by page migration of shmem *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_SWAPOUT	mm/memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_SWAPOUT,	\/* for accounting swapcache *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_MAX_RECLAIM_LOOPS	mm/memcontrol.c	238;"	d	file:
MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS	mm/memcontrol.c	239;"	d	file:
MEM_CGROUP_RECLAIM_NOSWAP	mm/memcontrol.c	269;"	d	file:
MEM_CGROUP_RECLAIM_NOSWAP_BIT	mm/memcontrol.c	268;"	d	file:
MEM_CGROUP_RECLAIM_RETRIES	mm/memcontrol.c	47;"	d	file:
MEM_CGROUP_RECLAIM_SHRINK	mm/memcontrol.c	271;"	d	file:
MEM_CGROUP_RECLAIM_SHRINK_BIT	mm/memcontrol.c	270;"	d	file:
MEM_CGROUP_RECLAIM_SOFT	mm/memcontrol.c	273;"	d	file:
MEM_CGROUP_RECLAIM_SOFT_BIT	mm/memcontrol.c	272;"	d	file:
MEM_CGROUP_STAT_CACHE	mm/memcontrol.c	/^	MEM_CGROUP_STAT_CACHE, 	   \/* # of pages charged as cache *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_EVENTS	mm/memcontrol.c	/^	MEM_CGROUP_STAT_EVENTS,	\/* sum of pagein + pageout for internal use *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_FILE_MAPPED	mm/memcontrol.c	/^	MEM_CGROUP_STAT_FILE_MAPPED,  \/* # of pages charged as file rss *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_NSTATS	mm/memcontrol.c	/^	MEM_CGROUP_STAT_NSTATS,$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_PGPGIN_COUNT	mm/memcontrol.c	/^	MEM_CGROUP_STAT_PGPGIN_COUNT,	\/* # of pages paged in *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_PGPGOUT_COUNT	mm/memcontrol.c	/^	MEM_CGROUP_STAT_PGPGOUT_COUNT,	\/* # of pages paged out *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_RSS	mm/memcontrol.c	/^	MEM_CGROUP_STAT_RSS,	   \/* # of pages charged as anon rss *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_STAT_SWAPOUT	mm/memcontrol.c	/^	MEM_CGROUP_STAT_SWAPOUT, \/* # of pages, swapped out *\/$/;"	e	enum:mem_cgroup_stat_index	file:
MEM_CGROUP_ZSTAT	mm/memcontrol.c	147;"	d	file:
MINIMUM_CONSOLE_LOGLEVEL	kernel/printk.c	60;"	d	file:
MIN_PARTIAL	mm/slub.c	131;"	d	file:
MIN_SHARES	kernel/sched.c	335;"	d	file:
MISC_FMT_CREDENTIALS	fs/binfmt_misc.c	44;"	d	file:
MISC_FMT_OPEN_BINARY	fs/binfmt_misc.c	43;"	d	file:
MISC_FMT_PRESERVE_ARGV0	fs/binfmt_misc.c	42;"	d	file:
MMAP_LOTSAMISS	mm/filemap.c	1396;"	d	file:
MMINIT_TRACE	mm/internal.h	/^	MMINIT_TRACE$/;"	e	enum:mminit_level
MMINIT_VERIFY	mm/internal.h	/^	MMINIT_VERIFY,$/;"	e	enum:mminit_level
MMINIT_WARNING	mm/internal.h	/^	MMINIT_WARNING,$/;"	e	enum:mminit_level
MM_SLOTS_HASH_HEADS	mm/ksm.c	156;"	d	file:
MNT_WRITER_UNDERFLOW_LIMIT	fs/namespace.c	65;"	d	file:
MODINFO_ATTR	kernel/module.c	437;"	d	file:
MPOL_LOCAL	mm/mempolicy.c	2104;"	d	file:
MPOL_MF_DISCONTIG_OK	mm/mempolicy.c	101;"	d	file:
MPOL_MF_INVERT	mm/mempolicy.c	102;"	d	file:
MPOL_MF_STATS	mm/mempolicy.c	103;"	d	file:
MSECS_MIN_AGE	mm/kmemleak.c	109;"	d	file:
MSEC_TO_HZ_ADJ32	kernel/timeconst.h	20;"	d
MSEC_TO_HZ_DEN	kernel/timeconst.h	23;"	d
MSEC_TO_HZ_MUL32	kernel/timeconst.h	19;"	d
MSEC_TO_HZ_NUM	kernel/timeconst.h	22;"	d
MSEC_TO_HZ_SHR32	kernel/timeconst.h	21;"	d
MTIOCGET32	fs/compat_ioctl.c	525;"	d	file:
MTIOCPOS32	fs/compat_ioctl.c	530;"	d	file:
Magic	fs/binfmt_misc.c	/^enum {Enabled, Magic};$/;"	e	enum:__anon15	file:
NAME_OFFSET	fs/compat.c	820;"	d	file:
NAME_OFFSET	fs/readdir.c	57;"	d	file:
NCPFS_NAME	fs/compat.c	762;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf.c	206;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf.c	248;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf_fdpic.c	591;"	d	file:
NEW_AUX_ENT	fs/binfmt_elf_fdpic.c	651;"	d	file:
NFS4_NAME	fs/compat.c	763;"	d	file:
NICE_0_LOAD	kernel/sched.c	106;"	d	file:
NICE_0_SHIFT	kernel/sched.c	107;"	d	file:
NICE_TO_PRIO	kernel/sched.c	88;"	d	file:
NONE	mm/slab.c	/^	NONE,$/;"	e	enum:__anon7	file:
NR_CHARGE_TYPE	mm/memcontrol.c	/^	NR_CHARGE_TYPE,$/;"	e	enum:charge_type	file:
NR_KMEM_CACHE_CPU	mm/slub.c	2114;"	d	file:
NR_MCS_STAT	mm/memcontrol.c	/^	NR_MCS_STAT,$/;"	e	enum:__anon5	file:
NR_OFFLINE_AT_ONCE_PAGES	mm/memory_hotplug.c	653;"	d	file:
NR_PROFILE_GRP	kernel/profile.c	37;"	d	file:
NR_PROFILE_HIT	kernel/profile.c	36;"	d	file:
NR_SECCOMP_MODES	kernel/seccomp.c	14;"	d	file:
NS_TO_JIFFIES	kernel/sched.c	104;"	d	file:
NUMA_ZONELIST_ORDER_LEN	mm/page_alloc.c	2361;"	d	file:
NUM_INIT_LISTS	mm/slab.c	310;"	d	file:
NUM_NOTES	fs/binfmt_elf_fdpic.c	1600;"	d	file:
NUM_NOTES	fs/binfmt_elf_fdpic.c	1839;"	d	file:
NUM_RCU_LVLS	kernel/rcutree.h	44;"	d
NUM_RCU_LVLS	kernel/rcutree.h	51;"	d
NUM_RCU_LVLS	kernel/rcutree.h	58;"	d
NUM_RCU_LVLS	kernel/rcutree.h	65;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	45;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	52;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	59;"	d
NUM_RCU_LVL_0	kernel/rcutree.h	66;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	46;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	53;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	60;"	d
NUM_RCU_LVL_1	kernel/rcutree.h	67;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	47;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	54;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	61;"	d
NUM_RCU_LVL_2	kernel/rcutree.h	68;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	48;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	55;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	62;"	d
NUM_RCU_LVL_3	kernel/rcutree.h	69;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	49;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	56;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	63;"	d
NUM_RCU_LVL_4	kernel/rcutree.h	70;"	d
NUM_RCU_NODES	kernel/rcutree.h	76;"	d
N_STACK_PPS	fs/select.c	808;"	d	file:
N_UNMAP_TRIES	mm/memory-failure.c	821;"	d	file:
Node	fs/binfmt_misc.c	/^} Node;$/;"	t	typeref:struct:__anon16	file:
OBJECT_ALLOCATED	mm/kmemleak.c	164;"	d	file:
OBJECT_NO_SCAN	mm/kmemleak.c	168;"	d	file:
OBJECT_REPORTED	mm/kmemleak.c	166;"	d	file:
OFF_SLAB	mm/slab.c	379;"	d	file:
OO_MASK	mm/slub.c	168;"	d	file:
OO_SHIFT	mm/slub.c	167;"	d	file:
ORIG_NAME	fs/binfmt_flat.c	174;"	d	file:
P	kernel/sched_debug.c	235;"	d	file:
P	kernel/sched_debug.c	246;"	d	file:
P	kernel/sched_debug.c	264;"	d	file:
P	kernel/sched_debug.c	283;"	d	file:
P	kernel/sched_debug.c	287;"	d	file:
P	kernel/sched_debug.c	304;"	d	file:
P	kernel/sched_debug.c	330;"	d	file:
P	kernel/sched_debug.c	341;"	d	file:
P	kernel/sched_debug.c	400;"	d	file:
P	kernel/sched_debug.c	477;"	d	file:
P	kernel/sched_debug.c	64;"	d	file:
P	kernel/sched_debug.c	86;"	d	file:
P64	kernel/sched_debug.c	288;"	d	file:
PAGEOUT_IO_ASYNC	mm/vmscan.c	/^	PAGEOUT_IO_ASYNC,$/;"	e	enum:pageout_io	file:
PAGEOUT_IO_SYNC	mm/vmscan.c	/^	PAGEOUT_IO_SYNC,$/;"	e	enum:pageout_io	file:
PAGES_PER_WAITQUEUE	mm/page_alloc.c	2814;"	d	file:
PAGE_ACTIVATE	mm/vmscan.c	/^	PAGE_ACTIVATE,$/;"	e	enum:__anon12	file:
PAGE_CACHE_ALIGN	include/linux/pagemap.h	81;"	d
PAGE_CACHE_MASK	include/linux/pagemap.h	80;"	d
PAGE_CACHE_SHIFT	include/linux/pagemap.h	78;"	d
PAGE_CACHE_SIZE	include/linux/pagemap.h	79;"	d
PAGE_CLEAN	mm/vmscan.c	/^	PAGE_CLEAN,$/;"	e	enum:__anon12	file:
PAGE_KEEP	mm/vmscan.c	/^	PAGE_KEEP,$/;"	e	enum:__anon12	file:
PAGE_KERNEL_EXEC	mm/nommu.c	308;"	d	file:
PAGE_KERNEL_EXEC	mm/vmalloc.c	1644;"	d	file:
PAGE_SUCCESS	mm/vmscan.c	/^	PAGE_SUCCESS,$/;"	e	enum:__anon12	file:
PARTIAL	mm/slub.c	/^	PARTIAL,	\/* kmem_cache_open() works but kmalloc does not *\/$/;"	e	enum:__anon10	file:
PARTIAL_AC	mm/slab.c	/^	PARTIAL_AC,$/;"	e	enum:__anon7	file:
PARTIAL_L3	mm/slab.c	/^	PARTIAL_L3,$/;"	e	enum:__anon7	file:
PA_HASH_ORDER	mm/highmem.c	295;"	d	file:
PCGF_ACCT	mm/memcontrol.c	256;"	d	file:
PCGF_CACHE	mm/memcontrol.c	252;"	d	file:
PCGF_LOCK	mm/memcontrol.c	254;"	d	file:
PCGF_USED	mm/memcontrol.c	253;"	d	file:
PCPU_DFL_MAP_ALLOC	mm/percpu.c	78;"	d	file:
PCPU_SETUP_BUG_ON	mm/percpu.c	1678;"	d	file:
PCPU_SETUP_BUG_ON	mm/percpu.c	1736;"	d	file:
PCPU_SLOT_BASE_SHIFT	mm/percpu.c	77;"	d	file:
PENDING	kernel/signal.c	123;"	d	file:
PENDING_TAIL	kernel/perf_event.c	2569;"	d	file:
PERF_EVENT_INDEX_OFFSET	kernel/perf_event.c	2083;"	d	file:
PIDLIST_REALLOC_DIFFERENCE	kernel/cgroup.c	2401;"	d	file:
PIDLIST_TOO_LARGE	kernel/cgroup.c	2363;"	d	file:
PID_NAME_LEN	kernel/pm_qos_params.c	346;"	d	file:
PN	kernel/sched_debug.c	237;"	d	file:
PN	kernel/sched_debug.c	245;"	d	file:
PN	kernel/sched_debug.c	266;"	d	file:
PN	kernel/sched_debug.c	284;"	d	file:
PN	kernel/sched_debug.c	332;"	d	file:
PN	kernel/sched_debug.c	340;"	d	file:
PN	kernel/sched_debug.c	404;"	d	file:
PN	kernel/sched_debug.c	475;"	d	file:
PN	kernel/sched_debug.c	66;"	d	file:
PN	kernel/sched_debug.c	85;"	d	file:
POLLEX_SET	fs/select.c	382;"	d	file:
POLLFD_PER_PAGE	fs/select.c	700;"	d	file:
POLLIN_SET	fs/select.c	380;"	d	file:
POLLOUT_SET	fs/select.c	381;"	d	file:
POLL_TABLE_FULL	fs/select.c	98;"	d	file:
POOL_SIZE	mm/bounce.c	20;"	d	file:
POOL_TIMEOUT_JIFFIES	mm/dmapool.c	64;"	d	file:
PPPIOCGIDLE32	fs/compat_ioctl.c	469;"	d	file:
PPPIOCSACTIVE32	fs/compat_ioctl.c	430;"	d	file:
PPPIOCSCOMPRESS32	fs/compat_ioctl.c	463;"	d	file:
PPPIOCSPASS32	fs/compat_ioctl.c	429;"	d	file:
PRINTK_STRING	kernel/rcutorture.c	86;"	d	file:
PRINT_RCU_DATA	kernel/rcutree_trace.c	70;"	d	file:
PRIO_TO_NICE	kernel/sched.c	89;"	d	file:
PROCESS_CLOCK	kernel/posix-cpu-timers.c	1644;"	d	file:
PROFILE_GRPSHIFT	kernel/profile.c	34;"	d	file:
PROFILE_GRPSZ	kernel/profile.c	35;"	d	file:
PageHuge	mm/hugetlb.c	/^int PageHuge(struct page *page)$/;"	f
RADIX_INDEX	mm/prio_tree.c	28;"	d	file:
RADIX_TREE_INDEX_BITS	lib/radix-tree.c	62;"	d	file:
RADIX_TREE_MAP_MASK	lib/radix-tree.c	44;"	d	file:
RADIX_TREE_MAP_SHIFT	lib/radix-tree.c	38;"	d	file:
RADIX_TREE_MAP_SHIFT	lib/radix-tree.c	40;"	d	file:
RADIX_TREE_MAP_SIZE	lib/radix-tree.c	43;"	d	file:
RADIX_TREE_MAX_PATH	lib/radix-tree.c	63;"	d	file:
RADIX_TREE_TAG_LONGS	lib/radix-tree.c	46;"	d	file:
RCUTORTURE_RUNNABLE_INIT	kernel/rcutorture.c	134;"	d	file:
RCUTORTURE_RUNNABLE_INIT	kernel/rcutorture.c	136;"	d	file:
RCU_DONE_TAIL	kernel/rcutree.h	155;"	d
RCU_EXPEDITED_STATE_IDLE	kernel/sched.c	10951;"	d	file:
RCU_EXPEDITED_STATE_POST	kernel/sched.c	10950;"	d	file:
RCU_FANOUT	kernel/rcutree.h	38;"	d
RCU_FANOUT_CUBE	kernel/rcutree.h	40;"	d
RCU_FANOUT_FOURTH	kernel/rcutree.h	41;"	d
RCU_FANOUT_SQ	kernel/rcutree.h	39;"	d
RCU_FORCE_QS	kernel/rcutree.h	241;"	d
RCU_GP_IDLE	kernel/rcutree.h	237;"	d
RCU_GP_INIT	kernel/rcutree.h	238;"	d
RCU_INIT_FLAVOR	kernel/rcutree.c	1859;"	d	file:
RCU_JIFFIES_TILL_FORCE_QS	kernel/rcutree.h	248;"	d
RCU_MIGRATION_GOT_QS	kernel/sched.c	7259;"	d	file:
RCU_MIGRATION_IDLE	kernel/sched.c	7257;"	d	file:
RCU_MIGRATION_MUST_SYNC	kernel/sched.c	7260;"	d	file:
RCU_MIGRATION_NEED_QS	kernel/sched.c	7258;"	d	file:
RCU_NEXT_READY_TAIL	kernel/rcutree.h	157;"	d
RCU_NEXT_SIZE	kernel/rcutree.h	159;"	d
RCU_NEXT_TAIL	kernel/rcutree.h	158;"	d
RCU_OFL_TASKS_EXP_GP	kernel/rcutree.h	319;"	d
RCU_OFL_TASKS_NORM_GP	kernel/rcutree.h	317;"	d
RCU_RANDOM_ADD	kernel/rcutorture.c	219;"	d	file:
RCU_RANDOM_MULT	kernel/rcutorture.c	218;"	d	file:
RCU_RANDOM_REFRESH	kernel/rcutorture.c	220;"	d	file:
RCU_SAVE_COMPLETED	kernel/rcutree.h	240;"	d
RCU_SAVE_DYNTICK	kernel/rcutree.h	239;"	d
RCU_SECONDS_TILL_STALL_CHECK	kernel/rcutree.h	250;"	d
RCU_SECONDS_TILL_STALL_RECHECK	kernel/rcutree.h	251;"	d
RCU_SIGNAL_INIT	kernel/rcutree.h	243;"	d
RCU_SIGNAL_INIT	kernel/rcutree.h	245;"	d
RCU_STALL_RAT_DELAY	kernel/rcutree.h	252;"	d
RCU_STATE_INITIALIZER	kernel/rcutree.c	57;"	d	file:
RCU_SUM	kernel/rcutree.h	75;"	d
RCU_TORTURE_PIPE_LEN	kernel/rcutorture.c	103;"	d	file:
RCU_TREE_NONCORE	kernel/rcutree_trace.c	46;"	d	file:
RCU_WAIT_TAIL	kernel/rcutree.h	156;"	d
REAPTIMEOUT_CPUC	mm/slab.c	389;"	d	file:
REAPTIMEOUT_LIST3	mm/slab.c	390;"	d	file:
RECLAIM_FS_verbose	kernel/lockdep.c	/^static int RECLAIM_FS_verbose(struct lock_class *class)$/;"	f	file:
RECLAIM_OFF	mm/vmscan.c	2456;"	d	file:
RECLAIM_SWAP	mm/vmscan.c	2459;"	d	file:
RECLAIM_VERBOSE	kernel/lockdep.c	331;"	d	file:
RECLAIM_VERBOSE	kernel/lockdep.c	335;"	d	file:
RECLAIM_WRITE	mm/vmscan.c	2458;"	d	file:
RECLAIM_ZONE	mm/vmscan.c	2457;"	d	file:
RECOVERED	mm/memory-failure.c	/^	RECOVERED,	\/* Successfully recovered *\/$/;"	e	enum:outcome	file:
REDZONE_ALIGN	mm/slab.c	145;"	d	file:
REGISTER	kernel/taskstats.c	/^	REGISTER,$/;"	e	enum:actions	file:
RELOC_FAILED	fs/binfmt_flat.c	70;"	d	file:
RESERVED	fs/binfmt_flat.c	177;"	d	file:
RESERVED_PIDS	kernel/pid.c	48;"	d	file:
RESUME	kernel/acct.c	71;"	d	file:
ROOT_NOPREFIX	kernel/cgroup.c	/^	ROOT_NOPREFIX, \/* mounted subsystems have no named prefix *\/$/;"	e	enum:__anon31	file:
RTC_EPOCH_READ32	fs/compat_ioctl.c	843;"	d	file:
RTC_EPOCH_SET32	fs/compat_ioctl.c	844;"	d	file:
RTC_IRQP_READ32	fs/compat_ioctl.c	841;"	d	file:
RTC_IRQP_SET32	fs/compat_ioctl.c	842;"	d	file:
RTTEST_LOCK	kernel/rtmutex-tester.c	/^	RTTEST_LOCK,		\/* 3 Lock uninterruptible, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKBKL	kernel/rtmutex-tester.c	/^	RTTEST_LOCKBKL,		\/* 9 Lock BKL *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKCONT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKCONT,	\/* 7 Continue locking after the wakeup delay *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKINT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKINT,		\/* 5 Lock interruptible, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKINTNOWAIT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKINTNOWAIT,	\/* 6 Lock interruptible no wait in wakeup, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_LOCKNOWAIT	kernel/rtmutex-tester.c	/^	RTTEST_LOCKNOWAIT,	\/* 4 Lock uninterruptible no wait in wakeup, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_NOP	kernel/rtmutex-tester.c	/^	RTTEST_NOP = 0,$/;"	e	enum:test_opcodes	file:
RTTEST_RESET	kernel/rtmutex-tester.c	/^	RTTEST_RESET = 99,	\/* 99 Reset all pending operations *\/$/;"	e	enum:test_opcodes	file:
RTTEST_RESETEVENT	kernel/rtmutex-tester.c	/^	RTTEST_RESETEVENT = 98,	\/* 98 Reset event counter *\/$/;"	e	enum:test_opcodes	file:
RTTEST_SCHEDOT	kernel/rtmutex-tester.c	/^	RTTEST_SCHEDOT,		\/* 1 Sched other, data = nice *\/$/;"	e	enum:test_opcodes	file:
RTTEST_SCHEDRT	kernel/rtmutex-tester.c	/^	RTTEST_SCHEDRT,		\/* 2 Sched fifo, data = prio *\/$/;"	e	enum:test_opcodes	file:
RTTEST_SIGNAL	kernel/rtmutex-tester.c	/^	RTTEST_SIGNAL,		\/* 11 Signal other test thread, data = thread id *\/$/;"	e	enum:test_opcodes	file:
RTTEST_UNLOCK	kernel/rtmutex-tester.c	/^	RTTEST_UNLOCK,		\/* 8 Unlock, data = lockindex *\/$/;"	e	enum:test_opcodes	file:
RTTEST_UNLOCKBKL	kernel/rtmutex-tester.c	/^	RTTEST_UNLOCKBKL,	\/* 10 Unlock BKL *\/$/;"	e	enum:test_opcodes	file:
RT_MAX_TRIES	kernel/sched_rt.c	1108;"	d	file:
RT_MUTEX_HAS_WAITERS	kernel/rtmutex_common.h	95;"	d
RT_MUTEX_OWNER_MASKALL	kernel/rtmutex_common.h	96;"	d
RT_MUTEX_OWNER_PENDING	kernel/rtmutex_common.h	94;"	d
RUNNING_HELPERS_TIMEOUT	kernel/kmod.c	303;"	d	file:
RUNTIME_INF	kernel/sched.c	120;"	d	file:
RWSEM_WAITING_FOR_READ	lib/rwsem-spinlock.c	16;"	d	file:
RWSEM_WAITING_FOR_WRITE	lib/rwsem-spinlock.c	17;"	d	file:
SCAN_UNEVICTABLE_BATCH_SIZE	mm/vmscan.c	2778;"	d	file:
SCHEDSTAT_VERSION	kernel/sched_stats.h	7;"	d
SCHED_FEAT	kernel/sched.c	695;"	d	file:
SCHED_FEAT	kernel/sched.c	702;"	d	file:
SCHED_FEAT	kernel/sched.c	704;"	d	file:
SCHED_FEAT	kernel/sched.c	711;"	d	file:
SCHED_FEAT	kernel/sched.c	714;"	d	file:
SCHED_FEAT	kernel/sched.c	722;"	d	file:
SC_PER_PAGE	mm/page_cgroup.c	294;"	d	file:
SC_POS_MASK	mm/page_cgroup.c	295;"	d	file:
SD_INIT	kernel/sched.c	8622;"	d	file:
SD_INIT_FUNC	kernel/sched.c	8624;"	d	file:
SD_INIT_NAME	kernel/sched.c	8617;"	d	file:
SD_INIT_NAME	kernel/sched.c	8619;"	d	file:
SD_NODES_PER_DOMAIN	kernel/sched.c	8203;"	d	file:
SECS_FIRST_SCAN	mm/kmemleak.c	110;"	d	file:
SECS_SCAN_WAIT	mm/kmemleak.c	111;"	d	file:
SECTIONS_SHIFT	mm/mm_init.c	18;"	d	file:
SEQNR_MASK	mm/ksm.c	148;"	d	file:
SEQ_printf	kernel/sched_debug.c	23;"	d	file:
SETFL_MASK	fs/fcntl.c	145;"	d	file:
SET_ENDIAN	kernel/sys.c	70;"	d	file:
SET_FPEMU_CTL	kernel/sys.c	55;"	d	file:
SET_FPEXC_CTL	kernel/sys.c	61;"	d	file:
SET_NOT_ALIGNED_FLAGS	fs/ioctl.c	95;"	d	file:
SET_NO_UNMOUNTED_IO_FLAGS	fs/ioctl.c	94;"	d	file:
SET_PERSONALITY	fs/compat_binfmt_elf.c	103;"	d	file:
SET_PERSONALITY	fs/compat_binfmt_elf.c	104;"	d	file:
SET_SYSCTL	kernel/sched.c	7101;"	d	file:
SET_SYSCTL	kernel/sched.c	7107;"	d	file:
SET_TSC_CTL	kernel/sys.c	76;"	d	file:
SET_UNALIGN_CTL	kernel/sys.c	49;"	d	file:
SET_UNKNOWN_FLAGS	fs/ioctl.c	93;"	d	file:
SGP_CACHE	mm/shmem.c	/^	SGP_CACHE,	\/* don't exceed i_size, may allocate page *\/$/;"	e	enum:sgp_type	file:
SGP_DIRTY	mm/shmem.c	/^	SGP_DIRTY,	\/* like SGP_CACHE, but set new page dirty *\/$/;"	e	enum:sgp_type	file:
SGP_READ	mm/shmem.c	/^	SGP_READ,	\/* don't exceed i_size, don't allocate page *\/$/;"	e	enum:sgp_type	file:
SGP_WRITE	mm/shmem.c	/^	SGP_WRITE,	\/* may exceed i_size, may allocate page *\/$/;"	e	enum:sgp_type	file:
SHMEM_MAX_BYTES	mm/shmem.c	2617;"	d	file:
SHMEM_MAX_BYTES	mm/shmem.c	85;"	d	file:
SHMEM_MAX_INDEX	mm/shmem.c	86;"	d	file:
SHMEM_PAGEIN	mm/shmem.c	92;"	d	file:
SHMEM_SB	mm/shmem.c	/^static inline struct shmem_sb_info *SHMEM_SB(struct super_block *sb)$/;"	f	file:
SHMEM_TRUNCATE	mm/shmem.c	93;"	d	file:
SHMSWP_MAX_BYTES	mm/shmem.c	83;"	d	file:
SHMSWP_MAX_INDEX	mm/shmem.c	82;"	d	file:
SHRINK_BATCH	mm/vmscan.c	183;"	d	file:
SIZE_AC	mm/slab.c	313;"	d	file:
SIZE_L3	mm/slab.c	314;"	d	file:
SLABDEBUG	mm/slub.c	111;"	d	file:
SLABDEBUG	mm/slub.c	113;"	d	file:
SLAB_ATTR	mm/slub.c	4020;"	d	file:
SLAB_ATTR_RO	mm/slub.c	4017;"	d	file:
SLAB_LIMIT	mm/slab.c	215;"	d	file:
SLOB_ALIGN	mm/slob.c	176;"	d	file:
SLOB_BREAK1	mm/slob.c	125;"	d	file:
SLOB_BREAK2	mm/slob.c	126;"	d	file:
SLOB_UNIT	mm/slob.c	174;"	d	file:
SLOB_UNITS	mm/slob.c	175;"	d	file:
SLOT_CLEAN	kernel/kprobes.c	/^	SLOT_CLEAN = 0,$/;"	e	enum:kprobe_slot_state	file:
SLOT_DIRTY	kernel/kprobes.c	/^	SLOT_DIRTY = 1,$/;"	e	enum:kprobe_slot_state	file:
SLOT_USED	kernel/kprobes.c	/^	SLOT_USED = 2,$/;"	e	enum:kprobe_slot_state	file:
SLOW_WORK_CULL_TIMEOUT	kernel/slow-work.h	12;"	d
SLOW_WORK_OOM_TIMEOUT	kernel/slow-work.h	14;"	d
SLOW_WORK_THREAD_LIMIT	kernel/slow-work.h	17;"	d
SLUB_MERGE_SAME	mm/slub.c	156;"	d	file:
SLUB_NEVER_MERGE	mm/slub.c	153;"	d	file:
SLUB_RESILIENCY_TEST	mm/slub.c	125;"	d	file:
SL_ALL	mm/slub.c	/^	SL_ALL,			\/* All slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_CPU	mm/slub.c	/^	SL_CPU,			\/* Only slabs used for cpu caches *\/$/;"	e	enum:slab_stat_type	file:
SL_OBJECTS	mm/slub.c	/^	SL_OBJECTS,		\/* Determine allocated objects not slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_PARTIAL	mm/slub.c	/^	SL_PARTIAL,		\/* Only partially allocated slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_TOTAL	mm/slub.c	/^	SL_TOTAL		\/* Determine object capacity not slabs *\/$/;"	e	enum:slab_stat_type	file:
SMBFS_NAME	fs/compat.c	761;"	d	file:
SMB_IOC_GETMOUNTUID_32	fs/compat_ioctl.c	1562;"	d	file:
SMP_TRACE_BUG_ON_LOCKED	kernel/rtmutex-debug.c	74;"	d	file:
SMP_TRACE_BUG_ON_LOCKED	kernel/rtmutex-debug.c	76;"	d	file:
SOFTIRQ_VERBOSE	kernel/lockdep.c	330;"	d	file:
SOFTIRQ_VERBOSE	kernel/lockdep.c	334;"	d	file:
SOFTIRQ_verbose	kernel/lockdep.c	/^static int SOFTIRQ_verbose(struct lock_class *class)$/;"	f	file:
SOFTLIMIT_EVENTS_THRESH	mm/memcontrol.c	58;"	d	file:
SOM_PAGEALIGN	fs/binfmt_som.c	53;"	d	file:
SOM_PAGEOFFSET	fs/binfmt_som.c	52;"	d	file:
SOM_PAGESTART	fs/binfmt_som.c	51;"	d	file:
SO_ALL	mm/slub.c	3907;"	d	file:
SO_CPU	mm/slub.c	3909;"	d	file:
SO_OBJECTS	mm/slub.c	3910;"	d	file:
SO_PARTIAL	mm/slub.c	3908;"	d	file:
SO_TOTAL	mm/slub.c	3911;"	d	file:
SPLIT_NS	kernel/sched_debug.c	54;"	d	file:
SRR	kernel/sched.c	1296;"	d	file:
STABLE_FLAG	mm/ksm.c	150;"	d	file:
STACK_ADD	fs/binfmt_elf.c	114;"	d	file:
STACK_ADD	fs/binfmt_elf.c	121;"	d	file:
STACK_ALLOC	fs/binfmt_elf.c	117;"	d	file:
STACK_ALLOC	fs/binfmt_elf.c	124;"	d	file:
STACK_RND_MASK	fs/binfmt_elf.c	544;"	d	file:
STACK_ROUND	fs/binfmt_elf.c	115;"	d	file:
STACK_ROUND	fs/binfmt_elf.c	122;"	d	file:
STANDARD_PARAM_DEF	kernel/params.c	179;"	d	file:
START_DATA	fs/binfmt_aout.c	100;"	d	file:
START_STACK	fs/binfmt_aout.c	104;"	d	file:
STATS	mm/slab.c	135;"	d	file:
STATS	mm/slab.c	139;"	d	file:
STATS_ADD_REAPED	mm/slab.c	397;"	d	file:
STATS_ADD_REAPED	mm/slab.c	421;"	d	file:
STATS_DEC_ACTIVE	mm/slab.c	394;"	d	file:
STATS_DEC_ACTIVE	mm/slab.c	418;"	d	file:
STATS_INC_ACOVERFLOW	mm/slab.c	406;"	d	file:
STATS_INC_ACOVERFLOW	mm/slab.c	426;"	d	file:
STATS_INC_ACTIVE	mm/slab.c	393;"	d	file:
STATS_INC_ACTIVE	mm/slab.c	417;"	d	file:
STATS_INC_ALLOCED	mm/slab.c	395;"	d	file:
STATS_INC_ALLOCED	mm/slab.c	419;"	d	file:
STATS_INC_ALLOCHIT	mm/slab.c	412;"	d	file:
STATS_INC_ALLOCHIT	mm/slab.c	428;"	d	file:
STATS_INC_ALLOCMISS	mm/slab.c	413;"	d	file:
STATS_INC_ALLOCMISS	mm/slab.c	429;"	d	file:
STATS_INC_ERR	mm/slab.c	403;"	d	file:
STATS_INC_ERR	mm/slab.c	423;"	d	file:
STATS_INC_FREEHIT	mm/slab.c	414;"	d	file:
STATS_INC_FREEHIT	mm/slab.c	430;"	d	file:
STATS_INC_FREEMISS	mm/slab.c	415;"	d	file:
STATS_INC_FREEMISS	mm/slab.c	431;"	d	file:
STATS_INC_GROWN	mm/slab.c	396;"	d	file:
STATS_INC_GROWN	mm/slab.c	420;"	d	file:
STATS_INC_NODEALLOCS	mm/slab.c	404;"	d	file:
STATS_INC_NODEALLOCS	mm/slab.c	424;"	d	file:
STATS_INC_NODEFREES	mm/slab.c	405;"	d	file:
STATS_INC_NODEFREES	mm/slab.c	425;"	d	file:
STATS_SET_FREEABLE	mm/slab.c	407;"	d	file:
STATS_SET_FREEABLE	mm/slab.c	427;"	d	file:
STATS_SET_HIGH	mm/slab.c	398;"	d	file:
STATS_SET_HIGH	mm/slab.c	422;"	d	file:
STAT_ATTR	mm/slub.c	4382;"	d	file:
STOPMACHINE_DISABLE_IRQ	kernel/stop_machine.c	/^	STOPMACHINE_DISABLE_IRQ,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_EXIT	kernel/stop_machine.c	/^	STOPMACHINE_EXIT,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_NONE	kernel/stop_machine.c	/^	STOPMACHINE_NONE,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_PREPARE	kernel/stop_machine.c	/^	STOPMACHINE_PREPARE,$/;"	e	enum:stopmachine_state	file:
STOPMACHINE_RUN	kernel/stop_machine.c	/^	STOPMACHINE_RUN,$/;"	e	enum:stopmachine_state	file:
STRICT_READ_CHECKS	kernel/lockdep.c	2190;"	d	file:
SUBSYS	kernel/cgroup.c	60;"	d	file:
SUSPEND	kernel/acct.c	72;"	d	file:
SWAPFILE_CLUSTER	mm/swapfile.c	207;"	d	file:
SYSCALL_DEFINE0	fs/open.c	/^SYSCALL_DEFINE0(vhangup)$/;"	f
SYSCALL_DEFINE0	fs/sync.c	/^SYSCALL_DEFINE0(sync)$/;"	f
SYSCALL_DEFINE0	kernel/sched.c	/^SYSCALL_DEFINE0(sched_yield)$/;"	f
SYSCALL_DEFINE0	kernel/signal.c	/^SYSCALL_DEFINE0(pause)$/;"	f
SYSCALL_DEFINE0	kernel/signal.c	/^SYSCALL_DEFINE0(restart_syscall)$/;"	f
SYSCALL_DEFINE0	kernel/signal.c	/^SYSCALL_DEFINE0(sgetmask)$/;"	f
SYSCALL_DEFINE0	kernel/sys.c	/^SYSCALL_DEFINE0(getpgrp)$/;"	f
SYSCALL_DEFINE0	kernel/sys.c	/^SYSCALL_DEFINE0(setsid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getegid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(geteuid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getgid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getpid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getppid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(gettid)$/;"	f
SYSCALL_DEFINE0	kernel/timer.c	/^SYSCALL_DEFINE0(getuid)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(getegid16)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(geteuid16)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(getgid16)$/;"	f
SYSCALL_DEFINE0	kernel/uid16.c	/^SYSCALL_DEFINE0(getuid16)$/;"	f
SYSCALL_DEFINE0	mm/mlock.c	/^SYSCALL_DEFINE0(munlockall)$/;"	f
SYSCALL_DEFINE1	fs/aio.c	/^SYSCALL_DEFINE1(io_destroy, aio_context_t, ctx)$/;"	f
SYSCALL_DEFINE1	fs/eventfd.c	/^SYSCALL_DEFINE1(eventfd, unsigned int, count)$/;"	f
SYSCALL_DEFINE1	fs/eventpoll.c	/^SYSCALL_DEFINE1(epoll_create, int, size)$/;"	f
SYSCALL_DEFINE1	fs/eventpoll.c	/^SYSCALL_DEFINE1(epoll_create1, int, flags)$/;"	f
SYSCALL_DEFINE1	fs/exec.c	/^SYSCALL_DEFINE1(uselib, const char __user *, library)$/;"	f
SYSCALL_DEFINE1	fs/fcntl.c	/^SYSCALL_DEFINE1(dup, unsigned int, fildes)$/;"	f
SYSCALL_DEFINE1	fs/namei.c	/^SYSCALL_DEFINE1(rmdir, const char __user *, pathname)$/;"	f
SYSCALL_DEFINE1	fs/namei.c	/^SYSCALL_DEFINE1(unlink, const char __user *, pathname)$/;"	f
SYSCALL_DEFINE1	fs/namespace.c	/^SYSCALL_DEFINE1(oldumount, char __user *, name)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(chdir, const char __user *, filename)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(chroot, const char __user *, filename)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(close, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/open.c	/^SYSCALL_DEFINE1(fchdir, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/pipe.c	/^SYSCALL_DEFINE1(pipe, int __user *, fildes)$/;"	f
SYSCALL_DEFINE1	fs/sync.c	/^SYSCALL_DEFINE1(fdatasync, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	fs/sync.c	/^SYSCALL_DEFINE1(fsync, unsigned int, fd)$/;"	f
SYSCALL_DEFINE1	kernel/acct.c	/^SYSCALL_DEFINE1(acct, const char __user *, name)$/;"	f
SYSCALL_DEFINE1	kernel/exec_domain.c	/^SYSCALL_DEFINE1(personality, u_long, personality)$/;"	f
SYSCALL_DEFINE1	kernel/exit.c	/^SYSCALL_DEFINE1(exit, int, error_code)$/;"	f
SYSCALL_DEFINE1	kernel/exit.c	/^SYSCALL_DEFINE1(exit_group, int, error_code)$/;"	f
SYSCALL_DEFINE1	kernel/fork.c	/^SYSCALL_DEFINE1(set_tid_address, int __user *, tidptr)$/;"	f
SYSCALL_DEFINE1	kernel/fork.c	/^SYSCALL_DEFINE1(unshare, unsigned long, unshare_flags)$/;"	f
SYSCALL_DEFINE1	kernel/posix-timers.c	/^SYSCALL_DEFINE1(timer_delete, timer_t, timer_id)$/;"	f
SYSCALL_DEFINE1	kernel/posix-timers.c	/^SYSCALL_DEFINE1(timer_getoverrun, timer_t, timer_id)$/;"	f
SYSCALL_DEFINE1	kernel/sched.c	/^SYSCALL_DEFINE1(nice, int, increment)$/;"	f
SYSCALL_DEFINE1	kernel/sched.c	/^SYSCALL_DEFINE1(sched_get_priority_max, int, policy)$/;"	f
SYSCALL_DEFINE1	kernel/sched.c	/^SYSCALL_DEFINE1(sched_get_priority_min, int, policy)$/;"	f
SYSCALL_DEFINE1	kernel/sched.c	/^SYSCALL_DEFINE1(sched_getscheduler, pid_t, pid)$/;"	f
SYSCALL_DEFINE1	kernel/signal.c	/^SYSCALL_DEFINE1(sigpending, old_sigset_t __user *, set)$/;"	f
SYSCALL_DEFINE1	kernel/signal.c	/^SYSCALL_DEFINE1(ssetmask, int, newmask)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(getpgid, pid_t, pid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(getsid, pid_t, pid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setfsgid, gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setfsuid, uid_t, uid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setgid, gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(setuid, uid_t, uid)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(times, struct tms __user *, tbuf)$/;"	f
SYSCALL_DEFINE1	kernel/sys.c	/^SYSCALL_DEFINE1(umask, int, mask)$/;"	f
SYSCALL_DEFINE1	kernel/sysctl_binary.c	/^SYSCALL_DEFINE1(sysctl, struct __sysctl_args __user *, args)$/;"	f
SYSCALL_DEFINE1	kernel/time.c	/^SYSCALL_DEFINE1(adjtimex, struct timex __user *, txc_p)$/;"	f
SYSCALL_DEFINE1	kernel/time.c	/^SYSCALL_DEFINE1(stime, time_t __user *, tptr)$/;"	f
SYSCALL_DEFINE1	kernel/time.c	/^SYSCALL_DEFINE1(time, time_t __user *, tloc)$/;"	f
SYSCALL_DEFINE1	kernel/timer.c	/^SYSCALL_DEFINE1(alarm, unsigned int, seconds)$/;"	f
SYSCALL_DEFINE1	kernel/timer.c	/^SYSCALL_DEFINE1(sysinfo, struct sysinfo __user *, info)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setfsgid16, old_gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setfsuid16, old_uid_t, uid)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setgid16, old_gid_t, gid)$/;"	f
SYSCALL_DEFINE1	kernel/uid16.c	/^SYSCALL_DEFINE1(setuid16, old_uid_t, uid)$/;"	f
SYSCALL_DEFINE1	mm/mlock.c	/^SYSCALL_DEFINE1(mlockall, int, flags)$/;"	f
SYSCALL_DEFINE1	mm/mmap.c	/^SYSCALL_DEFINE1(brk, unsigned long, brk)$/;"	f
SYSCALL_DEFINE1	mm/nommu.c	/^SYSCALL_DEFINE1(brk, unsigned long, brk)$/;"	f
SYSCALL_DEFINE1	mm/swapfile.c	/^SYSCALL_DEFINE1(swapoff, const char __user *, specialfile)$/;"	f
SYSCALL_DEFINE2	fs/aio.c	/^SYSCALL_DEFINE2(io_setup, unsigned, nr_events, aio_context_t __user *, ctxp)$/;"	f
SYSCALL_DEFINE2	fs/buffer.c	/^SYSCALL_DEFINE2(bdflush, int, func, long, data)$/;"	f
SYSCALL_DEFINE2	fs/dcache.c	/^SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)$/;"	f
SYSCALL_DEFINE2	fs/eventfd.c	/^SYSCALL_DEFINE2(eventfd2, unsigned int, count, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/fcntl.c	/^SYSCALL_DEFINE2(dup2, unsigned int, oldfd, unsigned int, newfd)$/;"	f
SYSCALL_DEFINE2	fs/ioprio.c	/^SYSCALL_DEFINE2(ioprio_get, int, which, int, who)$/;"	f
SYSCALL_DEFINE2	fs/locks.c	/^SYSCALL_DEFINE2(flock, unsigned int, fd, unsigned int, cmd)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(link, const char __user *, oldname, const char __user *, newname)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(mkdir, const char __user *, pathname, int, mode)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(rename, const char __user *, oldname, const char __user *, newname)$/;"	f
SYSCALL_DEFINE2	fs/namei.c	/^SYSCALL_DEFINE2(symlink, const char __user *, oldname, const char __user *, newname)$/;"	f
SYSCALL_DEFINE2	fs/namespace.c	/^SYSCALL_DEFINE2(pivot_root, const char __user *, new_root,$/;"	f
SYSCALL_DEFINE2	fs/namespace.c	/^SYSCALL_DEFINE2(umount, char __user *, name, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(access, const char __user *, filename, int, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(chmod, const char __user *, filename, mode_t, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(creat, const char __user *, pathname, int, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(fchmod, unsigned int, fd, mode_t, mode)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(fstatfs, unsigned int, fd, struct statfs __user *, buf)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(ftruncate, unsigned int, fd, unsigned long, length)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(statfs, const char __user *, pathname, struct statfs __user *, buf)$/;"	f
SYSCALL_DEFINE2	fs/open.c	/^SYSCALL_DEFINE2(truncate, const char __user *, path, long, length)$/;"	f
SYSCALL_DEFINE2	fs/pipe.c	/^SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(fstat, unsigned int, fd, struct __old_kernel_stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(fstat64, unsigned long, fd, struct stat64 __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(lstat, char __user *, filename, struct __old_kernel_stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(lstat64, char __user *, filename, struct stat64 __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(newfstat, unsigned int, fd, struct stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(newlstat, char __user *, filename, struct stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(newstat, char __user *, filename, struct stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(stat, char __user *, filename, struct __old_kernel_stat __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/stat.c	/^SYSCALL_DEFINE2(stat64, char __user *, filename, struct stat64 __user *, statbuf)$/;"	f
SYSCALL_DEFINE2	fs/super.c	/^SYSCALL_DEFINE2(ustat, unsigned, dev, struct ustat __user *, ubuf)$/;"	f
SYSCALL_DEFINE2	fs/timerfd.c	/^SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)$/;"	f
SYSCALL_DEFINE2	fs/timerfd.c	/^SYSCALL_DEFINE2(timerfd_gettime, int, ufd, struct itimerspec __user *, otmr)$/;"	f
SYSCALL_DEFINE2	fs/utimes.c	/^SYSCALL_DEFINE2(utime, char __user *, filename, struct utimbuf __user *, times)$/;"	f
SYSCALL_DEFINE2	fs/utimes.c	/^SYSCALL_DEFINE2(utimes, char __user *, filename,$/;"	f
SYSCALL_DEFINE2	fs/xattr.c	/^SYSCALL_DEFINE2(fremovexattr, int, fd, const char __user *, name)$/;"	f
SYSCALL_DEFINE2	fs/xattr.c	/^SYSCALL_DEFINE2(lremovexattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE2	fs/xattr.c	/^SYSCALL_DEFINE2(removexattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE2	kernel/capability.c	/^SYSCALL_DEFINE2(capget, cap_user_header_t, header, cap_user_data_t, dataptr)$/;"	f
SYSCALL_DEFINE2	kernel/capability.c	/^SYSCALL_DEFINE2(capset, cap_user_header_t, header, const cap_user_data_t, data)$/;"	f
SYSCALL_DEFINE2	kernel/futex.c	/^SYSCALL_DEFINE2(set_robust_list, struct robust_list_head __user *, head,$/;"	f
SYSCALL_DEFINE2	kernel/groups.c	/^SYSCALL_DEFINE2(getgroups, int, gidsetsize, gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/groups.c	/^SYSCALL_DEFINE2(setgroups, int, gidsetsize, gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/hrtimer.c	/^SYSCALL_DEFINE2(nanosleep, struct timespec __user *, rqtp,$/;"	f
SYSCALL_DEFINE2	kernel/itimer.c	/^SYSCALL_DEFINE2(getitimer, int, which, struct itimerval __user *, value)$/;"	f
SYSCALL_DEFINE2	kernel/module.c	/^SYSCALL_DEFINE2(delete_module, const char __user *, name_user,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_getres, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_gettime, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(clock_settime, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE2	kernel/posix-timers.c	/^SYSCALL_DEFINE2(timer_gettime, timer_t, timer_id,$/;"	f
SYSCALL_DEFINE2	kernel/sched.c	/^SYSCALL_DEFINE2(sched_getparam, pid_t, pid, struct sched_param __user *, param)$/;"	f
SYSCALL_DEFINE2	kernel/sched.c	/^SYSCALL_DEFINE2(sched_rr_get_interval, pid_t, pid,$/;"	f
SYSCALL_DEFINE2	kernel/sched.c	/^SYSCALL_DEFINE2(sched_setparam, pid_t, pid, struct sched_param __user *, param)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(rt_sigpending, sigset_t __user *, set, size_t, sigsetsize)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(rt_sigsuspend, sigset_t __user *, unewset, size_t, sigsetsize)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(signal, int, sig, __sighandler_t, handler)$/;"	f
SYSCALL_DEFINE2	kernel/signal.c	/^SYSCALL_DEFINE2(tkill, pid_t, pid, int, sig)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(gethostname, char __user *, name, int, len)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(getpriority, int, which, int, who)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(getrlimit, unsigned int, resource, struct rlimit __user *, rlim)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(getrusage, int, who, struct rusage __user *, ru)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(old_getrlimit, unsigned int, resource,$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setdomainname, char __user *, name, int, len)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(sethostname, char __user *, name, int, len)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setpgid, pid_t, pid, pid_t, pgid)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setregid, gid_t, rgid, gid_t, egid)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setreuid, uid_t, ruid, uid_t, euid)$/;"	f
SYSCALL_DEFINE2	kernel/sys.c	/^SYSCALL_DEFINE2(setrlimit, unsigned int, resource, struct rlimit __user *, rlim)$/;"	f
SYSCALL_DEFINE2	kernel/time.c	/^SYSCALL_DEFINE2(gettimeofday, struct timeval __user *, tv,$/;"	f
SYSCALL_DEFINE2	kernel/time.c	/^SYSCALL_DEFINE2(settimeofday, struct timeval __user *, tv,$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(getgroups16, int, gidsetsize, old_gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(setgroups16, int, gidsetsize, old_gid_t __user *, grouplist)$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(setregid16, old_gid_t, rgid, old_gid_t, egid)$/;"	f
SYSCALL_DEFINE2	kernel/uid16.c	/^SYSCALL_DEFINE2(setreuid16, old_uid_t, ruid, old_uid_t, euid)$/;"	f
SYSCALL_DEFINE2	mm/mlock.c	/^SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/mlock.c	/^SYSCALL_DEFINE2(munlock, unsigned long, start, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/mmap.c	/^SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/nommu.c	/^SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)$/;"	f
SYSCALL_DEFINE2	mm/swapfile.c	/^SYSCALL_DEFINE2(swapon, const char __user *, specialfile, int, swap_flags)$/;"	f
SYSCALL_DEFINE3	fs/aio.c	/^SYSCALL_DEFINE3(io_cancel, aio_context_t, ctx_id, struct iocb __user *, iocb,$/;"	f
SYSCALL_DEFINE3	fs/aio.c	/^SYSCALL_DEFINE3(io_submit, aio_context_t, ctx_id, long, nr,$/;"	f
SYSCALL_DEFINE3	fs/fcntl.c	/^SYSCALL_DEFINE3(dup3, unsigned int, oldfd, unsigned int, newfd, int, flags)$/;"	f
SYSCALL_DEFINE3	fs/fcntl.c	/^SYSCALL_DEFINE3(fcntl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)$/;"	f
SYSCALL_DEFINE3	fs/fcntl.c	/^SYSCALL_DEFINE3(fcntl64, unsigned int, fd, unsigned int, cmd,$/;"	f
SYSCALL_DEFINE3	fs/filesystems.c	/^SYSCALL_DEFINE3(sysfs, int, option, unsigned long, arg1, unsigned long, arg2)$/;"	f
SYSCALL_DEFINE3	fs/ioctl.c	/^SYSCALL_DEFINE3(ioctl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)$/;"	f
SYSCALL_DEFINE3	fs/ioprio.c	/^SYSCALL_DEFINE3(ioprio_set, int, which, int, who, int, ioprio)$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, int, mode)$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(mknod, const char __user *, filename, int, mode, unsigned, dev)$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(symlinkat, const char __user *, oldname,$/;"	f
SYSCALL_DEFINE3	fs/namei.c	/^SYSCALL_DEFINE3(unlinkat, int, dfd, const char __user *, pathname, int, flag)$/;"	f
SYSCALL_DEFINE3	fs/nfsctl.c	/^SYSCALL_DEFINE3(nfsservctl, int, cmd, struct nfsctl_arg __user *, arg,$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(chown, const char __user *, filename, uid_t, user, gid_t, group)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(fchmodat, int, dfd, const char __user *, filename, mode_t, mode)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(fchown, unsigned int, fd, uid_t, user, gid_t, group)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(fstatfs64, unsigned int, fd, size_t, sz, struct statfs64 __user *, buf)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(lchown, const char __user *, filename, uid_t, user, gid_t, group)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, int, mode)$/;"	f
SYSCALL_DEFINE3	fs/open.c	/^SYSCALL_DEFINE3(statfs64, const char __user *, pathname, size_t, sz, struct statfs64 __user *, buf)$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(lseek, unsigned int, fd, off_t, offset, unsigned int, origin)$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(readv, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,$/;"	f
SYSCALL_DEFINE3	fs/read_write.c	/^SYSCALL_DEFINE3(writev, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE3	fs/readdir.c	/^SYSCALL_DEFINE3(getdents, unsigned int, fd,$/;"	f
SYSCALL_DEFINE3	fs/readdir.c	/^SYSCALL_DEFINE3(getdents64, unsigned int, fd,$/;"	f
SYSCALL_DEFINE3	fs/readdir.c	/^SYSCALL_DEFINE3(old_readdir, unsigned int, fd,$/;"	f
SYSCALL_DEFINE3	fs/select.c	/^SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,$/;"	f
SYSCALL_DEFINE3	fs/signalfd.c	/^SYSCALL_DEFINE3(signalfd, int, ufd, sigset_t __user *, user_mask,$/;"	f
SYSCALL_DEFINE3	fs/stat.c	/^SYSCALL_DEFINE3(readlink, const char __user *, path, char __user *, buf,$/;"	f
SYSCALL_DEFINE3	fs/utimes.c	/^SYSCALL_DEFINE3(futimesat, int, dfd, char __user *, filename,$/;"	f
SYSCALL_DEFINE3	fs/xattr.c	/^SYSCALL_DEFINE3(flistxattr, int, fd, char __user *, list, size_t, size)$/;"	f
SYSCALL_DEFINE3	fs/xattr.c	/^SYSCALL_DEFINE3(listxattr, const char __user *, pathname, char __user *, list,$/;"	f
SYSCALL_DEFINE3	fs/xattr.c	/^SYSCALL_DEFINE3(llistxattr, const char __user *, pathname, char __user *, list,$/;"	f
SYSCALL_DEFINE3	kernel/exit.c	/^SYSCALL_DEFINE3(waitpid, pid_t, pid, int __user *, stat_addr, int, options)$/;"	f
SYSCALL_DEFINE3	kernel/futex.c	/^SYSCALL_DEFINE3(get_robust_list, int, pid,$/;"	f
SYSCALL_DEFINE3	kernel/itimer.c	/^SYSCALL_DEFINE3(setitimer, int, which, struct itimerval __user *, value,$/;"	f
SYSCALL_DEFINE3	kernel/module.c	/^SYSCALL_DEFINE3(init_module, void __user *, umod,$/;"	f
SYSCALL_DEFINE3	kernel/posix-timers.c	/^SYSCALL_DEFINE3(timer_create, const clockid_t, which_clock,$/;"	f
SYSCALL_DEFINE3	kernel/printk.c	/^SYSCALL_DEFINE3(syslog, int, type, char __user *, buf, int, len)$/;"	f
SYSCALL_DEFINE3	kernel/sched.c	/^SYSCALL_DEFINE3(sched_getaffinity, pid_t, pid, unsigned int, len,$/;"	f
SYSCALL_DEFINE3	kernel/sched.c	/^SYSCALL_DEFINE3(sched_setaffinity, pid_t, pid, unsigned int, len,$/;"	f
SYSCALL_DEFINE3	kernel/sched.c	/^SYSCALL_DEFINE3(sched_setscheduler, pid_t, pid, int, policy,$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(rt_sigqueueinfo, pid_t, pid, int, sig,$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(sigprocmask, int, how, old_sigset_t __user *, set,$/;"	f
SYSCALL_DEFINE3	kernel/signal.c	/^SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid_t, pid, int, sig)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(getcpu, unsigned __user *, cpup, unsigned __user *, nodep,$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(getresgid, gid_t __user *, rgid, gid_t __user *, egid, gid_t __user *, sgid)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(getresuid, uid_t __user *, ruid, uid_t __user *, euid, uid_t __user *, suid)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(setresgid, gid_t, rgid, gid_t, egid, gid_t, sgid)$/;"	f
SYSCALL_DEFINE3	kernel/sys.c	/^SYSCALL_DEFINE3(setresuid, uid_t, ruid, uid_t, euid, uid_t, suid)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(chown16, const char __user *, filename, old_uid_t, user, old_gid_t, group)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(fchown16, unsigned int, fd, old_uid_t, user, old_gid_t, group)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(getresgid16, old_gid_t __user *, rgid, old_gid_t __user *, egid, old_gid_t __user *, sgid)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(getresuid16, old_uid_t __user *, ruid, old_uid_t __user *, euid, old_uid_t __user *, suid)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(lchown16, const char __user *, filename, old_uid_t, user, old_gid_t, group)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(setresgid16, old_gid_t, rgid, old_gid_t, egid, old_gid_t, sgid)$/;"	f
SYSCALL_DEFINE3	kernel/uid16.c	/^SYSCALL_DEFINE3(setresuid16, old_uid_t, ruid, old_uid_t, euid, old_uid_t, suid)$/;"	f
SYSCALL_DEFINE3	mm/madvise.c	/^SYSCALL_DEFINE3(madvise, unsigned long, start, size_t, len_in, int, behavior)$/;"	f
SYSCALL_DEFINE3	mm/mempolicy.c	/^SYSCALL_DEFINE3(set_mempolicy, int, mode, unsigned long __user *, nmask,$/;"	f
SYSCALL_DEFINE3	mm/mincore.c	/^SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE3	mm/mprotect.c	/^SYSCALL_DEFINE3(mprotect, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE3	mm/msync.c	/^SYSCALL_DEFINE3(msync, unsigned long, start, size_t, len, int, flags)$/;"	f
SYSCALL_DEFINE4	fs/eventpoll.c	/^SYSCALL_DEFINE4(epoll_ctl, int, epfd, int, op, int, fd,$/;"	f
SYSCALL_DEFINE4	fs/eventpoll.c	/^SYSCALL_DEFINE4(epoll_wait, int, epfd, struct epoll_event __user *, events,$/;"	f
SYSCALL_DEFINE4	fs/namei.c	/^SYSCALL_DEFINE4(mknodat, int, dfd, const char __user *, filename, int, mode,$/;"	f
SYSCALL_DEFINE4	fs/namei.c	/^SYSCALL_DEFINE4(renameat, int, olddfd, const char __user *, oldname,$/;"	f
SYSCALL_DEFINE4	fs/open.c	/^SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags,$/;"	f
SYSCALL_DEFINE4	fs/read_write.c	/^SYSCALL_DEFINE4(sendfile, int, out_fd, int, in_fd, off_t __user *, offset, size_t, count)$/;"	f
SYSCALL_DEFINE4	fs/read_write.c	/^SYSCALL_DEFINE4(sendfile64, int, out_fd, int, in_fd, loff_t __user *, offset, size_t, count)$/;"	f
SYSCALL_DEFINE4	fs/signalfd.c	/^SYSCALL_DEFINE4(signalfd4, int, ufd, sigset_t __user *, user_mask,$/;"	f
SYSCALL_DEFINE4	fs/splice.c	/^SYSCALL_DEFINE4(tee, int, fdin, int, fdout, size_t, len, unsigned int, flags)$/;"	f
SYSCALL_DEFINE4	fs/splice.c	/^SYSCALL_DEFINE4(vmsplice, int, fd, const struct iovec __user *, iov,$/;"	f
SYSCALL_DEFINE4	fs/stat.c	/^SYSCALL_DEFINE4(fstatat64, int, dfd, char __user *, filename,$/;"	f
SYSCALL_DEFINE4	fs/stat.c	/^SYSCALL_DEFINE4(newfstatat, int, dfd, char __user *, filename,$/;"	f
SYSCALL_DEFINE4	fs/stat.c	/^SYSCALL_DEFINE4(readlinkat, int, dfd, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE4	fs/timerfd.c	/^SYSCALL_DEFINE4(timerfd_settime, int, ufd, int, flags,$/;"	f
SYSCALL_DEFINE4	fs/utimes.c	/^SYSCALL_DEFINE4(utimensat, int, dfd, char __user *, filename,$/;"	f
SYSCALL_DEFINE4	fs/xattr.c	/^SYSCALL_DEFINE4(fgetxattr, int, fd, const char __user *, name,$/;"	f
SYSCALL_DEFINE4	fs/xattr.c	/^SYSCALL_DEFINE4(getxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE4	fs/xattr.c	/^SYSCALL_DEFINE4(lgetxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE4	kernel/exit.c	/^SYSCALL_DEFINE4(wait4, pid_t, upid, int __user *, stat_addr,$/;"	f
SYSCALL_DEFINE4	kernel/kexec.c	/^SYSCALL_DEFINE4(kexec_load, unsigned long, entry, unsigned long, nr_segments,$/;"	f
SYSCALL_DEFINE4	kernel/posix-timers.c	/^SYSCALL_DEFINE4(clock_nanosleep, const clockid_t, which_clock, int, flags,$/;"	f
SYSCALL_DEFINE4	kernel/posix-timers.c	/^SYSCALL_DEFINE4(timer_settime, timer_t, timer_id, int, flags,$/;"	f
SYSCALL_DEFINE4	kernel/ptrace.c	/^SYSCALL_DEFINE4(ptrace, long, request, long, pid, long, addr, long, data)$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_sigaction, int, sig,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_sigprocmask, int, how, sigset_t __user *, set,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_sigtimedwait, const sigset_t __user *, uthese,$/;"	f
SYSCALL_DEFINE4	kernel/signal.c	/^SYSCALL_DEFINE4(rt_tgsigqueueinfo, pid_t, tgid, pid_t, pid, int, sig,$/;"	f
SYSCALL_DEFINE4	kernel/sys.c	/^SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,$/;"	f
SYSCALL_DEFINE4	mm/mempolicy.c	/^SYSCALL_DEFINE4(migrate_pages, pid_t, pid, unsigned long, maxnode,$/;"	f
SYSCALL_DEFINE5	fs/aio.c	/^SYSCALL_DEFINE5(io_getevents, aio_context_t, ctx_id,$/;"	f
SYSCALL_DEFINE5	fs/namei.c	/^SYSCALL_DEFINE5(linkat, int, olddfd, const char __user *, oldname,$/;"	f
SYSCALL_DEFINE5	fs/namespace.c	/^SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,$/;"	f
SYSCALL_DEFINE5	fs/open.c	/^SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user,$/;"	f
SYSCALL_DEFINE5	fs/read_write.c	/^SYSCALL_DEFINE5(llseek, unsigned int, fd, unsigned long, offset_high,$/;"	f
SYSCALL_DEFINE5	fs/read_write.c	/^SYSCALL_DEFINE5(preadv, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE5	fs/read_write.c	/^SYSCALL_DEFINE5(pwritev, unsigned long, fd, const struct iovec __user *, vec,$/;"	f
SYSCALL_DEFINE5	fs/select.c	/^SYSCALL_DEFINE5(ppoll, struct pollfd __user *, ufds, unsigned int, nfds,$/;"	f
SYSCALL_DEFINE5	fs/select.c	/^SYSCALL_DEFINE5(select, int, n, fd_set __user *, inp, fd_set __user *, outp,$/;"	f
SYSCALL_DEFINE5	fs/xattr.c	/^SYSCALL_DEFINE5(fsetxattr, int, fd, const char __user *, name,$/;"	f
SYSCALL_DEFINE5	fs/xattr.c	/^SYSCALL_DEFINE5(lsetxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE5	fs/xattr.c	/^SYSCALL_DEFINE5(setxattr, const char __user *, pathname,$/;"	f
SYSCALL_DEFINE5	kernel/exit.c	/^SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,$/;"	f
SYSCALL_DEFINE5	kernel/perf_event.c	/^SYSCALL_DEFINE5(perf_event_open,$/;"	f
SYSCALL_DEFINE5	kernel/sys.c	/^SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,$/;"	f
SYSCALL_DEFINE5	mm/fremap.c	/^SYSCALL_DEFINE5(remap_file_pages, unsigned long, start, unsigned long, size,$/;"	f
SYSCALL_DEFINE5	mm/mempolicy.c	/^SYSCALL_DEFINE5(get_mempolicy, int __user *, policy,$/;"	f
SYSCALL_DEFINE5	mm/mremap.c	/^SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,$/;"	f
SYSCALL_DEFINE5	mm/nommu.c	/^SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,$/;"	f
SYSCALL_DEFINE6	fs/eventpoll.c	/^SYSCALL_DEFINE6(epoll_pwait, int, epfd, struct epoll_event __user *, events,$/;"	f
SYSCALL_DEFINE6	fs/select.c	/^SYSCALL_DEFINE6(pselect6, int, n, fd_set __user *, inp, fd_set __user *, outp,$/;"	f
SYSCALL_DEFINE6	fs/splice.c	/^SYSCALL_DEFINE6(splice, int, fd_in, loff_t __user *, off_in,$/;"	f
SYSCALL_DEFINE6	kernel/futex.c	/^SYSCALL_DEFINE6(futex, u32 __user *, uaddr, int, op, u32, val,$/;"	f
SYSCALL_DEFINE6	mm/mempolicy.c	/^SYSCALL_DEFINE6(mbind, unsigned long, start, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	mm/migrate.c	/^SYSCALL_DEFINE6(move_pages, pid_t, pid, unsigned long, nr_pages,$/;"	f
SYSCALL_DEFINE6	mm/mmap.c	/^SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	mm/nommu.c	/^SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,$/;"	f
SYSFS	mm/slub.c	/^	SYSFS		\/* Sysfs up *\/$/;"	e	enum:__anon10	file:
SyS_fadvise64	mm/fadvise.c	/^asmlinkage long SyS_fadvise64(long fd, loff_t offset, long len, long advice)$/;"	f
SyS_fadvise64_64	mm/fadvise.c	/^asmlinkage long SyS_fadvise64_64(long fd, loff_t offset, loff_t len, long advice)$/;"	f
SyS_fallocate	fs/open.c	/^asmlinkage long SyS_fallocate(long fd, long mode, loff_t offset, loff_t len)$/;"	f
SyS_ftruncate64	fs/open.c	/^asmlinkage long SyS_ftruncate64(long fd, loff_t length)$/;"	f
SyS_lookup_dcookie	fs/dcookies.c	/^asmlinkage long SyS_lookup_dcookie(u64 cookie64, long buf, long len)$/;"	f
SyS_pread64	fs/read_write.c	/^asmlinkage long SyS_pread64(long fd, long buf, long count, loff_t pos)$/;"	f
SyS_pwrite64	fs/read_write.c	/^asmlinkage long SyS_pwrite64(long fd, long buf, long count, loff_t pos)$/;"	f
SyS_readahead	mm/filemap.c	/^asmlinkage long SyS_readahead(long fd, loff_t offset, long count)$/;"	f
SyS_sync_file_range	fs/sync.c	/^asmlinkage long SyS_sync_file_range(long fd, loff_t offset, loff_t nbytes,$/;"	f
SyS_sync_file_range2	fs/sync.c	/^asmlinkage long SyS_sync_file_range2(long fd, long flags,$/;"	f
SyS_truncate64	fs/open.c	/^asmlinkage long SyS_truncate64(long path, loff_t length)$/;"	f
TASKSTATS_CPUMASK_MAXLEN	kernel/taskstats.c	36;"	d	file:
TASK_NICE	kernel/sched.c	90;"	d	file:
TASK_USER_PRIO	kernel/sched.c	98;"	d	file:
TBASE_DEFERRABLE_FLAG	kernel/timer.c	95;"	d	file:
TEXTS_FOR_ZONES	mm/vmstat.c	622;"	d	file:
TEXT_FOR_DMA	mm/vmstat.c	605;"	d	file:
TEXT_FOR_DMA	mm/vmstat.c	607;"	d	file:
TEXT_FOR_DMA32	mm/vmstat.c	611;"	d	file:
TEXT_FOR_DMA32	mm/vmstat.c	613;"	d	file:
TEXT_FOR_HIGHMEM	mm/vmstat.c	617;"	d	file:
TEXT_FOR_HIGHMEM	mm/vmstat.c	619;"	d	file:
THREAD_CLOCK	kernel/posix-cpu-timers.c	1645;"	d	file:
TMPBUFLEN	kernel/sysctl.c	2069;"	d	file:
TMPBUFLEN	kernel/sysctl.c	2167;"	d	file:
TMPBUFLEN	kernel/sysctl.c	2297;"	d	file:
TMPBUFLEN	kernel/sysctl.c	2392;"	d	file:
TOP_OF_ARGS	fs/binfmt_flat.c	875;"	d	file:
TORTURE_FLAG	kernel/rcutorture.c	85;"	d	file:
TRACEPOINT_HASH_BITS	kernel/tracepoint.c	45;"	d	file:
TRACEPOINT_TABLE_SIZE	kernel/tracepoint.c	46;"	d	file:
TRACE_BUG_LOCKED	kernel/rtmutex-debug.c	53;"	d	file:
TRACE_BUG_ON	kernel/rtmutex-debug.c	33;"	d	file:
TRACE_BUG_ON_LOCKED	kernel/rtmutex-debug.c	67;"	d	file:
TRACE_OFF	kernel/rtmutex-debug.c	35;"	d	file:
TRACE_OFF_NOLOCK	kernel/rtmutex-debug.c	45;"	d	file:
TRACE_WARN_ON	kernel/rtmutex-debug.c	32;"	d	file:
TRACE_WARN_ON_LOCKED	kernel/rtmutex-debug.c	59;"	d	file:
TRACK_ALLOC	mm/slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	e	enum:track_item	file:
TRACK_FREE	mm/slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	e	enum:track_item	file:
TVN_BITS	kernel/timer.c	59;"	d	file:
TVN_MASK	kernel/timer.c	63;"	d	file:
TVN_SIZE	kernel/timer.c	61;"	d	file:
TVR_BITS	kernel/timer.c	60;"	d	file:
TVR_MASK	kernel/timer.c	64;"	d	file:
TVR_SIZE	kernel/timer.c	62;"	d	file:
UIDHASH_MASK	kernel/user.c	34;"	d	file:
UNLOADED_LIB	fs/binfmt_flat.c	71;"	d	file:
UNSTABLE_FLAG	mm/ksm.c	149;"	d	file:
UP	mm/slub.c	/^	UP,		\/* Everything works but does not show up in sysfs *\/$/;"	e	enum:__anon10	file:
USEC_TO_HZ_ADJ32	kernel/timeconst.h	30;"	d
USEC_TO_HZ_DEN	kernel/timeconst.h	33;"	d
USEC_TO_HZ_MUL32	kernel/timeconst.h	29;"	d
USEC_TO_HZ_NUM	kernel/timeconst.h	32;"	d
USEC_TO_HZ_SHR32	kernel/timeconst.h	31;"	d
USER_PRIO	kernel/sched.c	97;"	d	file:
Unused_file	mm/swapfile.c	/^static const char Unused_file[] = "Unused swap file entry ";$/;"	v	file:
Unused_offset	mm/swapfile.c	/^static const char Unused_offset[] = "Unused swap offset entry ";$/;"	v	file:
VALID_FLAGS	fs/sync.c	18;"	d	file:
VERBOSE	kernel/lockdep.c	325;"	d	file:
VERBOSE_PRINTK_ERRSTRING	kernel/rcutorture.c	90;"	d	file:
VERBOSE_PRINTK_STRING	kernel/rcutorture.c	88;"	d	file:
VERBOSE_STATUS	fs/binfmt_misc.c	/^	VERBOSE_STATUS = 1 \/* make it zero to save 400 bytes kernel memory *\/$/;"	e	enum:__anon14	file:
VERY_VERBOSE	kernel/lockdep.c	326;"	d	file:
VFAT_IOCTL_READDIR_BOTH32	fs/compat_ioctl.c	1502;"	d	file:
VFAT_IOCTL_READDIR_SHORT32	fs/compat_ioctl.c	1503;"	d	file:
VMALLOC_PAGES	mm/vmalloc.c	659;"	d	file:
VMALLOC_SPACE	mm/vmalloc.c	654;"	d	file:
VMALLOC_SPACE	mm/vmalloc.c	656;"	d	file:
VMAP_BBMAP_BITS	mm/vmalloc.c	665;"	d	file:
VMAP_BBMAP_BITS_MAX	mm/vmalloc.c	661;"	d	file:
VMAP_BBMAP_BITS_MIN	mm/vmalloc.c	662;"	d	file:
VMAP_BLOCK_SIZE	mm/vmalloc.c	669;"	d	file:
VMAP_MAX	mm/vmalloc.c	664;"	d	file:
VMAP_MAX_ALLOC	mm/vmalloc.c	660;"	d	file:
VMAP_MIN	mm/vmalloc.c	663;"	d	file:
VMA_SIZE	mm/prio_tree.c	29;"	d	file:
VM_ACCT	mm/shmem.c	89;"	d	file:
VM_LAZY_FREE	mm/vmalloc.c	249;"	d	file:
VM_LAZY_FREEING	mm/vmalloc.c	250;"	d	file:
VM_VM_AREA	mm/vmalloc.c	251;"	d	file:
WARN_ONCE_HASH_BITS	kernel/sysctl_binary.c	1420;"	d	file:
WARN_ONCE_HASH_SIZE	kernel/sysctl_binary.c	1421;"	d	file:
WEIGHT_IDLEPRIO	kernel/sched.c	1349;"	d	file:
WMULT_CONST	kernel/sched.c	1286;"	d	file:
WMULT_CONST	kernel/sched.c	1288;"	d	file:
WMULT_IDLEPRIO	kernel/sched.c	1350;"	d	file:
WMULT_SHIFT	kernel/sched.c	1291;"	d	file:
WRT_SYSCTL	kernel/sched_fair.c	415;"	d	file:
WRT_SYSCTL	kernel/sched_fair.c	421;"	d	file:
WS_ONSTACK	fs/fs-writeback.c	70;"	d	file:
WS_ONSTACK_B	fs/fs-writeback.c	/^	WS_ONSTACK_B,$/;"	e	enum:__anon19	file:
WS_USED	fs/fs-writeback.c	69;"	d	file:
WS_USED_B	fs/fs-writeback.c	/^	WS_USED_B = 0,$/;"	e	enum:__anon19	file:
XFORM	fs/compat_ioctl.c	913;"	d	file:
ZAP_BLOCK_SIZE	mm/memory.c	978;"	d	file:
ZAP_BLOCK_SIZE	mm/memory.c	981;"	d	file:
ZONELIST_ORDER_DEFAULT	mm/page_alloc.c	2346;"	d	file:
ZONELIST_ORDER_NODE	mm/page_alloc.c	2347;"	d	file:
ZONELIST_ORDER_ZONE	mm/page_alloc.c	2348;"	d	file:
ZONE_RECLAIM_FULL	mm/internal.h	249;"	d
ZONE_RECLAIM_NOSCAN	mm/internal.h	248;"	d
ZONE_RECLAIM_PRIORITY	mm/vmscan.c	2466;"	d	file:
ZONE_RECLAIM_SOME	mm/internal.h	250;"	d
ZONE_RECLAIM_SUCCESS	mm/internal.h	251;"	d
_LINUX_CPUPRI_H	kernel/sched_cpupri.h	2;"	d
_LINUX_LIST_H	include/linux/list.h	2;"	d
_LINUX_PAGEMAP_H	include/linux/pagemap.h	2;"	d
_LINUX_PNODE_H	fs/pnode.h	9;"	d
_MEM	mm/memcontrol.c	259;"	d	file:
_MEMSWAP	mm/memcontrol.c	260;"	d	file:
__ATTR_RW	mm/backing-dev.c	218;"	d	file:
__COMPAT_NFDBITS	fs/compat.c	1569;"	d	file:
__GENERATING_BOUNDS_H	kernel/bounds.c	7;"	d	file:
__KERNEL_RTMUTEX_COMMON_H	kernel/rtmutex_common.h	13;"	d
__LINUX_SPINLOCK_H	include/linux/spinlock.h	2;"	d
__LOCKF	kernel/lockdep_internals.h	/^	__LOCKF(USED)$/;"	e	enum:__anon36
__LOCKF	kernel/lockdep_internals.h	27;"	d
__LOG_BUF_LEN	kernel/printk.c	54;"	d	file:
__MM_INTERNAL_H	mm/internal.h	12;"	d
__OBJECT_POISON	mm/slub.c	172;"	d	file:
__P	kernel/sched_debug.c	398;"	d	file:
__P	kernel/sched_debug.c	478;"	d	file:
__PN	kernel/sched_debug.c	402;"	d	file:
__PN	kernel/sched_debug.c	476;"	d	file:
__SYSFS_ADD_DEFERRED	mm/slub.c	173;"	d	file:
__USAGE	kernel/lockdep.c	453;"	d	file:
____cache_alloc	mm/slab.c	/^static inline void *____cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
____cache_alloc_node	mm/slab.c	/^static inline void *____cache_alloc_node(struct kmem_cache *cachep,$/;"	f	file:
____cache_alloc_node	mm/slab.c	/^static void *____cache_alloc_node(struct kmem_cache *cachep, gfp_t flags,$/;"	f	file:
____cacheline_aligned	kernel/sched.c	/^} nohz ____cacheline_aligned = {$/;"	v	typeref:struct:__anon44	file:
____cacheline_aligned	kernel/softirq.c	/^irq_cpustat_t irq_stat[NR_CPUS] ____cacheline_aligned;$/;"	v
____cacheline_aligned	kernel/timer.c	/^} ____cacheline_aligned;$/;"	v	typeref:struct:tvec_base
____cacheline_aligned	kernel/workqueue.c	/^} ____cacheline_aligned;$/;"	v	typeref:struct:cpu_workqueue_struct
____cacheline_aligned_in_smp	kernel/kprobes.c	/^	spinlock_t lock ____cacheline_aligned_in_smp;$/;"	m	struct:__anon35	file:
____cacheline_aligned_in_smp	mm/memcontrol.c	/^} ____cacheline_aligned_in_smp;$/;"	v	typeref:struct:mem_cgroup_stat_cpu
____cacheline_internodealigned_in_smp	kernel/rcutree.h	/^	u8	signaled ____cacheline_internodealigned_in_smp;$/;"	m	struct:rcu_state
____cacheline_internodealigned_in_smp	kernel/rcutree.h	/^} ____cacheline_internodealigned_in_smp;$/;"	v	typeref:struct:rcu_node
____cacheline_internodealigned_in_smp	mm/sparse.c	/^	____cacheline_internodealigned_in_smp;$/;"	v	typeref:struct:mem_section
____call_usermodehelper	kernel/kmod.c	/^static int ____call_usermodehelper(void *data)$/;"	f	file:
____pagevec_lru_add	mm/swap.c	/^EXPORT_SYMBOL(____pagevec_lru_add);$/;"	v
____pagevec_lru_add	mm/swap.c	/^void ____pagevec_lru_add(struct pagevec *pvec, enum lru_list lru)$/;"	f
___alloc_bootmem	mm/bootmem.c	/^static void * __init ___alloc_bootmem(unsigned long size, unsigned long align,$/;"	f	file:
___alloc_bootmem_node	mm/bootmem.c	/^static void * __init ___alloc_bootmem_node(bootmem_data_t *bdata,$/;"	f	file:
___alloc_bootmem_nopanic	mm/bootmem.c	/^static void * __init ___alloc_bootmem_nopanic(unsigned long size,$/;"	f	file:
__absent_pages_in_range	mm/page_alloc.c	/^unsigned long __meminit __absent_pages_in_range(int nid,$/;"	f
__account_scheduler_latency	kernel/latencytop.c	/^__account_scheduler_latency(struct task_struct *tsk, int usecs, int inter)$/;"	f
__acquires	kernel/rcutorture.c	/^static int rcu_bh_torture_read_lock(void) __acquires(RCU_BH)$/;"	f
__acquires	kernel/rcutorture.c	/^static int rcu_torture_read_lock(void) __acquires(RCU)$/;"	f
__acquires	kernel/resource.c	/^	__acquires(resource_lock)$/;"	f
__add_pages	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__add_pages);$/;"	v
__add_pages	mm/memory_hotplug.c	/^int __ref __add_pages(int nid, struct zone *zone, unsigned long phys_start_pfn,$/;"	f
__add_preferred_console	kernel/printk.c	/^static int __add_preferred_console(char *name, int idx, char *options,$/;"	f	file:
__add_section	mm/memory_hotplug.c	/^static int __meminit __add_section(int nid, struct zone *zone,$/;"	f	file:
__add_to_swap_cache	mm/swap_state.c	/^static int __add_to_swap_cache(struct page *page, swp_entry_t entry)$/;"	f	file:
__add_zone	mm/memory_hotplug.c	/^static int __meminit __add_zone(struct zone *zone, unsigned long phys_start_pfn)$/;"	f	file:
__addr_to_pcpu_ptr	mm/percpu.c	82;"	d	file:
__aio_get_req	fs/aio.c	/^static struct kiocb *__aio_get_req(struct kioctx *ctx)$/;"	f	file:
__aio_put_req	fs/aio.c	/^static int __aio_put_req(struct kioctx *ctx, struct kiocb *req)$/;"	f	file:
__aio_run_iocbs	fs/aio.c	/^static int __aio_run_iocbs(struct kioctx *ctx)$/;"	f	file:
__alloc_bootmem	mm/bootmem.c	/^void * __init __alloc_bootmem(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem_low	mm/bootmem.c	/^void * __init __alloc_bootmem_low(unsigned long size, unsigned long align,$/;"	f
__alloc_bootmem_low_node	mm/bootmem.c	/^void * __init __alloc_bootmem_low_node(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node	mm/bootmem.c	/^void * __init __alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_node_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_node_nopanic(pg_data_t *pgdat, unsigned long size,$/;"	f
__alloc_bootmem_nopanic	mm/bootmem.c	/^void * __init __alloc_bootmem_nopanic(unsigned long size, unsigned long align,$/;"	f
__alloc_pages_direct_reclaim	mm/page_alloc.c	/^__alloc_pages_direct_reclaim(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_high_priority	mm/page_alloc.c	/^__alloc_pages_high_priority(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_may_oom	mm/page_alloc.c	/^__alloc_pages_may_oom(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_nodemask	mm/page_alloc.c	/^EXPORT_SYMBOL(__alloc_pages_nodemask);$/;"	v
__alloc_pages_nodemask	mm/page_alloc.c	/^__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,$/;"	f
__alloc_pages_slowpath	mm/page_alloc.c	/^__alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_percpu	mm/percpu.c	/^EXPORT_SYMBOL_GPL(__alloc_percpu);$/;"	v
__alloc_percpu	mm/percpu.c	/^void *__alloc_percpu(size_t size, size_t align)$/;"	f
__alloc_reserved_percpu	mm/percpu.c	/^void *__alloc_reserved_percpu(size_t size, size_t align)$/;"	f
__anon_vma_link	mm/rmap.c	/^void __anon_vma_link(struct vm_area_struct *vma)$/;"	f
__anon_vma_merge	mm/rmap.c	/^void __anon_vma_merge(struct vm_area_struct *vma, struct vm_area_struct *next)$/;"	f
__async_schedule	kernel/async.c	/^static async_cookie_t __async_schedule(async_func_ptr *ptr, void *data, struct list_head *running)$/;"	f	file:
__atomic_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__atomic_notifier_call_chain);$/;"	v
__atomic_notifier_call_chain	kernel/notifier.c	/^int __kprobes __atomic_notifier_call_chain(struct atomic_notifier_head *nh,$/;"	f
__audit_fd_pair	kernel/auditsc.c	/^void __audit_fd_pair(int fd1, int fd2)$/;"	f
__audit_getname	kernel/auditsc.c	/^void __audit_getname(const char *name)$/;"	f
__audit_inode	kernel/auditsc.c	/^void __audit_inode(const char *name, const struct dentry *dentry)$/;"	f
__audit_inode_child	kernel/auditsc.c	/^EXPORT_SYMBOL_GPL(__audit_inode_child);$/;"	v
__audit_inode_child	kernel/auditsc.c	/^void __audit_inode_child(const char *dname, const struct dentry *dentry,$/;"	f
__audit_ipc_obj	kernel/auditsc.c	/^void __audit_ipc_obj(struct kern_ipc_perm *ipcp)$/;"	f
__audit_ipc_set_perm	kernel/auditsc.c	/^void __audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, mode_t mode)$/;"	f
__audit_log_bprm_fcaps	kernel/auditsc.c	/^int __audit_log_bprm_fcaps(struct linux_binprm *bprm,$/;"	f
__audit_log_capset	kernel/auditsc.c	/^void __audit_log_capset(pid_t pid,$/;"	f
__audit_mq_getsetattr	kernel/auditsc.c	/^void __audit_mq_getsetattr(mqd_t mqdes, struct mq_attr *mqstat)$/;"	f
__audit_mq_notify	kernel/auditsc.c	/^void __audit_mq_notify(mqd_t mqdes, const struct sigevent *notification)$/;"	f
__audit_mq_open	kernel/auditsc.c	/^void __audit_mq_open(int oflag, mode_t mode, struct mq_attr *attr)$/;"	f
__audit_mq_sendrecv	kernel/auditsc.c	/^void __audit_mq_sendrecv(mqd_t mqdes, size_t msg_len, unsigned int msg_prio,$/;"	f
__audit_ptrace	kernel/auditsc.c	/^void __audit_ptrace(struct task_struct *t)$/;"	f
__audit_signal_info	kernel/auditsc.c	/^int __audit_signal_info(int sig, struct task_struct *t)$/;"	f
__bd_forget	fs/block_dev.c	/^static inline void __bd_forget(struct inode *inode)$/;"	f	file:
__bdi_writeout_inc	mm/page-writeback.c	/^static inline void __bdi_writeout_inc(struct backing_dev_info *bdi)$/;"	f	file:
__bforget	fs/buffer.c	/^EXPORT_SYMBOL(__bforget);$/;"	v
__bforget	fs/buffer.c	/^void __bforget(struct buffer_head *bh)$/;"	f
__bfs	kernel/lockdep.c	/^static int __bfs(struct lock_list *source_entry,$/;"	f	file:
__bfs_backwards	kernel/lockdep.c	/^static inline int __bfs_backwards(struct lock_list *src_entry,$/;"	f	file:
__bfs_forwards	kernel/lockdep.c	/^static inline int __bfs_forwards(struct lock_list *src_entry,$/;"	f	file:
__bio_add_page	fs/bio.c	/^static int __bio_add_page(struct request_queue *q, struct bio *bio, struct page$/;"	f	file:
__bio_clone	fs/bio.c	/^EXPORT_SYMBOL(__bio_clone);$/;"	v
__bio_clone	fs/bio.c	/^void __bio_clone(struct bio *bio, struct bio *bio_src)$/;"	f
__bio_copy_iov	fs/bio.c	/^static int __bio_copy_iov(struct bio *bio, struct bio_vec *iovecs,$/;"	f	file:
__bio_map_kern	fs/bio.c	/^static struct bio *__bio_map_kern(struct request_queue *q, void *data,$/;"	f	file:
__bio_map_user_iov	fs/bio.c	/^static struct bio *__bio_map_user_iov(struct request_queue *q,$/;"	f	file:
__bio_unmap_user	fs/bio.c	/^static void __bio_unmap_user(struct bio *bio)$/;"	f	file:
__blk_queue_bounce	mm/bounce.c	/^static void __blk_queue_bounce(struct request_queue *q, struct bio **bio_orig,$/;"	f	file:
__blkdev_get	fs/block_dev.c	/^static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part)$/;"	f	file:
__blkdev_put	fs/block_dev.c	/^static int __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part)$/;"	f	file:
__block_commit_write	fs/buffer.c	/^static int __block_commit_write(struct inode *inode, struct page *page,$/;"	f	file:
__block_prepare_write	fs/buffer.c	/^static int __block_prepare_write(struct inode *inode, struct page *page,$/;"	f	file:
__block_write_full_page	fs/buffer.c	/^static int __block_write_full_page(struct inode *inode, struct page *page,$/;"	f	file:
__blockdev_direct_IO	fs/direct-io.c	/^EXPORT_SYMBOL(__blockdev_direct_IO);$/;"	v
__blockdev_direct_IO	fs/direct-io.c	/^__blockdev_direct_IO(int rw, struct kiocb *iocb, struct inode *inode,$/;"	f
__blocking_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__blocking_notifier_call_chain);$/;"	v
__blocking_notifier_call_chain	kernel/notifier.c	/^int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,$/;"	f
__bounce_end_io_read	mm/bounce.c	/^static void __bounce_end_io_read(struct bio *bio, mempool_t *pool, int err)$/;"	f	file:
__bprm_mm_init	fs/exec.c	/^static int __bprm_mm_init(struct linux_binprm *bprm)$/;"	f	file:
__bread	fs/buffer.c	/^EXPORT_SYMBOL(__bread);$/;"	v
__bread	fs/buffer.c	/^__bread(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__bread_slow	fs/buffer.c	/^static struct buffer_head *__bread_slow(struct buffer_head *bh)$/;"	f	file:
__breadahead	fs/buffer.c	/^EXPORT_SYMBOL(__breadahead);$/;"	v
__breadahead	fs/buffer.c	/^void __breadahead(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__break_lease	fs/locks.c	/^EXPORT_SYMBOL(__break_lease);$/;"	v
__break_lease	fs/locks.c	/^int __break_lease(struct inode *inode, unsigned int mode)$/;"	f
__brelse	fs/buffer.c	/^EXPORT_SYMBOL(__brelse);$/;"	v
__brelse	fs/buffer.c	/^void __brelse(struct buffer_head * buf)$/;"	f
__build_all_zonelists	mm/page_alloc.c	/^static int __build_all_zonelists(void *dummy)$/;"	f	file:
__build_cpu_sched_domain	kernel/sched.c	/^static struct sched_domain *__build_cpu_sched_domain(struct s_data *d,$/;"	f	file:
__build_mc_sched_domain	kernel/sched.c	/^static struct sched_domain *__build_mc_sched_domain(struct s_data *d,$/;"	f	file:
__build_numa_sched_domains	kernel/sched.c	/^static struct sched_domain *__build_numa_sched_domains(struct s_data *d,$/;"	f	file:
__build_sched_domains	kernel/sched.c	/^static int __build_sched_domains(const struct cpumask *cpu_map,$/;"	f	file:
__build_smt_sched_domain	kernel/sched.c	/^static struct sched_domain *__build_smt_sched_domain(struct s_data *d,$/;"	f	file:
__cache_alloc	mm/slab.c	/^__cache_alloc(struct kmem_cache *cachep, gfp_t flags, void *caller)$/;"	f	file:
__cache_alloc_node	mm/slab.c	/^__cache_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid,$/;"	f	file:
__cache_free	mm/slab.c	/^static inline void __cache_free(struct kmem_cache *cachep, void *objp)$/;"	f	file:
__cache_shrink	mm/slab.c	/^static int __cache_shrink(struct kmem_cache *cachep)$/;"	f	file:
__cacheline_aligned	mm/slub.c	/^struct kmem_cache kmalloc_caches[SLUB_PAGE_SHIFT] __cacheline_aligned;$/;"	v	typeref:struct:kmalloc_caches
__cacheline_aligned	mm/sparse.c	/^static u16 section_to_node_table[NR_MEM_SECTIONS] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned	mm/sparse.c	/^static u8 section_to_node_table[NR_MEM_SECTIONS] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned_in_smp	fs/file_table.c	/^static struct percpu_counter nr_files __cacheline_aligned_in_smp;$/;"	v	typeref:struct:nr_files	file:
__cacheline_aligned_in_smp	kernel/smp.c	/^} call_function __cacheline_aligned_in_smp =$/;"	v	typeref:struct:__anon45	file:
__cacheline_aligned_in_smp	kernel/softirq.c	/^static struct softirq_action softirq_vec[NR_SOFTIRQS] __cacheline_aligned_in_smp;$/;"	v	typeref:struct:softirq_vec	file:
__cacheline_aligned_in_smp	kernel/timer.c	/^u64 jiffies_64 __cacheline_aligned_in_smp = INITIAL_JIFFIES;$/;"	v
__call_console_drivers	kernel/printk.c	/^static void __call_console_drivers(unsigned start, unsigned end)$/;"	f	file:
__call_rcu	kernel/rcutiny.c	/^static void __call_rcu(struct rcu_head *head,$/;"	f	file:
__call_rcu	kernel/rcutree.c	/^__call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu),$/;"	f	file:
__call_usermodehelper	kernel/kmod.c	/^static void __call_usermodehelper(struct work_struct *work)$/;"	f	file:
__cancel_work_timer	kernel/workqueue.c	/^static int __cancel_work_timer(struct work_struct *work,$/;"	f	file:
__cap_empty_set	kernel/capability.c	/^EXPORT_SYMBOL(__cap_empty_set);$/;"	v
__cap_empty_set	kernel/capability.c	/^const kernel_cap_t __cap_empty_set = CAP_EMPTY_SET;$/;"	v
__cap_full_set	kernel/capability.c	/^EXPORT_SYMBOL(__cap_full_set);$/;"	v
__cap_full_set	kernel/capability.c	/^const kernel_cap_t __cap_full_set = CAP_FULL_SET;$/;"	v
__cap_init_eff_set	kernel/capability.c	/^EXPORT_SYMBOL(__cap_init_eff_set);$/;"	v
__cap_init_eff_set	kernel/capability.c	/^const kernel_cap_t __cap_init_eff_set = CAP_INIT_EFF_SET;$/;"	v
__chainhashfn	kernel/lockdep.c	293;"	d	file:
__change_pid	kernel/pid.c	/^static void __change_pid(struct task_struct *task, enum pid_type type,$/;"	f	file:
__check_region	kernel/resource.c	/^EXPORT_SYMBOL(__check_region);$/;"	v
__check_region	kernel/resource.c	/^int __check_region(struct resource *parent, resource_size_t start,$/;"	f
__classhashfn	kernel/lockdep.c	282;"	d	file:
__cleanup_sighand	kernel/fork.c	/^void __cleanup_sighand(struct sighand_struct *sighand)$/;"	f
__cleanup_signal	kernel/fork.c	/^void __cleanup_signal(struct signal_struct *sig)$/;"	f
__clear_buddies	kernel/sched_fair.c	/^static void __clear_buddies(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
__clear_page_buffers	fs/buffer.c	/^__clear_page_buffers(struct page *page)$/;"	f	file:
__clear_page_locked	include/linux/pagemap.h	/^static inline void __clear_page_locked(struct page *page)$/;"	f
__clear_page_mlock	mm/mlock.c	/^void __clear_page_mlock(struct page *page)$/;"	f
__cond_resched	kernel/sched.c	/^static void __cond_resched(void)$/;"	f	file:
__cond_resched_lock	kernel/sched.c	/^EXPORT_SYMBOL(__cond_resched_lock);$/;"	v
__cond_resched_lock	kernel/sched.c	/^int __cond_resched_lock(spinlock_t *lock)$/;"	f
__cond_resched_softirq	kernel/sched.c	/^EXPORT_SYMBOL(__cond_resched_softirq);$/;"	v
__cond_resched_softirq	kernel/sched.c	/^int __sched __cond_resched_softirq(void)$/;"	f
__cpuset_memory_pressure_bump	kernel/cpuset.c	/^void __cpuset_memory_pressure_bump(void)$/;"	f
__cpuset_node_allowed_hardwall	kernel/cpuset.c	/^int __cpuset_node_allowed_hardwall(int node, gfp_t gfp_mask)$/;"	f
__cpuset_node_allowed_softwall	kernel/cpuset.c	/^int __cpuset_node_allowed_softwall(int node, gfp_t gfp_mask)$/;"	f
__cq_dequeue	kernel/lockdep.c	/^static inline int __cq_dequeue(struct circular_queue *cq, unsigned long *elem)$/;"	f	file:
__cq_empty	kernel/lockdep.c	/^static inline int __cq_empty(struct circular_queue *cq)$/;"	f	file:
__cq_enqueue	kernel/lockdep.c	/^static inline int __cq_enqueue(struct circular_queue *cq, unsigned long elem)$/;"	f	file:
__cq_full	kernel/lockdep.c	/^static inline int __cq_full(struct circular_queue *cq)$/;"	f	file:
__cq_get_elem_count	kernel/lockdep.c	/^static inline unsigned int  __cq_get_elem_count(struct circular_queue *cq)$/;"	f	file:
__cq_init	kernel/lockdep.c	/^static inline void __cq_init(struct circular_queue *cq)$/;"	f	file:
__create_workqueue_key	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(__create_workqueue_key);$/;"	v
__create_workqueue_key	kernel/workqueue.c	/^struct workqueue_struct *__create_workqueue_key(const char *name,$/;"	f
__css_put	kernel/cgroup.c	/^void __css_put(struct cgroup_subsys_state *css)$/;"	f
__d_cft	kernel/cgroup.c	/^static inline struct cftype *__d_cft(struct dentry *dentry)$/;"	f	file:
__d_cgrp	kernel/cgroup.c	/^static inline struct cgroup *__d_cgrp(struct dentry *dentry)$/;"	f	file:
__d_find_alias	fs/dcache.c	/^static struct dentry * __d_find_alias(struct inode *inode, int want_discon)$/;"	f	file:
__d_free	fs/dcache.c	/^static void __d_free(struct dentry *dentry)$/;"	f	file:
__d_instantiate	fs/dcache.c	/^static void __d_instantiate(struct dentry *dentry, struct inode *inode)$/;"	f	file:
__d_instantiate_unique	fs/dcache.c	/^static struct dentry *__d_instantiate_unique(struct dentry *entry,$/;"	f	file:
__d_lookup	fs/dcache.c	/^struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)$/;"	f
__d_materialise_dentry	fs/dcache.c	/^static void __d_materialise_dentry(struct dentry *dentry, struct dentry *anon)$/;"	f	file:
__d_path	fs/dcache.c	/^char *__d_path(const struct path *path, struct path *root,$/;"	f
__d_rehash	fs/dcache.c	/^static void __d_rehash(struct dentry * entry, struct hlist_head *list)$/;"	f	file:
__debug_show_held_locks	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(__debug_show_held_locks);$/;"	v
__debug_show_held_locks	kernel/lockdep.c	/^void __debug_show_held_locks(struct task_struct *task)$/;"	f
__dec_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(__dec_zone_page_state);$/;"	v
__dec_zone_page_state	mm/vmstat.c	/^void __dec_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
__dec_zone_state	mm/vmstat.c	/^void __dec_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
__delayacct_add_tsk	kernel/delayacct.c	/^int __delayacct_add_tsk(struct taskstats *d, struct task_struct *tsk)$/;"	f
__delayacct_blkio_end	kernel/delayacct.c	/^void __delayacct_blkio_end(void)$/;"	f
__delayacct_blkio_start	kernel/delayacct.c	/^void __delayacct_blkio_start(void)$/;"	f
__delayacct_blkio_ticks	kernel/delayacct.c	/^__u64 __delayacct_blkio_ticks(struct task_struct *tsk)$/;"	f
__delayacct_freepages_end	kernel/delayacct.c	/^void __delayacct_freepages_end(void)$/;"	f
__delayacct_freepages_start	kernel/delayacct.c	/^void __delayacct_freepages_start(void)$/;"	f
__delayacct_tsk_init	kernel/delayacct.c	/^void __delayacct_tsk_init(struct task_struct *tsk)$/;"	f
__delete_from_swap_cache	mm/swap_state.c	/^void __delete_from_swap_cache(struct page *page)$/;"	f
__delete_object	mm/kmemleak.c	/^static void __delete_object(struct kmemleak_object *object)$/;"	f	file:
__dentry_open	fs/open.c	/^static struct file *__dentry_open(struct dentry *dentry, struct vfsmount *mnt,$/;"	f	file:
__dequeue_entity	kernel/sched_fair.c	/^static void __dequeue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
__dequeue_rt_entity	kernel/sched_rt.c	/^static void __dequeue_rt_entity(struct sched_rt_entity *rt_se)$/;"	f	file:
__dequeue_signal	kernel/signal.c	/^static int __dequeue_signal(struct sigpending *pending, sigset_t *mask,$/;"	f	file:
__destroy_inode	fs/inode.c	/^EXPORT_SYMBOL(__destroy_inode);$/;"	v
__destroy_inode	fs/inode.c	/^void __destroy_inode(struct inode *inode)$/;"	f
__devm_release_region	kernel/resource.c	/^EXPORT_SYMBOL(__devm_release_region);$/;"	v
__devm_release_region	kernel/resource.c	/^void __devm_release_region(struct device *dev, struct resource *parent,$/;"	f
__devm_request_region	kernel/resource.c	/^EXPORT_SYMBOL(__devm_request_region);$/;"	v
__devm_request_region	kernel/resource.c	/^struct resource * __devm_request_region(struct device *dev,$/;"	f
__dget_locked	fs/dcache.c	/^static inline struct dentry * __dget_locked(struct dentry *dentry)$/;"	f	file:
__disable_runtime	kernel/sched_rt.c	/^static void __disable_runtime(struct rq *rq)$/;"	f	file:
__do_cache_alloc	mm/slab.c	/^__do_cache_alloc(struct kmem_cache *cache, gfp_t flags)$/;"	f	file:
__do_cache_alloc	mm/slab.c	/^__do_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
__do_fault	mm/memory.c	/^static int __do_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__do_follow_link	fs/namei.c	/^static __always_inline int __do_follow_link(struct path *path, struct nameidata *nd)$/;"	f	file:
__do_kmalloc	mm/slab.c	/^static __always_inline void *__do_kmalloc(size_t size, gfp_t flags,$/;"	f	file:
__do_kmalloc_node	mm/slab.c	/^__do_kmalloc_node(size_t size, gfp_t flags, int node, void *caller)$/;"	f	file:
__do_page_cache_readahead	mm/readahead.c	/^__do_page_cache_readahead(struct address_space *mapping, struct file *filp,$/;"	f	file:
__do_proc_dointvec	kernel/sysctl.c	/^static int __do_proc_dointvec(void *tbl_data, struct ctl_table *table,$/;"	f	file:
__do_proc_doulongvec_minmax	kernel/sysctl.c	/^static int __do_proc_doulongvec_minmax(void *data, struct ctl_table *table, int write,$/;"	f	file:
__do_softirq	kernel/softirq.c	/^asmlinkage void __do_softirq(void)$/;"	f
__do_uncharge	mm/memcontrol.c	/^__do_uncharge(struct mem_cgroup *mem, const enum charge_type ctype)$/;"	f	file:
__down	kernel/semaphore.c	/^static noinline void __sched __down(struct semaphore *sem)$/;"	f	file:
__down_common	kernel/semaphore.c	/^static inline int __sched __down_common(struct semaphore *sem, long state,$/;"	f	file:
__down_interruptible	kernel/semaphore.c	/^static noinline int __sched __down_interruptible(struct semaphore *sem)$/;"	f	file:
__down_killable	kernel/semaphore.c	/^static noinline int __sched __down_killable(struct semaphore *sem)$/;"	f	file:
__down_read	lib/rwsem-spinlock.c	/^void __sched __down_read(struct rw_semaphore *sem)$/;"	f
__down_read_trylock	lib/rwsem-spinlock.c	/^int __down_read_trylock(struct rw_semaphore *sem)$/;"	f
__down_timeout	kernel/semaphore.c	/^static noinline int __sched __down_timeout(struct semaphore *sem, long jiffies)$/;"	f	file:
__down_write	lib/rwsem-spinlock.c	/^void __sched __down_write(struct rw_semaphore *sem)$/;"	f
__down_write_nested	lib/rwsem-spinlock.c	/^void __sched __down_write_nested(struct rw_semaphore *sem, int subclass)$/;"	f
__down_write_trylock	lib/rwsem-spinlock.c	/^int __down_write_trylock(struct rw_semaphore *sem)$/;"	f
__downgrade_write	lib/rwsem-spinlock.c	/^void __downgrade_write(struct rw_semaphore *sem)$/;"	f
__drain_alien_cache	mm/slab.c	/^static void __drain_alien_cache(struct kmem_cache *cachep,$/;"	f	file:
__early_pfn_to_nid	mm/page_alloc.c	/^int __meminit __early_pfn_to_nid(unsigned long pfn)$/;"	f
__earlyonly_bootmem_alloc	mm/sparse-vmemmap.c	/^static void * __init_refok __earlyonly_bootmem_alloc(int node,$/;"	f	file:
__enable_runtime	kernel/sched_rt.c	/^static void __enable_runtime(struct rq *rq)$/;"	f	file:
__end_buffer_read_notouch	fs/buffer.c	/^static void __end_buffer_read_notouch(struct buffer_head *bh, int uptodate)$/;"	f	file:
__enqueue_entity	kernel/sched_fair.c	/^static void __enqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
__enqueue_rt_entity	kernel/sched_rt.c	/^static void __enqueue_rt_entity(struct sched_rt_entity *rt_se)$/;"	f	file:
__estimate_accuracy	fs/select.c	/^static long __estimate_accuracy(struct timespec *tv)$/;"	f	file:
__exit_signal	kernel/exit.c	/^static void __exit_signal(struct task_struct *tsk)$/;"	f	file:
__f_setown	fs/fcntl.c	/^EXPORT_SYMBOL(__f_setown);$/;"	v
__f_setown	fs/fcntl.c	/^int __f_setown(struct file *filp, struct pid *pid, enum pid_type type,$/;"	f
__filemap_fdatawrite	mm/filemap.c	/^static inline int __filemap_fdatawrite(struct address_space *mapping,$/;"	f	file:
__filemap_fdatawrite_range	mm/filemap.c	/^int __filemap_fdatawrite_range(struct address_space *mapping, loff_t start,$/;"	f
__find_combined_index	mm/page_alloc.c	/^__find_combined_index(unsigned long page_idx, unsigned int order)$/;"	f	file:
__find_general_cachep	mm/slab.c	/^static inline struct kmem_cache *__find_general_cachep(size_t size,$/;"	f	file:
__find_get_block	fs/buffer.c	/^EXPORT_SYMBOL(__find_get_block);$/;"	v
__find_get_block	fs/buffer.c	/^__find_get_block(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__find_get_block_slow	fs/buffer.c	/^__find_get_block_slow(struct block_device *bdev, sector_t block)$/;"	f	file:
__find_vmap_area	mm/vmalloc.c	/^static struct vmap_area *__find_vmap_area(unsigned long addr)$/;"	f	file:
__first_valid_page	mm/page_isolation.c	/^__first_valid_page(unsigned long pfn, unsigned long nr_pages)$/;"	f	file:
__flush_cpu_slab	mm/slub.c	/^static inline void __flush_cpu_slab(struct kmem_cache *s, int cpu)$/;"	f	file:
__flush_itimer_signals	kernel/signal.c	/^static void __flush_itimer_signals(struct sigpending *pending)$/;"	f	file:
__flush_signals	kernel/signal.c	/^void __flush_signals(struct task_struct *t)$/;"	f
__follow_mount	fs/namei.c	/^static int __follow_mount(struct path *path)$/;"	f	file:
__fput	fs/file_table.c	/^void __fput(struct file *file)$/;"	f
__free	mm/bootmem.c	/^static void __init __free(bootmem_data_t *bdata,$/;"	f	file:
__free_css_id_cb	kernel/cgroup.c	/^static void __free_css_id_cb(struct rcu_head *head)$/;"	f	file:
__free_domain_allocs	kernel/sched.c	/^static void __free_domain_allocs(struct s_data *d, enum s_alloc what,$/;"	f	file:
__free_one_page	mm/page_alloc.c	/^static inline void __free_one_page(struct page *page,$/;"	f	file:
__free_page_cgroup	mm/page_cgroup.c	/^void __free_page_cgroup(unsigned long pfn)$/;"	f
__free_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(__free_pages);$/;"	v
__free_pages	mm/page_alloc.c	/^void __free_pages(struct page *page, unsigned int order)$/;"	f
__free_pages_bootmem	mm/page_alloc.c	/^void __meminit __free_pages_bootmem(struct page *page, unsigned int order)$/;"	f
__free_pages_ok	mm/page_alloc.c	/^static void __free_pages_ok(struct page *page, unsigned int order)$/;"	f	file:
__free_pipe_info	fs/pipe.c	/^void __free_pipe_info(struct pipe_inode_info *pipe)$/;"	f
__free_slab	mm/slub.c	/^static void __free_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
__free_vmap_area	mm/vmalloc.c	/^static void __free_vmap_area(struct vmap_area *va)$/;"	f	file:
__fsnotify_inode_delete	fs/notify/fsnotify.c	/^EXPORT_SYMBOL_GPL(__fsnotify_inode_delete);$/;"	v
__fsnotify_inode_delete	fs/notify/fsnotify.c	/^void __fsnotify_inode_delete(struct inode *inode)$/;"	f
__fsnotify_parent	fs/notify/fsnotify.c	/^EXPORT_SYMBOL_GPL(__fsnotify_parent);$/;"	v
__fsnotify_parent	fs/notify/fsnotify.c	/^void __fsnotify_parent(struct dentry *dentry, __u32 mask)$/;"	f
__fsnotify_update_child_dentry_flags	fs/notify/fsnotify.c	/^void __fsnotify_update_child_dentry_flags(struct inode *inode)$/;"	f
__generic_block_fiemap	fs/ioctl.c	/^EXPORT_SYMBOL(__generic_block_fiemap);$/;"	v
__generic_block_fiemap	fs/ioctl.c	/^int __generic_block_fiemap(struct inode *inode,$/;"	f
__generic_file_aio_write	mm/filemap.c	/^EXPORT_SYMBOL(__generic_file_aio_write);$/;"	v
__generic_file_aio_write	mm/filemap.c	/^ssize_t __generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
__generic_file_splice_read	fs/splice.c	/^__generic_file_splice_read(struct file *in, loff_t *ppos,$/;"	f	file:
__get_file_write_access	fs/open.c	/^static inline int __get_file_write_access(struct inode *inode,$/;"	f	file:
__get_free_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(__get_free_pages);$/;"	v
__get_free_pages	mm/page_alloc.c	/^unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)$/;"	f
__get_fs_type	fs/filesystems.c	/^static struct file_system_type *__get_fs_type(const char *name, int len)$/;"	f	file:
__get_insn_slot	kernel/kprobes.c	/^static kprobe_opcode_t __kprobes *__get_insn_slot(void)$/;"	f	file:
__get_key_name	kernel/lockdep.c	/^const char * __get_key_name(struct lockdep_subclass_key *key, char *str)$/;"	f
__get_user_pages	mm/memory.c	/^int __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
__get_user_pages	mm/nommu.c	/^int __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
__get_valid_kprobe	kernel/kprobes.c	/^static struct kprobe * __kprobes __get_valid_kprobe(struct kprobe *p)$/;"	f	file:
__get_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(__get_vm_area);$/;"	v
__get_vm_area	mm/vmalloc.c	/^struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,$/;"	f
__get_vm_area_caller	mm/vmalloc.c	/^struct vm_struct *__get_vm_area_caller(unsigned long size, unsigned long flags,$/;"	f
__get_vm_area_node	mm/vmalloc.c	/^static struct vm_struct *__get_vm_area_node(unsigned long size,$/;"	f	file:
__getblk	fs/buffer.c	/^EXPORT_SYMBOL(__getblk);$/;"	v
__getblk	fs/buffer.c	/^__getblk(struct block_device *bdev, sector_t block, unsigned size)$/;"	f
__getblk_slow	fs/buffer.c	/^__getblk_slow(struct block_device *bdev, sector_t block, int size)$/;"	f	file:
__group_send_sig_info	kernel/signal.c	/^__group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)$/;"	f
__hlist_del	include/linux/list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__hrtick_start	kernel/sched.c	/^static void __hrtick_start(void *arg)$/;"	f	file:
__hrtimer_init	kernel/hrtimer.c	/^static void __hrtimer_init(struct hrtimer *timer, clockid_t clock_id,$/;"	f	file:
__hrtimer_peek_ahead_timers	kernel/hrtimer.c	/^static inline void __hrtimer_peek_ahead_timers(void) { }$/;"	f	file:
__hrtimer_peek_ahead_timers	kernel/hrtimer.c	/^static void __hrtimer_peek_ahead_timers(void)$/;"	f	file:
__hrtimer_start_range_ns	kernel/hrtimer.c	/^int __hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,$/;"	f
__hrtimer_tasklet_trampoline	kernel/softirq.c	/^static enum hrtimer_restart __hrtimer_tasklet_trampoline(struct hrtimer *timer)$/;"	f	file:
__iget	fs/inode.c	/^void __iget(struct inode *inode)$/;"	f
__inc_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(__inc_zone_page_state);$/;"	v
__inc_zone_page_state	mm/vmstat.c	/^void __inc_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
__inc_zone_state	mm/vmstat.c	/^void __inc_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
__init_page_cgroup	mm/page_cgroup.c	/^__init_page_cgroup(struct page_cgroup *pc, unsigned long pfn)$/;"	f	file:
__init_rwsem	lib/rwsem-spinlock.c	/^EXPORT_SYMBOL(__init_rwsem);$/;"	v
__init_rwsem	lib/rwsem-spinlock.c	/^void __init_rwsem(struct rw_semaphore *sem, const char *name,$/;"	f
__init_timer	kernel/timer.c	/^static void __init_timer(struct timer_list *timer,$/;"	f	file:
__init_waitqueue_head	kernel/wait.c	/^EXPORT_SYMBOL(__init_waitqueue_head);$/;"	v
__init_waitqueue_head	kernel/wait.c	/^void __init_waitqueue_head(wait_queue_head_t *q, struct lock_class_key *key)$/;"	f
__init_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(__init_work);$/;"	v
__init_work	kernel/workqueue.c	/^void __init_work(struct work_struct *work, int onstack)$/;"	f
__initdata	mm/bootmem.c	/^bootmem_data_t bootmem_node_data[MAX_NUMNODES] __initdata;$/;"	v
__initdata	mm/bootmem.c	/^static struct list_head bdata_list __initdata = LIST_HEAD_INIT(bdata_list);$/;"	v	typeref:struct:bdata_list	file:
__initdata	mm/kmemleak.c	/^	early_log[CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE] __initdata;$/;"	v	typeref:struct:early_log	file:
__initdata	mm/kmemleak.c	/^static int crt_early_log __initdata;$/;"	v	file:
__initdata	mm/memcontrol.c	/^static int really_do_swap_account __initdata = 1; \/* for remember boot option*\/$/;"	v	file:
__initdata	mm/percpu.c	/^const char *pcpu_fc_names[PCPU_FC_NR] __initdata = {$/;"	v
__initdata	mm/percpu.c	/^enum pcpu_fc pcpu_chosen_fc __initdata = PCPU_FC_AUTO;$/;"	v	typeref:enum:pcpu_chosen_fc
__initdata	mm/slab.c	/^static struct arraycache_init initarray_cache __initdata =$/;"	v	typeref:struct:initarray_cache	file:
__inode_add_bytes	fs/stat.c	/^void __inode_add_bytes(struct inode *inode, loff_t bytes)$/;"	f
__inode_add_to_lists	fs/inode.c	/^__inode_add_to_lists(struct super_block *sb, struct hlist_head *head,$/;"	f	file:
__insert_inode_hash	fs/inode.c	/^EXPORT_SYMBOL(__insert_inode_hash);$/;"	v
__insert_inode_hash	fs/inode.c	/^void __insert_inode_hash(struct inode *inode, unsigned long hashval)$/;"	f
__insert_resource	kernel/resource.c	/^static struct resource * __insert_resource(struct resource *parent, struct resource *new)$/;"	f	file:
__insert_vm_struct	mm/mmap.c	/^static void __insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
__insert_vmap_area	mm/vmalloc.c	/^static void __insert_vmap_area(struct vmap_area *va)$/;"	f	file:
__invalid_creds	kernel/cred.c	/^EXPORT_SYMBOL(__invalid_creds);$/;"	v
__invalid_creds	kernel/cred.c	/^void __invalid_creds(const struct cred *cred, const char *file, unsigned line)$/;"	f
__invalidate_device	fs/block_dev.c	/^EXPORT_SYMBOL(__invalidate_device);$/;"	v
__invalidate_device	fs/block_dev.c	/^int __invalidate_device(struct block_device *bdev)$/;"	f
__iovec_copy_from_user_inatomic	mm/filemap.c	/^static size_t __iovec_copy_from_user_inatomic(char *vaddr,$/;"	f	file:
__isolate_lru_page	mm/vmscan.c	/^int __isolate_lru_page(struct page *page, int mode, int file)$/;"	f
__kernel_text_address	kernel/extable.c	/^int __kernel_text_address(unsigned long addr)$/;"	f
__kfifo_from_user_data	kernel/kfifo.c	/^static inline int __kfifo_from_user_data(struct kfifo *fifo,$/;"	f	file:
__kfifo_from_user_generic	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_from_user_generic);$/;"	v
__kfifo_from_user_generic	kernel/kfifo.c	/^unsigned int __kfifo_from_user_generic(struct kfifo *fifo,$/;"	f
__kfifo_from_user_n	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_from_user_n);$/;"	v
__kfifo_from_user_n	kernel/kfifo.c	/^unsigned int __kfifo_from_user_n(struct kfifo *fifo,$/;"	f
__kfifo_in_data	kernel/kfifo.c	/^static inline void __kfifo_in_data(struct kfifo *fifo,$/;"	f	file:
__kfifo_in_generic	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_in_generic);$/;"	v
__kfifo_in_generic	kernel/kfifo.c	/^unsigned int __kfifo_in_generic(struct kfifo *fifo,$/;"	f
__kfifo_in_n	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_in_n);$/;"	v
__kfifo_in_n	kernel/kfifo.c	/^unsigned int __kfifo_in_n(struct kfifo *fifo,$/;"	f
__kfifo_out_data	kernel/kfifo.c	/^static inline void __kfifo_out_data(struct kfifo *fifo,$/;"	f	file:
__kfifo_out_generic	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_out_generic);$/;"	v
__kfifo_out_generic	kernel/kfifo.c	/^unsigned int __kfifo_out_generic(struct kfifo *fifo,$/;"	f
__kfifo_out_n	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_out_n);$/;"	v
__kfifo_out_n	kernel/kfifo.c	/^unsigned int __kfifo_out_n(struct kfifo *fifo,$/;"	f
__kfifo_peek_generic	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_peek_generic);$/;"	v
__kfifo_peek_generic	kernel/kfifo.c	/^unsigned int __kfifo_peek_generic(struct kfifo *fifo, unsigned int recsize)$/;"	f
__kfifo_skip_generic	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_skip_generic);$/;"	v
__kfifo_skip_generic	kernel/kfifo.c	/^void __kfifo_skip_generic(struct kfifo *fifo, unsigned int recsize)$/;"	f
__kfifo_to_user_data	kernel/kfifo.c	/^static inline int __kfifo_to_user_data(struct kfifo *fifo,$/;"	f	file:
__kfifo_to_user_generic	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_to_user_generic);$/;"	v
__kfifo_to_user_generic	kernel/kfifo.c	/^unsigned int __kfifo_to_user_generic(struct kfifo *fifo,$/;"	f
__kfifo_to_user_n	kernel/kfifo.c	/^EXPORT_SYMBOL(__kfifo_to_user_n);$/;"	v
__kfifo_to_user_n	kernel/kfifo.c	/^unsigned int __kfifo_to_user_n(struct kfifo *fifo,$/;"	f
__kfree_section_memmap	mm/sparse.c	/^static void __kfree_section_memmap(struct page *memmap, unsigned long nr_pages)$/;"	f	file:
__kill_fasync	fs/fcntl.c	/^EXPORT_SYMBOL(__kill_fasync);$/;"	v
__kill_fasync	fs/fcntl.c	/^void __kill_fasync(struct fasync_struct *fa, int sig, int band)$/;"	f
__kill_pgrp_info	kernel/signal.c	/^int __kill_pgrp_info(int sig, struct siginfo *info, struct pid *pgrp)$/;"	f
__kmalloc	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	mm/slab.c	/^void *__kmalloc(size_t size, gfp_t flags)$/;"	f
__kmalloc	mm/slub.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	mm/slub.c	/^void *__kmalloc(size_t size, gfp_t flags)$/;"	f
__kmalloc_node	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	mm/slab.c	/^void *__kmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
__kmalloc_node	mm/slob.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	mm/slob.c	/^void *__kmalloc_node(size_t size, gfp_t gfp, int node)$/;"	f
__kmalloc_node	mm/slub.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	mm/slub.c	/^void *__kmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
__kmalloc_node_track_caller	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc_node_track_caller);$/;"	v
__kmalloc_node_track_caller	mm/slab.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t flags,$/;"	f
__kmalloc_node_track_caller	mm/slub.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t gfpflags,$/;"	f
__kmalloc_section_memmap	mm/sparse.c	/^static struct page *__kmalloc_section_memmap(unsigned long nr_pages)$/;"	f	file:
__kmalloc_section_usemap	mm/sparse.c	/^static unsigned long *__kmalloc_section_usemap(void)$/;"	f	file:
__kmalloc_track_caller	mm/slab.c	/^EXPORT_SYMBOL(__kmalloc_track_caller);$/;"	v
__kmalloc_track_caller	mm/slab.c	/^void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)$/;"	f
__kmalloc_track_caller	mm/slub.c	/^void *__kmalloc_track_caller(size_t size, gfp_t gfpflags, unsigned long caller)$/;"	f
__kmem_cache_destroy	mm/slab.c	/^static void __kmem_cache_destroy(struct kmem_cache *cachep)$/;"	f	file:
__kmem_cache_free	mm/slob.c	/^static void __kmem_cache_free(void *b, int size)$/;"	f	file:
__krealloc	mm/util.c	/^EXPORT_SYMBOL(__krealloc);$/;"	v
__krealloc	mm/util.c	/^void *__krealloc(const void *p, size_t new_size, gfp_t flags)$/;"	f
__ksm_enter	mm/ksm.c	/^int __ksm_enter(struct mm_struct *mm)$/;"	f
__ksm_exit	mm/ksm.c	/^void __ksm_exit(struct mm_struct *mm)$/;"	f
__list_add	include/linux/list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_cut_position	include/linux/list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	include/linux/list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	include/linux/list.h	367;"	d
__list_splice	include/linux/list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
__load_balance_fair	kernel/sched_fair.c	/^__load_balance_fair(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
__load_balance_iterator	kernel/sched_fair.c	/^__load_balance_iterator(struct cfs_rq *cfs_rq, struct list_head *next)$/;"	f	file:
__local_bh_disable	kernel/softirq.c	/^static inline void __local_bh_disable(unsigned long ip)$/;"	f	file:
__local_bh_disable	kernel/softirq.c	/^static void __local_bh_disable(unsigned long ip)$/;"	f	file:
__local_trigger	kernel/softirq.c	/^static void __local_trigger(struct call_single_data *cp, int softirq)$/;"	f	file:
__lock_acquire	kernel/lockdep.c	/^static int __lock_acquire(struct lockdep_map *lock, unsigned int subclass,$/;"	f	file:
__lock_acquired	kernel/lockdep.c	/^__lock_acquired(struct lockdep_map *lock, unsigned long ip)$/;"	f	file:
__lock_buffer	fs/buffer.c	/^EXPORT_SYMBOL(__lock_buffer);$/;"	v
__lock_buffer	fs/buffer.c	/^void __lock_buffer(struct buffer_head *bh)$/;"	f
__lock_contended	kernel/lockdep.c	/^__lock_contended(struct lockdep_map *lock, unsigned long ip)$/;"	f	file:
__lock_is_held	kernel/lockdep.c	/^static int __lock_is_held(struct lockdep_map *lock)$/;"	f	file:
__lock_page	mm/filemap.c	/^EXPORT_SYMBOL(__lock_page);$/;"	v
__lock_page	mm/filemap.c	/^void __lock_page(struct page *page)$/;"	f
__lock_page_killable	mm/filemap.c	/^EXPORT_SYMBOL_GPL(__lock_page_killable);$/;"	v
__lock_page_killable	mm/filemap.c	/^int __lock_page_killable(struct page *page)$/;"	f
__lock_page_nosync	mm/filemap.c	/^void __lock_page_nosync(struct page *page)$/;"	f
__lock_release	kernel/lockdep.c	/^__lock_release(struct lockdep_map *lock, int nested, unsigned long ip)$/;"	f	file:
__lock_set_class	kernel/lockdep.c	/^__lock_set_class(struct lockdep_map *lock, const char *name,$/;"	f	file:
__lockdep_count_backward_deps	kernel/lockdep.c	/^unsigned long __lockdep_count_backward_deps(struct lock_list *this)$/;"	f
__lockdep_count_forward_deps	kernel/lockdep.c	/^unsigned long __lockdep_count_forward_deps(struct lock_list *this)$/;"	f
__lockdep_trace_alloc	kernel/lockdep.c	/^static void __lockdep_trace_alloc(gfp_t gfp_mask, unsigned long flags)$/;"	f	file:
__lockfunc	include/linux/spinlock.h	75;"	d
__locks_copy_lock	fs/locks.c	/^EXPORT_SYMBOL(__locks_copy_lock);$/;"	v
__locks_copy_lock	fs/locks.c	/^void __locks_copy_lock(struct file_lock *new, const struct file_lock *fl)$/;"	f
__locks_delete_block	fs/locks.c	/^static void __locks_delete_block(struct file_lock *waiter)$/;"	f	file:
__log_buf	kernel/printk.c	/^static char __log_buf[__LOG_BUF_LEN];$/;"	v	file:
__lookup	lib/radix-tree.c	/^__lookup(struct radix_tree_node *slot, void ***results, unsigned long index,$/;"	f	file:
__lookup_hash	fs/namei.c	/^static struct dentry *__lookup_hash(struct qstr *name,$/;"	f	file:
__lookup_mnt	fs/namespace.c	/^struct vfsmount *__lookup_mnt(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
__lookup_one_len	fs/namei.c	/^static int __lookup_one_len(const char *name, struct qstr *this,$/;"	f	file:
__lookup_tag	lib/radix-tree.c	/^__lookup_tag(struct radix_tree_node *slot, void ***results, unsigned long index,$/;"	f	file:
__lowest_in_progress	kernel/async.c	/^static async_cookie_t  __lowest_in_progress(struct list_head *running)$/;"	f	file:
__lru_cache_add	mm/swap.c	/^void __lru_cache_add(struct page *page, enum lru_list lru)$/;"	f
__mark_inode_dirty	fs/fs-writeback.c	/^EXPORT_SYMBOL(__mark_inode_dirty);$/;"	v
__mark_inode_dirty	fs/fs-writeback.c	/^void __mark_inode_dirty(struct inode *inode, int flags)$/;"	f
__maxindex	lib/radix-tree.c	/^static __init unsigned long __maxindex(unsigned int height)$/;"	f	file:
__mb_cache_entry_find	fs/mbcache.c	/^__mb_cache_entry_find(struct list_head *l, struct list_head *head,$/;"	f	file:
__mb_cache_entry_forget	fs/mbcache.c	/^__mb_cache_entry_forget(struct mb_cache_entry *ce, gfp_t gfp_mask)$/;"	f	file:
__mb_cache_entry_is_hashed	fs/mbcache.c	/^__mb_cache_entry_is_hashed(struct mb_cache_entry *ce)$/;"	f	file:
__mb_cache_entry_unhash	fs/mbcache.c	/^__mb_cache_entry_unhash(struct mb_cache_entry *ce)$/;"	f	file:
__mem_cgroup_commit_charge	mm/memcontrol.c	/^static void __mem_cgroup_commit_charge(struct mem_cgroup *mem,$/;"	f	file:
__mem_cgroup_commit_charge_swapin	mm/memcontrol.c	/^__mem_cgroup_commit_charge_swapin(struct page *page, struct mem_cgroup *ptr,$/;"	f	file:
__mem_cgroup_free	mm/memcontrol.c	/^static void __mem_cgroup_free(struct mem_cgroup *mem)$/;"	f	file:
__mem_cgroup_insert_exceeded	mm/memcontrol.c	/^__mem_cgroup_insert_exceeded(struct mem_cgroup *mem,$/;"	f	file:
__mem_cgroup_largest_soft_limit_node	mm/memcontrol.c	/^__mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_zone *mctz)$/;"	f	file:
__mem_cgroup_move_account	mm/memcontrol.c	/^static void __mem_cgroup_move_account(struct page_cgroup *pc,$/;"	f	file:
__mem_cgroup_remove_exceeded	mm/memcontrol.c	/^__mem_cgroup_remove_exceeded(struct mem_cgroup *mem,$/;"	f	file:
__mem_cgroup_stat_add_safe	mm/memcontrol.c	/^static inline void __mem_cgroup_stat_add_safe(struct mem_cgroup_stat_cpu *stat,$/;"	f	file:
__mem_cgroup_stat_read_local	mm/memcontrol.c	/^__mem_cgroup_stat_read_local(struct mem_cgroup_stat_cpu *stat,$/;"	f	file:
__mem_cgroup_stat_reset_safe	mm/memcontrol.c	/^__mem_cgroup_stat_reset_safe(struct mem_cgroup_stat_cpu *stat,$/;"	f	file:
__mem_cgroup_try_charge	mm/memcontrol.c	/^static int __mem_cgroup_try_charge(struct mm_struct *mm,$/;"	f	file:
__mem_cgroup_uncharge_common	mm/memcontrol.c	/^__mem_cgroup_uncharge_common(struct page *page, enum charge_type ctype)$/;"	f	file:
__memory_failure	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(__memory_failure);$/;"	v
__memory_failure	mm/memory-failure.c	/^int __memory_failure(unsigned long pfn, int trapno, int flags)$/;"	f
__might_sleep	kernel/sched.c	/^EXPORT_SYMBOL(__might_sleep);$/;"	v
__might_sleep	kernel/sched.c	/^void __might_sleep(char *file, int line, int preempt_offset)$/;"	f
__migrate_task	kernel/sched.c	/^static int __migrate_task(struct task_struct *p, int src_cpu, int dest_cpu)$/;"	f	file:
__migrate_task_irq	kernel/sched.c	/^static int __migrate_task_irq(struct task_struct *p, int src_cpu, int dest_cpu)$/;"	f	file:
__mlock_posix_error_return	mm/mlock.c	/^static int __mlock_posix_error_return(long retval)$/;"	f	file:
__mlock_vma_pages_range	mm/mlock.c	/^static long __mlock_vma_pages_range(struct vm_area_struct *vma,$/;"	f	file:
__mmdrop	kernel/fork.c	/^EXPORT_SYMBOL_GPL(__mmdrop);$/;"	v
__mmdrop	kernel/fork.c	/^void __mmdrop(struct mm_struct *mm)$/;"	f
__mmu_notifier_change_pte	mm/mmu_notifier.c	/^void __mmu_notifier_change_pte(struct mm_struct *mm, unsigned long address,$/;"	f
__mmu_notifier_clear_flush_young	mm/mmu_notifier.c	/^int __mmu_notifier_clear_flush_young(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_page	mm/mmu_notifier.c	/^void __mmu_notifier_invalidate_page(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_range_end	mm/mmu_notifier.c	/^void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_range_start	mm/mmu_notifier.c	/^void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,$/;"	f
__mmu_notifier_mm_destroy	mm/mmu_notifier.c	/^void __mmu_notifier_mm_destroy(struct mm_struct *mm)$/;"	f
__mmu_notifier_register	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(__mmu_notifier_register);$/;"	v
__mmu_notifier_register	mm/mmu_notifier.c	/^int __mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
__mmu_notifier_release	mm/mmu_notifier.c	/^void __mmu_notifier_release(struct mm_struct *mm)$/;"	f
__mnt_is_readonly	fs/namespace.c	/^EXPORT_SYMBOL_GPL(__mnt_is_readonly);$/;"	v
__mnt_is_readonly	fs/namespace.c	/^int __mnt_is_readonly(struct vfsmount *mnt)$/;"	f
__mnt_unmake_readonly	fs/namespace.c	/^static void __mnt_unmake_readonly(struct vfsmount *mnt)$/;"	f	file:
__mntput	fs/namespace.c	/^static inline void __mntput(struct vfsmount *mnt)$/;"	f	file:
__mod_timer	kernel/timer.c	/^__mod_timer(struct timer_list *timer, unsigned long expires,$/;"	f	file:
__mod_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(__mod_zone_page_state);$/;"	v
__mod_zone_page_state	mm/vmstat.c	/^void __mod_zone_page_state(struct zone *zone, enum zone_stat_item item,$/;"	f
__modinit	kernel/params.c	462;"	d	file:
__modinit	kernel/params.c	464;"	d	file:
__module_address	kernel/module.c	/^EXPORT_SYMBOL_GPL(__module_address);$/;"	v
__module_address	kernel/module.c	/^struct module *__module_address(unsigned long addr)$/;"	f
__module_put_and_exit	kernel/module.c	/^EXPORT_SYMBOL(__module_put_and_exit);$/;"	v
__module_put_and_exit	kernel/module.c	/^void __module_put_and_exit(struct module *mod, long code)$/;"	f
__module_text_address	kernel/module.c	/^EXPORT_SYMBOL_GPL(__module_text_address);$/;"	v
__module_text_address	kernel/module.c	/^struct module *__module_text_address(unsigned long addr)$/;"	f
__mpage_writepage	fs/mpage.c	/^static int __mpage_writepage(struct page *page, struct writeback_control *wbc,$/;"	f	file:
__mpol_cond_copy	mm/mempolicy.c	/^struct mempolicy *__mpol_cond_copy(struct mempolicy *tompol,$/;"	f
__mpol_dup	mm/mempolicy.c	/^struct mempolicy *__mpol_dup(struct mempolicy *old)$/;"	f
__mpol_equal	mm/mempolicy.c	/^int __mpol_equal(struct mempolicy *a, struct mempolicy *b)$/;"	f
__mpol_put	mm/mempolicy.c	/^void __mpol_put(struct mempolicy *p)$/;"	f
__mutex_init	kernel/mutex.c	/^EXPORT_SYMBOL(__mutex_init);$/;"	v
__mutex_init	kernel/mutex.c	/^__mutex_init(struct mutex *lock, const char *name, struct lock_class_key *key)$/;"	f
__mutex_lock_common	kernel/mutex.c	/^__mutex_lock_common(struct mutex *lock, long state, unsigned int subclass,$/;"	f	file:
__mutex_lock_interruptible_slowpath	kernel/mutex.c	/^__mutex_lock_interruptible_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_lock_killable_slowpath	kernel/mutex.c	/^__mutex_lock_killable_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_lock_slowpath	kernel/mutex.c	/^__mutex_lock_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_trylock_slowpath	kernel/mutex.c	/^static inline int __mutex_trylock_slowpath(atomic_t *lock_count)$/;"	f	file:
__mutex_unlock_common_slowpath	kernel/mutex.c	/^__mutex_unlock_common_slowpath(atomic_t *lock_count, int nested)$/;"	f	file:
__mutex_unlock_slowpath	kernel/mutex.c	/^__mutex_unlock_slowpath(atomic_t *lock_count)$/;"	f	file:
__next_timer_interrupt	kernel/timer.c	/^static unsigned long __next_timer_interrupt(struct tvec_base *base)$/;"	f	file:
__normal_prio	kernel/sched.c	/^static inline int __normal_prio(struct task_struct *p)$/;"	f	file:
__note_new_gpnum	kernel/rcutree.c	/^static void __note_new_gpnum(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)$/;"	f	file:
__offline_isolated_pages	mm/page_alloc.c	/^__offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
__oom_kill_task	mm/oom_kill.c	/^static void __oom_kill_task(struct task_struct *p, int verbose)$/;"	f	file:
__open_namei_create	fs/namei.c	/^static int __open_namei_create(struct nameidata *nd, struct path *path,$/;"	f	file:
__out_of_memory	mm/oom_kill.c	/^static void __out_of_memory(gfp_t gfp_mask, int order)$/;"	f	file:
__page_cache_alloc	include/linux/pagemap.h	/^static inline struct page *__page_cache_alloc(gfp_t gfp)$/;"	f
__page_cache_alloc	mm/filemap.c	/^EXPORT_SYMBOL(__page_cache_alloc);$/;"	v
__page_cache_alloc	mm/filemap.c	/^struct page *__page_cache_alloc(gfp_t gfp)$/;"	f
__page_cache_release	mm/swap.c	/^static void __page_cache_release(struct page *page)$/;"	f	file:
__page_check_anon_rmap	mm/rmap.c	/^static void __page_check_anon_rmap(struct page *page,$/;"	f	file:
__page_find_buddy	mm/page_alloc.c	/^__page_find_buddy(struct page *page, unsigned long page_idx, unsigned int order)$/;"	f	file:
__page_set_anon_rmap	mm/rmap.c	/^static void __page_set_anon_rmap(struct page *page,$/;"	f	file:
__page_symlink	fs/namei.c	/^EXPORT_SYMBOL(__page_symlink);$/;"	v
__page_symlink	fs/namei.c	/^int __page_symlink(struct inode *inode, const char *symname, int len, int nofs)$/;"	f
__pagevec_free	mm/page_alloc.c	/^void __pagevec_free(struct pagevec *pvec)$/;"	f
__pagevec_release	mm/swap.c	/^EXPORT_SYMBOL(__pagevec_release);$/;"	v
__pagevec_release	mm/swap.c	/^void __pagevec_release(struct pagevec *pvec)$/;"	f
__paginginit	mm/internal.h	183;"	d
__paginginit	mm/internal.h	185;"	d
__paint_it	mm/kmemleak.c	/^static void __paint_it(struct kmemleak_object *object, int color)$/;"	f	file:
__parse_numa_zonelist_order	mm/page_alloc.c	/^static int __parse_numa_zonelist_order(char *s)$/;"	f	file:
__pcpu_map_pages	mm/percpu.c	/^static int __pcpu_map_pages(unsigned long addr, struct page **pages,$/;"	f	file:
__pcpu_ptr_to_addr	mm/percpu.c	87;"	d	file:
__pcpu_size_to_slot	mm/percpu.c	/^static int __pcpu_size_to_slot(int size)$/;"	f	file:
__pcpu_unmap_pages	mm/percpu.c	/^static void __pcpu_unmap_pages(unsigned long addr, int nr_pages)$/;"	f	file:
__per_cpu_offset	mm/percpu.c	/^EXPORT_SYMBOL(__per_cpu_offset);$/;"	v
__perf_disable	kernel/perf_event.c	/^void __perf_disable(void)$/;"	f
__perf_enable	kernel/perf_event.c	/^bool __perf_enable(void)$/;"	f
__perf_event_disable	kernel/perf_event.c	/^static void __perf_event_disable(void *info)$/;"	f	file:
__perf_event_enable	kernel/perf_event.c	/^static void __perf_event_enable(void *info)$/;"	f	file:
__perf_event_exit_cpu	kernel/perf_event.c	/^static void __perf_event_exit_cpu(void *info)$/;"	f	file:
__perf_event_exit_task	kernel/perf_event.c	/^__perf_event_exit_task(struct perf_event *child_event,$/;"	f	file:
__perf_event_init_context	kernel/perf_event.c	/^__perf_event_init_context(struct perf_event_context *ctx,$/;"	f	file:
__perf_event_mark_enabled	kernel/perf_event.c	/^static void __perf_event_mark_enabled(struct perf_event *event,$/;"	f	file:
__perf_event_mmap	kernel/perf_event.c	/^void __perf_event_mmap(struct vm_area_struct *vma)$/;"	f
__perf_event_overflow	kernel/perf_event.c	/^static int __perf_event_overflow(struct perf_event *event, int nmi,$/;"	f	file:
__perf_event_read	kernel/perf_event.c	/^static void __perf_event_read(void *info)$/;"	f	file:
__perf_event_remove_from_context	kernel/perf_event.c	/^static void __perf_event_remove_from_context(void *info)$/;"	f	file:
__perf_event_sched_in	kernel/perf_event.c	/^__perf_event_sched_in(struct perf_event_context *ctx,$/;"	f	file:
__perf_event_sched_out	kernel/perf_event.c	/^void __perf_event_sched_out(struct perf_event_context *ctx,$/;"	f
__perf_event_sync_stat	kernel/perf_event.c	/^static void __perf_event_sync_stat(struct perf_event *event,$/;"	f	file:
__perf_event_task_sched_out	kernel/perf_event.c	/^static void __perf_event_task_sched_out(struct perf_event_context *ctx)$/;"	f	file:
__perf_install_in_context	kernel/perf_event.c	/^static void __perf_install_in_context(void *info)$/;"	f	file:
__perf_pending_run	kernel/perf_event.c	/^static int __perf_pending_run(void)$/;"	f	file:
__perf_sw_event	kernel/perf_event.c	/^void __perf_sw_event(u32 event_id, u64 nr, int nmi,$/;"	f
__pick_last_entity	kernel/sched_fair.c	/^static struct sched_entity *__pick_last_entity(struct cfs_rq *cfs_rq)$/;"	f	file:
__pick_next_entity	kernel/sched_fair.c	/^static struct sched_entity *__pick_next_entity(struct cfs_rq *cfs_rq)$/;"	f	file:
__pmd_alloc	mm/memory.c	/^int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)$/;"	f
__pollwait	fs/select.c	/^static void __pollwait(struct file *filp, wait_queue_head_t *wait_address,$/;"	f	file:
__pollwake	fs/select.c	/^static int __pollwake(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
__posix_lock_file	fs/locks.c	/^static int __posix_lock_file(struct inode *inode, struct file_lock *request, struct file_lock *conflock)$/;"	f	file:
__print_symbol	kernel/kallsyms.c	/^EXPORT_SYMBOL(__print_symbol);$/;"	v
__print_symbol	kernel/kallsyms.c	/^void __print_symbol(const char *fmt, unsigned long address)$/;"	f
__printk_ratelimit	kernel/printk.c	/^EXPORT_SYMBOL(__printk_ratelimit);$/;"	v
__printk_ratelimit	kernel/printk.c	/^int __printk_ratelimit(const char *func)$/;"	f
__probe_kernel_read	mm/maccess.c	/^long __probe_kernel_read(void *dst, void *src, size_t size)$/;"	f
__probe_kernel_write	mm/maccess.c	/^long __probe_kernel_write(void *dst, void *src, size_t size)$/;"	f
__profile_flip_buffers	kernel/profile.c	/^static void __profile_flip_buffers(void *unused)$/;"	f	file:
__propagate_umount	fs/pnode.c	/^static void __propagate_umount(struct vfsmount *mnt)$/;"	f	file:
__pte_alloc	mm/memory.c	/^int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address)$/;"	f
__pte_alloc_kernel	mm/memory.c	/^int __pte_alloc_kernel(pmd_t *pmd, unsigned long address)$/;"	f
__ptrace_detach	kernel/ptrace.c	/^static bool __ptrace_detach(struct task_struct *tracer, struct task_struct *p)$/;"	f	file:
__ptrace_link	kernel/ptrace.c	/^void __ptrace_link(struct task_struct *child, struct task_struct *new_parent)$/;"	f
__ptrace_may_access	kernel/ptrace.c	/^int __ptrace_may_access(struct task_struct *task, unsigned int mode)$/;"	f
__ptrace_unlink	kernel/ptrace.c	/^void __ptrace_unlink(struct task_struct *child)$/;"	f
__pud_alloc	mm/memory.c	/^int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)$/;"	f
__purge_vmap_area_lazy	mm/vmalloc.c	/^static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,$/;"	f	file:
__put_chunk	kernel/audit_tree.c	/^static void __put_chunk(struct rcu_head *rcu)$/;"	f	file:
__put_cred	kernel/cred.c	/^EXPORT_SYMBOL(__put_cred);$/;"	v
__put_cred	kernel/cred.c	/^void __put_cred(struct cred *cred)$/;"	f
__put_css_set	kernel/cgroup.c	/^static void __put_css_set(struct css_set *cg, int taskexit)$/;"	f	file:
__put_ioctx	fs/aio.c	/^static void __put_ioctx(struct kioctx *ctx)$/;"	f	file:
__put_page	mm/internal.h	/^static inline void __put_page(struct page *page)$/;"	f
__put_super	fs/super.c	/^static int __put_super(struct super_block *sb)$/;"	f	file:
__put_super_and_need_restart	fs/super.c	/^int __put_super_and_need_restart(struct super_block *sb)$/;"	f
__put_swap_token	mm/thrash.c	/^void __put_swap_token(struct mm_struct *mm)$/;"	f
__put_task_struct	kernel/fork.c	/^void __put_task_struct(struct task_struct *tsk)$/;"	f
__put_tree	kernel/audit_tree.c	/^static void __put_tree(struct rcu_head *rcu)$/;"	f	file:
__put_unused_fd	fs/open.c	/^static void __put_unused_fd(struct files_struct *files, unsigned int fd)$/;"	f	file:
__queue_kicked_iocb	fs/aio.c	/^static inline int __queue_kicked_iocb(struct kiocb *iocb)$/;"	f	file:
__queue_work	kernel/workqueue.c	/^static void __queue_work(struct cpu_workqueue_struct *cwq,$/;"	f	file:
__raw_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__raw_notifier_call_chain);$/;"	v
__raw_notifier_call_chain	kernel/notifier.c	/^int __raw_notifier_call_chain(struct raw_notifier_head *nh,$/;"	f
__rcu_init_preempt	kernel/rcutree_plugin.h	/^static void __init __rcu_init_preempt(void)$/;"	f
__rcu_offline_cpu	kernel/rcutree.c	/^static void __rcu_offline_cpu(int cpu, struct rcu_state *rsp)$/;"	f	file:
__rcu_pending	kernel/rcutree.c	/^static int __rcu_pending(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
__rcu_process_callbacks	kernel/rcutiny.c	/^static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp)$/;"	f	file:
__rcu_process_callbacks	kernel/rcutree.c	/^__rcu_process_callbacks(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
__rcu_process_gp_end	kernel/rcutree.c	/^__rcu_process_gp_end(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)$/;"	f	file:
__rcu_read_lock	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(__rcu_read_lock);$/;"	v
__rcu_read_lock	kernel/rcutree_plugin.h	/^void __rcu_read_lock(void)$/;"	f
__rcu_read_unlock	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(__rcu_read_unlock);$/;"	v
__rcu_read_unlock	kernel/rcutree_plugin.h	/^void __rcu_read_unlock(void)$/;"	f
__read_cache_page	mm/filemap.c	/^static struct page *__read_cache_page(struct address_space *mapping,$/;"	f	file:
__read_mostly	fs/anon_inodes.c	/^static struct vfsmount *anon_inode_mnt __read_mostly;$/;"	v	typeref:struct:anon_inode_mnt	file:
__read_mostly	fs/bio-integrity.c	/^struct integrity_slab bip_slab[BIOVEC_NR_POOLS] __read_mostly = {$/;"	v	typeref:struct:bip_slab
__read_mostly	fs/bio.c	/^static mempool_t *bio_split_pool __read_mostly;$/;"	v	file:
__read_mostly	fs/bio.c	/^struct biovec_slab bvec_slabs[BIOVEC_NR_POOLS] __read_mostly = {$/;"	v	typeref:struct:bvec_slabs
__read_mostly	fs/block_dev.c	/^static struct kmem_cache * bdev_cachep __read_mostly;$/;"	v	typeref:struct:bdev_cachep	file:
__read_mostly	fs/block_dev.c	/^struct super_block *blockdev_superblock __read_mostly;$/;"	v	typeref:struct:blockdev_superblock
__read_mostly	fs/dcache.c	/^int sysctl_vfs_cache_pressure __read_mostly = 100;$/;"	v
__read_mostly	fs/dcache.c	/^static struct hlist_head *dentry_hashtable __read_mostly;$/;"	v	typeref:struct:dentry_hashtable	file:
__read_mostly	fs/dcache.c	/^static struct kmem_cache *dentry_cache __read_mostly;$/;"	v	typeref:struct:dentry_cache	file:
__read_mostly	fs/dcache.c	/^static unsigned int d_hash_mask __read_mostly;$/;"	v	file:
__read_mostly	fs/dcache.c	/^static unsigned int d_hash_shift __read_mostly;$/;"	v	file:
__read_mostly	fs/dcache.c	/^struct kmem_cache *names_cachep __read_mostly;$/;"	v	typeref:struct:names_cachep
__read_mostly	fs/dcookies.c	/^static size_t hash_size __read_mostly;$/;"	v	file:
__read_mostly	fs/dcookies.c	/^static struct kmem_cache *dcookie_cache __read_mostly;$/;"	v	typeref:struct:dcookie_cache	file:
__read_mostly	fs/dcookies.c	/^static struct list_head *dcookie_hashtable __read_mostly;$/;"	v	typeref:struct:dcookie_hashtable	file:
__read_mostly	fs/eventpoll.c	/^static int max_user_watches __read_mostly;$/;"	v	file:
__read_mostly	fs/eventpoll.c	/^static struct kmem_cache *epi_cache __read_mostly;$/;"	v	typeref:struct:epi_cache	file:
__read_mostly	fs/eventpoll.c	/^static struct kmem_cache *pwq_cache __read_mostly;$/;"	v	typeref:struct:pwq_cache	file:
__read_mostly	fs/fcntl.c	/^static struct kmem_cache *fasync_cache __read_mostly;$/;"	v	typeref:struct:fasync_cache	file:
__read_mostly	fs/file.c	/^int sysctl_nr_open __read_mostly = 1024*1024;$/;"	v
__read_mostly	fs/file_table.c	/^static struct kmem_cache *filp_cachep __read_mostly;$/;"	v	typeref:struct:filp_cachep	file:
__read_mostly	fs/inode.c	/^static struct hlist_head *inode_hashtable __read_mostly;$/;"	v	typeref:struct:inode_hashtable	file:
__read_mostly	fs/inode.c	/^static struct kmem_cache *inode_cachep __read_mostly;$/;"	v	typeref:struct:inode_cachep	file:
__read_mostly	fs/inode.c	/^static unsigned int i_hash_mask __read_mostly;$/;"	v	file:
__read_mostly	fs/inode.c	/^static unsigned int i_hash_shift __read_mostly;$/;"	v	file:
__read_mostly	fs/locks.c	/^static struct kmem_cache *filelock_cache __read_mostly;$/;"	v	typeref:struct:filelock_cache	file:
__read_mostly	fs/namespace.c	/^static struct kmem_cache *mnt_cache __read_mostly;$/;"	v	typeref:struct:mnt_cache	file:
__read_mostly	fs/namespace.c	/^static struct list_head *mount_hashtable __read_mostly;$/;"	v	typeref:struct:mount_hashtable	file:
__read_mostly	fs/pipe.c	/^static struct vfsmount *pipe_mnt __read_mostly;$/;"	v	typeref:struct:pipe_mnt	file:
__read_mostly	kernel/cgroup.c	/^static int need_forkexit_callback __read_mostly;$/;"	v	file:
__read_mostly	kernel/cgroup.c	/^static int use_task_css_set_links __read_mostly;$/;"	v	file:
__read_mostly	kernel/cpuset.c	/^int cpuset_memory_pressure_enabled __read_mostly;$/;"	v
__read_mostly	kernel/cpuset.c	/^int number_of_cpusets __read_mostly;$/;"	v
__read_mostly	kernel/delayacct.c	/^int delayacct_on __read_mostly = 1;	\/* Delay accounting turned on\/off *\/$/;"	v
__read_mostly	kernel/hrtimer.c	/^static int hrtimer_hres_enabled __read_mostly  = 1;$/;"	v	file:
__read_mostly	kernel/perf_event.c	/^int perf_max_events __read_mostly = 1;$/;"	v
__read_mostly	kernel/perf_event.c	/^int sysctl_perf_event_mlock __read_mostly = 512; \/* 'free' kb per user *\/$/;"	v
__read_mostly	kernel/perf_event.c	/^int sysctl_perf_event_paranoid __read_mostly = 1;$/;"	v
__read_mostly	kernel/perf_event.c	/^int sysctl_perf_event_sample_rate __read_mostly = 100000;$/;"	v
__read_mostly	kernel/perf_event.c	/^static atomic_t nr_comm_events __read_mostly;$/;"	v	file:
__read_mostly	kernel/perf_event.c	/^static atomic_t nr_events __read_mostly;$/;"	v	file:
__read_mostly	kernel/perf_event.c	/^static atomic_t nr_mmap_events __read_mostly;$/;"	v	file:
__read_mostly	kernel/perf_event.c	/^static atomic_t nr_task_events __read_mostly;$/;"	v	file:
__read_mostly	kernel/perf_event.c	/^static int perf_overcommit __read_mostly = 1;$/;"	v	file:
__read_mostly	kernel/perf_event.c	/^static int perf_reserved_percpu __read_mostly;$/;"	v	file:
__read_mostly	kernel/printk.c	/^int printk_delay_msec __read_mostly;$/;"	v
__read_mostly	kernel/profile.c	/^int prof_on __read_mostly;$/;"	v
__read_mostly	kernel/rcutree.c	/^static int rcu_scheduler_active __read_mostly;$/;"	v	file:
__read_mostly	kernel/sched_fair.c	/^unsigned int sysctl_sched_child_runs_first __read_mostly;$/;"	v
__read_mostly	kernel/signal.c	/^int print_fatal_signals __read_mostly;$/;"	v
__read_mostly	kernel/taskstats.c	/^__read_mostly = {$/;"	v	typeref:struct:taskstats_cmd_get_policy	file:
__read_mostly	kernel/taskstats.c	/^cgroupstats_cmd_get_policy[CGROUPSTATS_CMD_ATTR_MAX+1] __read_mostly = {$/;"	v	typeref:struct:cgroupstats_cmd_get_policy	file:
__read_mostly	kernel/workqueue.c	/^static const struct cpumask *cpu_singlethread_map __read_mostly;$/;"	v	typeref:struct:cpu_singlethread_map	file:
__read_mostly	kernel/workqueue.c	/^static cpumask_var_t cpu_populated_map __read_mostly;$/;"	v	file:
__read_mostly	kernel/workqueue.c	/^static int singlethread_cpu __read_mostly;$/;"	v	file:
__read_mostly	kernel/workqueue.c	/^static struct workqueue_struct *keventd_wq __read_mostly;$/;"	v	typeref:struct:keventd_wq	file:
__read_mostly	lib/radix-tree.c	/^static unsigned long height_to_maxindex[RADIX_TREE_MAX_PATH + 1] __read_mostly;$/;"	v	file:
__read_mostly	mm/highmem.c	/^unsigned long totalhigh_pages __read_mostly;$/;"	v
__read_mostly	mm/memcontrol.c	/^int do_swap_account __read_mostly;$/;"	v
__read_mostly	mm/memcontrol.c	/^static struct mem_cgroup_tree soft_limit_tree __read_mostly;$/;"	v	typeref:struct:soft_limit_tree	file:
__read_mostly	mm/memcontrol.c	/^struct cgroup_subsys mem_cgroup_subsys __read_mostly;$/;"	v	typeref:struct:mem_cgroup_subsys
__read_mostly	mm/memcontrol.c	/^struct mem_cgroup *root_mem_cgroup __read_mostly;$/;"	v	typeref:struct:root_mem_cgroup
__read_mostly	mm/memory-failure.c	/^atomic_long_t mce_bad_pages __read_mostly = ATOMIC_LONG_INIT(0);$/;"	v
__read_mostly	mm/memory-failure.c	/^int sysctl_memory_failure_early_kill __read_mostly = 0;$/;"	v
__read_mostly	mm/memory-failure.c	/^int sysctl_memory_failure_recovery __read_mostly = 1;$/;"	v
__read_mostly	mm/memory.c	/^int randomize_va_space __read_mostly =$/;"	v
__read_mostly	mm/memory.c	/^unsigned long highest_memmap_pfn __read_mostly;$/;"	v
__read_mostly	mm/memory.c	/^unsigned long zero_pfn __read_mostly;$/;"	v
__read_mostly	mm/mmap.c	/^int sysctl_max_map_count __read_mostly = DEFAULT_MAX_MAP_COUNT;$/;"	v
__read_mostly	mm/page_alloc.c	/^bool oom_killer_disabled __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^gfp_t gfp_allowed_mask __read_mostly = GFP_BOOT_MASK;$/;"	v
__read_mostly	mm/page_alloc.c	/^int nr_node_ids __read_mostly = MAX_NUMNODES;$/;"	v
__read_mostly	mm/page_alloc.c	/^int nr_online_nodes __read_mostly = 1;$/;"	v
__read_mostly	mm/page_alloc.c	/^int page_group_by_mobility_disabled __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^int pageblock_order __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^nodemask_t node_states[NR_NODE_STATES] __read_mostly = {$/;"	v
__read_mostly	mm/page_alloc.c	/^unsigned long totalram_pages __read_mostly;$/;"	v
__read_mostly	mm/page_alloc.c	/^unsigned long totalreserve_pages __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^const unsigned long *pcpu_unit_offsets __read_mostly;	\/* cpu -> unit offset *\/$/;"	v
__read_mostly	mm/percpu.c	/^static const int *pcpu_unit_map __read_mostly;		\/* cpu -> unit *\/$/;"	v	file:
__read_mostly	mm/percpu.c	/^static const size_t *pcpu_group_sizes __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static const unsigned long *pcpu_group_offsets __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_atom_size __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_nr_groups __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_nr_slots __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_nr_units __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_unit_pages __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static int pcpu_unit_size __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static size_t pcpu_chunk_struct_size __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static struct list_head *pcpu_slot __read_mostly; \/* chunk list slots *\/$/;"	v	typeref:struct:pcpu_slot	file:
__read_mostly	mm/percpu.c	/^static unsigned int pcpu_first_unit_cpu __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^static unsigned int pcpu_last_unit_cpu __read_mostly;$/;"	v	file:
__read_mostly	mm/percpu.c	/^unsigned long __per_cpu_offset[NR_CPUS] __read_mostly;$/;"	v
__read_mostly	mm/percpu.c	/^void *pcpu_base_addr __read_mostly;$/;"	v
__read_mostly	mm/shmem.c	/^static struct backing_dev_info shmem_backing_dev_info  __read_mostly = {$/;"	v	typeref:struct:shmem_backing_dev_info	file:
__read_mostly	mm/slab.c	/^static int use_alien_caches __read_mostly = 1;$/;"	v	file:
__read_mostly	mm/slob.c	/^static unsigned int slob_ready __read_mostly;$/;"	v	file:
__read_mostly	mm/vmalloc.c	/^static bool vmap_initialized __read_mostly = false;$/;"	v	file:
__read_mostly	mm/vmstat.c	/^int sysctl_stat_interval __read_mostly = HZ;$/;"	v
__register_binfmt	fs/exec.c	/^EXPORT_SYMBOL(__register_binfmt);$/;"	v
__register_binfmt	fs/exec.c	/^int __register_binfmt(struct linux_binfmt * fmt, int insert)$/;"	f
__register_chrdev	fs/char_dev.c	/^EXPORT_SYMBOL(__register_chrdev);$/;"	v
__register_chrdev	fs/char_dev.c	/^int __register_chrdev(unsigned int major, unsigned int baseminor,$/;"	f
__register_chrdev_region	fs/char_dev.c	/^__register_chrdev_region(unsigned int major, unsigned int baseminor,$/;"	f	file:
__register_sysctl_paths	kernel/sysctl.c	/^struct ctl_table_header *__register_sysctl_paths($/;"	f
__relay_reset	kernel/relay.c	/^static void __relay_reset(struct rchan_buf *buf, unsigned int init)$/;"	f	file:
__relay_set_buf_dentry	kernel/relay.c	/^static void __relay_set_buf_dentry(void *info)$/;"	f	file:
__release_bp_slot	kernel/hw_breakpoint.c	/^static void __release_bp_slot(struct perf_event *bp)$/;"	f	file:
__release_region	kernel/resource.c	/^EXPORT_SYMBOL(__release_region);$/;"	v
__release_region	kernel/resource.c	/^void __release_region(struct resource *parent, resource_size_t start,$/;"	f
__release_resource	kernel/resource.c	/^static int __release_resource(struct resource *old)$/;"	f	file:
__releases	fs/dcache.c	/^	__releases(dcache_lock)$/;"	f
__releases	fs/mbcache.c	/^	__releases(mb_cache_spinlock)$/;"	f
__releases	fs/super.c	/^static int grab_super(struct super_block *s) __releases(sb_lock)$/;"	f
__releases	kernel/rcutorture.c	/^static void rcu_bh_torture_read_unlock(int idx) __releases(RCU_BH)$/;"	f
__releases	kernel/rcutorture.c	/^static void rcu_torture_read_unlock(int idx) __releases(RCU)$/;"	f
__releases	kernel/resource.c	/^	__releases(resource_lock)$/;"	f
__releases	mm/nommu.c	/^	__releases(nommu_region_sem)$/;"	f
__remove_assoc_queue	fs/buffer.c	/^static void __remove_assoc_queue(struct buffer_head *bh)$/;"	f	file:
__remove_from_page_cache	mm/filemap.c	/^void __remove_from_page_cache(struct page *page)$/;"	f
__remove_hrtimer	kernel/hrtimer.c	/^static void __remove_hrtimer(struct hrtimer *timer,$/;"	f	file:
__remove_mapping	mm/vmscan.c	/^static int __remove_mapping(struct address_space *mapping, struct page *page)$/;"	f	file:
__remove_pages	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__remove_pages);$/;"	v
__remove_pages	mm/memory_hotplug.c	/^int __remove_pages(struct zone *zone, unsigned long phys_start_pfn,$/;"	f
__remove_section	mm/memory_hotplug.c	/^static int __remove_section(struct zone *zone, struct mem_section *ms)$/;"	f	file:
__remove_shared_vm_struct	mm/mmap.c	/^static void __remove_shared_vm_struct(struct vm_area_struct *vma,$/;"	f	file:
__remove_suid	mm/filemap.c	/^static int __remove_suid(struct dentry *dentry, int kill)$/;"	f	file:
__request_module	kernel/kmod.c	/^EXPORT_SYMBOL(__request_module);$/;"	v
__request_module	kernel/kmod.c	/^int __request_module(bool wait, const char *fmt, ...)$/;"	f
__request_region	kernel/resource.c	/^EXPORT_SYMBOL(__request_region);$/;"	v
__request_region	kernel/resource.c	/^struct resource * __request_region(struct resource *parent,$/;"	f
__request_resource	kernel/resource.c	/^static struct resource * __request_resource(struct resource *root, struct resource *new)$/;"	f	file:
__reserve	mm/bootmem.c	/^static int __init __reserve(bootmem_data_t *bdata, unsigned long sidx,$/;"	f	file:
__reserve_bp_slot	kernel/hw_breakpoint.c	/^static int __reserve_bp_slot(struct perf_event *bp)$/;"	f	file:
__reserve_region_with_split	kernel/resource.c	/^static void __init __reserve_region_with_split(struct resource *root,$/;"	f	file:
__rmqueue	mm/page_alloc.c	/^static struct page *__rmqueue(struct zone *zone, unsigned int order,$/;"	f	file:
__rmqueue_fallback	mm/page_alloc.c	/^__rmqueue_fallback(struct zone *zone, int order, int start_migratetype)$/;"	f	file:
__rmqueue_smallest	mm/page_alloc.c	/^struct page *__rmqueue_smallest(struct zone *zone, unsigned int order,$/;"	f	file:
__round_jiffies	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies);$/;"	v
__round_jiffies	kernel/timer.c	/^unsigned long __round_jiffies(unsigned long j, int cpu)$/;"	f
__round_jiffies_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies_relative);$/;"	v
__round_jiffies_relative	kernel/timer.c	/^unsigned long __round_jiffies_relative(unsigned long j, int cpu)$/;"	f
__round_jiffies_up	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies_up);$/;"	v
__round_jiffies_up	kernel/timer.c	/^unsigned long __round_jiffies_up(unsigned long j, int cpu)$/;"	f
__round_jiffies_up_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(__round_jiffies_up_relative);$/;"	v
__round_jiffies_up_relative	kernel/timer.c	/^unsigned long __round_jiffies_up_relative(unsigned long j, int cpu)$/;"	f
__rt_mutex_adjust_prio	kernel/rtmutex.c	/^static void __rt_mutex_adjust_prio(struct task_struct *task)$/;"	f	file:
__rt_mutex_init	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(__rt_mutex_init);$/;"	v
__rt_mutex_init	kernel/rtmutex.c	/^void __rt_mutex_init(struct rt_mutex *lock, const char *name)$/;"	f
__rt_mutex_slowlock	kernel/rtmutex.c	/^__rt_mutex_slowlock(struct rt_mutex *lock, int state,$/;"	f	file:
__rt_schedulable	kernel/sched.c	/^static int __rt_schedulable(struct task_group *tg, u64 period, u64 runtime)$/;"	f	file:
__run_hrtimer	kernel/hrtimer.c	/^static void __run_hrtimer(struct hrtimer *timer, ktime_t *now)$/;"	f	file:
__run_timers	kernel/timer.c	/^static inline void __run_timers(struct tvec_base *base)$/;"	f	file:
__rwsem_do_wake	lib/rwsem-spinlock.c	/^__rwsem_do_wake(struct rw_semaphore *sem, int wakewrite)$/;"	f	file:
__rwsem_wake_one_writer	lib/rwsem-spinlock.c	/^__rwsem_wake_one_writer(struct rw_semaphore *sem)$/;"	f	file:
__save_stack_trace	mm/kmemleak.c	/^static int __save_stack_trace(unsigned long *trace)$/;"	f	file:
__sched_fork	kernel/sched.c	/^static void __sched_fork(struct task_struct *p)$/;"	f	file:
__sched_info_switch	kernel/sched_stats.h	/^__sched_info_switch(struct task_struct *prev, struct task_struct *next)$/;"	f
__sched_period	kernel/sched_fair.c	/^static u64 __sched_period(unsigned long nr_running)$/;"	f	file:
__sched_setscheduler	kernel/sched.c	/^static int __sched_setscheduler(struct task_struct *p, int policy,$/;"	f	file:
__schedule_bug	kernel/sched.c	/^static noinline void __schedule_bug(struct task_struct *prev)$/;"	f	file:
__section_nr	mm/sparse.c	/^int __section_nr(struct mem_section* ms)$/;"	f
__secure_computing	kernel/seccomp.c	/^void __secure_computing(int this_syscall)$/;"	f
__send_remote_softirq	kernel/softirq.c	/^EXPORT_SYMBOL(__send_remote_softirq);$/;"	v
__send_remote_softirq	kernel/softirq.c	/^void __send_remote_softirq(struct call_single_data *cp, int cpu, int this_cpu, int softirq)$/;"	f
__send_signal	kernel/signal.c	/^static int __send_signal(int sig, struct siginfo *info, struct task_struct *t,$/;"	f	file:
__seq_open_private	fs/seq_file.c	/^EXPORT_SYMBOL(__seq_open_private);$/;"	v
__seq_open_private	fs/seq_file.c	/^void *__seq_open_private(struct file *f, const struct seq_operations *ops,$/;"	f
__set_page_dirty	fs/buffer.c	/^static void __set_page_dirty(struct page *page,$/;"	f	file:
__set_page_dirty_buffers	fs/buffer.c	/^EXPORT_SYMBOL(__set_page_dirty_buffers);$/;"	v
__set_page_dirty_buffers	fs/buffer.c	/^int __set_page_dirty_buffers(struct page *page)$/;"	f
__set_page_dirty_no_writeback	mm/page-writeback.c	/^int __set_page_dirty_no_writeback(struct page *page)$/;"	f
__set_page_dirty_nobuffers	mm/page-writeback.c	/^EXPORT_SYMBOL(__set_page_dirty_nobuffers);$/;"	v
__set_page_dirty_nobuffers	mm/page-writeback.c	/^int __set_page_dirty_nobuffers(struct page *page)$/;"	f
__set_page_locked	include/linux/pagemap.h	/^static inline void __set_page_locked(struct page *page)$/;"	f
__set_personality	kernel/exec_domain.c	/^EXPORT_SYMBOL(__set_personality);$/;"	v
__set_personality	kernel/exec_domain.c	/^__set_personality(u_long personality)$/;"	f
__set_se_shares	kernel/sched.c	/^static void __set_se_shares(struct sched_entity *se, unsigned long shares)$/;"	f	file:
__set_special_pids	kernel/exit.c	/^void __set_special_pids(struct pid *pid)$/;"	f
__set_task_cpu	kernel/sched.c	/^static inline void __set_task_cpu(struct task_struct *p, unsigned int cpu)$/;"	f	file:
__setscheduler	kernel/sched.c	/^__setscheduler(struct rq *rq, struct task_struct *p, int policy, int prio)$/;"	f	file:
__shrink_dcache_sb	fs/dcache.c	/^static void __shrink_dcache_sb(struct super_block *sb, int *count, int flags)$/;"	f	file:
__si_special	kernel/signal.c	1277;"	d	file:
__sigqueue_alloc	kernel/signal.c	/^__sigqueue_alloc(int sig, struct task_struct *t, gfp_t flags, int override_rlimit)$/;"	f	file:
__sigqueue_free	kernel/signal.c	/^static void __sigqueue_free(struct sigqueue *q)$/;"	f	file:
__slab_alloc	mm/slub.c	/^static void *__slab_alloc(struct kmem_cache *s, gfp_t gfpflags, int node,$/;"	f	file:
__slab_error	mm/slab.c	/^static void __slab_error(const char *function, struct kmem_cache *cachep,$/;"	f	file:
__slab_free	mm/slub.c	/^static void __slab_free(struct kmem_cache *s, struct page *page,$/;"	f	file:
__sleep_on_page_lock	mm/filemap.c	/^static int __sleep_on_page_lock(void *word)$/;"	f	file:
__smp_call_function_single	kernel/smp.c	/^void __smp_call_function_single(int cpu, struct call_single_data *data,$/;"	f
__splice_from_pipe	fs/splice.c	/^EXPORT_SYMBOL(__splice_from_pipe);$/;"	v
__splice_from_pipe	fs/splice.c	/^ssize_t __splice_from_pipe(struct pipe_inode_info *pipe, struct splice_desc *sd,$/;"	f
__split_vma	mm/mmap.c	/^static int __split_vma(struct mm_struct * mm, struct vm_area_struct * vma,$/;"	f	file:
__srcu_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(__srcu_notifier_call_chain);$/;"	v
__srcu_notifier_call_chain	kernel/notifier.c	/^int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,$/;"	f
__stack_chk_fail	kernel/panic.c	/^EXPORT_SYMBOL(__stack_chk_fail);$/;"	v
__stack_chk_fail	kernel/panic.c	/^void __stack_chk_fail(void)$/;"	f
__stop_machine	kernel/stop_machine.c	/^int __stop_machine(int (*fn)(void *), void *data, const struct cpumask *cpus)$/;"	f
__swap_duplicate	mm/swapfile.c	/^static int __swap_duplicate(swp_entry_t entry, unsigned char usage)$/;"	f	file:
__symbol_get	kernel/module.c	/^EXPORT_SYMBOL_GPL(__symbol_get);$/;"	v
__symbol_get	kernel/module.c	/^void *__symbol_get(const char *symbol)$/;"	f
__symbol_put	kernel/module.c	/^EXPORT_SYMBOL(__symbol_put);$/;"	v
__symbol_put	kernel/module.c	/^void __symbol_put(const char *symbol)$/;"	f
__sync_blockdev	fs/block_dev.c	/^int __sync_blockdev(struct block_device *bdev, int wait)$/;"	f
__sync_blockdev	fs/internal.h	/^static inline int __sync_blockdev(struct block_device *bdev, int wait)$/;"	f
__sync_filesystem	fs/sync.c	/^static int __sync_filesystem(struct super_block *sb, int wait)$/;"	f	file:
__synchronize_srcu	kernel/srcu.c	/^void __synchronize_srcu(struct srcu_struct *sp, void (*sync_func)(void))$/;"	f
__sysctl_head_next	kernel/sysctl.c	/^struct ctl_table_header *__sysctl_head_next(struct nsproxy *namespaces,$/;"	f
__task_pid_nr_ns	kernel/pid.c	/^EXPORT_SYMBOL(__task_pid_nr_ns);$/;"	v
__task_pid_nr_ns	kernel/pid.c	/^pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type,$/;"	f
__tasklet_hi_schedule	kernel/softirq.c	/^EXPORT_SYMBOL(__tasklet_hi_schedule);$/;"	v
__tasklet_hi_schedule	kernel/softirq.c	/^void __tasklet_hi_schedule(struct tasklet_struct *t)$/;"	f
__tasklet_hi_schedule_first	kernel/softirq.c	/^EXPORT_SYMBOL(__tasklet_hi_schedule_first);$/;"	v
__tasklet_hi_schedule_first	kernel/softirq.c	/^void __tasklet_hi_schedule_first(struct tasklet_struct *t)$/;"	f
__tasklet_hrtimer_trampoline	kernel/softirq.c	/^static void __tasklet_hrtimer_trampoline(unsigned long data)$/;"	f	file:
__tasklet_schedule	kernel/softirq.c	/^EXPORT_SYMBOL(__tasklet_schedule);$/;"	v
__tasklet_schedule	kernel/softirq.c	/^void __tasklet_schedule(struct tasklet_struct *t)$/;"	f
__test_page_isolated_in_pageblock	mm/page_isolation.c	/^__test_page_isolated_in_pageblock(unsigned long pfn, unsigned long end_pfn)$/;"	f	file:
__thaw_process	kernel/freezer.c	/^static int __thaw_process(struct task_struct *p)$/;"	f	file:
__timer_stats_timer_set_start_info	kernel/timer.c	/^void __timer_stats_timer_set_start_info(struct timer_list *timer, void *addr)$/;"	f
__touch_mnt_namespace	fs/namespace.c	/^static void __touch_mnt_namespace(struct mnt_namespace *ns)$/;"	f	file:
__touch_softlockup_watchdog	kernel/softlockup.c	/^static void __touch_softlockup_watchdog(void)$/;"	f	file:
__try_remote_softirq	kernel/softirq.c	/^static int __try_remote_softirq(struct call_single_data *cp, int cpu, int softirq)$/;"	f	file:
__try_stop_module	kernel/module.c	/^static int __try_stop_module(void *_sref)$/;"	f	file:
__try_to_reclaim_swap	mm/swapfile.c	/^__try_to_reclaim_swap(struct swap_info_struct *si, unsigned long offset)$/;"	f	file:
__uidhashfn	kernel/user.c	35;"	d	file:
__unhash_process	kernel/exit.c	/^static void __unhash_process(struct task_struct *p)$/;"	f	file:
__unlink_module	kernel/module.c	/^static int __unlink_module(void *_mod)$/;"	f	file:
__unmap_hugepage_range	mm/hugetlb.c	/^void __unmap_hugepage_range(struct vm_area_struct *vma, unsigned long start,$/;"	f
__unregister_chrdev	fs/char_dev.c	/^EXPORT_SYMBOL(__unregister_chrdev);$/;"	v
__unregister_chrdev	fs/char_dev.c	/^void __unregister_chrdev(unsigned int major, unsigned int baseminor,$/;"	f
__unregister_chrdev_region	fs/char_dev.c	/^__unregister_chrdev_region(unsigned major, unsigned baseminor, int minorct)$/;"	f	file:
__unregister_kprobe_bottom	kernel/kprobes.c	/^static void __kprobes __unregister_kprobe_bottom(struct kprobe *p)$/;"	f	file:
__unregister_kprobe_top	kernel/kprobes.c	/^static int __kprobes __unregister_kprobe_top(struct kprobe *p)$/;"	f	file:
__unused	kernel/sysctl_binary.c	/^	compat_ulong_t	__unused[4];$/;"	m	struct:compat_sysctl_args	file:
__up	kernel/semaphore.c	/^static noinline void __sched __up(struct semaphore *sem)$/;"	f	file:
__up_read	lib/rwsem-spinlock.c	/^void __up_read(struct rw_semaphore *sem)$/;"	f
__up_write	lib/rwsem-spinlock.c	/^void __up_write(struct rw_semaphore *sem)$/;"	f
__update_curr	kernel/sched_fair.c	/^__update_curr(struct cfs_rq *cfs_rq, struct sched_entity *curr,$/;"	f	file:
__validate_process_creds	kernel/cred.c	/^EXPORT_SYMBOL(__validate_process_creds);$/;"	v
__validate_process_creds	kernel/cred.c	/^void __validate_process_creds(struct task_struct *tsk,$/;"	f
__vfs_follow_link	fs/namei.c	/^static __always_inline int __vfs_follow_link(struct nameidata *nd, const char *link)$/;"	f	file:
__vfs_setxattr_noperm	fs/xattr.c	/^int __vfs_setxattr_noperm(struct dentry *dentry, const char *name,$/;"	f
__visit_domain_allocation_hell	kernel/sched.c	/^static enum s_alloc __visit_domain_allocation_hell(struct s_data *d,$/;"	f	file:
__vm_enough_memory	mm/mmap.c	/^int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)$/;"	f
__vm_enough_memory	mm/nommu.c	/^int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)$/;"	f
__vma_link	mm/mmap.c	/^__vma_link(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__vma_link_file	mm/mmap.c	/^static void __vma_link_file(struct vm_area_struct *vma)$/;"	f	file:
__vma_link_list	mm/mmap.c	/^__vma_link_list(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__vma_link_rb	mm/mmap.c	/^void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__vma_unlink	mm/mmap.c	/^__vma_unlink(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__vmalloc	mm/nommu.c	/^EXPORT_SYMBOL(__vmalloc);$/;"	v
__vmalloc	mm/nommu.c	/^void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc	mm/vmalloc.c	/^EXPORT_SYMBOL(__vmalloc);$/;"	v
__vmalloc	mm/vmalloc.c	/^void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc_area	mm/vmalloc.c	/^void *__vmalloc_area(struct vm_struct *area, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc_area_node	mm/vmalloc.c	/^static void *__vmalloc_area_node(struct vm_struct *area, gfp_t gfp_mask,$/;"	f	file:
__vmalloc_node	mm/vmalloc.c	/^static void *__vmalloc_node(unsigned long size, unsigned long align,$/;"	f	file:
__vunmap	mm/vmalloc.c	/^static void __vunmap(const void *addr, int deallocate_pages)$/;"	f	file:
__wait_on_bit	kernel/wait.c	/^EXPORT_SYMBOL(__wait_on_bit);$/;"	v
__wait_on_bit	kernel/wait.c	/^__wait_on_bit(wait_queue_head_t *wq, struct wait_bit_queue *q,$/;"	f
__wait_on_bit_lock	kernel/wait.c	/^EXPORT_SYMBOL(__wait_on_bit_lock);$/;"	v
__wait_on_bit_lock	kernel/wait.c	/^__wait_on_bit_lock(wait_queue_head_t *wq, struct wait_bit_queue *q,$/;"	f
__wait_on_buffer	fs/buffer.c	/^EXPORT_SYMBOL(__wait_on_buffer);$/;"	v
__wait_on_buffer	fs/buffer.c	/^void __wait_on_buffer(struct buffer_head * bh)$/;"	f
__wait_on_freeing_inode	fs/inode.c	/^static void __wait_on_freeing_inode(struct inode *inode)$/;"	f	file:
__wake_up	kernel/sched.c	/^EXPORT_SYMBOL(__wake_up);$/;"	v
__wake_up	kernel/sched.c	/^void __wake_up(wait_queue_head_t *q, unsigned int mode,$/;"	f
__wake_up_bit	kernel/wait.c	/^EXPORT_SYMBOL(__wake_up_bit);$/;"	v
__wake_up_bit	kernel/wait.c	/^void __wake_up_bit(wait_queue_head_t *wq, void *word, int bit)$/;"	f
__wake_up_common	kernel/sched.c	/^static void __wake_up_common(wait_queue_head_t *q, unsigned int mode,$/;"	f	file:
__wake_up_locked	kernel/sched.c	/^void __wake_up_locked(wait_queue_head_t *q, unsigned int mode)$/;"	f
__wake_up_locked_key	kernel/sched.c	/^void __wake_up_locked_key(wait_queue_head_t *q, unsigned int mode, void *key)$/;"	f
__wake_up_parent	kernel/exit.c	/^void __wake_up_parent(struct task_struct *p, struct task_struct *parent)$/;"	f
__wake_up_sync	kernel/sched.c	/^EXPORT_SYMBOL_GPL(__wake_up_sync);	\/* For internal use only *\/$/;"	v
__wake_up_sync	kernel/sched.c	/^void __wake_up_sync(wait_queue_head_t *q, unsigned int mode, int nr_exclusive)$/;"	f
__wake_up_sync_key	kernel/sched.c	/^EXPORT_SYMBOL_GPL(__wake_up_sync_key);$/;"	v
__wake_up_sync_key	kernel/sched.c	/^void __wake_up_sync_key(wait_queue_head_t *q, unsigned int mode,$/;"	f
__writepage	mm/page-writeback.c	/^static int __writepage(struct page *page, struct writeback_control *wbc,$/;"	f	file:
__xip_file_write	mm/filemap_xip.c	/^__xip_file_write(struct file *filp, const char __user *buf,$/;"	f	file:
__xip_sparse_page	mm/filemap_xip.c	/^static struct page *__xip_sparse_page;$/;"	v	typeref:struct:page	file:
__xip_unmap	mm/filemap_xip.c	/^__xip_unmap (struct address_space * mapping,$/;"	f	file:
__zone_pcp_update	mm/page_alloc.c	/^static int __zone_pcp_update(void *data)$/;"	f	file:
__zone_reclaim	mm/vmscan.c	/^static int __zone_reclaim(struct zone *zone, gfp_t gfp_mask, unsigned int order)$/;"	f	file:
_call_console_drivers	kernel/printk.c	/^static void _call_console_drivers(unsigned start,$/;"	f	file:
_cond_resched	kernel/sched.c	/^EXPORT_SYMBOL(_cond_resched);$/;"	v
_cond_resched	kernel/sched.c	/^int __sched _cond_resched(void)$/;"	f
_count	mm/slob.c	/^			atomic_t _count;	\/* mandatory *\/$/;"	m	struct:slob_page::__anon8::__anon9	file:
_cpu_down	kernel/cpu.c	/^static int __ref _cpu_down(unsigned int cpu, int tasks_frozen)$/;"	f	file:
_cpu_up	kernel/cpu.c	/^static int __cpuinit _cpu_up(unsigned int cpu, int tasks_frozen)$/;"	f	file:
_d_rehash	fs/dcache.c	/^static void _d_rehash(struct dentry * entry)$/;"	f	file:
_f	kernel/compat.c	/^	char _f[20-2*sizeof(u32)-sizeof(int)];$/;"	m	struct:compat_sysinfo	file:
_kfifo_init	kernel/kfifo.c	/^static void _kfifo_init(struct kfifo *fifo, void *buffer,$/;"	f	file:
_local_bh_enable	kernel/softirq.c	/^EXPORT_SYMBOL(_local_bh_enable);$/;"	v
_local_bh_enable	kernel/softirq.c	/^void _local_bh_enable(void)$/;"	f
_local_bh_enable_ip	kernel/softirq.c	/^static inline void _local_bh_enable_ip(unsigned long ip)$/;"	f	file:
_pick_next_task_rt	kernel/sched_rt.c	/^static struct task_struct *_pick_next_task_rt(struct rq *rq)$/;"	f	file:
_proc_do_string	kernel/sysctl.c	/^static int _proc_do_string(void* data, int maxlen, int write,$/;"	f	file:
_raw_read_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock);$/;"	v
_raw_read_lock	kernel/spinlock.c	/^void __lockfunc _raw_read_lock(rwlock_t *lock)$/;"	f
_raw_read_lock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock_bh);$/;"	v
_raw_read_lock_bh	kernel/spinlock.c	/^void __lockfunc _raw_read_lock_bh(rwlock_t *lock)$/;"	f
_raw_read_lock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock_irq);$/;"	v
_raw_read_lock_irq	kernel/spinlock.c	/^void __lockfunc _raw_read_lock_irq(rwlock_t *lock)$/;"	f
_raw_read_lock_irqsave	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_lock_irqsave);$/;"	v
_raw_read_lock_irqsave	kernel/spinlock.c	/^unsigned long __lockfunc _raw_read_lock_irqsave(rwlock_t *lock)$/;"	f
_raw_read_trylock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_trylock);$/;"	v
_raw_read_trylock	kernel/spinlock.c	/^int __lockfunc _raw_read_trylock(rwlock_t *lock)$/;"	f
_raw_read_unlock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock);$/;"	v
_raw_read_unlock	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock(rwlock_t *lock)$/;"	f
_raw_read_unlock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock_bh);$/;"	v
_raw_read_unlock_bh	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock_bh(rwlock_t *lock)$/;"	f
_raw_read_unlock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock_irq);$/;"	v
_raw_read_unlock_irq	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock_irq(rwlock_t *lock)$/;"	f
_raw_read_unlock_irqrestore	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_read_unlock_irqrestore);$/;"	v
_raw_read_unlock_irqrestore	kernel/spinlock.c	/^void __lockfunc _raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)$/;"	f
_raw_spin_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock);$/;"	v
_raw_spin_lock	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_bh);$/;"	v
_raw_spin_lock_bh	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_bh(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_irq);$/;"	v
_raw_spin_lock_irq	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_irq(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_irqsave	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_irqsave);$/;"	v
_raw_spin_lock_irqsave	kernel/spinlock.c	/^unsigned long __lockfunc _raw_spin_lock_irqsave(raw_spinlock_t *lock)$/;"	f
_raw_spin_lock_irqsave_nested	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_irqsave_nested);$/;"	v
_raw_spin_lock_irqsave_nested	kernel/spinlock.c	/^unsigned long __lockfunc _raw_spin_lock_irqsave_nested(raw_spinlock_t *lock,$/;"	f
_raw_spin_lock_nest_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_nest_lock);$/;"	v
_raw_spin_lock_nest_lock	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_nest_lock(raw_spinlock_t *lock,$/;"	f
_raw_spin_lock_nested	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_lock_nested);$/;"	v
_raw_spin_lock_nested	kernel/spinlock.c	/^void __lockfunc _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)$/;"	f
_raw_spin_trylock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_trylock);$/;"	v
_raw_spin_trylock	kernel/spinlock.c	/^int __lockfunc _raw_spin_trylock(raw_spinlock_t *lock)$/;"	f
_raw_spin_trylock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_trylock_bh);$/;"	v
_raw_spin_trylock_bh	kernel/spinlock.c	/^int __lockfunc _raw_spin_trylock_bh(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock);$/;"	v
_raw_spin_unlock	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock_bh);$/;"	v
_raw_spin_unlock_bh	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock_bh(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock_irq);$/;"	v
_raw_spin_unlock_irq	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock_irq(raw_spinlock_t *lock)$/;"	f
_raw_spin_unlock_irqrestore	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_spin_unlock_irqrestore);$/;"	v
_raw_spin_unlock_irqrestore	kernel/spinlock.c	/^void __lockfunc _raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)$/;"	f
_raw_write_lock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock);$/;"	v
_raw_write_lock	kernel/spinlock.c	/^void __lockfunc _raw_write_lock(rwlock_t *lock)$/;"	f
_raw_write_lock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock_bh);$/;"	v
_raw_write_lock_bh	kernel/spinlock.c	/^void __lockfunc _raw_write_lock_bh(rwlock_t *lock)$/;"	f
_raw_write_lock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock_irq);$/;"	v
_raw_write_lock_irq	kernel/spinlock.c	/^void __lockfunc _raw_write_lock_irq(rwlock_t *lock)$/;"	f
_raw_write_lock_irqsave	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_lock_irqsave);$/;"	v
_raw_write_lock_irqsave	kernel/spinlock.c	/^unsigned long __lockfunc _raw_write_lock_irqsave(rwlock_t *lock)$/;"	f
_raw_write_trylock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_trylock);$/;"	v
_raw_write_trylock	kernel/spinlock.c	/^int __lockfunc _raw_write_trylock(rwlock_t *lock)$/;"	f
_raw_write_unlock	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock);$/;"	v
_raw_write_unlock	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock(rwlock_t *lock)$/;"	f
_raw_write_unlock_bh	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock_bh);$/;"	v
_raw_write_unlock_bh	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock_bh(rwlock_t *lock)$/;"	f
_raw_write_unlock_irq	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock_irq);$/;"	v
_raw_write_unlock_irq	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock_irq(rwlock_t *lock)$/;"	f
_raw_write_unlock_irqrestore	kernel/spinlock.c	/^EXPORT_SYMBOL(_raw_write_unlock_irqrestore);$/;"	v
_raw_write_unlock_irqrestore	kernel/spinlock.c	/^void __lockfunc _raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)$/;"	f
_rcu_barrier	kernel/rcutree.c	/^static void _rcu_barrier(struct rcu_state *rsp,$/;"	f	file:
abe_pool	fs/aio.c	/^mempool_t *abe_pool;$/;"	v
abort_creds	kernel/cred.c	/^EXPORT_SYMBOL(abort_creds);$/;"	v
abort_creds	kernel/cred.c	/^void abort_creds(struct cred *new)$/;"	f
abort_exclusive_wait	kernel/wait.c	/^EXPORT_SYMBOL(abort_exclusive_wait);$/;"	v
abort_exclusive_wait	kernel/wait.c	/^void abort_exclusive_wait(wait_queue_head_t *q, wait_queue_t *wait,$/;"	f
abs_timeout	kernel/auditsc.c	/^			struct timespec		abs_timeout;$/;"	m	struct:audit_context::__anon22::__anon27	typeref:struct:audit_context::__anon22::__anon27::timespec	file:
absent_pages_in_range	mm/page_alloc.c	/^unsigned long __init absent_pages_in_range(unsigned long start_pfn,$/;"	f
access_process_vm	mm/memory.c	/^int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write)$/;"	f
access_process_vm	mm/nommu.c	/^int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write)$/;"	f
account_entity_dequeue	kernel/sched_fair.c	/^account_entity_dequeue(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
account_entity_enqueue	kernel/sched_fair.c	/^account_entity_enqueue(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
account_global_scheduler_latency	kernel/latencytop.c	/^account_global_scheduler_latency(struct task_struct *tsk, struct latency_record *lat)$/;"	f	file:
account_group_exec_runtime	kernel/sched_stats.h	/^static inline void account_group_exec_runtime(struct task_struct *tsk,$/;"	f
account_group_system_time	kernel/sched_stats.h	/^static inline void account_group_system_time(struct task_struct *tsk,$/;"	f
account_group_user_time	kernel/sched_stats.h	/^static inline void account_group_user_time(struct task_struct *tsk,$/;"	f
account_guest_time	kernel/sched.c	/^static void account_guest_time(struct task_struct *p, cputime_t cputime,$/;"	f	file:
account_idle_ticks	kernel/sched.c	/^void account_idle_ticks(unsigned long ticks)$/;"	f
account_idle_time	kernel/sched.c	/^void account_idle_time(cputime_t cputime)$/;"	f
account_kernel_stack	kernel/fork.c	/^static void account_kernel_stack(struct thread_info *ti, int account)$/;"	f	file:
account_locked_memory	mm/mlock.c	/^int account_locked_memory(struct mm_struct *mm, struct rlimit *rlim,$/;"	f
account_page_dirtied	mm/page-writeback.c	/^void account_page_dirtied(struct page *page, struct address_space *mapping)$/;"	f
account_process_tick	kernel/sched.c	/^void account_process_tick(struct task_struct *p, int user_tick)$/;"	f
account_steal_ticks	kernel/sched.c	/^void account_steal_ticks(unsigned long ticks)$/;"	f
account_steal_time	kernel/sched.c	/^void account_steal_time(cputime_t cputime)$/;"	f
account_system_time	kernel/sched.c	/^void account_system_time(struct task_struct *p, int hardirq_offset,$/;"	f
account_user_time	kernel/sched.c	/^void account_user_time(struct task_struct *p, cputime_t cputime,$/;"	f
accountable_mapping	mm/mmap.c	/^static inline int accountable_mapping(struct file *file, unsigned int vm_flags)$/;"	f	file:
acct_auto_close	kernel/acct.c	/^void acct_auto_close(struct super_block *sb)$/;"	f
acct_auto_close_mnt	kernel/acct.c	/^void acct_auto_close_mnt(struct vfsmount *m)$/;"	f
acct_clear_integrals	kernel/tsacct.c	/^void acct_clear_integrals(struct task_struct *tsk)$/;"	f
acct_collect	kernel/acct.c	/^void acct_collect(long exitcode, int group_dead)$/;"	f
acct_exit_ns	kernel/acct.c	/^void acct_exit_ns(struct pid_namespace *ns)$/;"	f
acct_file_reopen	kernel/acct.c	/^static void acct_file_reopen(struct bsd_acct_struct *acct, struct file *file,$/;"	f	file:
acct_init_pacct	kernel/acct.c	/^void acct_init_pacct(struct pacct_struct *pacct)$/;"	f
acct_on	kernel/acct.c	/^static int acct_on(char *name)$/;"	f	file:
acct_parm	kernel/acct.c	/^int acct_parm[3] = {4, 2, 30};$/;"	v
acct_process	kernel/acct.c	/^void acct_process(void)$/;"	f
acct_process_in_ns	kernel/acct.c	/^static void acct_process_in_ns(struct pid_namespace *ns)$/;"	f	file:
acct_stack_growth	mm/mmap.c	/^static int acct_stack_growth(struct vm_area_struct *vma, unsigned long size, unsigned long grow)$/;"	f	file:
acct_timeout	kernel/acct.c	/^static void acct_timeout(unsigned long x)$/;"	f	file:
acct_update_integrals	kernel/tsacct.c	/^void acct_update_integrals(struct task_struct *tsk)$/;"	f
accumulate_thread_rusage	kernel/sys.c	/^static void accumulate_thread_rusage(struct task_struct *t, struct rusage *r)$/;"	f	file:
acdirmax	fs/compat.c	/^	compat_int_t acdirmax;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
acdirmin	fs/compat.c	/^	compat_int_t acdirmin;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
ack_state	kernel/stop_machine.c	/^static void ack_state(void)$/;"	f	file:
acl_permission_check	fs/namei.c	/^static int acl_permission_check(struct inode *inode, int mask,$/;"	f	file:
acquire_console_sem	kernel/printk.c	/^EXPORT_SYMBOL(acquire_console_sem);$/;"	v
acquire_console_sem	kernel/printk.c	/^void acquire_console_sem(void)$/;"	f
acquire_console_semaphore_for_printk	kernel/printk.c	/^static int acquire_console_semaphore_for_printk(unsigned int cpu)$/;"	f	file:
acregmax	fs/compat.c	/^	compat_int_t acregmax;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
acregmin	fs/compat.c	/^	compat_int_t acregmin;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
action	mm/memory-failure.c	/^	int (*action)(struct page *p, unsigned long pfn);$/;"	m	struct:page_state	file:
action_name	mm/memory-failure.c	/^static const char *action_name[] = {$/;"	v	file:
action_result	mm/memory-failure.c	/^static void action_result(unsigned long pfn, char *msg, int result)$/;"	f	file:
actions	kernel/taskstats.c	/^enum actions {$/;"	g	file:
activate_page	mm/swap.c	/^void activate_page(struct page *page)$/;"	f
activate_task	kernel/sched.c	/^static void activate_task(struct rq *rq, struct task_struct *p, int wakeup)$/;"	f	file:
active	kernel/acct.c	/^	volatile int		active;$/;"	m	struct:bsd_acct_struct	file:
active	kernel/sched.c	/^	struct rt_prio_array active;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::rt_prio_array	file:
active	kernel/stop_machine.c	/^static struct stop_machine_data active, idle;$/;"	v	typeref:struct:stop_machine_data	file:
active	mm/mempolicy.c	/^	unsigned long active;$/;"	m	struct:numa_maps	file:
active_balance	kernel/sched.c	/^	int active_balance;$/;"	m	struct:rq	file:
active_cpus	kernel/stop_machine.c	/^static const struct cpumask *active_cpus;$/;"	v	typeref:struct:cpumask	file:
active_load_balance	kernel/sched.c	/^static void active_load_balance(struct rq *busiest_rq, int busiest_cpu)$/;"	f	file:
active_writer	kernel/cpu.c	/^	struct task_struct *active_writer;$/;"	m	struct:__anon32	typeref:struct:__anon32::task_struct	file:
actual_subsys_bits	kernel/cgroup.c	/^	unsigned long actual_subsys_bits;$/;"	m	struct:cgroupfs_root	file:
adaptive_gran	kernel/sched_fair.c	/^adaptive_gran(struct sched_entity *curr, struct sched_entity *se)$/;"	f	file:
add_active_range	mm/page_alloc.c	/^void __init add_active_range(unsigned int nid, unsigned long start_pfn,$/;"	f
add_aggr_kprobe	kernel/kprobes.c	/^static inline void add_aggr_kprobe(struct kprobe *ap, struct kprobe *p)$/;"	f	file:
add_bd_holder	fs/block_dev.c	/^static int add_bd_holder(struct block_device *bdev, struct bd_holder *bo)$/;"	f	file:
add_caller	mm/slab.c	/^static inline int add_caller(unsigned long *n, unsigned long v)$/;"	f	file:
add_cfs_task_weight	kernel/sched_fair.c	/^add_cfs_task_weight(struct cfs_rq *cfs_rq, unsigned long weight)$/;"	f	file:
add_del_listener	kernel/taskstats.c	/^static int add_del_listener(pid_t pid, const struct cpumask *mask, int isadd)$/;"	f	file:
add_element	mm/mempool.c	/^static void add_element(mempool_t *pool, void *element)$/;"	f	file:
add_event_to_ctx	kernel/perf_event.c	/^static void add_event_to_ctx(struct perf_event *event,$/;"	f	file:
add_full	mm/slub.c	/^static inline void add_full(struct kmem_cache_node *n, struct page *page) {}$/;"	f	file:
add_full	mm/slub.c	/^static void add_full(struct kmem_cache_node *n, struct page *page)$/;"	f	file:
add_kallsyms	kernel/module.c	/^static inline void add_kallsyms(struct module *mod,$/;"	f	file:
add_kallsyms	kernel/module.c	/^static void add_kallsyms(struct module *mod,$/;"	f	file:
add_location	mm/slub.c	/^static int add_location(struct loc_track *t, struct kmem_cache *s,$/;"	f	file:
add_lock_to_list	kernel/lockdep.c	/^static int add_lock_to_list(struct lock_class *class, struct lock_class *this,$/;"	f	file:
add_memory	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(add_memory);$/;"	v
add_memory	mm/memory_hotplug.c	/^int __ref add_memory(int nid, u64 start, u64 size)$/;"	f
add_mm_rss	mm/memory.c	/^static inline void add_mm_rss(struct mm_struct *mm, int file_rss, int anon_rss)$/;"	f	file:
add_new_kprobe	kernel/kprobes.c	/^static int __kprobes add_new_kprobe(struct kprobe *ap, struct kprobe *p)$/;"	f	file:
add_nommu_region	mm/nommu.c	/^static void add_nommu_region(struct vm_region *region)$/;"	f	file:
add_notes_attrs	kernel/module.c	/^static inline void add_notes_attrs(struct module *mod, unsigned int nsect,$/;"	f	file:
add_notes_attrs	kernel/module.c	/^static void add_notes_attrs(struct module *mod, unsigned int nsect,$/;"	f	file:
add_page_to_unevictable_list	mm/swap.c	/^void add_page_to_unevictable_list(struct page *page)$/;"	f
add_page_wait_queue	mm/filemap.c	/^EXPORT_SYMBOL_GPL(add_page_wait_queue);$/;"	v
add_page_wait_queue	mm/filemap.c	/^void add_page_wait_queue(struct page *page, wait_queue_t *waiter)$/;"	f
add_partial	mm/slub.c	/^static void add_partial(struct kmem_cache_node *n,$/;"	f	file:
add_preempt_count	kernel/sched.c	/^EXPORT_SYMBOL(add_preempt_count);$/;"	v
add_preempt_count	kernel/sched.c	/^void __kprobes add_preempt_count(int val)$/;"	f
add_preferred_console	kernel/printk.c	/^int add_preferred_console(char *name, int idx, char *options)$/;"	f
add_scan_area	mm/kmemleak.c	/^static void add_scan_area(unsigned long ptr, size_t size, gfp_t gfp)$/;"	f	file:
add_sect_attrs	kernel/module.c	/^static inline void add_sect_attrs(struct module *mod, unsigned int nsect,$/;"	f	file:
add_sect_attrs	kernel/module.c	/^static void add_sect_attrs(struct module *mod, unsigned int nsect,$/;"	f	file:
add_swap_count_continuation	mm/swapfile.c	/^int add_swap_count_continuation(swp_entry_t entry, gfp_t gfp_mask)$/;"	f
add_swap_extent	mm/swapfile.c	/^add_swap_extent(struct swap_info_struct *sis, unsigned long start_page,$/;"	f	file:
add_symlink	fs/block_dev.c	/^static int add_symlink(struct kobject *from, struct kobject *to)$/;"	f	file:
add_sysfs_param	kernel/params.c	/^static __modinit int add_sysfs_param(struct module_kobject *mk,$/;"	f	file:
add_taint	kernel/panic.c	/^EXPORT_SYMBOL(add_taint);$/;"	v
add_taint	kernel/panic.c	/^void add_taint(unsigned flag)$/;"	f
add_taint_module	kernel/module.c	/^static inline void add_taint_module(struct module *mod, unsigned flag)$/;"	f	file:
add_timer	kernel/timer.c	/^EXPORT_SYMBOL(add_timer);$/;"	v
add_timer	kernel/timer.c	/^void add_timer(struct timer_list *timer)$/;"	f
add_timer_on	kernel/timer.c	/^EXPORT_SYMBOL_GPL(add_timer_on);$/;"	v
add_timer_on	kernel/timer.c	/^void add_timer_on(struct timer_list *timer, int cpu)$/;"	f
add_to_kill	mm/memory-failure.c	/^static void add_to_kill(struct task_struct *tsk, struct page *p,$/;"	f	file:
add_to_page_cache	include/linux/pagemap.h	/^static inline int add_to_page_cache(struct page *page,$/;"	f
add_to_page_cache_locked	mm/filemap.c	/^EXPORT_SYMBOL(add_to_page_cache_locked);$/;"	v
add_to_page_cache_locked	mm/filemap.c	/^int add_to_page_cache_locked(struct page *page, struct address_space *mapping,$/;"	f
add_to_page_cache_lru	mm/filemap.c	/^EXPORT_SYMBOL_GPL(add_to_page_cache_lru);$/;"	v
add_to_page_cache_lru	mm/filemap.c	/^int add_to_page_cache_lru(struct page *page, struct address_space *mapping,$/;"	f
add_to_swap	mm/swap_state.c	/^int add_to_swap(struct page *page)$/;"	f
add_to_swap_cache	mm/swap_state.c	/^int add_to_swap_cache(struct page *page, swp_entry_t entry, gfp_t gfp_mask)$/;"	f
add_total	mm/swap_state.c	/^	unsigned long add_total;$/;"	m	struct:__anon11	file:
add_tracepoint	kernel/tracepoint.c	/^static struct tracepoint_entry *add_tracepoint(const char *name)$/;"	f	file:
add_vma_to_mm	mm/nommu.c	/^static void add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
add_wait_queue	kernel/wait.c	/^EXPORT_SYMBOL(add_wait_queue);$/;"	v
add_wait_queue	kernel/wait.c	/^void add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
add_wait_queue_exclusive	kernel/wait.c	/^EXPORT_SYMBOL(add_wait_queue_exclusive);$/;"	v
add_wait_queue_exclusive	kernel/wait.c	/^void add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
addr	fs/compat_ioctl.c	/^	u16 addr;$/;"	m	struct:i2c_msg32	file:
addr	mm/memory-failure.c	/^	unsigned long addr;$/;"	m	struct:to_kill	file:
addr	mm/migrate.c	/^	unsigned long addr;$/;"	m	struct:page_to_node	file:
addr	mm/slab.c	/^	void *addr;$/;"	m	struct:slab_rcu	file:
addr	mm/slub.c	/^	unsigned long addr;	\/* Called from address *\/$/;"	m	struct:track	file:
addr	mm/slub.c	/^	unsigned long addr;$/;"	m	struct:location	file:
addr_to_vb_idx	mm/vmalloc.c	/^static unsigned long addr_to_vb_idx(unsigned long addr)$/;"	f	file:
addr_valid	mm/memory-failure.c	/^	unsigned addr_valid:1;$/;"	m	struct:to_kill	file:
address	kernel/module.c	/^	unsigned long address;$/;"	m	struct:module_sect_attr	file:
address	mm/ksm.c	/^	unsigned long address;		\/* + low bits used for flags below *\/$/;"	m	struct:rmap_item	file:
address	mm/ksm.c	/^	unsigned long address;$/;"	m	struct:ksm_scan	file:
adjust_pool_surplus	mm/hugetlb.c	/^static int adjust_pool_surplus(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
adjust_resource	kernel/resource.c	/^EXPORT_SYMBOL(adjust_resource);$/;"	v
adjust_resource	kernel/resource.c	/^int adjust_resource(struct resource *res, resource_size_t start, resource_size_t size)$/;"	f
adjust_zone_range_for_zone_movable	mm/page_alloc.c	/^static void __meminit adjust_zone_range_for_zone_movable(int nid,$/;"	f	file:
age_stamp	kernel/sched.c	/^	u64 age_stamp;$/;"	m	struct:rq	file:
aggr_break_handler	kernel/kprobes.c	/^static int __kprobes aggr_break_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
aggr_fault_handler	kernel/kprobes.c	/^static int __kprobes aggr_fault_handler(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
aggr_post_handler	kernel/kprobes.c	/^static void __kprobes aggr_post_handler(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
aggr_pre_handler	kernel/kprobes.c	/^static int __kprobes aggr_pre_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
aio_advance_iovec	fs/aio.c	/^static void aio_advance_iovec(struct kiocb *iocb, ssize_t ret)$/;"	f	file:
aio_batch_add	fs/aio.c	/^static void aio_batch_add(struct address_space *mapping,$/;"	f	file:
aio_batch_entry	fs/aio.c	/^struct aio_batch_entry {$/;"	s	file:
aio_batch_free	fs/aio.c	/^static void aio_batch_free(struct hlist_head *batch_hash)$/;"	f	file:
aio_cancel_all	fs/aio.c	/^static void aio_cancel_all(struct kioctx *ctx)$/;"	f	file:
aio_complete	fs/aio.c	/^EXPORT_SYMBOL(aio_complete);$/;"	v
aio_complete	fs/aio.c	/^int aio_complete(struct kiocb *iocb, long res, long res2)$/;"	f
aio_fdsync	fs/aio.c	/^static ssize_t aio_fdsync(struct kiocb *iocb)$/;"	f	file:
aio_fput_routine	fs/aio.c	/^static void aio_fput_routine(struct work_struct *data)$/;"	f	file:
aio_free_ring	fs/aio.c	/^static void aio_free_ring(struct kioctx *ctx)$/;"	f	file:
aio_fsync	fs/aio.c	/^static ssize_t aio_fsync(struct kiocb *iocb)$/;"	f	file:
aio_get_req	fs/aio.c	/^static inline struct kiocb *aio_get_req(struct kioctx *ctx)$/;"	f	file:
aio_kick_handler	fs/aio.c	/^static void aio_kick_handler(struct work_struct *work)$/;"	f	file:
aio_max_nr	fs/aio.c	/^unsigned long aio_max_nr = 0x10000; \/* system wide maximum number of aio requests *\/$/;"	v
aio_nr	fs/aio.c	/^unsigned long aio_nr;		\/* current system wide number of aio requests *\/$/;"	v
aio_put_req	fs/aio.c	/^EXPORT_SYMBOL(aio_put_req);$/;"	v
aio_put_req	fs/aio.c	/^int aio_put_req(struct kiocb *req)$/;"	f
aio_queue_work	fs/aio.c	/^static void aio_queue_work(struct kioctx * ctx)$/;"	f	file:
aio_read_evt	fs/aio.c	/^static int aio_read_evt(struct kioctx *ioctx, struct io_event *ent)$/;"	f	file:
aio_ring_event	fs/aio.c	194;"	d	file:
aio_run_all_iocbs	fs/aio.c	/^static inline void aio_run_all_iocbs(struct kioctx *ctx)$/;"	f	file:
aio_run_iocb	fs/aio.c	/^static ssize_t aio_run_iocb(struct kiocb *iocb)$/;"	f	file:
aio_run_iocbs	fs/aio.c	/^static inline void aio_run_iocbs(struct kioctx *ctx)$/;"	f	file:
aio_rw_vect_retry	fs/aio.c	/^static ssize_t aio_rw_vect_retry(struct kiocb *iocb)$/;"	f	file:
aio_setup	fs/aio.c	/^__initcall(aio_setup);$/;"	v
aio_setup	fs/aio.c	/^static int __init aio_setup(void)$/;"	f	file:
aio_setup_iocb	fs/aio.c	/^static ssize_t aio_setup_iocb(struct kiocb *kiocb)$/;"	f	file:
aio_setup_ring	fs/aio.c	/^static int aio_setup_ring(struct kioctx *ctx)$/;"	f	file:
aio_setup_single_vector	fs/aio.c	/^static ssize_t aio_setup_single_vector(struct kiocb *kiocb)$/;"	f	file:
aio_setup_vectored_rw	fs/aio.c	/^static ssize_t aio_setup_vectored_rw(int type, struct kiocb *kiocb)$/;"	f	file:
aio_timeout	fs/aio.c	/^struct aio_timeout {$/;"	s	file:
aio_wq	fs/aio.c	/^static struct workqueue_struct *aio_wq;$/;"	v	typeref:struct:workqueue_struct	file:
alarm_setitimer	kernel/itimer.c	/^unsigned int alarm_setitimer(unsigned int seconds)$/;"	f
alias_list	mm/slub.c	/^static struct saved_alias *alias_list;$/;"	v	typeref:struct:saved_alias	file:
aliases	mm/slub.c	/^SLAB_ATTR_RO(aliases);$/;"	v
aliases_show	mm/slub.c	/^static ssize_t aliases_show(struct kmem_cache *s, char *buf)$/;"	f	file:
alien	mm/slab.c	/^	struct array_cache **alien;	\/* on other nodes *\/$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::array_cache	file:
align	mm/slob.c	/^	unsigned int size, align;$/;"	m	struct:kmem_cache	file:
align	mm/slub.c	/^SLAB_ATTR_RO(align);$/;"	v
align_idx	mm/bootmem.c	/^static unsigned long __init align_idx(struct bootmem_data *bdata,$/;"	f	file:
align_off	mm/bootmem.c	/^static unsigned long __init align_off(struct bootmem_data *bdata,$/;"	f	file:
align_show	mm/slub.c	/^static ssize_t align_show(struct kmem_cache *s, char *buf)$/;"	f	file:
aligned_vread	mm/vmalloc.c	/^static int aligned_vread(char *buf, char *addr, unsigned long count)$/;"	f	file:
aligned_vwrite	mm/vmalloc.c	/^static int aligned_vwrite(char *buf, char *addr, unsigned long count)$/;"	f	file:
alignfile	fs/binfmt_elf.c	/^static int alignfile(struct file *file, loff_t *foffset)$/;"	f	file:
all_lock_classes	kernel/lockdep.c	/^LIST_HEAD(all_lock_classes);$/;"	v
all_unreclaimable	mm/vmscan.c	/^	int all_unreclaimable;$/;"	m	struct:scan_control	file:
all_var	kernel/kallsyms.c	28;"	d	file:
all_var	kernel/kallsyms.c	30;"	d	file:
all_vm_events	mm/vmstat.c	/^EXPORT_SYMBOL_GPL(all_vm_events);$/;"	v
all_vm_events	mm/vmstat.c	/^void all_vm_events(unsigned long *ret)$/;"	f
alloc_alien_cache	mm/slab.c	/^static inline struct array_cache **alloc_alien_cache(int node, int limit, gfp_t gfp)$/;"	f	file:
alloc_alien_cache	mm/slab.c	/^static struct array_cache **alloc_alien_cache(int node, int limit, gfp_t gfp)$/;"	f	file:
alloc_arch_preferred_bootmem	mm/bootmem.c	/^static void * __init alloc_arch_preferred_bootmem(bootmem_data_t *bdata,$/;"	f	file:
alloc_arraycache	mm/slab.c	/^static struct array_cache *alloc_arraycache(int node, int entries,$/;"	f	file:
alloc_bd_holder	fs/block_dev.c	/^static struct bd_holder *alloc_bd_holder(struct kobject *kobj)$/;"	f	file:
alloc_bootmem_core	mm/bootmem.c	/^static void * __init alloc_bootmem_core(struct bootmem_data *bdata,$/;"	f	file:
alloc_bootmem_huge_page	mm/hugetlb.c	/^int __weak alloc_bootmem_huge_page(struct hstate *h)$/;"	f
alloc_bootmem_section	mm/bootmem.c	/^void * __init alloc_bootmem_section(unsigned long size,$/;"	f
alloc_buddy_huge_page	mm/hugetlb.c	/^static struct page *alloc_buddy_huge_page(struct hstate *h,$/;"	f	file:
alloc_buffer_head	fs/buffer.c	/^EXPORT_SYMBOL(alloc_buffer_head);$/;"	v
alloc_buffer_head	fs/buffer.c	/^struct buffer_head *alloc_buffer_head(gfp_t gfp_flags)$/;"	f
alloc_calls	mm/slub.c	/^SLAB_ATTR_RO(alloc_calls);$/;"	v
alloc_calls_show	mm/slub.c	/^static ssize_t alloc_calls_show(struct kmem_cache *s, char *buf)$/;"	f	file:
alloc_chrdev_region	fs/char_dev.c	/^EXPORT_SYMBOL(alloc_chrdev_region);$/;"	v
alloc_chrdev_region	fs/char_dev.c	/^int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,$/;"	f
alloc_chunk	kernel/audit_tree.c	/^static struct audit_chunk *alloc_chunk(int count)$/;"	f	file:
alloc_css_id	kernel/cgroup.c	/^static int alloc_css_id(struct cgroup_subsys *ss, struct cgroup *parent,$/;"	f	file:
alloc_dcookie	fs/dcookies.c	/^static struct dcookie_struct *alloc_dcookie(struct path *path)$/;"	f	file:
alloc_debug_processing	mm/slub.c	/^static inline int alloc_debug_processing(struct kmem_cache *s,$/;"	f	file:
alloc_debug_processing	mm/slub.c	/^static int alloc_debug_processing(struct kmem_cache *s, struct page *page,$/;"	f	file:
alloc_fair_sched_group	kernel/sched.c	/^int alloc_fair_sched_group(struct task_group *tg, struct task_group *parent)$/;"	f	file:
alloc_fd	fs/file.c	/^int alloc_fd(unsigned start, unsigned flags)$/;"	f
alloc_fdmem	fs/file.c	/^static inline void * alloc_fdmem(unsigned int size)$/;"	f	file:
alloc_fdtable	fs/file.c	/^static struct fdtable * alloc_fdtable(unsigned int nr)$/;"	f	file:
alloc_file	fs/file_table.c	/^EXPORT_SYMBOL(alloc_file);$/;"	v
alloc_file	fs/file_table.c	/^struct file *alloc_file(struct path *path, fmode_t mode,$/;"	f
alloc_fresh_huge_page	mm/hugetlb.c	/^static int alloc_fresh_huge_page(struct hstate *h, nodemask_t *nodes_allowed)$/;"	f	file:
alloc_fresh_huge_page_node	mm/hugetlb.c	/^static struct page *alloc_fresh_huge_page_node(struct hstate *h, int nid)$/;"	f	file:
alloc_frozen_cpus	kernel/cpu.c	/^core_initcall(alloc_frozen_cpus);$/;"	v
alloc_frozen_cpus	kernel/cpu.c	/^static int alloc_frozen_cpus(void)$/;"	f	file:
alloc_huge_page	mm/hugetlb.c	/^static struct page *alloc_huge_page(struct vm_area_struct *vma,$/;"	f	file:
alloc_inode	fs/inode.c	/^static struct inode *alloc_inode(struct super_block *sb)$/;"	f	file:
alloc_kmem_cache_cpu	mm/slub.c	/^static struct kmem_cache_cpu *alloc_kmem_cache_cpu(struct kmem_cache *s,$/;"	f	file:
alloc_kmem_cache_cpus	mm/slub.c	/^static inline int alloc_kmem_cache_cpus(struct kmem_cache *s, gfp_t flags)$/;"	f	file:
alloc_kmem_cache_cpus	mm/slub.c	/^static int alloc_kmem_cache_cpus(struct kmem_cache *s, gfp_t flags)$/;"	f	file:
alloc_kmemlist	mm/slab.c	/^static int alloc_kmemlist(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
alloc_large_system_hash	mm/page_alloc.c	/^void *__init alloc_large_system_hash(const char *tablename,$/;"	f
alloc_list_entry	kernel/lockdep.c	/^static struct lock_list *alloc_list_entry(void)$/;"	f	file:
alloc_loc_track	mm/slub.c	/^static int alloc_loc_track(struct loc_track *t, unsigned long max, gfp_t flags)$/;"	f	file:
alloc_mem_cgroup_per_zone_info	mm/memcontrol.c	/^static int alloc_mem_cgroup_per_zone_info(struct mem_cgroup *mem, int node)$/;"	f	file:
alloc_mm_slot	mm/ksm.c	/^static inline struct mm_slot *alloc_mm_slot(void)$/;"	f	file:
alloc_mnt_ns	fs/namespace.c	/^static struct mnt_namespace *alloc_mnt_ns(void)$/;"	f	file:
alloc_new_pmd	mm/mremap.c	/^static pmd_t *alloc_new_pmd(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
alloc_node_mem_map	mm/page_alloc.c	/^static void __init_refok alloc_node_mem_map(struct pglist_data *pgdat)$/;"	f	file:
alloc_node_page_cgroup	mm/page_cgroup.c	/^static int __init alloc_node_page_cgroup(int nid)$/;"	f	file:
alloc_page_buffers	fs/buffer.c	/^EXPORT_SYMBOL_GPL(alloc_page_buffers);$/;"	v
alloc_page_buffers	fs/buffer.c	/^struct buffer_head *alloc_page_buffers(struct page *page, unsigned long size,$/;"	f
alloc_page_interleave	mm/mempolicy.c	/^static struct page *alloc_page_interleave(gfp_t gfp, unsigned order,$/;"	f	file:
alloc_page_vma	mm/mempolicy.c	/^alloc_page_vma(gfp_t gfp, struct vm_area_struct *vma, unsigned long addr)$/;"	f
alloc_pages_current	mm/mempolicy.c	/^EXPORT_SYMBOL(alloc_pages_current);$/;"	v
alloc_pages_current	mm/mempolicy.c	/^struct page *alloc_pages_current(gfp_t gfp, unsigned order)$/;"	f
alloc_pages_exact	mm/page_alloc.c	/^EXPORT_SYMBOL(alloc_pages_exact);$/;"	v
alloc_pages_exact	mm/page_alloc.c	/^void *alloc_pages_exact(size_t size, gfp_t gfp_mask)$/;"	f
alloc_pcpu_chunk	mm/percpu.c	/^static struct pcpu_chunk *alloc_pcpu_chunk(void)$/;"	f	file:
alloc_pi_state	kernel/futex.c	/^static struct futex_pi_state * alloc_pi_state(void)$/;"	f	file:
alloc_pid	kernel/pid.c	/^struct pid *alloc_pid(struct pid_namespace *ns)$/;"	f
alloc_pidmap	kernel/pid.c	/^static int alloc_pidmap(struct pid_namespace *pid_ns)$/;"	f	file:
alloc_pipe_info	fs/pipe.c	/^struct pipe_inode_info * alloc_pipe_info(struct inode *inode)$/;"	f
alloc_posix_timer	kernel/posix-timers.c	/^static struct k_itimer * alloc_posix_timer(void)$/;"	f	file:
alloc_rmap_item	mm/ksm.c	/^static inline struct rmap_item *alloc_rmap_item(void)$/;"	f	file:
alloc_rootdomain	kernel/sched.c	/^static struct root_domain *alloc_rootdomain(void)$/;"	f	file:
alloc_rt_sched_group	kernel/sched.c	/^int alloc_rt_sched_group(struct task_group *tg, struct task_group *parent)$/;"	f	file:
alloc_sched_domains	kernel/sched.c	/^cpumask_var_t *alloc_sched_domains(unsigned int ndoms)$/;"	f
alloc_slab_page	mm/slub.c	/^static inline struct page *alloc_slab_page(gfp_t flags, int node,$/;"	f	file:
alloc_slabmgmt	mm/slab.c	/^static struct slab *alloc_slabmgmt(struct kmem_cache *cachep, void *objp,$/;"	f	file:
alloc_stable_node	mm/ksm.c	/^static inline struct stable_node *alloc_stable_node(void)$/;"	f	file:
alloc_super	fs/super.c	/^static struct super_block *alloc_super(struct file_system_type *type)$/;"	f	file:
alloc_task_struct	kernel/fork.c	102;"	d	file:
alloc_thread_info	kernel/fork.c	/^static inline struct thread_info *alloc_thread_info(struct task_struct *tsk)$/;"	f	file:
alloc_tree	kernel/audit_tree.c	/^static struct audit_tree *alloc_tree(const char *s)$/;"	f	file:
alloc_trial_cpuset	kernel/cpuset.c	/^static struct cpuset *alloc_trial_cpuset(const struct cpuset *cs)$/;"	f	file:
alloc_uid	kernel/user.c	/^struct user_struct *alloc_uid(struct user_namespace *ns, uid_t uid)$/;"	f
alloc_vfsmnt	fs/namespace.c	/^struct vfsmount *alloc_vfsmnt(const char *name)$/;"	f
alloc_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(alloc_vm_area);$/;"	v
alloc_vm_area	mm/vmalloc.c	/^struct vm_struct *alloc_vm_area(size_t size)$/;"	f
alloc_vmap_area	mm/vmalloc.c	/^static struct vmap_area *alloc_vmap_area(unsigned long size,$/;"	f	file:
allocate_cg_links	kernel/cgroup.c	/^static int allocate_cg_links(int count, struct list_head *tmp)$/;"	f	file:
allocate_mm	kernel/fork.c	422;"	d	file:
allocate_probes	kernel/tracepoint.c	/^static inline void *allocate_probes(int count)$/;"	f	file:
allocate_resource	kernel/resource.c	/^EXPORT_SYMBOL(allocate_resource);$/;"	v
allocate_resource	kernel/resource.c	/^int allocate_resource(struct resource *root, struct resource *new,$/;"	f
allocate_slab	mm/slub.c	/^static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
allocation	mm/dmapool.c	/^	size_t allocation;$/;"	m	struct:dma_pool	file:
allow_signal	kernel/exit.c	/^EXPORT_SYMBOL(allow_signal);$/;"	v
allow_signal	kernel/exit.c	/^int allow_signal(int sig)$/;"	f
already_uses	kernel/module.c	/^static int already_uses(struct module *a, struct module *b)$/;"	f	file:
alter_cred_subscribers	kernel/cred.c	/^static inline void alter_cred_subscribers(const struct cred *_cred, int n)$/;"	f	file:
alternate_node_alloc	mm/slab.c	/^static inline void *alternate_node_alloc(struct kmem_cache *cachep,$/;"	f	file:
alternate_node_alloc	mm/slab.c	/^static void *alternate_node_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
anon	mm/mempolicy.c	/^	unsigned long anon;$/;"	m	struct:numa_maps	file:
anon_aops	fs/anon_inodes.c	/^static const struct address_space_operations anon_aops = {$/;"	v	typeref:struct:address_space_operations	file:
anon_inode_fops	fs/anon_inodes.c	/^static const struct file_operations anon_inode_fops;$/;"	v	typeref:struct:file_operations	file:
anon_inode_fs_type	fs/anon_inodes.c	/^static struct file_system_type anon_inode_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
anon_inode_getfd	fs/anon_inodes.c	/^EXPORT_SYMBOL_GPL(anon_inode_getfd);$/;"	v
anon_inode_getfd	fs/anon_inodes.c	/^int anon_inode_getfd(const char *name, const struct file_operations *fops,$/;"	f
anon_inode_getfile	fs/anon_inodes.c	/^EXPORT_SYMBOL_GPL(anon_inode_getfile);$/;"	v
anon_inode_getfile	fs/anon_inodes.c	/^struct file *anon_inode_getfile(const char *name,$/;"	f
anon_inode_init	fs/anon_inodes.c	/^fs_initcall(anon_inode_init);$/;"	v
anon_inode_init	fs/anon_inodes.c	/^static int __init anon_inode_init(void)$/;"	f	file:
anon_inode_inode	fs/anon_inodes.c	/^static struct inode *anon_inode_inode;$/;"	v	typeref:struct:inode	file:
anon_inode_mkinode	fs/anon_inodes.c	/^static struct inode *anon_inode_mkinode(void)$/;"	f	file:
anon_inodefs_dentry_operations	fs/anon_inodes.c	/^static const struct dentry_operations anon_inodefs_dentry_operations = {$/;"	v	typeref:struct:dentry_operations	file:
anon_inodefs_dname	fs/anon_inodes.c	/^static char *anon_inodefs_dname(struct dentry *dentry, char *buffer, int buflen)$/;"	f	file:
anon_inodefs_get_sb	fs/anon_inodes.c	/^static int anon_inodefs_get_sb(struct file_system_type *fs_type, int flags,$/;"	f	file:
anon_pipe_buf_ops	fs/pipe.c	/^static const struct pipe_buf_operations anon_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
anon_pipe_buf_release	fs/pipe.c	/^static void anon_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f	file:
anon_set_page_dirty	fs/anon_inodes.c	/^static int anon_set_page_dirty(struct page *page)$/;"	f	file:
anon_vma	mm/ksm.c	/^	struct anon_vma *anon_vma;	\/* when stable *\/$/;"	m	struct:rmap_item	typeref:struct:rmap_item::anon_vma	file:
anon_vma_alloc	mm/rmap.c	/^static inline struct anon_vma *anon_vma_alloc(void)$/;"	f	file:
anon_vma_cachep	mm/rmap.c	/^static struct kmem_cache *anon_vma_cachep;$/;"	v	typeref:struct:kmem_cache	file:
anon_vma_ctor	mm/rmap.c	/^static void anon_vma_ctor(void *data)$/;"	f	file:
anon_vma_free	mm/rmap.c	/^void anon_vma_free(struct anon_vma *anon_vma)$/;"	f
anon_vma_init	mm/rmap.c	/^void __init anon_vma_init(void)$/;"	f
anon_vma_link	mm/rmap.c	/^void anon_vma_link(struct vm_area_struct *vma)$/;"	f
anon_vma_prepare	mm/rmap.c	/^int anon_vma_prepare(struct vm_area_struct *vma)$/;"	f
anon_vma_unlink	mm/rmap.c	/^void anon_vma_unlink(struct vm_area_struct *vma)$/;"	f
any_slab_objects	mm/slub.c	/^static int any_slab_objects(struct kmem_cache *s)$/;"	f	file:
any_tag_set	lib/radix-tree.c	/^static inline int any_tag_set(struct radix_tree_node *node, unsigned int tag)$/;"	f	file:
aout_core_dump	fs/binfmt_aout.c	/^static int aout_core_dump(struct coredump_params *cprm)$/;"	f	file:
aout_format	fs/binfmt_aout.c	/^static struct linux_binfmt aout_format = {$/;"	v	typeref:struct:linux_binfmt	file:
append_elf_note	kernel/kexec.c	/^static u32 *append_elf_note(u32 *buf, char *name, unsigned type, void *data,$/;"	f	file:
apply_to_page_range	mm/memory.c	/^EXPORT_SYMBOL_GPL(apply_to_page_range);$/;"	v
apply_to_page_range	mm/memory.c	/^int apply_to_page_range(struct mm_struct *mm, unsigned long addr,$/;"	f
apply_to_pmd_range	mm/memory.c	/^static int apply_to_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
apply_to_pte_range	mm/memory.c	/^static int apply_to_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
apply_to_pud_range	mm/memory.c	/^static int apply_to_pud_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
arch	kernel/auditsc.c	/^	int		    arch;$/;"	m	struct:audit_context	file:
arch_crash_save_vmcoreinfo	kernel/kexec.c	/^void __attribute__ ((weak)) arch_crash_save_vmcoreinfo(void)$/;"	f
arch_deref_entry_point	kernel/kprobes.c	/^unsigned long __weak arch_deref_entry_point(void *entry)$/;"	f
arch_destroy_sched_domains	kernel/sched.c	/^static void arch_destroy_sched_domains(const struct cpumask *cpu_map,$/;"	f	file:
arch_dup_task_struct	kernel/fork.c	/^int __attribute__((weak)) arch_dup_task_struct(struct task_struct *dst,$/;"	f
arch_early_irq_init	kernel/softirq.c	/^int __init __weak arch_early_irq_init(void)$/;"	f
arch_enable_nonboot_cpus_begin	kernel/cpu.c	/^void __weak arch_enable_nonboot_cpus_begin(void)$/;"	f
arch_enable_nonboot_cpus_end	kernel/cpu.c	/^void __weak arch_enable_nonboot_cpus_end(void)$/;"	f
arch_get_unmapped_area	mm/mmap.c	/^arch_get_unmapped_area(struct file *filp, unsigned long addr,$/;"	f
arch_get_unmapped_area	mm/nommu.c	/^unsigned long arch_get_unmapped_area(struct file *file, unsigned long addr,$/;"	f
arch_get_unmapped_area_topdown	mm/mmap.c	/^arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,$/;"	f
arch_init_chip_data	kernel/softirq.c	/^int __weak arch_init_chip_data(struct irq_desc *desc, int node)$/;"	f
arch_init_sched_domains	kernel/sched.c	/^static int arch_init_sched_domains(const struct cpumask *cpu_map)$/;"	f	file:
arch_mmap_check	mm/mmap.c	40;"	d	file:
arch_mod_section_prepend	kernel/module.c	/^unsigned int __weak arch_mod_section_prepend(struct module *mod,$/;"	f
arch_pick_mmap_layout	mm/util.c	/^void arch_pick_mmap_layout(struct mm_struct *mm)$/;"	f
arch_probe_nr_irqs	kernel/softirq.c	/^int __init __weak arch_probe_nr_irqs(void)$/;"	f
arch_ptrace_attach	kernel/ptrace.c	599;"	d	file:
arch_rebalance_pgtables	mm/mmap.c	44;"	d	file:
arch_reinit_sched_domains	kernel/sched.c	/^static void arch_reinit_sched_domains(void)$/;"	f	file:
arch_scale_freq_power	kernel/sched.c	/^unsigned long __weak arch_scale_freq_power(struct sched_domain *sd, int cpu)$/;"	f
arch_scale_smt_power	kernel/sched.c	/^unsigned long __weak arch_scale_smt_power(struct sched_domain *sd, int cpu)$/;"	f
arch_setup_additional_pages	fs/compat_binfmt_elf.c	115;"	d	file:
arch_setup_additional_pages	fs/compat_binfmt_elf.c	116;"	d	file:
arch_task_cache_init	kernel/fork.c	178;"	d	file:
arch_unmap_area	mm/mmap.c	/^void arch_unmap_area(struct mm_struct *mm, unsigned long addr)$/;"	f
arch_unmap_area	mm/nommu.c	/^void arch_unmap_area(struct mm_struct *mm, unsigned long addr)$/;"	f
arch_unmap_area_topdown	mm/mmap.c	/^void arch_unmap_area_topdown(struct mm_struct *mm, unsigned long addr)$/;"	f
arch_update_cpu_topology	kernel/sched.c	/^int __attribute__((weak)) arch_update_cpu_topology(void)$/;"	f
arch_vma_name	kernel/signal.c	/^__attribute__((weak)) const char *arch_vma_name(struct vm_area_struct *vma)$/;"	f
arch_zone_highest_possible_pfn	mm/page_alloc.c	/^  static unsigned long __meminitdata arch_zone_highest_possible_pfn[MAX_NR_ZONES];$/;"	v	file:
arch_zone_lowest_possible_pfn	mm/page_alloc.c	/^  static unsigned long __meminitdata arch_zone_lowest_possible_pfn[MAX_NR_ZONES];$/;"	v	file:
area_list	mm/kmemleak.c	/^	struct hlist_head area_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::hlist_head	file:
arg	kernel/sched.c	/^	void *arg;$/;"	m	struct:rq_iterator	file:
arg	kernel/workqueue.c	/^	void *arg;$/;"	m	struct:work_for_cpu	file:
argc	kernel/auditsc.c	/^	int argc;$/;"	m	struct:audit_aux_data_execve	file:
args	fs/fs-writeback.c	/^	struct wb_writeback_args args;	\/* writeback arguments *\/$/;"	m	struct:bdi_work	typeref:struct:bdi_work::wb_writeback_args	file:
args	kernel/auditsc.c	/^			long args[6];$/;"	m	struct:audit_context::__anon22::__anon23	file:
args	kernel/panic.c	/^	va_list args;$/;"	m	struct:slowpath_args	file:
argv	kernel/auditsc.c	/^	unsigned long	    argv[4];    \/* syscall arguments *\/$/;"	m	struct:audit_context	file:
argv	kernel/kmod.c	/^	char **argv;$/;"	m	struct:subprocess_info	file:
argv_cleanup	kernel/sys.c	/^static void argv_cleanup(char **argv, char **envp)$/;"	f	file:
arm_all_kprobes	kernel/kprobes.c	/^static void __kprobes arm_all_kprobes(void)$/;"	f	file:
arm_kprobe	kernel/kprobes.c	/^static void __kprobes arm_kprobe(struct kprobe *kp)$/;"	f	file:
arm_supers_timer	mm/backing-dev.c	/^static void arm_supers_timer(void)$/;"	f	file:
arm_timer	kernel/posix-cpu-timers.c	/^static void arm_timer(struct k_itimer *timer, union cpu_time_count now)$/;"	f	file:
array_cache	mm/slab.c	/^struct array_cache {$/;"	s	file:
arraycache_init	mm/slab.c	/^struct arraycache_init {$/;"	s	file:
assert_spin_locked	include/linux/spinlock.h	/^static inline void assert_spin_locked(spinlock_t *lock)$/;"	f
assign_type	fs/locks.c	/^static int assign_type(struct file_lock *fl, int type)$/;"	f	file:
async_enabled	kernel/async.c	/^static int async_enabled = 0;$/;"	v	file:
async_entry	kernel/async.c	/^struct async_entry {$/;"	s	file:
async_init	kernel/async.c	/^core_initcall(async_init);$/;"	v
async_init	kernel/async.c	/^static int __init async_init(void)$/;"	f	file:
async_manager_thread	kernel/async.c	/^static int async_manager_thread(void *unused)$/;"	f	file:
async_rebuild_sched_domains	kernel/cpuset.c	/^static void async_rebuild_sched_domains(void)$/;"	f	file:
async_schedule	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_schedule);$/;"	v
async_schedule	kernel/async.c	/^async_cookie_t async_schedule(async_func_ptr *ptr, void *data)$/;"	f
async_schedule_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_schedule_domain);$/;"	v
async_schedule_domain	kernel/async.c	/^async_cookie_t async_schedule_domain(async_func_ptr *ptr, void *data,$/;"	f
async_synchronize_cookie	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_cookie);$/;"	v
async_synchronize_cookie	kernel/async.c	/^void async_synchronize_cookie(async_cookie_t cookie)$/;"	f
async_synchronize_cookie_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_cookie_domain);$/;"	v
async_synchronize_cookie_domain	kernel/async.c	/^void async_synchronize_cookie_domain(async_cookie_t cookie,$/;"	f
async_synchronize_full	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_full);$/;"	v
async_synchronize_full	kernel/async.c	/^void async_synchronize_full(void)$/;"	f
async_synchronize_full_domain	kernel/async.c	/^EXPORT_SYMBOL_GPL(async_synchronize_full_domain);$/;"	v
async_synchronize_full_domain	kernel/async.c	/^void async_synchronize_full_domain(struct list_head *list)$/;"	f
async_thread	kernel/async.c	/^static int async_thread(void *unused)$/;"	f	file:
atomic_dec_and_lock	include/linux/spinlock.h	393;"	d
atomic_dec_and_mutex_lock	kernel/mutex.c	/^EXPORT_SYMBOL(atomic_dec_and_mutex_lock);$/;"	v
atomic_dec_and_mutex_lock	kernel/mutex.c	/^int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock)$/;"	f
atomic_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(atomic_notifier_call_chain);$/;"	v
atomic_notifier_call_chain	kernel/notifier.c	/^int __kprobes atomic_notifier_call_chain(struct atomic_notifier_head *nh,$/;"	f
atomic_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(atomic_notifier_chain_register);$/;"	v
atomic_notifier_chain_register	kernel/notifier.c	/^int atomic_notifier_chain_register(struct atomic_notifier_head *nh,$/;"	f
atomic_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(atomic_notifier_chain_unregister);$/;"	v
atomic_notifier_chain_unregister	kernel/notifier.c	/^int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,$/;"	f
attach_mnt	fs/namespace.c	/^static void attach_mnt(struct vfsmount *mnt, struct path *path)$/;"	f	file:
attach_nobh_buffers	fs/buffer.c	/^static void attach_nobh_buffers(struct page *page, struct buffer_head *head)$/;"	f	file:
attach_pid	kernel/pid.c	/^void attach_pid(struct task_struct *task, enum pid_type type,$/;"	f
attach_recursive_mnt	fs/namespace.c	/^static int attach_recursive_mnt(struct vfsmount *source_mnt,$/;"	f	file:
attach_task_by_pid	kernel/cgroup.c	/^static int attach_task_by_pid(struct cgroup *cgrp, u64 pid)$/;"	f	file:
attr	kernel/auditsc.c	/^			struct mq_attr		attr;$/;"	m	struct:audit_context::__anon22::__anon28	typeref:struct:audit_context::__anon22::__anon28::mq_attr	file:
attr	mm/failslab.c	/^	struct fault_attr attr;$/;"	m	struct:__anon1	typeref:struct:__anon1::fault_attr	file:
attr	mm/page_alloc.c	/^	struct fault_attr attr;$/;"	m	struct:fail_page_alloc_attr	typeref:struct:fail_page_alloc_attr::fault_attr	file:
attr	mm/slub.c	/^	struct attribute attr;$/;"	m	struct:slab_attribute	typeref:struct:slab_attribute::attribute	file:
attrs	kernel/module.c	/^	struct bin_attribute attrs[0];$/;"	m	struct:module_notes_attrs	typeref:struct:module_notes_attrs::bin_attribute	file:
attrs	kernel/module.c	/^	struct module_sect_attr attrs[0];$/;"	m	struct:module_sect_attrs	typeref:struct:module_sect_attrs::module_sect_attr	file:
attrs	kernel/params.c	/^	struct param_attribute attrs[0];$/;"	m	struct:module_param_attrs	typeref:struct:module_param_attrs::param_attribute	file:
audit_add_rule	kernel/auditfilter.c	/^static inline int audit_add_rule(struct audit_entry *entry)$/;"	f	file:
audit_add_to_parent	kernel/audit_watch.c	/^static void audit_add_to_parent(struct audit_krule *krule,$/;"	f	file:
audit_add_tree_rule	kernel/audit.h	136;"	d
audit_add_tree_rule	kernel/audit_tree.c	/^int audit_add_tree_rule(struct audit_krule *rule)$/;"	f
audit_add_watch	kernel/audit_watch.c	/^int audit_add_watch(struct audit_krule *krule)$/;"	f
audit_alloc	kernel/auditsc.c	/^int audit_alloc(struct task_struct *tsk)$/;"	f
audit_alloc_context	kernel/auditsc.c	/^static inline struct audit_context *audit_alloc_context(enum audit_state state)$/;"	f	file:
audit_aux_data	kernel/auditsc.c	/^struct audit_aux_data {$/;"	s	file:
audit_aux_data_bprm_fcaps	kernel/auditsc.c	/^struct audit_aux_data_bprm_fcaps {$/;"	s	file:
audit_aux_data_capset	kernel/auditsc.c	/^struct audit_aux_data_capset {$/;"	s	file:
audit_aux_data_execve	kernel/auditsc.c	/^struct audit_aux_data_execve {$/;"	s	file:
audit_aux_data_pids	kernel/auditsc.c	/^struct audit_aux_data_pids {$/;"	s	file:
audit_backlog_limit	kernel/audit.c	/^static int	audit_backlog_limit = 64;$/;"	v	file:
audit_backlog_wait_overflow	kernel/audit.c	/^static int	audit_backlog_wait_overflow = 0;$/;"	v	file:
audit_backlog_wait_time	kernel/audit.c	/^static int	audit_backlog_wait_time = 60 * HZ;$/;"	v	file:
audit_bprm	kernel/auditsc.c	/^int audit_bprm(struct linux_binprm *bprm)$/;"	f
audit_buffer	kernel/audit.c	/^struct audit_buffer {$/;"	s	file:
audit_buffer_alloc	kernel/audit.c	/^static struct audit_buffer * audit_buffer_alloc(struct audit_context *ctx,$/;"	f	file:
audit_buffer_free	kernel/audit.c	/^static void audit_buffer_free(struct audit_buffer *ab)$/;"	f	file:
audit_cap_data	kernel/auditsc.c	/^struct audit_cap_data {$/;"	s	file:
audit_chunk	kernel/audit_tree.c	/^struct audit_chunk {$/;"	s	file:
audit_cmd_mutex	kernel/audit.c	/^DEFINE_MUTEX(audit_cmd_mutex);$/;"	v
audit_comparator	kernel/auditfilter.c	/^int audit_comparator(u32 left, u32 op, u32 right)$/;"	f
audit_compare_dname_path	kernel/auditfilter.c	/^int audit_compare_dname_path(const char *dname, const char *path,$/;"	f
audit_compare_rule	kernel/auditfilter.c	/^static int audit_compare_rule(struct audit_krule *a, struct audit_krule *b)$/;"	f	file:
audit_context	kernel/auditsc.c	/^struct audit_context {$/;"	s	file:
audit_copy_fcaps	kernel/auditsc.c	/^static inline int audit_copy_fcaps(struct audit_names *name, const struct dentry *dentry)$/;"	f	file:
audit_copy_inode	kernel/auditsc.c	/^static void audit_copy_inode(struct audit_names *name, const struct dentry *dentry,$/;"	f	file:
audit_core_dumps	kernel/auditsc.c	/^void audit_core_dumps(long signr)$/;"	f
audit_data_to_entry	kernel/auditfilter.c	/^static struct audit_entry *audit_data_to_entry(struct audit_rule_data *data,$/;"	f	file:
audit_default	kernel/audit.c	/^static int	audit_default;$/;"	v	file:
audit_del_rule	kernel/auditfilter.c	/^static inline int audit_del_rule(struct audit_entry *entry)$/;"	f	file:
audit_do_config_change	kernel/audit.c	/^static int audit_do_config_change(char *function_name, int *to_change,$/;"	f	file:
audit_dupe_lsm_field	kernel/auditfilter.c	/^static inline int audit_dupe_lsm_field(struct audit_field *df,$/;"	f	file:
audit_dupe_rule	kernel/auditfilter.c	/^struct audit_entry *audit_dupe_rule(struct audit_krule *old,$/;"	f
audit_dupe_watch	kernel/audit_watch.c	/^static struct audit_watch *audit_dupe_watch(struct audit_watch *old)$/;"	f	file:
audit_enable	kernel/audit.c	/^static int __init audit_enable(char *str)$/;"	f	file:
audit_enabled	kernel/audit.c	/^int		audit_enabled;$/;"	v
audit_entry	kernel/audit.h	/^struct audit_entry {$/;"	s
audit_ever_enabled	kernel/audit.c	/^int		audit_ever_enabled;$/;"	v
audit_expand	kernel/audit.c	/^static inline int audit_expand(struct audit_buffer *ab, int extra)$/;"	f	file:
audit_failure	kernel/audit.c	/^static int	audit_failure = AUDIT_FAIL_PRINTK;$/;"	v	file:
audit_filter_inodes	kernel/audit.h	164;"	d
audit_filter_inodes	kernel/auditsc.c	/^void audit_filter_inodes(struct task_struct *tsk, struct audit_context *ctx)$/;"	f
audit_filter_list	kernel/auditfilter.c	/^struct list_head audit_filter_list[AUDIT_NR_FILTERS] = {$/;"	v	typeref:struct:list_head
audit_filter_mutex	kernel/auditfilter.c	/^DEFINE_MUTEX(audit_filter_mutex);$/;"	v
audit_filter_rules	kernel/auditsc.c	/^static int audit_filter_rules(struct task_struct *tsk,$/;"	f	file:
audit_filter_syscall	kernel/auditsc.c	/^static enum audit_state audit_filter_syscall(struct task_struct *tsk,$/;"	f	file:
audit_filter_task	kernel/auditsc.c	/^static enum audit_state audit_filter_task(struct task_struct *tsk, char **key)$/;"	f	file:
audit_filter_type	kernel/auditfilter.c	/^int audit_filter_type(int type)$/;"	f
audit_filter_user	kernel/auditfilter.c	/^int audit_filter_user(struct netlink_skb_parms *cb)$/;"	f
audit_filter_user_rules	kernel/auditfilter.c	/^static int audit_filter_user_rules(struct netlink_skb_parms *cb,$/;"	f	file:
audit_find_rule	kernel/auditfilter.c	/^static struct audit_entry *audit_find_rule(struct audit_entry *entry,$/;"	f	file:
audit_finish_fork	kernel/auditsc.c	/^void audit_finish_fork(struct task_struct *child)$/;"	f
audit_free	kernel/auditsc.c	/^void audit_free(struct task_struct *tsk)$/;"	f
audit_free_aux	kernel/auditsc.c	/^static inline void audit_free_aux(struct audit_context *context)$/;"	f	file:
audit_free_context	kernel/auditsc.c	/^static inline void audit_free_context(struct audit_context *context)$/;"	f	file:
audit_free_names	kernel/auditsc.c	/^static inline void audit_free_names(struct audit_context *context)$/;"	f	file:
audit_free_parent	kernel/audit_watch.c	/^static void audit_free_parent(struct inotify_watch *i_watch)$/;"	f	file:
audit_free_rule	kernel/auditfilter.c	/^static inline void audit_free_rule(struct audit_entry *e)$/;"	f	file:
audit_free_rule_rcu	kernel/auditfilter.c	/^void audit_free_rule_rcu(struct rcu_head *head)$/;"	f
audit_freelist_count	kernel/audit.c	/^static int	   audit_freelist_count;$/;"	v	file:
audit_get_context	kernel/auditsc.c	/^static inline struct audit_context *audit_get_context(struct task_struct *tsk,$/;"	f	file:
audit_get_nd	kernel/audit_watch.c	/^static int audit_get_nd(char *path, struct nameidata **ndp, struct nameidata **ndw)$/;"	f	file:
audit_get_stamp	kernel/audit.c	/^static inline void audit_get_stamp(struct audit_context *ctx,$/;"	f	file:
audit_get_watch	kernel/audit_watch.c	/^void audit_get_watch(struct audit_watch *watch)$/;"	f
audit_handle_ievent	kernel/audit_watch.c	/^static void audit_handle_ievent(struct inotify_watch *i_watch, u32 wd, u32 mask,$/;"	f	file:
audit_hash_ino	kernel/audit.h	/^static inline int audit_hash_ino(u32 ino)$/;"	f
audit_hold_skb	kernel/audit.c	/^static void audit_hold_skb(struct sk_buff *skb)$/;"	f	file:
audit_ih	kernel/audit_watch.c	/^struct inotify_handle *audit_ih;$/;"	v	typeref:struct:inotify_handle
audit_inc_name_count	kernel/auditsc.c	/^static int audit_inc_name_count(struct audit_context *context,$/;"	f	file:
audit_init	kernel/audit.c	/^__initcall(audit_init);$/;"	v
audit_init	kernel/audit.c	/^static int __init audit_init(void)$/;"	f	file:
audit_init_entry	kernel/auditfilter.c	/^static inline struct audit_entry *audit_init_entry(u32 field_count)$/;"	f	file:
audit_init_parent	kernel/audit_watch.c	/^static struct audit_parent *audit_init_parent(struct nameidata *ndp)$/;"	f	file:
audit_init_watch	kernel/audit_watch.c	/^static struct audit_watch *audit_init_watch(char *path)$/;"	f	file:
audit_initialized	kernel/audit.c	/^static int	audit_initialized;$/;"	v	file:
audit_inode_hash	kernel/audit.c	/^struct list_head audit_inode_hash[AUDIT_INODE_BUCKETS];$/;"	v	typeref:struct:list_head
audit_inotify_ops	kernel/audit_watch.c	/^static const struct inotify_operations audit_inotify_ops = {$/;"	v	typeref:struct:inotify_operations	file:
audit_inotify_unregister	kernel/audit_watch.c	/^void audit_inotify_unregister(struct list_head *in_list)$/;"	f
audit_kill_trees	kernel/audit.h	142;"	d
audit_kill_trees	kernel/audit_tree.c	/^void audit_kill_trees(struct list_head *list)$/;"	f
audit_killed_trees	kernel/auditsc.c	/^struct list_head *audit_killed_trees(void)$/;"	f
audit_krule_to_data	kernel/auditfilter.c	/^static struct audit_rule_data *audit_krule_to_data(struct audit_krule *krule)$/;"	f	file:
audit_krule_to_rule	kernel/auditfilter.c	/^static struct audit_rule *audit_krule_to_rule(struct audit_krule *krule)$/;"	f	file:
audit_list	kernel/auditfilter.c	/^static void audit_list(int pid, int seq, struct sk_buff_head *q)$/;"	f	file:
audit_list_rules	kernel/auditfilter.c	/^static void audit_list_rules(int pid, int seq, struct sk_buff_head *q)$/;"	f	file:
audit_log	kernel/audit.c	/^EXPORT_SYMBOL(audit_log);$/;"	v
audit_log	kernel/audit.c	/^void audit_log(struct audit_context *ctx, gfp_t gfp_mask, int type,$/;"	f
audit_log_cap	kernel/auditsc.c	/^static void audit_log_cap(struct audit_buffer *ab, char *prefix, kernel_cap_t *cap)$/;"	f	file:
audit_log_common_recv_msg	kernel/audit.c	/^static int audit_log_common_recv_msg(struct audit_buffer **ab, u16 msg_type,$/;"	f	file:
audit_log_config_change	kernel/audit.c	/^static int audit_log_config_change(char *function_name, int new, int old,$/;"	f	file:
audit_log_d_path	kernel/audit.c	/^void audit_log_d_path(struct audit_buffer *ab, const char *prefix,$/;"	f
audit_log_end	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_end);$/;"	v
audit_log_end	kernel/audit.c	/^void audit_log_end(struct audit_buffer *ab)$/;"	f
audit_log_execve_info	kernel/auditsc.c	/^static void audit_log_execve_info(struct audit_context *context,$/;"	f	file:
audit_log_exit	kernel/auditsc.c	/^static void audit_log_exit(struct audit_context *context, struct task_struct *tsk)$/;"	f	file:
audit_log_fcaps	kernel/auditsc.c	/^static void audit_log_fcaps(struct audit_buffer *ab, struct audit_names *name)$/;"	f	file:
audit_log_format	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_format);$/;"	v
audit_log_format	kernel/audit.c	/^void audit_log_format(struct audit_buffer *ab, const char *fmt, ...)$/;"	f
audit_log_key	kernel/audit.c	/^void audit_log_key(struct audit_buffer *ab, char *key)$/;"	f
audit_log_lost	kernel/audit.c	/^void audit_log_lost(const char *message)$/;"	f
audit_log_n_hex	kernel/audit.c	/^void audit_log_n_hex(struct audit_buffer *ab, const unsigned char *buf,$/;"	f
audit_log_n_string	kernel/audit.c	/^void audit_log_n_string(struct audit_buffer *ab, const char *string,$/;"	f
audit_log_n_untrustedstring	kernel/audit.c	/^void audit_log_n_untrustedstring(struct audit_buffer *ab, const char *string,$/;"	f
audit_log_pid_context	kernel/auditsc.c	/^static int audit_log_pid_context(struct audit_context *context, pid_t pid,$/;"	f	file:
audit_log_rule_change	kernel/auditfilter.c	/^static void audit_log_rule_change(uid_t loginuid, u32 sessionid, u32 sid,$/;"	f	file:
audit_log_single_execve_arg	kernel/auditsc.c	/^static int audit_log_single_execve_arg(struct audit_context *context,$/;"	f	file:
audit_log_start	kernel/audit.c	/^EXPORT_SYMBOL(audit_log_start);$/;"	v
audit_log_start	kernel/audit.c	/^struct audit_buffer *audit_log_start(struct audit_context *ctx, gfp_t gfp_mask,$/;"	f
audit_log_task_context	kernel/auditsc.c	/^EXPORT_SYMBOL(audit_log_task_context);$/;"	v
audit_log_task_context	kernel/auditsc.c	/^void audit_log_task_context(struct audit_buffer *ab)$/;"	f
audit_log_task_info	kernel/auditsc.c	/^static void audit_log_task_info(struct audit_buffer *ab, struct task_struct *tsk)$/;"	f	file:
audit_log_untrustedstring	kernel/audit.c	/^void audit_log_untrustedstring(struct audit_buffer *ab, const char *string)$/;"	f
audit_log_vformat	kernel/audit.c	/^static void audit_log_vformat(struct audit_buffer *ab, const char *fmt,$/;"	f	file:
audit_lost	kernel/audit.c	/^static atomic_t    audit_lost = ATOMIC_INIT(0);$/;"	v	file:
audit_make_reply	kernel/audit.c	/^struct sk_buff *audit_make_reply(int pid, int seq, int type, int done,$/;"	f
audit_make_tree	kernel/audit.h	137;"	d
audit_make_tree	kernel/audit_tree.c	/^int audit_make_tree(struct audit_krule *rule, char *pathname, u32 op)$/;"	f
audit_match_class	kernel/auditfilter.c	/^int audit_match_class(int class, unsigned syscall)$/;"	f
audit_match_class_bits	kernel/auditfilter.c	/^static inline int audit_match_class_bits(int class, u32 *mask)$/;"	f	file:
audit_match_filetype	kernel/auditsc.c	/^static int audit_match_filetype(struct audit_context *ctx, int which)$/;"	f	file:
audit_match_perm	kernel/auditsc.c	/^static int audit_match_perm(struct audit_context *ctx, int mask)$/;"	f	file:
audit_match_signal	kernel/auditfilter.c	/^static int audit_match_signal(struct audit_entry *entry)$/;"	f	file:
audit_n_rules	kernel/auditsc.c	/^int audit_n_rules;$/;"	v
audit_names	kernel/auditsc.c	/^struct audit_names {$/;"	s	file:
audit_netlink_list	kernel/audit.h	/^struct audit_netlink_list {$/;"	s
audit_netlink_ok	kernel/audit.c	/^static int audit_netlink_ok(struct sk_buff *skb, u16 msg_type)$/;"	f	file:
audit_nlk_pid	kernel/audit.c	/^static int	audit_nlk_pid;$/;"	v	file:
audit_ops	kernel/auditfilter.c	/^static u32 audit_ops[] =$/;"	v	file:
audit_pack_string	kernel/auditfilter.c	/^static inline size_t audit_pack_string(void **bufp, const char *str)$/;"	f	file:
audit_panic	kernel/audit.c	/^void audit_panic(const char *message)$/;"	f
audit_parent	kernel/audit_watch.c	/^struct audit_parent {$/;"	s	file:
audit_pid	kernel/audit.c	/^int		audit_pid;$/;"	v
audit_prepare_user_tty	kernel/audit.c	/^static int audit_prepare_user_tty(pid_t pid, uid_t loginuid, u32 sessionid)$/;"	f	file:
audit_printk_skb	kernel/audit.c	/^static void audit_printk_skb(struct sk_buff *skb)$/;"	f	file:
audit_put_chunk	kernel/audit_tree.c	/^void audit_put_chunk(struct audit_chunk *chunk)$/;"	f
audit_put_nd	kernel/audit_watch.c	/^static void audit_put_nd(struct nameidata *ndp, struct nameidata *ndw)$/;"	f	file:
audit_put_tree	kernel/audit.h	139;"	d
audit_put_tree	kernel/audit_tree.c	/^void audit_put_tree(struct audit_tree *tree)$/;"	f
audit_put_watch	kernel/audit_watch.c	/^void audit_put_watch(struct audit_watch *watch)$/;"	f
audit_putname	kernel/auditsc.c	/^void audit_putname(const char *name)$/;"	f
audit_rate_check	kernel/audit.c	/^static inline int audit_rate_check(void)$/;"	f	file:
audit_rate_limit	kernel/audit.c	/^static int	audit_rate_limit;$/;"	v	file:
audit_receive	kernel/audit.c	/^static void audit_receive(struct sk_buff  *skb)$/;"	f	file:
audit_receive_filter	kernel/auditfilter.c	/^int audit_receive_filter(int type, int pid, int uid, int seq, void *data,$/;"	f
audit_receive_msg	kernel/audit.c	/^static int audit_receive_msg(struct sk_buff *skb, struct nlmsghdr *nlh)$/;"	f	file:
audit_receive_skb	kernel/audit.c	/^static void audit_receive_skb(struct sk_buff *skb)$/;"	f	file:
audit_register_class	kernel/auditfilter.c	/^int __init audit_register_class(int class, unsigned *list)$/;"	f
audit_remove_parent_watches	kernel/audit_watch.c	/^static void audit_remove_parent_watches(struct audit_parent *parent)$/;"	f	file:
audit_remove_tree_rule	kernel/audit.h	135;"	d
audit_remove_tree_rule	kernel/audit_tree.c	/^int audit_remove_tree_rule(struct audit_krule *rule)$/;"	f
audit_remove_watch	kernel/audit_watch.c	/^void audit_remove_watch(struct audit_watch *watch)$/;"	f
audit_remove_watch_rule	kernel/audit_watch.c	/^void audit_remove_watch_rule(struct audit_krule *krule, struct list_head *list)$/;"	f
audit_reply	kernel/audit.c	/^struct audit_reply {$/;"	s	file:
audit_rule_to_entry	kernel/auditfilter.c	/^static struct audit_entry *audit_rule_to_entry(struct audit_rule *rule)$/;"	f	file:
audit_rules_list	kernel/auditfilter.c	/^static struct list_head audit_rules_list[AUDIT_NR_FILTERS] = {$/;"	v	typeref:struct:list_head	file:
audit_schedule_prune	kernel/audit_tree.c	/^static void audit_schedule_prune(void)$/;"	f	file:
audit_send_list	kernel/audit.c	/^int audit_send_list(void *_dest)$/;"	f
audit_send_reply	kernel/audit.c	/^void audit_send_reply(int pid, int seq, int type, int done, int multi,$/;"	f
audit_send_reply_thread	kernel/audit.c	/^static int audit_send_reply_thread(void *arg)$/;"	f	file:
audit_serial	kernel/audit.c	/^unsigned int audit_serial(void)$/;"	f
audit_set_auditable	kernel/auditsc.c	/^static void audit_set_auditable(struct audit_context *ctx)$/;"	f	file:
audit_set_backlog_limit	kernel/audit.c	/^static int audit_set_backlog_limit(int limit, uid_t loginuid, u32 sessionid,$/;"	f	file:
audit_set_enabled	kernel/audit.c	/^static int audit_set_enabled(int state, uid_t loginuid, u32 sessionid, u32 sid)$/;"	f	file:
audit_set_failure	kernel/audit.c	/^static int audit_set_failure(int state, uid_t loginuid, u32 sessionid, u32 sid)$/;"	f	file:
audit_set_loginuid	kernel/auditsc.c	/^int audit_set_loginuid(struct task_struct *task, uid_t loginuid)$/;"	f
audit_set_pid	kernel/audit.c	/^static void audit_set_pid(struct audit_buffer *ab, pid_t pid)$/;"	f	file:
audit_set_rate_limit	kernel/audit.c	/^static int audit_set_rate_limit(int limit, uid_t loginuid, u32 sessionid,$/;"	f	file:
audit_sig_pid	kernel/audit.c	/^pid_t		audit_sig_pid = -1;$/;"	v
audit_sig_sid	kernel/audit.c	/^u32		audit_sig_sid = 0;$/;"	v
audit_sig_uid	kernel/audit.c	/^uid_t		audit_sig_uid = -1;$/;"	v
audit_signal_info	kernel/audit.h	/^static inline int audit_signal_info(int sig, struct task_struct *t)$/;"	f
audit_signal_info	kernel/audit.h	163;"	d
audit_signals	kernel/auditsc.c	/^int audit_signals;$/;"	v
audit_skb_hold_queue	kernel/audit.c	/^static struct sk_buff_head audit_skb_hold_queue;$/;"	v	typeref:struct:sk_buff_head	file:
audit_skb_queue	kernel/audit.c	/^static struct sk_buff_head audit_skb_queue;$/;"	v	typeref:struct:sk_buff_head	file:
audit_sock	kernel/audit.c	/^static struct sock *audit_sock;$/;"	v	typeref:struct:sock	file:
audit_sockaddr	kernel/auditsc.c	/^int audit_sockaddr(int len, void *a)$/;"	f
audit_socketcall	kernel/auditsc.c	/^void audit_socketcall(int nargs, unsigned long *args)$/;"	f
audit_state	kernel/audit.h	/^enum audit_state {$/;"	g
audit_string_contains_control	kernel/audit.c	/^int audit_string_contains_control(const char *string, size_t len)$/;"	f
audit_syscall_entry	kernel/auditsc.c	/^void audit_syscall_entry(int arch, int major,$/;"	f
audit_syscall_exit	kernel/auditsc.c	/^void audit_syscall_exit(int valid, long return_code)$/;"	f
audit_tag_tree	kernel/audit.h	140;"	d
audit_tag_tree	kernel/audit_tree.c	/^int audit_tag_tree(char *old, char *new)$/;"	f
audit_to_entry_common	kernel/auditfilter.c	/^static inline struct audit_entry *audit_to_entry_common(struct audit_rule *rule)$/;"	f	file:
audit_to_inode	kernel/auditfilter.c	/^static inline int audit_to_inode(struct audit_krule *krule,$/;"	f	file:
audit_to_op	kernel/auditfilter.c	/^static u32 audit_to_op(u32 op)$/;"	f	file:
audit_to_watch	kernel/audit_watch.c	/^int audit_to_watch(struct audit_krule *krule, char *path, int len, u32 op)$/;"	f
audit_tree	kernel/audit_tree.c	/^struct audit_tree {$/;"	s	file:
audit_tree_init	kernel/audit_tree.c	/^__initcall(audit_tree_init);$/;"	v
audit_tree_init	kernel/audit_tree.c	/^static int __init audit_tree_init(void)$/;"	f	file:
audit_tree_lookup	kernel/audit_tree.c	/^struct audit_chunk *audit_tree_lookup(const struct inode *inode)$/;"	f
audit_tree_match	kernel/audit_tree.c	/^int audit_tree_match(struct audit_chunk *chunk, struct audit_tree *tree)$/;"	f
audit_tree_path	kernel/audit.h	141;"	d
audit_tree_path	kernel/audit_tree.c	/^const char *audit_tree_path(struct audit_tree *tree)$/;"	f
audit_tree_refs	kernel/auditsc.c	/^struct audit_tree_refs {$/;"	s	file:
audit_trim_trees	kernel/audit.h	138;"	d
audit_trim_trees	kernel/audit_tree.c	/^void audit_trim_trees(void)$/;"	f
audit_unpack_string	kernel/auditfilter.c	/^char *audit_unpack_string(void **bufp, size_t *remain, size_t len)$/;"	f
audit_update_lsm_rules	kernel/auditfilter.c	/^int audit_update_lsm_rules(void)$/;"	f
audit_update_watch	kernel/audit_watch.c	/^static void audit_update_watch(struct audit_parent *parent,$/;"	f	file:
audit_watch	kernel/audit_watch.c	/^struct audit_watch {$/;"	s	file:
audit_watch_dev	kernel/audit_watch.c	/^dev_t audit_watch_dev(struct audit_watch *watch)$/;"	f
audit_watch_init	kernel/audit_watch.c	/^static int __init audit_watch_init(void)$/;"	f	file:
audit_watch_init	kernel/audit_watch.c	/^subsys_initcall(audit_watch_init);$/;"	v
audit_watch_inode	kernel/audit_watch.c	/^unsigned long audit_watch_inode(struct audit_watch *watch)$/;"	f
audit_watch_log_rule_change	kernel/audit_watch.c	/^static void audit_watch_log_rule_change(struct audit_krule *r, struct audit_watch *w, char *op)$/;"	f	file:
audit_watch_path	kernel/audit_watch.c	/^char *audit_watch_path(struct audit_watch *watch)$/;"	f
audit_watch_rules	kernel/audit_watch.c	/^struct list_head *audit_watch_rules(struct audit_watch *watch)$/;"	f
audit_zero_context	kernel/auditsc.c	/^static inline void audit_zero_context(struct audit_context *context,$/;"	f	file:
auditsc_get_stamp	kernel/auditsc.c	/^int auditsc_get_stamp(struct audit_context *ctx,$/;"	f
auth_flavourlen	fs/compat.c	/^	compat_int_t auth_flavourlen;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
auth_flavours	fs/compat.c	/^	compat_uptr_t auth_flavours;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
autoremove_wake_function	kernel/wait.c	/^EXPORT_SYMBOL(autoremove_wake_function);$/;"	v
autoremove_wake_function	kernel/wait.c	/^int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f
aux	kernel/auditsc.c	/^	struct audit_aux_data *aux;$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_aux_data	file:
aux_pids	kernel/auditsc.c	/^	struct audit_aux_data *aux_pids;$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_aux_data	file:
auxv	fs/binfmt_elf.c	/^	struct memelfnote auxv;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
avail	mm/slab.c	/^	unsigned int avail;$/;"	m	struct:array_cache	file:
avenrun	kernel/sched.c	/^EXPORT_SYMBOL(avenrun);$/;"	v
avenrun	kernel/sched.c	/^unsigned long avenrun[3];$/;"	v
avg_idle	kernel/sched.c	/^	u64 avg_idle;$/;"	m	struct:rq	file:
avg_load	kernel/sched.c	/^	unsigned long avg_load;	   \/* Average load across all groups in sd *\/$/;"	m	struct:sd_lb_stats	file:
avg_load	kernel/sched.c	/^	unsigned long avg_load; \/*Avg load across the CPUs of the group *\/$/;"	m	struct:sg_lb_stats	file:
avg_load_per_task	kernel/sched.c	/^	unsigned long avg_load_per_task;$/;"	m	struct:rq	file:
bacct_add_tsk	kernel/tsacct.c	/^void bacct_add_tsk(struct taskstats *stats, struct task_struct *tsk)$/;"	f
backtrace_regression_test	kernel/backtracetest.c	/^module_init(backtrace_regression_test);$/;"	v
backtrace_regression_test	kernel/backtracetest.c	/^static int backtrace_regression_test(void)$/;"	f	file:
backtrace_test_irq	kernel/backtracetest.c	/^static void backtrace_test_irq(void)$/;"	f	file:
backtrace_test_irq_callback	kernel/backtracetest.c	/^static void backtrace_test_irq_callback(unsigned long data)$/;"	f	file:
backtrace_test_normal	kernel/backtracetest.c	/^static void backtrace_test_normal(void)$/;"	f	file:
backtrace_test_saved	kernel/backtracetest.c	/^static void backtrace_test_saved(void)$/;"	f	file:
bad_file_aio_fsync	fs/bad_inode.c	/^static int bad_file_aio_fsync(struct kiocb *iocb, int datasync)$/;"	f	file:
bad_file_aio_read	fs/bad_inode.c	/^static ssize_t bad_file_aio_read(struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
bad_file_aio_write	fs/bad_inode.c	/^static ssize_t bad_file_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
bad_file_check_flags	fs/bad_inode.c	/^static int bad_file_check_flags(int flags)$/;"	f	file:
bad_file_compat_ioctl	fs/bad_inode.c	/^static long bad_file_compat_ioctl(struct file *file, unsigned int cmd,$/;"	f	file:
bad_file_fasync	fs/bad_inode.c	/^static int bad_file_fasync(int fd, struct file *filp, int on)$/;"	f	file:
bad_file_flock	fs/bad_inode.c	/^static int bad_file_flock(struct file *filp, int cmd, struct file_lock *fl)$/;"	f	file:
bad_file_flush	fs/bad_inode.c	/^static int bad_file_flush(struct file *file, fl_owner_t id)$/;"	f	file:
bad_file_fsync	fs/bad_inode.c	/^static int bad_file_fsync(struct file *file, struct dentry *dentry,$/;"	f	file:
bad_file_get_unmapped_area	fs/bad_inode.c	/^static unsigned long bad_file_get_unmapped_area(struct file *file,$/;"	f	file:
bad_file_ioctl	fs/bad_inode.c	/^static int bad_file_ioctl (struct inode *inode, struct file *filp,$/;"	f	file:
bad_file_llseek	fs/bad_inode.c	/^static loff_t bad_file_llseek(struct file *file, loff_t offset, int origin)$/;"	f	file:
bad_file_lock	fs/bad_inode.c	/^static int bad_file_lock(struct file *file, int cmd, struct file_lock *fl)$/;"	f	file:
bad_file_mmap	fs/bad_inode.c	/^static int bad_file_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
bad_file_open	fs/bad_inode.c	/^static int bad_file_open(struct inode *inode, struct file *filp)$/;"	f	file:
bad_file_ops	fs/bad_inode.c	/^static const struct file_operations bad_file_ops =$/;"	v	typeref:struct:file_operations	file:
bad_file_poll	fs/bad_inode.c	/^static unsigned int bad_file_poll(struct file *filp, poll_table *wait)$/;"	f	file:
bad_file_read	fs/bad_inode.c	/^static ssize_t bad_file_read(struct file *filp, char __user *buf,$/;"	f	file:
bad_file_readdir	fs/bad_inode.c	/^static int bad_file_readdir(struct file *filp, void *dirent, filldir_t filldir)$/;"	f	file:
bad_file_release	fs/bad_inode.c	/^static int bad_file_release(struct inode *inode, struct file *filp)$/;"	f	file:
bad_file_sendpage	fs/bad_inode.c	/^static ssize_t bad_file_sendpage(struct file *file, struct page *page,$/;"	f	file:
bad_file_splice_read	fs/bad_inode.c	/^static ssize_t bad_file_splice_read(struct file *in, loff_t *ppos,$/;"	f	file:
bad_file_splice_write	fs/bad_inode.c	/^static ssize_t bad_file_splice_write(struct pipe_inode_info *pipe,$/;"	f	file:
bad_file_unlocked_ioctl	fs/bad_inode.c	/^static long bad_file_unlocked_ioctl(struct file *file, unsigned cmd,$/;"	f	file:
bad_file_write	fs/bad_inode.c	/^static ssize_t bad_file_write(struct file *filp, const char __user *buf,$/;"	f	file:
bad_inode_create	fs/bad_inode.c	/^static int bad_inode_create (struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_getattr	fs/bad_inode.c	/^static int bad_inode_getattr(struct vfsmount *mnt, struct dentry *dentry,$/;"	f	file:
bad_inode_getxattr	fs/bad_inode.c	/^static ssize_t bad_inode_getxattr(struct dentry *dentry, const char *name,$/;"	f	file:
bad_inode_link	fs/bad_inode.c	/^static int bad_inode_link (struct dentry *old_dentry, struct inode *dir,$/;"	f	file:
bad_inode_listxattr	fs/bad_inode.c	/^static ssize_t bad_inode_listxattr(struct dentry *dentry, char *buffer,$/;"	f	file:
bad_inode_lookup	fs/bad_inode.c	/^static struct dentry *bad_inode_lookup(struct inode *dir,$/;"	f	file:
bad_inode_mkdir	fs/bad_inode.c	/^static int bad_inode_mkdir(struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_mknod	fs/bad_inode.c	/^static int bad_inode_mknod (struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_ops	fs/bad_inode.c	/^static const struct inode_operations bad_inode_ops =$/;"	v	typeref:struct:inode_operations	file:
bad_inode_permission	fs/bad_inode.c	/^static int bad_inode_permission(struct inode *inode, int mask)$/;"	f	file:
bad_inode_readlink	fs/bad_inode.c	/^static int bad_inode_readlink(struct dentry *dentry, char __user *buffer,$/;"	f	file:
bad_inode_removexattr	fs/bad_inode.c	/^static int bad_inode_removexattr(struct dentry *dentry, const char *name)$/;"	f	file:
bad_inode_rename	fs/bad_inode.c	/^static int bad_inode_rename (struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
bad_inode_rmdir	fs/bad_inode.c	/^static int bad_inode_rmdir (struct inode *dir, struct dentry *dentry)$/;"	f	file:
bad_inode_setattr	fs/bad_inode.c	/^static int bad_inode_setattr(struct dentry *direntry, struct iattr *attrs)$/;"	f	file:
bad_inode_setxattr	fs/bad_inode.c	/^static int bad_inode_setxattr(struct dentry *dentry, const char *name,$/;"	f	file:
bad_inode_symlink	fs/bad_inode.c	/^static int bad_inode_symlink (struct inode *dir, struct dentry *dentry,$/;"	f	file:
bad_inode_unlink	fs/bad_inode.c	/^static int bad_inode_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
bad_page	mm/page_alloc.c	/^static void bad_page(struct page *page)$/;"	f	file:
bad_pipe_r	fs/pipe.c	/^bad_pipe_r(struct file *filp, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
bad_pipe_w	fs/pipe.c	/^bad_pipe_w(struct file *filp, const char __user *buf, size_t count,$/;"	f	file:
bad_range	mm/page_alloc.c	/^static inline int bad_range(struct zone *zone, struct page *page)$/;"	f	file:
bad_range	mm/page_alloc.c	/^static int bad_range(struct zone *zone, struct page *page)$/;"	f	file:
badness	mm/oom_kill.c	/^unsigned long badness(struct task_struct *p, unsigned long uptime)$/;"	f
balance_dirty_pages	mm/page-writeback.c	/^static void balance_dirty_pages(struct address_space *mapping,$/;"	f	file:
balance_dirty_pages_ratelimited_nr	mm/page-writeback.c	/^EXPORT_SYMBOL(balance_dirty_pages_ratelimited_nr);$/;"	v
balance_dirty_pages_ratelimited_nr	mm/page-writeback.c	/^void balance_dirty_pages_ratelimited_nr(struct address_space *mapping,$/;"	f
balance_iterator	kernel/sched.c	/^	struct list_head *balance_iterator;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::list_head	file:
balance_pgdat	mm/vmscan.c	/^static unsigned long balance_pgdat(pg_data_t *pgdat, int order)$/;"	f	file:
balance_runtime	kernel/sched_rt.c	/^static inline int balance_runtime(struct rt_rq *rt_rq)$/;"	f	file:
balance_runtime	kernel/sched_rt.c	/^static int balance_runtime(struct rt_rq *rt_rq)$/;"	f	file:
balance_tasks	kernel/sched.c	/^balance_tasks(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
band_table	fs/fcntl.c	/^static const long band_table[NSIGPOLL] = {$/;"	v	file:
base	fs/eventpoll.c	/^	struct epitem *base;$/;"	m	struct:eppoll_entry	typeref:struct:eppoll_entry::epitem	file:
base_addr	mm/percpu.c	/^	void			*base_addr;	\/* base address of this chunk *\/$/;"	m	struct:pcpu_chunk	file:
base_probe	fs/char_dev.c	/^static struct kobject *base_probe(dev_t dev, int *part, void *data)$/;"	f	file:
baseminor	fs/char_dev.c	/^	unsigned int baseminor;$/;"	m	struct:char_device_struct	file:
batchcount	mm/slab.c	/^	unsigned int batchcount;$/;"	m	struct:array_cache	file:
baud_base	fs/compat_ioctl.c	/^        compat_int_t    baud_base;$/;"	m	struct:serial_struct32	file:
bd_acquire	fs/block_dev.c	/^static struct block_device *bd_acquire(struct inode *inode)$/;"	f	file:
bd_claim	fs/block_dev.c	/^EXPORT_SYMBOL(bd_claim);$/;"	v
bd_claim	fs/block_dev.c	/^int bd_claim(struct block_device *bdev, void *holder)$/;"	f
bd_claim_by_disk	fs/block_dev.c	/^EXPORT_SYMBOL_GPL(bd_claim_by_disk);$/;"	v
bd_claim_by_disk	fs/block_dev.c	/^int bd_claim_by_disk(struct block_device *bdev, void *holder,$/;"	f
bd_claim_by_kobject	fs/block_dev.c	/^static int bd_claim_by_kobject(struct block_device *bdev, void *holder,$/;"	f	file:
bd_forget	fs/block_dev.c	/^void bd_forget(struct inode *inode)$/;"	f
bd_get_sb	fs/block_dev.c	/^static int bd_get_sb(struct file_system_type *fs_type,$/;"	f	file:
bd_holder	fs/block_dev.c	/^struct bd_holder {$/;"	s	file:
bd_holder_grab_dirs	fs/block_dev.c	/^static int bd_holder_grab_dirs(struct block_device *bdev,$/;"	f	file:
bd_holder_release_dirs	fs/block_dev.c	/^static void bd_holder_release_dirs(struct bd_holder *bo)$/;"	f	file:
bd_release	fs/block_dev.c	/^EXPORT_SYMBOL(bd_release);$/;"	v
bd_release	fs/block_dev.c	/^void bd_release(struct block_device *bdev)$/;"	f
bd_release_from_disk	fs/block_dev.c	/^EXPORT_SYMBOL_GPL(bd_release_from_disk);$/;"	v
bd_release_from_disk	fs/block_dev.c	/^void bd_release_from_disk(struct block_device *bdev, struct gendisk *disk)$/;"	f
bd_release_from_kobject	fs/block_dev.c	/^static void bd_release_from_kobject(struct block_device *bdev,$/;"	f	file:
bd_set_size	fs/block_dev.c	/^EXPORT_SYMBOL(bd_set_size);$/;"	v
bd_set_size	fs/block_dev.c	/^void bd_set_size(struct block_device *bdev, loff_t size)$/;"	f
bd_type	fs/block_dev.c	/^static struct file_system_type bd_type = {$/;"	v	typeref:struct:file_system_type	file:
bdebug	mm/bootmem.c	48;"	d	file:
bdev	fs/block_dev.c	/^	struct block_device bdev;$/;"	m	struct:bdev_inode	typeref:struct:bdev_inode::block_device	file:
bdev_alloc_inode	fs/block_dev.c	/^static struct inode *bdev_alloc_inode(struct super_block *sb)$/;"	f	file:
bdev_cache_init	fs/block_dev.c	/^void __init bdev_cache_init(void)$/;"	f
bdev_cache_init	fs/internal.h	/^static inline void bdev_cache_init(void)$/;"	f
bdev_clear_inode	fs/block_dev.c	/^static void bdev_clear_inode(struct inode *inode)$/;"	f	file:
bdev_destroy_inode	fs/block_dev.c	/^static void bdev_destroy_inode(struct inode *inode)$/;"	f	file:
bdev_inode	fs/block_dev.c	/^struct bdev_inode {$/;"	s	file:
bdev_integrity_enabled	fs/bio-integrity.c	/^static int bdev_integrity_enabled(struct block_device *bdev, int rw)$/;"	f	file:
bdev_set	fs/block_dev.c	/^static int bdev_set(struct inode *inode, void *data)$/;"	f	file:
bdev_sops	fs/block_dev.c	/^static const struct super_operations bdev_sops = {$/;"	v	typeref:struct:super_operations	file:
bdev_test	fs/block_dev.c	/^static int bdev_test(struct inode *inode, void *data)$/;"	f	file:
bdget	fs/block_dev.c	/^EXPORT_SYMBOL(bdget);$/;"	v
bdget	fs/block_dev.c	/^struct block_device *bdget(dev_t dev)$/;"	f
bdgrab	fs/block_dev.c	/^struct block_device *bdgrab(struct block_device *bdev)$/;"	f
bdi_add_default_flusher_task	mm/backing-dev.c	/^void static bdi_add_default_flusher_task(struct backing_dev_info *bdi)$/;"	f	file:
bdi_add_to_pending	mm/backing-dev.c	/^static void bdi_add_to_pending(struct rcu_head *head)$/;"	f	file:
bdi_alloc_queue_work	fs/fs-writeback.c	/^static void bdi_alloc_queue_work(struct backing_dev_info *bdi,$/;"	f	file:
bdi_class	mm/backing-dev.c	/^static struct class *bdi_class;$/;"	v	typeref:struct:class	file:
bdi_class_init	mm/backing-dev.c	/^postcore_initcall(bdi_class_init);$/;"	v
bdi_class_init	mm/backing-dev.c	/^static __init int bdi_class_init(void)$/;"	f	file:
bdi_debug_init	mm/backing-dev.c	/^static inline void bdi_debug_init(void)$/;"	f	file:
bdi_debug_init	mm/backing-dev.c	/^static void bdi_debug_init(void)$/;"	f	file:
bdi_debug_register	mm/backing-dev.c	/^static inline void bdi_debug_register(struct backing_dev_info *bdi,$/;"	f	file:
bdi_debug_register	mm/backing-dev.c	/^static void bdi_debug_register(struct backing_dev_info *bdi, const char *name)$/;"	f	file:
bdi_debug_root	mm/backing-dev.c	/^static struct dentry *bdi_debug_root;$/;"	v	typeref:struct:dentry	file:
bdi_debug_stats_fops	mm/backing-dev.c	/^static const struct file_operations bdi_debug_stats_fops = {$/;"	v	typeref:struct:file_operations	file:
bdi_debug_stats_open	mm/backing-dev.c	/^static int bdi_debug_stats_open(struct inode *inode, struct file *file)$/;"	f	file:
bdi_debug_stats_show	mm/backing-dev.c	/^static int bdi_debug_stats_show(struct seq_file *m, void *v)$/;"	f	file:
bdi_debug_unregister	mm/backing-dev.c	/^static inline void bdi_debug_unregister(struct backing_dev_info *bdi)$/;"	f	file:
bdi_debug_unregister	mm/backing-dev.c	/^static void bdi_debug_unregister(struct backing_dev_info *bdi)$/;"	f	file:
bdi_destroy	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_destroy);$/;"	v
bdi_destroy	mm/backing-dev.c	/^void bdi_destroy(struct backing_dev_info *bdi)$/;"	f
bdi_dev_attrs	mm/backing-dev.c	/^static struct device_attribute bdi_dev_attrs[] = {$/;"	v	typeref:struct:device_attribute	file:
bdi_flush_io	mm/backing-dev.c	/^static void bdi_flush_io(struct backing_dev_info *bdi)$/;"	f	file:
bdi_forker_task	mm/backing-dev.c	/^static int bdi_forker_task(void *ptr)$/;"	f	file:
bdi_has_dirty_io	mm/backing-dev.c	/^int bdi_has_dirty_io(struct backing_dev_info *bdi)$/;"	f
bdi_init	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_init);$/;"	v
bdi_init	mm/backing-dev.c	/^int bdi_init(struct backing_dev_info *bdi)$/;"	f
bdi_list	mm/backing-dev.c	/^LIST_HEAD(bdi_list);$/;"	v
bdi_lock	mm/backing-dev.c	/^DEFINE_SPINLOCK(bdi_lock);$/;"	v
bdi_min_ratio	mm/page-writeback.c	/^static unsigned int bdi_min_ratio;$/;"	v	file:
bdi_pending_list	mm/backing-dev.c	/^LIST_HEAD(bdi_pending_list);$/;"	v
bdi_prune_sb	mm/backing-dev.c	/^static void bdi_prune_sb(struct backing_dev_info *bdi)$/;"	f	file:
bdi_queue_work	fs/fs-writeback.c	/^static void bdi_queue_work(struct backing_dev_info *bdi, struct bdi_work *work)$/;"	f	file:
bdi_register	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_register);$/;"	v
bdi_register	mm/backing-dev.c	/^int bdi_register(struct backing_dev_info *bdi, struct device *parent,$/;"	f
bdi_register_dev	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_register_dev);$/;"	v
bdi_register_dev	mm/backing-dev.c	/^int bdi_register_dev(struct backing_dev_info *bdi, dev_t dev)$/;"	f
bdi_remove_from_list	mm/backing-dev.c	/^static void bdi_remove_from_list(struct backing_dev_info *bdi)$/;"	f	file:
bdi_set_max_ratio	mm/page-writeback.c	/^EXPORT_SYMBOL(bdi_set_max_ratio);$/;"	v
bdi_set_max_ratio	mm/page-writeback.c	/^int bdi_set_max_ratio(struct backing_dev_info *bdi, unsigned max_ratio)$/;"	f
bdi_set_min_ratio	mm/page-writeback.c	/^int bdi_set_min_ratio(struct backing_dev_info *bdi, unsigned int min_ratio)$/;"	f
bdi_start_fn	mm/backing-dev.c	/^static int bdi_start_fn(void *ptr)$/;"	f	file:
bdi_start_writeback	fs/fs-writeback.c	/^void bdi_start_writeback(struct backing_dev_info *bdi, struct super_block *sb,$/;"	f
bdi_sync_supers	mm/backing-dev.c	/^static int bdi_sync_supers(void *unused)$/;"	f	file:
bdi_sync_writeback	fs/fs-writeback.c	/^static void bdi_sync_writeback(struct backing_dev_info *bdi,$/;"	f	file:
bdi_task_init	mm/backing-dev.c	/^static void bdi_task_init(struct backing_dev_info *bdi,$/;"	f	file:
bdi_unregister	mm/backing-dev.c	/^EXPORT_SYMBOL(bdi_unregister);$/;"	v
bdi_unregister	mm/backing-dev.c	/^void bdi_unregister(struct backing_dev_info *bdi)$/;"	f
bdi_wait_on_work_clear	fs/fs-writeback.c	/^static void bdi_wait_on_work_clear(struct bdi_work *work)$/;"	f	file:
bdi_wb_init	mm/backing-dev.c	/^static void bdi_wb_init(struct bdi_writeback *wb, struct backing_dev_info *bdi)$/;"	f	file:
bdi_wb_shutdown	mm/backing-dev.c	/^static void bdi_wb_shutdown(struct backing_dev_info *bdi)$/;"	f	file:
bdi_work	fs/fs-writeback.c	/^struct bdi_work {$/;"	s	file:
bdi_work_clear	fs/fs-writeback.c	/^static void bdi_work_clear(struct bdi_work *work)$/;"	f	file:
bdi_work_free	fs/fs-writeback.c	/^static void bdi_work_free(struct rcu_head *head)$/;"	f	file:
bdi_work_init	fs/fs-writeback.c	/^static inline void bdi_work_init(struct bdi_work *work,$/;"	f	file:
bdi_work_on_stack	fs/fs-writeback.c	/^static inline bool bdi_work_on_stack(struct bdi_work *work)$/;"	f	file:
bdi_writeback_all	fs/fs-writeback.c	/^static void bdi_writeback_all(struct super_block *sb, long nr_pages)$/;"	f	file:
bdi_writeback_task	fs/fs-writeback.c	/^int bdi_writeback_task(struct bdi_writeback *wb)$/;"	f
bdi_writeout_fraction	mm/page-writeback.c	/^static void bdi_writeout_fraction(struct backing_dev_info *bdi,$/;"	f	file:
bdi_writeout_inc	mm/page-writeback.c	/^EXPORT_SYMBOL_GPL(bdi_writeout_inc);$/;"	v
bdi_writeout_inc	mm/page-writeback.c	/^void bdi_writeout_inc(struct backing_dev_info *bdi)$/;"	f
bdput	fs/block_dev.c	/^EXPORT_SYMBOL(bdput);$/;"	v
bdput	fs/block_dev.c	/^void bdput(struct block_device *bdev)$/;"	f
beenonline	kernel/rcutree.h	/^	bool		beenonline;	\/* CPU online at least once. *\/$/;"	m	struct:rcu_data
bh_accounting	fs/buffer.c	/^struct bh_accounting {$/;"	s	file:
bh_cachep	fs/buffer.c	/^static struct kmem_cache *bh_cachep;$/;"	v	typeref:struct:kmem_cache	file:
bh_lru	fs/buffer.c	/^struct bh_lru {$/;"	s	file:
bh_lru_install	fs/buffer.c	/^static void bh_lru_install(struct buffer_head *bh)$/;"	f	file:
bh_lru_lock	fs/buffer.c	1261;"	d	file:
bh_lru_lock	fs/buffer.c	1264;"	d	file:
bh_lru_unlock	fs/buffer.c	1262;"	d	file:
bh_lru_unlock	fs/buffer.c	1265;"	d	file:
bh_submit_read	fs/buffer.c	/^EXPORT_SYMBOL(bh_submit_read);$/;"	v
bh_submit_read	fs/buffer.c	/^int bh_submit_read(struct buffer_head *bh)$/;"	f
bh_uptodate_or_lock	fs/buffer.c	/^EXPORT_SYMBOL(bh_uptodate_or_lock);$/;"	v
bh_uptodate_or_lock	fs/buffer.c	/^int bh_uptodate_or_lock(struct buffer_head *bh)$/;"	f
bhs	fs/buffer.c	/^	struct buffer_head *bhs[BH_LRU_SIZE];$/;"	m	struct:bh_lru	typeref:struct:bh_lru::buffer_head	file:
bignum_hex	kernel/timeconst.pl	/^sub bignum_hex($) {$/;"	s
bin_bus_isa_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_bus_isa_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_bus_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_bus_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_convert_t	kernel/sysctl_binary.c	/^typedef ssize_t bin_convert_t(struct file *file,$/;"	t	file:
bin_dev_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_dev_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_dir	kernel/sysctl_binary.c	/^static bin_convert_t bin_dir;$/;"	v	file:
bin_dir	kernel/sysctl_binary.c	/^static ssize_t bin_dir(struct file *file,$/;"	f	file:
bin_dn_node_address	kernel/sysctl_binary.c	/^static bin_convert_t bin_dn_node_address;$/;"	v	file:
bin_dn_node_address	kernel/sysctl_binary.c	/^static ssize_t bin_dn_node_address(struct file *file,$/;"	f	file:
bin_fs_ocfs2_nm_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_ocfs2_nm_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_ocfs2_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_ocfs2_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_quota_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_quota_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_fs_xfs_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_fs_xfs_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_inotify_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_inotify_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_intvec	kernel/sysctl_binary.c	/^static bin_convert_t bin_intvec;$/;"	v	file:
bin_intvec	kernel/sysctl_binary.c	/^static ssize_t bin_intvec(struct file *file,$/;"	f	file:
bin_ipmi_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_ipmi_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_kern_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_kern_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_mac_hid_files	kernel/sysctl_binary.c	/^static const struct bin_table bin_mac_hid_files[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_atalk_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_atalk_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ax25_param_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ax25_param_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ax25_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ax25_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_core_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_core_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_decnet_conf	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_decnet_conf[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_decnet_conf_vars	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_decnet_conf_vars[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_decnet_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_decnet_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_conf_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_conf_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_conf_vars_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_conf_vars_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_netfilter_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_netfilter_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_route_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_route_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv4_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv4_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_conf_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_conf_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_conf_var_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_conf_var_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_icmp_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_icmp_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_route_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_route_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipv6_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipv6_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_ipx_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_ipx_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_irda_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_irda_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_llc2_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_llc2_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_llc2_timeout_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_llc2_timeout_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_station_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_station_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_llc_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_llc_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_neigh_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_neigh_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_neigh_vars_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_neigh_vars_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_netfilter_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_netfilter_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_netrom_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_netrom_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_rose_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_rose_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_sctp_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_sctp_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_tr_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_tr_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_unix_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_unix_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_net_x25_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_net_x25_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_pm_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_pm_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_pty_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_pty_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_raid_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_raid_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_random_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_random_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_root_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_root_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_s390dbf_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_s390dbf_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_scsi_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_scsi_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_string	kernel/sysctl_binary.c	/^static bin_convert_t bin_string;$/;"	v	file:
bin_string	kernel/sysctl_binary.c	/^static ssize_t bin_string(struct file *file,$/;"	f	file:
bin_sunrpc_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_sunrpc_table[] = {$/;"	v	typeref:struct:bin_table	file:
bin_table	kernel/sysctl_binary.c	/^struct bin_table {$/;"	s	file:
bin_ulongvec	kernel/sysctl_binary.c	/^static bin_convert_t bin_ulongvec;$/;"	v	file:
bin_ulongvec	kernel/sysctl_binary.c	/^static ssize_t bin_ulongvec(struct file *file,$/;"	f	file:
bin_uuid	kernel/sysctl_binary.c	/^static bin_convert_t bin_uuid;$/;"	v	file:
bin_uuid	kernel/sysctl_binary.c	/^static ssize_t bin_uuid(struct file *file,$/;"	f	file:
bin_vm_table	kernel/sysctl_binary.c	/^static const struct bin_table bin_vm_table[] = {$/;"	v	typeref:struct:bin_table	file:
binary_sysctl	kernel/sysctl_binary.c	/^static ssize_t binary_sysctl(const int *name, int nlen,$/;"	f	file:
binfmt_misc_table	kernel/sysctl.c	/^static struct ctl_table binfmt_misc_table[] = {$/;"	v	typeref:struct:ctl_table	file:
bint	kernel/timeconst.pl	/^sub bint($)$/;"	s
bio	fs/direct-io.c	/^	struct bio *bio;		\/* bio under assembly *\/$/;"	m	struct:dio	typeref:struct:dio::bio	file:
bio	fs/mpage.c	/^	struct bio *bio;$/;"	m	struct:mpage_data	typeref:struct:mpage_data::bio	file:
bio_add_page	fs/bio.c	/^EXPORT_SYMBOL(bio_add_page);$/;"	v
bio_add_page	fs/bio.c	/^int bio_add_page(struct bio *bio, struct page *page, unsigned int len,$/;"	f
bio_add_pc_page	fs/bio.c	/^EXPORT_SYMBOL(bio_add_pc_page);$/;"	v
bio_add_pc_page	fs/bio.c	/^int bio_add_pc_page(struct request_queue *q, struct bio *bio, struct page *page,$/;"	f
bio_alloc	fs/bio.c	/^EXPORT_SYMBOL(bio_alloc);$/;"	v
bio_alloc	fs/bio.c	/^struct bio *bio_alloc(gfp_t gfp_mask, int nr_iovecs)$/;"	f
bio_alloc_bioset	fs/bio.c	/^EXPORT_SYMBOL(bio_alloc_bioset);$/;"	v
bio_alloc_bioset	fs/bio.c	/^struct bio *bio_alloc_bioset(gfp_t gfp_mask, int nr_iovecs, struct bio_set *bs)$/;"	f
bio_alloc_map_data	fs/bio.c	/^static struct bio_map_data *bio_alloc_map_data(int nr_segs, int iov_count,$/;"	f	file:
bio_check_pages_dirty	fs/bio.c	/^void bio_check_pages_dirty(struct bio *bio)$/;"	f
bio_clone	fs/bio.c	/^EXPORT_SYMBOL(bio_clone);$/;"	v
bio_clone	fs/bio.c	/^struct bio *bio_clone(struct bio *bio, gfp_t gfp_mask)$/;"	f
bio_copy_kern	fs/bio.c	/^EXPORT_SYMBOL(bio_copy_kern);$/;"	v
bio_copy_kern	fs/bio.c	/^struct bio *bio_copy_kern(struct request_queue *q, void *data, unsigned int len,$/;"	f
bio_copy_kern_endio	fs/bio.c	/^static void bio_copy_kern_endio(struct bio *bio, int err)$/;"	f	file:
bio_copy_user	fs/bio.c	/^EXPORT_SYMBOL(bio_copy_user);$/;"	v
bio_copy_user	fs/bio.c	/^struct bio *bio_copy_user(struct request_queue *q, struct rq_map_data *map_data,$/;"	f
bio_copy_user_iov	fs/bio.c	/^struct bio *bio_copy_user_iov(struct request_queue *q,$/;"	f
bio_dirty_fn	fs/bio.c	/^static void bio_dirty_fn(struct work_struct *work)$/;"	f	file:
bio_dirty_list	fs/bio.c	/^static struct bio *bio_dirty_list;$/;"	v	typeref:struct:bio	file:
bio_endio	fs/bio.c	/^EXPORT_SYMBOL(bio_endio);$/;"	v
bio_endio	fs/bio.c	/^void bio_endio(struct bio *bio, int error)$/;"	f
bio_find_or_create_slab	fs/bio.c	/^static struct kmem_cache *bio_find_or_create_slab(unsigned int extra_size)$/;"	f	file:
bio_flush_dcache_pages	fs/bio.c	/^EXPORT_SYMBOL(bio_flush_dcache_pages);$/;"	v
bio_flush_dcache_pages	fs/bio.c	/^void bio_flush_dcache_pages(struct bio *bi)$/;"	f
bio_free	fs/bio.c	/^EXPORT_SYMBOL(bio_free);$/;"	v
bio_free	fs/bio.c	/^void bio_free(struct bio *bio, struct bio_set *bs)$/;"	f
bio_free_map_data	fs/bio.c	/^static void bio_free_map_data(struct bio_map_data *bmd)$/;"	f	file:
bio_fs_destructor	fs/bio.c	/^static void bio_fs_destructor(struct bio *bio)$/;"	f	file:
bio_get_nr_vecs	fs/bio.c	/^EXPORT_SYMBOL(bio_get_nr_vecs);$/;"	v
bio_get_nr_vecs	fs/bio.c	/^int bio_get_nr_vecs(struct block_device *bdev)$/;"	f
bio_init	fs/bio.c	/^EXPORT_SYMBOL(bio_init);$/;"	v
bio_init	fs/bio.c	/^void bio_init(struct bio *bio)$/;"	f
bio_integrity_add_page	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_add_page);$/;"	v
bio_integrity_add_page	fs/bio-integrity.c	/^int bio_integrity_add_page(struct bio *bio, struct page *page,$/;"	f
bio_integrity_advance	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_advance);$/;"	v
bio_integrity_advance	fs/bio-integrity.c	/^void bio_integrity_advance(struct bio *bio, unsigned int bytes_done)$/;"	f
bio_integrity_alloc	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_alloc);$/;"	v
bio_integrity_alloc	fs/bio-integrity.c	/^struct bio_integrity_payload *bio_integrity_alloc(struct bio *bio,$/;"	f
bio_integrity_alloc_bioset	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_alloc_bioset);$/;"	v
bio_integrity_alloc_bioset	fs/bio-integrity.c	/^struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *bio,$/;"	f
bio_integrity_clone	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_clone);$/;"	v
bio_integrity_clone	fs/bio-integrity.c	/^int bio_integrity_clone(struct bio *bio, struct bio *bio_src,$/;"	f
bio_integrity_enabled	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_enabled);$/;"	v
bio_integrity_enabled	fs/bio-integrity.c	/^int bio_integrity_enabled(struct bio *bio)$/;"	f
bio_integrity_endio	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_endio);$/;"	v
bio_integrity_endio	fs/bio-integrity.c	/^void bio_integrity_endio(struct bio *bio, int error)$/;"	f
bio_integrity_free	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_free);$/;"	v
bio_integrity_free	fs/bio-integrity.c	/^void bio_integrity_free(struct bio *bio, struct bio_set *bs)$/;"	f
bio_integrity_generate	fs/bio-integrity.c	/^static void bio_integrity_generate(struct bio *bio)$/;"	f	file:
bio_integrity_get_tag	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_get_tag);$/;"	v
bio_integrity_get_tag	fs/bio-integrity.c	/^int bio_integrity_get_tag(struct bio *bio, void *tag_buf, unsigned int len)$/;"	f
bio_integrity_hw_sectors	fs/bio-integrity.c	/^static inline unsigned int bio_integrity_hw_sectors(struct blk_integrity *bi,$/;"	f	file:
bio_integrity_init	fs/bio-integrity.c	/^void __init bio_integrity_init(void)$/;"	f
bio_integrity_mark_head	fs/bio-integrity.c	/^void bio_integrity_mark_head(struct bio_integrity_payload *bip,$/;"	f
bio_integrity_mark_tail	fs/bio-integrity.c	/^void bio_integrity_mark_tail(struct bio_integrity_payload *bip,$/;"	f
bio_integrity_prep	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_prep);$/;"	v
bio_integrity_prep	fs/bio-integrity.c	/^int bio_integrity_prep(struct bio *bio)$/;"	f
bio_integrity_set_tag	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_set_tag);$/;"	v
bio_integrity_set_tag	fs/bio-integrity.c	/^int bio_integrity_set_tag(struct bio *bio, void *tag_buf, unsigned int len)$/;"	f
bio_integrity_split	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_split);$/;"	v
bio_integrity_split	fs/bio-integrity.c	/^void bio_integrity_split(struct bio *bio, struct bio_pair *bp, int sectors)$/;"	f
bio_integrity_tag	fs/bio-integrity.c	/^int bio_integrity_tag(struct bio *bio, void *tag_buf, unsigned int len, int set)$/;"	f
bio_integrity_tag_size	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_tag_size);$/;"	v
bio_integrity_tag_size	fs/bio-integrity.c	/^unsigned int bio_integrity_tag_size(struct bio *bio)$/;"	f
bio_integrity_trim	fs/bio-integrity.c	/^EXPORT_SYMBOL(bio_integrity_trim);$/;"	v
bio_integrity_trim	fs/bio-integrity.c	/^void bio_integrity_trim(struct bio *bio, unsigned int offset,$/;"	f
bio_integrity_verify	fs/bio-integrity.c	/^static int bio_integrity_verify(struct bio *bio)$/;"	f	file:
bio_integrity_verify_fn	fs/bio-integrity.c	/^static void bio_integrity_verify_fn(struct work_struct *work)$/;"	f	file:
bio_kmalloc	fs/bio.c	/^EXPORT_SYMBOL(bio_kmalloc);$/;"	v
bio_kmalloc	fs/bio.c	/^struct bio *bio_kmalloc(gfp_t gfp_mask, int nr_iovecs)$/;"	f
bio_kmalloc_destructor	fs/bio.c	/^static void bio_kmalloc_destructor(struct bio *bio)$/;"	f	file:
bio_list	fs/direct-io.c	/^	struct bio *bio_list;		\/* singly linked via bi_private *\/$/;"	m	struct:dio	typeref:struct:dio::bio	file:
bio_lock	fs/direct-io.c	/^	spinlock_t bio_lock;		\/* protects BIO fields below *\/$/;"	m	struct:dio	file:
bio_map_data	fs/bio.c	/^struct bio_map_data {$/;"	s	file:
bio_map_kern	fs/bio.c	/^EXPORT_SYMBOL(bio_map_kern);$/;"	v
bio_map_kern	fs/bio.c	/^struct bio *bio_map_kern(struct request_queue *q, void *data, unsigned int len,$/;"	f
bio_map_kern_endio	fs/bio.c	/^static void bio_map_kern_endio(struct bio *bio, int err)$/;"	f	file:
bio_map_user	fs/bio.c	/^EXPORT_SYMBOL(bio_map_user);$/;"	v
bio_map_user	fs/bio.c	/^struct bio *bio_map_user(struct request_queue *q, struct block_device *bdev,$/;"	f
bio_map_user_iov	fs/bio.c	/^struct bio *bio_map_user_iov(struct request_queue *q, struct block_device *bdev,$/;"	f
bio_pair_end_1	fs/bio.c	/^static void bio_pair_end_1(struct bio *bi, int err)$/;"	f	file:
bio_pair_end_2	fs/bio.c	/^static void bio_pair_end_2(struct bio *bi, int err)$/;"	f	file:
bio_pair_release	fs/bio.c	/^EXPORT_SYMBOL(bio_pair_release);$/;"	v
bio_pair_release	fs/bio.c	/^void bio_pair_release(struct bio_pair *bp)$/;"	f
bio_phys_segments	fs/bio.c	/^EXPORT_SYMBOL(bio_phys_segments);$/;"	v
bio_phys_segments	fs/bio.c	/^inline int bio_phys_segments(struct request_queue *q, struct bio *bio)$/;"	f
bio_put	fs/bio.c	/^EXPORT_SYMBOL(bio_put);$/;"	v
bio_put	fs/bio.c	/^void bio_put(struct bio *bio)$/;"	f
bio_put_slab	fs/bio.c	/^static void bio_put_slab(struct bio_set *bs)$/;"	f	file:
bio_release_pages	fs/bio.c	/^static void bio_release_pages(struct bio *bio)$/;"	f	file:
bio_sector_offset	fs/bio.c	/^EXPORT_SYMBOL(bio_sector_offset);$/;"	v
bio_sector_offset	fs/bio.c	/^sector_t bio_sector_offset(struct bio *bio, unsigned short index,$/;"	f
bio_set_map_data	fs/bio.c	/^static void bio_set_map_data(struct bio_map_data *bmd, struct bio *bio,$/;"	f	file:
bio_set_pages_dirty	fs/bio.c	/^void bio_set_pages_dirty(struct bio *bio)$/;"	f
bio_slab	fs/bio.c	/^struct bio_slab {$/;"	s	file:
bio_slab_max	fs/bio.c	/^static unsigned int bio_slab_nr, bio_slab_max;$/;"	v	file:
bio_slab_nr	fs/bio.c	/^static unsigned int bio_slab_nr, bio_slab_max;$/;"	v	file:
bio_slabs	fs/bio.c	/^static struct bio_slab *bio_slabs;$/;"	v	typeref:struct:bio_slab	file:
bio_split	fs/bio.c	/^EXPORT_SYMBOL(bio_split);$/;"	v
bio_split	fs/bio.c	/^struct bio_pair *bio_split(struct bio *bi, int first_sectors)$/;"	f
bio_uncopy_user	fs/bio.c	/^EXPORT_SYMBOL(bio_uncopy_user);$/;"	v
bio_uncopy_user	fs/bio.c	/^int bio_uncopy_user(struct bio *bio)$/;"	f
bio_unmap_user	fs/bio.c	/^EXPORT_SYMBOL(bio_unmap_user);$/;"	v
bio_unmap_user	fs/bio.c	/^void bio_unmap_user(struct bio *bio)$/;"	f
bioset_create	fs/bio.c	/^EXPORT_SYMBOL(bioset_create);$/;"	v
bioset_create	fs/bio.c	/^struct bio_set *bioset_create(unsigned int pool_size, unsigned int front_pad)$/;"	f
bioset_free	fs/bio.c	/^EXPORT_SYMBOL(bioset_free);$/;"	v
bioset_free	fs/bio.c	/^void bioset_free(struct bio_set *bs)$/;"	f
bioset_integrity_create	fs/bio-integrity.c	/^EXPORT_SYMBOL(bioset_integrity_create);$/;"	v
bioset_integrity_create	fs/bio-integrity.c	/^int bioset_integrity_create(struct bio_set *bs, int pool_size)$/;"	f
bioset_integrity_free	fs/bio-integrity.c	/^EXPORT_SYMBOL(bioset_integrity_free);$/;"	v
bioset_integrity_free	fs/bio-integrity.c	/^void bioset_integrity_free(struct bio_set *bs)$/;"	f
biovec_create_pools	fs/bio.c	/^static int biovec_create_pools(struct bio_set *bs, int pool_entries)$/;"	f	file:
biovec_free_pools	fs/bio.c	/^static void biovec_free_pools(struct bio_set *bs)$/;"	f	file:
biovec_init_slabs	fs/bio.c	/^static void __init biovec_init_slabs(void)$/;"	f	file:
bit	kernel/panic.c	/^	u8	bit;$/;"	m	struct:tnt	file:
bit_waitqueue	kernel/wait.c	/^EXPORT_SYMBOL(bit_waitqueue);$/;"	v
bit_waitqueue	kernel/wait.c	/^wait_queue_head_t *bit_waitqueue(void *word, int bit)$/;"	f
bitset	kernel/futex.c	/^	u32 bitset;$/;"	m	struct:futex_q	file:
bkl	kernel/rtmutex-tester.c	/^	int			bkl;$/;"	m	struct:test_thread_data	file:
bkl_count	kernel/sched.c	/^	unsigned int bkl_count;$/;"	m	struct:rq	file:
blimit	kernel/rcutree.c	/^static int blimit = 10;		\/* Maximum callbacks per softirq. *\/$/;"	v	file:
blimit	kernel/rcutree.h	/^	long		blimit;		\/* Upper limit on a processed batch *\/$/;"	m	struct:rcu_data
blk_integrity_tuple_size	fs/bio-integrity.c	/^static inline unsigned short blk_integrity_tuple_size(struct blk_integrity *bi)$/;"	f	file:
blk_queue_bounce	mm/bounce.c	/^EXPORT_SYMBOL(blk_queue_bounce);$/;"	v
blk_queue_bounce	mm/bounce.c	/^void blk_queue_bounce(struct request_queue *q, struct bio **bio_orig)$/;"	f
blk_to_logical	fs/ioctl.c	231;"	d	file:
blkbits	fs/direct-io.c	/^	unsigned blkbits;		\/* doesn't change *\/$/;"	m	struct:dio	file:
blkdev_aio_write	fs/block_dev.c	/^EXPORT_SYMBOL_GPL(blkdev_aio_write);$/;"	v
blkdev_aio_write	fs/block_dev.c	/^ssize_t blkdev_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
blkdev_close	fs/block_dev.c	/^static int blkdev_close(struct inode * inode, struct file * filp)$/;"	f	file:
blkdev_direct_IO	fs/block_dev.c	/^blkdev_direct_IO(int rw, struct kiocb *iocb, const struct iovec *iov,$/;"	f	file:
blkdev_get	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_get);$/;"	v
blkdev_get	fs/block_dev.c	/^int blkdev_get(struct block_device *bdev, fmode_t mode)$/;"	f
blkdev_get_block	fs/block_dev.c	/^blkdev_get_block(struct inode *inode, sector_t iblock,$/;"	f	file:
blkdev_get_blocks	fs/block_dev.c	/^blkdev_get_blocks(struct inode *inode, sector_t iblock,$/;"	f	file:
blkdev_open	fs/block_dev.c	/^static int blkdev_open(struct inode * inode, struct file * filp)$/;"	f	file:
blkdev_put	fs/block_dev.c	/^EXPORT_SYMBOL(blkdev_put);$/;"	v
blkdev_put	fs/block_dev.c	/^int blkdev_put(struct block_device *bdev, fmode_t mode)$/;"	f
blkdev_readpage	fs/block_dev.c	/^static int blkdev_readpage(struct file * file, struct page * page)$/;"	f	file:
blkdev_releasepage	fs/block_dev.c	/^static int blkdev_releasepage(struct page *page, gfp_t wait)$/;"	f	file:
blkdev_write_begin	fs/block_dev.c	/^static int blkdev_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
blkdev_write_end	fs/block_dev.c	/^static int blkdev_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
blkdev_writepage	fs/block_dev.c	/^static int blkdev_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
blkfactor	fs/direct-io.c	/^	unsigned blkfactor;		\/* When we're using an alignment which$/;"	m	struct:dio	file:
block_all_signals	kernel/signal.c	/^EXPORT_SYMBOL(block_all_signals);$/;"	v
block_all_signals	kernel/signal.c	/^block_all_signals(int (*notifier)(void *priv), void *priv, sigset_t *mask)$/;"	f
block_commit_write	fs/buffer.c	/^EXPORT_SYMBOL(block_commit_write);$/;"	v
block_commit_write	fs/buffer.c	/^int block_commit_write(struct page *page, unsigned from, unsigned to)$/;"	f
block_dump	mm/page-writeback.c	/^int block_dump;$/;"	v
block_dump___mark_inode_dirty	fs/fs-writeback.c	/^static noinline void block_dump___mark_inode_dirty(struct inode *inode)$/;"	f	file:
block_fsync	fs/block_dev.c	/^static int block_fsync(struct file *filp, struct dentry *dentry, int datasync)$/;"	f	file:
block_in_file	fs/direct-io.c	/^	sector_t block_in_file;		\/* Current offset into the underlying$/;"	m	struct:dio	file:
block_invalidatepage	fs/buffer.c	/^EXPORT_SYMBOL(block_invalidatepage);$/;"	v
block_invalidatepage	fs/buffer.c	/^void block_invalidatepage(struct page *page, unsigned long offset)$/;"	f
block_ioctl	fs/block_dev.c	/^static long block_ioctl(struct file *file, unsigned cmd, unsigned long arg)$/;"	f	file:
block_is_partially_uptodate	fs/buffer.c	/^EXPORT_SYMBOL(block_is_partially_uptodate);$/;"	v
block_is_partially_uptodate	fs/buffer.c	/^int block_is_partially_uptodate(struct page *page, read_descriptor_t *desc,$/;"	f
block_llseek	fs/block_dev.c	/^static loff_t block_llseek(struct file *file, loff_t offset, int origin)$/;"	f	file:
block_major	fs/compat_ioctl.c	/^        __u64   block_major;$/;"	m	struct:raw32_config_request	file:
block_minor	fs/compat_ioctl.c	/^        __u64   block_minor;$/;"	m	struct:raw32_config_request	file:
block_page_mkwrite	fs/buffer.c	/^EXPORT_SYMBOL(block_page_mkwrite);$/;"	v
block_page_mkwrite	fs/buffer.c	/^block_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf,$/;"	f
block_prepare_write	fs/buffer.c	/^EXPORT_SYMBOL(block_prepare_write);$/;"	v
block_prepare_write	fs/buffer.c	/^int block_prepare_write(struct page *page, unsigned from, unsigned to,$/;"	f
block_read_full_page	fs/buffer.c	/^EXPORT_SYMBOL(block_read_full_page);$/;"	v
block_read_full_page	fs/buffer.c	/^int block_read_full_page(struct page *page, get_block_t *get_block)$/;"	f
block_sync_page	fs/buffer.c	/^EXPORT_SYMBOL(block_sync_page);$/;"	v
block_sync_page	fs/buffer.c	/^void block_sync_page(struct page *page)$/;"	f
block_truncate_page	fs/buffer.c	/^EXPORT_SYMBOL(block_truncate_page);$/;"	v
block_truncate_page	fs/buffer.c	/^int block_truncate_page(struct address_space *mapping,$/;"	f
block_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(block_write_begin);$/;"	v
block_write_begin	fs/buffer.c	/^int block_write_begin(struct file *file, struct address_space *mapping,$/;"	f
block_write_end	fs/buffer.c	/^EXPORT_SYMBOL(block_write_end);$/;"	v
block_write_end	fs/buffer.c	/^int block_write_end(struct file *file, struct address_space *mapping,$/;"	f
block_write_full_page	fs/buffer.c	/^EXPORT_SYMBOL(block_write_full_page);$/;"	v
block_write_full_page	fs/buffer.c	/^int block_write_full_page(struct page *page, get_block_t *get_block,$/;"	f
block_write_full_page_endio	fs/buffer.c	/^EXPORT_SYMBOL(block_write_full_page_endio);$/;"	v
block_write_full_page_endio	fs/buffer.c	/^int block_write_full_page_endio(struct page *page, get_block_t *get_block,$/;"	f
blocked_tasks	kernel/rcutree.h	/^	struct list_head blocked_tasks[4];$/;"	m	struct:rcu_node	typeref:struct:rcu_node::list_head
blocking_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_call_chain);$/;"	v
blocking_notifier_call_chain	kernel/notifier.c	/^int blocking_notifier_call_chain(struct blocking_notifier_head *nh,$/;"	f
blocking_notifier_chain_cond_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_chain_cond_register);$/;"	v
blocking_notifier_chain_cond_register	kernel/notifier.c	/^int blocking_notifier_chain_cond_register(struct blocking_notifier_head *nh,$/;"	f
blocking_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_chain_register);$/;"	v
blocking_notifier_chain_register	kernel/notifier.c	/^int blocking_notifier_chain_register(struct blocking_notifier_head *nh,$/;"	f
blocking_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(blocking_notifier_chain_unregister);$/;"	v
blocking_notifier_chain_unregister	kernel/notifier.c	/^int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,$/;"	f
blocks_available	fs/direct-io.c	/^	unsigned blocks_available;	\/* At block_in_file.  changes *\/$/;"	m	struct:dio	file:
bm_clear_inode	fs/binfmt_misc.c	/^static void bm_clear_inode(struct inode *inode)$/;"	f	file:
bm_entry_operations	fs/binfmt_misc.c	/^static const struct file_operations bm_entry_operations = {$/;"	v	typeref:struct:file_operations	file:
bm_entry_read	fs/binfmt_misc.c	/^bm_entry_read(struct file * file, char __user * buf, size_t nbytes, loff_t *ppos)$/;"	f	file:
bm_entry_write	fs/binfmt_misc.c	/^static ssize_t bm_entry_write(struct file *file, const char __user *buffer,$/;"	f	file:
bm_fill_super	fs/binfmt_misc.c	/^static int bm_fill_super(struct super_block * sb, void * data, int silent)$/;"	f	file:
bm_fs_type	fs/binfmt_misc.c	/^static struct file_system_type bm_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
bm_fs_type	fs/binfmt_misc.c	/^static struct file_system_type bm_fs_type;$/;"	v	typeref:struct:file_system_type	file:
bm_get_inode	fs/binfmt_misc.c	/^static struct inode *bm_get_inode(struct super_block *sb, int mode)$/;"	f	file:
bm_get_sb	fs/binfmt_misc.c	/^static int bm_get_sb(struct file_system_type *fs_type,$/;"	f	file:
bm_mnt	fs/binfmt_misc.c	/^static struct vfsmount *bm_mnt;$/;"	v	typeref:struct:vfsmount	file:
bm_register_operations	fs/binfmt_misc.c	/^static const struct file_operations bm_register_operations = {$/;"	v	typeref:struct:file_operations	file:
bm_register_write	fs/binfmt_misc.c	/^static ssize_t bm_register_write(struct file *file, const char __user *buffer,$/;"	f	file:
bm_status_operations	fs/binfmt_misc.c	/^static const struct file_operations bm_status_operations = {$/;"	v	typeref:struct:file_operations	file:
bm_status_read	fs/binfmt_misc.c	/^bm_status_read(struct file *file, char __user *buf, size_t nbytes, loff_t *ppos)$/;"	f	file:
bm_status_write	fs/binfmt_misc.c	/^static ssize_t bm_status_write(struct file * file, const char __user * buffer,$/;"	f	file:
bmap	fs/inode.c	/^EXPORT_SYMBOL(bmap);$/;"	v
bmap	fs/inode.c	/^sector_t bmap(struct inode *inode, sector_t block)$/;"	f
boot_delay	kernel/printk.c	/^static unsigned int boot_delay; \/* msecs delay after each printk during bootup *\/$/;"	v	file:
boot_delay_msec	kernel/printk.c	/^static inline void boot_delay_msec(void)$/;"	f	file:
boot_delay_msec	kernel/printk.c	/^static void boot_delay_msec(void)$/;"	f	file:
boot_delay_setup	kernel/printk.c	/^static int __init boot_delay_setup(char *str)$/;"	f	file:
boot_pageset	mm/page_alloc.c	/^static struct per_cpu_pageset boot_pageset[NR_CPUS];$/;"	v	typeref:struct:per_cpu_pageset	file:
boot_tvec_bases	kernel/timer.c	/^EXPORT_SYMBOL(boot_tvec_bases);$/;"	v
boot_tvec_bases	kernel/timer.c	/^struct tvec_base boot_tvec_bases;$/;"	v	typeref:struct:tvec_base
bootmap_bytes	mm/bootmem.c	/^static unsigned long __init bootmap_bytes(unsigned long pages)$/;"	f	file:
bootmem_bootmap_pages	mm/bootmem.c	/^unsigned long __init bootmem_bootmap_pages(unsigned long pages)$/;"	f
bootmem_debug	mm/bootmem.c	/^static int bootmem_debug;$/;"	v	file:
bootmem_debug_setup	mm/bootmem.c	/^static int __init bootmem_debug_setup(char *buf)$/;"	f	file:
bounce_copy_vec	mm/bounce.c	/^static void bounce_copy_vec(struct bio_vec *to, unsigned char *vfrom)$/;"	f	file:
bounce_copy_vec	mm/bounce.c	61;"	d	file:
bounce_end_io	mm/bounce.c	/^static void bounce_end_io(struct bio *bio, mempool_t *pool, int err)$/;"	f	file:
bounce_end_io_read	mm/bounce.c	/^static void bounce_end_io_read(struct bio *bio, int err)$/;"	f	file:
bounce_end_io_read_isa	mm/bounce.c	/^static void bounce_end_io_read_isa(struct bio *bio, int err)$/;"	f	file:
bounce_end_io_write	mm/bounce.c	/^static void bounce_end_io_write(struct bio *bio, int err)$/;"	f	file:
bounce_end_io_write_isa	mm/bounce.c	/^static void bounce_end_io_write_isa(struct bio *bio, int err)$/;"	f	file:
boundary	fs/direct-io.c	/^	int boundary;			\/* prev block is at a boundary *\/$/;"	m	struct:dio	file:
boundary	mm/dmapool.c	/^	size_t boundary;$/;"	m	struct:dma_pool	file:
bp_busy_slots	kernel/hw_breakpoint.c	/^struct bp_busy_slots {$/;"	s	file:
bp_perf_event_destroy	kernel/perf_event.c	/^static void bp_perf_event_destroy(struct perf_event *event)$/;"	f	file:
bp_perf_event_init	kernel/perf_event.c	/^static const struct pmu *bp_perf_event_init(struct perf_event *bp)$/;"	f	file:
bprm_mm_init	fs/exec.c	/^int bprm_mm_init(struct linux_binprm *bprm)$/;"	f
break_cow	mm/ksm.c	/^static void break_cow(struct rmap_item *rmap_item)$/;"	f	file:
break_ksm	mm/ksm.c	/^static int break_ksm(struct vm_area_struct *vma, unsigned long addr)$/;"	f	file:
brl_options	kernel/printk.c	/^	char	*brl_options;			\/* Options for braille driver *\/$/;"	m	struct:console_cmdline	file:
browse_rb	mm/mmap.c	/^static int browse_rb(struct rb_root *root)$/;"	f	file:
bsd_acct_struct	kernel/acct.c	/^struct bsd_acct_struct {$/;"	s	file:
buf	fs/compat_ioctl.c	/^	compat_caddr_t buf;$/;"	m	struct:i2c_msg32	file:
buf	kernel/relay.c	/^	struct rchan_buf *buf;$/;"	m	struct:rchan_percpu_buf_dispatcher	typeref:struct:rchan_percpu_buf_dispatcher::rchan_buf	file:
buf_mapped_default_callback	kernel/relay.c	/^static void buf_mapped_default_callback(struct rchan_buf *buf,$/;"	f	file:
buf_unmapped_default_callback	kernel/relay.c	/^static void buf_unmapped_default_callback(struct rchan_buf *buf,$/;"	f	file:
buffer_busy	fs/buffer.c	/^static inline int buffer_busy(struct buffer_head *bh)$/;"	f	file:
buffer_cpu_notify	fs/buffer.c	/^static int buffer_cpu_notify(struct notifier_block *self,$/;"	f	file:
buffer_exit_cpu	fs/buffer.c	/^static void buffer_exit_cpu(int cpu)$/;"	f	file:
buffer_heads_over_limit	fs/buffer.c	/^int buffer_heads_over_limit;$/;"	v
buffer_init	fs/buffer.c	/^void __init buffer_init(void)$/;"	f
buffer_io_error	fs/buffer.c	/^static void buffer_io_error(struct buffer_head *bh)$/;"	f	file:
buffer_migrate_page	mm/migrate.c	/^EXPORT_SYMBOL(buffer_migrate_page);$/;"	v
buffer_migrate_page	mm/migrate.c	/^int buffer_migrate_page(struct address_space *mapping,$/;"	f
buffered_rmqueue	mm/page_alloc.c	/^struct page *buffered_rmqueue(struct zone *preferred_zone,$/;"	f	file:
bufferram	kernel/compat.c	/^	u32 bufferram;$/;"	m	struct:compat_sysinfo	file:
build_all_zonelists	mm/page_alloc.c	/^void build_all_zonelists(void)$/;"	f
build_date	fs/binfmt_flat.c	/^		unsigned long build_date;		\/* When this one was compiled *\/$/;"	m	struct:lib_info::__anon13	file:
build_numa_sched_groups	kernel/sched.c	/^static int build_numa_sched_groups(struct s_data *d,$/;"	f	file:
build_sched_domains	kernel/sched.c	/^static int build_sched_domains(const struct cpumask *cpu_map)$/;"	f	file:
build_sched_groups	kernel/sched.c	/^static void build_sched_groups(struct s_data *d, enum sched_domain_level l,$/;"	f	file:
build_thisnode_zonelists	mm/page_alloc.c	/^static void build_thisnode_zonelists(pg_data_t *pgdat)$/;"	f	file:
build_zonelist_cache	mm/page_alloc.c	/^static void build_zonelist_cache(pg_data_t *pgdat)$/;"	f	file:
build_zonelists	mm/page_alloc.c	/^static void build_zonelists(pg_data_t *pgdat)$/;"	f	file:
build_zonelists_in_node_order	mm/page_alloc.c	/^static void build_zonelists_in_node_order(pg_data_t *pgdat, int node)$/;"	f	file:
build_zonelists_in_zone_order	mm/page_alloc.c	/^static void build_zonelists_in_zone_order(pg_data_t *pgdat, int nr_nodes)$/;"	f	file:
build_zonelists_node	mm/page_alloc.c	/^static int build_zonelists_node(pg_data_t *pgdat, struct zonelist *zonelist,$/;"	f	file:
bump_cpu_timer	kernel/posix-cpu-timers.c	/^static void bump_cpu_timer(struct k_itimer *timer,$/;"	f	file:
busiest	kernel/sched.c	/^	struct sched_group *busiest; \/* Busiest group in this sd *\/$/;"	m	struct:sd_lb_stats	typeref:struct:sd_lb_stats::sched_group	file:
busiest_load_per_task	kernel/sched.c	/^	unsigned long busiest_load_per_task;$/;"	m	struct:sd_lb_stats	file:
busiest_nr_running	kernel/sched.c	/^	unsigned long busiest_nr_running;$/;"	m	struct:sd_lb_stats	file:
bvec_alloc_bs	fs/bio.c	/^struct bio_vec *bvec_alloc_bs(gfp_t gfp_mask, int nr, unsigned long *idx,$/;"	f
bvec_free_bs	fs/bio.c	/^void bvec_free_bs(struct bio_set *bs, struct bio_vec *bv, unsigned int idx)$/;"	f
bvec_nr_vecs	fs/bio.c	/^unsigned int bvec_nr_vecs(unsigned short idx)$/;"	f
c	kernel/auditsc.c	/^	struct audit_chunk *c[31];$/;"	m	struct:audit_tree_refs	typeref:struct:audit_tree_refs::audit_chunk	file:
c_block_hash	fs/mbcache.c	/^	struct list_head		*c_block_hash;$/;"	m	struct:mb_cache	typeref:struct:mb_cache::list_head	file:
c_bucket_bits	fs/mbcache.c	/^	int				c_bucket_bits;$/;"	m	struct:mb_cache	file:
c_cache_list	fs/mbcache.c	/^	struct list_head		c_cache_list;$/;"	m	struct:mb_cache	typeref:struct:mb_cache::list_head	file:
c_entry_cache	fs/mbcache.c	/^	struct kmem_cache			*c_entry_cache;$/;"	m	struct:mb_cache	typeref:struct:mb_cache::kmem_cache	file:
c_entry_count	fs/mbcache.c	/^	atomic_t			c_entry_count;$/;"	m	struct:mb_cache	file:
c_indexes_count	fs/mbcache.c	/^	int				c_indexes_count;$/;"	m	struct:mb_cache	file:
c_indexes_hash	fs/mbcache.c	/^	struct list_head		*c_indexes_hash[0];$/;"	m	struct:mb_cache	typeref:struct:mb_cache::list_head	file:
c_name	fs/mbcache.c	/^	const char			*c_name;$/;"	m	struct:mb_cache	file:
c_op	fs/mbcache.c	/^	struct mb_cache_op		c_op;$/;"	m	struct:mb_cache	typeref:struct:mb_cache::mb_cache_op	file:
ca32_client	fs/compat.c	1971;"	d	file:
ca32_export	fs/compat.c	1972;"	d	file:
ca32_getfd	fs/compat.c	1973;"	d	file:
ca32_getfs	fs/compat.c	1974;"	d	file:
ca32_svc	fs/compat.c	1970;"	d	file:
ca32_version	fs/compat.c	/^	compat_int_t		ca32_version;	\/* safeguard *\/$/;"	m	struct:compat_nfsctl_arg	file:
cache	mm/slab.c	/^	struct array_cache cache;$/;"	m	struct:arraycache_init	typeref:struct:arraycache_init::array_cache	file:
cache_alloc_debugcheck_after	mm/slab.c	/^static void *cache_alloc_debugcheck_after(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_debugcheck_after	mm/slab.c	3096;"	d	file:
cache_alloc_debugcheck_before	mm/slab.c	/^static inline void cache_alloc_debugcheck_before(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_refill	mm/slab.c	/^static void *cache_alloc_refill(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
cache_cache	mm/slab.c	/^static struct kmem_cache cache_cache = {$/;"	v	typeref:struct:kmem_cache	file:
cache_chain	mm/slab.c	/^static struct list_head cache_chain;$/;"	v	typeref:struct:list_head	file:
cache_dma	mm/slub.c	/^SLAB_ATTR_RO(cache_dma);$/;"	v
cache_dma_show	mm/slub.c	/^static ssize_t cache_dma_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cache_estimate	mm/slab.c	/^static void cache_estimate(unsigned long gfporder, size_t buffer_size,$/;"	f	file:
cache_flusharray	mm/slab.c	/^static void cache_flusharray(struct kmem_cache *cachep, struct array_cache *ac)$/;"	f	file:
cache_free_alien	mm/slab.c	/^static inline int cache_free_alien(struct kmem_cache *cachep, void *objp)$/;"	f	file:
cache_free_debugcheck	mm/slab.c	/^static void *cache_free_debugcheck(struct kmem_cache *cachep, void *objp,$/;"	f	file:
cache_free_debugcheck	mm/slab.c	2936;"	d	file:
cache_grow	mm/slab.c	/^static int cache_grow(struct kmem_cache *cachep,$/;"	f	file:
cache_init_objs	mm/slab.c	/^static void cache_init_objs(struct kmem_cache *cachep,$/;"	f	file:
cache_names	mm/slab.c	/^static struct cache_names __initdata cache_names[] = {$/;"	v	typeref:struct:__initdata	file:
cache_names	mm/slab.c	/^struct cache_names {$/;"	s	file:
cache_reap	mm/slab.c	/^static void cache_reap(struct work_struct *w)$/;"	f	file:
cached	mm/memcontrol.c	/^	struct mem_cgroup *cached; \/* this never be root cgroup *\/$/;"	m	struct:memcg_stock_pcp	typeref:struct:memcg_stock_pcp::mem_cgroup	file:
cachep	kernel/pid_namespace.c	/^	struct kmem_cache *cachep;$/;"	m	struct:pid_cache	typeref:struct:pid_cache::kmem_cache	file:
cachep	mm/slab.c	/^	struct kmem_cache *cachep;$/;"	m	struct:ccupdate_struct	typeref:struct:ccupdate_struct::kmem_cache	file:
cachep	mm/slab.c	/^	struct kmem_cache *cachep;$/;"	m	struct:slab_rcu	typeref:struct:slab_rcu::kmem_cache	file:
cad_pid	kernel/sys.c	/^EXPORT_SYMBOL(cad_pid);$/;"	v
cad_pid	kernel/sys.c	/^struct pid *cad_pid;$/;"	v	typeref:struct:pid
calc_checksum	mm/ksm.c	/^static u32 calc_checksum(struct page *page)$/;"	f	file:
calc_delta_fair	kernel/sched_fair.c	/^calc_delta_fair(unsigned long delta, struct sched_entity *se)$/;"	f	file:
calc_delta_mine	kernel/sched.c	/^calc_delta_mine(unsigned long delta_exec, unsigned long weight,$/;"	f	file:
calc_global_load	kernel/sched.c	/^void calc_global_load(void)$/;"	f
calc_global_load_remove	kernel/sched.c	/^static void calc_global_load_remove(struct rq *rq)$/;"	f	file:
calc_inactive_ratio	mm/memcontrol.c	/^static int calc_inactive_ratio(struct mem_cgroup *memcg, unsigned long *present_pages)$/;"	f	file:
calc_load	kernel/sched.c	/^calc_load(unsigned long load, unsigned long exp, unsigned long active)$/;"	f	file:
calc_load_account_active	kernel/sched.c	/^static void calc_load_account_active(struct rq *this_rq)$/;"	f	file:
calc_load_active	kernel/sched.c	/^	long calc_load_active;$/;"	m	struct:rq	file:
calc_load_tasks	kernel/sched.c	/^static atomic_long_t calc_load_tasks;$/;"	v	file:
calc_load_update	kernel/sched.c	/^	unsigned long calc_load_update;$/;"	m	struct:rq	file:
calc_load_update	kernel/sched.c	/^static unsigned long calc_load_update;$/;"	v	file:
calc_period_shift	mm/page-writeback.c	/^static int calc_period_shift(void)$/;"	f	file:
calc_reloc	fs/binfmt_flat.c	/^calc_reloc(unsigned long r, struct lib_info *p, int curid, int internalp)$/;"	f	file:
calculate_alignment	mm/slub.c	/^static unsigned long calculate_alignment(unsigned long flags,$/;"	f	file:
calculate_imbalance	kernel/sched.c	/^static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,$/;"	f	file:
calculate_node_totalpages	mm/page_alloc.c	/^static void __meminit calculate_node_totalpages(struct pglist_data *pgdat,$/;"	f	file:
calculate_order	mm/slub.c	/^static inline int calculate_order(int size)$/;"	f	file:
calculate_sizes	mm/slub.c	/^static int calculate_sizes(struct kmem_cache *s, int forced_order)$/;"	f	file:
calculate_slab_order	mm/slab.c	/^static size_t calculate_slab_order(struct kmem_cache *cachep,$/;"	f	file:
calculate_threshold	mm/vmstat.c	/^static int calculate_threshold(struct zone *zone)$/;"	f	file:
calculate_totalreserve_pages	mm/page_alloc.c	/^static void calculate_totalreserve_pages(void)$/;"	f	file:
calculate_zone_inactive_ratio	mm/page_alloc.c	/^void calculate_zone_inactive_ratio(struct zone *zone)$/;"	f
call_console_drivers	kernel/printk.c	/^static void call_console_drivers(unsigned start, unsigned end)$/;"	f	file:
call_function_data	kernel/smp.c	/^struct call_function_data {$/;"	s	file:
call_rcu	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(call_rcu);$/;"	v
call_rcu	kernel/rcutiny.c	/^void call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(call_rcu);$/;"	v
call_rcu	kernel/rcutree_plugin.h	/^void call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_bh	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(call_rcu_bh);$/;"	v
call_rcu_bh	kernel/rcutiny.c	/^void call_rcu_bh(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(call_rcu_bh);$/;"	v
call_rcu_bh	kernel/rcutree.c	/^void call_rcu_bh(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_rcu_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(call_rcu_sched);$/;"	v
call_rcu_sched	kernel/rcutree.c	/^void call_rcu_sched(struct rcu_head *head, void (*func)(struct rcu_head *rcu))$/;"	f
call_single_queue	kernel/smp.c	/^struct call_single_queue {$/;"	s	file:
call_usermodehelper_exec	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_exec);$/;"	v
call_usermodehelper_exec	kernel/kmod.c	/^int call_usermodehelper_exec(struct subprocess_info *sub_info,$/;"	f
call_usermodehelper_freeinfo	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_freeinfo);$/;"	v
call_usermodehelper_freeinfo	kernel/kmod.c	/^void call_usermodehelper_freeinfo(struct subprocess_info *info)$/;"	f
call_usermodehelper_pipe	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_pipe);$/;"	v
call_usermodehelper_pipe	kernel/kmod.c	/^int call_usermodehelper_pipe(char *path, char **argv, char **envp,$/;"	f
call_usermodehelper_setcleanup	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_setcleanup);$/;"	v
call_usermodehelper_setcleanup	kernel/kmod.c	/^void call_usermodehelper_setcleanup(struct subprocess_info *info,$/;"	f
call_usermodehelper_setkeys	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_setkeys);$/;"	v
call_usermodehelper_setkeys	kernel/kmod.c	/^void call_usermodehelper_setkeys(struct subprocess_info *info,$/;"	f
call_usermodehelper_setup	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_setup);$/;"	v
call_usermodehelper_setup	kernel/kmod.c	/^struct subprocess_info *call_usermodehelper_setup(char *path, char **argv,$/;"	f
call_usermodehelper_stdinpipe	kernel/kmod.c	/^EXPORT_SYMBOL(call_usermodehelper_stdinpipe);$/;"	v
call_usermodehelper_stdinpipe	kernel/kmod.c	/^int call_usermodehelper_stdinpipe(struct subprocess_info *sub_info,$/;"	f
can_do_mlock	mm/mlock.c	/^EXPORT_SYMBOL(can_do_mlock);$/;"	v
can_do_mlock	mm/mlock.c	/^int can_do_mlock(void)$/;"	f
can_migrate_task	kernel/sched.c	/^int can_migrate_task(struct task_struct *p, struct rq *rq, int this_cpu,$/;"	f	file:
can_nice	kernel/sched.c	/^int can_nice(const struct task_struct *p, const int nice)$/;"	f
can_unuse	fs/inode.c	/^static int can_unuse(struct inode *inode)$/;"	f	file:
can_use_console	kernel/printk.c	/^static inline int can_use_console(unsigned int cpu)$/;"	f	file:
can_vma_merge_after	mm/mmap.c	/^can_vma_merge_after(struct vm_area_struct *vma, unsigned long vm_flags,$/;"	f	file:
can_vma_merge_before	mm/mmap.c	/^can_vma_merge_before(struct vm_area_struct *vma, unsigned long vm_flags,$/;"	f	file:
cancel_delayed_work_sync	kernel/workqueue.c	/^EXPORT_SYMBOL(cancel_delayed_work_sync);$/;"	v
cancel_delayed_work_sync	kernel/workqueue.c	/^int cancel_delayed_work_sync(struct delayed_work *dwork)$/;"	f
cancel_dirty_page	mm/truncate.c	/^EXPORT_SYMBOL(cancel_dirty_page);$/;"	v
cancel_dirty_page	mm/truncate.c	/^void cancel_dirty_page(struct page *page, unsigned int account_size)$/;"	f
cancel_freezing	kernel/freezer.c	/^void cancel_freezing(struct task_struct *p)$/;"	f
cancel_work_sync	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(cancel_work_sync);$/;"	v
cancel_work_sync	kernel/workqueue.c	/^int cancel_work_sync(struct work_struct *work)$/;"	f
cap	kernel/auditsc.c	/^			struct audit_cap_data	cap;$/;"	m	struct:audit_context::__anon22::__anon29	typeref:struct:audit_context::__anon22::__anon29::audit_cap_data	file:
cap	kernel/auditsc.c	/^	struct audit_cap_data	cap;$/;"	m	struct:audit_aux_data_capset	typeref:struct:audit_aux_data_capset::audit_cap_data	file:
cap_get_target_pid	kernel/capability.c	/^static inline int cap_get_target_pid(pid_t pid, kernel_cap_t *pEp,$/;"	f	file:
cap_validate_magic	kernel/capability.c	/^static int cap_validate_magic(cap_user_header_t header, unsigned *tocopy)$/;"	f	file:
capable	kernel/capability.c	/^EXPORT_SYMBOL(capable);$/;"	v
capable	kernel/capability.c	/^int capable(int cap)$/;"	f
capset	kernel/auditsc.c	/^		} capset;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon29	file:
cascade	kernel/timer.c	/^static int cascade(struct tvec_base *base, struct tvec *tv, int index)$/;"	f	file:
cb_barrier	kernel/rcutorture.c	/^	void (*cb_barrier)(void);$/;"	m	struct:rcu_torture_ops	file:
ccupdate_struct	mm/slab.c	/^struct ccupdate_struct {$/;"	s	file:
cd_forget	fs/char_dev.c	/^void cd_forget(struct inode *inode)$/;"	f
cdev	fs/char_dev.c	/^	struct cdev *cdev;		\/* will die *\/$/;"	m	struct:char_device_struct	typeref:struct:char_device_struct::cdev	file:
cdev_add	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_add);$/;"	v
cdev_add	fs/char_dev.c	/^int cdev_add(struct cdev *p, dev_t dev, unsigned count)$/;"	f
cdev_alloc	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_alloc);$/;"	v
cdev_alloc	fs/char_dev.c	/^struct cdev *cdev_alloc(void)$/;"	f
cdev_default_release	fs/char_dev.c	/^static void cdev_default_release(struct kobject *kobj)$/;"	f	file:
cdev_del	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_del);$/;"	v
cdev_del	fs/char_dev.c	/^void cdev_del(struct cdev *p)$/;"	f
cdev_dynamic_release	fs/char_dev.c	/^static void cdev_dynamic_release(struct kobject *kobj)$/;"	f	file:
cdev_get	fs/char_dev.c	/^static struct kobject *cdev_get(struct cdev *p)$/;"	f	file:
cdev_index	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_index);$/;"	v
cdev_index	fs/char_dev.c	/^int cdev_index(struct inode *inode)$/;"	f
cdev_init	fs/char_dev.c	/^EXPORT_SYMBOL(cdev_init);$/;"	v
cdev_init	fs/char_dev.c	/^void cdev_init(struct cdev *cdev, const struct file_operations *fops)$/;"	f
cdev_map	fs/char_dev.c	/^static struct kobj_map *cdev_map;$/;"	v	typeref:struct:kobj_map	file:
cdev_purge	fs/char_dev.c	/^static void cdev_purge(struct cdev *cdev)$/;"	f	file:
cdev_put	fs/char_dev.c	/^void cdev_put(struct cdev *p)$/;"	f
cdev_unmap	fs/char_dev.c	/^static void cdev_unmap(dev_t dev, unsigned count)$/;"	f	file:
cfs	kernel/sched.c	/^	struct cfs_rq cfs;$/;"	m	struct:rq	typeref:struct:rq::cfs_rq	file:
cfs_rq	kernel/sched.c	/^	struct cfs_rq **cfs_rq;$/;"	m	struct:task_group	typeref:struct:task_group::cfs_rq	file:
cfs_rq	kernel/sched.c	/^struct cfs_rq {$/;"	s	file:
cfs_rq_of	kernel/sched_fair.c	/^static inline struct cfs_rq *cfs_rq_of(struct sched_entity *se)$/;"	f	file:
cfs_rq_set_shares	kernel/sched.c	/^static void cfs_rq_set_shares(struct cfs_rq *cfs_rq, unsigned long shares)$/;"	f	file:
cft	kernel/cgroup.c	/^	struct cftype *cft;$/;"	m	struct:cgroup_seqfile_state	typeref:struct:cgroup_seqfile_state::cftype	file:
cft_memory_pressure_enabled	kernel/cpuset.c	/^static struct cftype cft_memory_pressure_enabled = {$/;"	v	typeref:struct:cftype	file:
cft_release_agent	kernel/cgroup.c	/^static struct cftype cft_release_agent = {$/;"	v	typeref:struct:cftype	file:
cg	kernel/cgroup.c	/^	struct css_set *cg;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::css_set	file:
cg_cgroup_link	kernel/cgroup.c	/^struct cg_cgroup_link {$/;"	s	file:
cg_link_list	kernel/cgroup.c	/^	struct list_head cg_link_list;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::list_head	file:
cgroup	kernel/cgroup.c	/^	struct cgroup *cgroup;$/;"	m	struct:cgroup_seqfile_state	typeref:struct:cgroup_seqfile_state::cgroup	file:
cgroup_add_file	kernel/cgroup.c	/^int cgroup_add_file(struct cgroup *cgrp,$/;"	f
cgroup_add_files	kernel/cgroup.c	/^int cgroup_add_files(struct cgroup *cgrp,$/;"	f
cgroup_advance_iter	kernel/cgroup.c	/^static void cgroup_advance_iter(struct cgroup *cgrp,$/;"	f	file:
cgroup_attach_task	kernel/cgroup.c	/^int cgroup_attach_task(struct cgroup *cgrp, struct task_struct *tsk)$/;"	f
cgroup_backing_dev_info	kernel/cgroup.c	/^static struct backing_dev_info cgroup_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info	file:
cgroup_ca	kernel/sched.c	/^static inline struct cpuacct *cgroup_ca(struct cgroup *cgrp)$/;"	f	file:
cgroup_call_pre_destroy	kernel/cgroup.c	/^static int cgroup_call_pre_destroy(struct cgroup *cgrp)$/;"	f	file:
cgroup_clear_css_refs	kernel/cgroup.c	/^static int cgroup_clear_css_refs(struct cgroup *cgrp)$/;"	f	file:
cgroup_clear_directory	kernel/cgroup.c	/^static void cgroup_clear_directory(struct dentry *dentry)$/;"	f	file:
cgroup_clone	kernel/cgroup.c	/^int cgroup_clone(struct task_struct *tsk, struct cgroup_subsys *subsys,$/;"	f
cgroup_create	kernel/cgroup.c	/^static long cgroup_create(struct cgroup *parent, struct dentry *dentry,$/;"	f	file:
cgroup_create_dir	kernel/cgroup.c	/^static int cgroup_create_dir(struct cgroup *cgrp, struct dentry *dentry,$/;"	f	file:
cgroup_create_file	kernel/cgroup.c	/^static int cgroup_create_file(struct dentry *dentry, mode_t mode,$/;"	f	file:
cgroup_cs	kernel/cpuset.c	/^static inline struct cpuset *cgroup_cs(struct cgroup *cont)$/;"	f	file:
cgroup_css_links_read	kernel/cgroup.c	/^static int cgroup_css_links_read(struct cgroup *cont,$/;"	f	file:
cgroup_d_remove_dir	kernel/cgroup.c	/^static void cgroup_d_remove_dir(struct dentry *dentry)$/;"	f	file:
cgroup_diput	kernel/cgroup.c	/^static void cgroup_diput(struct dentry *dentry, struct inode *inode)$/;"	f	file:
cgroup_dir_inode_operations	kernel/cgroup.c	/^static const struct inode_operations cgroup_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
cgroup_dir_inode_operations	kernel/cgroup.c	/^static const struct inode_operations cgroup_dir_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
cgroup_disable	kernel/cgroup.c	/^static int __init cgroup_disable(char *str)$/;"	f	file:
cgroup_drop_root	kernel/cgroup.c	/^static void cgroup_drop_root(struct cgroupfs_root *root)$/;"	f	file:
cgroup_enable_task_cg_lists	kernel/cgroup.c	/^static void cgroup_enable_task_cg_lists(void)$/;"	f	file:
cgroup_exclude_rmdir	kernel/cgroup.c	/^void cgroup_exclude_rmdir(struct cgroup_subsys_state *css)$/;"	f
cgroup_exit	kernel/cgroup.c	/^void cgroup_exit(struct task_struct *tsk, int run_callbacks)$/;"	f
cgroup_file_mode	kernel/cgroup.c	/^static mode_t cgroup_file_mode(const struct cftype *cft)$/;"	f	file:
cgroup_file_open	kernel/cgroup.c	/^static int cgroup_file_open(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_file_operations	kernel/cgroup.c	/^static const struct file_operations cgroup_file_operations = {$/;"	v	typeref:struct:file_operations	file:
cgroup_file_read	kernel/cgroup.c	/^static ssize_t cgroup_file_read(struct file *file, char __user *buf,$/;"	f	file:
cgroup_file_release	kernel/cgroup.c	/^static int cgroup_file_release(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_file_write	kernel/cgroup.c	/^static ssize_t cgroup_file_write(struct file *file, const char __user *buf,$/;"	f	file:
cgroup_fork	kernel/cgroup.c	/^void cgroup_fork(struct task_struct *child)$/;"	f
cgroup_fork_callbacks	kernel/cgroup.c	/^void cgroup_fork_callbacks(struct task_struct *child)$/;"	f
cgroup_freezer	kernel/cgroup_freezer.c	/^static inline struct freezer *cgroup_freezer($/;"	f	file:
cgroup_frozen	kernel/cgroup_freezer.c	/^int cgroup_frozen(struct task_struct *task)$/;"	f
cgroup_fs_type	kernel/cgroup.c	/^static struct file_system_type cgroup_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
cgroup_get_rootdir	kernel/cgroup.c	/^static int cgroup_get_rootdir(struct super_block *sb)$/;"	f	file:
cgroup_get_sb	kernel/cgroup.c	/^static int cgroup_get_sb(struct file_system_type *fs_type,$/;"	f	file:
cgroup_has_css_refs	kernel/cgroup.c	/^static int cgroup_has_css_refs(struct cgroup *cgrp)$/;"	f	file:
cgroup_init	kernel/cgroup.c	/^int __init cgroup_init(void)$/;"	f
cgroup_init_early	kernel/cgroup.c	/^int __init cgroup_init_early(void)$/;"	f
cgroup_init_subsys	kernel/cgroup.c	/^static void __init cgroup_init_subsys(struct cgroup_subsys *ss)$/;"	f	file:
cgroup_is_descendant	kernel/cgroup.c	/^int cgroup_is_descendant(const struct cgroup *cgrp, struct task_struct *task)$/;"	f
cgroup_is_releasable	kernel/cgroup.c	/^static int cgroup_is_releasable(const struct cgroup *cgrp)$/;"	f	file:
cgroup_is_removed	kernel/cgroup.c	/^inline int cgroup_is_removed(const struct cgroup *cgrp)$/;"	f
cgroup_iter_end	kernel/cgroup.c	/^void cgroup_iter_end(struct cgroup *cgrp, struct cgroup_iter *it)$/;"	f
cgroup_iter_next	kernel/cgroup.c	/^struct task_struct *cgroup_iter_next(struct cgroup *cgrp,$/;"	f
cgroup_iter_start	kernel/cgroup.c	/^void cgroup_iter_start(struct cgroup *cgrp, struct cgroup_iter *it)$/;"	f
cgroup_kill_sb	kernel/cgroup.c	/^static void cgroup_kill_sb(struct super_block *sb) {$/;"	f	file:
cgroup_lock	kernel/cgroup.c	/^void cgroup_lock(void)$/;"	f
cgroup_lock_hierarchy	kernel/cgroup.c	/^static void cgroup_lock_hierarchy(struct cgroupfs_root *root)$/;"	f	file:
cgroup_lock_live_group	kernel/cgroup.c	/^bool cgroup_lock_live_group(struct cgroup *cgrp)$/;"	f
cgroup_map_add	kernel/cgroup.c	/^static int cgroup_map_add(struct cgroup_map_cb *cb, const char *key, u64 value)$/;"	f	file:
cgroup_mkdir	kernel/cgroup.c	/^static int cgroup_mkdir(struct inode *dir, struct dentry *dentry, int mode)$/;"	f	file:
cgroup_new_inode	kernel/cgroup.c	/^static struct inode *cgroup_new_inode(mode_t mode, struct super_block *sb)$/;"	f	file:
cgroup_open	kernel/cgroup.c	/^static int cgroup_open(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_ops	kernel/cgroup.c	/^static const struct super_operations cgroup_ops = {$/;"	v	typeref:struct:super_operations	file:
cgroup_path	kernel/cgroup.c	/^int cgroup_path(const struct cgroup *cgrp, char *buf, int buflen)$/;"	f
cgroup_pidlist_find	kernel/cgroup.c	/^static struct cgroup_pidlist *cgroup_pidlist_find(struct cgroup *cgrp,$/;"	f	file:
cgroup_pidlist_next	kernel/cgroup.c	/^static void *cgroup_pidlist_next(struct seq_file *s, void *v, loff_t *pos)$/;"	f	file:
cgroup_pidlist_open	kernel/cgroup.c	/^static int cgroup_pidlist_open(struct file *file, enum cgroup_filetype type)$/;"	f	file:
cgroup_pidlist_operations	kernel/cgroup.c	/^static const struct file_operations cgroup_pidlist_operations = {$/;"	v	typeref:struct:file_operations	file:
cgroup_pidlist_release	kernel/cgroup.c	/^static int cgroup_pidlist_release(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_pidlist_seq_operations	kernel/cgroup.c	/^static const struct seq_operations cgroup_pidlist_seq_operations = {$/;"	v	typeref:struct:seq_operations	file:
cgroup_pidlist_show	kernel/cgroup.c	/^static int cgroup_pidlist_show(struct seq_file *s, void *v)$/;"	f	file:
cgroup_pidlist_start	kernel/cgroup.c	/^static void *cgroup_pidlist_start(struct seq_file *s, loff_t *pos)$/;"	f	file:
cgroup_pidlist_stop	kernel/cgroup.c	/^static void cgroup_pidlist_stop(struct seq_file *s, void *v)$/;"	f	file:
cgroup_populate_dir	kernel/cgroup.c	/^static int cgroup_populate_dir(struct cgroup *cgrp)$/;"	f	file:
cgroup_post_fork	kernel/cgroup.c	/^void cgroup_post_fork(struct task_struct *child)$/;"	f
cgroup_procs_open	kernel/cgroup.c	/^static int cgroup_procs_open(struct inode *unused, struct file *file)$/;"	f	file:
cgroup_read_notify_on_release	kernel/cgroup.c	/^static u64 cgroup_read_notify_on_release(struct cgroup *cgrp,$/;"	f	file:
cgroup_read_s64	kernel/cgroup.c	/^static ssize_t cgroup_read_s64(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_read_u64	kernel/cgroup.c	/^static ssize_t cgroup_read_u64(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_refcount_read	kernel/cgroup.c	/^static u64 cgroup_refcount_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
cgroup_release_agent	kernel/cgroup.c	/^static void cgroup_release_agent(struct work_struct *work)$/;"	f	file:
cgroup_release_agent_show	kernel/cgroup.c	/^static int cgroup_release_agent_show(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_release_agent_write	kernel/cgroup.c	/^static int cgroup_release_agent_write(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_release_and_wakeup_rmdir	kernel/cgroup.c	/^void cgroup_release_and_wakeup_rmdir(struct cgroup_subsys_state *css)$/;"	f
cgroup_release_pid_array	kernel/cgroup.c	/^static void cgroup_release_pid_array(struct cgroup_pidlist *l)$/;"	f	file:
cgroup_remount	kernel/cgroup.c	/^static int cgroup_remount(struct super_block *sb, int *flags, char *data)$/;"	f	file:
cgroup_rename	kernel/cgroup.c	/^static int cgroup_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
cgroup_rmdir	kernel/cgroup.c	/^static int cgroup_rmdir(struct inode *unused_dir, struct dentry *dentry)$/;"	f	file:
cgroup_rmdir_waitq	kernel/cgroup.c	/^DECLARE_WAIT_QUEUE_HEAD(cgroup_rmdir_waitq);$/;"	v
cgroup_root_from_opts	kernel/cgroup.c	/^static struct cgroupfs_root *cgroup_root_from_opts(struct cgroup_sb_opts *opts)$/;"	f	file:
cgroup_sb_opts	kernel/cgroup.c	/^struct cgroup_sb_opts {$/;"	s	file:
cgroup_scan_tasks	kernel/cgroup.c	/^int cgroup_scan_tasks(struct cgroup_scanner *scan)$/;"	f
cgroup_seqfile_operations	kernel/cgroup.c	/^static const struct file_operations cgroup_seqfile_operations = {$/;"	v	typeref:struct:file_operations	file:
cgroup_seqfile_release	kernel/cgroup.c	/^static int cgroup_seqfile_release(struct inode *inode, struct file *file)$/;"	f	file:
cgroup_seqfile_show	kernel/cgroup.c	/^static int cgroup_seqfile_show(struct seq_file *m, void *arg)$/;"	f	file:
cgroup_seqfile_state	kernel/cgroup.c	/^struct cgroup_seqfile_state {$/;"	s	file:
cgroup_set_super	kernel/cgroup.c	/^static int cgroup_set_super(struct super_block *sb, void *data)$/;"	f	file:
cgroup_show_options	kernel/cgroup.c	/^static int cgroup_show_options(struct seq_file *seq, struct vfsmount *vfs)$/;"	f	file:
cgroup_subsys_init_idr	kernel/cgroup.c	/^static int __init cgroup_subsys_init_idr(struct cgroup_subsys *ss)$/;"	f	file:
cgroup_task_count	kernel/cgroup.c	/^int cgroup_task_count(const struct cgroup *cgrp)$/;"	f
cgroup_tasks_open	kernel/cgroup.c	/^static int cgroup_tasks_open(struct inode *unused, struct file *file)$/;"	f	file:
cgroup_tasks_write	kernel/cgroup.c	/^static int cgroup_tasks_write(struct cgroup *cgrp, struct cftype *cft, u64 pid)$/;"	f	file:
cgroup_test_super	kernel/cgroup.c	/^static int cgroup_test_super(struct super_block *sb, void *data)$/;"	f	file:
cgroup_tg	kernel/sched.c	/^static inline struct task_group *cgroup_tg(struct cgroup *cgrp)$/;"	f	file:
cgroup_to_ns	kernel/ns_cgroup.c	/^static inline struct ns_cgroup *cgroup_to_ns($/;"	f	file:
cgroup_unlock	kernel/cgroup.c	/^void cgroup_unlock(void)$/;"	f
cgroup_unlock_hierarchy	kernel/cgroup.c	/^static void cgroup_unlock_hierarchy(struct cgroupfs_root *root)$/;"	f	file:
cgroup_wakeup_rmdir_waiter	kernel/cgroup.c	/^static void cgroup_wakeup_rmdir_waiter(struct cgroup *cgrp)$/;"	f	file:
cgroup_write_X64	kernel/cgroup.c	/^static ssize_t cgroup_write_X64(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroup_write_notify_on_release	kernel/cgroup.c	/^static int cgroup_write_notify_on_release(struct cgroup *cgrp,$/;"	f	file:
cgroup_write_string	kernel/cgroup.c	/^static ssize_t cgroup_write_string(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cgroupfs_root	kernel/cgroup.c	/^struct cgroupfs_root {$/;"	s	file:
cgroupstats_build	kernel/cgroup.c	/^int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry)$/;"	f
cgroupstats_open	kernel/cgroup.c	/^static int cgroupstats_open(struct inode *inode, struct file *file)$/;"	f	file:
cgroupstats_ops	kernel/taskstats.c	/^static struct genl_ops cgroupstats_ops = {$/;"	v	typeref:struct:genl_ops	file:
cgroupstats_user_cmd	kernel/taskstats.c	/^static int cgroupstats_user_cmd(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
cgrp	kernel/cgroup.c	/^	struct cgroup *cgrp;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::cgroup	file:
cgrp_link_list	kernel/cgroup.c	/^	struct list_head cgrp_link_list;$/;"	m	struct:cg_cgroup_link	typeref:struct:cg_cgroup_link::list_head	file:
chain	kernel/futex.c	/^	struct plist_head chain;$/;"	m	struct:futex_hash_bucket	typeref:struct:futex_hash_bucket::plist_head	file:
chain_hlocks	kernel/lockdep.c	/^static u16 chain_hlocks[MAX_LOCKDEP_CHAIN_HLOCKS];$/;"	v	file:
chain_lookup_hits	kernel/lockdep.c	/^atomic_t chain_lookup_hits;$/;"	v
chain_lookup_misses	kernel/lockdep.c	/^atomic_t chain_lookup_misses;$/;"	v
chainhash_table	kernel/lockdep.c	/^static struct list_head chainhash_table[CHAINHASH_SIZE];$/;"	v	typeref:struct:list_head	file:
chainhashentry	kernel/lockdep.c	294;"	d	file:
change_mnt_propagation	fs/pnode.c	/^void change_mnt_propagation(struct vfsmount *mnt, int type)$/;"	f
change_mount_flags	fs/namespace.c	/^static int change_mount_flags(struct vfsmount *mnt, int ms_flags)$/;"	f	file:
change_pageblock_range	mm/page_alloc.c	/^static void change_pageblock_range(struct page *pageblock_page,$/;"	f	file:
change_pid	kernel/pid.c	/^void change_pid(struct task_struct *task, enum pid_type type,$/;"	f
change_pmd_range	mm/mprotect.c	/^static inline void change_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
change_protection	mm/mprotect.c	/^static void change_protection(struct vm_area_struct *vma,$/;"	f	file:
change_pte_range	mm/mprotect.c	/^static void change_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
change_pud_range	mm/mprotect.c	/^static inline void change_pud_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
char_device_struct	fs/char_dev.c	/^static struct char_device_struct {$/;"	s	file:
charge	mm/memcontrol.c	/^	int charge;$/;"	m	struct:memcg_stock_pcp	file:
charge_type	mm/memcontrol.c	/^enum charge_type {$/;"	g	file:
check_bytes	mm/slub.c	/^static u8 *check_bytes(u8 *start, unsigned int value, unsigned int bytes)$/;"	f	file:
check_bytes_and_report	mm/slub.c	/^static int check_bytes_and_report(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_chain_key	kernel/lockdep.c	/^static void check_chain_key(struct task_struct *curr)$/;"	f	file:
check_class_changed	kernel/sched.c	/^static inline void check_class_changed(struct rq *rq, struct task_struct *p,$/;"	f	file:
check_clock	kernel/posix-cpu-timers.c	/^static int check_clock(const clockid_t which_clock)$/;"	f	file:
check_cpu_itimer	kernel/posix-cpu-timers.c	/^static void check_cpu_itimer(struct task_struct *tsk, struct cpu_itimer *it,$/;"	f	file:
check_cpu_stall	kernel/rcutree.c	/^static void check_cpu_stall(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
check_deadlock	kernel/lockdep.c	/^check_deadlock(struct task_struct *curr, struct held_lock *next,$/;"	f	file:
check_disk_change	fs/block_dev.c	/^EXPORT_SYMBOL(check_disk_change);$/;"	v
check_disk_change	fs/block_dev.c	/^int check_disk_change(struct block_device *bdev)$/;"	f
check_disk_size_change	fs/block_dev.c	/^EXPORT_SYMBOL(check_disk_size_change);$/;"	v
check_disk_size_change	fs/block_dev.c	/^void check_disk_size_change(struct gendisk *disk, struct block_device *bdev)$/;"	f
check_file	fs/binfmt_misc.c	/^static Node *check_file(struct linux_binprm *bprm)$/;"	f	file:
check_flags	kernel/lockdep.c	/^static void check_flags(unsigned long flags)$/;"	f	file:
check_for_new_grace_period	kernel/rcutree.c	/^check_for_new_grace_period(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
check_for_regular_memory	mm/page_alloc.c	/^static void check_for_regular_memory(pg_data_t *pgdat)$/;"	f	file:
check_for_release	kernel/cgroup.c	/^static void check_for_release(struct cgroup *cgrp)$/;"	f	file:
check_for_tasks	kernel/cpu.c	/^static inline void check_for_tasks(int cpu)$/;"	f	file:
check_free_space	kernel/acct.c	/^static int check_free_space(struct bsd_acct_struct *acct, struct file *file)$/;"	f	file:
check_huge_range	mm/mempolicy.c	/^static inline void check_huge_range(struct vm_area_struct *vma,$/;"	f	file:
check_huge_range	mm/mempolicy.c	/^static void check_huge_range(struct vm_area_struct *vma,$/;"	f	file:
check_hung_task	kernel/hung_task.c	/^static void check_hung_task(struct task_struct *t, unsigned long timeout)$/;"	f	file:
check_hung_uninterruptible_tasks	kernel/hung_task.c	/^static void check_hung_uninterruptible_tasks(unsigned long timeout)$/;"	f	file:
check_irq_off	mm/slab.c	/^static void check_irq_off(void)$/;"	f	file:
check_irq_off	mm/slab.c	2402;"	d	file:
check_irq_on	mm/slab.c	/^static void check_irq_on(void)$/;"	f	file:
check_irq_on	mm/slab.c	2403;"	d	file:
check_irq_usage	kernel/lockdep.c	/^static int check_irq_usage(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_irqs_on	fs/buffer.c	/^static inline void check_irqs_on(void)$/;"	f	file:
check_kill_permission	kernel/signal.c	/^static int check_kill_permission(int sig, struct siginfo *info,$/;"	f	file:
check_kprobe_rereg	kernel/kprobes.c	/^static inline int check_kprobe_rereg(struct kprobe *p)$/;"	f	file:
check_mnt	fs/namespace.c	/^static inline int check_mnt(struct vfsmount *mnt)$/;"	f	file:
check_modstruct_version	kernel/module.c	/^static inline int check_modstruct_version(Elf_Shdr *sechdrs,$/;"	f	file:
check_move_unevictable_page	mm/vmscan.c	/^static void check_move_unevictable_page(struct page *page, struct zone *zone)$/;"	f	file:
check_new_page	mm/page_alloc.c	/^static inline int check_new_page(struct page *page)$/;"	f	file:
check_noncircular	kernel/lockdep.c	/^check_noncircular(struct lock_list *root, struct lock_class *target,$/;"	f	file:
check_object	mm/slub.c	/^static inline int check_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_object	mm/slub.c	/^static int check_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_pad_bytes	mm/slub.c	/^static int check_pad_bytes(struct kmem_cache *s, struct page *page, u8 *p)$/;"	f	file:
check_pages_isolated	mm/memory_hotplug.c	/^check_pages_isolated(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
check_pages_isolated_cb	mm/memory_hotplug.c	/^check_pages_isolated_cb(unsigned long start_pfn, unsigned long nr_pages,$/;"	f	file:
check_pgd_range	mm/mempolicy.c	/^static inline int check_pgd_range(struct vm_area_struct *vma,$/;"	f	file:
check_pmd_range	mm/mempolicy.c	/^static inline int check_pmd_range(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
check_poison_mem	mm/debug-pagealloc.c	/^static void check_poison_mem(unsigned char *mem, size_t bytes)$/;"	f	file:
check_poison_obj	mm/slab.c	/^static void check_poison_obj(struct kmem_cache *cachep, void *objp)$/;"	f	file:
check_power_save_busiest_group	kernel/sched.c	/^static inline int check_power_save_busiest_group(struct sd_lb_stats *sds,$/;"	f	file:
check_preempt_curr	kernel/sched.c	/^void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)$/;"	f	file:
check_preempt_curr_idle	kernel/sched_idletask.c	/^static void check_preempt_curr_idle(struct rq *rq, struct task_struct *p, int flags)$/;"	f	file:
check_preempt_curr_rt	kernel/sched_rt.c	/^static void check_preempt_curr_rt(struct rq *rq, struct task_struct *p, int flags)$/;"	f	file:
check_preempt_equal_prio	kernel/sched_rt.c	/^static void check_preempt_equal_prio(struct rq *rq, struct task_struct *p)$/;"	f	file:
check_preempt_tick	kernel/sched_fair.c	/^check_preempt_tick(struct cfs_rq *cfs_rq, struct sched_entity *curr)$/;"	f	file:
check_preempt_wakeup	kernel/sched_fair.c	/^static void check_preempt_wakeup(struct rq *rq, struct task_struct *p, int wake_flags)$/;"	f	file:
check_prev_add	kernel/lockdep.c	/^check_prev_add(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_prev_add_irq	kernel/lockdep.c	/^check_prev_add_irq(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_prevs_add	kernel/lockdep.c	/^check_prevs_add(struct task_struct *curr, struct held_lock *next)$/;"	f	file:
check_process_timers	kernel/posix-cpu-timers.c	/^static void check_process_timers(struct task_struct *tsk,$/;"	f	file:
check_pte_range	mm/mempolicy.c	/^static int check_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
check_pud_range	mm/mempolicy.c	/^static inline int check_pud_range(struct vm_area_struct *vma, pgd_t *pgd,$/;"	f	file:
check_range	mm/mempolicy.c	/^check_range(struct mm_struct *mm, unsigned long start, unsigned long end,$/;"	f	file:
check_safety	kernel/kprobes.c	/^static int __kprobes check_safety(void)$/;"	f	file:
check_same_owner	kernel/sched.c	/^static bool check_same_owner(struct task_struct *p)$/;"	f	file:
check_slab	mm/slub.c	/^static int check_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
check_slabp	mm/slab.c	/^static void check_slabp(struct kmem_cache *cachep, struct slab *slabp)$/;"	f	file:
check_slabp	mm/slab.c	2937;"	d	file:
check_som_header	fs/binfmt_som.c	/^static int check_som_header(struct som_hdr *som_ex)$/;"	f	file:
check_special_flags	fs/binfmt_misc.c	/^static char * check_special_flags (char * sfs, Node * e)$/;"	f	file:
check_spinlock_acquired	mm/slab.c	/^static void check_spinlock_acquired(struct kmem_cache *cachep)$/;"	f	file:
check_spinlock_acquired	mm/slab.c	2404;"	d	file:
check_spinlock_acquired_node	mm/slab.c	/^static void check_spinlock_acquired_node(struct kmem_cache *cachep, int node)$/;"	f	file:
check_spinlock_acquired_node	mm/slab.c	2405;"	d	file:
check_spread	kernel/sched_fair.c	/^static void check_spread(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
check_stack_usage	kernel/exit.c	/^static inline void check_stack_usage(void) {}$/;"	f	file:
check_stack_usage	kernel/exit.c	/^static void check_stack_usage(void)$/;"	f	file:
check_sticky	fs/namei.c	/^static inline int check_sticky(struct inode *dir, struct inode *inode)$/;"	f	file:
check_thread_timers	kernel/posix-cpu-timers.c	/^static void check_thread_timers(struct task_struct *tsk,$/;"	f	file:
check_unlock	kernel/lockdep.c	/^static int check_unlock(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
check_unsafe_exec	fs/exec.c	/^int check_unsafe_exec(struct linux_binprm *bprm)$/;"	f
check_unshare_flags	kernel/fork.c	/^static void check_unshare_flags(unsigned long *flags_ptr)$/;"	f	file:
check_usage	kernel/lockdep.c	/^check_usage(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
check_usage_backwards	kernel/lockdep.c	/^check_usage_backwards(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
check_usage_f	kernel/lockdep.c	/^typedef int (*check_usage_f)(struct task_struct *, struct held_lock *,$/;"	t	file:
check_usage_forwards	kernel/lockdep.c	/^check_usage_forwards(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
check_usemap_section_nr	mm/sparse.c	/^static void __init check_usemap_section_nr(int nid, unsigned long *usemap)$/;"	f	file:
check_valid_pointer	mm/slub.c	/^static inline int check_valid_pointer(struct kmem_cache *s,$/;"	f	file:
check_version	kernel/module.c	/^static inline int check_version(Elf_Shdr *sechdrs,$/;"	f	file:
check_version	kernel/module.c	/^static int check_version(Elf_Shdr *sechdrs,$/;"	f	file:
checksum	mm/kmemleak.c	/^	u32 checksum;$/;"	m	struct:kmemleak_object	file:
child	kernel/sysctl_binary.c	/^	const struct bin_table	*child;$/;"	m	struct:bin_table	typeref:struct:bin_table::bin_table	file:
child_wait	kernel/exit.c	/^	wait_queue_t		child_wait;$/;"	m	struct:wait_opts	file:
child_wait_callback	kernel/exit.c	/^static int child_wait_callback(wait_queue_t *wait, unsigned mode,$/;"	f	file:
children	kernel/sched.c	/^	struct list_head children;$/;"	m	struct:task_group	typeref:struct:task_group::list_head	file:
chill	kernel/stop_machine.c	/^static int chill(void *unused)$/;"	f	file:
chown_common	fs/open.c	/^static int chown_common(struct path *path, uid_t user, gid_t group)$/;"	f	file:
chrdev_init	fs/char_dev.c	/^void __init chrdev_init(void)$/;"	f
chrdev_open	fs/char_dev.c	/^static int chrdev_open(struct inode *inode, struct file *filp)$/;"	f	file:
chrdev_show	fs/char_dev.c	/^void chrdev_show(struct seq_file *f, off_t offset)$/;"	f
chrdevs	fs/char_dev.c	/^} *chrdevs[CHRDEV_MAJOR_HASH_SIZE];$/;"	v	typeref:struct:char_device_struct	file:
chroot_fs_refs	fs/fs_struct.c	/^void chroot_fs_refs(struct path *old_root, struct path *new_root)$/;"	f
chunk_hash	kernel/audit_tree.c	/^static inline struct list_head *chunk_hash(const struct inode *inode)$/;"	f	file:
chunk_hash_heads	kernel/audit_tree.c	/^static struct list_head chunk_hash_heads[HASH_SIZE];$/;"	v	typeref:struct:list_head	file:
chunks	kernel/audit_tree.c	/^	struct list_head chunks;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
circular_queue	kernel/lockdep.c	/^struct circular_queue {$/;"	s	file:
cl32_addrlist	fs/compat.c	/^	struct in_addr		cl32_addrlist[NFSCLNT_ADDRMAX];$/;"	m	struct:compat_nfsctl_client	typeref:struct:compat_nfsctl_client::in_addr	file:
cl32_fhkey	fs/compat.c	/^	u8			cl32_fhkey[NFSCLNT_KEYMAX];$/;"	m	struct:compat_nfsctl_client	file:
cl32_fhkeylen	fs/compat.c	/^	s32			cl32_fhkeylen;$/;"	m	struct:compat_nfsctl_client	file:
cl32_fhkeytype	fs/compat.c	/^	s32			cl32_fhkeytype;$/;"	m	struct:compat_nfsctl_client	file:
cl32_ident	fs/compat.c	/^	s8			cl32_ident[NFSCLNT_IDMAX+1];$/;"	m	struct:compat_nfsctl_client	file:
cl32_naddr	fs/compat.c	/^	s32			cl32_naddr;$/;"	m	struct:compat_nfsctl_client	file:
class	kernel/lockdep_proc.c	/^	struct lock_class *class;$/;"	m	struct:lock_stat_data	typeref:struct:lock_stat_data::lock_class	file:
class_equal	kernel/lockdep.c	/^static inline int class_equal(struct lock_list *entry, void *data)$/;"	f	file:
class_filter	kernel/lockdep.c	/^static int class_filter(struct lock_class *class)$/;"	f	file:
classes	kernel/auditfilter.c	/^static __u32 *classes[AUDIT_SYSCALL_CLASSES];$/;"	v	file:
classhash_table	kernel/lockdep.c	/^static struct list_head classhash_table[CLASSHASH_SIZE];$/;"	v	typeref:struct:list_head	file:
classhashentry	kernel/lockdep.c	283;"	d	file:
clean_blockdev_aliases	fs/direct-io.c	/^static void clean_blockdev_aliases(struct dio *dio)$/;"	f	file:
cleanup	kernel/kmod.c	/^	void (*cleanup)(char **argv, char **envp);$/;"	m	struct:subprocess_info	file:
cleanup	kernel/rcutorture.c	/^	void (*cleanup)(void);$/;"	m	struct:rcu_torture_ops	file:
cleanup_group_ids	fs/namespace.c	/^static void cleanup_group_ids(struct vfsmount *mnt, struct vfsmount *end)$/;"	f	file:
cleanup_rp_inst	kernel/kprobes.c	/^static void __kprobes cleanup_rp_inst(struct kretprobe *rp)$/;"	f	file:
cleanup_srcu_struct	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(cleanup_srcu_struct);$/;"	v
cleanup_srcu_struct	kernel/srcu.c	/^void cleanup_srcu_struct(struct srcu_struct *sp)$/;"	f
cleanup_timers	kernel/posix-cpu-timers.c	/^static void cleanup_timers(struct list_head *head,$/;"	f	file:
cleanup_user_struct	kernel/user.c	/^static void cleanup_user_struct(struct work_struct *w)$/;"	f	file:
cleanup_workqueue_thread	kernel/workqueue.c	/^static void cleanup_workqueue_thread(struct cpu_workqueue_struct *cwq)$/;"	f	file:
clear_active_flags	mm/vmscan.c	/^static unsigned long clear_active_flags(struct list_head *page_list,$/;"	f	file:
clear_all_latency_tracing	kernel/latencytop.c	/^void clear_all_latency_tracing(struct task_struct *p)$/;"	f
clear_bdi_congested	mm/backing-dev.c	/^EXPORT_SYMBOL(clear_bdi_congested);$/;"	v
clear_bdi_congested	mm/backing-dev.c	/^void clear_bdi_congested(struct backing_dev_info *bdi, int sync)$/;"	f
clear_buddies	kernel/sched_fair.c	/^static void clear_buddies(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
clear_dead_task	kernel/posix-cpu-timers.c	/^static void clear_dead_task(struct k_itimer *timer, union cpu_time_count now)$/;"	f	file:
clear_gigantic_page	mm/hugetlb.c	/^static void clear_gigantic_page(struct page *page,$/;"	f	file:
clear_global_latency_tracing	kernel/latencytop.c	/^static void clear_global_latency_tracing(void)$/;"	f	file:
clear_huge_page	mm/hugetlb.c	/^static void clear_huge_page(struct page *page,$/;"	f	file:
clear_inode	fs/inode.c	/^EXPORT_SYMBOL(clear_inode);$/;"	v
clear_inode	fs/inode.c	/^void clear_inode(struct inode *inode)$/;"	f
clear_lock_stats	kernel/lockdep.c	/^void clear_lock_stats(struct lock_class *class)$/;"	f
clear_page_dirty_for_io	mm/page-writeback.c	/^EXPORT_SYMBOL(clear_page_dirty_for_io);$/;"	v
clear_page_dirty_for_io	mm/page-writeback.c	/^int clear_page_dirty_for_io(struct page *page)$/;"	f
clear_page_mlock	mm/internal.h	/^static inline void clear_page_mlock(struct page *page) { }$/;"	f
clear_page_mlock	mm/internal.h	/^static inline void clear_page_mlock(struct page *page)$/;"	f
clear_page_poison	mm/debug-pagealloc.c	/^static inline void clear_page_poison(struct page *page)$/;"	f	file:
clear_rt_mutex_waiters	kernel/rtmutex.c	/^static inline void clear_rt_mutex_waiters(struct rt_mutex *lock)$/;"	f	file:
clear_slob_page	mm/slob.c	/^static inline void clear_slob_page(struct slob_page *sp)$/;"	f	file:
clear_slob_page_free	mm/slob.c	/^static inline void clear_slob_page_free(struct slob_page *sp)$/;"	f	file:
clear_stat	mm/slub.c	/^static void clear_stat(struct kmem_cache *s, enum stat_item si)$/;"	f	file:
clear_timeout	fs/aio.c	/^static inline void clear_timeout(struct aio_timeout *to)$/;"	f	file:
clear_zonelist_oom	mm/oom_kill.c	/^void clear_zonelist_oom(struct zonelist *zonelist, gfp_t gfp_mask)$/;"	f
client_addr	fs/compat.c	/^	struct compat_nfs_string client_addr;$/;"	m	struct:compat_nfs4_mount_data_v1	typeref:struct:compat_nfs4_mount_data_v1::compat_nfs_string	file:
clip_bdi_dirty_limit	mm/page-writeback.c	/^static void clip_bdi_dirty_limit(struct backing_dev_info *bdi,$/;"	f	file:
clock	kernel/sched.c	/^	u64 clock;$/;"	m	struct:rq	file:
clock	kernel/sched_clock.c	/^	u64			clock;$/;"	m	struct:sched_clock_data	file:
clock_nanosleep_restart	kernel/posix-timers.c	/^clock_nanosleep_restart(struct restart_block *restart_block)$/;"	f
clock_t_to_compat_clock_t	kernel/compat.c	/^static compat_clock_t clock_t_to_compat_clock_t(clock_t x)$/;"	f	file:
clock_t_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(clock_t_to_jiffies);$/;"	v
clock_t_to_jiffies	kernel/time.c	/^unsigned long clock_t_to_jiffies(unsigned long x)$/;"	f
clock_was_set	kernel/hrtimer.c	/^void clock_was_set(void)$/;"	f
clockid	fs/timerfd.c	/^	int clockid;$/;"	m	struct:timerfd_ctx	file:
clone_mnt	fs/namespace.c	/^static struct vfsmount *clone_mnt(struct vfsmount *old, struct dentry *root,$/;"	f	file:
clone_uts_ns	kernel/utsname.c	/^static struct uts_namespace *clone_uts_ns(struct uts_namespace *old_ns)$/;"	f	file:
close_bdev_exclusive	fs/block_dev.c	/^EXPORT_SYMBOL(close_bdev_exclusive);$/;"	v
close_bdev_exclusive	fs/block_dev.c	/^void close_bdev_exclusive(struct block_device *bdev, fmode_t mode)$/;"	f
close_delay	fs/compat_ioctl.c	/^        unsigned short  close_delay;$/;"	m	struct:serial_struct32	file:
close_files	kernel/exit.c	/^static void close_files(struct files_struct * files)$/;"	f	file:
closing_wait	fs/compat_ioctl.c	/^        unsigned short  closing_wait; \/* time to wait before closing *\/$/;"	m	struct:serial_struct32	file:
closing_wait2	fs/compat_ioctl.c	/^        unsigned short  closing_wait2; \/* no longer used... *\/$/;"	m	struct:serial_struct32	file:
cmd	fs/compat_ioctl.c	/^	struct i2c_rdwr_ioctl_data cmd;$/;"	m	struct:i2c_rdwr_aligned	typeref:struct:i2c_rdwr_aligned::i2c_rdwr_ioctl_data	file:
cmd_ikconfiggz	kernel/Makefile	/^      cmd_ikconfiggz = (echo "static const char kernel_config_data[] __used = MAGIC_START"; cat $< | scripts\/bin2c; echo "MAGIC_END;") > $@$/;"	m
cmd_len	fs/compat_ioctl.c	/^	unsigned char cmd_len;		\/* [i] SCSI command length ( <= 16 bytes) *\/$/;"	m	struct:sg_io_hdr32	file:
cmd_timeconst	kernel/Makefile	/^      cmd_timeconst  = $(PERL) $< $(CONFIG_HZ) > $@$/;"	m
cmdline_parse_core	mm/page_alloc.c	/^static int __init cmdline_parse_core(char *p, unsigned long *core)$/;"	f	file:
cmdline_parse_kernelcore	mm/page_alloc.c	/^static int __init cmdline_parse_kernelcore(char *p)$/;"	f	file:
cmdline_parse_movablecore	mm/page_alloc.c	/^static int __init cmdline_parse_movablecore(char *p)$/;"	f	file:
cmdp	fs/compat_ioctl.c	/^	compat_uptr_t cmdp;		\/* [i], [*i] points to command to perform *\/$/;"	m	struct:sg_io_hdr32	file:
cmp_and_merge_page	mm/ksm.c	/^static void cmp_and_merge_page(struct page *page, struct rmap_item *rmap_item)$/;"	f	file:
cmp_next_hrtimer_event	kernel/timer.c	/^static unsigned long cmp_next_hrtimer_event(unsigned long now,$/;"	f	file:
cmp_node_active_region	mm/page_alloc.c	/^static int __init cmp_node_active_region(const void *a, const void *b)$/;"	f	file:
cmppid	kernel/cgroup.c	/^static int cmppid(const void *a, const void *b)$/;"	f	file:
cmpxchg_futex_value_locked	kernel/futex.c	/^static u32 cmpxchg_futex_value_locked(u32 __user *uaddr, u32 uval, u32 newval)$/;"	f	file:
cnt	kernel/cpuset.c	/^	int cnt;		\/* unprocessed events count *\/$/;"	m	struct:fmeter	file:
collect_garbage_slots	kernel/kprobes.c	/^static int __kprobes collect_garbage_slots(void)$/;"	f	file:
collect_mounts	fs/namespace.c	/^struct vfsmount *collect_mounts(struct path *path)$/;"	f
collect_one_slot	kernel/kprobes.c	/^static int __kprobes collect_one_slot(struct kprobe_insn_page *kip, int idx)$/;"	f	file:
collect_procs	mm/memory-failure.c	/^static void collect_procs(struct page *page, struct list_head *tokill)$/;"	f	file:
collect_procs_anon	mm/memory-failure.c	/^static void collect_procs_anon(struct page *page, struct list_head *to_kill,$/;"	f	file:
collect_procs_file	mm/memory-failure.c	/^static void collect_procs_file(struct page *page, struct list_head *to_kill,$/;"	f	file:
collect_signal	kernel/signal.c	/^static void collect_signal(int sig, struct sigpending *list, siginfo_t *info)$/;"	f	file:
color_gray	mm/kmemleak.c	/^static bool color_gray(const struct kmemleak_object *object)$/;"	f	file:
color_white	mm/kmemleak.c	/^static bool color_white(const struct kmemleak_object *object)$/;"	f	file:
colour_next	mm/slab.c	/^	unsigned int colour_next;	\/* Per-node cache coloring *\/$/;"	m	struct:kmem_list3	file:
colouroff	mm/slab.c	/^	unsigned long colouroff;$/;"	m	struct:slab	file:
comm	kernel/perf_event.c	/^	char			*comm;$/;"	m	struct:perf_comm_event	file:
comm	mm/kmemleak.c	/^	char comm[TASK_COMM_LEN];	\/* executable name *\/$/;"	m	struct:kmemleak_object	file:
comm_size	kernel/perf_event.c	/^	int			comm_size;$/;"	m	struct:perf_comm_event	file:
command	fs/compat_ioctl.c	/^	u8 command;$/;"	m	struct:i2c_smbus_ioctl_data32	file:
commit_creds	kernel/cred.c	/^EXPORT_SYMBOL(commit_creds);$/;"	v
commit_creds	kernel/cred.c	/^int commit_creds(struct cred *new)$/;"	f
commit_tree	fs/namespace.c	/^static void commit_tree(struct vfsmount *mnt)$/;"	f	file:
common_clock_get	kernel/posix-timers.c	/^static int common_clock_get(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
common_clock_getres	kernel/posix-timers.c	/^static inline int common_clock_getres(const clockid_t which_clock,$/;"	f	file:
common_clock_set	kernel/posix-timers.c	/^static inline int common_clock_set(const clockid_t which_clock,$/;"	f	file:
common_nsleep	kernel/posix-timers.c	/^static int common_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
common_nsleep_restart	kernel/posix-timers.c	/^static int common_nsleep_restart(struct restart_block *restart_block)$/;"	f	file:
common_timer_create	kernel/posix-timers.c	/^static int common_timer_create(struct k_itimer *new_timer)$/;"	f	file:
common_timer_del	kernel/posix-timers.c	/^static inline int common_timer_del(struct k_itimer *timer)$/;"	f	file:
common_timer_get	kernel/posix-timers.c	/^common_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)$/;"	f	file:
common_timer_set	kernel/posix-timers.c	/^common_timer_set(struct k_itimer *timr, int flags,$/;"	f	file:
compare_css_sets	kernel/cgroup.c	/^static bool compare_css_sets(struct css_set *cg,$/;"	f	file:
compare_single	fs/super.c	/^static int compare_single(struct super_block *s, void *p)$/;"	f	file:
comparitor	kernel/pm_qos_params.c	/^	s32 (*comparitor)(s32, s32);$/;"	m	struct:pm_qos_object	file:
compat_clock_nanosleep_restart	kernel/compat.c	/^static long compat_clock_nanosleep_restart(struct restart_block *restart)$/;"	f	file:
compat_copy_strings	fs/compat.c	/^static int compat_copy_strings(int argc, compat_uptr_t __user *argv,$/;"	f	file:
compat_core_sys_select	fs/compat.c	/^int compat_core_sys_select(int n, compat_ulong_t __user *inp,$/;"	f
compat_count	fs/compat.c	/^static int compat_count(compat_uptr_t __user *argv, int max)$/;"	f	file:
compat_do_execve	fs/compat.c	/^int compat_do_execve(char * filename,$/;"	f
compat_do_readv_writev	fs/compat.c	/^static ssize_t compat_do_readv_writev(int type, struct file *file,$/;"	f	file:
compat_exit_robust_list	kernel/futex_compat.c	/^void compat_exit_robust_list(struct task_struct *curr)$/;"	f
compat_filldir	fs/compat.c	/^static int compat_filldir(void *__buf, const char *name, int namlen,$/;"	f	file:
compat_filldir64	fs/compat.c	/^static int compat_filldir64(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
compat_fillonedir	fs/compat.c	/^static int compat_fillonedir(void *__buf, const char *name, int namlen,$/;"	f	file:
compat_get_bitmap	kernel/compat.c	/^long compat_get_bitmap(unsigned long *mask, const compat_ulong_t __user *umask,$/;"	f
compat_get_fd_set	fs/compat.c	/^int compat_get_fd_set(unsigned long nr, compat_ulong_t __user *ufdset,$/;"	f	file:
compat_get_timeval	kernel/compat.c	/^static int compat_get_timeval(struct timespec *o,$/;"	f	file:
compat_get_user_cpu_mask	kernel/compat.c	/^static int compat_get_user_cpu_mask(compat_ulong_t __user *user_mask_ptr,$/;"	f	file:
compat_getdents_callback	fs/compat.c	/^struct compat_getdents_callback {$/;"	s	file:
compat_getdents_callback64	fs/compat.c	/^struct compat_getdents_callback64 {$/;"	s	file:
compat_ioctl_check_table	fs/compat_ioctl.c	/^static int compat_ioctl_check_table(unsigned int xcmd)$/;"	f	file:
compat_ioctl_error	fs/compat_ioctl.c	/^static void compat_ioctl_error(struct file *filp, unsigned int fd,$/;"	f	file:
compat_ioctl_preallocate	fs/compat_ioctl.c	/^static int compat_ioctl_preallocate(struct file *file,$/;"	f	file:
compat_linux_dirent	fs/compat.c	/^struct compat_linux_dirent {$/;"	s	file:
compat_log	fs/compat.c	/^int compat_log = 1;$/;"	v
compat_nanosleep_restart	kernel/compat.c	/^static long compat_nanosleep_restart(struct restart_block *restart)$/;"	f	file:
compat_ncp_mount_data	fs/compat.c	/^struct compat_ncp_mount_data {$/;"	s	file:
compat_ncp_mount_data_v4	fs/compat.c	/^struct compat_ncp_mount_data_v4 {$/;"	s	file:
compat_nfs4_mount_data_v1	fs/compat.c	/^struct compat_nfs4_mount_data_v1 {$/;"	s	file:
compat_nfs_clnt_trans	fs/compat.c	/^static int compat_nfs_clnt_trans(struct nfsctl_arg *karg,$/;"	f	file:
compat_nfs_exp_trans	fs/compat.c	/^static int compat_nfs_exp_trans(struct nfsctl_arg *karg,$/;"	f	file:
compat_nfs_getfd_trans	fs/compat.c	/^static int compat_nfs_getfd_trans(struct nfsctl_arg *karg,$/;"	f	file:
compat_nfs_getfh_res_trans	fs/compat.c	/^static int compat_nfs_getfh_res_trans(union nfsctl_res *kres,$/;"	f	file:
compat_nfs_getfs_trans	fs/compat.c	/^static int compat_nfs_getfs_trans(struct nfsctl_arg *karg,$/;"	f	file:
compat_nfs_string	fs/compat.c	/^static inline void compat_nfs_string(struct nfs_string *dst,$/;"	f	file:
compat_nfs_string	fs/compat.c	/^struct compat_nfs_string {$/;"	s	file:
compat_nfs_svc_trans	fs/compat.c	/^static int compat_nfs_svc_trans(struct nfsctl_arg *karg,$/;"	f	file:
compat_nfsctl_arg	fs/compat.c	/^struct compat_nfsctl_arg {$/;"	s	file:
compat_nfsctl_client	fs/compat.c	/^struct compat_nfsctl_client {$/;"	s	file:
compat_nfsctl_export	fs/compat.c	/^struct compat_nfsctl_export {$/;"	s	file:
compat_nfsctl_fdparm	fs/compat.c	/^struct compat_nfsctl_fdparm {$/;"	s	file:
compat_nfsctl_fsparm	fs/compat.c	/^struct compat_nfsctl_fsparm {$/;"	s	file:
compat_nfsctl_res	fs/compat.c	/^union compat_nfsctl_res {$/;"	u	file:
compat_nfsctl_svc	fs/compat.c	/^struct compat_nfsctl_svc {$/;"	s	file:
compat_old_linux_dirent	fs/compat.c	/^struct compat_old_linux_dirent {$/;"	s	file:
compat_printk	fs/compat.c	/^int compat_printk(const char *fmt, ...)$/;"	f
compat_ptrace_request	kernel/ptrace.c	/^int compat_ptrace_request(struct task_struct *child, compat_long_t request,$/;"	f
compat_put_bitmap	kernel/compat.c	/^long compat_put_bitmap(compat_ulong_t __user *umask, unsigned long *mask,$/;"	f
compat_put_timeval	kernel/compat.c	/^static int compat_put_timeval(struct compat_timeval __user *o,$/;"	f	file:
compat_readdir_callback	fs/compat.c	/^struct compat_readdir_callback {$/;"	s	file:
compat_readv	fs/compat.c	/^static size_t compat_readv(struct file *file,$/;"	f	file:
compat_set_fd_set	fs/compat.c	/^int compat_set_fd_set(unsigned long nr, compat_ulong_t __user *ufdset,$/;"	f	file:
compat_sg_req_info	fs/compat_ioctl.c	/^struct compat_sg_req_info { \/* used by SG_GET_REQUEST_TABLE ioctl() *\/$/;"	s	file:
compat_smb_mount_data	fs/compat.c	/^struct compat_smb_mount_data {$/;"	s	file:
compat_sys_adjtimex	kernel/compat.c	/^asmlinkage long compat_sys_adjtimex(struct compat_timex __user *utp)$/;"	f
compat_sys_clock_getres	kernel/compat.c	/^long compat_sys_clock_getres(clockid_t which_clock,$/;"	f
compat_sys_clock_gettime	kernel/compat.c	/^long compat_sys_clock_gettime(clockid_t which_clock,$/;"	f
compat_sys_clock_nanosleep	kernel/compat.c	/^long compat_sys_clock_nanosleep(clockid_t which_clock, int flags,$/;"	f
compat_sys_clock_settime	kernel/compat.c	/^long compat_sys_clock_settime(clockid_t which_clock,$/;"	f
compat_sys_epoll_pwait	fs/compat.c	/^asmlinkage long compat_sys_epoll_pwait(int epfd,$/;"	f
compat_sys_epoll_pwait	kernel/sys_ni.c	/^cond_syscall(compat_sys_epoll_pwait);$/;"	v
compat_sys_fcntl	fs/compat.c	/^asmlinkage long compat_sys_fcntl(unsigned int fd, unsigned int cmd,$/;"	f
compat_sys_fcntl64	fs/compat.c	/^asmlinkage long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,$/;"	f
compat_sys_fstatfs	fs/compat.c	/^asmlinkage long compat_sys_fstatfs(unsigned int fd, struct compat_statfs __user *buf)$/;"	f
compat_sys_fstatfs64	fs/compat.c	/^asmlinkage long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz, struct compat_statfs64 __user *buf)$/;"	f
compat_sys_futex	kernel/futex_compat.c	/^asmlinkage long compat_sys_futex(u32 __user *uaddr, int op, u32 val,$/;"	f
compat_sys_futex	kernel/sys_ni.c	/^cond_syscall(compat_sys_futex);$/;"	v
compat_sys_futimesat	fs/compat.c	/^asmlinkage long compat_sys_futimesat(unsigned int dfd, char __user *filename, struct compat_timeval __user *t)$/;"	f
compat_sys_get_mempolicy	kernel/sys_ni.c	/^cond_syscall(compat_sys_get_mempolicy);$/;"	v
compat_sys_get_mempolicy	mm/mempolicy.c	/^asmlinkage long compat_sys_get_mempolicy(int __user *policy,$/;"	f
compat_sys_get_robust_list	kernel/futex_compat.c	/^compat_sys_get_robust_list(int pid, compat_uptr_t __user *head_ptr,$/;"	f
compat_sys_get_robust_list	kernel/sys_ni.c	/^cond_syscall(compat_sys_get_robust_list);$/;"	v
compat_sys_getdents	fs/compat.c	/^asmlinkage long compat_sys_getdents(unsigned int fd,$/;"	f
compat_sys_getdents64	fs/compat.c	/^asmlinkage long compat_sys_getdents64(unsigned int fd,$/;"	f
compat_sys_getitimer	kernel/compat.c	/^asmlinkage long compat_sys_getitimer(int which,$/;"	f
compat_sys_getrlimit	kernel/compat.c	/^asmlinkage long compat_sys_getrlimit (unsigned int resource,$/;"	f
compat_sys_getrusage	kernel/compat.c	/^asmlinkage long compat_sys_getrusage(int who, struct compat_rusage __user *ru)$/;"	f
compat_sys_getsockopt	kernel/sys_ni.c	/^cond_syscall(compat_sys_getsockopt);$/;"	v
compat_sys_gettimeofday	kernel/compat.c	/^asmlinkage long compat_sys_gettimeofday(struct compat_timeval __user *tv,$/;"	f
compat_sys_io_getevents	fs/compat.c	/^compat_sys_io_getevents(aio_context_t ctx_id,$/;"	f
compat_sys_io_setup	fs/compat.c	/^compat_sys_io_setup(unsigned nr_reqs, u32 __user *ctx32p)$/;"	f
compat_sys_io_submit	fs/compat.c	/^compat_sys_io_submit(aio_context_t ctx_id, int nr, u32 __user *iocb)$/;"	f
compat_sys_ioctl	fs/compat_ioctl.c	/^asmlinkage long compat_sys_ioctl(unsigned int fd, unsigned int cmd,$/;"	f
compat_sys_ipc	kernel/sys_ni.c	/^cond_syscall(compat_sys_ipc);$/;"	v
compat_sys_kexec_load	kernel/kexec.c	/^asmlinkage long compat_sys_kexec_load(unsigned long entry,$/;"	f
compat_sys_kexec_load	kernel/sys_ni.c	/^cond_syscall(compat_sys_kexec_load);$/;"	v
compat_sys_keyctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_keyctl);$/;"	v
compat_sys_mbind	kernel/sys_ni.c	/^cond_syscall(compat_sys_mbind);$/;"	v
compat_sys_mbind	mm/mempolicy.c	/^asmlinkage long compat_sys_mbind(compat_ulong_t start, compat_ulong_t len,$/;"	f
compat_sys_migrate_pages	kernel/compat.c	/^asmlinkage long compat_sys_migrate_pages(compat_pid_t pid,$/;"	f
compat_sys_migrate_pages	kernel/sys_ni.c	/^cond_syscall(compat_sys_migrate_pages);$/;"	v
compat_sys_mount	fs/compat.c	/^asmlinkage long compat_sys_mount(char __user * dev_name, char __user * dir_name,$/;"	f
compat_sys_move_pages	kernel/compat.c	/^asmlinkage long compat_sys_move_pages(pid_t pid, unsigned long nr_pages,$/;"	f
compat_sys_move_pages	kernel/sys_ni.c	/^cond_syscall(compat_sys_move_pages);$/;"	v
compat_sys_mq_getsetattr	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_getsetattr);$/;"	v
compat_sys_mq_notify	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_notify);$/;"	v
compat_sys_mq_open	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_open);$/;"	v
compat_sys_mq_timedreceive	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_timedreceive);$/;"	v
compat_sys_mq_timedsend	kernel/sys_ni.c	/^cond_syscall(compat_sys_mq_timedsend);$/;"	v
compat_sys_nanosleep	kernel/compat.c	/^asmlinkage long compat_sys_nanosleep(struct compat_timespec __user *rqtp,$/;"	f
compat_sys_newfstat	fs/compat.c	/^asmlinkage long compat_sys_newfstat(unsigned int fd,$/;"	f
compat_sys_newfstatat	fs/compat.c	/^asmlinkage long compat_sys_newfstatat(unsigned int dfd, char __user *filename,$/;"	f
compat_sys_newlstat	fs/compat.c	/^asmlinkage long compat_sys_newlstat(char __user * filename,$/;"	f
compat_sys_newstat	fs/compat.c	/^asmlinkage long compat_sys_newstat(char __user * filename,$/;"	f
compat_sys_nfsservctl	fs/compat.c	/^asmlinkage long compat_sys_nfsservctl(int cmd,$/;"	f
compat_sys_nfsservctl	fs/compat.c	/^long asmlinkage compat_sys_nfsservctl(int cmd, void *notused, void *notused2)$/;"	f
compat_sys_old_getrlimit	kernel/compat.c	/^asmlinkage long compat_sys_old_getrlimit(unsigned int resource,$/;"	f
compat_sys_old_readdir	fs/compat.c	/^asmlinkage long compat_sys_old_readdir(unsigned int fd,$/;"	f
compat_sys_open	fs/compat.c	/^compat_sys_open(const char __user *filename, int flags, int mode)$/;"	f
compat_sys_openat	fs/compat.c	/^compat_sys_openat(unsigned int dfd, const char __user *filename, int flags, int mode)$/;"	f
compat_sys_ppoll	fs/compat.c	/^asmlinkage long compat_sys_ppoll(struct pollfd __user *ufds,$/;"	f
compat_sys_preadv	fs/compat.c	/^compat_sys_preadv(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_pselect6	fs/compat.c	/^asmlinkage long compat_sys_pselect6(int n, compat_ulong_t __user *inp,$/;"	f
compat_sys_ptrace	kernel/ptrace.c	/^asmlinkage long compat_sys_ptrace(compat_long_t request, compat_long_t pid,$/;"	f
compat_sys_pwritev	fs/compat.c	/^compat_sys_pwritev(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_readv	fs/compat.c	/^compat_sys_readv(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sys_recvfrom	kernel/sys_ni.c	/^cond_syscall(compat_sys_recvfrom);$/;"	v
compat_sys_recvmmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_recvmmsg);$/;"	v
compat_sys_recvmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_recvmsg);$/;"	v
compat_sys_rt_sigsuspend	kernel/compat.c	/^asmlinkage long compat_sys_rt_sigsuspend(compat_sigset_t __user *unewset, compat_size_t sigsetsize)$/;"	f
compat_sys_rt_sigtimedwait	kernel/compat.c	/^compat_sys_rt_sigtimedwait (compat_sigset_t __user *uthese,$/;"	f
compat_sys_rt_tgsigqueueinfo	kernel/compat.c	/^compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid, compat_pid_t pid, int sig,$/;"	f
compat_sys_sched_getaffinity	kernel/compat.c	/^asmlinkage long compat_sys_sched_getaffinity(compat_pid_t pid, unsigned int len,$/;"	f
compat_sys_sched_setaffinity	kernel/compat.c	/^asmlinkage long compat_sys_sched_setaffinity(compat_pid_t pid,$/;"	f
compat_sys_select	fs/compat.c	/^asmlinkage long compat_sys_select(int n, compat_ulong_t __user *inp,$/;"	f
compat_sys_sendmsg	kernel/sys_ni.c	/^cond_syscall(compat_sys_sendmsg);$/;"	v
compat_sys_set_mempolicy	kernel/sys_ni.c	/^cond_syscall(compat_sys_set_mempolicy);$/;"	v
compat_sys_set_mempolicy	mm/mempolicy.c	/^asmlinkage long compat_sys_set_mempolicy(int mode, compat_ulong_t __user *nmask,$/;"	f
compat_sys_set_robust_list	kernel/futex_compat.c	/^compat_sys_set_robust_list(struct compat_robust_list_head __user *head,$/;"	f
compat_sys_set_robust_list	kernel/sys_ni.c	/^cond_syscall(compat_sys_set_robust_list);$/;"	v
compat_sys_setitimer	kernel/compat.c	/^asmlinkage long compat_sys_setitimer(int which,$/;"	f
compat_sys_setrlimit	kernel/compat.c	/^asmlinkage long compat_sys_setrlimit(unsigned int resource,$/;"	f
compat_sys_setsockopt	kernel/sys_ni.c	/^cond_syscall(compat_sys_setsockopt);$/;"	v
compat_sys_settimeofday	kernel/compat.c	/^asmlinkage long compat_sys_settimeofday(struct compat_timeval __user *tv,$/;"	f
compat_sys_signalfd	fs/compat.c	/^asmlinkage long compat_sys_signalfd(int ufd,$/;"	f
compat_sys_signalfd	kernel/sys_ni.c	/^cond_syscall(compat_sys_signalfd);$/;"	v
compat_sys_signalfd4	fs/compat.c	/^asmlinkage long compat_sys_signalfd4(int ufd,$/;"	f
compat_sys_signalfd4	kernel/sys_ni.c	/^cond_syscall(compat_sys_signalfd4);$/;"	v
compat_sys_sigpending	kernel/compat.c	/^asmlinkage long compat_sys_sigpending(compat_old_sigset_t __user *set)$/;"	f
compat_sys_sigprocmask	kernel/compat.c	/^asmlinkage long compat_sys_sigprocmask(int how, compat_old_sigset_t __user *set,$/;"	f
compat_sys_socketcall	kernel/sys_ni.c	/^cond_syscall(compat_sys_socketcall);$/;"	v
compat_sys_statfs	fs/compat.c	/^asmlinkage long compat_sys_statfs(const char __user *pathname, struct compat_statfs __user *buf)$/;"	f
compat_sys_statfs64	fs/compat.c	/^asmlinkage long compat_sys_statfs64(const char __user *pathname, compat_size_t sz, struct compat_statfs64 __user *buf)$/;"	f
compat_sys_stime	kernel/compat.c	/^asmlinkage long compat_sys_stime(compat_time_t __user *tptr)$/;"	f
compat_sys_sysctl	kernel/sys_ni.c	/^cond_syscall(compat_sys_sysctl);$/;"	v
compat_sys_sysctl	kernel/sysctl_binary.c	/^asmlinkage long compat_sys_sysctl(struct compat_sysctl_args __user *args)$/;"	f
compat_sys_sysinfo	kernel/compat.c	/^compat_sys_sysinfo(struct compat_sysinfo __user *info)$/;"	f
compat_sys_time	kernel/compat.c	/^asmlinkage long compat_sys_time(compat_time_t __user * tloc)$/;"	f
compat_sys_timer_create	kernel/compat.c	/^long compat_sys_timer_create(clockid_t which_clock,$/;"	f
compat_sys_timer_gettime	kernel/compat.c	/^long compat_sys_timer_gettime(timer_t timer_id,$/;"	f
compat_sys_timer_settime	kernel/compat.c	/^long compat_sys_timer_settime(timer_t timer_id, int flags,$/;"	f
compat_sys_timerfd_gettime	fs/compat.c	/^asmlinkage long compat_sys_timerfd_gettime(int ufd,$/;"	f
compat_sys_timerfd_gettime	kernel/sys_ni.c	/^cond_syscall(compat_sys_timerfd_gettime);$/;"	v
compat_sys_timerfd_settime	fs/compat.c	/^asmlinkage long compat_sys_timerfd_settime(int ufd, int flags,$/;"	f
compat_sys_timerfd_settime	kernel/sys_ni.c	/^cond_syscall(compat_sys_timerfd_settime);$/;"	v
compat_sys_times	kernel/compat.c	/^asmlinkage long compat_sys_times(struct compat_tms __user *tbuf)$/;"	f
compat_sys_ustat	fs/compat.c	/^asmlinkage long compat_sys_ustat(unsigned dev, struct compat_ustat __user *u)$/;"	f
compat_sys_utime	fs/compat.c	/^asmlinkage long compat_sys_utime(char __user *filename, struct compat_utimbuf __user *t)$/;"	f
compat_sys_utimensat	fs/compat.c	/^asmlinkage long compat_sys_utimensat(unsigned int dfd, char __user *filename, struct compat_timespec __user *t, int flags)$/;"	f
compat_sys_utimes	fs/compat.c	/^asmlinkage long compat_sys_utimes(char __user *filename, struct compat_timeval __user *t)$/;"	f
compat_sys_vmsplice	fs/compat.c	/^compat_sys_vmsplice(int fd, const struct compat_iovec __user *iov32,$/;"	f
compat_sys_wait4	kernel/compat.c	/^compat_sys_wait4(compat_pid_t pid, compat_uint_t __user *stat_addr, int options,$/;"	f
compat_sys_waitid	kernel/compat.c	/^asmlinkage long compat_sys_waitid(int which, compat_pid_t pid,$/;"	f
compat_sys_writev	fs/compat.c	/^compat_sys_writev(unsigned long fd, const struct compat_iovec __user *vec,$/;"	f
compat_sysctl_args	kernel/sysctl_binary.c	/^struct compat_sysctl_args {$/;"	s	file:
compat_sysinfo	kernel/compat.c	/^struct compat_sysinfo {$/;"	s	file:
compat_video_event	fs/compat_ioctl.c	/^struct compat_video_event {$/;"	s	file:
compat_video_spu_palette	fs/compat_ioctl.c	/^struct compat_video_spu_palette {$/;"	s	file:
compat_video_still_picture	fs/compat_ioctl.c	/^struct compat_video_still_picture {$/;"	s	file:
compat_writev	fs/compat.c	/^static size_t compat_writev(struct file *file,$/;"	f	file:
complete	kernel/kmod.c	/^	struct completion *complete;$/;"	m	struct:subprocess_info	typeref:struct:subprocess_info::completion	file:
complete	kernel/sched.c	/^EXPORT_SYMBOL(complete);$/;"	v
complete	kernel/sched.c	/^void complete(struct completion *x)$/;"	f
complete_all	kernel/sched.c	/^EXPORT_SYMBOL(complete_all);$/;"	v
complete_all	kernel/sched.c	/^void complete_all(struct completion *x)$/;"	f
complete_and_exit	kernel/exit.c	/^EXPORT_SYMBOL(complete_and_exit);$/;"	v
complete_and_exit	kernel/exit.c	/^NORET_TYPE void complete_and_exit(struct completion *comp, long code)$/;"	f
complete_signal	kernel/signal.c	/^static void complete_signal(int sig, struct task_struct *p, int group)$/;"	f	file:
completed	kernel/rcutorture.c	/^	int (*completed)(void);$/;"	m	struct:rcu_torture_ops	file:
completed	kernel/rcutree.h	/^	long		completed;	\/* Track rsp->completed gp number *\/$/;"	m	struct:rcu_data
completed	kernel/rcutree.h	/^	long	completed;			\/* # of last completed gp. *\/$/;"	m	struct:rcu_state
completed	kernel/rcutree.h	/^	long	completed;	\/* Last grace period completed for this node. *\/$/;"	m	struct:rcu_node
completed_fqs	kernel/rcutree.h	/^	long	completed_fqs;			\/* Value of completed @ snap. *\/$/;"	m	struct:rcu_state
completion	kernel/rcutorture.c	/^	struct completion completion;$/;"	m	struct:rcu_bh_torture_synchronize	typeref:struct:rcu_bh_torture_synchronize::completion	file:
completion	kernel/workqueue.c	/^	struct completion completion;$/;"	m	struct:work_for_cpu	typeref:struct:work_for_cpu::completion	file:
completion_done	kernel/sched.c	/^EXPORT_SYMBOL(completion_done);$/;"	v
completion_done	kernel/sched.c	/^bool completion_done(struct completion *x)$/;"	f
compound	mm/memory-failure.c	723;"	d	file:
compound	mm/memory-failure.c	780;"	d	file:
compute_values	kernel/timeconst.pl	/^sub compute_values($) {$/;"	s
con_start	kernel/printk.c	/^static unsigned con_start;	\/* Index into log_buf: next char to be sent to consoles *\/$/;"	v	file:
congestion_wait	mm/backing-dev.c	/^EXPORT_SYMBOL(congestion_wait);$/;"	v
congestion_wait	mm/backing-dev.c	/^long congestion_wait(int sync, long timeout)$/;"	f
congestion_wqh	mm/backing-dev.c	/^static wait_queue_head_t congestion_wqh[2] = {$/;"	v	file:
console_cmdline	kernel/printk.c	/^static struct console_cmdline console_cmdline[MAX_CMDLINECONSOLES];$/;"	v	typeref:struct:console_cmdline	file:
console_cmdline	kernel/printk.c	/^struct console_cmdline$/;"	s	file:
console_conditional_schedule	kernel/printk.c	/^EXPORT_SYMBOL(console_conditional_schedule);$/;"	v
console_conditional_schedule	kernel/printk.c	/^void __sched console_conditional_schedule(void)$/;"	f
console_device	kernel/printk.c	/^struct tty_driver *console_device(int *index)$/;"	f
console_drivers	kernel/printk.c	/^EXPORT_SYMBOL_GPL(console_drivers);$/;"	v
console_drivers	kernel/printk.c	/^struct console *console_drivers;$/;"	v	typeref:struct:console
console_locked	kernel/printk.c	/^static int console_locked, console_suspended;$/;"	v	file:
console_may_schedule	kernel/printk.c	/^static int console_may_schedule;$/;"	v	file:
console_printk	kernel/printk.c	/^int console_printk[4] = {$/;"	v
console_set_on_cmdline	kernel/printk.c	/^EXPORT_SYMBOL(console_set_on_cmdline);$/;"	v
console_set_on_cmdline	kernel/printk.c	/^int console_set_on_cmdline;$/;"	v
console_setup	kernel/printk.c	/^static int __init console_setup(char *str)$/;"	f	file:
console_start	kernel/printk.c	/^EXPORT_SYMBOL(console_start);$/;"	v
console_start	kernel/printk.c	/^void console_start(struct console *console)$/;"	f
console_stop	kernel/printk.c	/^EXPORT_SYMBOL(console_stop);$/;"	v
console_stop	kernel/printk.c	/^void console_stop(struct console *console)$/;"	f
console_suspend_disable	kernel/printk.c	/^static int __init console_suspend_disable(char *str)$/;"	f	file:
console_suspend_enabled	kernel/printk.c	/^EXPORT_SYMBOL(console_suspend_enabled);$/;"	v
console_suspend_enabled	kernel/printk.c	/^int console_suspend_enabled = 1;$/;"	v
console_suspended	kernel/printk.c	/^static int console_locked, console_suspended;$/;"	v	file:
console_unblank	kernel/printk.c	/^void console_unblank(void)$/;"	f
const_debug	kernel/sched.c	673;"	d	file:
const_debug	kernel/sched.c	675;"	d	file:
constrained_alloc	mm/oom_kill.c	/^static enum oom_constraint constrained_alloc(struct zonelist *zonelist,$/;"	f	file:
consume_stock	mm/memcontrol.c	/^static bool consume_stock(struct mem_cgroup *mem)$/;"	f	file:
cont_expand_zero	fs/buffer.c	/^static int cont_expand_zero(struct file *file, struct address_space *mapping,$/;"	f	file:
cont_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(cont_write_begin);$/;"	v
cont_write_begin	fs/buffer.c	/^int cont_write_begin(struct file *file, struct address_space *mapping,$/;"	f
context_equiv	kernel/perf_event.c	/^static int context_equiv(struct perf_event_context *ctx1,$/;"	f	file:
context_switch	kernel/sched.c	/^context_switch(struct rq *rq, struct task_struct *prev,$/;"	f	file:
contig_hint	mm/percpu.c	/^	int			contig_hint;	\/* max contiguous size hint *\/$/;"	m	struct:pcpu_chunk	file:
contig_page_data	mm/page_alloc.c	/^EXPORT_SYMBOL(contig_page_data);$/;"	v
contig_page_data	mm/page_alloc.c	/^struct pglist_data __refdata contig_page_data = { .bdata = &bootmem_node_data[0] };$/;"	v	typeref:struct:__refdata
conversions	kernel/timeconst.pl	/^sub conversions($$) {$/;"	s
convert	kernel/sysctl_binary.c	/^	bin_convert_t		*convert;$/;"	m	struct:bin_table	file:
convert_prio	kernel/sched_cpupri.c	/^static int convert_prio(int prio)$/;"	f	file:
cookie	fs/eventpoll.c	/^	void *cookie;$/;"	m	struct:nested_call_node	file:
cookie	kernel/async.c	/^	async_cookie_t   cookie;$/;"	m	struct:async_entry	file:
copy_creds	kernel/cred.c	/^int copy_creds(struct task_struct *p, unsigned long clone_flags)$/;"	f
copy_fdtable	fs/file.c	/^static void copy_fdtable(struct fdtable *nfdt, struct fdtable *ofdt)$/;"	f	file:
copy_files	kernel/fork.c	/^static int copy_files(unsigned long clone_flags, struct task_struct * tsk)$/;"	f	file:
copy_flags	kernel/fork.c	/^static void copy_flags(unsigned long clone_flags, struct task_struct *p)$/;"	f	file:
copy_fs	kernel/fork.c	/^static int copy_fs(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_fs_struct	fs/fs_struct.c	/^struct fs_struct *copy_fs_struct(struct fs_struct *old)$/;"	f
copy_gigantic_page	mm/hugetlb.c	/^static void copy_gigantic_page(struct page *dst, struct page *src,$/;"	f	file:
copy_huge_page	mm/hugetlb.c	/^static void copy_huge_page(struct page *dst, struct page *src,$/;"	f	file:
copy_hugetlb_page_range	mm/hugetlb.c	/^int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,$/;"	f
copy_io	kernel/fork.c	/^static int copy_io(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_iocb	fs/compat.c	/^copy_iocb(long nr, u32 __user *ptr32, struct iocb __user * __user *ptr64)$/;"	f	file:
copy_kprobe	kernel/kprobes.c	/^static inline void copy_kprobe(struct kprobe *old_p, struct kprobe *p)$/;"	f	file:
copy_mm	kernel/fork.c	/^static int copy_mm(unsigned long clone_flags, struct task_struct * tsk)$/;"	f	file:
copy_mnt_ns	fs/namespace.c	/^struct mnt_namespace *copy_mnt_ns(unsigned long flags, struct mnt_namespace *ns,$/;"	f
copy_mount_options	fs/namespace.c	/^int copy_mount_options(const void __user * data, unsigned long *where)$/;"	f
copy_mount_string	fs/namespace.c	/^int copy_mount_string(const void __user *data, char **where)$/;"	f
copy_namespaces	kernel/nsproxy.c	/^int copy_namespaces(unsigned long flags, struct task_struct *tsk)$/;"	f
copy_nodes_to_user	mm/mempolicy.c	/^static int copy_nodes_to_user(unsigned long __user *mask, unsigned long maxnode,$/;"	f	file:
copy_one_pte	mm/memory.c	/^copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_page_range	mm/memory.c	/^int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_pid_ns	kernel/pid_namespace.c	/^struct pid_namespace *copy_pid_ns(unsigned long flags, struct pid_namespace *old_ns)$/;"	f
copy_pmd_range	mm/memory.c	/^static inline int copy_pmd_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_process	kernel/fork.c	/^static struct task_struct *copy_process(unsigned long clone_flags,$/;"	f	file:
copy_pte_range	mm/memory.c	/^static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_pud_range	mm/memory.c	/^static inline int copy_pud_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_sighand	kernel/fork.c	/^static int copy_sighand(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_siginfo_to_user	kernel/signal.c	/^int copy_siginfo_to_user(siginfo_t __user *to, siginfo_t *from)$/;"	f
copy_signal	kernel/fork.c	/^static int copy_signal(unsigned long clone_flags, struct task_struct *tsk)$/;"	f	file:
copy_strings	fs/exec.c	/^static int copy_strings(int argc, char __user * __user * argv,$/;"	f	file:
copy_strings_kernel	fs/exec.c	/^EXPORT_SYMBOL(copy_strings_kernel);$/;"	v
copy_strings_kernel	fs/exec.c	/^int copy_strings_kernel(int argc,char ** argv, struct linux_binprm *bprm)$/;"	f
copy_to_high_bio_irq	mm/bounce.c	/^static void copy_to_high_bio_irq(struct bio *to, struct bio *from)$/;"	f	file:
copy_tree	fs/namespace.c	/^struct vfsmount *copy_tree(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
copy_utsname	kernel/utsname.c	/^struct uts_namespace *copy_utsname(unsigned long flags, struct uts_namespace *old_ns)$/;"	f
copy_vma	mm/mmap.c	/^struct vm_area_struct *copy_vma(struct vm_area_struct **vmap,$/;"	f
core_kernel_text	kernel/extable.c	/^int core_kernel_text(unsigned long addr)$/;"	f
core_pattern	fs/exec.c	/^char core_pattern[CORENAME_MAX_SIZE] = "core";$/;"	v
core_pipe_limit	fs/exec.c	/^unsigned int core_pipe_limit;$/;"	v
core_sys_select	fs/select.c	/^int core_sys_select(int n, fd_set __user *inp, fd_set __user *outp,$/;"	f
core_uses_pid	fs/exec.c	/^int core_uses_pid;$/;"	v
coredump_filter_setup	kernel/fork.c	/^static int __init coredump_filter_setup(char *s)$/;"	f	file:
coredump_finish	fs/exec.c	/^static void coredump_finish(struct mm_struct *mm)$/;"	f	file:
coredump_wait	fs/exec.c	/^static int coredump_wait(int exit_code, struct core_state *core_state)$/;"	f	file:
count	fs/block_dev.c	/^	int count;		\/* references from the holder *\/$/;"	m	struct:bd_holder	file:
count	fs/compat.c	/^	int count;$/;"	m	struct:compat_getdents_callback	file:
count	fs/compat.c	/^	int count;$/;"	m	struct:compat_getdents_callback64	file:
count	fs/eventfd.c	/^	__u64 count;$/;"	m	struct:eventfd_ctx	file:
count	fs/exec.c	/^static int count(char __user * __user * argv, int max)$/;"	f	file:
count	fs/notify/inotify/inotify.c	/^	atomic_t		count;		\/* reference count *\/$/;"	m	struct:inotify_handle	file:
count	fs/readdir.c	/^	int count;$/;"	m	struct:getdents_callback	file:
count	fs/readdir.c	/^	int count;$/;"	m	struct:getdents_callback64	file:
count	kernel/audit_tree.c	/^	atomic_t count;$/;"	m	struct:audit_tree	file:
count	kernel/audit_tree.c	/^	int count;$/;"	m	struct:audit_chunk	file:
count	kernel/audit_watch.c	/^	atomic_t		count;	\/* reference count *\/$/;"	m	struct:audit_watch	file:
count	kernel/sched_cpupri.h	/^	int        count;$/;"	m	struct:cpupri_vec
count	lib/radix-tree.c	/^	unsigned int	count;$/;"	m	struct:radix_tree_node	file:
count	mm/kmemleak.c	/^	int count;$/;"	m	struct:kmemleak_object	file:
count	mm/memcontrol.c	/^	s64 count[MEM_CGROUP_STAT_NSTATS];$/;"	m	struct:mem_cgroup_stat_cpu	file:
count	mm/memcontrol.c	/^	unsigned long		count[NR_LRU_LISTS];$/;"	m	struct:mem_cgroup_per_zone	file:
count	mm/slub.c	/^	unsigned long count;$/;"	m	struct:loc_track	file:
count	mm/slub.c	/^	unsigned long count;$/;"	m	struct:location	file:
count_free	mm/slub.c	/^static int count_free(struct page *page)$/;"	f	file:
count_history_pages	mm/readahead.c	/^static pgoff_t count_history_pages(struct address_space *mapping,$/;"	f	file:
count_inuse	mm/slub.c	/^static int count_inuse(struct page *page)$/;"	f	file:
count_matching_names	kernel/lockdep.c	/^static int count_matching_names(struct lock_class *new_class)$/;"	f	file:
count_mnt_writers	fs/namespace.c	/^static unsigned int count_mnt_writers(struct vfsmount *mnt)$/;"	f	file:
count_open_files	fs/file.c	/^static int count_open_files(struct fdtable *fdt)$/;"	f	file:
count_partial	mm/slub.c	/^static unsigned long count_partial(struct kmem_cache_node *n,$/;"	f	file:
count_swap_pages	mm/swapfile.c	/^unsigned int count_swap_pages(int type, int free)$/;"	f
count_total	mm/slub.c	/^static int count_total(struct page *page)$/;"	f	file:
covered	kernel/sched.c	/^	cpumask_var_t		covered;$/;"	m	struct:s_data	file:
cow_user_page	mm/memory.c	/^static inline void cow_user_page(struct page *dst, struct page *src, unsigned long va, struct vm_area_struct *vma)$/;"	f	file:
cp_compat_stat	fs/compat.c	/^static int cp_compat_stat(struct kstat *stat, struct compat_stat __user *ubuf)$/;"	f	file:
cp_new_stat	fs/stat.c	/^static int cp_new_stat(struct kstat *stat, struct stat __user *statbuf)$/;"	f	file:
cp_new_stat64	fs/stat.c	/^static long cp_new_stat64(struct kstat *stat, struct stat64 __user *statbuf)$/;"	f	file:
cp_old_stat	fs/stat.c	/^static int cp_old_stat(struct kstat *stat, struct __old_kernel_stat __user * statbuf)$/;"	f	file:
cpu	kernel/kgdb.c	/^	int			cpu;$/;"	m	struct:kgdb_state	file:
cpu	kernel/rcutree.h	/^	int cpu;$/;"	m	struct:rcu_data
cpu	kernel/sched.c	/^	int cpu;$/;"	m	struct:rq	file:
cpu	mm/slub.c	/^	int cpu;		\/* Was running on cpu *\/$/;"	m	struct:track	file:
cpu_active_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_active_mask);$/;"	v
cpu_active_mask	kernel/cpu.c	/^const struct cpumask *const cpu_active_mask = to_cpumask(cpu_active_bits);$/;"	v
cpu_all_bits	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_all_bits);$/;"	v
cpu_attach_domain	kernel/sched.c	/^cpu_attach_domain(struct sched_domain *sd, struct root_domain *rd, int cpu)$/;"	f	file:
cpu_avg_load_per_task	kernel/sched.c	/^static unsigned long cpu_avg_load_per_task(int cpu)$/;"	f	file:
cpu_bit_bitmap	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(cpu_bit_bitmap);$/;"	v
cpu_bit_bitmap	kernel/cpu.c	/^const unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)] = {$/;"	v
cpu_cache_get	mm/slab.c	/^static inline struct array_cache *cpu_cache_get(struct kmem_cache *cachep)$/;"	f	file:
cpu_callback	kernel/softirq.c	/^static int __cpuinit cpu_callback(struct notifier_block *nfb,$/;"	f	file:
cpu_callback	kernel/softlockup.c	/^cpu_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)$/;"	f	file:
cpu_callback	mm/vmscan.c	/^static int __devinit cpu_callback(struct notifier_block *nfb,$/;"	f	file:
cpu_cfs_rq	kernel/sched_fair.c	/^static inline struct cfs_rq *cpu_cfs_rq(struct cfs_rq *cfs_rq, int this_cpu)$/;"	f	file:
cpu_cgroup_attach	kernel/sched.c	/^cpu_cgroup_attach(struct cgroup_subsys *ss, struct cgroup *cgrp,$/;"	f	file:
cpu_cgroup_can_attach	kernel/sched.c	/^cpu_cgroup_can_attach(struct cgroup_subsys *ss, struct cgroup *cgrp,$/;"	f	file:
cpu_cgroup_can_attach_task	kernel/sched.c	/^cpu_cgroup_can_attach_task(struct cgroup *cgrp, struct task_struct *tsk)$/;"	f	file:
cpu_cgroup_create	kernel/sched.c	/^cpu_cgroup_create(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
cpu_cgroup_destroy	kernel/sched.c	/^cpu_cgroup_destroy(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
cpu_cgroup_populate	kernel/sched.c	/^static int cpu_cgroup_populate(struct cgroup_subsys *ss, struct cgroup *cont)$/;"	f	file:
cpu_cgroup_subsys	kernel/sched.c	/^struct cgroup_subsys cpu_cgroup_subsys = {$/;"	v	typeref:struct:cgroup_subsys
cpu_clock	kernel/sched_clock.c	/^EXPORT_SYMBOL_GPL(cpu_clock);$/;"	v
cpu_clock	kernel/sched_clock.c	/^unsigned long long cpu_clock(int cpu)$/;"	f
cpu_clock_perf_event_disable	kernel/perf_event.c	/^static void cpu_clock_perf_event_disable(struct perf_event *event)$/;"	f	file:
cpu_clock_perf_event_enable	kernel/perf_event.c	/^static int cpu_clock_perf_event_enable(struct perf_event *event)$/;"	f	file:
cpu_clock_perf_event_read	kernel/perf_event.c	/^static void cpu_clock_perf_event_read(struct perf_event *event)$/;"	f	file:
cpu_clock_perf_event_update	kernel/perf_event.c	/^static void cpu_clock_perf_event_update(struct perf_event *event)$/;"	f	file:
cpu_clock_sample	kernel/posix-cpu-timers.c	/^static int cpu_clock_sample(const clockid_t which_clock, struct task_struct *p,$/;"	f	file:
cpu_clock_sample_group	kernel/posix-cpu-timers.c	/^static int cpu_clock_sample_group(const clockid_t which_clock,$/;"	f	file:
cpu_curr	kernel/sched.c	661;"	d	file:
cpu_dma_pm_qos	kernel/pm_qos_params.c	/^static struct pm_qos_object cpu_dma_pm_qos = {$/;"	v	typeref:struct:pm_qos_object	file:
cpu_down	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_down);$/;"	v
cpu_down	kernel/cpu.c	/^int __ref cpu_down(unsigned int cpu)$/;"	f
cpu_files	kernel/sched.c	/^static struct cftype cpu_files[] = {$/;"	v	typeref:struct:cftype	file:
cpu_has_callbacks_ready_to_invoke	kernel/rcutree.c	/^cpu_has_callbacks_ready_to_invoke(struct rcu_data *rdp)$/;"	f	file:
cpu_hotplug	kernel/cpu.c	/^} cpu_hotplug = {$/;"	v	typeref:struct:__anon32	file:
cpu_hotplug_begin	kernel/cpu.c	/^static void cpu_hotplug_begin(void)$/;"	f	file:
cpu_hotplug_disabled	kernel/cpu.c	/^static int cpu_hotplug_disabled;$/;"	v	file:
cpu_hotplug_done	kernel/cpu.c	/^static void cpu_hotplug_done(void)$/;"	f	file:
cpu_in_kgdb	kernel/kgdb.c	/^static atomic_t			cpu_in_kgdb[NR_CPUS];$/;"	v	file:
cpu_isolated_map	kernel/sched.c	/^static cpumask_var_t cpu_isolated_map;$/;"	v	file:
cpu_load	kernel/sched.c	/^	unsigned long cpu_load[CPU_LOAD_IDX_MAX];$/;"	m	struct:rq	file:
cpu_maps_update_begin	kernel/cpu.c	/^void cpu_maps_update_begin(void)$/;"	f
cpu_maps_update_done	kernel/cpu.c	/^void cpu_maps_update_done(void)$/;"	f
cpu_mask	kernel/sched.c	/^	cpumask_var_t cpu_mask;$/;"	m	struct:__anon44	file:
cpu_needs_another_gp	kernel/rcutree.c	/^cpu_needs_another_gp(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
cpu_nfb	kernel/softirq.c	/^static struct notifier_block __cpuinitdata cpu_nfb = {$/;"	v	typeref:struct:__cpuinitdata	file:
cpu_nfb	kernel/softlockup.c	/^static struct notifier_block __cpuinitdata cpu_nfb = {$/;"	v	typeref:struct:__cpuinitdata	file:
cpu_of	kernel/sched.c	/^static inline int cpu_of(struct rq *rq)$/;"	f	file:
cpu_online_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_online_mask);$/;"	v
cpu_online_mask	kernel/cpu.c	/^const struct cpumask *const cpu_online_mask = to_cpumask(cpu_online_bits);$/;"	v
cpu_possible_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_possible_mask);$/;"	v
cpu_possible_mask	kernel/cpu.c	/^const struct cpumask *const cpu_possible_mask = to_cpumask(cpu_possible_bits);$/;"	v
cpu_present_mask	kernel/cpu.c	/^EXPORT_SYMBOL(cpu_present_mask);$/;"	v
cpu_present_mask	kernel/cpu.c	/^const struct cpumask *const cpu_present_mask = to_cpumask(cpu_present_bits);$/;"	v
cpu_rq	kernel/sched.c	658;"	d	file:
cpu_rt_period_attr	kernel/user.c	/^static struct kobj_attribute cpu_rt_period_attr =$/;"	v	typeref:struct:kobj_attribute	file:
cpu_rt_period_read_uint	kernel/sched.c	/^static u64 cpu_rt_period_read_uint(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
cpu_rt_period_show	kernel/user.c	/^static ssize_t cpu_rt_period_show(struct kobject *kobj,$/;"	f	file:
cpu_rt_period_store	kernel/user.c	/^static ssize_t cpu_rt_period_store(struct kobject *kobj,$/;"	f	file:
cpu_rt_period_write_uint	kernel/sched.c	/^static int cpu_rt_period_write_uint(struct cgroup *cgrp, struct cftype *cftype,$/;"	f	file:
cpu_rt_runtime_attr	kernel/user.c	/^static struct kobj_attribute cpu_rt_runtime_attr =$/;"	v	typeref:struct:kobj_attribute	file:
cpu_rt_runtime_read	kernel/sched.c	/^static s64 cpu_rt_runtime_read(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
cpu_rt_runtime_show	kernel/user.c	/^static ssize_t cpu_rt_runtime_show(struct kobject *kobj,$/;"	f	file:
cpu_rt_runtime_store	kernel/user.c	/^static ssize_t cpu_rt_runtime_store(struct kobject *kobj,$/;"	f	file:
cpu_rt_runtime_write	kernel/sched.c	/^static int cpu_rt_runtime_write(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cpu_sdc	kernel/sched_clock.c	/^static inline struct sched_clock_data *cpu_sdc(int cpu)$/;"	f	file:
cpu_share_attr	kernel/user.c	/^static struct kobj_attribute cpu_share_attr =$/;"	v	typeref:struct:kobj_attribute	file:
cpu_shares_read_u64	kernel/sched.c	/^static u64 cpu_shares_read_u64(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
cpu_shares_show	kernel/user.c	/^static ssize_t cpu_shares_show(struct kobject *kobj,$/;"	f	file:
cpu_shares_store	kernel/user.c	/^static ssize_t cpu_shares_store(struct kobject *kobj,$/;"	f	file:
cpu_shares_write_u64	kernel/sched.c	/^static int cpu_shares_write_u64(struct cgroup *cgrp, struct cftype *cftype,$/;"	f	file:
cpu_slabs	mm/slub.c	/^SLAB_ATTR_RO(cpu_slabs);$/;"	v
cpu_slabs_show	mm/slub.c	/^static ssize_t cpu_slabs_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cpu_time_add	kernel/posix-cpu-timers.c	/^static inline void cpu_time_add(const clockid_t which_clock,$/;"	f	file:
cpu_time_before	kernel/posix-cpu-timers.c	/^static inline int cpu_time_before(const clockid_t which_clock,$/;"	f	file:
cpu_time_sub	kernel/posix-cpu-timers.c	/^static inline union cpu_time_count cpu_time_sub(const clockid_t which_clock,$/;"	f	file:
cpu_timer_fire	kernel/posix-cpu-timers.c	/^static void cpu_timer_fire(struct k_itimer *timer)$/;"	f	file:
cpu_timer_sample_group	kernel/posix-cpu-timers.c	/^static int cpu_timer_sample_group(const clockid_t which_clock,$/;"	f	file:
cpu_to_allnodes_group	kernel/sched.c	/^static int cpu_to_allnodes_group(int cpu, const struct cpumask *cpu_map,$/;"	f	file:
cpu_to_core_group	kernel/sched.c	/^cpu_to_core_group(int cpu, const struct cpumask *cpu_map,$/;"	f	file:
cpu_to_cpu_group	kernel/sched.c	/^cpu_to_cpu_group(int cpu, const struct cpumask *cpu_map,$/;"	f	file:
cpu_to_phys_group	kernel/sched.c	/^cpu_to_phys_group(int cpu, const struct cpumask *cpu_map,$/;"	f	file:
cpu_to_pri	kernel/sched_cpupri.h	/^	int               cpu_to_pri[NR_CPUS];$/;"	m	struct:cpupri
cpu_up	kernel/cpu.c	/^int __cpuinit cpu_up(unsigned int cpu)$/;"	f
cpu_workqueue_struct	kernel/workqueue.c	/^struct cpu_workqueue_struct {$/;"	s	file:
cpu_wq	kernel/workqueue.c	/^	struct cpu_workqueue_struct *cpu_wq;$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::cpu_workqueue_struct	file:
cpuacct	kernel/sched.c	/^struct cpuacct {$/;"	s	file:
cpuacct_charge	kernel/sched.c	/^static inline void cpuacct_charge(struct task_struct *tsk, u64 cputime) {}$/;"	f	file:
cpuacct_charge	kernel/sched.c	/^static void cpuacct_charge(struct task_struct *tsk, u64 cputime)$/;"	f	file:
cpuacct_cpuusage_read	kernel/sched.c	/^static u64 cpuacct_cpuusage_read(struct cpuacct *ca, int cpu)$/;"	f	file:
cpuacct_cpuusage_write	kernel/sched.c	/^static void cpuacct_cpuusage_write(struct cpuacct *ca, int cpu, u64 val)$/;"	f	file:
cpuacct_create	kernel/sched.c	/^static struct cgroup_subsys_state *cpuacct_create($/;"	f	file:
cpuacct_destroy	kernel/sched.c	/^cpuacct_destroy(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
cpuacct_percpu_seq_read	kernel/sched.c	/^static int cpuacct_percpu_seq_read(struct cgroup *cgroup, struct cftype *cft,$/;"	f	file:
cpuacct_populate	kernel/sched.c	/^static int cpuacct_populate(struct cgroup_subsys *ss, struct cgroup *cgrp)$/;"	f	file:
cpuacct_stat_desc	kernel/sched.c	/^static const char *cpuacct_stat_desc[] = {$/;"	v	file:
cpuacct_stat_index	kernel/sched.c	/^enum cpuacct_stat_index {$/;"	g	file:
cpuacct_stats_show	kernel/sched.c	/^static int cpuacct_stats_show(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cpuacct_subsys	kernel/sched.c	/^struct cgroup_subsys cpuacct_subsys = {$/;"	v	typeref:struct:cgroup_subsys
cpuacct_subsys	kernel/sched.c	/^struct cgroup_subsys cpuacct_subsys;$/;"	v	typeref:struct:cgroup_subsys
cpuacct_update_stats	kernel/sched.c	/^static inline void cpuacct_update_stats(struct task_struct *tsk,$/;"	f	file:
cpuacct_update_stats	kernel/sched.c	/^static void cpuacct_update_stats(struct task_struct *tsk,$/;"	f	file:
cpucache_init	mm/slab.c	/^__initcall(cpucache_init);$/;"	v
cpucache_init	mm/slab.c	/^static int __init cpucache_init(void)$/;"	f	file:
cpucache_notifier	mm/slab.c	/^static struct notifier_block __cpuinitdata cpucache_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
cpumask	kernel/smp.c	/^	cpumask_var_t		cpumask;$/;"	m	struct:call_function_data	file:
cpupri	kernel/sched.c	/^	struct cpupri cpupri;$/;"	m	struct:root_domain	typeref:struct:root_domain::cpupri	file:
cpupri	kernel/sched_cpupri.h	/^struct cpupri {$/;"	s
cpupri_cleanup	kernel/sched_cpupri.c	/^void cpupri_cleanup(struct cpupri *cp)$/;"	f
cpupri_find	kernel/sched_cpupri.c	/^int cpupri_find(struct cpupri *cp, struct task_struct *p,$/;"	f
cpupri_init	kernel/sched_cpupri.c	/^int cpupri_init(struct cpupri *cp, bool bootmem)$/;"	f
cpupri_init	kernel/sched_cpupri.h	34;"	d
cpupri_set	kernel/sched_cpupri.c	/^void cpupri_set(struct cpupri *cp, int cpu, int newpri)$/;"	f
cpupri_set	kernel/sched_cpupri.h	33;"	d
cpupri_vec	kernel/sched_cpupri.h	/^struct cpupri_vec {$/;"	s
cpus_allowed	kernel/cpuset.c	/^	cpumask_var_t cpus_allowed;	\/* CPUs allowed to tasks in cpuset *\/$/;"	m	struct:cpuset	file:
cpus_attach	kernel/cpuset.c	/^static cpumask_var_t cpus_attach;$/;"	v	file:
cpuset	kernel/cpuset.c	/^struct cpuset {$/;"	s	file:
cpuset_attach	kernel/cpuset.c	/^static void cpuset_attach(struct cgroup_subsys *ss, struct cgroup *cont,$/;"	f	file:
cpuset_attach_task	kernel/cpuset.c	/^static void cpuset_attach_task(struct task_struct *tsk, nodemask_t *to,$/;"	f	file:
cpuset_being_rebound	kernel/cpuset.c	/^static void *cpuset_being_rebound;$/;"	v	file:
cpuset_can_attach	kernel/cpuset.c	/^static int cpuset_can_attach(struct cgroup_subsys *ss, struct cgroup *cont,$/;"	f	file:
cpuset_change_cpumask	kernel/cpuset.c	/^static void cpuset_change_cpumask(struct task_struct *tsk,$/;"	f	file:
cpuset_change_flag	kernel/cpuset.c	/^static void cpuset_change_flag(struct task_struct *tsk,$/;"	f	file:
cpuset_change_nodemask	kernel/cpuset.c	/^static void cpuset_change_nodemask(struct task_struct *p,$/;"	f	file:
cpuset_change_task_nodemask	kernel/cpuset.c	/^static void cpuset_change_task_nodemask(struct task_struct *tsk,$/;"	f	file:
cpuset_common_file_read	kernel/cpuset.c	/^static ssize_t cpuset_common_file_read(struct cgroup *cont,$/;"	f	file:
cpuset_cpus_allowed	kernel/cpuset.c	/^void cpuset_cpus_allowed(struct task_struct *tsk, struct cpumask *pmask)$/;"	f
cpuset_cpus_allowed_locked	kernel/cpuset.c	/^void cpuset_cpus_allowed_locked(struct task_struct *tsk, struct cpumask *pmask)$/;"	f
cpuset_create	kernel/cpuset.c	/^static struct cgroup_subsys_state *cpuset_create($/;"	f	file:
cpuset_destroy	kernel/cpuset.c	/^static void cpuset_destroy(struct cgroup_subsys *ss, struct cgroup *cont)$/;"	f	file:
cpuset_do_move_task	kernel/cpuset.c	/^static void cpuset_do_move_task(struct task_struct *tsk,$/;"	f	file:
cpuset_filetype_t	kernel/cpuset.c	/^} cpuset_filetype_t;$/;"	t	typeref:enum:__anon34	file:
cpuset_flagbits_t	kernel/cpuset.c	/^} cpuset_flagbits_t;$/;"	t	typeref:enum:__anon33	file:
cpuset_fs_type	kernel/cpuset.c	/^static struct file_system_type cpuset_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
cpuset_get_sb	kernel/cpuset.c	/^static int cpuset_get_sb(struct file_system_type *fs_type,$/;"	f	file:
cpuset_init	kernel/cpuset.c	/^int __init cpuset_init(void)$/;"	f
cpuset_init_current_mems_allowed	kernel/cpuset.c	/^void cpuset_init_current_mems_allowed(void)$/;"	f
cpuset_init_smp	kernel/cpuset.c	/^void __init cpuset_init_smp(void)$/;"	f
cpuset_lock	kernel/cpuset.c	/^void cpuset_lock(void)$/;"	f
cpuset_mem_spread_node	kernel/cpuset.c	/^EXPORT_SYMBOL_GPL(cpuset_mem_spread_node);$/;"	v
cpuset_mem_spread_node	kernel/cpuset.c	/^int cpuset_mem_spread_node(void)$/;"	f
cpuset_mems_allowed	kernel/cpuset.c	/^nodemask_t cpuset_mems_allowed(struct task_struct *tsk)$/;"	f
cpuset_mems_allowed_intersects	kernel/cpuset.c	/^int cpuset_mems_allowed_intersects(const struct task_struct *tsk1,$/;"	f
cpuset_mems_nr	mm/hugetlb.c	/^static unsigned int cpuset_mems_nr(unsigned int *array)$/;"	f	file:
cpuset_migrate_mm	kernel/cpuset.c	/^static void cpuset_migrate_mm(struct mm_struct *mm, const nodemask_t *from,$/;"	f	file:
cpuset_name	kernel/cpuset.c	/^static char cpuset_name[CPUSET_NAME_LEN];$/;"	v	file:
cpuset_nodelist	kernel/cpuset.c	/^static char cpuset_nodelist[CPUSET_NODELIST_LEN];$/;"	v	file:
cpuset_nodemask_valid_mems_allowed	kernel/cpuset.c	/^int cpuset_nodemask_valid_mems_allowed(nodemask_t *nodemask)$/;"	f
cpuset_open	kernel/cpuset.c	/^static int cpuset_open(struct inode *inode, struct file *file)$/;"	f	file:
cpuset_populate	kernel/cpuset.c	/^static int cpuset_populate(struct cgroup_subsys *ss, struct cgroup *cont)$/;"	f	file:
cpuset_post_clone	kernel/cpuset.c	/^static void cpuset_post_clone(struct cgroup_subsys *ss,$/;"	f	file:
cpuset_print_task_mems_allowed	kernel/cpuset.c	/^void cpuset_print_task_mems_allowed(struct task_struct *tsk)$/;"	f
cpuset_read_s64	kernel/cpuset.c	/^static s64 cpuset_read_s64(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
cpuset_read_u64	kernel/cpuset.c	/^static u64 cpuset_read_u64(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
cpuset_sprintf_cpulist	kernel/cpuset.c	/^static int cpuset_sprintf_cpulist(char *page, struct cpuset *cs)$/;"	f	file:
cpuset_sprintf_memlist	kernel/cpuset.c	/^static int cpuset_sprintf_memlist(char *page, struct cpuset *cs)$/;"	f	file:
cpuset_subsys	kernel/cpuset.c	/^struct cgroup_subsys cpuset_subsys = {$/;"	v	typeref:struct:cgroup_subsys
cpuset_subsys	kernel/cpuset.c	/^struct cgroup_subsys cpuset_subsys;$/;"	v	typeref:struct:cgroup_subsys
cpuset_task_status_allowed	kernel/cpuset.c	/^void cpuset_task_status_allowed(struct seq_file *m, struct task_struct *task)$/;"	f
cpuset_test_cpumask	kernel/cpuset.c	/^static int cpuset_test_cpumask(struct task_struct *tsk,$/;"	f	file:
cpuset_track_online_cpus	kernel/cpuset.c	/^static int cpuset_track_online_cpus(struct notifier_block *unused_nb,$/;"	f	file:
cpuset_track_online_nodes	kernel/cpuset.c	/^static int cpuset_track_online_nodes(struct notifier_block *self,$/;"	f	file:
cpuset_unlock	kernel/cpuset.c	/^void cpuset_unlock(void)$/;"	f
cpuset_update_task_spread_flag	kernel/cpuset.c	/^static void cpuset_update_task_spread_flag(struct cpuset *cs,$/;"	f	file:
cpuset_wq	kernel/cpuset.c	/^static struct workqueue_struct *cpuset_wq;$/;"	v	typeref:struct:workqueue_struct	file:
cpuset_write_resmask	kernel/cpuset.c	/^static int cpuset_write_resmask(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
cpuset_write_s64	kernel/cpuset.c	/^static int cpuset_write_s64(struct cgroup *cgrp, struct cftype *cft, s64 val)$/;"	f	file:
cpuset_write_u64	kernel/cpuset.c	/^static int cpuset_write_u64(struct cgroup *cgrp, struct cftype *cft, u64 val)$/;"	f	file:
cpusets_overlap	kernel/cpuset.c	/^static int cpusets_overlap(struct cpuset *a, struct cpuset *b)$/;"	f	file:
cpustat	kernel/sched.c	/^	struct percpu_counter cpustat[CPUACCT_STAT_NSTATS];$/;"	m	struct:cpuacct	typeref:struct:cpuacct::percpu_counter	file:
cpustat	mm/memcontrol.c	/^	struct mem_cgroup_stat_cpu cpustat[0];$/;"	m	struct:mem_cgroup_stat	typeref:struct:mem_cgroup_stat::mem_cgroup_stat_cpu	file:
cputime_div_non_zero	kernel/posix-cpu-timers.c	/^static inline cputime_t cputime_div_non_zero(cputime_t time, unsigned long div)$/;"	f	file:
cputime_sub_ns	kernel/itimer.c	/^static inline u32 cputime_sub_ns(cputime_t ct, s64 real_ns)$/;"	f	file:
cputime_to_compat_timeval	fs/compat_binfmt_elf.c	/^static void cputime_to_compat_timeval(const cputime_t cputime,$/;"	f	file:
cputime_to_timeval	fs/compat_binfmt_elf.c	58;"	d	file:
cputime_to_timeval	fs/compat_binfmt_elf.c	59;"	d	file:
cpuup_callback	mm/slab.c	/^static int __cpuinit cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
cpuup_canceled	mm/slab.c	/^static void __cpuinit cpuup_canceled(long cpu)$/;"	f	file:
cpuup_prepare	mm/slab.c	/^static int __cpuinit cpuup_prepare(long cpu)$/;"	f	file:
cpuusage	kernel/sched.c	/^	u64 *cpuusage;$/;"	m	struct:cpuacct	file:
cpuusage_read	kernel/sched.c	/^static u64 cpuusage_read(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
cpuusage_write	kernel/sched.c	/^static int cpuusage_write(struct cgroup *cgrp, struct cftype *cftype,$/;"	f	file:
cr32_getfh	fs/compat.c	/^	__u8			cr32_getfh[NFS_FHSIZE];$/;"	m	union:compat_nfsctl_res	file:
cr32_getfs	fs/compat.c	/^	struct knfsd_fh		cr32_getfs;$/;"	m	union:compat_nfsctl_res	typeref:struct:compat_nfsctl_res::knfsd_fh	file:
crash_get_memory_size	kernel/kexec.c	/^size_t crash_get_memory_size(void)$/;"	f
crash_kexec	kernel/kexec.c	/^void crash_kexec(struct pt_regs *regs)$/;"	f
crash_notes	kernel/kexec.c	/^note_buf_t* crash_notes;$/;"	v
crash_notes_memory_init	kernel/kexec.c	/^static int __init crash_notes_memory_init(void)$/;"	f	file:
crash_save_cpu	kernel/kexec.c	/^void crash_save_cpu(struct pt_regs *regs, int cpu)$/;"	f
crash_save_vmcoreinfo	kernel/kexec.c	/^void crash_save_vmcoreinfo(void)$/;"	f
crash_save_vmcoreinfo_init	kernel/kexec.c	/^static int __init crash_save_vmcoreinfo_init(void)$/;"	f	file:
crash_shrink_memory	kernel/kexec.c	/^int crash_shrink_memory(unsigned long new_size)$/;"	f
crashk_res	kernel/kexec.c	/^struct resource crashk_res = {$/;"	v	typeref:struct:resource
crc	kernel/module.c	/^	const unsigned long *crc;$/;"	m	struct:find_symbol_arg	file:
create	mm/mempolicy.c	/^	int (*create)(struct mempolicy *pol, const nodemask_t *nodes);$/;"	m	struct:mempolicy_operations	file:
create_aout_tables	fs/binfmt_aout.c	/^static unsigned long __user *create_aout_tables(char __user *p, struct linux_binprm * bprm)$/;"	f	file:
create_buf_file_default_callback	kernel/relay.c	/^static struct dentry *create_buf_file_default_callback(const char *filename,$/;"	f	file:
create_chunk	kernel/audit_tree.c	/^static int create_chunk(struct inode *inode, struct audit_tree *tree)$/;"	f	file:
create_elf_fdpic_tables	fs/binfmt_elf_fdpic.c	/^static int create_elf_fdpic_tables(struct linux_binprm *bprm,$/;"	f	file:
create_elf_tables	fs/binfmt_elf.c	/^create_elf_tables(struct linux_binprm *bprm, struct elfhdr *exec,$/;"	f	file:
create_empty_buffers	fs/buffer.c	/^EXPORT_SYMBOL(create_empty_buffers);$/;"	v
create_empty_buffers	fs/buffer.c	/^void create_empty_buffers(struct page *page,$/;"	f
create_entry	fs/binfmt_misc.c	/^static Node *create_entry(const char __user *buffer, size_t count)$/;"	f	file:
create_flat_tables	fs/binfmt_flat.c	/^static unsigned long create_flat_tables($/;"	f	file:
create_hash_tables	kernel/profile.c	/^static int create_hash_tables(void)$/;"	f	file:
create_hash_tables	kernel/profile.c	608;"	d	file:
create_kmalloc_cache	mm/slub.c	/^static struct kmem_cache *create_kmalloc_cache(struct kmem_cache *s,$/;"	f	file:
create_kthread	kernel/kthread.c	/^static void create_kthread(struct kthread_create_info *create)$/;"	f	file:
create_mnt_ns	fs/namespace.c	/^EXPORT_SYMBOL(create_mnt_ns);$/;"	v
create_mnt_ns	fs/namespace.c	/^struct mnt_namespace *create_mnt_ns(struct vfsmount *mnt)$/;"	f
create_new_namespaces	kernel/nsproxy.c	/^static struct nsproxy *create_new_namespaces(unsigned long flags,$/;"	f	file:
create_nsproxy	kernel/nsproxy.c	/^static inline struct nsproxy *create_nsproxy(void)$/;"	f	file:
create_object	mm/kmemleak.c	/^static struct kmemleak_object *create_object(unsigned long ptr, size_t size,$/;"	f	file:
create_pid_cachep	kernel/pid_namespace.c	/^static struct kmem_cache *create_pid_cachep(int nr_ids)$/;"	f	file:
create_pid_namespace	kernel/pid_namespace.c	/^static struct pid_namespace *create_pid_namespace(struct pid_namespace *parent_pid_ns)$/;"	f	file:
create_proc_profile	kernel/profile.c	/^int __ref create_proc_profile(void) \/* false positive from hotcpu_notifier *\/$/;"	f
create_proc_profile	kernel/profile.c	/^module_init(create_proc_profile);$/;"	v
create_prof_cpu_mask	kernel/profile.c	/^void create_prof_cpu_mask(struct proc_dir_entry *root_irq_dir)$/;"	f
create_read_pipe	fs/pipe.c	/^struct file *create_read_pipe(struct file *wrf, int flags)$/;"	f
create_som_tables	fs/binfmt_som.c	/^static void create_som_tables(struct linux_binprm *bprm)$/;"	f	file:
create_unique_id	mm/slub.c	/^static char *create_unique_id(struct kmem_cache *s)$/;"	f	file:
create_user_ns	kernel/user_namespace.c	/^int create_user_ns(struct cred *new)$/;"	f
create_uts_ns	kernel/utsname.c	/^static struct uts_namespace *create_uts_ns(void)$/;"	f	file:
create_workqueue_thread	kernel/workqueue.c	/^static int create_workqueue_thread(struct cpu_workqueue_struct *cwq, int cpu)$/;"	f	file:
create_write_pipe	fs/pipe.c	/^struct file *create_write_pipe(int flags)$/;"	f
cred	kernel/kmod.c	/^	struct cred *cred;$/;"	m	struct:subprocess_info	typeref:struct:subprocess_info::cred	file:
cred_alloc_blank	kernel/cred.c	/^struct cred *cred_alloc_blank(void)$/;"	f
cred_init	kernel/cred.c	/^void __init cred_init(void)$/;"	f
cred_jar	kernel/cred.c	/^static struct kmem_cache *cred_jar;$/;"	v	typeref:struct:kmem_cache	file:
creds_are_invalid	kernel/cred.c	/^EXPORT_SYMBOL(creds_are_invalid);$/;"	v
creds_are_invalid	kernel/cred.c	/^bool creds_are_invalid(const struct cred *cred)$/;"	f
csd	kernel/smp.c	/^	struct call_single_data	csd;$/;"	m	struct:call_function_data	typeref:struct:call_function_data::call_single_data	file:
csd_lock	kernel/smp.c	/^static void csd_lock(struct call_single_data *data)$/;"	f	file:
csd_lock_wait	kernel/smp.c	/^static void csd_lock_wait(struct call_single_data *data)$/;"	f	file:
csd_unlock	kernel/smp.c	/^static void csd_unlock(struct call_single_data *data)$/;"	f	file:
css	kernel/cgroup.c	/^	struct cgroup_subsys_state *css;$/;"	m	struct:css_id	typeref:struct:css_id::cgroup_subsys_state	file:
css	kernel/cgroup_freezer.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:freezer	typeref:struct:freezer::cgroup_subsys_state	file:
css	kernel/cpuset.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:cpuset	typeref:struct:cpuset::cgroup_subsys_state	file:
css	kernel/ns_cgroup.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:ns_cgroup	typeref:struct:ns_cgroup::cgroup_subsys_state	file:
css	kernel/sched.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:cpuacct	typeref:struct:cpuacct::cgroup_subsys_state	file:
css	kernel/sched.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:task_group	typeref:struct:task_group::cgroup_subsys_state	file:
css	mm/memcontrol.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::cgroup_subsys_state	file:
css_depth	kernel/cgroup.c	/^unsigned short css_depth(struct cgroup_subsys_state *css)$/;"	f
css_get_next	kernel/cgroup.c	/^css_get_next(struct cgroup_subsys *ss, int id,$/;"	f
css_id	kernel/cgroup.c	/^struct css_id {$/;"	s	file:
css_id	kernel/cgroup.c	/^unsigned short css_id(struct cgroup_subsys_state *css)$/;"	f
css_is_ancestor	kernel/cgroup.c	/^bool css_is_ancestor(struct cgroup_subsys_state *child,$/;"	f
css_lookup	kernel/cgroup.c	/^struct cgroup_subsys_state *css_lookup(struct cgroup_subsys *ss, int id)$/;"	f
css_set_count	kernel/cgroup.c	/^static int css_set_count;$/;"	v	file:
css_set_hash	kernel/cgroup.c	/^static struct hlist_head *css_set_hash(struct cgroup_subsys_state *css[])$/;"	f	file:
css_set_table	kernel/cgroup.c	/^static struct hlist_head css_set_table[CSS_SET_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
ctime	kernel/auditsc.c	/^	struct timespec	    ctime;      \/* time of syscall entry *\/$/;"	m	struct:audit_context	typeref:struct:audit_context::timespec	file:
ctl_name	kernel/sysctl_binary.c	/^	int			ctl_name;$/;"	m	struct:bin_table	file:
ctor	mm/slob.c	/^	void (*ctor)(void *);$/;"	m	struct:kmem_cache	file:
ctor	mm/slub.c	/^SLAB_ATTR_RO(ctor);$/;"	v
ctor_show	mm/slub.c	/^static ssize_t ctor_show(struct kmem_cache *s, char *buf)$/;"	f	file:
ctrl_alt_del	kernel/sys.c	/^void ctrl_alt_del(void)$/;"	f
ctx	fs/eventpoll.c	/^	void *ctx;$/;"	m	struct:nested_call_node	file:
ctx	kernel/audit.c	/^	struct audit_context *ctx;	\/* NULL or associated context *\/$/;"	m	struct:audit_buffer	typeref:struct:audit_buffer::audit_context	file:
ctx_rcu_free	fs/aio.c	/^static void ctx_rcu_free(struct rcu_head *head)$/;"	f	file:
cur_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops *cur_ops;$/;"	v	typeref:struct:rcu_torture_ops	file:
cur_page	fs/direct-io.c	/^	struct page *cur_page;		\/* The page *\/$/;"	m	struct:dio	typeref:struct:dio::page	file:
cur_page_block	fs/direct-io.c	/^	sector_t cur_page_block;	\/* Where it starts *\/$/;"	m	struct:dio	file:
cur_page_len	fs/direct-io.c	/^	unsigned cur_page_len;		\/* Nr of bytes at cur_page_offset *\/$/;"	m	struct:dio	file:
cur_page_offset	fs/direct-io.c	/^	unsigned cur_page_offset;	\/* Offset into it, in bytes *\/$/;"	m	struct:dio	file:
curr	kernel/sched.c	/^		int curr; \/* highest queued rt task prio *\/$/;"	m	struct:rt_rq::__anon42	file:
curr	kernel/sched.c	/^	struct sched_entity *curr, *next, *last;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::sched_entity	file:
curr	kernel/sched.c	/^	struct task_struct *curr, *idle;$/;"	m	struct:rq	typeref:struct:rq::task_struct	file:
curr_page	fs/direct-io.c	/^	int curr_page;			\/* changes *\/$/;"	m	struct:dio	file:
curr_task	kernel/sched.c	/^struct task_struct *curr_task(int cpu)$/;"	f
curr_user_address	fs/direct-io.c	/^	unsigned long curr_user_address;\/* changes *\/$/;"	m	struct:dio	file:
current_cpuset_is_being_rebound	kernel/cpuset.c	/^int current_cpuset_is_being_rebound(void)$/;"	f
current_css_set_cg_links_read	kernel/cgroup.c	/^static int current_css_set_cg_links_read(struct cgroup *cont,$/;"	f	file:
current_css_set_read	kernel/cgroup.c	/^static u64 current_css_set_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
current_css_set_refcount_read	kernel/cgroup.c	/^static u64 current_css_set_refcount_read(struct cgroup *cont,$/;"	f	file:
current_dir	fs/compat.c	/^	struct compat_linux_dirent __user *current_dir;$/;"	m	struct:compat_getdents_callback	typeref:struct:compat_getdents_callback::__user	file:
current_dir	fs/compat.c	/^	struct linux_dirent64 __user *current_dir;$/;"	m	struct:compat_getdents_callback64	typeref:struct:compat_getdents_callback64::__user	file:
current_dir	fs/readdir.c	/^	struct linux_dirent __user * current_dir;$/;"	m	struct:getdents_callback	typeref:struct:getdents_callback::__user	file:
current_dir	fs/readdir.c	/^	struct linux_dirent64 __user * current_dir;$/;"	m	struct:getdents_callback64	typeref:struct:getdents_callback64::__user	file:
current_fs_time	kernel/time.c	/^EXPORT_SYMBOL(current_fs_time);$/;"	v
current_fs_time	kernel/time.c	/^struct timespec current_fs_time(struct super_block *sb)$/;"	f
current_is_keventd	kernel/workqueue.c	/^int current_is_keventd(void)$/;"	f
current_state	kernel/auditsc.c	/^	enum audit_state    state, current_state;$/;"	m	struct:audit_context	typeref:enum:audit_context::	file:
current_umask	fs/fs_struct.c	/^EXPORT_SYMBOL(current_umask);$/;"	v
current_umask	fs/fs_struct.c	/^int current_umask(void)$/;"	f
current_work	kernel/workqueue.c	/^	struct work_struct *current_work;$/;"	m	struct:cpu_workqueue_struct	typeref:struct:cpu_workqueue_struct::work_struct	file:
current_zonelist_order	mm/page_alloc.c	/^static int current_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
curtail	kernel/rcutiny.c	/^	struct rcu_head **curtail;	\/* ->next pointer of last CB. *\/$/;"	m	struct:rcu_ctrlblk	typeref:struct:rcu_ctrlblk::rcu_head	file:
custom_divisor	fs/compat_ioctl.c	/^        compat_int_t    custom_divisor;$/;"	m	struct:serial_struct32	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_aux_data	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_capset	typeref:struct:audit_aux_data_capset::audit_aux_data	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_execve	typeref:struct:audit_aux_data_execve::audit_aux_data	file:
d	kernel/auditsc.c	/^	struct audit_aux_data	d;$/;"	m	struct:audit_aux_data_pids	typeref:struct:audit_aux_data_pids::audit_aux_data	file:
d_add_ci	fs/dcache.c	/^EXPORT_SYMBOL(d_add_ci);$/;"	v
d_add_ci	fs/dcache.c	/^struct dentry *d_add_ci(struct dentry *dentry, struct inode *inode,$/;"	f
d_alloc	fs/dcache.c	/^EXPORT_SYMBOL(d_alloc);$/;"	v
d_alloc	fs/dcache.c	/^struct dentry *d_alloc(struct dentry * parent, const struct qstr *name)$/;"	f
d_alloc_name	fs/dcache.c	/^EXPORT_SYMBOL(d_alloc_name);$/;"	v
d_alloc_name	fs/dcache.c	/^struct dentry *d_alloc_name(struct dentry *parent, const char *name)$/;"	f
d_alloc_root	fs/dcache.c	/^EXPORT_SYMBOL(d_alloc_root);$/;"	v
d_alloc_root	fs/dcache.c	/^struct dentry * d_alloc_root(struct inode * root_inode)$/;"	f
d_ancestor	fs/dcache.c	/^struct dentry *d_ancestor(struct dentry *p1, struct dentry *p2)$/;"	f
d_callback	fs/dcache.c	/^static void d_callback(struct rcu_head *head)$/;"	f	file:
d_delete	fs/dcache.c	/^EXPORT_SYMBOL(d_delete);$/;"	v
d_delete	fs/dcache.c	/^void d_delete(struct dentry * dentry)$/;"	f
d_find_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_find_alias);$/;"	v
d_find_alias	fs/dcache.c	/^struct dentry * d_find_alias(struct inode *inode)$/;"	f
d_free	fs/dcache.c	/^static void d_free(struct dentry *dentry)$/;"	f	file:
d_genocide	fs/dcache.c	/^EXPORT_SYMBOL(d_genocide);$/;"	v
d_genocide	fs/dcache.c	/^void d_genocide(struct dentry *root)$/;"	f
d_hash	fs/dcache.c	/^static inline struct hlist_head *d_hash(struct dentry *parent,$/;"	f	file:
d_hash_and_lookup	fs/dcache.c	/^struct dentry *d_hash_and_lookup(struct dentry *dir, struct qstr *name)$/;"	f
d_ino	fs/compat.c	/^	compat_ulong_t	d_ino;$/;"	m	struct:compat_linux_dirent	file:
d_ino	fs/compat.c	/^	compat_ulong_t	d_ino;$/;"	m	struct:compat_old_linux_dirent	file:
d_ino	fs/readdir.c	/^	unsigned long	d_ino;$/;"	m	struct:linux_dirent	file:
d_ino	fs/readdir.c	/^	unsigned long	d_ino;$/;"	m	struct:old_linux_dirent	file:
d_instantiate	fs/dcache.c	/^EXPORT_SYMBOL(d_instantiate);$/;"	v
d_instantiate	fs/dcache.c	/^void d_instantiate(struct dentry *entry, struct inode * inode)$/;"	f
d_instantiate_unique	fs/dcache.c	/^EXPORT_SYMBOL(d_instantiate_unique);$/;"	v
d_instantiate_unique	fs/dcache.c	/^struct dentry *d_instantiate_unique(struct dentry *entry, struct inode *inode)$/;"	f
d_invalidate	fs/dcache.c	/^EXPORT_SYMBOL(d_invalidate);$/;"	v
d_invalidate	fs/dcache.c	/^int d_invalidate(struct dentry * dentry)$/;"	f
d_lookup	fs/dcache.c	/^EXPORT_SYMBOL(d_lookup);$/;"	v
d_lookup	fs/dcache.c	/^struct dentry * d_lookup(struct dentry * parent, struct qstr * name)$/;"	f
d_materialise_unique	fs/dcache.c	/^EXPORT_SYMBOL_GPL(d_materialise_unique);$/;"	v
d_materialise_unique	fs/dcache.c	/^struct dentry *d_materialise_unique(struct dentry *dentry, struct inode *inode)$/;"	f
d_move	fs/dcache.c	/^EXPORT_SYMBOL(d_move);$/;"	v
d_move	fs/dcache.c	/^void d_move(struct dentry * dentry, struct dentry * target)$/;"	f
d_move_locked	fs/dcache.c	/^static void d_move_locked(struct dentry * dentry, struct dentry * target)$/;"	f	file:
d_name	fs/compat.c	/^	char		d_name[1];$/;"	m	struct:compat_linux_dirent	file:
d_name	fs/compat.c	/^	char		d_name[1];$/;"	m	struct:compat_old_linux_dirent	file:
d_name	fs/readdir.c	/^	char		d_name[1];$/;"	m	struct:linux_dirent	file:
d_name	fs/readdir.c	/^	char		d_name[1];$/;"	m	struct:old_linux_dirent	file:
d_namlen	fs/compat.c	/^	unsigned short	d_namlen;$/;"	m	struct:compat_old_linux_dirent	file:
d_namlen	fs/readdir.c	/^	unsigned short	d_namlen;$/;"	m	struct:old_linux_dirent	file:
d_obtain_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_obtain_alias);$/;"	v
d_obtain_alias	fs/dcache.c	/^struct dentry *d_obtain_alias(struct inode *inode)$/;"	f
d_off	fs/compat.c	/^	compat_ulong_t	d_off;$/;"	m	struct:compat_linux_dirent	file:
d_off	fs/readdir.c	/^	unsigned long	d_off;$/;"	m	struct:linux_dirent	file:
d_offset	fs/compat.c	/^	compat_ulong_t	d_offset;$/;"	m	struct:compat_old_linux_dirent	file:
d_offset	fs/readdir.c	/^	unsigned long	d_offset;$/;"	m	struct:old_linux_dirent	file:
d_path	fs/dcache.c	/^EXPORT_SYMBOL(d_path);$/;"	v
d_path	fs/dcache.c	/^char *d_path(const struct path *path, char *buf, int buflen)$/;"	f
d_prune_aliases	fs/dcache.c	/^EXPORT_SYMBOL(d_prune_aliases);$/;"	v
d_prune_aliases	fs/dcache.c	/^void d_prune_aliases(struct inode *inode)$/;"	f
d_reclen	fs/compat.c	/^	unsigned short	d_reclen;$/;"	m	struct:compat_linux_dirent	file:
d_reclen	fs/readdir.c	/^	unsigned short	d_reclen;$/;"	m	struct:linux_dirent	file:
d_rehash	fs/dcache.c	/^EXPORT_SYMBOL(d_rehash);$/;"	v
d_rehash	fs/dcache.c	/^void d_rehash(struct dentry * entry)$/;"	f
d_splice_alias	fs/dcache.c	/^EXPORT_SYMBOL(d_splice_alias);$/;"	v
d_splice_alias	fs/dcache.c	/^struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry)$/;"	f
d_validate	fs/dcache.c	/^EXPORT_SYMBOL(d_validate);$/;"	v
d_validate	fs/dcache.c	/^int d_validate(struct dentry *dentry, struct dentry *dparent)$/;"	f
daemonize	kernel/exit.c	/^EXPORT_SYMBOL(daemonize);$/;"	v
daemonize	kernel/exit.c	/^void daemonize(const char *name, ...)$/;"	f
daemonize_fs_struct	fs/fs_struct.c	/^void daemonize_fs_struct(void)$/;"	f
dash2underscore	kernel/params.c	/^static inline char dash2underscore(char c)$/;"	f	file:
data	fs/binfmt_elf.c	/^	void *data;$/;"	m	struct:memelfnote	file:
data	fs/binfmt_elf_fdpic.c	/^	void *data;$/;"	m	struct:memelfnote	file:
data	fs/compat.c	/^	compat_uptr_t data;$/;"	m	struct:compat_nfs_string	file:
data	fs/compat_ioctl.c	/^	compat_caddr_t data; \/* union i2c_smbus_data *data *\/$/;"	m	struct:i2c_smbus_ioctl_data32	file:
data	fs/libfs.c	/^	void *data;$/;"	m	struct:simple_attr	file:
data	kernel/async.c	/^	void             *data;$/;"	m	struct:async_entry	file:
data	kernel/kthread.c	/^	void *data;$/;"	m	struct:kthread_create_info	file:
data	kernel/stop_machine.c	/^	void *data;$/;"	m	struct:stop_machine_data	file:
datasz	fs/binfmt_elf.c	/^	unsigned int datasz;$/;"	m	struct:memelfnote	file:
datasz	fs/binfmt_elf_fdpic.c	/^	unsigned int datasz;$/;"	m	struct:memelfnote	file:
dattr_cur	kernel/sched.c	/^static struct sched_domain_attr *dattr_cur;$/;"	v	typeref:struct:sched_domain_attr	file:
dattrs_equal	kernel/sched.c	/^static int dattrs_equal(struct sched_domain_attr *cur, int idx_cur,$/;"	f	file:
dbg_redzone1	mm/slab.c	/^static unsigned long long *dbg_redzone1(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_redzone1	mm/slab.c	487;"	d	file:
dbg_redzone2	mm/slab.c	/^static unsigned long long *dbg_redzone2(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_redzone2	mm/slab.c	488;"	d	file:
dbg_release_bp_slot	kernel/hw_breakpoint.c	/^int dbg_release_bp_slot(struct perf_event *bp)$/;"	f
dbg_reserve_bp_slot	kernel/hw_breakpoint.c	/^int dbg_reserve_bp_slot(struct perf_event *bp)$/;"	f
dbg_userword	mm/slab.c	/^static void **dbg_userword(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_userword	mm/slab.c	489;"	d	file:
dcache_dir_close	fs/libfs.c	/^EXPORT_SYMBOL(dcache_dir_close);$/;"	v
dcache_dir_close	fs/libfs.c	/^int dcache_dir_close(struct inode *inode, struct file *file)$/;"	f
dcache_dir_lseek	fs/libfs.c	/^EXPORT_SYMBOL(dcache_dir_lseek);$/;"	v
dcache_dir_lseek	fs/libfs.c	/^loff_t dcache_dir_lseek(struct file *file, loff_t offset, int origin)$/;"	f
dcache_dir_open	fs/libfs.c	/^EXPORT_SYMBOL(dcache_dir_open);$/;"	v
dcache_dir_open	fs/libfs.c	/^int dcache_dir_open(struct inode *inode, struct file *file)$/;"	f
dcache_init	fs/dcache.c	/^static void __init dcache_init(void)$/;"	f	file:
dcache_init_early	fs/dcache.c	/^static void __init dcache_init_early(void)$/;"	f	file:
dcache_lock	fs/dcache.c	/^EXPORT_SYMBOL(dcache_lock);$/;"	v
dcache_readdir	fs/libfs.c	/^EXPORT_SYMBOL(dcache_readdir);$/;"	v
dcache_readdir	fs/libfs.c	/^int dcache_readdir(struct file * filp, void * dirent, filldir_t filldir)$/;"	f
dcache_shrinker	fs/dcache.c	/^static struct shrinker dcache_shrinker = {$/;"	v	typeref:struct:shrinker	file:
dcookie_exit	fs/dcookies.c	/^static void dcookie_exit(void)$/;"	f	file:
dcookie_hash	fs/dcookies.c	/^static size_t dcookie_hash(unsigned long dcookie)$/;"	f	file:
dcookie_init	fs/dcookies.c	/^static int dcookie_init(void)$/;"	f	file:
dcookie_register	fs/dcookies.c	/^EXPORT_SYMBOL_GPL(dcookie_register);$/;"	v
dcookie_register	fs/dcookies.c	/^struct dcookie_user * dcookie_register(void)$/;"	f
dcookie_struct	fs/dcookies.c	/^struct dcookie_struct {$/;"	s	file:
dcookie_unregister	fs/dcookies.c	/^EXPORT_SYMBOL_GPL(dcookie_unregister);$/;"	v
dcookie_unregister	fs/dcookies.c	/^void dcookie_unregister(struct dcookie_user * user)$/;"	f
dcookie_user	fs/dcookies.c	/^struct dcookie_user {$/;"	s	file:
dcookie_value	fs/dcookies.c	/^static inline unsigned long dcookie_value(struct dcookie_struct * dcs)$/;"	f	file:
de_thread	fs/exec.c	/^static int de_thread(struct task_struct *tsk)$/;"	f	file:
deactivate_locked_super	fs/super.c	/^EXPORT_SYMBOL(deactivate_locked_super);$/;"	v
deactivate_locked_super	fs/super.c	/^void deactivate_locked_super(struct super_block *s)$/;"	f
deactivate_slab	mm/slub.c	/^static void deactivate_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)$/;"	f	file:
deactivate_super	fs/super.c	/^EXPORT_SYMBOL(deactivate_super);$/;"	v
deactivate_super	fs/super.c	/^void deactivate_super(struct super_block *s)$/;"	f
deactivate_task	kernel/sched.c	/^static void deactivate_task(struct rq *rq, struct task_struct *p, int sleep)$/;"	f	file:
dead	kernel/audit_tree.c	/^	int dead;$/;"	m	struct:audit_chunk	file:
deadlock_lock	kernel/rtmutex_common.h	/^	struct rt_mutex		*deadlock_lock;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::rt_mutex
deadlock_task_pid	kernel/rtmutex_common.h	/^	struct pid		*deadlock_task_pid;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::pid
debug_activate	kernel/hrtimer.c	/^static inline void debug_activate(struct hrtimer *timer)$/;"	f	file:
debug_activate	kernel/timer.c	/^debug_activate(struct timer_list *timer, unsigned long expires)$/;"	f	file:
debug_atomic_dec	kernel/lockdep_internals.h	134;"	d
debug_atomic_dec	kernel/lockdep_internals.h	138;"	d
debug_atomic_inc	kernel/lockdep_internals.h	133;"	d
debug_atomic_inc	kernel/lockdep_internals.h	137;"	d
debug_atomic_read	kernel/lockdep_internals.h	135;"	d
debug_atomic_read	kernel/lockdep_internals.h	139;"	d
debug_check_no_locks_freed	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(debug_check_no_locks_freed);$/;"	v
debug_check_no_locks_freed	kernel/lockdep.c	/^void debug_check_no_locks_freed(const void *mem_from, unsigned long mem_len)$/;"	f
debug_check_no_locks_held	kernel/lockdep.c	/^void debug_check_no_locks_held(struct task_struct *task)$/;"	f
debug_create	kernel/cgroup.c	/^static struct cgroup_subsys_state *debug_create(struct cgroup_subsys *ss,$/;"	f	file:
debug_deactivate	kernel/hrtimer.c	/^static inline void debug_deactivate(struct hrtimer *timer)$/;"	f	file:
debug_deactivate	kernel/timer.c	/^static inline void debug_deactivate(struct timer_list *timer)$/;"	f	file:
debug_destroy	kernel/cgroup.c	/^static void debug_destroy(struct cgroup_subsys *ss, struct cgroup *cont)$/;"	f	file:
debug_files	kernel/cgroup.c	/^static struct cftype debug_files[] =  {$/;"	v	typeref:struct:cftype	file:
debug_hrtimer_activate	kernel/hrtimer.c	/^static inline void debug_hrtimer_activate(struct hrtimer *timer) { }$/;"	f	file:
debug_hrtimer_activate	kernel/hrtimer.c	/^static inline void debug_hrtimer_activate(struct hrtimer *timer)$/;"	f	file:
debug_hrtimer_deactivate	kernel/hrtimer.c	/^static inline void debug_hrtimer_deactivate(struct hrtimer *timer) { }$/;"	f	file:
debug_hrtimer_deactivate	kernel/hrtimer.c	/^static inline void debug_hrtimer_deactivate(struct hrtimer *timer)$/;"	f	file:
debug_hrtimer_free	kernel/hrtimer.c	/^static inline void debug_hrtimer_free(struct hrtimer *timer)$/;"	f	file:
debug_hrtimer_init	kernel/hrtimer.c	/^static inline void debug_hrtimer_init(struct hrtimer *timer) { }$/;"	f	file:
debug_hrtimer_init	kernel/hrtimer.c	/^static inline void debug_hrtimer_init(struct hrtimer *timer)$/;"	f	file:
debug_init	kernel/hrtimer.c	/^debug_init(struct hrtimer *timer, clockid_t clockid,$/;"	f	file:
debug_init	kernel/timer.c	/^static inline void debug_init(struct timer_list *timer)$/;"	f	file:
debug_kmap_atomic	mm/highmem.c	/^void debug_kmap_atomic(enum km_type type)$/;"	f
debug_locks_off_graph_unlock	kernel/lockdep.c	/^static inline int debug_locks_off_graph_unlock(void)$/;"	f	file:
debug_mutex_add_waiter	kernel/mutex-debug.c	/^void debug_mutex_add_waiter(struct mutex *lock, struct mutex_waiter *waiter,$/;"	f
debug_mutex_add_waiter	kernel/mutex.h	41;"	d
debug_mutex_free_waiter	kernel/mutex-debug.c	/^void debug_mutex_free_waiter(struct mutex_waiter *waiter)$/;"	f
debug_mutex_free_waiter	kernel/mutex.h	40;"	d
debug_mutex_init	kernel/mutex-debug.c	/^void debug_mutex_init(struct mutex *lock, const char *name,$/;"	f
debug_mutex_init	kernel/mutex.h	43;"	d
debug_mutex_lock_common	kernel/mutex-debug.c	/^void debug_mutex_lock_common(struct mutex *lock, struct mutex_waiter *waiter)$/;"	f
debug_mutex_lock_common	kernel/mutex.h	/^debug_mutex_lock_common(struct mutex *lock, struct mutex_waiter *waiter)$/;"	f
debug_mutex_unlock	kernel/mutex-debug.c	/^void debug_mutex_unlock(struct mutex *lock)$/;"	f
debug_mutex_unlock	kernel/mutex.h	42;"	d
debug_mutex_wake_waiter	kernel/mutex-debug.c	/^void debug_mutex_wake_waiter(struct mutex *lock, struct mutex_waiter *waiter)$/;"	f
debug_mutex_wake_waiter	kernel/mutex.h	39;"	d
debug_populate	kernel/cgroup.c	/^static int debug_populate(struct cgroup_subsys *ss, struct cgroup *cont)$/;"	f	file:
debug_print_probes	kernel/tracepoint.c	/^static void debug_print_probes(struct tracepoint_entry *entry)$/;"	f	file:
debug_rt_mutex_deadlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_deadlock(int detect, struct rt_mutex_waiter *act_waiter,$/;"	f
debug_rt_mutex_deadlock	kernel/rtmutex.h	23;"	d
debug_rt_mutex_detect_deadlock	kernel/rtmutex-debug.h	/^static inline int debug_rt_mutex_detect_deadlock(struct rt_mutex_waiter *waiter,$/;"	f
debug_rt_mutex_detect_deadlock	kernel/rtmutex.h	25;"	d
debug_rt_mutex_free_waiter	kernel/rtmutex-debug.c	/^void debug_rt_mutex_free_waiter(struct rt_mutex_waiter *waiter)$/;"	f
debug_rt_mutex_free_waiter	kernel/rtmutex.h	17;"	d
debug_rt_mutex_init	kernel/rtmutex-debug.c	/^void debug_rt_mutex_init(struct rt_mutex *lock, const char *name)$/;"	f
debug_rt_mutex_init	kernel/rtmutex.h	22;"	d
debug_rt_mutex_init_waiter	kernel/rtmutex-debug.c	/^void debug_rt_mutex_init_waiter(struct rt_mutex_waiter *waiter)$/;"	f
debug_rt_mutex_init_waiter	kernel/rtmutex.h	16;"	d
debug_rt_mutex_lock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_lock(struct rt_mutex *lock)$/;"	f
debug_rt_mutex_lock	kernel/rtmutex.h	18;"	d
debug_rt_mutex_print_deadlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_print_deadlock(struct rt_mutex_waiter *waiter)$/;"	f
debug_rt_mutex_print_deadlock	kernel/rtmutex.h	24;"	d
debug_rt_mutex_proxy_lock	kernel/rtmutex-debug.c	/^debug_rt_mutex_proxy_lock(struct rt_mutex *lock, struct task_struct *powner)$/;"	f
debug_rt_mutex_proxy_lock	kernel/rtmutex.h	19;"	d
debug_rt_mutex_proxy_unlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_proxy_unlock(struct rt_mutex *lock)$/;"	f
debug_rt_mutex_proxy_unlock	kernel/rtmutex.h	20;"	d
debug_rt_mutex_reset_waiter	kernel/rtmutex-debug.h	26;"	d
debug_rt_mutex_reset_waiter	kernel/rtmutex.h	26;"	d
debug_rt_mutex_unlock	kernel/rtmutex-debug.c	/^void debug_rt_mutex_unlock(struct rt_mutex *lock)$/;"	f
debug_rt_mutex_unlock	kernel/rtmutex.h	21;"	d
debug_show_all_locks	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(debug_show_all_locks);$/;"	v
debug_show_all_locks	kernel/lockdep.c	/^void debug_show_all_locks(void)$/;"	f
debug_show_held_locks	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(debug_show_held_locks);$/;"	v
debug_show_held_locks	kernel/lockdep.c	/^void debug_show_held_locks(struct task_struct *task)$/;"	f
debug_subsys	kernel/cgroup.c	/^struct cgroup_subsys debug_subsys = {$/;"	v	typeref:struct:cgroup_subsys
debug_table	kernel/sysctl.c	/^static struct ctl_table debug_table[] = {$/;"	v	typeref:struct:ctl_table	file:
debug_table	kernel/sysctl.c	/^static struct ctl_table debug_table[];$/;"	v	typeref:struct:ctl_table	file:
debug_taskcount_read	kernel/cgroup.c	/^static u64 debug_taskcount_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
debug_timer_activate	kernel/timer.c	/^static inline void debug_timer_activate(struct timer_list *timer) { }$/;"	f	file:
debug_timer_activate	kernel/timer.c	/^static inline void debug_timer_activate(struct timer_list *timer)$/;"	f	file:
debug_timer_deactivate	kernel/timer.c	/^static inline void debug_timer_deactivate(struct timer_list *timer) { }$/;"	f	file:
debug_timer_deactivate	kernel/timer.c	/^static inline void debug_timer_deactivate(struct timer_list *timer)$/;"	f	file:
debug_timer_free	kernel/timer.c	/^static inline void debug_timer_free(struct timer_list *timer)$/;"	f	file:
debug_timer_init	kernel/timer.c	/^static inline void debug_timer_init(struct timer_list *timer) { }$/;"	f	file:
debug_timer_init	kernel/timer.c	/^static inline void debug_timer_init(struct timer_list *timer)$/;"	f	file:
debug_work_activate	kernel/workqueue.c	/^static inline void debug_work_activate(struct work_struct *work) { }$/;"	f	file:
debug_work_activate	kernel/workqueue.c	/^static inline void debug_work_activate(struct work_struct *work)$/;"	f	file:
debug_work_deactivate	kernel/workqueue.c	/^static inline void debug_work_deactivate(struct work_struct *work) { }$/;"	f	file:
debug_work_deactivate	kernel/workqueue.c	/^static inline void debug_work_deactivate(struct work_struct *work)$/;"	f	file:
debugfs_kprobe_init	kernel/kprobes.c	/^late_initcall(debugfs_kprobe_init);$/;"	v
debugfs_kprobe_init	kernel/kprobes.c	/^static int __kprobes debugfs_kprobe_init(void)$/;"	f	file:
debugfs_kprobes_operations	kernel/kprobes.c	/^static const struct file_operations debugfs_kprobes_operations = {$/;"	v	typeref:struct:file_operations	file:
debuggerinfo	kernel/kgdb.c	/^	void			*debuggerinfo;$/;"	m	struct:debuggerinfo_struct	file:
debuggerinfo_struct	kernel/kgdb.c	/^static struct debuggerinfo_struct {$/;"	s	file:
dec_cpu_load	kernel/sched.c	/^static inline void dec_cpu_load(struct rq *rq, unsigned long load)$/;"	f	file:
dec_mnt_writers	fs/namespace.c	/^static inline void dec_mnt_writers(struct vfsmount *mnt)$/;"	f	file:
dec_nr_running	kernel/sched.c	/^static void dec_nr_running(struct rq *rq)$/;"	f	file:
dec_rt_group	kernel/sched_rt.c	/^dec_rt_group(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
dec_rt_group	kernel/sched_rt.c	/^void dec_rt_group(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq) {}$/;"	f	file:
dec_rt_migration	kernel/sched_rt.c	/^static void dec_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
dec_rt_migration	kernel/sched_rt.c	/^void dec_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
dec_rt_prio	kernel/sched_rt.c	/^dec_rt_prio(struct rt_rq *rt_rq, int prio)$/;"	f	file:
dec_rt_prio	kernel/sched_rt.c	/^static inline void dec_rt_prio(struct rt_rq *rt_rq, int prio) {}$/;"	f	file:
dec_rt_prio_smp	kernel/sched_rt.c	/^dec_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)$/;"	f	file:
dec_rt_prio_smp	kernel/sched_rt.c	/^void dec_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio) {}$/;"	f	file:
dec_rt_tasks	kernel/sched_rt.c	/^void dec_rt_tasks(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
dec_slabs_node	mm/slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s, int node, int objects)$/;"	f	file:
dec_slabs_node	mm/slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s, int node,$/;"	f	file:
dec_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(dec_zone_page_state);$/;"	v
dec_zone_page_state	mm/vmstat.c	/^void dec_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
decompress_exec	fs/binfmt_flat.c	/^static int decompress_exec($/;"	f	file:
decrement_hugepage_resv_vma	mm/hugetlb.c	/^static void decrement_hugepage_resv_vma(struct hstate *h,$/;"	f	file:
def_blk_aops	fs/block_dev.c	/^static const struct address_space_operations def_blk_aops = {$/;"	v	typeref:struct:address_space_operations	file:
def_blk_aops	fs/block_dev.c	/^static const struct address_space_operations def_blk_aops;$/;"	v	typeref:struct:address_space_operations	file:
def_blk_fops	fs/block_dev.c	/^const struct file_operations def_blk_fops = {$/;"	v	typeref:struct:file_operations
def_blk_fops	fs/no-block.c	/^const struct file_operations def_blk_fops = {$/;"	v	typeref:struct:file_operations
def_chr_fops	fs/char_dev.c	/^const struct file_operations def_chr_fops = {$/;"	v	typeref:struct:file_operations
def_fifo_fops	fs/fifo.c	/^const struct file_operations def_fifo_fops = {$/;"	v	typeref:struct:file_operations
def_root_domain	kernel/sched.c	/^static struct root_domain def_root_domain;$/;"	v	typeref:struct:root_domain	file:
def_rt_bandwidth	kernel/sched.c	/^static struct rt_bandwidth def_rt_bandwidth;$/;"	v	typeref:struct:rt_bandwidth	file:
default_backing_dev_info	mm/backing-dev.c	/^EXPORT_SYMBOL_GPL(default_backing_dev_info);$/;"	v
default_backing_dev_info	mm/backing-dev.c	/^struct backing_dev_info default_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info
default_bdi_init	mm/backing-dev.c	/^static int __init default_bdi_init(void)$/;"	f	file:
default_bdi_init	mm/backing-dev.c	/^subsys_initcall(default_bdi_init);$/;"	v
default_channel_callbacks	kernel/relay.c	/^static struct rchan_callbacks default_channel_callbacks = {$/;"	v	typeref:struct:rchan_callbacks	file:
default_dump_filter	kernel/fork.c	/^static unsigned long default_dump_filter = MMF_DUMP_FILTER_DEFAULT;$/;"	v	file:
default_exec_domain	kernel/exec_domain.c	/^struct exec_domain default_exec_domain = {$/;"	v	typeref:struct:exec_domain
default_file_splice_read	fs/splice.c	/^EXPORT_SYMBOL(default_file_splice_read);$/;"	v
default_file_splice_read	fs/splice.c	/^ssize_t default_file_splice_read(struct file *in, loff_t *ppos,$/;"	f
default_file_splice_write	fs/splice.c	/^static ssize_t default_file_splice_write(struct pipe_inode_info *pipe,$/;"	f	file:
default_handler	kernel/exec_domain.c	/^default_handler(int segment, struct pt_regs *regp)$/;"	f	file:
default_hstate_idx	mm/hugetlb.c	/^unsigned int default_hstate_idx;$/;"	v
default_hstate_max_huge_pages	mm/hugetlb.c	/^static unsigned long __initdata default_hstate_max_huge_pages;$/;"	v	file:
default_hstate_size	mm/hugetlb.c	/^static unsigned long __initdata default_hstate_size;$/;"	v	file:
default_llseek	fs/read_write.c	/^EXPORT_SYMBOL(default_llseek);$/;"	v
default_llseek	fs/read_write.c	/^loff_t default_llseek(struct file *file, loff_t offset, int origin)$/;"	f
default_pipe_buf_ops	fs/splice.c	/^static const struct pipe_buf_operations default_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
default_policy	mm/mempolicy.c	/^struct mempolicy default_policy = {$/;"	v	typeref:struct:mempolicy
default_relax_domain_level	kernel/sched.c	/^static int default_relax_domain_level = -1;$/;"	v	file:
default_scale_freq_power	kernel/sched.c	/^unsigned long default_scale_freq_power(struct sched_domain *sd, int cpu)$/;"	f
default_scale_smt_power	kernel/sched.c	/^unsigned long default_scale_smt_power(struct sched_domain *sd, int cpu)$/;"	f
default_unplug_io_fn	mm/backing-dev.c	/^EXPORT_SYMBOL(default_unplug_io_fn);$/;"	v
default_unplug_io_fn	mm/backing-dev.c	/^void default_unplug_io_fn(struct backing_dev_info *bdi, struct page *page)$/;"	f
default_value	kernel/pm_qos_params.c	/^	s32 default_value;$/;"	m	struct:pm_qos_object	file:
default_wake_function	kernel/sched.c	/^EXPORT_SYMBOL(default_wake_function);$/;"	v
default_wake_function	kernel/sched.c	/^int default_wake_function(wait_queue_t *curr, unsigned mode, int wake_flags,$/;"	f
default_zonelist_order	mm/page_alloc.c	/^static int default_zonelist_order(void)$/;"	f	file:
deferred_cad	kernel/sys.c	/^static void deferred_cad(struct work_struct *dummy)$/;"	f	file:
deferred_free	kernel/rcutorture.c	/^	void (*deferred_free)(struct rcu_torture *p);$/;"	m	struct:rcu_torture_ops	file:
del_bd_holder	fs/block_dev.c	/^static struct bd_holder *del_bd_holder(struct block_device *bdev,$/;"	f	file:
del_symlink	fs/block_dev.c	/^static void del_symlink(struct kobject *from, struct kobject *to)$/;"	f	file:
del_timer	kernel/timer.c	/^EXPORT_SYMBOL(del_timer);$/;"	v
del_timer	kernel/timer.c	/^int del_timer(struct timer_list *timer)$/;"	f
del_timer_sync	kernel/timer.c	/^EXPORT_SYMBOL(del_timer_sync);$/;"	v
del_timer_sync	kernel/timer.c	/^int del_timer_sync(struct timer_list *timer)$/;"	f
del_total	mm/swap_state.c	/^	unsigned long del_total;$/;"	m	struct:__anon11	file:
delayacct_cache	kernel/delayacct.c	/^struct kmem_cache *delayacct_cache;$/;"	v	typeref:struct:kmem_cache
delayacct_end	kernel/delayacct.c	/^static void delayacct_end(struct timespec *start, struct timespec *end,$/;"	f	file:
delayacct_init	kernel/delayacct.c	/^void delayacct_init(void)$/;"	f
delayacct_setup_disable	kernel/delayacct.c	/^static int __init delayacct_setup_disable(char *str)$/;"	f	file:
delayacct_start	kernel/delayacct.c	/^static inline void delayacct_start(struct timespec *start)$/;"	f	file:
delayed_put_pid	kernel/pid.c	/^static void delayed_put_pid(struct rcu_head *rhp)$/;"	f	file:
delayed_put_task_struct	kernel/exit.c	/^static void delayed_put_task_struct(struct rcu_head *rhp)$/;"	f	file:
delayed_slow_work_enqueue	kernel/slow-work.c	/^EXPORT_SYMBOL(delayed_slow_work_enqueue);$/;"	v
delayed_slow_work_enqueue	kernel/slow-work.c	/^int delayed_slow_work_enqueue(struct delayed_slow_work *dwork,$/;"	f
delayed_slow_work_timer	kernel/slow-work.c	/^static void delayed_slow_work_timer(unsigned long data)$/;"	f	file:
delayed_work_timer_fn	kernel/workqueue.c	/^static void delayed_work_timer_fn(unsigned long __data)$/;"	f	file:
delete_from_lru_cache	mm/memory-failure.c	/^static int delete_from_lru_cache(struct page *p)$/;"	f	file:
delete_from_swap_cache	mm/swap_state.c	/^void delete_from_swap_cache(struct page *page)$/;"	f
delete_nommu_region	mm/nommu.c	/^static void delete_nommu_region(struct vm_region *region)$/;"	f	file:
delete_object_full	mm/kmemleak.c	/^static void delete_object_full(unsigned long ptr)$/;"	f	file:
delete_object_part	mm/kmemleak.c	/^static void delete_object_part(unsigned long ptr, size_t size)$/;"	f	file:
delete_vma	mm/nommu.c	/^static void delete_vma(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
delete_vma_from_mm	mm/nommu.c	/^static void delete_vma_from_mm(struct vm_area_struct *vma)$/;"	f	file:
dentry	fs/binfmt_misc.c	/^	struct dentry *dentry;$/;"	m	struct:__anon16	typeref:struct:__anon16::dentry	file:
dentry	kernel/relay.c	/^	struct dentry *dentry;$/;"	m	struct:rchan_percpu_buf_dispatcher	typeref:struct:rchan_percpu_buf_dispatcher::dentry	file:
dentry_lru_add	fs/dcache.c	/^static void dentry_lru_add(struct dentry *dentry)$/;"	f	file:
dentry_lru_add_tail	fs/dcache.c	/^static void dentry_lru_add_tail(struct dentry *dentry)$/;"	f	file:
dentry_lru_del	fs/dcache.c	/^static void dentry_lru_del(struct dentry *dentry)$/;"	f	file:
dentry_lru_del_init	fs/dcache.c	/^static void dentry_lru_del_init(struct dentry *dentry)$/;"	f	file:
dentry_open	fs/open.c	/^EXPORT_SYMBOL(dentry_open);$/;"	v
dentry_open	fs/open.c	/^struct file *dentry_open(struct dentry *dentry, struct vfsmount *mnt, int flags,$/;"	f
dentry_path	fs/dcache.c	/^char *dentry_path(struct dentry *dentry, char *buf, int buflen)$/;"	f
dentry_stat	fs/dcache.c	/^struct dentry_stat_t dentry_stat = {$/;"	v	typeref:struct:dentry_stat_t
dentry_unhash	fs/namei.c	/^EXPORT_SYMBOL(dentry_unhash);$/;"	v
dentry_unhash	fs/namei.c	/^void dentry_unhash(struct dentry *dentry)$/;"	f
deny_write_access	fs/namei.c	/^int deny_write_access(struct file * file)$/;"	f
deprecated_sysctl_warning	kernel/sysctl_binary.c	/^static void deprecated_sysctl_warning(const int *name, int nlen)$/;"	f	file:
depth	kernel/cgroup.c	/^	unsigned short depth;$/;"	m	struct:css_id	file:
depth_se	kernel/sched_fair.c	/^static inline int depth_se(struct sched_entity *se)$/;"	f	file:
dequeue_entity	kernel/sched_fair.c	/^dequeue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int sleep)$/;"	f	file:
dequeue_huge_page_vma	mm/hugetlb.c	/^static struct page *dequeue_huge_page_vma(struct hstate *h,$/;"	f	file:
dequeue_pushable_task	kernel/sched_rt.c	/^static inline void dequeue_pushable_task(struct rq *rq, struct task_struct *p)$/;"	f	file:
dequeue_pushable_task	kernel/sched_rt.c	/^static void dequeue_pushable_task(struct rq *rq, struct task_struct *p)$/;"	f	file:
dequeue_rt_entity	kernel/sched_rt.c	/^static void dequeue_rt_entity(struct sched_rt_entity *rt_se)$/;"	f	file:
dequeue_rt_stack	kernel/sched_rt.c	/^static void dequeue_rt_stack(struct sched_rt_entity *rt_se)$/;"	f	file:
dequeue_signal	kernel/signal.c	/^EXPORT_SYMBOL_GPL(dequeue_signal);$/;"	v
dequeue_signal	kernel/signal.c	/^int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info)$/;"	f
dequeue_task	kernel/sched.c	/^static void dequeue_task(struct rq *rq, struct task_struct *p, int sleep)$/;"	f	file:
dequeue_task_fair	kernel/sched_fair.c	/^static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int sleep)$/;"	f	file:
dequeue_task_idle	kernel/sched_idletask.c	/^dequeue_task_idle(struct rq *rq, struct task_struct *p, int sleep)$/;"	f	file:
dequeue_task_rt	kernel/sched_rt.c	/^static void dequeue_task_rt(struct rq *rq, struct task_struct *p, int sleep)$/;"	f	file:
dest_cpu	kernel/sched.c	/^	int dest_cpu;$/;"	m	struct:migration_req	file:
destroy_by_rcu	mm/slub.c	/^SLAB_ATTR_RO(destroy_by_rcu);$/;"	v
destroy_by_rcu_show	mm/slub.c	/^static ssize_t destroy_by_rcu_show(struct kmem_cache *s, char *buf)$/;"	f	file:
destroy_compound_page	mm/page_alloc.c	/^static int destroy_compound_page(struct page *page, unsigned long order)$/;"	f	file:
destroy_hrtimer_on_stack	kernel/hrtimer.c	/^void destroy_hrtimer_on_stack(struct hrtimer *timer)$/;"	f
destroy_inode	fs/inode.c	/^void destroy_inode(struct inode *inode)$/;"	f
destroy_inodecache	mm/shmem.c	/^static void destroy_inodecache(void)$/;"	f	file:
destroy_params	kernel/params.c	/^void destroy_params(const struct kernel_param *params, unsigned num)$/;"	f
destroy_pid_namespace	kernel/pid_namespace.c	/^static void destroy_pid_namespace(struct pid_namespace *ns)$/;"	f	file:
destroy_rt_bandwidth	kernel/sched.c	/^static void destroy_rt_bandwidth(struct rt_bandwidth *rt_b)$/;"	f	file:
destroy_super	fs/super.c	/^static inline void destroy_super(struct super_block *s)$/;"	f	file:
destroy_swap_extents	mm/swapfile.c	/^static void destroy_swap_extents(struct swap_info_struct *sis)$/;"	f	file:
destroy_timer_on_stack	kernel/timer.c	/^EXPORT_SYMBOL_GPL(destroy_timer_on_stack);$/;"	v
destroy_timer_on_stack	kernel/timer.c	/^void destroy_timer_on_stack(struct timer_list *timer)$/;"	f
destroy_watch	kernel/audit_tree.c	/^static void destroy_watch(struct inotify_watch *watch)$/;"	f	file:
destroy_work_on_stack	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(destroy_work_on_stack);$/;"	v
destroy_work_on_stack	kernel/workqueue.c	/^void destroy_work_on_stack(struct work_struct *work)$/;"	f
destroy_workqueue	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(destroy_workqueue);$/;"	v
destroy_workqueue	kernel/workqueue.c	/^void destroy_workqueue(struct workqueue_struct *wq)$/;"	f
detach_destroy_domains	kernel/sched.c	/^static void detach_destroy_domains(const struct cpumask *cpu_map)$/;"	f	file:
detach_mnt	fs/namespace.c	/^static void detach_mnt(struct vfsmount *mnt, struct path *old_path)$/;"	f	file:
detach_pid	kernel/pid.c	/^void detach_pid(struct task_struct *task, enum pid_type type)$/;"	f
detach_timer	kernel/timer.c	/^static inline void detach_timer(struct timer_list *timer,$/;"	f	file:
detach_vmas_to_be_unmapped	mm/mmap.c	/^detach_vmas_to_be_unmapped(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
determine_dirtyable_memory	mm/page-writeback.c	/^unsigned long determine_dirtyable_memory(void)$/;"	f
determine_vm_flags	mm/nommu.c	/^static unsigned long determine_vm_flags(struct file *file,$/;"	f	file:
dev	kernel/audit_watch.c	/^	dev_t			dev;	\/* associated superblock device *\/$/;"	m	struct:audit_watch	file:
dev	kernel/auditsc.c	/^	dev_t		dev;$/;"	m	struct:audit_names	file:
dev	mm/dmapool.c	/^	struct device *dev;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::device	file:
dev_table	kernel/sysctl.c	/^static struct ctl_table dev_table[] = {$/;"	v	typeref:struct:ctl_table	file:
dev_table	kernel/sysctl.c	/^static struct ctl_table dev_table[];$/;"	v	typeref:struct:ctl_table	file:
device_id	kernel/dma.c	/^	const char *device_id;$/;"	m	struct:dma_chan	file:
devm_region_match	kernel/resource.c	/^static int devm_region_match(struct device *dev, void *res, void *match_data)$/;"	f	file:
devm_region_release	kernel/resource.c	/^static void devm_region_release(struct device *dev, void *res)$/;"	f	file:
dget_locked	fs/dcache.c	/^EXPORT_SYMBOL(dget_locked);$/;"	v
dget_locked	fs/dcache.c	/^struct dentry * dget_locked(struct dentry *dentry)$/;"	f
dhash_entries	fs/dcache.c	/^static __initdata unsigned long dhash_entries;$/;"	v	file:
did_panic	kernel/hung_task.c	/^static int __read_mostly did_panic;$/;"	v	file:
did_panic	kernel/softlockup.c	/^static int __read_mostly did_panic;$/;"	v	file:
dio	fs/direct-io.c	/^struct dio {$/;"	s	file:
dio_await_completion	fs/direct-io.c	/^static void dio_await_completion(struct dio *dio)$/;"	f	file:
dio_await_one	fs/direct-io.c	/^static struct bio *dio_await_one(struct dio *dio)$/;"	f	file:
dio_bio_add_page	fs/direct-io.c	/^static int dio_bio_add_page(struct dio *dio)$/;"	f	file:
dio_bio_alloc	fs/direct-io.c	/^dio_bio_alloc(struct dio *dio, struct block_device *bdev,$/;"	f	file:
dio_bio_complete	fs/direct-io.c	/^static int dio_bio_complete(struct dio *dio, struct bio *bio)$/;"	f	file:
dio_bio_end_aio	fs/direct-io.c	/^static void dio_bio_end_aio(struct bio *bio, int error)$/;"	f	file:
dio_bio_end_io	fs/direct-io.c	/^static void dio_bio_end_io(struct bio *bio, int error)$/;"	f	file:
dio_bio_reap	fs/direct-io.c	/^static int dio_bio_reap(struct dio *dio)$/;"	f	file:
dio_bio_submit	fs/direct-io.c	/^static void dio_bio_submit(struct dio *dio)$/;"	f	file:
dio_cleanup	fs/direct-io.c	/^static void dio_cleanup(struct dio *dio)$/;"	f	file:
dio_complete	fs/direct-io.c	/^static int dio_complete(struct dio *dio, loff_t offset, int ret)$/;"	f	file:
dio_get_page	fs/direct-io.c	/^static struct page *dio_get_page(struct dio *dio)$/;"	f	file:
dio_new_bio	fs/direct-io.c	/^static int dio_new_bio(struct dio *dio, sector_t start_sector)$/;"	f	file:
dio_pages_present	fs/direct-io.c	/^static inline unsigned dio_pages_present(struct dio *dio)$/;"	f	file:
dio_refill_pages	fs/direct-io.c	/^static int dio_refill_pages(struct dio *dio)$/;"	f	file:
dio_send_cur_page	fs/direct-io.c	/^static int dio_send_cur_page(struct dio *dio)$/;"	f	file:
dio_zero_block	fs/direct-io.c	/^static void dio_zero_block(struct dio *dio, int end)$/;"	f	file:
dir	kernel/module.c	/^	struct kobject *dir;$/;"	m	struct:module_notes_attrs	typeref:struct:module_notes_attrs::kobject	file:
dir_mode	fs/compat.c	/^	compat_mode_t dir_mode;$/;"	m	struct:compat_ncp_mount_data	file:
dir_mode	fs/compat.c	/^	compat_mode_t dir_mode;$/;"	m	struct:compat_smb_mount_data	file:
dir_mode	fs/compat.c	/^	compat_ulong_t dir_mode;$/;"	m	struct:compat_ncp_mount_data_v4	file:
direct_io_worker	fs/direct-io.c	/^direct_io_worker(int rw, struct kiocb *iocb, struct inode *inode, $/;"	f	file:
direct_splice_actor	fs/splice.c	/^static int direct_splice_actor(struct pipe_inode_info *pipe,$/;"	f	file:
directly_mappable_cdev_bdi	fs/char_dev.c	/^EXPORT_SYMBOL(directly_mappable_cdev_bdi);$/;"	v
directly_mappable_cdev_bdi	fs/char_dev.c	/^struct backing_dev_info directly_mappable_cdev_bdi = {$/;"	v	typeref:struct:backing_dev_info
dirent	fs/compat.c	/^	struct compat_old_linux_dirent __user *dirent;$/;"	m	struct:compat_readdir_callback	typeref:struct:compat_readdir_callback::__user	file:
dirent	fs/readdir.c	/^	struct old_linux_dirent __user * dirent;$/;"	m	struct:readdir_callback	typeref:struct:readdir_callback::__user	file:
dirty	mm/memory-failure.c	714;"	d	file:
dirty	mm/memory-failure.c	771;"	d	file:
dirty	mm/mempolicy.c	/^	unsigned long dirty;$/;"	m	struct:numa_maps	file:
dirty	mm/vmalloc.c	/^	unsigned long free, dirty;$/;"	m	struct:vmap_block	file:
dirty_background_bytes	mm/page-writeback.c	/^unsigned long dirty_background_bytes;$/;"	v
dirty_background_bytes_handler	mm/page-writeback.c	/^int dirty_background_bytes_handler(struct ctl_table *table, int write,$/;"	f
dirty_background_ratio	mm/page-writeback.c	/^int dirty_background_ratio = 10;$/;"	v
dirty_background_ratio_handler	mm/page-writeback.c	/^int dirty_background_ratio_handler(struct ctl_table *table, int write,$/;"	f
dirty_bytes_handler	mm/page-writeback.c	/^int dirty_bytes_handler(struct ctl_table *table, int write,$/;"	f
dirty_bytes_min	kernel/sysctl.c	/^static unsigned long dirty_bytes_min = 2 * PAGE_SIZE;$/;"	v	file:
dirty_expire_interval	mm/page-writeback.c	/^unsigned int dirty_expire_interval = 30 * 100; \/* centiseconds *\/$/;"	v
dirty_ratio_handler	mm/page-writeback.c	/^int dirty_ratio_handler(struct ctl_table *table, int write,$/;"	f
dirty_writeback_centisecs_handler	mm/page-writeback.c	/^int dirty_writeback_centisecs_handler(ctl_table *table, int write,$/;"	f
dirty_writeback_interval	mm/page-writeback.c	/^unsigned int dirty_writeback_interval = 5 * 100; \/* centiseconds *\/$/;"	v
disable_boot_consoles	kernel/printk.c	/^late_initcall(disable_boot_consoles);$/;"	v
disable_boot_consoles	kernel/printk.c	/^static int __init disable_boot_consoles(void)$/;"	f	file:
disable_higher_order_debug	mm/slub.c	/^static int disable_higher_order_debug;$/;"	v	file:
disable_higher_order_debug	mm/slub.c	1074;"	d	file:
disable_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(disable_kprobe);$/;"	v
disable_kprobe	kernel/kprobes.c	/^int __kprobes disable_kprobe(struct kprobe *kp)$/;"	f
disable_nonboot_cpus	kernel/cpu.c	/^int disable_nonboot_cpus(void)$/;"	f
disable_randmaps	mm/memory.c	/^static int __init disable_randmaps(char *s)$/;"	f	file:
disable_runtime	kernel/sched_rt.c	/^static void disable_runtime(struct rq *rq)$/;"	f	file:
disable_swap_account	mm/memcontrol.c	/^static int __init disable_swap_account(char *s)$/;"	f	file:
disable_tracepoint	kernel/tracepoint.c	/^static void disable_tracepoint(struct tracepoint *elem)$/;"	f	file:
disallow_signal	kernel/exit.c	/^EXPORT_SYMBOL(disallow_signal);$/;"	v
disallow_signal	kernel/exit.c	/^int disallow_signal(int sig)$/;"	f
disarm_all_kprobes	kernel/kprobes.c	/^static void __kprobes disarm_all_kprobes(void)$/;"	f	file:
disarm_kprobe	kernel/kprobes.c	/^static void __kprobes disarm_kprobe(struct kprobe *kp)$/;"	f	file:
discard_buffer	fs/buffer.c	/^static void discard_buffer(struct buffer_head * bh)$/;"	f	file:
discard_slab	mm/slub.c	/^static void discard_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
discard_swap	mm/swapfile.c	/^static int discard_swap(struct swap_info_struct *si)$/;"	f	file:
discard_swap_cluster	mm/swapfile.c	/^static void discard_swap_cluster(struct swap_info_struct *si,$/;"	f	file:
dispose_list	fs/inode.c	/^static void dispose_list(struct list_head *head)$/;"	f	file:
div_factor	kernel/test_kprobes.c	21;"	d	file:
dma	mm/dmapool.c	/^	dma_addr_t dma;$/;"	m	struct:dma_page	file:
dma_chan	kernel/dma.c	/^struct dma_chan {$/;"	s	file:
dma_chan_busy	kernel/dma.c	/^static struct dma_chan dma_chan_busy[MAX_DMA_CHANNELS] = {$/;"	v	typeref:struct:dma_chan	file:
dma_kmalloc_cache	mm/slub.c	/^static noinline struct kmem_cache *dma_kmalloc_cache(int index, gfp_t flags)$/;"	f	file:
dma_page	mm/dmapool.c	/^struct dma_page {		\/* cacheable header for 'allocation' bytes *\/$/;"	s	file:
dma_pool	mm/dmapool.c	/^struct dma_pool {		\/* the pool *\/$/;"	s	file:
dma_pool_alloc	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_alloc);$/;"	v
dma_pool_alloc	mm/dmapool.c	/^void *dma_pool_alloc(struct dma_pool *pool, gfp_t mem_flags,$/;"	f
dma_pool_create	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_create);$/;"	v
dma_pool_create	mm/dmapool.c	/^struct dma_pool *dma_pool_create(const char *name, struct device *dev,$/;"	f
dma_pool_destroy	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_destroy);$/;"	v
dma_pool_destroy	mm/dmapool.c	/^void dma_pool_destroy(struct dma_pool *pool)$/;"	f
dma_pool_free	mm/dmapool.c	/^EXPORT_SYMBOL(dma_pool_free);$/;"	v
dma_pool_free	mm/dmapool.c	/^void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t dma)$/;"	f
dma_reserve	mm/page_alloc.c	/^static unsigned long __meminitdata dma_reserve;$/;"	v	file:
dma_spin_lock	kernel/dma.c	/^DEFINE_SPINLOCK(dma_spin_lock);$/;"	v
dma_spin_lock	kernel/dma.c	/^EXPORT_SYMBOL(dma_spin_lock);$/;"	v
dmam_pool_create	mm/dmapool.c	/^EXPORT_SYMBOL(dmam_pool_create);$/;"	v
dmam_pool_create	mm/dmapool.c	/^struct dma_pool *dmam_pool_create(const char *name, struct device *dev,$/;"	f
dmam_pool_destroy	mm/dmapool.c	/^EXPORT_SYMBOL(dmam_pool_destroy);$/;"	v
dmam_pool_destroy	mm/dmapool.c	/^void dmam_pool_destroy(struct dma_pool *pool)$/;"	f
dmam_pool_match	mm/dmapool.c	/^static int dmam_pool_match(struct device *dev, void *res, void *match_data)$/;"	f	file:
dmam_pool_release	mm/dmapool.c	/^static void dmam_pool_release(struct device *dev, void *res)$/;"	f	file:
do_acct_process	kernel/acct.c	/^static void do_acct_process(struct bsd_acct_struct *acct,$/;"	f	file:
do_add_mount	fs/namespace.c	/^EXPORT_SYMBOL_GPL(do_add_mount);$/;"	v
do_add_mount	fs/namespace.c	/^int do_add_mount(struct vfsmount *newmnt, struct path *path,$/;"	f
do_anonymous_page	mm/memory.c	/^static int do_anonymous_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_async_mmap_readahead	mm/filemap.c	/^static void do_async_mmap_readahead(struct vm_area_struct *vma,$/;"	f	file:
do_balance_runtime	kernel/sched_rt.c	/^static int do_balance_runtime(struct rt_rq *rt_rq)$/;"	f	file:
do_brk	mm/mmap.c	/^EXPORT_SYMBOL(do_brk);$/;"	v
do_brk	mm/mmap.c	/^unsigned long do_brk(unsigned long addr, unsigned long len)$/;"	f
do_brk	mm/nommu.c	/^unsigned long do_brk(unsigned long addr, unsigned long len)$/;"	f
do_ccupdate_local	mm/slab.c	/^static void do_ccupdate_local(void *info)$/;"	f	file:
do_change_type	fs/namespace.c	/^static int do_change_type(struct path *path, int flag)$/;"	f	file:
do_compat_pselect	fs/compat.c	/^static long do_compat_pselect(int n, compat_ulong_t __user *inp,$/;"	f	file:
do_coredump	fs/exec.c	/^void do_coredump(long signr, int exit_code, struct pt_regs *regs)$/;"	f
do_cpu_nanosleep	kernel/posix-cpu-timers.c	/^static int do_cpu_nanosleep(const clockid_t which_clock, int flags,$/;"	f	file:
do_direct_IO	fs/direct-io.c	/^static int do_direct_IO(struct dio *dio)$/;"	f	file:
do_drain	mm/slab.c	/^static void do_drain(void *arg)$/;"	f	file:
do_emergency_remount	fs/super.c	/^static void do_emergency_remount(struct work_struct *work)$/;"	f	file:
do_execve	fs/exec.c	/^int do_execve(char * filename,$/;"	f
do_exit	kernel/exit.c	/^EXPORT_SYMBOL_GPL(do_exit);$/;"	v
do_exit	kernel/exit.c	/^NORET_TYPE void do_exit(long code)$/;"	f
do_fallocate	fs/open.c	/^int do_fallocate(struct file *file, int mode, loff_t offset, loff_t len)$/;"	f
do_fcntl	fs/fcntl.c	/^static long do_fcntl(int fd, unsigned int cmd, unsigned long arg,$/;"	f	file:
do_filp_open	fs/namei.c	/^struct file *do_filp_open(int dfd, const char *pathname,$/;"	f
do_follow_link	fs/namei.c	/^static inline int do_follow_link(struct path *path, struct nameidata *nd)$/;"	f	file:
do_fork	kernel/fork.c	/^long do_fork(unsigned long clone_flags,$/;"	f
do_fsync	fs/sync.c	/^static int do_fsync(unsigned int fd, int datasync)$/;"	f	file:
do_futex	kernel/futex.c	/^long do_futex(u32 __user *uaddr, int op, u32 val, ktime_t *timeout,$/;"	f
do_generic_file_read	mm/filemap.c	/^static void do_generic_file_read(struct file *filp, loff_t *ppos,$/;"	f	file:
do_get_mempolicy	mm/mempolicy.c	/^static long do_get_mempolicy(int *policy, nodemask_t *nmask,$/;"	f	file:
do_getitimer	kernel/itimer.c	/^int do_getitimer(int which, struct itimerval *value)$/;"	f
do_getname	fs/namei.c	/^static int do_getname(const char __user *filename, char *page)$/;"	f	file:
do_group_exit	kernel/exit.c	/^do_group_exit(int exit_code)$/;"	f
do_i2c_rdwr_ioctl	fs/compat_ioctl.c	/^static int do_i2c_rdwr_ioctl(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_i2c_smbus_ioctl	fs/compat_ioctl.c	/^static int do_i2c_smbus_ioctl(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_invalidatepage	mm/truncate.c	/^void do_invalidatepage(struct page *page, unsigned long offset)$/;"	f
do_ioctl_trans	fs/compat_ioctl.c	/^static long do_ioctl_trans(int fd, unsigned int cmd,$/;"	f	file:
do_kern_mount	fs/super.c	/^EXPORT_SYMBOL_GPL(do_kern_mount);$/;"	v
do_kern_mount	fs/super.c	/^do_kern_mount(const char *fstype, int flags, const char *name, void *data)$/;"	f
do_kimage_alloc	kernel/kexec.c	/^static int do_kimage_alloc(struct kimage **rimage, unsigned long entry,$/;"	f	file:
do_laptop_sync	mm/page-writeback.c	/^static void do_laptop_sync(struct work_struct *work)$/;"	f	file:
do_launder_page	mm/truncate.c	/^static int do_launder_page(struct address_space *mapping, struct page *page)$/;"	f	file:
do_linear_fault	mm/memory.c	/^static int do_linear_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_lock_file_wait	fs/locks.c	/^static int do_lock_file_wait(struct file *filp, unsigned int cmd,$/;"	f	file:
do_lookup	fs/namei.c	/^static int do_lookup(struct nameidata *nd, struct qstr *name,$/;"	f	file:
do_loop_readv_writev	fs/read_write.c	/^ssize_t do_loop_readv_writev(struct file *filp, struct iovec *iov,$/;"	f
do_loopback	fs/namespace.c	/^static int do_loopback(struct path *path, char *old_name,$/;"	f	file:
do_make_slave	fs/pnode.c	/^static int do_make_slave(struct vfsmount *mnt)$/;"	f	file:
do_mbind	mm/mempolicy.c	/^static long do_mbind(unsigned long start, unsigned long len,$/;"	f	file:
do_migrate_pages	mm/mempolicy.c	/^int do_migrate_pages(struct mm_struct *mm,$/;"	f
do_migrate_range	mm/memory_hotplug.c	/^do_migrate_range(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
do_mincore	mm/mincore.c	/^static long do_mincore(unsigned long addr, unsigned char *vec, unsigned long pages)$/;"	f	file:
do_mlock	mm/mlock.c	/^static int do_mlock(unsigned long start, size_t len, int on)$/;"	f	file:
do_mlockall	mm/mlock.c	/^static int do_mlockall(int flags)$/;"	f	file:
do_mmap_pgoff	mm/mmap.c	/^EXPORT_SYMBOL(do_mmap_pgoff);$/;"	v
do_mmap_pgoff	mm/mmap.c	/^unsigned long do_mmap_pgoff(struct file *file, unsigned long addr,$/;"	f
do_mmap_pgoff	mm/nommu.c	/^EXPORT_SYMBOL(do_mmap_pgoff);$/;"	v
do_mmap_pgoff	mm/nommu.c	/^unsigned long do_mmap_pgoff(struct file *file,$/;"	f
do_mmap_private	mm/nommu.c	/^static int do_mmap_private(struct vm_area_struct *vma,$/;"	f	file:
do_mmap_shared_file	mm/nommu.c	/^static int do_mmap_shared_file(struct vm_area_struct *vma)$/;"	f	file:
do_mmu_notifier_register	mm/mmu_notifier.c	/^static int do_mmu_notifier_register(struct mmu_notifier *mn,$/;"	f	file:
do_mod_ctors	kernel/module.c	/^static void do_mod_ctors(struct module *mod)$/;"	f	file:
do_mount	fs/namespace.c	/^long do_mount(char *dev_name, char *dir_name, char *type_page,$/;"	f
do_move_mount	fs/namespace.c	/^static int do_move_mount(struct path *path, char *old_name)$/;"	f	file:
do_move_page_to_node_array	mm/migrate.c	/^static int do_move_page_to_node_array(struct mm_struct *mm,$/;"	f	file:
do_mpage_readpage	fs/mpage.c	/^do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,$/;"	f	file:
do_mremap	mm/mremap.c	/^unsigned long do_mremap(unsigned long addr,$/;"	f
do_mremap	mm/nommu.c	/^EXPORT_SYMBOL(do_mremap);$/;"	v
do_mremap	mm/nommu.c	/^unsigned long do_mremap(unsigned long addr,$/;"	f
do_munmap	mm/mmap.c	/^EXPORT_SYMBOL(do_munmap);$/;"	v
do_munmap	mm/mmap.c	/^int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)$/;"	f
do_munmap	mm/nommu.c	/^EXPORT_SYMBOL(do_munmap);$/;"	v
do_munmap	mm/nommu.c	/^int do_munmap(struct mm_struct *mm, unsigned long start, size_t len)$/;"	f
do_nanosleep	kernel/hrtimer.c	/^static int __sched do_nanosleep(struct hrtimer_sleeper *t, enum hrtimer_mode mode)$/;"	f	file:
do_ncp_super_data_conv	fs/compat.c	/^static void *do_ncp_super_data_conv(void *raw_data)$/;"	f	file:
do_new_mount	fs/namespace.c	/^static int do_new_mount(struct path *path, char *type, int flags,$/;"	f	file:
do_nfs4_super_data_conv	fs/compat.c	/^static int do_nfs4_super_data_conv(void *raw_data)$/;"	f	file:
do_no_restart_syscall	kernel/signal.c	/^long do_no_restart_syscall(struct restart_block *param)$/;"	f
do_nonlinear_fault	mm/memory.c	/^static int do_nonlinear_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_notify_parent	kernel/signal.c	/^int do_notify_parent(struct task_struct *tsk, int sig)$/;"	f
do_notify_parent_cldstop	kernel/signal.c	/^static void do_notify_parent_cldstop(struct task_struct *tsk, int why)$/;"	f	file:
do_oops_enter_exit	kernel/panic.c	/^static void do_oops_enter_exit(void)$/;"	f	file:
do_open	fs/nfsctl.c	/^static struct file *do_open(char *name, int flags)$/;"	f	file:
do_pages_move	mm/migrate.c	/^static int do_pages_move(struct mm_struct *mm, struct task_struct *task,$/;"	f	file:
do_pages_stat	mm/migrate.c	/^static int do_pages_stat(struct mm_struct *mm, unsigned long nr_pages,$/;"	f	file:
do_pages_stat_array	mm/migrate.c	/^static void do_pages_stat_array(struct mm_struct *mm, unsigned long nr_pages,$/;"	f	file:
do_path_lookup	fs/namei.c	/^static int do_path_lookup(int dfd, const char *name,$/;"	f	file:
do_perf_sw_event	kernel/perf_event.c	/^static void do_perf_sw_event(enum perf_type_id type, u32 event_id,$/;"	f	file:
do_pipe_flags	fs/pipe.c	/^int do_pipe_flags(int *fd, int flags)$/;"	f
do_poll	fs/select.c	/^static int do_poll(unsigned int nfds,  struct poll_list *list,$/;"	f	file:
do_pollfd	fs/select.c	/^static inline unsigned int do_pollfd(struct pollfd *pollfd, poll_table *pwait)$/;"	f	file:
do_posix_clock_nonanosleep	kernel/posix-timers.c	/^EXPORT_SYMBOL_GPL(do_posix_clock_nonanosleep);$/;"	v
do_posix_clock_nonanosleep	kernel/posix-timers.c	/^int do_posix_clock_nonanosleep(const clockid_t clock, int flags,$/;"	f
do_posix_clock_nosettime	kernel/posix-timers.c	/^EXPORT_SYMBOL_GPL(do_posix_clock_nosettime);$/;"	v
do_posix_clock_nosettime	kernel/posix-timers.c	/^int do_posix_clock_nosettime(const clockid_t clockid, struct timespec *tp)$/;"	f
do_proc_dointvec	kernel/sysctl.c	/^static int do_proc_dointvec(struct ctl_table *table, int write,$/;"	f	file:
do_proc_dointvec_conv	kernel/sysctl.c	/^static int do_proc_dointvec_conv(int *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_jiffies_conv	kernel/sysctl.c	/^static int do_proc_dointvec_jiffies_conv(int *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_minmax_conv	kernel/sysctl.c	/^static int do_proc_dointvec_minmax_conv(int *negp, unsigned long *lvalp, $/;"	f	file:
do_proc_dointvec_minmax_conv_param	kernel/sysctl.c	/^struct do_proc_dointvec_minmax_conv_param {$/;"	s	file:
do_proc_dointvec_ms_jiffies_conv	kernel/sysctl.c	/^static int do_proc_dointvec_ms_jiffies_conv(int *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_dointvec_userhz_jiffies_conv	kernel/sysctl.c	/^static int do_proc_dointvec_userhz_jiffies_conv(int *negp, unsigned long *lvalp,$/;"	f	file:
do_proc_doulongvec_minmax	kernel/sysctl.c	/^static int do_proc_doulongvec_minmax(struct ctl_table *table, int write,$/;"	f	file:
do_pselect	fs/select.c	/^static long do_pselect(int n, fd_set __user *inp, fd_set __user *outp,$/;"	f	file:
do_raw_spin_lock	include/linux/spinlock.h	/^static inline void do_raw_spin_lock(raw_spinlock_t *lock)$/;"	f
do_raw_spin_lock_flags	include/linux/spinlock.h	/^do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)$/;"	f
do_raw_spin_lock_flags	include/linux/spinlock.h	132;"	d
do_raw_spin_trylock	include/linux/spinlock.h	/^static inline int do_raw_spin_trylock(raw_spinlock_t *lock)$/;"	f
do_raw_spin_unlock	include/linux/spinlock.h	/^static inline void do_raw_spin_unlock(raw_spinlock_t *lock)$/;"	f
do_read_cache_page	mm/filemap.c	/^static struct page *do_read_cache_page(struct address_space *mapping,$/;"	f	file:
do_readahead	mm/filemap.c	/^do_readahead(struct address_space *mapping, struct file *filp,$/;"	f	file:
do_readv_writev	fs/read_write.c	/^static ssize_t do_readv_writev(int type, struct file *file,$/;"	f	file:
do_rebuild_sched_domains	kernel/cpuset.c	/^static void do_rebuild_sched_domains(struct work_struct *unused)$/;"	f	file:
do_refcount_check	fs/pnode.c	/^static inline int do_refcount_check(struct vfsmount *mnt, int count)$/;"	f	file:
do_remount	fs/namespace.c	/^static int do_remount(struct path *path, int flags, int mnt_flags,$/;"	f	file:
do_remount_sb	fs/super.c	/^int do_remount_sb(struct super_block *sb, int flags, void *data, int force)$/;"	f
do_restart_poll	fs/select.c	/^static long do_restart_poll(struct restart_block *restart_block)$/;"	f	file:
do_revalidate	fs/namei.c	/^do_revalidate(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
do_rmdir	fs/namei.c	/^static long do_rmdir(int dfd, const char __user *pathname)$/;"	f	file:
do_rt_tgsigqueueinfo	kernel/signal.c	/^long do_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t *info)$/;"	f
do_sched_rt_period_timer	kernel/sched_rt.c	/^static int do_sched_rt_period_timer(struct rt_bandwidth *rt_b, int overrun)$/;"	f	file:
do_sched_setscheduler	kernel/sched.c	/^do_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param)$/;"	f	file:
do_schedule_next_timer	kernel/posix-timers.c	/^void do_schedule_next_timer(struct siginfo *info)$/;"	f
do_select	fs/select.c	/^int do_select(int n, fd_set_bits *fds, struct timespec *end_time)$/;"	f
do_send_sig_info	kernel/signal.c	/^int do_send_sig_info(int sig, struct siginfo *info, struct task_struct *p,$/;"	f
do_send_specific	kernel/signal.c	/^do_send_specific(pid_t tgid, pid_t pid, int sig, struct siginfo *info)$/;"	f	file:
do_sendfile	fs/read_write.c	/^static ssize_t do_sendfile(int out_fd, int in_fd, loff_t *ppos,$/;"	f	file:
do_set_mempolicy	mm/mempolicy.c	/^static long do_set_mempolicy(unsigned short mode, unsigned short flags,$/;"	f	file:
do_setitimer	kernel/itimer.c	/^int do_setitimer(int which, struct itimerval *value, struct itimerval *ovalue)$/;"	f
do_shmem_file_read	mm/shmem.c	/^static void do_shmem_file_read(struct file *filp, loff_t *ppos, read_descriptor_t *desc, read_actor_t actor)$/;"	f	file:
do_sigaction	kernel/signal.c	/^int do_sigaction(int sig, struct k_sigaction *act, struct k_sigaction *oact)$/;"	f
do_sigaltstack	kernel/signal.c	/^do_sigaltstack (const stack_t __user *uss, stack_t __user *uoss, unsigned long sp)$/;"	f
do_signal_stop	kernel/signal.c	/^static int do_signal_stop(int signr)$/;"	f	file:
do_sigpending	kernel/signal.c	/^long do_sigpending(void __user *set, unsigned long sigsetsize)$/;"	f
do_smb_getmountuid	fs/compat_ioctl.c	/^static int do_smb_getmountuid(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_smb_super_data_conv	fs/compat.c	/^static void *do_smb_super_data_conv(void *raw_data)$/;"	f	file:
do_softirq	kernel/softirq.c	/^asmlinkage void do_softirq(void)$/;"	f
do_splice	fs/splice.c	/^static long do_splice(struct file *in, loff_t __user *off_in,$/;"	f	file:
do_splice_direct	fs/splice.c	/^long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,$/;"	f
do_splice_from	fs/splice.c	/^static long do_splice_from(struct pipe_inode_info *pipe, struct file *out,$/;"	f	file:
do_splice_to	fs/splice.c	/^static long do_splice_to(struct file *in, loff_t *ppos,$/;"	f	file:
do_swap_account	mm/memcontrol.c	55;"	d	file:
do_swap_page	mm/memory.c	/^static int do_swap_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_sync_mmap_readahead	mm/filemap.c	/^static void do_sync_mmap_readahead(struct vm_area_struct *vma,$/;"	f	file:
do_sync_read	fs/read_write.c	/^EXPORT_SYMBOL(do_sync_read);$/;"	v
do_sync_read	fs/read_write.c	/^ssize_t do_sync_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos)$/;"	f
do_sync_readv_writev	fs/read_write.c	/^ssize_t do_sync_readv_writev(struct file *filp, const struct iovec *iov,$/;"	f
do_sync_work	fs/sync.c	/^static void do_sync_work(struct work_struct *work)$/;"	f	file:
do_sync_write	fs/read_write.c	/^EXPORT_SYMBOL(do_sync_write);$/;"	v
do_sync_write	fs/read_write.c	/^ssize_t do_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)$/;"	f
do_sys_ftruncate	fs/open.c	/^static long do_sys_ftruncate(unsigned int fd, loff_t length, int small)$/;"	f	file:
do_sys_open	fs/open.c	/^long do_sys_open(int dfd, const char __user *filename, int flags, int mode)$/;"	f
do_sys_poll	fs/select.c	/^int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,$/;"	f
do_sys_settimeofday	kernel/time.c	/^int do_sys_settimeofday(struct timespec *tv, struct timezone *tz)$/;"	f
do_sys_times	kernel/sys.c	/^void do_sys_times(struct tms *tms)$/;"	f
do_sys_truncate	fs/open.c	/^static long do_sys_truncate(const char __user *pathname, loff_t length)$/;"	f	file:
do_sysctl	kernel/sysctl_binary.c	/^static ssize_t do_sysctl(int __user *args_name, int nlen,$/;"	f	file:
do_sysinfo	kernel/timer.c	/^int do_sysinfo(struct sysinfo *info)$/;"	f
do_syslog	kernel/printk.c	/^int do_syslog(int type, char __user *buf, int len)$/;"	f
do_task_delta_exec	kernel/sched.c	/^static u64 do_task_delta_exec(struct task_struct *p, struct rq *rq)$/;"	f	file:
do_tee	fs/splice.c	/^static long do_tee(struct file *in, struct file *out, size_t len,$/;"	f	file:
do_thaw_all	fs/buffer.c	/^static void do_thaw_all(struct work_struct *work)$/;"	f	file:
do_thread_regset_writeback	fs/binfmt_elf.c	/^static void do_thread_regset_writeback(struct task_struct *task,$/;"	f	file:
do_timer	kernel/timer.c	/^void do_timer(unsigned long ticks)$/;"	f
do_tkill	kernel/signal.c	/^static int do_tkill(pid_t tgid, pid_t pid, int sig)$/;"	f	file:
do_truncate	fs/open.c	/^int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,$/;"	f
do_try_to_free_pages	mm/vmscan.c	/^static unsigned long do_try_to_free_pages(struct zonelist *zonelist,$/;"	f	file:
do_tune_cpucache	mm/slab.c	/^static int do_tune_cpucache(struct kmem_cache *cachep, int limit,$/;"	f	file:
do_umount	fs/namespace.c	/^static int do_umount(struct vfsmount *mnt, int flags)$/;"	f	file:
do_unlinkat	fs/namei.c	/^static long do_unlinkat(int dfd, const char __user *pathname)$/;"	f	file:
do_utimes	fs/utimes.c	/^long do_utimes(int dfd, char __user *filename, struct timespec *times, int flags)$/;"	f
do_vfs_ioctl	fs/ioctl.c	/^int do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd,$/;"	f
do_video_get_event	fs/compat_ioctl.c	/^static int do_video_get_event(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_video_set_spu_palette	fs/compat_ioctl.c	/^static int do_video_set_spu_palette(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_video_stillpicture	fs/compat_ioctl.c	/^static int do_video_stillpicture(unsigned int fd, unsigned int cmd,$/;"	f	file:
do_wait	kernel/exit.c	/^static long do_wait(struct wait_opts *wo)$/;"	f	file:
do_wait_for_common	kernel/sched.c	/^do_wait_for_common(struct completion *x, long timeout, int state)$/;"	f	file:
do_wait_thread	kernel/exit.c	/^static int do_wait_thread(struct wait_opts *wo, struct task_struct *tsk)$/;"	f	file:
do_work_for_cpu	kernel/workqueue.c	/^static int do_work_for_cpu(void *_wfc)$/;"	f	file:
do_wp_page	mm/memory.c	/^static int do_wp_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
do_writepages	mm/page-writeback.c	/^int do_writepages(struct address_space *mapping, struct writeback_control *wbc)$/;"	f
do_xip_mapping_read	mm/filemap_xip.c	/^do_xip_mapping_read(struct address_space *mapping,$/;"	f	file:
domainspan	kernel/sched.c	/^	cpumask_var_t		domainspan;$/;"	m	struct:s_data	file:
doms_cur	kernel/sched.c	/^static cpumask_var_t *doms_cur;	\/* current sched domains *\/$/;"	v	file:
done	kernel/kthread.c	/^	struct completion done;$/;"	m	struct:kthread_create_info	typeref:struct:kthread_create_info::completion	file:
done	kernel/sched.c	/^	struct completion done;$/;"	m	struct:migration_req	typeref:struct:migration_req::completion	file:
done	kernel/workqueue.c	/^	struct completion	done;$/;"	m	struct:wq_barrier	typeref:struct:wq_barrier::completion	file:
donetail	kernel/rcutiny.c	/^	struct rcu_head **donetail;	\/* ->next pointer of last "done" CB. *\/$/;"	m	struct:rcu_ctrlblk	typeref:struct:rcu_ctrlblk::rcu_head	file:
double_lock_balance	kernel/sched.c	/^static int double_lock_balance(struct rq *this_rq, struct rq *busiest)$/;"	f	file:
double_lock_hb	kernel/futex.c	/^double_lock_hb(struct futex_hash_bucket *hb1, struct futex_hash_bucket *hb2)$/;"	f	file:
double_unlock_hb	kernel/futex.c	/^double_unlock_hb(struct futex_hash_bucket *hb1, struct futex_hash_bucket *hb2)$/;"	f	file:
down	kernel/semaphore.c	/^EXPORT_SYMBOL(down);$/;"	v
down	kernel/semaphore.c	/^void down(struct semaphore *sem)$/;"	f
down_interruptible	kernel/semaphore.c	/^EXPORT_SYMBOL(down_interruptible);$/;"	v
down_interruptible	kernel/semaphore.c	/^int down_interruptible(struct semaphore *sem)$/;"	f
down_killable	kernel/semaphore.c	/^EXPORT_SYMBOL(down_killable);$/;"	v
down_killable	kernel/semaphore.c	/^int down_killable(struct semaphore *sem)$/;"	f
down_read	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read);$/;"	v
down_read	kernel/rwsem.c	/^void __sched down_read(struct rw_semaphore *sem)$/;"	f
down_read_nested	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read_nested);$/;"	v
down_read_nested	kernel/rwsem.c	/^void down_read_nested(struct rw_semaphore *sem, int subclass)$/;"	f
down_read_non_owner	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read_non_owner);$/;"	v
down_read_non_owner	kernel/rwsem.c	/^void down_read_non_owner(struct rw_semaphore *sem)$/;"	f
down_read_trylock	kernel/rwsem.c	/^EXPORT_SYMBOL(down_read_trylock);$/;"	v
down_read_trylock	kernel/rwsem.c	/^int down_read_trylock(struct rw_semaphore *sem)$/;"	f
down_timeout	kernel/semaphore.c	/^EXPORT_SYMBOL(down_timeout);$/;"	v
down_timeout	kernel/semaphore.c	/^int down_timeout(struct semaphore *sem, long jiffies)$/;"	f
down_trylock	kernel/semaphore.c	/^EXPORT_SYMBOL(down_trylock);$/;"	v
down_trylock	kernel/semaphore.c	/^int down_trylock(struct semaphore *sem)$/;"	f
down_write	kernel/rwsem.c	/^EXPORT_SYMBOL(down_write);$/;"	v
down_write	kernel/rwsem.c	/^void __sched down_write(struct rw_semaphore *sem)$/;"	f
down_write_nested	kernel/rwsem.c	/^EXPORT_SYMBOL(down_write_nested);$/;"	v
down_write_nested	kernel/rwsem.c	/^void down_write_nested(struct rw_semaphore *sem, int subclass)$/;"	f
down_write_trylock	kernel/rwsem.c	/^EXPORT_SYMBOL(down_write_trylock);$/;"	v
down_write_trylock	kernel/rwsem.c	/^int down_write_trylock(struct rw_semaphore *sem)$/;"	f
downgrade_write	kernel/rwsem.c	/^EXPORT_SYMBOL(downgrade_write);$/;"	v
downgrade_write	kernel/rwsem.c	/^void downgrade_write(struct rw_semaphore *sem)$/;"	f
dprintk	fs/aio.c	44;"	d	file:
dprintk	fs/aio.c	46;"	d	file:
dput	fs/dcache.c	/^EXPORT_SYMBOL(dput);$/;"	v
dput	fs/dcache.c	/^void dput(struct dentry *dentry)$/;"	f
drain_alien_cache	mm/slab.c	/^static void drain_alien_cache(struct kmem_cache *cachep,$/;"	f	file:
drain_alien_cache	mm/slab.c	944;"	d	file:
drain_all_pages	mm/page_alloc.c	/^void drain_all_pages(void)$/;"	f
drain_all_stock_async	mm/memcontrol.c	/^static void drain_all_stock_async(void)$/;"	f	file:
drain_all_stock_sync	mm/memcontrol.c	/^static void drain_all_stock_sync(void)$/;"	f	file:
drain_array	mm/slab.c	/^void drain_array(struct kmem_cache *cachep, struct kmem_list3 *l3,$/;"	f
drain_cpu_caches	mm/slab.c	/^static void drain_cpu_caches(struct kmem_cache *cachep)$/;"	f	file:
drain_cpu_pagevecs	mm/swap.c	/^static void drain_cpu_pagevecs(int cpu)$/;"	f	file:
drain_freelist	mm/slab.c	/^static int drain_freelist(struct kmem_cache *cache,$/;"	f	file:
drain_local_pages	mm/page_alloc.c	/^void drain_local_pages(void *arg)$/;"	f
drain_local_stock	mm/memcontrol.c	/^static void drain_local_stock(struct work_struct *dummy)$/;"	f	file:
drain_mmlist	mm/swapfile.c	/^static void drain_mmlist(void)$/;"	f	file:
drain_pages	mm/page_alloc.c	/^static void drain_pages(unsigned int cpu)$/;"	f	file:
drain_stock	mm/memcontrol.c	/^static void drain_stock(struct memcg_stock_pcp *stock)$/;"	f	file:
drain_zone_pages	mm/page_alloc.c	/^void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp)$/;"	f
driver_status	fs/compat_ioctl.c	/^	unsigned short driver_status;	\/* [o] errors from software driver *\/$/;"	m	struct:sg_io_hdr32	file:
drop_anon_vma	mm/ksm.c	/^static void drop_anon_vma(struct rmap_item *rmap_item)$/;"	f	file:
drop_buffers	fs/buffer.c	/^drop_buffers(struct page *page, struct buffer_head **buffers_to_free)$/;"	f	file:
drop_caches_sysctl_handler	fs/drop_caches.c	/^int drop_caches_sysctl_handler(ctl_table *table, int write,$/;"	f
drop_collected_mounts	fs/namespace.c	/^void drop_collected_mounts(struct vfsmount *mnt)$/;"	f
drop_file_write_access	fs/file_table.c	/^EXPORT_SYMBOL_GPL(drop_file_write_access);$/;"	v
drop_file_write_access	fs/file_table.c	/^void drop_file_write_access(struct file *file)$/;"	f
drop_futex_key_refs	kernel/futex.c	/^static void drop_futex_key_refs(union futex_key *key)$/;"	f	file:
drop_pagecache	fs/drop_caches.c	/^static void drop_pagecache(void)$/;"	f	file:
drop_pagecache_sb	fs/drop_caches.c	/^static void drop_pagecache_sb(struct super_block *sb)$/;"	f	file:
drop_slab	fs/drop_caches.c	/^static void drop_slab(void)$/;"	f	file:
drop_super	fs/super.c	/^EXPORT_SYMBOL(drop_super);$/;"	v
drop_super	fs/super.c	/^void drop_super(struct super_block *sb)$/;"	f
dt_type	fs/libfs.c	/^static inline unsigned char dt_type(struct inode *inode)$/;"	f	file:
dummy	kernel/auditsc.c	/^	int		    dummy;	\/* must be the first element *\/$/;"	m	struct:audit_context	file:
dummytop	kernel/cgroup.c	160;"	d	file:
dump_header	mm/oom_kill.c	/^static void dump_header(struct task_struct *p, gfp_t gfp_mask, int order,$/;"	f	file:
dump_invalid_creds	kernel/cred.c	/^static void dump_invalid_creds(const struct cred *cred, const char *label,$/;"	f	file:
dump_kprobe	kernel/kprobes.c	/^void __kprobes dump_kprobe(struct kprobe *kp)$/;"	f
dump_line	mm/slab.c	/^static void dump_line(char *data, int offset, int limit)$/;"	f	file:
dump_object_info	mm/kmemleak.c	/^static void dump_object_info(struct kmemleak_object *object)$/;"	f	file:
dump_seek	fs/binfmt_elf.c	/^static int dump_seek(struct file *file, loff_t off)$/;"	f	file:
dump_seek	fs/binfmt_elf_fdpic.c	/^static int dump_seek(struct file *file, loff_t off)$/;"	f	file:
dump_str_object_info	mm/kmemleak.c	/^static int dump_str_object_info(const char *str)$/;"	f	file:
dump_tasks	mm/oom_kill.c	/^static void dump_tasks(const struct mem_cgroup *mem)$/;"	f	file:
dump_write	fs/binfmt_aout.c	/^static int dump_write(struct file *file, const void *addr, int nr)$/;"	f	file:
dump_write	fs/binfmt_elf.c	/^static int dump_write(struct file *file, const void *addr, int nr)$/;"	f	file:
dump_write	fs/binfmt_elf_fdpic.c	/^static int dump_write(struct file *file, const void *addr, int nr)$/;"	f	file:
dup_fd	fs/file.c	/^struct files_struct *dup_fd(struct files_struct *oldf, int *errorp)$/;"	f
dup_mm	kernel/fork.c	/^struct mm_struct *dup_mm(struct task_struct *tsk)$/;"	f
dup_mmap	kernel/fork.c	/^static int dup_mmap(struct mm_struct *mm, struct mm_struct *oldmm)$/;"	f	file:
dup_mmap	kernel/fork.c	415;"	d	file:
dup_mnt_ns	fs/namespace.c	/^static struct mnt_namespace *dup_mnt_ns(struct mnt_namespace *mnt_ns,$/;"	f	file:
dup_task_struct	kernel/fork.c	/^static struct task_struct *dup_task_struct(struct task_struct *orig)$/;"	f	file:
duration	fs/compat_ioctl.c	/^	compat_uint_t duration;		\/* [o] time taken by cmd (unit: millisec) *\/$/;"	m	struct:sg_io_hdr32	file:
duration	fs/compat_ioctl.c	/^	unsigned int duration;$/;"	m	struct:compat_sg_req_info	file:
dxfer_direction	fs/compat_ioctl.c	/^	compat_int_t dxfer_direction;	\/* [i] data transfer direction  *\/$/;"	m	struct:sg_io_hdr32	file:
dxfer_len	fs/compat_ioctl.c	/^	compat_uint_t dxfer_len;		\/* [i] byte count of data transfer *\/$/;"	m	struct:sg_io_hdr32	file:
dxferp	fs/compat_ioctl.c	/^	compat_uint_t dxferp;		\/* [i], [*io] points to data transfer memory$/;"	m	struct:sg_io_hdr32	file:
dynamic_debug_setup	kernel/module.c	/^static void dynamic_debug_setup(struct _ddebug *debug, unsigned int num)$/;"	f	file:
dynamic_dname	fs/dcache.c	/^char *dynamic_dname(struct dentry *dentry, char *buffer, int buflen,$/;"	f
dyntick_save_progress_counter	kernel/rcutree.c	/^static int dyntick_save_progress_counter(struct rcu_data *rdp)$/;"	f	file:
dynticks	kernel/rcutree.h	/^	int dynticks;		\/* Even value for dynticks-idle, else odd. *\/$/;"	m	struct:rcu_dynticks
dynticks	kernel/rcutree.h	/^	struct rcu_dynticks *dynticks;	\/* Shared per-CPU dynticks state. *\/$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_dynticks
dynticks_fqs	kernel/rcutree.h	/^	unsigned long dynticks_fqs;	\/* Kicked due to dynticks idle. *\/$/;"	m	struct:rcu_data
dynticks_nesting	kernel/rcutree.h	/^	int dynticks_nesting;	\/* Track nesting level, sort of. *\/$/;"	m	struct:rcu_dynticks
dynticks_nmi	kernel/rcutree.h	/^	int dynticks_nmi;	\/* Even value for either dynticks-idle or *\/$/;"	m	struct:rcu_dynticks
dynticks_nmi_snap	kernel/rcutree.h	/^	int dynticks_nmi_snap;		\/* Per-GP tracking for dynticks_nmi. *\/$/;"	m	struct:rcu_data
dynticks_snap	kernel/rcutree.h	/^	int dynticks_snap;		\/* Per-GP tracking for dynticks. *\/$/;"	m	struct:rcu_data
each_symbol	kernel/module.c	/^EXPORT_SYMBOL_GPL(each_symbol);$/;"	v
each_symbol	kernel/module.c	/^bool each_symbol(bool (*fn)(const struct symsearch *arr, struct module *owner,$/;"	f
each_symbol_in_section	kernel/module.c	/^static bool each_symbol_in_section(const struct symsearch *arr,$/;"	f	file:
early_alloc	mm/kmemleak.c	/^static void early_alloc(struct early_log *log)$/;"	f	file:
early_boot_irqs_enabled	kernel/lockdep.c	/^static int early_boot_irqs_enabled;$/;"	v	file:
early_boot_irqs_off	kernel/lockdep.c	/^void early_boot_irqs_off(void)$/;"	f
early_boot_irqs_on	kernel/lockdep.c	/^void early_boot_irqs_on(void)$/;"	f
early_calculate_totalpages	mm/page_alloc.c	/^static unsigned long __init early_calculate_totalpages(void)$/;"	f	file:
early_irq_init	kernel/softirq.c	/^int __init __weak early_irq_init(void)$/;"	f
early_kmem_cache_node_alloc	mm/slub.c	/^static void early_kmem_cache_node_alloc(gfp_t gfpflags, int node)$/;"	f	file:
early_log	mm/kmemleak.c	/^struct early_log {$/;"	s	file:
early_node_map	mm/page_alloc.c	/^  static struct node_active_region __meminitdata early_node_map[MAX_ACTIVE_REGIONS];$/;"	v	typeref:struct:__meminitdata	file:
early_pfn_in_nid	mm/page_alloc.c	/^bool __meminit early_pfn_in_nid(unsigned long pfn, int node)$/;"	f
early_pfn_to_nid	mm/page_alloc.c	/^int __meminit early_pfn_to_nid(unsigned long pfn)$/;"	f
early_printk	kernel/printk.c	/^void asmlinkage __attribute__((weak)) early_printk(const char *fmt, ...)$/;"	f
effective	kernel/auditsc.c	/^		kernel_cap_t	effective;	\/* effective set of a process *\/$/;"	m	union:audit_cap_data::__anon21	file:
effective_load	kernel/sched_fair.c	/^static inline unsigned long effective_load(struct task_group *tg, int cpu,$/;"	f	file:
effective_load	kernel/sched_fair.c	/^static long effective_load(struct task_group *tg, int cpu,$/;"	f	file:
effective_prio	kernel/sched.c	/^static int effective_prio(struct task_struct *p)$/;"	f	file:
egid	kernel/auditsc.c	/^	gid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
element	kernel/lockdep.c	/^	unsigned long element[MAX_CIRCULAR_QUEUE_SIZE];$/;"	m	struct:circular_queue	file:
elf_addr_t	fs/compat_binfmt_elf.c	32;"	d	file:
elf_addr_t	fs/compat_binfmt_elf.c	36;"	d	file:
elf_caddr_t	fs/binfmt_elf_fdpic.c	/^typedef char *elf_caddr_t;$/;"	t	file:
elf_check_arch	fs/compat_binfmt_elf.c	69;"	d	file:
elf_check_arch	fs/compat_binfmt_elf.c	70;"	d	file:
elf_core_dump	fs/binfmt_elf.c	/^static int elf_core_dump(struct coredump_params *cprm)$/;"	f	file:
elf_core_dump	fs/binfmt_elf.c	50;"	d	file:
elf_dump_thread_status	fs/binfmt_elf.c	/^static int elf_dump_thread_status(long signr, struct elf_thread_status *t)$/;"	f	file:
elf_dump_thread_status	fs/binfmt_elf_fdpic.c	/^static int elf_dump_thread_status(long signr, struct elf_thread_status *t)$/;"	f	file:
elf_fdpic_core_dump	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_core_dump(struct coredump_params *cprm)$/;"	f	file:
elf_fdpic_dump_segments	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_dump_segments(struct file *file, size_t *size,$/;"	f	file:
elf_fdpic_fetch_phdrs	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_fetch_phdrs(struct elf_fdpic_params *params,$/;"	f	file:
elf_fdpic_format	fs/binfmt_elf_fdpic.c	/^static struct linux_binfmt elf_fdpic_format = {$/;"	v	typeref:struct:linux_binfmt	file:
elf_fdpic_map_file	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_map_file(struct elf_fdpic_params *params,$/;"	f	file:
elf_fdpic_map_file_by_direct_mmap	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_map_file_by_direct_mmap(struct elf_fdpic_params *params,$/;"	f	file:
elf_fdpic_map_file_constdisp_on_uclinux	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_map_file_constdisp_on_uclinux($/;"	f	file:
elf_fdpic_transfer_args_to_stack	fs/binfmt_elf_fdpic.c	/^static int elf_fdpic_transfer_args_to_stack(struct linux_binprm *bprm,$/;"	f	file:
elf_format	fs/binfmt_elf.c	/^static struct linux_binfmt elf_format = {$/;"	v	typeref:struct:linux_binfmt	file:
elf_format	fs/compat_binfmt_elf.c	124;"	d	file:
elf_map	fs/binfmt_elf.c	/^static unsigned long elf_map(struct file *filep, unsigned long addr,$/;"	f	file:
elf_note	fs/compat_binfmt_elf.c	31;"	d	file:
elf_note	fs/compat_binfmt_elf.c	35;"	d	file:
elf_note_info	fs/binfmt_elf.c	/^struct elf_note_info {$/;"	s	file:
elf_note_info_init	fs/binfmt_elf.c	/^static int elf_note_info_init(struct elf_note_info *info)$/;"	f	file:
elf_phdr	fs/compat_binfmt_elf.c	30;"	d	file:
elf_phdr	fs/compat_binfmt_elf.c	34;"	d	file:
elf_prpsinfo	fs/compat_binfmt_elf.c	43;"	d	file:
elf_prstatus	fs/compat_binfmt_elf.c	42;"	d	file:
elf_thread_core_info	fs/binfmt_elf.c	/^struct elf_thread_core_info {$/;"	s	file:
elf_thread_status	fs/binfmt_elf.c	/^struct elf_thread_status$/;"	s	file:
elf_thread_status	fs/binfmt_elf_fdpic.c	/^struct elf_thread_status$/;"	s	file:
elf_type	kernel/module.c	/^static char elf_type(const Elf_Sym *sym,$/;"	f	file:
elfhdr	fs/compat_binfmt_elf.c	29;"	d	file:
elfhdr	fs/compat_binfmt_elf.c	33;"	d	file:
eligible_child	kernel/exit.c	/^static int eligible_child(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
eligible_pid	kernel/exit.c	/^static int eligible_pid(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
em86_format	fs/binfmt_em86.c	/^static struct linux_binfmt em86_format = {$/;"	v	typeref:struct:linux_binfmt	file:
emergency_remount	fs/super.c	/^void emergency_remount(void)$/;"	f
emergency_restart	kernel/sys.c	/^EXPORT_SYMBOL_GPL(emergency_restart);$/;"	v
emergency_restart	kernel/sys.c	/^void emergency_restart(void)$/;"	f
emergency_sync	fs/sync.c	/^void emergency_sync(void)$/;"	f
emergency_thaw_all	fs/buffer.c	/^void emergency_thaw_all(void)$/;"	f
emit_log_char	kernel/printk.c	/^static void emit_log_char(char c)$/;"	f	file:
enable_cpucache	mm/slab.c	/^static int enable_cpucache(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
enable_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(enable_kprobe);$/;"	v
enable_kprobe	kernel/kprobes.c	/^int __kprobes enable_kprobe(struct kprobe *kp)$/;"	f
enable_nonboot_cpus	kernel/cpu.c	/^void __ref enable_nonboot_cpus(void)$/;"	f
enable_runtime	kernel/sched_rt.c	/^static void enable_runtime(struct rq *rq)$/;"	f	file:
enable_swap_cgroup	mm/memcontrol.c	/^static void __init enable_swap_cgroup(void)$/;"	f	file:
enabled	fs/binfmt_misc.c	/^static int enabled = 1;$/;"	v	file:
encode_comp2_t	kernel/acct.c	/^static comp2_t encode_comp2_t(u64 value)$/;"	f	file:
encode_comp_t	kernel/acct.c	/^static comp_t encode_comp_t(unsigned long value)$/;"	f	file:
encode_float	kernel/acct.c	/^static u32 encode_float(u64 value)$/;"	f	file:
end_bio_bh_io_sync	fs/buffer.c	/^static void end_bio_bh_io_sync(struct bio *bio, int err)$/;"	f	file:
end_buffer_async_read	fs/buffer.c	/^static void end_buffer_async_read(struct buffer_head *bh, int uptodate)$/;"	f	file:
end_buffer_async_write	fs/buffer.c	/^EXPORT_SYMBOL(end_buffer_async_write);$/;"	v
end_buffer_async_write	fs/buffer.c	/^void end_buffer_async_write(struct buffer_head *bh, int uptodate)$/;"	f
end_buffer_read_nobh	fs/buffer.c	/^static void end_buffer_read_nobh(struct buffer_head *bh, int uptodate)$/;"	f	file:
end_buffer_read_sync	fs/buffer.c	/^EXPORT_SYMBOL(end_buffer_read_sync);$/;"	v
end_buffer_read_sync	fs/buffer.c	/^void end_buffer_read_sync(struct buffer_head *bh, int uptodate)$/;"	f
end_buffer_write_sync	fs/buffer.c	/^EXPORT_SYMBOL(end_buffer_write_sync);$/;"	v
end_buffer_write_sync	fs/buffer.c	/^void end_buffer_write_sync(struct buffer_head *bh, int uptodate)$/;"	f
end_io	fs/direct-io.c	/^	dio_iodone_t *end_io;		\/* IO completion function *\/$/;"	m	struct:dio	file:
end_page_writeback	mm/filemap.c	/^EXPORT_SYMBOL(end_page_writeback);$/;"	v
end_page_writeback	mm/filemap.c	/^void end_page_writeback(struct page *page)$/;"	f
end_swap_bio_read	mm/page_io.c	/^void end_swap_bio_read(struct bio *bio, int err)$/;"	f
end_swap_bio_write	mm/page_io.c	/^static void end_swap_bio_write(struct bio *bio, int err)$/;"	f	file:
enqueue_entity	kernel/sched_fair.c	/^enqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)$/;"	f	file:
enqueue_hrtimer	kernel/hrtimer.c	/^static int enqueue_hrtimer(struct hrtimer *timer,$/;"	f	file:
enqueue_huge_page	mm/hugetlb.c	/^static void enqueue_huge_page(struct hstate *h, struct page *page)$/;"	f	file:
enqueue_pushable_task	kernel/sched_rt.c	/^static inline void enqueue_pushable_task(struct rq *rq, struct task_struct *p)$/;"	f	file:
enqueue_pushable_task	kernel/sched_rt.c	/^static void enqueue_pushable_task(struct rq *rq, struct task_struct *p)$/;"	f	file:
enqueue_rt_entity	kernel/sched_rt.c	/^static void enqueue_rt_entity(struct sched_rt_entity *rt_se)$/;"	f	file:
enqueue_sleeper	kernel/sched_fair.c	/^static void enqueue_sleeper(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
enqueue_task	kernel/sched.c	/^static void enqueue_task(struct rq *rq, struct task_struct *p, int wakeup)$/;"	f	file:
enqueue_task_fair	kernel/sched_fair.c	/^static void enqueue_task_fair(struct rq *rq, struct task_struct *p, int wakeup)$/;"	f	file:
enqueue_task_rt	kernel/sched_rt.c	/^static void enqueue_task_rt(struct rq *rq, struct task_struct *p, int wakeup)$/;"	f	file:
entity_before	kernel/sched_fair.c	/^static inline int entity_before(struct sched_entity *a,$/;"	f	file:
entity_is_task	kernel/sched_fair.c	107;"	d	file:
entity_is_task	kernel/sched_fair.c	220;"	d	file:
entity_key	kernel/sched_fair.c	/^static inline s64 entity_key(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
entity_tick	kernel/sched_fair.c	/^entity_tick(struct cfs_rq *cfs_rq, struct sched_entity *curr, int queued)$/;"	f	file:
entries	fs/select.c	/^	struct poll_table_entry entries[0];$/;"	m	struct:poll_table_page	typeref:struct:poll_table_page::poll_table_entry	file:
entries	fs/select.c	/^	struct pollfd entries[0];$/;"	m	struct:poll_list	typeref:struct:poll_list::pollfd	file:
entries	mm/slab.c	/^	void *entries[BOOT_CPUCACHE_ENTRIES];$/;"	m	struct:arraycache_init	file:
entry	fs/binfmt_flat.c	/^		unsigned long entry;			\/* Start address for this module *\/$/;"	m	struct:lib_info::__anon13	file:
entry	fs/select.c	/^	struct poll_table_entry * entry;$/;"	m	struct:poll_table_page	typeref:struct:poll_table_page::poll_table_entry	file:
entry	mm/slab.c	/^	void *entry[];	\/*$/;"	m	struct:array_cache	file:
entry_count	fs/binfmt_misc.c	/^static int entry_count;$/;"	v	file:
entry_count	kernel/async.c	/^static atomic_t entry_count;$/;"	v	file:
entry_handler	kernel/test_kprobes.c	/^static int entry_handler(struct kretprobe_instance *ri, struct pt_regs *regs)$/;"	f	file:
entry_status	fs/binfmt_misc.c	/^static void entry_status(Node *e, char *page)$/;"	f	file:
envc	kernel/auditsc.c	/^	int envc;$/;"	m	struct:audit_aux_data_execve	file:
envp	kernel/kmod.c	/^	char **envp;$/;"	m	struct:subprocess_info	file:
ep	fs/eventpoll.c	/^	struct eventpoll *ep;$/;"	m	struct:epitem	typeref:struct:epitem::eventpoll	file:
ep_alloc	fs/eventpoll.c	/^static int ep_alloc(struct eventpoll **pep)$/;"	f	file:
ep_call_nested	fs/eventpoll.c	/^static int ep_call_nested(struct nested_calls *ncalls, int max_nests,$/;"	f	file:
ep_cmp_ffd	fs/eventpoll.c	/^static inline int ep_cmp_ffd(struct epoll_filefd *p1,$/;"	f	file:
ep_eventpoll_poll	fs/eventpoll.c	/^static unsigned int ep_eventpoll_poll(struct file *file, poll_table *wait)$/;"	f	file:
ep_eventpoll_release	fs/eventpoll.c	/^static int ep_eventpoll_release(struct inode *inode, struct file *file)$/;"	f	file:
ep_find	fs/eventpoll.c	/^static struct epitem *ep_find(struct eventpoll *ep, struct file *file, int fd)$/;"	f	file:
ep_free	fs/eventpoll.c	/^static void ep_free(struct eventpoll *ep)$/;"	f	file:
ep_insert	fs/eventpoll.c	/^static int ep_insert(struct eventpoll *ep, struct epoll_event *event,$/;"	f	file:
ep_is_linked	fs/eventpoll.c	/^static inline int ep_is_linked(struct list_head *p)$/;"	f	file:
ep_item_from_epqueue	fs/eventpoll.c	/^static inline struct epitem *ep_item_from_epqueue(poll_table *p)$/;"	f	file:
ep_item_from_wait	fs/eventpoll.c	/^static inline struct epitem *ep_item_from_wait(wait_queue_t *p)$/;"	f	file:
ep_modify	fs/eventpoll.c	/^static int ep_modify(struct eventpoll *ep, struct epitem *epi, struct epoll_event *event)$/;"	f	file:
ep_nested_calls_init	fs/eventpoll.c	/^static void ep_nested_calls_init(struct nested_calls *ncalls)$/;"	f	file:
ep_op_has_event	fs/eventpoll.c	/^static inline int ep_op_has_event(int op)$/;"	f	file:
ep_poll	fs/eventpoll.c	/^static int ep_poll(struct eventpoll *ep, struct epoll_event __user *events,$/;"	f	file:
ep_poll_callback	fs/eventpoll.c	/^static int ep_poll_callback(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
ep_poll_readyevents_proc	fs/eventpoll.c	/^static int ep_poll_readyevents_proc(void *priv, void *cookie, int call_nests)$/;"	f	file:
ep_poll_safewake	fs/eventpoll.c	/^static void ep_poll_safewake(wait_queue_head_t *wq)$/;"	f	file:
ep_poll_wakeup_proc	fs/eventpoll.c	/^static int ep_poll_wakeup_proc(void *priv, void *cookie, int call_nests)$/;"	f	file:
ep_pqueue	fs/eventpoll.c	/^struct ep_pqueue {$/;"	s	file:
ep_ptable_queue_proc	fs/eventpoll.c	/^static void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead,$/;"	f	file:
ep_rbtree_insert	fs/eventpoll.c	/^static void ep_rbtree_insert(struct eventpoll *ep, struct epitem *epi)$/;"	f	file:
ep_read_events_proc	fs/eventpoll.c	/^static int ep_read_events_proc(struct eventpoll *ep, struct list_head *head,$/;"	f	file:
ep_remove	fs/eventpoll.c	/^static int ep_remove(struct eventpoll *ep, struct epitem *epi)$/;"	f	file:
ep_scan_ready_list	fs/eventpoll.c	/^static int ep_scan_ready_list(struct eventpoll *ep,$/;"	f	file:
ep_send_events	fs/eventpoll.c	/^static int ep_send_events(struct eventpoll *ep,$/;"	f	file:
ep_send_events_data	fs/eventpoll.c	/^struct ep_send_events_data {$/;"	s	file:
ep_send_events_proc	fs/eventpoll.c	/^static int ep_send_events_proc(struct eventpoll *ep, struct list_head *head,$/;"	f	file:
ep_set_ffd	fs/eventpoll.c	/^static inline void ep_set_ffd(struct epoll_filefd *ffd,$/;"	f	file:
ep_unregister_pollwait	fs/eventpoll.c	/^static void ep_unregister_pollwait(struct eventpoll *ep, struct epitem *epi)$/;"	f	file:
ep_wake_up_nested	fs/eventpoll.c	/^static inline void ep_wake_up_nested(wait_queue_head_t *wqueue,$/;"	f	file:
epi	fs/eventpoll.c	/^	struct epitem *epi;$/;"	m	struct:ep_pqueue	typeref:struct:ep_pqueue::epitem	file:
epitem	fs/eventpoll.c	/^struct epitem {$/;"	s	file:
epoll_filefd	fs/eventpoll.c	/^struct epoll_filefd {$/;"	s	file:
epoll_table	fs/eventpoll.c	/^ctl_table epoll_table[] = {$/;"	v
eppoll_entry	fs/eventpoll.c	/^struct eppoll_entry {$/;"	s	file:
err_code	kernel/kgdb.c	/^	int			err_code;$/;"	m	struct:kgdb_state	file:
error	fs/compat.c	/^	int error;$/;"	m	struct:compat_getdents_callback	file:
error	fs/compat.c	/^	int error;$/;"	m	struct:compat_getdents_callback64	file:
error	fs/readdir.c	/^	int error;$/;"	m	struct:getdents_callback	file:
error	fs/readdir.c	/^	int error;$/;"	m	struct:getdents_callback64	file:
error_packet	kernel/kgdb.c	/^static void error_packet(char *pkt, int error)$/;"	f	file:
error_states	mm/memory-failure.c	/^} error_states[] = {$/;"	v	typeref:struct:page_state	file:
errors	kernel/test_kprobes.c	/^static int errors, handler_errors, num_tests;$/;"	v	file:
estimate_accuracy	fs/select.c	/^static long estimate_accuracy(struct timespec *tv)$/;"	f	file:
euid	kernel/auditsc.c	/^	uid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
event	fs/eventpoll.c	/^	struct epoll_event event;$/;"	m	struct:epitem	typeref:struct:epitem::epoll_event	file:
event	fs/namespace.c	/^static int event;$/;"	v	file:
event	kernel/rtmutex-tester.c	/^	int			event;$/;"	m	struct:test_thread_data	file:
event_id	kernel/perf_event.c	/^	} event_id;$/;"	m	struct:perf_comm_event	typeref:struct:perf_comm_event::__anon38	file:
event_id	kernel/perf_event.c	/^	} event_id;$/;"	m	struct:perf_mmap_event	typeref:struct:perf_mmap_event::__anon39	file:
event_id	kernel/perf_event.c	/^	} event_id;$/;"	m	struct:perf_task_event	typeref:struct:perf_task_event::__anon37	file:
event_sched_in	kernel/perf_event.c	/^event_sched_in(struct perf_event *event,$/;"	f	file:
event_sched_out	kernel/perf_event.c	/^event_sched_out(struct perf_event *event,$/;"	f	file:
eventfd_ctx	fs/eventfd.c	/^struct eventfd_ctx {$/;"	s	file:
eventfd_ctx_do_read	fs/eventfd.c	/^static void eventfd_ctx_do_read(struct eventfd_ctx *ctx, __u64 *cnt)$/;"	f	file:
eventfd_ctx_fdget	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_fdget);$/;"	v
eventfd_ctx_fdget	fs/eventfd.c	/^struct eventfd_ctx *eventfd_ctx_fdget(int fd)$/;"	f
eventfd_ctx_fileget	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_fileget);$/;"	v
eventfd_ctx_fileget	fs/eventfd.c	/^struct eventfd_ctx *eventfd_ctx_fileget(struct file *file)$/;"	f
eventfd_ctx_get	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_get);$/;"	v
eventfd_ctx_get	fs/eventfd.c	/^struct eventfd_ctx *eventfd_ctx_get(struct eventfd_ctx *ctx)$/;"	f
eventfd_ctx_put	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_put);$/;"	v
eventfd_ctx_put	fs/eventfd.c	/^void eventfd_ctx_put(struct eventfd_ctx *ctx)$/;"	f
eventfd_ctx_read	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_read);$/;"	v
eventfd_ctx_read	fs/eventfd.c	/^ssize_t eventfd_ctx_read(struct eventfd_ctx *ctx, int no_wait, __u64 *cnt)$/;"	f
eventfd_ctx_remove_wait_queue	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_ctx_remove_wait_queue);$/;"	v
eventfd_ctx_remove_wait_queue	fs/eventfd.c	/^int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *ctx, wait_queue_t *wait,$/;"	f
eventfd_fget	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_fget);$/;"	v
eventfd_fget	fs/eventfd.c	/^struct file *eventfd_fget(int fd)$/;"	f
eventfd_file_create	fs/eventfd.c	/^struct file *eventfd_file_create(unsigned int count, int flags)$/;"	f
eventfd_fops	fs/eventfd.c	/^static const struct file_operations eventfd_fops = {$/;"	v	typeref:struct:file_operations	file:
eventfd_free	fs/eventfd.c	/^static void eventfd_free(struct kref *kref)$/;"	f	file:
eventfd_free_ctx	fs/eventfd.c	/^static void eventfd_free_ctx(struct eventfd_ctx *ctx)$/;"	f	file:
eventfd_poll	fs/eventfd.c	/^static unsigned int eventfd_poll(struct file *file, poll_table *wait)$/;"	f	file:
eventfd_read	fs/eventfd.c	/^static ssize_t eventfd_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
eventfd_release	fs/eventfd.c	/^static int eventfd_release(struct inode *inode, struct file *file)$/;"	f	file:
eventfd_signal	fs/eventfd.c	/^EXPORT_SYMBOL_GPL(eventfd_signal);$/;"	v
eventfd_signal	fs/eventfd.c	/^int eventfd_signal(struct eventfd_ctx *ctx, int n)$/;"	f
eventfd_write	fs/eventfd.c	/^static ssize_t eventfd_write(struct file *file, const char __user *buf, size_t count,$/;"	f	file:
eventpoll	fs/eventpoll.c	/^struct eventpoll {$/;"	s	file:
eventpoll_fops	fs/eventpoll.c	/^static const struct file_operations eventpoll_fops = {$/;"	v	typeref:struct:file_operations	file:
eventpoll_init	fs/eventpoll.c	/^fs_initcall(eventpoll_init);$/;"	v
eventpoll_init	fs/eventpoll.c	/^static int __init eventpoll_init(void)$/;"	f	file:
eventpoll_release_file	fs/eventpoll.c	/^void eventpoll_release_file(struct file *file)$/;"	f
events	fs/eventpoll.c	/^	struct epoll_event __user *events;$/;"	m	struct:ep_send_events_data	typeref:struct:ep_send_events_data::__user	file:
evict_chunk	kernel/audit_tree.c	/^static void evict_chunk(struct audit_chunk *chunk)$/;"	f	file:
ex32_anon_gid	fs/compat.c	/^	__compat_gid_t	ex32_anon_gid;$/;"	m	struct:compat_nfsctl_export	file:
ex32_anon_uid	fs/compat.c	/^	__compat_uid_t	ex32_anon_uid;$/;"	m	struct:compat_nfsctl_export	file:
ex32_client	fs/compat.c	/^	char		ex32_client[NFSCLNT_IDMAX+1];$/;"	m	struct:compat_nfsctl_export	file:
ex32_dev	fs/compat.c	/^	compat_dev_t	ex32_dev;$/;"	m	struct:compat_nfsctl_export	file:
ex32_flags	fs/compat.c	/^	compat_int_t	ex32_flags;$/;"	m	struct:compat_nfsctl_export	file:
ex32_ino	fs/compat.c	/^	compat_ino_t	ex32_ino;$/;"	m	struct:compat_nfsctl_export	file:
ex32_path	fs/compat.c	/^	char		ex32_path[NFS_MAXPATHLEN+1];$/;"	m	struct:compat_nfsctl_export	file:
ex_vector	kernel/kgdb.c	/^	int			ex_vector;$/;"	m	struct:kgdb_state	file:
exact_copy_from_user	fs/namespace.c	/^static long exact_copy_from_user(void *to, const void __user * from,$/;"	f	file:
exact_lock	fs/char_dev.c	/^static int exact_lock(dev_t dev, void *data)$/;"	f	file:
exact_match	fs/char_dev.c	/^static struct kobject *exact_match(dev_t dev, int *part, void *data)$/;"	f	file:
exception_level	kernel/kgdb.c	/^static int			exception_level;$/;"	v	file:
exclusive_bit	kernel/lockdep.c	/^static int exclusive_bit(int new_bit)$/;"	f	file:
exec_clock	kernel/sched.c	/^	u64 exec_clock;$/;"	m	struct:cfs_rq	file:
exec_domains	kernel/exec_domain.c	/^static struct exec_domain *exec_domains = &default_exec_domain;$/;"	v	typeref:struct:exec_domain	file:
exec_mmap	fs/exec.c	/^static int exec_mmap(struct mm_struct *mm)$/;"	f	file:
exec_permission	fs/namei.c	/^static int exec_permission(struct inode *inode)$/;"	f	file:
execdomains_proc_fops	kernel/exec_domain.c	/^static const struct file_operations execdomains_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
execdomains_proc_open	kernel/exec_domain.c	/^static int execdomains_proc_open(struct inode *inode, struct file *file)$/;"	f	file:
execdomains_proc_show	kernel/exec_domain.c	/^static int execdomains_proc_show(struct seq_file *m, void *v)$/;"	f	file:
execute_in_process_context	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(execute_in_process_context);$/;"	v
execute_in_process_context	kernel/workqueue.c	/^int execute_in_process_context(work_func_t fn, struct execute_work *ew)$/;"	f
exit_aio	fs/aio.c	/^void exit_aio(struct mm_struct *mm)$/;"	f
exit_aout_binfmt	fs/binfmt_aout.c	/^module_exit(exit_aout_binfmt);$/;"	v
exit_aout_binfmt	fs/binfmt_aout.c	/^static void __exit exit_aout_binfmt(void)$/;"	f	file:
exit_creds	kernel/cred.c	/^void exit_creds(struct task_struct *tsk)$/;"	f
exit_elf_binfmt	fs/binfmt_elf.c	/^module_exit(exit_elf_binfmt);$/;"	v
exit_elf_binfmt	fs/binfmt_elf.c	/^static void __exit exit_elf_binfmt(void)$/;"	f	file:
exit_elf_binfmt	fs/compat_binfmt_elf.c	126;"	d	file:
exit_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^module_exit(exit_elf_fdpic_binfmt);$/;"	v
exit_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^static void __exit exit_elf_fdpic_binfmt(void)$/;"	f	file:
exit_em86_binfmt	fs/binfmt_em86.c	/^module_exit(exit_em86_binfmt);$/;"	v
exit_em86_binfmt	fs/binfmt_em86.c	/^static void __exit exit_em86_binfmt(void)$/;"	f	file:
exit_files	kernel/exit.c	/^void exit_files(struct task_struct *tsk)$/;"	f
exit_fs	fs/fs_struct.c	/^void exit_fs(struct task_struct *tsk)$/;"	f
exit_itimers	kernel/posix-timers.c	/^void exit_itimers(struct signal_struct *sig)$/;"	f
exit_mbcache	fs/mbcache.c	/^static void __exit exit_mbcache(void)$/;"	f	file:
exit_misc_binfmt	fs/binfmt_misc.c	/^module_exit(exit_misc_binfmt);$/;"	v
exit_misc_binfmt	fs/binfmt_misc.c	/^static void __exit exit_misc_binfmt(void)$/;"	f	file:
exit_mm	kernel/exit.c	/^static void exit_mm(struct task_struct * tsk)$/;"	f	file:
exit_mmap	mm/mmap.c	/^void exit_mmap(struct mm_struct *mm)$/;"	f
exit_mmap	mm/nommu.c	/^void exit_mmap(struct mm_struct *mm)$/;"	f
exit_notify	kernel/exit.c	/^static void exit_notify(struct task_struct *tsk, int group_dead)$/;"	f	file:
exit_pi_state_list	kernel/futex.c	/^void exit_pi_state_list(struct task_struct *curr)$/;"	f
exit_pipe_fs	fs/pipe.c	/^module_exit(exit_pipe_fs);$/;"	v
exit_pipe_fs	fs/pipe.c	/^static void __exit exit_pipe_fs(void)$/;"	f	file:
exit_ptrace	kernel/ptrace.c	/^void exit_ptrace(struct task_struct *tracer)$/;"	f
exit_rcu	kernel/rcutree_plugin.h	/^void exit_rcu(void)$/;"	f
exit_robust_list	kernel/futex.c	/^void exit_robust_list(struct task_struct *curr)$/;"	f
exit_script_binfmt	fs/binfmt_script.c	/^module_exit(exit_script_binfmt);$/;"	v
exit_script_binfmt	fs/binfmt_script.c	/^static void __exit exit_script_binfmt(void)$/;"	f	file:
exit_signals	kernel/signal.c	/^void exit_signals(struct task_struct *tsk)$/;"	f
exit_som_binfmt	fs/binfmt_som.c	/^module_exit(exit_som_binfmt);$/;"	v
exit_som_binfmt	fs/binfmt_som.c	/^static void __exit exit_som_binfmt(void)$/;"	f	file:
exit_task_namespaces	kernel/nsproxy.c	/^void exit_task_namespaces(struct task_struct *p)$/;"	f
exited	kernel/kthread.c	/^	struct completion exited;$/;"	m	struct:kthread	typeref:struct:kthread::completion	file:
exitf	kernel/backtracetest.c	/^module_exit(exitf);$/;"	v
exitf	kernel/backtracetest.c	/^static void exitf(void)$/;"	f	file:
expand	mm/page_alloc.c	/^static inline void expand(struct zone *zone, struct page *page,$/;"	f	file:
expand_downwards	mm/mmap.c	/^static int expand_downwards(struct vm_area_struct *vma,$/;"	f	file:
expand_files	fs/file.c	/^int expand_files(struct files_struct *files, int nr)$/;"	f
expand_stack	mm/mmap.c	/^int expand_stack(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_stack	mm/nommu.c	/^int expand_stack(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_stack_downwards	mm/mmap.c	/^int expand_stack_downwards(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_upwards	mm/mmap.c	/^int expand_upwards(struct vm_area_struct *vma, unsigned long address)$/;"	f	file:
expired	fs/timerfd.c	/^	int expired;$/;"	m	struct:timerfd_ctx	file:
expires_gt	kernel/posix-cpu-timers.c	/^static inline int expires_gt(cputime_t expires, cputime_t new_exp)$/;"	f	file:
expires_le	kernel/posix-cpu-timers.c	/^static inline int expires_le(cputime_t expires, cputime_t new_exp)$/;"	f	file:
expmask	kernel/rcutree.h	/^	unsigned long expmask;	\/* Groups that have ->blocked_tasks[] *\/$/;"	m	struct:rcu_node
exported	kernel/kallsyms.c	/^	int exported;$/;"	m	struct:kallsym_iter	file:
f	mm/vmalloc.c	/^static int f(pte_t *pte, pgtable_t table, unsigned long addr, void *data)$/;"	f	file:
fE	kernel/auditsc.c	/^		unsigned int	fE;		\/* effective bit of a file capability *\/$/;"	m	union:audit_cap_data::__anon21	file:
f_delown	fs/fcntl.c	/^void f_delown(struct file *filp)$/;"	f
f_getown	fs/fcntl.c	/^pid_t f_getown(struct file *filp)$/;"	f
f_getown_ex	fs/fcntl.c	/^static int f_getown_ex(struct file *filp, unsigned long arg)$/;"	f	file:
f_modown	fs/fcntl.c	/^static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,$/;"	f	file:
f_setown	fs/fcntl.c	/^EXPORT_SYMBOL(f_setown);$/;"	v
f_setown	fs/fcntl.c	/^int f_setown(struct file *filp, unsigned long arg, int force)$/;"	f
f_setown_ex	fs/fcntl.c	/^static int f_setown_ex(struct file *filp, unsigned long arg)$/;"	f	file:
fadj	kernel/timeconst.pl	/^sub fadj($$$)$/;"	s
fadvise64	mm/fadvise.c	/^SYSCALL_DEFINE(fadvise64)(int fd, loff_t offset, size_t len, int advice)$/;"	f
fadvise64_64	mm/fadvise.c	/^SYSCALL_DEFINE(fadvise64_64)(int fd, loff_t offset, loff_t len, int advice)$/;"	f
fail_migrate_page	mm/migrate.c	/^EXPORT_SYMBOL(fail_migrate_page);$/;"	v
fail_migrate_page	mm/migrate.c	/^int fail_migrate_page(struct address_space *mapping,$/;"	f
fail_page_alloc	mm/page_alloc.c	/^} fail_page_alloc = {$/;"	v	typeref:struct:fail_page_alloc_attr	file:
fail_page_alloc_attr	mm/page_alloc.c	/^static struct fail_page_alloc_attr {$/;"	s	file:
fail_page_alloc_debugfs	mm/page_alloc.c	/^late_initcall(fail_page_alloc_debugfs);$/;"	v
fail_page_alloc_debugfs	mm/page_alloc.c	/^static int __init fail_page_alloc_debugfs(void)$/;"	f	file:
failslab	mm/failslab.c	/^} failslab = {$/;"	v	typeref:struct:__anon1	file:
failslab_debugfs_init	mm/failslab.c	/^late_initcall(failslab_debugfs_init);$/;"	v
failslab_debugfs_init	mm/failslab.c	/^static int __init failslab_debugfs_init(void)$/;"	f	file:
fair_sched_class	kernel/sched_fair.c	/^static const struct sched_class fair_sched_class = {$/;"	v	typeref:struct:sched_class	file:
fair_sched_class	kernel/sched_fair.c	/^static const struct sched_class fair_sched_class;$/;"	v	typeref:struct:sched_class	file:
fake_signal_wake_up	kernel/freezer.c	/^static void fake_signal_wake_up(struct task_struct *p)$/;"	f	file:
fakewriter_tasks	kernel/rcutorture.c	/^static struct task_struct **fakewriter_tasks;$/;"	v	typeref:struct:task_struct	file:
fallback_alloc	mm/slab.c	/^static void *fallback_alloc(struct kmem_cache *cache, gfp_t flags)$/;"	f	file:
fallback_doms	kernel/sched.c	/^static cpumask_var_t fallback_doms;$/;"	v	file:
fallback_migrate_page	mm/migrate.c	/^static int fallback_migrate_page(struct address_space *mapping,$/;"	f	file:
fallbacks	mm/page_alloc.c	/^static int fallbacks[MIGRATE_TYPES][MIGRATE_TYPES-1] = {$/;"	v	file:
fallocate	fs/open.c	/^SYSCALL_DEFINE(fallocate)(int fd, int mode, loff_t offset, loff_t len)$/;"	f
false	kernel/panic.c	/^	char	false;$/;"	m	struct:tnt	file:
family	kernel/taskstats.c	/^static struct genl_family family = {$/;"	v	typeref:struct:genl_family	file:
family_registered	kernel/taskstats.c	/^static int family_registered;$/;"	v	file:
fastpath_timer_check	kernel/posix-cpu-timers.c	/^static inline int fastpath_timer_check(struct task_struct *tsk)$/;"	f	file:
fasync_add_entry	fs/fcntl.c	/^static int fasync_add_entry(int fd, struct file *filp, struct fasync_struct **fapp)$/;"	f	file:
fasync_helper	fs/fcntl.c	/^EXPORT_SYMBOL(fasync_helper);$/;"	v
fasync_helper	fs/fcntl.c	/^int fasync_helper(int fd, struct file * filp, int on, struct fasync_struct **fapp)$/;"	f
fasync_init	fs/fcntl.c	/^static int __init fasync_init(void)$/;"	f	file:
fasync_remove_entry	fs/fcntl.c	/^static int fasync_remove_entry(struct file *filp, struct fasync_struct **fapp)$/;"	f	file:
fault_in_pages_readable	include/linux/pagemap.h	/^static inline int fault_in_pages_readable(const char __user *uaddr, int size)$/;"	f
fault_in_pages_writeable	include/linux/pagemap.h	/^static inline int fault_in_pages_writeable(char __user *uaddr, int size)$/;"	f
fault_in_user_writeable	kernel/futex.c	/^static int fault_in_user_writeable(u32 __user *uaddr)$/;"	f	file:
fcap	kernel/auditsc.c	/^	struct audit_cap_data	fcap;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_cap_data	file:
fcap	kernel/auditsc.c	/^	struct audit_cap_data fcap;$/;"	m	struct:audit_names	typeref:struct:audit_names::audit_cap_data	file:
fcap_ver	kernel/auditsc.c	/^	unsigned int		fcap_ver;$/;"	m	struct:audit_aux_data_bprm_fcaps	file:
fcap_ver	kernel/auditsc.c	/^	unsigned int	fcap_ver;$/;"	m	struct:audit_names	file:
fcntl_getlease	fs/locks.c	/^int fcntl_getlease(struct file *filp)$/;"	f
fcntl_getlk	fs/locks.c	/^int fcntl_getlk(struct file *filp, struct flock __user *l)$/;"	f
fcntl_getlk64	fs/locks.c	/^int fcntl_getlk64(struct file *filp, struct flock64 __user *l)$/;"	f
fcntl_setlease	fs/locks.c	/^int fcntl_setlease(unsigned int fd, struct file *filp, long arg)$/;"	f
fcntl_setlk	fs/locks.c	/^int fcntl_setlk(unsigned int fd, struct file *filp, unsigned int cmd,$/;"	f
fcntl_setlk64	fs/locks.c	/^int fcntl_setlk64(unsigned int fd, struct file *filp, unsigned int cmd,$/;"	f
fd	fs/eventpoll.c	/^	int fd;$/;"	m	struct:epoll_filefd	file:
fd_install	fs/open.c	/^EXPORT_SYMBOL(fd_install);$/;"	v
fd_install	fs/open.c	/^void fd_install(unsigned int fd, struct file *file)$/;"	f
fds	kernel/auditsc.c	/^	int fds[2];$/;"	m	struct:audit_context	file:
fdtable_defer	fs/file.c	/^struct fdtable_defer {$/;"	s	file:
fdtable_defer_list_init	fs/file.c	/^static void __devinit fdtable_defer_list_init(int cpu)$/;"	f	file:
fetch_bp_busy_slots	kernel/hw_breakpoint.c	/^fetch_bp_busy_slots(struct bp_busy_slots *slots, struct perf_event *bp)$/;"	f	file:
fetch_robust_entry	kernel/futex.c	/^static inline int fetch_robust_entry(struct robust_list __user **entry,$/;"	f	file:
fetch_robust_entry	kernel/futex_compat.c	/^fetch_robust_entry(compat_uptr_t *uentry, struct robust_list __user **entry,$/;"	f	file:
ffd	fs/eventpoll.c	/^	struct epoll_filefd ffd;$/;"	m	struct:epitem	typeref:struct:epitem::epoll_filefd	file:
fget	fs/file_table.c	/^EXPORT_SYMBOL(fget);$/;"	v
fget	fs/file_table.c	/^struct file *fget(unsigned int fd)$/;"	f
fget_light	fs/file_table.c	/^struct file *fget_light(unsigned int fd, int *fput_needed)$/;"	f
fiemap_check_flags	fs/ioctl.c	/^EXPORT_SYMBOL(fiemap_check_flags);$/;"	v
fiemap_check_flags	fs/ioctl.c	/^int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags)$/;"	f
fiemap_check_ranges	fs/ioctl.c	/^static int fiemap_check_ranges(struct super_block *sb,$/;"	f	file:
fiemap_fill_next_extent	fs/ioctl.c	/^EXPORT_SYMBOL(fiemap_fill_next_extent);$/;"	v
fiemap_fill_next_extent	fs/ioctl.c	/^int fiemap_fill_next_extent(struct fiemap_extent_info *fieinfo, u64 logical,$/;"	f
fifo_open	fs/fifo.c	/^static int fifo_open(struct inode *inode, struct file *filp)$/;"	f	file:
file	fs/eventpoll.c	/^	struct file *file;$/;"	m	struct:epoll_filefd	typeref:struct:epoll_filefd::file	file:
file	kernel/acct.c	/^	struct file		*file;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::file	file:
file_caps_disable	kernel/capability.c	/^static int __init file_caps_disable(char *str)$/;"	f	file:
file_caps_enabled	kernel/capability.c	/^int file_caps_enabled = 1;$/;"	v
file_free	fs/file_table.c	/^static inline void file_free(struct file *f)$/;"	f	file:
file_free_rcu	fs/file_table.c	/^static inline void file_free_rcu(struct rcu_head *head)$/;"	f	file:
file_fsync	fs/sync.c	/^EXPORT_SYMBOL(file_fsync);$/;"	v
file_fsync	fs/sync.c	/^int file_fsync(struct file *filp, struct dentry *dentry, int datasync)$/;"	f
file_ioctl	fs/ioctl.c	/^static int file_ioctl(struct file *filp, unsigned int cmd,$/;"	f	file:
file_kill	fs/file_table.c	/^void file_kill(struct file *file)$/;"	f
file_mode	fs/compat.c	/^	compat_mode_t file_mode;$/;"	m	struct:compat_ncp_mount_data	file:
file_mode	fs/compat.c	/^	compat_mode_t file_mode;$/;"	m	struct:compat_smb_mount_data	file:
file_mode	fs/compat.c	/^	compat_ulong_t file_mode;$/;"	m	struct:compat_ncp_mount_data_v4	file:
file_move	fs/file_table.c	/^void file_move(struct file *file, struct list_head *list)$/;"	f
file_name	kernel/perf_event.c	/^	const char		*file_name;$/;"	m	struct:perf_mmap_event	file:
file_permission	fs/namei.c	/^EXPORT_SYMBOL(file_permission);$/;"	v
file_permission	fs/namei.c	/^int file_permission(struct file *file, int mask)$/;"	f
file_pos_read	fs/read_write.c	/^static inline loff_t file_pos_read(struct file *file)$/;"	f	file:
file_pos_write	fs/read_write.c	/^static inline void file_pos_write(struct file *file, loff_t pos)$/;"	f	file:
file_ra_state_init	mm/readahead.c	/^EXPORT_SYMBOL_GPL(file_ra_state_init);$/;"	v
file_ra_state_init	mm/readahead.c	/^file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping)$/;"	f
file_read_actor	mm/filemap.c	/^int file_read_actor(read_descriptor_t *desc, struct page *page,$/;"	f
file_region	mm/hugetlb.c	/^struct file_region {$/;"	s	file:
file_remove_suid	mm/filemap.c	/^EXPORT_SYMBOL(file_remove_suid);$/;"	v
file_remove_suid	mm/filemap.c	/^int file_remove_suid(struct file *file)$/;"	f
file_size	kernel/perf_event.c	/^	int			file_size;$/;"	m	struct:perf_mmap_event	file:
file_systems	fs/filesystems.c	/^static struct file_system_type *file_systems;$/;"	v	typeref:struct:file_system_type	file:
file_update_time	fs/inode.c	/^EXPORT_SYMBOL(file_update_time);$/;"	v
file_update_time	fs/inode.c	/^void file_update_time(struct file *file)$/;"	f
filelock_init	fs/locks.c	/^core_initcall(filelock_init);$/;"	v
filelock_init	fs/locks.c	/^static int __init filelock_init(void)$/;"	f	file:
filemap_fault	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fault);$/;"	v
filemap_fault	mm/filemap.c	/^int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f
filemap_fault	mm/nommu.c	/^EXPORT_SYMBOL(filemap_fault);$/;"	v
filemap_fault	mm/nommu.c	/^int filemap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f
filemap_fdatawait	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait);$/;"	v
filemap_fdatawait	mm/filemap.c	/^int filemap_fdatawait(struct address_space *mapping)$/;"	f
filemap_fdatawait_range	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait_range);$/;"	v
filemap_fdatawait_range	mm/filemap.c	/^int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte,$/;"	f
filemap_fdatawrite	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawrite);$/;"	v
filemap_fdatawrite	mm/filemap.c	/^int filemap_fdatawrite(struct address_space *mapping)$/;"	f
filemap_fdatawrite_range	mm/filemap.c	/^EXPORT_SYMBOL(filemap_fdatawrite_range);$/;"	v
filemap_fdatawrite_range	mm/filemap.c	/^int filemap_fdatawrite_range(struct address_space *mapping, loff_t start,$/;"	f
filemap_flush	mm/filemap.c	/^EXPORT_SYMBOL(filemap_flush);$/;"	v
filemap_flush	mm/filemap.c	/^int filemap_flush(struct address_space *mapping)$/;"	f
filemap_write_and_wait	mm/filemap.c	/^EXPORT_SYMBOL(filemap_write_and_wait);$/;"	v
filemap_write_and_wait	mm/filemap.c	/^int filemap_write_and_wait(struct address_space *mapping)$/;"	f
filemap_write_and_wait_range	mm/filemap.c	/^EXPORT_SYMBOL(filemap_write_and_wait_range);$/;"	v
filemap_write_and_wait_range	mm/filemap.c	/^int filemap_write_and_wait_range(struct address_space *mapping,$/;"	f
files	kernel/cgroup.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files	kernel/cgroup_freezer.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files	kernel/cpuset.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files	kernel/sched.c	/^static struct cftype files[] = {$/;"	v	typeref:struct:cftype	file:
files_cachep	kernel/fork.c	/^struct kmem_cache *files_cachep;$/;"	v	typeref:struct:kmem_cache
files_defer_init	fs/file.c	/^void __init files_defer_init(void)$/;"	f
files_init	fs/file_table.c	/^void __init files_init(unsigned long mempages)$/;"	f
files_stat	fs/file_table.c	/^struct files_stat_struct files_stat = {$/;"	v	typeref:struct:files_stat_struct
filesystems_proc_fops	fs/filesystems.c	/^static const struct file_operations filesystems_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
filesystems_proc_open	fs/filesystems.c	/^static int filesystems_proc_open(struct inode *inode, struct file *file)$/;"	f	file:
filesystems_proc_show	fs/filesystems.c	/^static int filesystems_proc_show(struct seq_file *m, void *v)$/;"	f	file:
fill_auxv_note	fs/binfmt_elf.c	/^static void fill_auxv_note(struct memelfnote *note, struct mm_struct *mm)$/;"	f	file:
fill_elf_fdpic_header	fs/binfmt_elf_fdpic.c	/^static inline void fill_elf_fdpic_header(struct elfhdr *elf, int segs)$/;"	f	file:
fill_elf_header	fs/binfmt_elf.c	/^static void fill_elf_header(struct elfhdr *elf, int segs,$/;"	f	file:
fill_elf_note_phdr	fs/binfmt_elf.c	/^static void fill_elf_note_phdr(struct elf_phdr *phdr, int sz, loff_t offset)$/;"	f	file:
fill_elf_note_phdr	fs/binfmt_elf_fdpic.c	/^static inline void fill_elf_note_phdr(struct elf_phdr *phdr, int sz, loff_t offset)$/;"	f	file:
fill_note	fs/binfmt_elf.c	/^static void fill_note(struct memelfnote *note, const char *name, int type, $/;"	f	file:
fill_note	fs/binfmt_elf_fdpic.c	/^static inline void fill_note(struct memelfnote *note, const char *name, int type,$/;"	f	file:
fill_note_info	fs/binfmt_elf.c	/^static int fill_note_info(struct elfhdr *elf, int phdrs,$/;"	f	file:
fill_pid	kernel/taskstats.c	/^static int fill_pid(pid_t pid, struct task_struct *tsk,$/;"	f	file:
fill_prstatus	fs/binfmt_elf.c	/^static void fill_prstatus(struct elf_prstatus *prstatus,$/;"	f	file:
fill_prstatus	fs/binfmt_elf_fdpic.c	/^static void fill_prstatus(struct elf_prstatus *prstatus,$/;"	f	file:
fill_psinfo	fs/binfmt_elf.c	/^static int fill_psinfo(struct elf_prpsinfo *psinfo, struct task_struct *p,$/;"	f	file:
fill_psinfo	fs/binfmt_elf_fdpic.c	/^static int fill_psinfo(struct elf_prpsinfo *psinfo, struct task_struct *p,$/;"	f	file:
fill_tgid	kernel/taskstats.c	/^static int fill_tgid(pid_t tgid, struct task_struct *first,$/;"	f	file:
fill_tgid_exit	kernel/taskstats.c	/^static void fill_tgid_exit(struct task_struct *tsk)$/;"	f	file:
fill_thread_core_info	fs/binfmt_elf.c	/^static int fill_thread_core_info(struct elf_thread_core_info *t,$/;"	f	file:
filldir	fs/readdir.c	/^static int filldir(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
filldir64	fs/readdir.c	/^static int filldir64(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
filler_t	include/linux/pagemap.h	/^typedef int filler_t(void *, struct page *);$/;"	t
fillonedir	fs/readdir.c	/^static int fillonedir(void * __buf, const char * name, int namlen, loff_t offset,$/;"	f	file:
filp_close	fs/open.c	/^EXPORT_SYMBOL(filp_close);$/;"	v
filp_close	fs/open.c	/^int filp_close(struct file *filp, fl_owner_t id)$/;"	f
filp_open	fs/namei.c	/^EXPORT_SYMBOL(filp_open);$/;"	v
filp_open	fs/namei.c	/^struct file *filp_open(const char *filename, int flags, int mode)$/;"	f
filter	fs/compat_ioctl.c	/^	compat_caddr_t	filter;$/;"	m	struct:sock_fprog32	file:
filterkey	kernel/auditsc.c	/^	char *		    filterkey;	\/* key for rule that triggered record *\/$/;"	m	struct:audit_context	file:
final_block_in_bio	fs/direct-io.c	/^	sector_t final_block_in_bio;	\/* current final block in bio + 1 *\/$/;"	m	struct:dio	file:
final_block_in_request	fs/direct-io.c	/^	sector_t final_block_in_request;\/* doesn't change *\/$/;"	m	struct:dio	file:
final_note	kernel/kexec.c	/^static void final_note(u32 *buf)$/;"	f	file:
find_and_get_object	mm/kmemleak.c	/^static struct kmemleak_object *find_and_get_object(unsigned long ptr, int alias)$/;"	f	file:
find_bd_holder	fs/block_dev.c	/^static struct bd_holder *find_bd_holder(struct block_device *bdev,$/;"	f	file:
find_busiest_group	kernel/sched.c	/^find_busiest_group(struct sched_domain *sd, int this_cpu,$/;"	f	file:
find_busiest_queue	kernel/sched.c	/^find_busiest_queue(struct sched_group *group, enum cpu_idle_type idle,$/;"	f	file:
find_chunk	kernel/audit_tree.c	/^static struct audit_chunk *find_chunk(struct node *p)$/;"	f	file:
find_css_set	kernel/cgroup.c	/^static struct css_set *find_css_set($/;"	f	file:
find_dcookie	fs/dcookies.c	/^static struct dcookie_struct * find_dcookie(unsigned long dcookie)$/;"	f	file:
find_existing_css_set	kernel/cgroup.c	/^static struct css_set *find_existing_css_set($/;"	f	file:
find_extend_vma	mm/mmap.c	/^find_extend_vma(struct mm_struct * mm, unsigned long addr)$/;"	f
find_extend_vma	mm/mmap.c	/^find_extend_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_extend_vma	mm/nommu.c	/^struct vm_area_struct *find_extend_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_filesystem	fs/filesystems.c	/^static struct file_system_type **find_filesystem(const char *name, unsigned len)$/;"	f	file:
find_ge_pid	kernel/pid.c	/^struct pid *find_ge_pid(int nr, struct pid_namespace *ns)$/;"	f
find_get_context	kernel/perf_event.c	/^static struct perf_event_context *find_get_context(pid_t pid, int cpu)$/;"	f	file:
find_get_page	mm/filemap.c	/^EXPORT_SYMBOL(find_get_page);$/;"	v
find_get_page	mm/filemap.c	/^struct page *find_get_page(struct address_space *mapping, pgoff_t offset)$/;"	f
find_get_pages	mm/filemap.c	/^unsigned find_get_pages(struct address_space *mapping, pgoff_t start,$/;"	f
find_get_pages_contig	mm/filemap.c	/^EXPORT_SYMBOL(find_get_pages_contig);$/;"	v
find_get_pages_contig	mm/filemap.c	/^unsigned find_get_pages_contig(struct address_space *mapping, pgoff_t index,$/;"	f
find_get_pages_tag	mm/filemap.c	/^EXPORT_SYMBOL(find_get_pages_tag);$/;"	v
find_get_pages_tag	mm/filemap.c	/^unsigned find_get_pages_tag(struct address_space *mapping, pgoff_t *index,$/;"	f
find_get_pid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(find_get_pid);$/;"	v
find_get_pid	kernel/pid.c	/^struct pid *find_get_pid(pid_t nr)$/;"	f
find_idlest_cpu	kernel/sched_fair.c	/^find_idlest_cpu(struct sched_group *group, struct task_struct *p, int this_cpu)$/;"	f	file:
find_idlest_group	kernel/sched_fair.c	/^find_idlest_group(struct sched_domain *sd, struct task_struct *p,$/;"	f	file:
find_inode	fs/inode.c	/^static struct inode *find_inode(struct super_block *sb,$/;"	f	file:
find_inode_fast	fs/inode.c	/^static struct inode *find_inode_fast(struct super_block *sb,$/;"	f	file:
find_inode_number	fs/dcache.c	/^EXPORT_SYMBOL(find_inode_number);$/;"	v
find_inode_number	fs/dcache.c	/^ino_t find_inode_number(struct dentry *dir, struct qstr *name)$/;"	f
find_lock_lowest_rq	kernel/sched_rt.c	/^static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)$/;"	f	file:
find_lock_page	mm/filemap.c	/^EXPORT_SYMBOL(find_lock_page);$/;"	v
find_lock_page	mm/filemap.c	/^struct page *find_lock_page(struct address_space *mapping, pgoff_t offset)$/;"	f
find_lowest_rq	kernel/sched_rt.c	/^static int find_lowest_rq(struct task_struct *task)$/;"	f	file:
find_matching_se	kernel/sched_fair.c	/^find_matching_se(struct sched_entity **se, struct sched_entity **pse)$/;"	f	file:
find_mergeable	mm/slub.c	/^static struct kmem_cache *find_mergeable(size_t size,$/;"	f	file:
find_mergeable_anon_vma	mm/mmap.c	/^struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *vma)$/;"	f
find_min_pfn_for_node	mm/page_alloc.c	/^static unsigned long __init find_min_pfn_for_node(int nid)$/;"	f	file:
find_min_pfn_with_active_regions	mm/page_alloc.c	/^unsigned long __init find_min_pfn_with_active_regions(void)$/;"	f
find_module	kernel/module.c	/^EXPORT_SYMBOL_GPL(find_module);$/;"	v
find_module	kernel/module.c	/^struct module *find_module(const char *name)$/;"	f
find_new_ilb	kernel/sched.c	/^static inline int find_new_ilb(int call_cpu)$/;"	f	file:
find_new_ilb	kernel/sched.c	/^static int find_new_ilb(int cpu)$/;"	f	file:
find_new_reaper	kernel/exit.c	/^static struct task_struct *find_new_reaper(struct task_struct *father)$/;"	f	file:
find_next_best_node	kernel/sched.c	/^static int find_next_best_node(int node, nodemask_t *used_nodes)$/;"	f	file:
find_next_best_node	mm/page_alloc.c	/^static int find_next_best_node(int node, nodemask_t *used_node_mask)$/;"	f	file:
find_next_offset	kernel/pid.c	62;"	d	file:
find_next_system_ram	kernel/resource.c	/^static int find_next_system_ram(struct resource *res, char *name)$/;"	f	file:
find_next_to_unuse	mm/swapfile.c	/^static unsigned int find_next_to_unuse(struct swap_info_struct *si,$/;"	f	file:
find_or_create_page	mm/filemap.c	/^EXPORT_SYMBOL(find_or_create_page);$/;"	v
find_or_create_page	mm/filemap.c	/^struct page *find_or_create_page(struct address_space *mapping,$/;"	f
find_pcpusec	kernel/module.c	/^static inline unsigned int find_pcpusec(Elf_Ehdr *hdr,$/;"	f	file:
find_pcpusec	kernel/module.c	/^static unsigned int find_pcpusec(Elf_Ehdr *hdr,$/;"	f	file:
find_pid_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(find_pid_ns);$/;"	v
find_pid_ns	kernel/pid.c	/^struct pid *find_pid_ns(int nr, struct pid_namespace *ns)$/;"	f
find_pm_qos_object_by_minor	kernel/pm_qos_params.c	/^static int find_pm_qos_object_by_minor(int minor)$/;"	f	file:
find_process_by_pid	kernel/sched.c	/^static struct task_struct *find_process_by_pid(pid_t pid)$/;"	f	file:
find_resource	kernel/resource.c	/^static int find_resource(struct resource *root, struct resource *new,$/;"	f	file:
find_sec	kernel/module.c	/^static unsigned int find_sec(Elf_Ehdr *hdr,$/;"	f	file:
find_success	mm/swap_state.c	/^	unsigned long find_success;$/;"	m	struct:__anon11	file:
find_symbol	kernel/module.c	/^EXPORT_SYMBOL_GPL(find_symbol);$/;"	v
find_symbol	kernel/module.c	/^const struct kernel_symbol *find_symbol(const char *name,$/;"	f
find_symbol_arg	kernel/module.c	/^struct find_symbol_arg {$/;"	s	file:
find_symbol_in_section	kernel/module.c	/^static bool find_symbol_in_section(const struct symsearch *syms,$/;"	f	file:
find_task_by_pid_ns	kernel/pid.c	/^struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns)$/;"	f
find_task_by_vpid	kernel/pid.c	/^struct task_struct *find_task_by_vpid(pid_t vnr)$/;"	f
find_total	mm/swap_state.c	/^	unsigned long find_total;$/;"	m	struct:__anon11	file:
find_usable_zone_for_movable	mm/page_alloc.c	/^static void __init find_usable_zone_for_movable(void)$/;"	f	file:
find_usage_backwards	kernel/lockdep.c	/^find_usage_backwards(struct lock_list *root, enum lock_usage_bit bit,$/;"	f	file:
find_usage_forwards	kernel/lockdep.c	/^find_usage_forwards(struct lock_list *root, enum lock_usage_bit bit,$/;"	f	file:
find_user	kernel/user.c	/^struct user_struct *find_user(uid_t uid)$/;"	f
find_vm_area	mm/vmalloc.c	/^static struct vm_struct *find_vm_area(const void *addr)$/;"	f	file:
find_vma	mm/mmap.c	/^EXPORT_SYMBOL(find_vma);$/;"	v
find_vma	mm/mmap.c	/^struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_vma	mm/nommu.c	/^EXPORT_SYMBOL(find_vma);$/;"	v
find_vma	mm/nommu.c	/^struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_vma_exact	mm/nommu.c	/^static struct vm_area_struct *find_vma_exact(struct mm_struct *mm,$/;"	f	file:
find_vma_prepare	mm/mmap.c	/^find_vma_prepare(struct mm_struct *mm, unsigned long addr,$/;"	f	file:
find_vma_prev	mm/mmap.c	/^find_vma_prev(struct mm_struct *mm, unsigned long addr,$/;"	f
find_vmap_area	mm/vmalloc.c	/^static struct vmap_area *find_vmap_area(unsigned long addr)$/;"	f	file:
find_vpid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(find_vpid);$/;"	v
find_vpid	kernel/pid.c	/^struct pid *find_vpid(int nr)$/;"	f
find_zone_movable_pfns_for_nodes	mm/page_alloc.c	/^static void __init find_zone_movable_pfns_for_nodes(unsigned long *movable_pfn)$/;"	f	file:
finish_arch_switch	kernel/sched.c	865;"	d	file:
finish_lock_switch	kernel/sched.c	/^static inline void finish_lock_switch(struct rq *rq, struct task_struct *prev)$/;"	f	file:
finish_wait	kernel/wait.c	/^EXPORT_SYMBOL(finish_wait);$/;"	v
finish_wait	kernel/wait.c	/^void finish_wait(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
fire_sched_in_preempt_notifiers	kernel/sched.c	/^static void fire_sched_in_preempt_notifiers(struct task_struct *curr)$/;"	f	file:
fire_sched_out_preempt_notifiers	kernel/sched.c	/^fire_sched_out_preempt_notifiers(struct task_struct *curr,$/;"	f	file:
fire_user_return_notifiers	kernel/user-return-notifier.c	/^void fire_user_return_notifiers(void)$/;"	f
first	include/linux/list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
first_active_region_index_in_nid	mm/page_alloc.c	/^static int __meminit first_active_region_index_in_nid(int nid)$/;"	f	file:
first_block_in_page	fs/direct-io.c	/^	unsigned first_block_in_page;	\/* doesn't change, Used only once *\/$/;"	m	struct:dio	file:
first_online_pgdat	mm/mmzone.c	/^struct pglist_data *first_online_pgdat(void)$/;"	f
first_slave	fs/pnode.c	/^static inline struct vfsmount *first_slave(struct vfsmount *p)$/;"	f	file:
first_trees	kernel/auditsc.c	/^	struct audit_tree_refs *trees, *first_trees;$/;"	m	struct:audit_context	typeref:struct:audit_context::	file:
first_vma	fs/binfmt_elf.c	/^static struct vm_area_struct *first_vma(struct task_struct *tsk,$/;"	f	file:
fix_small_imbalance	kernel/sched.c	/^static inline void fix_small_imbalance(struct sd_lb_stats *sds,$/;"	f	file:
fixup_owner	kernel/futex.c	/^static int fixup_owner(u32 __user *uaddr, int fshared, struct futex_q *q,$/;"	f	file:
fixup_pi_state_owner	kernel/futex.c	/^static int fixup_pi_state_owner(u32 __user *uaddr, struct futex_q *q,$/;"	f	file:
fixup_rt_mutex_waiters	kernel/rtmutex.c	/^static void fixup_rt_mutex_waiters(struct rt_mutex *lock)$/;"	f	file:
flag	fs/namespace.c	/^	int flag;$/;"	m	struct:proc_fs_info	file:
flags	fs/binfmt_misc.c	/^	unsigned long flags;		\/* type, status, etc. *\/$/;"	m	struct:__anon16	file:
flags	fs/compat.c	/^	compat_int_t flags;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
flags	fs/compat.c	/^	compat_uint_t flags;$/;"	m	struct:compat_ncp_mount_data	file:
flags	fs/compat.c	/^	compat_ulong_t flags;$/;"	m	struct:compat_ncp_mount_data_v4	file:
flags	fs/compat_ioctl.c	/^	compat_uint_t flags;		\/* [i] 0 -> default, see SG_FLAG... *\/$/;"	m	struct:sg_io_hdr32	file:
flags	fs/compat_ioctl.c	/^	u16 flags;$/;"	m	struct:i2c_msg32	file:
flags	fs/compat_ioctl.c	/^        compat_int_t    flags;$/;"	m	struct:serial_struct32	file:
flags	fs/direct-io.c	/^	int flags;			\/* doesn't change *\/$/;"	m	struct:dio	file:
flags	fs/eventfd.c	/^	unsigned int flags;$/;"	m	struct:eventfd_ctx	file:
flags	kernel/audit_watch.c	/^	unsigned		flags;	\/* status flags *\/$/;"	m	struct:audit_parent	file:
flags	kernel/cgroup.c	/^	unsigned long flags;$/;"	m	struct:cgroup_sb_opts	file:
flags	kernel/cgroup.c	/^	unsigned long flags;$/;"	m	struct:cgroupfs_root	file:
flags	kernel/cpuset.c	/^	unsigned long flags;		\/* "unsigned long" so bitops work *\/$/;"	m	struct:cpuset	file:
flags	kernel/module.c	/^	int flags;$/;"	m	struct:stopref	file:
flags	lib/rwsem-spinlock.c	/^	unsigned int flags;$/;"	m	struct:rwsem_waiter	file:
flags	mm/kmemleak.c	/^	unsigned long flags;		\/* object status flags *\/$/;"	m	struct:kmemleak_object	file:
flags	mm/slob.c	/^			unsigned long flags;	\/* mandatory *\/$/;"	m	struct:slob_page::__anon8::__anon9	file:
flags	mm/slob.c	/^	unsigned long flags;$/;"	m	struct:kmem_cache	file:
flags	mm/vmalloc.c	/^	unsigned long flags;$/;"	m	struct:vmap_area	file:
flat_core_dump	fs/binfmt_flat.c	/^static int flat_core_dump(struct coredump_params *cprm)$/;"	f	file:
flat_format	fs/binfmt_flat.c	/^static struct linux_binfmt flat_format = {$/;"	v	typeref:struct:linux_binfmt	file:
flexible	kernel/hw_breakpoint.c	/^	unsigned int flexible;$/;"	m	struct:bp_busy_slots	file:
fllink	fs/eventpoll.c	/^	struct list_head fllink;$/;"	m	struct:epitem	typeref:struct:epitem::list_head	file:
flock64_to_posix_lock	fs/locks.c	/^static int flock64_to_posix_lock(struct file *filp, struct file_lock *fl,$/;"	f	file:
flock_lock_file	fs/locks.c	/^static int flock_lock_file(struct file *filp, struct file_lock *request)$/;"	f	file:
flock_lock_file_wait	fs/locks.c	/^EXPORT_SYMBOL(flock_lock_file_wait);$/;"	v
flock_lock_file_wait	fs/locks.c	/^int flock_lock_file_wait(struct file *filp, struct file_lock *fl)$/;"	f
flock_locks_conflict	fs/locks.c	/^static int flock_locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)$/;"	f	file:
flock_make_lock	fs/locks.c	/^static int flock_make_lock(struct file *filp, struct file_lock **lock,$/;"	f	file:
flock_to_posix_lock	fs/locks.c	/^static int flock_to_posix_lock(struct file *filp, struct file_lock *fl,$/;"	f	file:
flock_translate_cmd	fs/locks.c	/^static inline int flock_translate_cmd(int cmd) {$/;"	f	file:
flush_all	mm/slub.c	/^static void flush_all(struct kmem_cache *s)$/;"	f	file:
flush_all_zero_pkmaps	mm/highmem.c	/^static void flush_all_zero_pkmaps(void)$/;"	f	file:
flush_arg_page	fs/exec.c	/^static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,$/;"	f	file:
flush_cpu_slab	mm/slub.c	/^static void flush_cpu_slab(void *d)$/;"	f	file:
flush_cpu_workqueue	kernel/workqueue.c	/^static int flush_cpu_workqueue(struct cpu_workqueue_struct *cwq)$/;"	f	file:
flush_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL(flush_delayed_work);$/;"	v
flush_delayed_work	kernel/workqueue.c	/^void flush_delayed_work(struct delayed_work *dwork)$/;"	f
flush_disk	fs/block_dev.c	/^static void flush_disk(struct block_device *bdev)$/;"	f	file:
flush_itimer_signals	kernel/signal.c	/^void flush_itimer_signals(void)$/;"	f
flush_old_exec	fs/exec.c	/^EXPORT_SYMBOL(flush_old_exec);$/;"	v
flush_old_exec	fs/exec.c	/^int flush_old_exec(struct linux_binprm * bprm)$/;"	f
flush_old_files	fs/exec.c	/^static void flush_old_files(struct files_struct * files)$/;"	f	file:
flush_scheduled_work	kernel/workqueue.c	/^EXPORT_SYMBOL(flush_scheduled_work);$/;"	v
flush_scheduled_work	kernel/workqueue.c	/^void flush_scheduled_work(void)$/;"	f
flush_signal_handlers	kernel/signal.c	/^flush_signal_handlers(struct task_struct *t, int force_default)$/;"	f
flush_signals	kernel/signal.c	/^EXPORT_SYMBOL(flush_signals);$/;"	v
flush_signals	kernel/signal.c	/^void flush_signals(struct task_struct *t)$/;"	f
flush_sigqueue	kernel/signal.c	/^void flush_sigqueue(struct sigpending *queue)$/;"	f
flush_slab	mm/slub.c	/^static inline void flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)$/;"	f	file:
flush_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(flush_work);$/;"	v
flush_work	kernel/workqueue.c	/^int flush_work(struct work_struct *work)$/;"	f
flush_workqueue	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(flush_workqueue);$/;"	v
flush_workqueue	kernel/workqueue.c	/^void flush_workqueue(struct workqueue_struct *wq)$/;"	f
fmeter	kernel/cpuset.c	/^	struct fmeter fmeter;		\/* memory_pressure filter *\/$/;"	m	struct:cpuset	typeref:struct:cpuset::fmeter	file:
fmeter	kernel/cpuset.c	/^struct fmeter {$/;"	s	file:
fmeter_getrate	kernel/cpuset.c	/^static int fmeter_getrate(struct fmeter *fmp)$/;"	f	file:
fmeter_init	kernel/cpuset.c	/^static void fmeter_init(struct fmeter *fmp)$/;"	f	file:
fmeter_markevent	kernel/cpuset.c	/^static void fmeter_markevent(struct fmeter *fmp)$/;"	f	file:
fmeter_update	kernel/cpuset.c	/^static void fmeter_update(struct fmeter *fmp)$/;"	f	file:
fmt	fs/libfs.c	/^	const char *fmt;	\/* format for read operation *\/$/;"	m	struct:simple_attr	file:
fmt	kernel/panic.c	/^	const char *fmt;$/;"	m	struct:slowpath_args	file:
fmul	kernel/timeconst.pl	/^sub fmul($$$)$/;"	s
fmuls	kernel/timeconst.pl	/^sub fmuls($$$) {$/;"	s
fn	kernel/stop_machine.c	/^	int (*fn)(void *);$/;"	m	struct:stop_machine_data	file:
fn	kernel/workqueue.c	/^	long (*fn)(void *);$/;"	m	struct:work_for_cpu	file:
fnret	kernel/stop_machine.c	/^	int fnret;$/;"	m	struct:stop_machine_data	file:
follow_dotdot	fs/namei.c	/^static __always_inline void follow_dotdot(struct nameidata *nd)$/;"	f	file:
follow_down	fs/namei.c	/^EXPORT_SYMBOL(follow_down);$/;"	v
follow_down	fs/namei.c	/^int follow_down(struct path *path)$/;"	f
follow_huge_pud	mm/hugetlb.c	/^follow_huge_pud(struct mm_struct *mm, unsigned long address,$/;"	f
follow_hugetlb_page	mm/hugetlb.c	/^int follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
follow_mount	fs/namei.c	/^static void follow_mount(struct path *path)$/;"	f	file:
follow_on_final	fs/namei.c	/^static inline int follow_on_final(struct inode *inode, unsigned lookup_flags)$/;"	f	file:
follow_page	mm/memory.c	/^struct page *follow_page(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_page	mm/nommu.c	/^struct page *follow_page(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_pfn	mm/memory.c	/^EXPORT_SYMBOL(follow_pfn);$/;"	v
follow_pfn	mm/memory.c	/^int follow_pfn(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_pfn	mm/nommu.c	/^EXPORT_SYMBOL(follow_pfn);$/;"	v
follow_pfn	mm/nommu.c	/^int follow_pfn(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_phys	mm/memory.c	/^int follow_phys(struct vm_area_struct *vma,$/;"	f
follow_pte	mm/memory.c	/^static int follow_pte(struct mm_struct *mm, unsigned long address,$/;"	f	file:
follow_up	fs/namei.c	/^EXPORT_SYMBOL(follow_up);$/;"	v
follow_up	fs/namei.c	/^int follow_up(struct path *path)$/;"	f
foo	kernel/bounds.c	/^void foo(void)$/;"	f
foo	kernel/bounds.s	/^foo:$/;"	l
footer	mm/kmemleak-test.c	/^	long footer[25];$/;"	m	struct:test_node	file:
fops_kp	kernel/kprobes.c	/^static const struct file_operations fops_kp = {$/;"	v	typeref:struct:file_operations	file:
for_background	fs/fs-writeback.c	/^	int for_background:1;$/;"	m	struct:wb_writeback_args	file:
for_each_active_range_index_in_nid	mm/page_alloc.c	3403;"	d	file:
for_each_active_root	kernel/cgroup.c	201;"	d	file:
for_each_class	kernel/sched.c	1846;"	d	file:
for_each_console	kernel/printk.c	44;"	d	file:
for_each_cpupri_active	kernel/sched_cpupri.c	49;"	d	file:
for_each_domain	kernel/sched.c	655;"	d	file:
for_each_flag_domain	kernel/sched.c	4594;"	d	file:
for_each_free_object	mm/slub.c	295;"	d	file:
for_each_hstate	mm/hugetlb.c	45;"	d	file:
for_each_kimage_entry	kernel/kexec.c	615;"	d	file:
for_each_leaf_cfs_rq	kernel/sched_fair.c	147;"	d	file:
for_each_leaf_cfs_rq	kernel/sched_fair.c	249;"	d	file:
for_each_leaf_rt_rq	kernel/sched_rt.c	186;"	d	file:
for_each_leaf_rt_rq	kernel/sched_rt.c	273;"	d	file:
for_each_lock	fs/locks.c	140;"	d	file:
for_each_object	mm/slub.c	290;"	d	file:
for_each_sched_entity	kernel/sched_fair.c	118;"	d	file:
for_each_sched_entity	kernel/sched_fair.c	222;"	d	file:
for_each_sched_rt_entity	kernel/sched_rt.c	189;"	d	file:
for_each_sched_rt_entity	kernel/sched_rt.c	276;"	d	file:
for_each_subsys	kernel/cgroup.c	197;"	d	file:
for_each_xattr_handler	fs/xattr.c	585;"	d	file:
for_kupdate	fs/fs-writeback.c	/^	int for_kupdate:1;$/;"	m	struct:wb_writeback_args	file:
force_page_cache_readahead	mm/readahead.c	/^int force_page_cache_readahead(struct address_space *mapping, struct file *filp,$/;"	f
force_quiescent_state	kernel/rcutree.c	/^static void force_quiescent_state(struct rcu_state *rsp, int relaxed)$/;"	f	file:
force_reval_path	fs/namei.c	/^force_reval_path(struct path *path, struct nameidata *nd)$/;"	f	file:
force_sig	kernel/signal.c	/^EXPORT_SYMBOL(force_sig);$/;"	v
force_sig	kernel/signal.c	/^force_sig(int sig, struct task_struct *p)$/;"	f
force_sig_info	kernel/signal.c	/^force_sig_info(int sig, struct siginfo *info, struct task_struct *t)$/;"	f
force_sigsegv	kernel/signal.c	/^force_sigsegv(int sig, struct task_struct *p)$/;"	f
forced	kernel/module.c	/^	int *forced;$/;"	m	struct:stopref	file:
forget_original_parent	kernel/exit.c	/^static void forget_original_parent(struct task_struct *father)$/;"	f	file:
fork_idle	kernel/fork.c	/^struct task_struct * __cpuinit fork_idle(int cpu)$/;"	f
fork_init	kernel/fork.c	/^void __init fork_init(unsigned long mempages)$/;"	f
format_corename	fs/exec.c	/^static int format_corename(char *corename, long signr)$/;"	f	file:
fpu	fs/binfmt_elf.c	/^	elf_fpregset_t *fpu;$/;"	m	struct:elf_note_info	file:
fpu	fs/binfmt_elf.c	/^	elf_fpregset_t fpu;		\/* NT_PRFPREG *\/$/;"	m	struct:elf_thread_status	file:
fpu	fs/binfmt_elf_fdpic.c	/^	elf_fpregset_t fpu;		\/* NT_PRFPREG *\/$/;"	m	struct:elf_thread_status	file:
fput	fs/file_table.c	/^EXPORT_SYMBOL(fput);$/;"	v
fput	fs/file_table.c	/^void fput(struct file *file)$/;"	f
fqslock	kernel/rcutree.h	/^	spinlock_t fqslock;			\/* Only one task forcing *\/$/;"	m	struct:rcu_state
frag_next	mm/vmstat.c	/^static void *frag_next(struct seq_file *m, void *arg, loff_t *pos)$/;"	f	file:
frag_show	mm/vmstat.c	/^static int frag_show(struct seq_file *m, void *arg)$/;"	f	file:
frag_show_print	mm/vmstat.c	/^static void frag_show_print(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
frag_start	mm/vmstat.c	/^static void *frag_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
frag_stop	mm/vmstat.c	/^static void frag_stop(struct seq_file *m, void *arg)$/;"	f	file:
fragmentation_file_operations	mm/vmstat.c	/^static const struct file_operations fragmentation_file_operations = {$/;"	v	typeref:struct:file_operations	file:
fragmentation_op	mm/vmstat.c	/^static const struct seq_operations fragmentation_op = {$/;"	v	typeref:struct:seq_operations	file:
fragmentation_open	mm/vmstat.c	/^static int fragmentation_open(struct inode *inode, struct file *file)$/;"	f	file:
frame_rate	fs/compat_ioctl.c	/^		unsigned int frame_rate;$/;"	m	union:compat_video_event::__anon18	file:
free	mm/slab.c	/^	kmem_bufctl_t free;$/;"	m	struct:slab	file:
free	mm/slob.c	/^			slob_t *free;		\/* first free slob_t in page *\/$/;"	m	struct:slob_page::__anon8::__anon9	file:
free	mm/vmalloc.c	/^	struct list_head free;$/;"	m	struct:vmap_block_queue	typeref:struct:vmap_block_queue::list_head	file:
free	mm/vmalloc.c	/^	unsigned long free, dirty;$/;"	m	struct:vmap_block	file:
free_alien_cache	mm/slab.c	/^static inline void free_alien_cache(struct array_cache **ac_ptr)$/;"	f	file:
free_alien_cache	mm/slab.c	/^static void free_alien_cache(struct array_cache **ac_ptr)$/;"	f	file:
free_all_bootmem	mm/bootmem.c	/^unsigned long __init free_all_bootmem(void)$/;"	f
free_all_bootmem_core	mm/bootmem.c	/^static unsigned long __init free_all_bootmem_core(bootmem_data_t *bdata)$/;"	f	file:
free_all_bootmem_node	mm/bootmem.c	/^unsigned long __init free_all_bootmem_node(pg_data_t *pgdat)$/;"	f
free_area_init	mm/page_alloc.c	/^void __init free_area_init(unsigned long *zones_size)$/;"	f
free_area_init_core	mm/page_alloc.c	/^static void __paginginit free_area_init_core(struct pglist_data *pgdat,$/;"	f	file:
free_area_init_node	mm/page_alloc.c	/^void __paginginit free_area_init_node(int nid, unsigned long *zones_size,$/;"	f
free_area_init_nodes	mm/page_alloc.c	/^void __init free_area_init_nodes(unsigned long *max_zone_pfn)$/;"	f
free_arg_page	fs/exec.c	/^static void free_arg_page(struct linux_binprm *bprm, int i)$/;"	f	file:
free_arg_pages	fs/exec.c	/^static void free_arg_pages(struct linux_binprm *bprm)$/;"	f	file:
free_bd_holder	fs/block_dev.c	/^static void free_bd_holder(struct bd_holder *bo)$/;"	f	file:
free_block	mm/slab.c	/^static void free_block(struct kmem_cache *cachep, void **objpp, int nr_objects,$/;"	f	file:
free_bootmem	mm/bootmem.c	/^void __init free_bootmem(unsigned long addr, unsigned long size)$/;"	f
free_bootmem_late	mm/bootmem.c	/^void __init free_bootmem_late(unsigned long addr, unsigned long size)$/;"	f
free_bootmem_node	mm/bootmem.c	/^void __init free_bootmem_node(pg_data_t *pgdat, unsigned long physaddr,$/;"	f
free_bootmem_with_active_regions	mm/page_alloc.c	/^void __init free_bootmem_with_active_regions(int nid,$/;"	f
free_bprm	fs/exec.c	/^void free_bprm(struct linux_binprm *bprm)$/;"	f
free_buffer_head	fs/buffer.c	/^EXPORT_SYMBOL(free_buffer_head);$/;"	v
free_buffer_head	fs/buffer.c	/^void free_buffer_head(struct buffer_head *bh)$/;"	f
free_calls	mm/slub.c	/^SLAB_ATTR_RO(free_calls);$/;"	v
free_calls_show	mm/slub.c	/^static ssize_t free_calls_show(struct kmem_cache *s, char *buf)$/;"	f	file:
free_cg_links	kernel/cgroup.c	/^static void free_cg_links(struct list_head *tmp)$/;"	f	file:
free_cgroup_rcu	kernel/cgroup.c	/^static void free_cgroup_rcu(struct rcu_head *obj)$/;"	f	file:
free_chunk	kernel/audit_tree.c	/^static void free_chunk(struct audit_chunk *chunk)$/;"	f	file:
free_compound_page	mm/page_alloc.c	/^static void free_compound_page(struct page *page)$/;"	f	file:
free_css_id	kernel/cgroup.c	/^void free_css_id(struct cgroup_subsys *ss, struct cgroup_subsys_state *css)$/;"	f
free_css_set_rcu	kernel/cgroup.c	/^static void free_css_set_rcu(struct rcu_head *obj)$/;"	f	file:
free_ctx	kernel/perf_event.c	/^static void free_ctx(struct rcu_head *head)$/;"	f	file:
free_dcookie	fs/dcookies.c	/^static void free_dcookie(struct dcookie_struct * dcs)$/;"	f	file:
free_debug_processing	mm/slub.c	/^static inline int free_debug_processing(struct kmem_cache *s,$/;"	f	file:
free_debug_processing	mm/slub.c	/^static int free_debug_processing(struct kmem_cache *s, struct page *page,$/;"	f	file:
free_dma	kernel/dma.c	/^EXPORT_SYMBOL(free_dma);$/;"	v
free_dma	kernel/dma.c	/^void free_dma(unsigned int dmanr)$/;"	f
free_event	kernel/perf_event.c	/^static void free_event(struct perf_event *event)$/;"	f	file:
free_event_rcu	kernel/perf_event.c	/^static void free_event_rcu(struct rcu_head *head)$/;"	f	file:
free_fair_sched_group	kernel/sched.c	/^static inline void free_fair_sched_group(struct task_group *tg)$/;"	f	file:
free_fair_sched_group	kernel/sched.c	/^static void free_fair_sched_group(struct task_group *tg)$/;"	f	file:
free_fdarr	fs/file.c	/^static inline void free_fdarr(struct fdtable *fdt)$/;"	f	file:
free_fdset	fs/file.c	/^static inline void free_fdset(struct fdtable *fdt)$/;"	f	file:
free_fdtable_rcu	fs/file.c	/^void free_fdtable_rcu(struct rcu_head *rcu)$/;"	f
free_fdtable_work	fs/file.c	/^static void free_fdtable_work(struct work_struct *work)$/;"	f	file:
free_fs_struct	fs/fs_struct.c	/^void free_fs_struct(struct fs_struct *fs)$/;"	f
free_hot_cold_page	mm/page_alloc.c	/^static void free_hot_cold_page(struct page *page, int cold)$/;"	f	file:
free_hot_page	mm/page_alloc.c	/^void free_hot_page(struct page *page)$/;"	f
free_huge_page	mm/hugetlb.c	/^static void free_huge_page(struct page *page)$/;"	f	file:
free_hugepages	mm/hugetlb.c	/^HSTATE_ATTR_RO(free_hugepages);$/;"	v
free_hugepages_show	mm/hugetlb.c	/^static ssize_t free_hugepages_show(struct kobject *kobj,$/;"	f	file:
free_insn_slot	kernel/kprobes.c	/^void __kprobes free_insn_slot(kprobe_opcode_t * slot, int dirty)$/;"	f
free_kmem_cache_cpu	mm/slub.c	/^static void free_kmem_cache_cpu(struct kmem_cache_cpu *c, int cpu)$/;"	f	file:
free_kmem_cache_cpus	mm/slub.c	/^static inline void free_kmem_cache_cpus(struct kmem_cache *s) {}$/;"	f	file:
free_kmem_cache_cpus	mm/slub.c	/^static void free_kmem_cache_cpus(struct kmem_cache *s)$/;"	f	file:
free_kmem_cache_nodes	mm/slub.c	/^static void free_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
free_limit	mm/slab.c	/^	unsigned int free_limit;$/;"	m	struct:kmem_list3	file:
free_list	mm/vmalloc.c	/^	struct list_head free_list;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
free_loc_track	mm/slub.c	/^static void free_loc_track(struct loc_track *t)$/;"	f	file:
free_map_bootmem	mm/sparse.c	/^static void free_map_bootmem(struct page *page, unsigned long nr_pages)$/;"	f	file:
free_mem_cgroup_per_zone_info	mm/memcontrol.c	/^static void free_mem_cgroup_per_zone_info(struct mem_cgroup *mem, int node)$/;"	f	file:
free_mm	kernel/fork.c	423;"	d	file:
free_mm_slot	mm/ksm.c	/^static inline void free_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
free_modinfo	kernel/module.c	/^static void free_modinfo(struct module *mod)$/;"	f	file:
free_module	kernel/module.c	/^static void free_module(struct module *mod)$/;"	f	file:
free_module_param_attrs	kernel/params.c	/^static void free_module_param_attrs(struct module_kobject *mk)$/;"	f	file:
free_more_memory	fs/buffer.c	/^static void free_more_memory(void)$/;"	f	file:
free_note_info	fs/binfmt_elf.c	/^static void free_note_info(struct elf_note_info *info)$/;"	f	file:
free_notes_attrs	kernel/module.c	/^static void free_notes_attrs(struct module_notes_attrs *notes_attrs,$/;"	f	file:
free_nsproxy	kernel/nsproxy.c	/^void free_nsproxy(struct nsproxy *ns)$/;"	f
free_object_rcu	mm/kmemleak.c	/^static void free_object_rcu(struct rcu_head *rcu)$/;"	f	file:
free_objects	mm/slab.c	/^	unsigned long free_objects;$/;"	m	struct:kmem_list3	file:
free_one_page	mm/page_alloc.c	/^static void free_one_page(struct zone *zone, struct page *page, int order,$/;"	f	file:
free_page_and_swap_cache	mm/swap_state.c	/^void free_page_and_swap_cache(struct page *page)$/;"	f
free_page_mlock	mm/page_alloc.c	/^static inline void free_page_mlock(struct page *page)$/;"	f	file:
free_page_series	mm/nommu.c	/^static void free_page_series(unsigned long from, unsigned long to)$/;"	f	file:
free_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(free_pages);$/;"	v
free_pages	mm/page_alloc.c	/^void free_pages(unsigned long addr, unsigned int order)$/;"	f
free_pages_and_swap_cache	mm/swap_state.c	/^void free_pages_and_swap_cache(struct page **pages, int nr)$/;"	f
free_pages_check	mm/page_alloc.c	/^static inline int free_pages_check(struct page *page)$/;"	f	file:
free_pages_exact	mm/page_alloc.c	/^EXPORT_SYMBOL(free_pages_exact);$/;"	v
free_pages_exact	mm/page_alloc.c	/^void free_pages_exact(void *virt, size_t size)$/;"	f
free_partial	mm/slub.c	/^static void free_partial(struct kmem_cache *s, struct kmem_cache_node *n)$/;"	f	file:
free_pcppages_bulk	mm/page_alloc.c	/^static void free_pcppages_bulk(struct zone *zone, int count,$/;"	f	file:
free_pcpu_chunk	mm/percpu.c	/^static void free_pcpu_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
free_percpu	mm/percpu.c	/^EXPORT_SYMBOL_GPL(free_percpu);$/;"	v
free_percpu	mm/percpu.c	/^void free_percpu(void *ptr)$/;"	f
free_pgd_range	mm/memory.c	/^void free_pgd_range(struct mmu_gather *tlb,$/;"	f
free_pgtables	mm/memory.c	/^void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
free_pi_state	kernel/futex.c	/^static void free_pi_state(struct futex_pi_state *pi_state)$/;"	f	file:
free_pid	kernel/pid.c	/^void free_pid(struct pid *pid)$/;"	f
free_pid_ns	kernel/pid_namespace.c	/^void free_pid_ns(struct kref *kref)$/;"	f
free_pidmap	kernel/pid.c	/^static void free_pidmap(struct upid *upid)$/;"	f	file:
free_pipe_info	fs/pipe.c	/^void free_pipe_info(struct inode *inode)$/;"	f
free_pmd_range	mm/memory.c	/^static inline void free_pmd_range(struct mmu_gather *tlb, pud_t *pud,$/;"	f	file:
free_poll_entry	fs/select.c	/^static void free_poll_entry(struct poll_table_entry *entry)$/;"	f	file:
free_pool	mm/mempool.c	/^static void free_pool(mempool_t *pool)$/;"	f	file:
free_pool_huge_page	mm/hugetlb.c	/^static int free_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
free_pte_range	mm/memory.c	/^static void free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,$/;"	f	file:
free_pud_range	mm/memory.c	/^static inline void free_pud_range(struct mmu_gather *tlb, pgd_t *pgd,$/;"	f	file:
free_reserved_phys_range	kernel/kexec.c	/^static void free_reserved_phys_range(unsigned long begin, unsigned long end)$/;"	f	file:
free_rmap_item	mm/ksm.c	/^static inline void free_rmap_item(struct rmap_item *rmap_item)$/;"	f	file:
free_rootdomain	kernel/sched.c	/^static void free_rootdomain(struct root_domain *rd)$/;"	f	file:
free_rp_inst	kernel/kprobes.c	/^static inline void free_rp_inst(struct kretprobe *rp)$/;"	f	file:
free_rt_sched_group	kernel/sched.c	/^static inline void free_rt_sched_group(struct task_group *tg)$/;"	f	file:
free_rt_sched_group	kernel/sched.c	/^static void free_rt_sched_group(struct task_group *tg)$/;"	f	file:
free_sched_domains	kernel/sched.c	/^void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms)$/;"	f
free_sched_group	kernel/sched.c	/^static void free_sched_group(struct task_group *tg)$/;"	f	file:
free_sched_group_rcu	kernel/sched.c	/^static void free_sched_group_rcu(struct rcu_head *rhp)$/;"	f	file:
free_sched_groups	kernel/sched.c	/^static void free_sched_groups(const struct cpumask *cpu_map,$/;"	f	file:
free_sect_attrs	kernel/module.c	/^static void free_sect_attrs(struct module_sect_attrs *sect_attrs)$/;"	f	file:
free_section_usemap	mm/sparse.c	/^static void free_section_usemap(struct page *memmap, unsigned long *usemap)$/;"	f	file:
free_size	mm/percpu.c	/^	int			free_size;	\/* free bytes in the chunk *\/$/;"	m	struct:pcpu_chunk	file:
free_slab	mm/slub.c	/^static void free_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
free_slob_page	mm/slob.c	/^static inline void free_slob_page(struct slob_page *sp)$/;"	f	file:
free_stable_node	mm/ksm.c	/^static inline void free_stable_node(struct stable_node *stable_node)$/;"	f	file:
free_swap_and_cache	mm/swapfile.c	/^int free_swap_and_cache(swp_entry_t entry)$/;"	f
free_swap_cache	mm/swap_state.c	/^static inline void free_swap_cache(struct page *page)$/;"	f	file:
free_swap_count_continuations	mm/swapfile.c	/^static void free_swap_count_continuations(struct swap_info_struct *si)$/;"	f	file:
free_task	kernel/fork.c	/^EXPORT_SYMBOL(free_task);$/;"	v
free_task	kernel/fork.c	/^void free_task(struct task_struct *tsk)$/;"	f
free_task_struct	kernel/fork.c	103;"	d	file:
free_thread_info	kernel/fork.c	/^static inline void free_thread_info(struct thread_info *ti)$/;"	f	file:
free_touched	mm/slab.c	/^	int free_touched;		\/* updated without locking *\/$/;"	m	struct:kmem_list3	file:
free_tree_refs	kernel/auditsc.c	/^static void free_tree_refs(struct audit_context *ctx)$/;"	f	file:
free_trial_cpuset	kernel/cpuset.c	/^static void free_trial_cpuset(struct cpuset *trial)$/;"	f	file:
free_uid	kernel/user.c	/^void free_uid(struct user_struct *up)$/;"	f
free_unmap_vmap_area	mm/vmalloc.c	/^static void free_unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
free_unmap_vmap_area_addr	mm/vmalloc.c	/^static void free_unmap_vmap_area_addr(unsigned long addr)$/;"	f	file:
free_unmap_vmap_area_noflush	mm/vmalloc.c	/^static void free_unmap_vmap_area_noflush(struct vmap_area *va)$/;"	f	file:
free_user	kernel/user.c	/^static void free_user(struct user_struct *up, unsigned long flags)$/;"	f	file:
free_user_ns	kernel/user_namespace.c	/^EXPORT_SYMBOL(free_user_ns);$/;"	v
free_user_ns	kernel/user_namespace.c	/^void free_user_ns(struct kref *kref)$/;"	f
free_user_ns_work	kernel/user_namespace.c	/^static void free_user_ns_work(struct work_struct *work)$/;"	f	file:
free_uts_ns	kernel/utsname.c	/^void free_uts_ns(struct kref *kref)$/;"	f
free_vfsmnt	fs/namespace.c	/^void free_vfsmnt(struct vfsmount *mnt)$/;"	f
free_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(free_vm_area);$/;"	v
free_vm_area	mm/vmalloc.c	/^void free_vm_area(struct vm_struct *area)$/;"	f
free_vmap_area	mm/vmalloc.c	/^static void free_vmap_area(struct vmap_area *va)$/;"	f	file:
free_vmap_block	mm/vmalloc.c	/^static void free_vmap_block(struct vmap_block *vb)$/;"	f	file:
free_write_pipe	fs/pipe.c	/^void free_write_pipe(struct file *f)$/;"	f
free_zone_pagesets	mm/page_alloc.c	/^static inline void free_zone_pagesets(int cpu)$/;"	f	file:
freehigh	kernel/compat.c	/^	u32 freehigh;$/;"	m	struct:compat_sysinfo	file:
freeram	kernel/compat.c	/^	u32 freeram;$/;"	m	struct:compat_sysinfo	file:
freeswap	kernel/compat.c	/^	u32 freeswap;$/;"	m	struct:compat_sysinfo	file:
freeze_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(freeze_bdev);$/;"	v
freeze_bdev	fs/block_dev.c	/^struct super_block *freeze_bdev(struct block_device *bdev)$/;"	f
freeze_task	kernel/freezer.c	/^bool freeze_task(struct task_struct *p, bool sig_only)$/;"	f
freezeable	kernel/workqueue.c	/^	int freezeable;		\/* Freeze threads during suspend *\/$/;"	m	struct:workqueue_struct	file:
freezer	kernel/cgroup_freezer.c	/^struct freezer {$/;"	s	file:
freezer_can_attach	kernel/cgroup_freezer.c	/^static int freezer_can_attach(struct cgroup_subsys *ss,$/;"	f	file:
freezer_change_state	kernel/cgroup_freezer.c	/^static int freezer_change_state(struct cgroup *cgroup,$/;"	f	file:
freezer_create	kernel/cgroup_freezer.c	/^static struct cgroup_subsys_state *freezer_create(struct cgroup_subsys *ss,$/;"	f	file:
freezer_destroy	kernel/cgroup_freezer.c	/^static void freezer_destroy(struct cgroup_subsys *ss,$/;"	f	file:
freezer_fork	kernel/cgroup_freezer.c	/^static void freezer_fork(struct cgroup_subsys *ss, struct task_struct *task)$/;"	f	file:
freezer_populate	kernel/cgroup_freezer.c	/^static int freezer_populate(struct cgroup_subsys *ss, struct cgroup *cgroup)$/;"	f	file:
freezer_read	kernel/cgroup_freezer.c	/^static int freezer_read(struct cgroup *cgroup, struct cftype *cft,$/;"	f	file:
freezer_state	kernel/cgroup_freezer.c	/^enum freezer_state {$/;"	g	file:
freezer_state_strs	kernel/cgroup_freezer.c	/^static const char *freezer_state_strs[] = {$/;"	v	file:
freezer_subsys	kernel/cgroup_freezer.c	/^struct cgroup_subsys freezer_subsys = {$/;"	v	typeref:struct:cgroup_subsys
freezer_subsys	kernel/cgroup_freezer.c	/^struct cgroup_subsys freezer_subsys;$/;"	v	typeref:struct:cgroup_subsys
freezer_write	kernel/cgroup_freezer.c	/^static int freezer_write(struct cgroup *cgroup,$/;"	f	file:
from	mm/hugetlb.c	/^	long from;$/;"	m	struct:file_region	file:
front	kernel/lockdep.c	/^	unsigned int  front, rear;$/;"	m	struct:circular_queue	file:
frozen_cpus	kernel/cpu.c	/^static cpumask_var_t frozen_cpus;$/;"	v	file:
frozen_process	kernel/freezer.c	/^static inline void frozen_process(void)$/;"	f	file:
fs_bio_set	fs/bio.c	/^struct bio_set *fs_bio_set;$/;"	v	typeref:struct:bio_set
fs_cachep	kernel/fork.c	/^struct kmem_cache *fs_cachep;$/;"	v	typeref:struct:kmem_cache
fs_index	fs/filesystems.c	/^static int fs_index(const char __user * __name)$/;"	f	file:
fs_kobj	fs/namespace.c	/^EXPORT_SYMBOL_GPL(fs_kobj);$/;"	v
fs_kobj	fs/namespace.c	/^struct kobject *fs_kobj;$/;"	v	typeref:struct:kobject
fs_maxindex	fs/filesystems.c	/^static int fs_maxindex(void)$/;"	f	file:
fs_may_remount_ro	fs/file_table.c	/^int fs_may_remount_ro(struct super_block *sb)$/;"	f
fs_name	fs/filesystems.c	/^static int fs_name(unsigned int index, char __user * buf)$/;"	f	file:
fs_overflowgid	kernel/sys.c	/^EXPORT_SYMBOL(fs_overflowgid);$/;"	v
fs_overflowgid	kernel/sys.c	/^int fs_overflowgid = DEFAULT_FS_OVERFLOWUID;$/;"	v
fs_overflowuid	kernel/sys.c	/^EXPORT_SYMBOL(fs_overflowuid);$/;"	v
fs_overflowuid	kernel/sys.c	/^int fs_overflowuid = DEFAULT_FS_OVERFLOWUID;$/;"	v
fs_set_subtype	fs/super.c	/^static struct vfsmount *fs_set_subtype(struct vfsmount *mnt, const char *fstype)$/;"	f	file:
fs_table	kernel/sysctl.c	/^static struct ctl_table fs_table[] = {$/;"	v	typeref:struct:ctl_table	file:
fs_table	kernel/sysctl.c	/^static struct ctl_table fs_table[];$/;"	v	typeref:struct:ctl_table	file:
fsgid	kernel/auditsc.c	/^	gid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
fsnotify	fs/notify/fsnotify.c	/^EXPORT_SYMBOL_GPL(fsnotify);$/;"	v
fsnotify	fs/notify/fsnotify.c	/^void fsnotify(struct inode *to_tell, __u32 mask, void *data, int data_is, const char *file_name, u32 cookie)$/;"	f
fsnotify_init	fs/notify/fsnotify.c	/^static __init int fsnotify_init(void)$/;"	f	file:
fsnotify_init	fs/notify/fsnotify.c	/^subsys_initcall(fsnotify_init);$/;"	v
fsstack_copy_attr_all	fs/stack.c	/^EXPORT_SYMBOL_GPL(fsstack_copy_attr_all);$/;"	v
fsstack_copy_attr_all	fs/stack.c	/^void fsstack_copy_attr_all(struct inode *dest, const struct inode *src)$/;"	f
fsstack_copy_inode_size	fs/stack.c	/^EXPORT_SYMBOL_GPL(fsstack_copy_inode_size);$/;"	v
fsstack_copy_inode_size	fs/stack.c	/^void fsstack_copy_inode_size(struct inode *dst, struct inode *src)$/;"	f
fsuid	kernel/auditsc.c	/^	uid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
fsync_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(fsync_bdev);$/;"	v
fsync_bdev	fs/block_dev.c	/^int fsync_bdev(struct block_device *bdev)$/;"	f
fsync_buffers_list	fs/buffer.c	/^static int fsync_buffers_list(spinlock_t *lock, struct list_head *list)$/;"	f	file:
ftruncate64	fs/open.c	/^SYSCALL_DEFINE(ftruncate64)(unsigned int fd, loff_t length)$/;"	f
full_scans	mm/ksm.c	/^KSM_ATTR_RO(full_scans);$/;"	v
full_scans_show	mm/ksm.c	/^static ssize_t full_scans_show(struct kobject *kobj,$/;"	f	file:
fullstop	kernel/rcutorture.c	/^static int fullstop = FULLSTOP_RMMOD;$/;"	v	file:
fullstop_mutex	kernel/rcutorture.c	/^DEFINE_MUTEX(fullstop_mutex);	\/* Protect fullstop transitions and spawning *\/$/;"	v
func	kernel/async.c	/^	async_func_ptr	 *func;$/;"	m	struct:async_entry	file:
func_ptr_is_kernel_text	kernel/extable.c	/^int func_ptr_is_kernel_text(void *ptr)$/;"	f
funcs	kernel/tracepoint.c	/^	void **funcs;$/;"	m	struct:tracepoint_entry	file:
futex_cmpxchg_enabled	kernel/futex.c	/^int __read_mostly futex_cmpxchg_enabled;$/;"	v
futex_find_get_task	kernel/futex.c	/^static struct task_struct * futex_find_get_task(pid_t pid)$/;"	f	file:
futex_hash_bucket	kernel/futex.c	/^struct futex_hash_bucket {$/;"	s	file:
futex_init	kernel/futex.c	/^__initcall(futex_init);$/;"	v
futex_init	kernel/futex.c	/^static int __init futex_init(void)$/;"	f	file:
futex_lock_pi	kernel/futex.c	/^static int futex_lock_pi(u32 __user *uaddr, int fshared,$/;"	f	file:
futex_lock_pi_atomic	kernel/futex.c	/^static int futex_lock_pi_atomic(u32 __user *uaddr, struct futex_hash_bucket *hb,$/;"	f	file:
futex_pi_state	kernel/futex.c	/^struct futex_pi_state {$/;"	s	file:
futex_proxy_trylock_atomic	kernel/futex.c	/^static int futex_proxy_trylock_atomic(u32 __user *pifutex,$/;"	f	file:
futex_q	kernel/futex.c	/^struct futex_q {$/;"	s	file:
futex_queues	kernel/futex.c	/^static struct futex_hash_bucket futex_queues[1<<FUTEX_HASHBITS];$/;"	v	typeref:struct:futex_hash_bucket	file:
futex_requeue	kernel/futex.c	/^static int futex_requeue(u32 __user *uaddr1, int fshared, u32 __user *uaddr2,$/;"	f	file:
futex_top_waiter	kernel/futex.c	/^static struct futex_q *futex_top_waiter(struct futex_hash_bucket *hb,$/;"	f	file:
futex_uaddr	kernel/futex_compat.c	/^static void __user *futex_uaddr(struct robust_list __user *entry,$/;"	f	file:
futex_unlock_pi	kernel/futex.c	/^static int futex_unlock_pi(u32 __user *uaddr, int fshared)$/;"	f	file:
futex_wait	kernel/futex.c	/^static int futex_wait(u32 __user *uaddr, int fshared,$/;"	f	file:
futex_wait_queue_me	kernel/futex.c	/^static void futex_wait_queue_me(struct futex_hash_bucket *hb, struct futex_q *q,$/;"	f	file:
futex_wait_requeue_pi	kernel/futex.c	/^static int futex_wait_requeue_pi(u32 __user *uaddr, int fshared,$/;"	f	file:
futex_wait_restart	kernel/futex.c	/^static long futex_wait_restart(struct restart_block *restart)$/;"	f	file:
futex_wait_setup	kernel/futex.c	/^static int futex_wait_setup(u32 __user *uaddr, u32 val, int fshared,$/;"	f	file:
futex_wake	kernel/futex.c	/^static int futex_wake(u32 __user *uaddr, int fshared, int nr_wake, u32 bitset)$/;"	f	file:
futex_wake_op	kernel/futex.c	/^futex_wake_op(u32 __user *uaddr1, int fshared, u32 __user *uaddr2,$/;"	f	file:
g_cpucache_up	mm/slab.c	/^} g_cpucache_up;$/;"	v	typeref:enum:__anon7	file:
gate_vma	mm/memory.c	/^static struct vm_area_struct gate_vma;$/;"	v	typeref:struct:vm_area_struct	file:
gate_vma_init	mm/memory.c	/^__initcall(gate_vma_init);$/;"	v
gate_vma_init	mm/memory.c	/^static int __init gate_vma_init(void)$/;"	f	file:
gather_bootmem_prealloc	mm/hugetlb.c	/^static void __init gather_bootmem_prealloc(void)$/;"	f	file:
gather_stats	mm/mempolicy.c	/^static void gather_stats(struct page *page, void *private, int pte_dirty)$/;"	f	file:
gather_surplus_pages	mm/hugetlb.c	/^static int gather_surplus_pages(struct hstate *h, int delta)$/;"	f	file:
gd32_addr	fs/compat.c	/^	struct sockaddr		gd32_addr;$/;"	m	struct:compat_nfsctl_fdparm	typeref:struct:compat_nfsctl_fdparm::sockaddr	file:
gd32_addr	fs/compat.c	/^	struct sockaddr		gd32_addr;$/;"	m	struct:compat_nfsctl_fsparm	typeref:struct:compat_nfsctl_fsparm::sockaddr	file:
gd32_maxlen	fs/compat.c	/^	compat_int_t		gd32_maxlen;$/;"	m	struct:compat_nfsctl_fsparm	file:
gd32_path	fs/compat.c	/^	s8			gd32_path[NFS_MAXPATHLEN+1];$/;"	m	struct:compat_nfsctl_fdparm	file:
gd32_path	fs/compat.c	/^	s8			gd32_path[NFS_MAXPATHLEN+1];$/;"	m	struct:compat_nfsctl_fsparm	file:
gd32_version	fs/compat.c	/^	compat_int_t		gd32_version;$/;"	m	struct:compat_nfsctl_fdparm	file:
gdb_cmd_binwrite	kernel/kgdb.c	/^static void gdb_cmd_binwrite(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_break	kernel/kgdb.c	/^static void gdb_cmd_break(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_detachkill	kernel/kgdb.c	/^static void gdb_cmd_detachkill(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_exception_pass	kernel/kgdb.c	/^static int gdb_cmd_exception_pass(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_getregs	kernel/kgdb.c	/^static void gdb_cmd_getregs(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_memread	kernel/kgdb.c	/^static void gdb_cmd_memread(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_memwrite	kernel/kgdb.c	/^static void gdb_cmd_memwrite(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_query	kernel/kgdb.c	/^static void gdb_cmd_query(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_reboot	kernel/kgdb.c	/^static int gdb_cmd_reboot(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_setregs	kernel/kgdb.c	/^static void gdb_cmd_setregs(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_status	kernel/kgdb.c	/^static void gdb_cmd_status(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_task	kernel/kgdb.c	/^static void gdb_cmd_task(struct kgdb_state *ks)$/;"	f	file:
gdb_cmd_thread	kernel/kgdb.c	/^static void gdb_cmd_thread(struct kgdb_state *ks)$/;"	f	file:
gdb_regs	kernel/kgdb.c	/^static unsigned long		gdb_regs[(NUMREGBYTES +$/;"	v	file:
gdb_serial_stub	kernel/kgdb.c	/^static int gdb_serial_stub(struct kgdb_state *ks)$/;"	f	file:
gdbmsgbuf	kernel/kgdb.c	/^static char gdbmsgbuf[BUFMAX + 1];$/;"	v	file:
generate_sched_domains	kernel/cpuset.c	/^static int generate_sched_domains(cpumask_var_t **domains,$/;"	f	file:
generic_access_phys	mm/memory.c	/^int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,$/;"	f
generic_acl_access_handler	fs/generic_acl.c	/^struct xattr_handler generic_acl_access_handler = {$/;"	v	typeref:struct:xattr_handler
generic_acl_chmod	fs/generic_acl.c	/^generic_acl_chmod(struct inode *inode)$/;"	f
generic_acl_default_handler	fs/generic_acl.c	/^struct xattr_handler generic_acl_default_handler = {$/;"	v	typeref:struct:xattr_handler
generic_acl_get	fs/generic_acl.c	/^generic_acl_get(struct dentry *dentry, const char *name, void *buffer,$/;"	f	file:
generic_acl_init	fs/generic_acl.c	/^generic_acl_init(struct inode *inode, struct inode *dir)$/;"	f
generic_acl_list	fs/generic_acl.c	/^generic_acl_list(struct dentry *dentry, char *list, size_t list_size,$/;"	f	file:
generic_acl_set	fs/generic_acl.c	/^generic_acl_set(struct dentry *dentry, const char *name, const void *value,$/;"	f	file:
generic_block_bmap	fs/buffer.c	/^EXPORT_SYMBOL(generic_block_bmap);$/;"	v
generic_block_bmap	fs/buffer.c	/^sector_t generic_block_bmap(struct address_space *mapping, sector_t block,$/;"	f
generic_block_fiemap	fs/ioctl.c	/^EXPORT_SYMBOL(generic_block_fiemap);$/;"	v
generic_block_fiemap	fs/ioctl.c	/^int generic_block_fiemap(struct inode *inode,$/;"	f
generic_check_acl	fs/generic_acl.c	/^generic_check_acl(struct inode *inode, int mask)$/;"	f
generic_cont_expand_simple	fs/buffer.c	/^EXPORT_SYMBOL(generic_cont_expand_simple);$/;"	v
generic_cont_expand_simple	fs/buffer.c	/^int generic_cont_expand_simple(struct inode *inode, loff_t size)$/;"	f
generic_delete_inode	fs/inode.c	/^EXPORT_SYMBOL(generic_delete_inode);$/;"	v
generic_delete_inode	fs/inode.c	/^void generic_delete_inode(struct inode *inode)$/;"	f
generic_detach_inode	fs/inode.c	/^EXPORT_SYMBOL_GPL(generic_detach_inode);$/;"	v
generic_detach_inode	fs/inode.c	/^int generic_detach_inode(struct inode *inode)$/;"	f
generic_drop_inode	fs/inode.c	/^EXPORT_SYMBOL_GPL(generic_drop_inode);$/;"	v
generic_drop_inode	fs/inode.c	/^void generic_drop_inode(struct inode *inode)$/;"	f
generic_error_remove_page	mm/truncate.c	/^EXPORT_SYMBOL(generic_error_remove_page);$/;"	v
generic_error_remove_page	mm/truncate.c	/^int generic_error_remove_page(struct address_space *mapping, struct page *page)$/;"	f
generic_exec_single	kernel/smp.c	/^void generic_exec_single(int cpu, struct call_single_data *data, int wait)$/;"	f	file:
generic_fh_to_dentry	fs/libfs.c	/^EXPORT_SYMBOL_GPL(generic_fh_to_dentry);$/;"	v
generic_fh_to_dentry	fs/libfs.c	/^struct dentry *generic_fh_to_dentry(struct super_block *sb, struct fid *fid,$/;"	f
generic_fh_to_parent	fs/libfs.c	/^EXPORT_SYMBOL_GPL(generic_fh_to_parent);$/;"	v
generic_fh_to_parent	fs/libfs.c	/^struct dentry *generic_fh_to_parent(struct super_block *sb, struct fid *fid,$/;"	f
generic_file_aio_read	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_aio_read);$/;"	v
generic_file_aio_read	mm/filemap.c	/^generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_aio_write	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_aio_write);$/;"	v
generic_file_aio_write	mm/filemap.c	/^ssize_t generic_file_aio_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_buffered_write	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_buffered_write);$/;"	v
generic_file_buffered_write	mm/filemap.c	/^generic_file_buffered_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_direct_write	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_direct_write);$/;"	v
generic_file_direct_write	mm/filemap.c	/^generic_file_direct_write(struct kiocb *iocb, const struct iovec *iov,$/;"	f
generic_file_llseek	fs/read_write.c	/^EXPORT_SYMBOL(generic_file_llseek);$/;"	v
generic_file_llseek	fs/read_write.c	/^loff_t generic_file_llseek(struct file *file, loff_t offset, int origin)$/;"	f
generic_file_llseek_unlocked	fs/read_write.c	/^EXPORT_SYMBOL(generic_file_llseek_unlocked);$/;"	v
generic_file_llseek_unlocked	fs/read_write.c	/^generic_file_llseek_unlocked(struct file *file, loff_t offset, int origin)$/;"	f
generic_file_mmap	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_mmap);$/;"	v
generic_file_mmap	mm/filemap.c	/^int generic_file_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
generic_file_open	fs/open.c	/^EXPORT_SYMBOL(generic_file_open);$/;"	v
generic_file_open	fs/open.c	/^int generic_file_open(struct inode * inode, struct file * filp)$/;"	f
generic_file_readonly_mmap	mm/filemap.c	/^EXPORT_SYMBOL(generic_file_readonly_mmap);$/;"	v
generic_file_readonly_mmap	mm/filemap.c	/^int generic_file_readonly_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
generic_file_readonly_mmap	mm/filemap.c	/^int generic_file_readonly_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f
generic_file_splice_read	fs/splice.c	/^EXPORT_SYMBOL(generic_file_splice_read);$/;"	v
generic_file_splice_read	fs/splice.c	/^ssize_t generic_file_splice_read(struct file *in, loff_t *ppos,$/;"	f
generic_file_splice_write	fs/splice.c	/^EXPORT_SYMBOL(generic_file_splice_write);$/;"	v
generic_file_splice_write	fs/splice.c	/^generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out,$/;"	f
generic_file_vm_ops	mm/filemap.c	/^const struct vm_operations_struct generic_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
generic_file_vm_ops	mm/nommu.c	/^const struct vm_operations_struct generic_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
generic_fillattr	fs/stat.c	/^EXPORT_SYMBOL(generic_fillattr);$/;"	v
generic_fillattr	fs/stat.c	/^void generic_fillattr(struct inode *inode, struct kstat *stat)$/;"	f
generic_forget_inode	fs/inode.c	/^static void generic_forget_inode(struct inode *inode)$/;"	f	file:
generic_getxattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_getxattr);$/;"	v
generic_getxattr	fs/xattr.c	/^generic_getxattr(struct dentry *dentry, const char *name, void *buffer, size_t size)$/;"	f
generic_listxattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_listxattr);$/;"	v
generic_listxattr	fs/xattr.c	/^generic_listxattr(struct dentry *dentry, char *buffer, size_t buffer_size)$/;"	f
generic_perform_write	mm/filemap.c	/^static ssize_t generic_perform_write(struct file *file,$/;"	f	file:
generic_permission	fs/namei.c	/^EXPORT_SYMBOL(generic_permission);$/;"	v
generic_permission	fs/namei.c	/^int generic_permission(struct inode *inode, int mask,$/;"	f
generic_pipe_buf_confirm	fs/pipe.c	/^int generic_pipe_buf_confirm(struct pipe_inode_info *info,$/;"	f
generic_pipe_buf_get	fs/pipe.c	/^void generic_pipe_buf_get(struct pipe_inode_info *pipe, struct pipe_buffer *buf)$/;"	f
generic_pipe_buf_map	fs/pipe.c	/^void *generic_pipe_buf_map(struct pipe_inode_info *pipe,$/;"	f
generic_pipe_buf_release	fs/pipe.c	/^void generic_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f
generic_pipe_buf_steal	fs/pipe.c	/^int generic_pipe_buf_steal(struct pipe_inode_info *pipe,$/;"	f
generic_pipe_buf_unmap	fs/pipe.c	/^void generic_pipe_buf_unmap(struct pipe_inode_info *pipe,$/;"	f
generic_ptrace_peekdata	kernel/ptrace.c	/^int generic_ptrace_peekdata(struct task_struct *tsk, long addr, long data)$/;"	f
generic_ptrace_pokedata	kernel/ptrace.c	/^int generic_ptrace_pokedata(struct task_struct *tsk, long addr, long data)$/;"	f
generic_read_dir	fs/libfs.c	/^EXPORT_SYMBOL(generic_read_dir);$/;"	v
generic_read_dir	fs/libfs.c	/^ssize_t generic_read_dir(struct file *filp, char __user *buf, size_t siz, loff_t *ppos)$/;"	f
generic_readlink	fs/namei.c	/^EXPORT_SYMBOL(generic_readlink);$/;"	v
generic_readlink	fs/namei.c	/^int generic_readlink(struct dentry *dentry, char __user *buffer, int buflen)$/;"	f
generic_removexattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_removexattr);$/;"	v
generic_removexattr	fs/xattr.c	/^generic_removexattr(struct dentry *dentry, const char *name)$/;"	f
generic_ro_fops	fs/read_write.c	/^EXPORT_SYMBOL(generic_ro_fops);$/;"	v
generic_ro_fops	fs/read_write.c	/^const struct file_operations generic_ro_fops = {$/;"	v	typeref:struct:file_operations
generic_segment_checks	mm/filemap.c	/^EXPORT_SYMBOL(generic_segment_checks);$/;"	v
generic_segment_checks	mm/filemap.c	/^int generic_segment_checks(const struct iovec *iov,$/;"	f
generic_setlease	fs/locks.c	/^EXPORT_SYMBOL(generic_setlease);$/;"	v
generic_setlease	fs/locks.c	/^int generic_setlease(struct file *filp, long arg, struct file_lock **flp)$/;"	f
generic_setxattr	fs/xattr.c	/^EXPORT_SYMBOL(generic_setxattr);$/;"	v
generic_setxattr	fs/xattr.c	/^generic_setxattr(struct dentry *dentry, const char *name, const void *value, size_t size, int flags)$/;"	f
generic_show_options	fs/namespace.c	/^EXPORT_SYMBOL(generic_show_options);$/;"	v
generic_show_options	fs/namespace.c	/^int generic_show_options(struct seq_file *m, struct vfsmount *mnt)$/;"	f
generic_shutdown_super	fs/super.c	/^EXPORT_SYMBOL(generic_shutdown_super);$/;"	v
generic_shutdown_super	fs/super.c	/^void generic_shutdown_super(struct super_block *sb)$/;"	f
generic_smp_call_function_interrupt	kernel/smp.c	/^void generic_smp_call_function_interrupt(void)$/;"	f
generic_smp_call_function_single_interrupt	kernel/smp.c	/^void generic_smp_call_function_single_interrupt(void)$/;"	f
generic_splice_sendpage	fs/splice.c	/^EXPORT_SYMBOL(generic_splice_sendpage);$/;"	v
generic_splice_sendpage	fs/splice.c	/^ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe, struct file *out,$/;"	f
generic_write_checks	mm/filemap.c	/^EXPORT_SYMBOL(generic_write_checks);$/;"	v
generic_write_checks	mm/filemap.c	/^inline int generic_write_checks(struct file *file, loff_t *pos, size_t *count, int isblk)$/;"	f
generic_write_end	fs/buffer.c	/^EXPORT_SYMBOL(generic_write_end);$/;"	v
generic_write_end	fs/buffer.c	/^int generic_write_end(struct file *file, struct address_space *mapping,$/;"	f
generic_write_sync	fs/sync.c	/^EXPORT_SYMBOL(generic_write_sync);$/;"	v
generic_write_sync	fs/sync.c	/^int generic_write_sync(struct file *file, loff_t pos, loff_t count)$/;"	f
generic_writepages	mm/page-writeback.c	/^EXPORT_SYMBOL(generic_writepages);$/;"	v
generic_writepages	mm/page-writeback.c	/^int generic_writepages(struct address_space *mapping,$/;"	f
get	fs/libfs.c	/^	int (*get)(void *, u64 *);$/;"	m	struct:simple_attr	file:
get_active_super	fs/super.c	/^struct super_block *get_active_super(struct block_device *bdev)$/;"	f
get_any_page	mm/memory-failure.c	/^static int get_any_page(struct page *p, unsigned long pfn, int flags)$/;"	f	file:
get_any_partial	mm/slub.c	/^static struct page *get_any_partial(struct kmem_cache *s, gfp_t flags)$/;"	f	file:
get_arg_page	fs/exec.c	/^static struct page *get_arg_page(struct linux_binprm *bprm, unsigned long pos,$/;"	f	file:
get_avenrun	kernel/sched.c	/^void get_avenrun(unsigned long *loads, unsigned long offset, int shift)$/;"	f
get_block	fs/direct-io.c	/^	get_block_t *get_block;		\/* block mapping function *\/$/;"	m	struct:dio	file:
get_block	fs/mpage.c	/^	get_block_t *get_block;$/;"	m	struct:mpage_data	file:
get_buf	fs/libfs.c	/^	char get_buf[24];	\/* enough to store a u64 and "\\n\\0" *\/$/;"	m	struct:simple_attr	file:
get_close_on_exec	fs/fcntl.c	/^static int get_close_on_exec(unsigned int fd)$/;"	f	file:
get_compat_flock	fs/compat.c	/^static int get_compat_flock(struct flock *kfl, struct compat_flock __user *ufl)$/;"	f	file:
get_compat_flock64	fs/compat.c	/^static int get_compat_flock64(struct flock *kfl, struct compat_flock64 __user *ufl)$/;"	f	file:
get_compat_itimerspec	kernel/compat.c	/^int get_compat_itimerspec(struct itimerspec *dst,$/;"	f
get_compat_itimerval	kernel/compat.c	/^static inline long get_compat_itimerval(struct itimerval *o,$/;"	f	file:
get_compat_sigevent	kernel/compat.c	/^int get_compat_sigevent(struct sigevent *event,$/;"	f
get_compat_timespec	kernel/compat.c	/^int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)$/;"	f
get_cpu_itimer	kernel/itimer.c	/^static void get_cpu_itimer(struct task_struct *tsk, unsigned int clock_id,$/;"	f	file:
get_cpu_slab	mm/slub.c	/^static inline struct kmem_cache_cpu *get_cpu_slab(struct kmem_cache *s, int cpu)$/;"	f	file:
get_css_set	kernel/cgroup.c	/^static inline void get_css_set(struct css_set *cg)$/;"	f	file:
get_ctx	kernel/perf_event.c	/^static void get_ctx(struct perf_event_context *ctx)$/;"	f	file:
get_dcookie	fs/dcookies.c	/^EXPORT_SYMBOL_GPL(get_dcookie);$/;"	v
get_dcookie	fs/dcookies.c	/^int get_dcookie(struct path *path, unsigned long *cookie)$/;"	f
get_dirty_limits	mm/page-writeback.c	/^get_dirty_limits(unsigned long *pbackground, unsigned long *pdirty,$/;"	f
get_dominating_id	fs/pnode.c	/^int get_dominating_id(struct vfsmount *mnt, const struct path *root)$/;"	f
get_dump_page	mm/memory.c	/^struct page *get_dump_page(unsigned long addr)$/;"	f
get_dumpable	fs/exec.c	/^int get_dumpable(struct mm_struct *mm)$/;"	f
get_empty_filp	fs/file_table.c	/^struct file *get_empty_filp(void)$/;"	f
get_files_struct	kernel/exit.c	/^struct files_struct *get_files_struct(struct task_struct *task)$/;"	f
get_filesystem	fs/filesystems.c	/^void get_filesystem(struct file_system_type *fs)$/;"	f
get_filesystem_list	fs/filesystems.c	/^int __init get_filesystem_list(char *buf)$/;"	f
get_freepointer	mm/slub.c	/^static inline void *get_freepointer(struct kmem_cache *s, void *object)$/;"	f	file:
get_fs_type	fs/filesystems.c	/^EXPORT_SYMBOL(get_fs_type);$/;"	v
get_fs_type	fs/filesystems.c	/^struct file_system_type *get_fs_type(const char *name)$/;"	f
get_futex_key	kernel/futex.c	/^get_futex_key(u32 __user *uaddr, int fshared, union futex_key *key)$/;"	f	file:
get_futex_key_refs	kernel/futex.c	/^static void get_futex_key_refs(union futex_key *key)$/;"	f	file:
get_futex_value_locked	kernel/futex.c	/^static int get_futex_value_locked(u32 *dest, u32 __user *from)$/;"	f	file:
get_gate_vma	mm/memory.c	/^struct vm_area_struct *get_gate_vma(struct task_struct *tsk)$/;"	f
get_init_ra_size	mm/readahead.c	/^static unsigned long get_init_ra_size(unsigned long size, unsigned long max)$/;"	f	file:
get_inotify_handle	fs/notify/inotify/inotify.c	/^static inline void get_inotify_handle(struct inotify_handle *ih)$/;"	f	file:
get_inotify_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(get_inotify_watch);$/;"	v
get_inotify_watch	fs/notify/inotify/inotify.c	/^void get_inotify_watch(struct inotify_watch *watch)$/;"	f
get_insn_slot	kernel/kprobes.c	/^kprobe_opcode_t __kprobes *get_insn_slot(void)$/;"	f
get_ioctx	fs/aio.c	241;"	d	file:
get_iovec_page_array	fs/splice.c	/^static int get_iovec_page_array(const struct iovec __user *iov,$/;"	f	file:
get_jiffies_64	kernel/time.c	/^EXPORT_SYMBOL(get_jiffies_64);$/;"	v
get_jiffies_64	kernel/time.c	/^u64 get_jiffies_64(void)$/;"	f
get_kprobe	kernel/kprobes.c	/^struct kprobe __kprobes *get_kprobe(void *addr)$/;"	f
get_ksm_page	mm/ksm.c	/^static struct page *get_ksm_page(struct stable_node *stable_node)$/;"	f	file:
get_ksymbol	kernel/module.c	/^static const char *get_ksymbol(struct module *mod,$/;"	f	file:
get_ksymbol_core	kernel/kallsyms.c	/^static unsigned long get_ksymbol_core(struct kallsym_iter *iter)$/;"	f	file:
get_ksymbol_mod	kernel/kallsyms.c	/^static int get_ksymbol_mod(struct kallsym_iter *iter)$/;"	f	file:
get_lock_depth	kernel/lockdep.c	/^static inline int get_lock_depth(struct lock_list *child)$/;"	f	file:
get_lock_parent	kernel/lockdep.c	/^static inline struct lock_list *get_lock_parent(struct lock_list *child)$/;"	f	file:
get_lock_stats	kernel/lockdep.c	/^static struct lock_class_stats *get_lock_stats(struct lock_class *class)$/;"	f	file:
get_locked_pte	mm/memory.c	/^pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,$/;"	f
get_max_files	fs/file_table.c	/^EXPORT_SYMBOL_GPL(get_max_files);$/;"	v
get_max_files	fs/file_table.c	/^int get_max_files(void)$/;"	f
get_mergeable_page	mm/ksm.c	/^static struct page *get_mergeable_page(struct rmap_item *rmap_item)$/;"	f	file:
get_mm_slot	mm/ksm.c	/^static struct mm_slot *get_mm_slot(struct mm_struct *mm)$/;"	f	file:
get_modinfo	kernel/module.c	/^static char *get_modinfo(Elf_Shdr *sechdrs,$/;"	f	file:
get_more_blocks	fs/direct-io.c	/^static int get_more_blocks(struct dio *dio)$/;"	f	file:
get_new_cssid	kernel/cgroup.c	/^static struct css_id *get_new_cssid(struct cgroup_subsys *ss, int depth)$/;"	f	file:
get_new_inode	fs/inode.c	/^static struct inode *get_new_inode(struct super_block *sb,$/;"	f	file:
get_new_inode_fast	fs/inode.c	/^static struct inode *get_new_inode_fast(struct super_block *sb,$/;"	f	file:
get_next_ra_size	mm/readahead.c	/^static unsigned long get_next_ra_size(struct file_ra_state *ra,$/;"	f	file:
get_next_rmap_item	mm/ksm.c	/^static struct rmap_item *get_next_rmap_item(struct mm_slot *mm_slot,$/;"	f	file:
get_next_timer_interrupt	kernel/timer.c	/^unsigned long get_next_timer_interrupt(unsigned long now)$/;"	f
get_next_work_item	fs/fs-writeback.c	/^static struct bdi_work *get_next_work_item(struct backing_dev_info *bdi,$/;"	f	file:
get_node	mm/slub.c	/^static inline struct kmem_cache_node *get_node(struct kmem_cache *s, int node)$/;"	f	file:
get_nodes	mm/mempolicy.c	/^static int get_nodes(nodemask_t *nodes, const unsigned long __user *nmask,$/;"	f	file:
get_nohz_load_balancer	kernel/sched.c	/^int get_nohz_load_balancer(void)$/;"	f
get_note_info_size	fs/binfmt_elf.c	/^static size_t get_note_info_size(struct elf_note_info *info)$/;"	f	file:
get_nr_files	fs/file_table.c	/^static int get_nr_files(void)$/;"	f	file:
get_object	mm/kmemleak.c	/^static int get_object(struct kmemleak_object *object)$/;"	f	file:
get_object_page	mm/slub.c	/^static struct page *get_object_page(const void *x)$/;"	f	file:
get_offset	kernel/module.c	/^static long get_offset(struct module *mod, unsigned int *size,$/;"	f	file:
get_old_pmd	mm/mremap.c	/^static pmd_t *get_old_pmd(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
get_online_cpus	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(get_online_cpus);$/;"	v
get_online_cpus	kernel/cpu.c	/^void get_online_cpus(void)$/;"	f
get_packet	kernel/kgdb.c	/^static void get_packet(char *buffer)$/;"	f	file:
get_page_bootmem	mm/memory_hotplug.c	/^static void get_page_bootmem(unsigned long info,  struct page *page, int type)$/;"	f	file:
get_page_from_freelist	mm/page_alloc.c	/^get_page_from_freelist(gfp_t gfp_mask, nodemask_t *nodemask, unsigned int order,$/;"	f	file:
get_pageblock_bitmap	mm/page_alloc.c	/^static inline unsigned long *get_pageblock_bitmap(struct zone *zone,$/;"	f	file:
get_pageblock_flags_group	mm/page_alloc.c	/^unsigned long get_pageblock_flags_group(struct page *page,$/;"	f
get_parent_ip	kernel/sched.c	/^notrace unsigned long get_parent_ip(unsigned long addr)$/;"	f
get_partial	mm/slub.c	/^static struct page *get_partial(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
get_partial_node	mm/slub.c	/^static struct page *get_partial_node(struct kmem_cache_node *n)$/;"	f	file:
get_peer_under_root	fs/pnode.c	/^static struct vfsmount *get_peer_under_root(struct vfsmount *mnt,$/;"	f	file:
get_pfn_range_for_nid	mm/page_alloc.c	/^void __meminit get_pfn_range_for_nid(unsigned int nid,$/;"	f
get_pid_task	kernel/pid.c	/^struct task_struct *get_pid_task(struct pid *pid, enum pid_type type)$/;"	f
get_pipe_inode	fs/pipe.c	/^static struct inode * get_pipe_inode(void)$/;"	f	file:
get_policy_nodemask	mm/mempolicy.c	/^static void get_policy_nodemask(struct mempolicy *p, nodemask_t *nodes)$/;"	f	file:
get_raw32_request	fs/compat_ioctl.c	/^static int get_raw32_request(struct raw_config_request *req, struct raw32_config_request __user *user_req)$/;"	f	file:
get_reclaim_stat	mm/vmscan.c	/^static struct zone_reclaim_stat *get_reclaim_stat(struct zone *zone,$/;"	f	file:
get_rr_interval_fair	kernel/sched_fair.c	/^unsigned int get_rr_interval_fair(struct rq *rq, struct task_struct *task)$/;"	f
get_rr_interval_idle	kernel/sched_idletask.c	/^unsigned int get_rr_interval_idle(struct rq *rq, struct task_struct *task)$/;"	f
get_rr_interval_rt	kernel/sched_rt.c	/^unsigned int get_rr_interval_rt(struct rq *rq, struct task_struct *task)$/;"	f
get_sb_bdev	fs/super.c	/^EXPORT_SYMBOL(get_sb_bdev);$/;"	v
get_sb_bdev	fs/super.c	/^int get_sb_bdev(struct file_system_type *fs_type,$/;"	f
get_sb_nodev	fs/super.c	/^EXPORT_SYMBOL(get_sb_nodev);$/;"	v
get_sb_nodev	fs/super.c	/^int get_sb_nodev(struct file_system_type *fs_type,$/;"	f
get_sb_ns	fs/super.c	/^EXPORT_SYMBOL(get_sb_ns);$/;"	v
get_sb_ns	fs/super.c	/^int get_sb_ns(struct file_system_type *fs_type, int flags, void *data,$/;"	f
get_sb_pseudo	fs/libfs.c	/^EXPORT_SYMBOL(get_sb_pseudo);$/;"	v
get_sb_pseudo	fs/libfs.c	/^int get_sb_pseudo(struct file_system_type *fs_type, char *name,$/;"	f
get_sb_single	fs/super.c	/^EXPORT_SYMBOL(get_sb_single);$/;"	v
get_sb_single	fs/super.c	/^int get_sb_single(struct file_system_type *fs_type,$/;"	f
get_scan_ratio	mm/vmscan.c	/^static void get_scan_ratio(struct zone *zone, struct scan_control *sc,$/;"	f	file:
get_sd_load_idx	kernel/sched.c	/^static inline int get_sd_load_idx(struct sched_domain *sd,$/;"	f	file:
get_signal_to_deliver	kernel/signal.c	/^int get_signal_to_deliver(siginfo_t *info, struct k_sigaction *return_ka,$/;"	f
get_slab	mm/slub.c	/^static struct kmem_cache *get_slab(size_t size, gfp_t flags)$/;"	f	file:
get_source	fs/pnode.c	/^static struct vfsmount *get_source(struct vfsmount *dest,$/;"	f	file:
get_super	fs/super.c	/^EXPORT_SYMBOL(get_super);$/;"	v
get_super	fs/super.c	/^struct super_block * get_super(struct block_device *bdev)$/;"	f
get_swap_bio	mm/page_io.c	/^static struct bio *get_swap_bio(gfp_t gfp_flags,$/;"	f	file:
get_swap_page	mm/swapfile.c	/^swp_entry_t get_swap_page(void)$/;"	f
get_swap_page_of_type	mm/swapfile.c	/^swp_entry_t get_swap_page_of_type(int type)$/;"	f
get_swappiness	mm/memcontrol.c	/^static unsigned int get_swappiness(struct mem_cgroup *memcg)$/;"	f	file:
get_symbol_offset	kernel/kallsyms.c	/^static unsigned int get_symbol_offset(unsigned long pos)$/;"	f	file:
get_symbol_pos	kernel/kallsyms.c	/^static unsigned long get_symbol_pos(unsigned long addr,$/;"	f	file:
get_sysctl	kernel/sysctl_binary.c	/^static const struct bin_table *get_sysctl(const int *name, int nlen, char *path)$/;"	f	file:
get_taint	kernel/panic.c	/^unsigned long get_taint(void)$/;"	f
get_task_comm	fs/exec.c	/^char *get_task_comm(char *buf, struct task_struct *tsk)$/;"	f
get_task_ioprio	fs/ioprio.c	/^static int get_task_ioprio(struct task_struct *p)$/;"	f	file:
get_task_mm	kernel/fork.c	/^EXPORT_SYMBOL_GPL(get_task_mm);$/;"	v
get_task_mm	kernel/fork.c	/^struct mm_struct *get_task_mm(struct task_struct *task)$/;"	f
get_task_pid	kernel/pid.c	/^struct pid *get_task_pid(struct task_struct *task, enum pid_type type)$/;"	f
get_timestamp	kernel/softlockup.c	/^static unsigned long get_timestamp(int this_cpu)$/;"	f	file:
get_tracepoint	kernel/tracepoint.c	/^static struct tracepoint_entry *get_tracepoint(const char *name)$/;"	f	file:
get_track	mm/slub.c	/^static struct track *get_track(struct kmem_cache *s, void *object,$/;"	f	file:
get_tree	kernel/audit_tree.c	/^static inline void get_tree(struct audit_tree *tree)$/;"	f	file:
get_unmapped_area	mm/mmap.c	/^EXPORT_SYMBOL(get_unmapped_area);$/;"	v
get_unmapped_area	mm/mmap.c	/^get_unmapped_area(struct file *file, unsigned long addr, unsigned long len,$/;"	f
get_unused_fd	fs/file.c	/^EXPORT_SYMBOL(get_unused_fd);$/;"	v
get_unused_fd	fs/file.c	/^int get_unused_fd(void)$/;"	f
get_update_sysctl_factor	kernel/sched.c	/^static int get_update_sysctl_factor(void)$/;"	f	file:
get_usage_char	kernel/lockdep.c	/^static char get_usage_char(struct lock_class *class, enum lock_usage_bit bit)$/;"	f	file:
get_usage_chars	kernel/lockdep.c	/^void get_usage_chars(struct lock_class *class, char usage[LOCK_USAGE_CHARS])$/;"	f
get_user_cpu_mask	kernel/sched.c	/^static int get_user_cpu_mask(unsigned long __user *user_mask_ptr, unsigned len,$/;"	f	file:
get_user_pages	mm/memory.c	/^EXPORT_SYMBOL(get_user_pages);$/;"	v
get_user_pages	mm/memory.c	/^int get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
get_user_pages	mm/nommu.c	/^EXPORT_SYMBOL(get_user_pages);$/;"	v
get_user_pages	mm/nommu.c	/^int get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
get_user_pages_fast	mm/util.c	/^EXPORT_SYMBOL_GPL(get_user_pages_fast);$/;"	v
get_user_pages_fast	mm/util.c	/^int __attribute__((weak)) get_user_pages_fast(unsigned long start,$/;"	f
get_uts	kernel/utsname_sysctl.c	/^static void *get_uts(ctl_table *table, int write)$/;"	f	file:
get_valid_node_allowed	mm/hugetlb.c	/^static int get_valid_node_allowed(int nid, nodemask_t *nodes_allowed)$/;"	f	file:
get_vm_area	mm/vmalloc.c	/^struct vm_struct *get_vm_area(unsigned long size, unsigned long flags)$/;"	f
get_vm_area_caller	mm/vmalloc.c	/^struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,$/;"	f
get_vm_area_node	mm/vmalloc.c	/^struct vm_struct *get_vm_area_node(unsigned long size, unsigned long flags,$/;"	f
get_vma_policy	mm/mempolicy.c	/^static struct mempolicy *get_vma_policy(struct task_struct *task,$/;"	f	file:
get_vma_private_data	mm/hugetlb.c	/^static unsigned long get_vma_private_data(struct vm_area_struct *vma)$/;"	f	file:
get_wq_data	kernel/workqueue.c	/^struct cpu_workqueue_struct *get_wq_data(struct work_struct *work)$/;"	f	file:
get_write_access	fs/namei.c	/^EXPORT_SYMBOL(get_write_access); \/* binfmt_aout *\/$/;"	v
get_write_access	fs/namei.c	/^int get_write_access(struct inode * inode)$/;"	f
get_zeroed_page	mm/page_alloc.c	/^EXPORT_SYMBOL(get_zeroed_page);$/;"	v
get_zeroed_page	mm/page_alloc.c	/^unsigned long get_zeroed_page(gfp_t gfp_mask)$/;"	f
getdents_callback	fs/readdir.c	/^struct getdents_callback {$/;"	s	file:
getdents_callback64	fs/readdir.c	/^struct getdents_callback64 {$/;"	s	file:
getname	fs/namei.c	/^EXPORT_SYMBOL(getname);$/;"	v
getname	fs/namei.c	/^char * getname(const char __user * filename)$/;"	f
getnstimeofday	kernel/time.c	/^EXPORT_SYMBOL_GPL(getnstimeofday);$/;"	v
getnstimeofday	kernel/time.c	/^void getnstimeofday(struct timespec *tv)$/;"	f
getrusage	kernel/sys.c	/^int getrusage(struct task_struct *p, int who, struct rusage __user *ru)$/;"	f
getthread	kernel/kgdb.c	/^static struct task_struct *getthread(struct pt_regs *regs, int tid)$/;"	f	file:
getxattr	fs/xattr.c	/^getxattr(struct dentry *d, const char __user *name, void __user *value,$/;"	f	file:
gfp_mask	kernel/audit.c	/^	gfp_t		     gfp_mask;$/;"	m	struct:audit_buffer	file:
gfp_mask	mm/vmscan.c	/^	gfp_t gfp_mask;$/;"	m	struct:scan_control	file:
gfp_to_alloc_flags	mm/page_alloc.c	/^gfp_to_alloc_flags(gfp_t gfp_mask)$/;"	f	file:
gid	fs/compat.c	/^	__compat_gid_t gid;$/;"	m	struct:compat_ncp_mount_data	file:
gid	fs/compat.c	/^	__compat_gid_t gid;$/;"	m	struct:compat_smb_mount_data	file:
gid	fs/compat.c	/^	compat_ulong_t gid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
gid	kernel/auditsc.c	/^			gid_t			gid;$/;"	m	struct:audit_context::__anon22::__anon24	file:
gid	kernel/auditsc.c	/^	gid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
gid	kernel/auditsc.c	/^	gid_t		gid;$/;"	m	struct:audit_names	file:
global_faults	mm/thrash.c	/^static unsigned int global_faults;$/;"	v	file:
global_reclaimable_pages	mm/vmscan.c	/^unsigned long global_reclaimable_pages(void)$/;"	f
global_rt_period	kernel/sched.c	/^static inline u64 global_rt_period(void)$/;"	f	file:
global_rt_runtime	kernel/sched.c	/^static inline u64 global_rt_runtime(void)$/;"	f	file:
goner	kernel/audit_tree.c	/^	int goner;$/;"	m	struct:audit_tree	file:
good_sigevent	kernel/posix-timers.c	/^static struct pid *good_sigevent(sigevent_t * event)$/;"	f	file:
gp_start	kernel/rcutree.h	/^	unsigned long gp_start;			\/* Time at which GP started, *\/$/;"	m	struct:rcu_state
gplok	kernel/module.c	/^	bool gplok;$/;"	m	struct:find_symbol_arg	file:
gpnum	kernel/rcutree.h	/^	long		gpnum;		\/* Highest gp number that this CPU *\/$/;"	m	struct:rcu_data
gpnum	kernel/rcutree.h	/^	long	gpnum;				\/* Current gp number. *\/$/;"	m	struct:rcu_state
gpnum	kernel/rcutree.h	/^	long	gpnum;		\/* Current grace period for this node. *\/$/;"	m	struct:rcu_node
grab_cache_page	include/linux/pagemap.h	/^static inline struct page *grab_cache_page(struct address_space *mapping,$/;"	f
grab_cache_page_nowait	mm/filemap.c	/^EXPORT_SYMBOL(grab_cache_page_nowait);$/;"	v
grab_cache_page_nowait	mm/filemap.c	/^grab_cache_page_nowait(struct address_space *mapping, pgoff_t index)$/;"	f
grab_cache_page_write_begin	mm/filemap.c	/^EXPORT_SYMBOL(grab_cache_page_write_begin);$/;"	v
grab_cache_page_write_begin	mm/filemap.c	/^struct page *grab_cache_page_write_begin(struct address_space *mapping,$/;"	f
grab_swap_token	mm/thrash.c	/^void grab_swap_token(struct mm_struct *mm)$/;"	f
graft_tree	fs/namespace.c	/^static int graft_tree(struct vfsmount *mnt, struct path *path)$/;"	f	file:
graph_lock	kernel/lockdep.c	/^static int graph_lock(void)$/;"	f	file:
graph_unlock	kernel/lockdep.c	/^static inline int graph_unlock(void)$/;"	f	file:
gray_list	mm/kmemleak.c	/^	struct list_head gray_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::list_head	file:
group_can_go_on	kernel/perf_event.c	/^static int group_can_go_on(struct perf_event *event,$/;"	f	file:
group_capacity	kernel/sched.c	/^	unsigned long group_capacity;$/;"	m	struct:sg_lb_stats	file:
group_cfs_rq	kernel/sched_fair.c	/^static inline struct cfs_rq *group_cfs_rq(struct sched_entity *grp)$/;"	f	file:
group_first_cpu	kernel/sched.c	/^static inline unsigned int group_first_cpu(struct sched_group *group)$/;"	f	file:
group_imb	kernel/sched.c	/^	int group_imb; \/* Is there an imbalance in the group ? *\/$/;"	m	struct:sg_lb_stats	file:
group_imb	kernel/sched.c	/^	int group_imb; \/* Is there imbalance in this sd *\/$/;"	m	struct:sd_lb_stats	file:
group_leader	kernel/sched.c	/^	struct sched_group *group_leader; \/* Group which relieves group_min *\/$/;"	m	struct:sd_lb_stats	typeref:struct:sd_lb_stats::sched_group	file:
group_load	kernel/sched.c	/^	unsigned long group_load; \/* Total load over the CPUs of the group *\/$/;"	m	struct:sg_lb_stats	file:
group_min	kernel/sched.c	/^	struct sched_group *group_min; \/* Least loaded group in sd *\/$/;"	m	struct:sd_lb_stats	typeref:struct:sd_lb_stats::sched_group	file:
group_of	kernel/sched.c	/^static struct sched_group *group_of(int cpu)$/;"	f	file:
group_rt_rq	kernel/sched_rt.c	/^static inline struct rt_rq *group_rt_rq(struct sched_rt_entity *rt_se)$/;"	f	file:
group_sched_in	kernel/perf_event.c	/^group_sched_in(struct perf_event *group_event,$/;"	f	file:
group_sched_out	kernel/perf_event.c	/^group_sched_out(struct perf_event *group_event,$/;"	f	file:
group_send_sig_info	kernel/signal.c	/^int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p)$/;"	f
groups16_from_user	kernel/uid16.c	/^static int groups16_from_user(struct group_info *group_info,$/;"	f	file:
groups16_to_user	kernel/uid16.c	/^static int groups16_to_user(old_gid_t __user *grouplist,$/;"	f	file:
groups_alloc	kernel/groups.c	/^EXPORT_SYMBOL(groups_alloc);$/;"	v
groups_alloc	kernel/groups.c	/^struct group_info *groups_alloc(int gidsetsize)$/;"	f
groups_free	kernel/groups.c	/^EXPORT_SYMBOL(groups_free);$/;"	v
groups_free	kernel/groups.c	/^void groups_free(struct group_info *group_info)$/;"	f
groups_from_user	kernel/groups.c	/^static int groups_from_user(struct group_info *group_info,$/;"	f	file:
groups_search	kernel/groups.c	/^int groups_search(const struct group_info *group_info, gid_t grp)$/;"	f
groups_sort	kernel/groups.c	/^static void groups_sort(struct group_info *group_info)$/;"	f	file:
groups_to_user	kernel/groups.c	/^static int groups_to_user(gid_t __user *grouplist,$/;"	f	file:
grow_buffers	fs/buffer.c	/^grow_buffers(struct block_device *bdev, sector_t block, int size)$/;"	f	file:
grow_dev_page	fs/buffer.c	/^grow_dev_page(struct block_device *bdev, sector_t block,$/;"	f	file:
grow_pgdat_span	mm/memory_hotplug.c	/^static void grow_pgdat_span(struct pglist_data *pgdat, unsigned long start_pfn,$/;"	f	file:
grow_tree_refs	kernel/auditsc.c	/^static int grow_tree_refs(struct audit_context *ctx)$/;"	f	file:
grow_zone_span	mm/memory_hotplug.c	/^static void grow_zone_span(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
grp	kernel/module.c	/^	struct attribute_group grp;$/;"	m	struct:module_sect_attrs	typeref:struct:module_sect_attrs::attribute_group	file:
grp	kernel/params.c	/^	struct attribute_group grp;$/;"	m	struct:module_param_attrs	typeref:struct:module_param_attrs::attribute_group	file:
grphi	kernel/rcutree.h	/^	int	grphi;		\/* highest-numbered CPU or group here. *\/$/;"	m	struct:rcu_node
grplo	kernel/rcutree.h	/^	int	grplo;		\/* lowest-numbered CPU or group here. *\/$/;"	m	struct:rcu_node
grpmask	kernel/rcutree.h	/^	unsigned long grpmask;		\/* Mask to apply to leaf qsmask. *\/$/;"	m	struct:rcu_data
grpmask	kernel/rcutree.h	/^	unsigned long grpmask;	\/* Mask to apply to parent qsmask. *\/$/;"	m	struct:rcu_node
grpnum	kernel/rcutree.h	/^	u8	grpnum;		\/* CPU\/group number for next level up. *\/$/;"	m	struct:rcu_node
guarantee_online_cpus	kernel/cpuset.c	/^static void guarantee_online_cpus(const struct cpuset *cs,$/;"	f	file:
guarantee_online_mems	kernel/cpuset.c	/^static void guarantee_online_mems(const struct cpuset *cs, nodemask_t *pmask)$/;"	f	file:
h_load	kernel/sched.c	/^	unsigned long h_load;$/;"	m	struct:cfs_rq	file:
handle_early_requeue_pi_wakeup	kernel/futex.c	/^int handle_early_requeue_pi_wakeup(struct futex_hash_bucket *hb,$/;"	f	file:
handle_event	kernel/audit_tree.c	/^static void handle_event(struct inotify_watch *watch, u32 wd, u32 mask,$/;"	f	file:
handle_futex_death	kernel/futex.c	/^int handle_futex_death(u32 __user *uaddr, struct task_struct *curr, int pi)$/;"	f
handle_mm_fault	mm/memory.c	/^int handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
handle_one	kernel/auditsc.c	/^static inline void handle_one(const struct inode *inode)$/;"	f	file:
handle_op	kernel/rtmutex-tester.c	/^static int handle_op(struct test_thread_data *td, int lockwakeup)$/;"	f	file:
handle_path	kernel/auditsc.c	/^static void handle_path(const struct dentry *dentry)$/;"	f	file:
handle_pte_fault	mm/memory.c	/^static inline int handle_pte_fault(struct mm_struct *mm,$/;"	f	file:
handle_slab	mm/slab.c	/^static void handle_slab(unsigned long *n, struct kmem_cache *c, struct slab *s)$/;"	f	file:
handle_truncate	fs/namei.c	/^static int handle_truncate(struct path *path)$/;"	f	file:
handle_write_error	mm/vmscan.c	/^static void handle_write_error(struct address_space *mapping,$/;"	f	file:
handler_errors	kernel/test_kprobes.c	/^static int errors, handler_errors, num_tests;$/;"	v	file:
hardirqs_off_events	kernel/lockdep.c	/^atomic_t hardirqs_off_events;$/;"	v
hardirqs_on_events	kernel/lockdep.c	/^atomic_t hardirqs_on_events;$/;"	v
has_intersects_mems_allowed	mm/oom_kill.c	/^static int has_intersects_mems_allowed(struct task_struct *tsk)$/;"	f	file:
has_pending_signals	kernel/signal.c	/^static inline int has_pending_signals(sigset_t *signal, sigset_t *blocked)$/;"	f	file:
has_perm	kernel/auditsc.c	/^			int			has_perm;$/;"	m	struct:audit_context::__anon22::__anon24	file:
has_pushable_tasks	kernel/sched_rt.c	/^static inline int has_pushable_tasks(struct rq *rq)$/;"	f	file:
has_stopped_jobs	kernel/exit.c	/^static int has_stopped_jobs(struct pid *pgrp)$/;"	f	file:
hash	fs/block_dev.c	/^static inline unsigned long hash(dev_t dev)$/;"	f	file:
hash	fs/inode.c	/^static unsigned long hash(struct super_block *sb, unsigned long hashval)$/;"	f	file:
hash	fs/namespace.c	/^static inline unsigned long hash(struct vfsmount *mnt, struct dentry *dentry)$/;"	f	file:
hash	kernel/audit_tree.c	/^	struct list_head hash;$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::list_head	file:
hash_dcookie	fs/dcookies.c	/^static void hash_dcookie(struct dcookie_struct * dcs)$/;"	f	file:
hash_futex	kernel/futex.c	/^static struct futex_hash_bucket *hash_futex(union futex_key *key)$/;"	f	file:
hash_list	fs/dcookies.c	/^	struct list_head hash_list;$/;"	m	struct:dcookie_struct	typeref:struct:dcookie_struct::list_head	file:
hashdist	mm/page_alloc.c	/^int hashdist = HASHDIST_DEFAULT;$/;"	v
have_callable_console	kernel/printk.c	/^static int have_callable_console(void)$/;"	f	file:
have_submounts	fs/dcache.c	/^EXPORT_SYMBOL(have_submounts);$/;"	v
have_submounts	fs/dcache.c	/^int have_submounts(struct dentry *parent)$/;"	f
hcpu	kernel/cpu.c	/^	void *hcpu;$/;"	m	struct:take_cpu_down_param	file:
hdev	fs/block_dev.c	/^	struct kobject *hdev;	\/* e.g. "\/block\/dm-0" *\/$/;"	m	struct:bd_holder	typeref:struct:bd_holder::kobject	file:
hdir	fs/block_dev.c	/^	struct kobject *hdir;	\/* e.g. "\/block\/sda\/holders" *\/$/;"	m	struct:bd_holder	typeref:struct:bd_holder::kobject	file:
head	fs/direct-io.c	/^	unsigned head;			\/* next page to process *\/$/;"	m	struct:dio	file:
head	kernel/audit_tree.c	/^	struct rcu_head head;$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::rcu_head	file:
head	kernel/audit_tree.c	/^	struct rcu_head head;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::rcu_head	file:
head	kernel/rcutorture.c	/^	struct rcu_head head;$/;"	m	struct:rcu_bh_torture_synchronize	typeref:struct:rcu_bh_torture_synchronize::rcu_head	file:
head	kernel/softirq.c	/^	struct tasklet_struct *head;$/;"	m	struct:tasklet_head	typeref:struct:tasklet_head::tasklet_struct	file:
head	mm/ksm.c	/^			struct stable_node *head;$/;"	m	struct:rmap_item::__anon3::__anon4	typeref:struct:rmap_item::__anon3::__anon4::stable_node	file:
head	mm/memory-failure.c	721;"	d	file:
head	mm/memory-failure.c	778;"	d	file:
head	mm/slab.c	/^	struct rcu_head head;$/;"	m	struct:slab_rcu	typeref:struct:slab_rcu::rcu_head	file:
head	mm/slob.c	/^	struct rcu_head head;$/;"	m	struct:slob_rcu	typeref:struct:slob_rcu::rcu_head	file:
header	kernel/perf_event.c	/^		struct perf_event_header	header;$/;"	m	struct:perf_comm_event::__anon38	typeref:struct:perf_comm_event::__anon38::perf_event_header	file:
header	kernel/perf_event.c	/^		struct perf_event_header	header;$/;"	m	struct:perf_mmap_event::__anon39	typeref:struct:perf_mmap_event::__anon39::perf_event_header	file:
header	kernel/perf_event.c	/^		struct perf_event_header	header;$/;"	m	struct:perf_task_event::__anon37	typeref:struct:perf_task_event::__anon37::perf_event_header	file:
header	kernel/perf_event.c	/^	struct perf_event_header	header;$/;"	m	struct:perf_read_event	typeref:struct:perf_read_event::perf_event_header	file:
header	mm/kmemleak-test.c	/^	long header[25];$/;"	m	struct:test_node	file:
heap_stack_gap	mm/nommu.c	/^int heap_stack_gap = 0;$/;"	v
height	lib/radix-tree.c	/^	unsigned int	height;		\/* Height from the bottom *\/$/;"	m	struct:radix_tree_node	file:
helper_lock	kernel/kmod.c	/^static inline void helper_lock(void) {}$/;"	f	file:
helper_lock	kernel/kmod.c	/^static void helper_lock(void)$/;"	f	file:
helper_unlock	kernel/kmod.c	/^static inline void helper_unlock(void) {}$/;"	f	file:
helper_unlock	kernel/kmod.c	/^static void helper_unlock(void)$/;"	f	file:
hex	kernel/kgdb.c	/^static int hex(char ch)$/;"	f	file:
hex_dump_object	mm/kmemleak.c	/^static void hex_dump_object(struct seq_file *seq,$/;"	f	file:
hex_value	kernel/sysctl_binary.c	/^static unsigned hex_value(int ch)$/;"	f	file:
hibernation_mode	mm/vmscan.c	/^	unsigned long hibernation_mode;$/;"	m	struct:scan_control	file:
hierarchy_id	kernel/cgroup.c	/^	int hierarchy_id;$/;"	m	struct:cgroupfs_root	file:
high_memory	mm/memory.c	/^EXPORT_SYMBOL(high_memory);$/;"	v
high_memory	mm/memory.c	/^void * high_memory;$/;"	v
high_memory	mm/nommu.c	/^void *high_memory;$/;"	v
highest_memmap_pfn	mm/nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
highest_prio	kernel/sched.c	/^	} highest_prio;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::__anon42	file:
highmem_dirtyable_memory	mm/page-writeback.c	/^static unsigned long highmem_dirtyable_memory(unsigned long total)$/;"	f	file:
hits	kernel/profile.c	/^	u32 pc, hits;$/;"	m	struct:profile_hit	file:
hlist	kernel/tracepoint.c	/^	struct hlist_node hlist;$/;"	m	struct:tracepoint_entry	typeref:struct:tracepoint_entry::hlist_node	file:
hlist	mm/ksm.c	/^			struct hlist_node hlist;$/;"	m	struct:rmap_item::__anon3::__anon4	typeref:struct:rmap_item::__anon3::__anon4::hlist_node	file:
hlist	mm/ksm.c	/^	struct hlist_head hlist;$/;"	m	struct:stable_node	typeref:struct:stable_node::hlist_head	file:
hlist_add_after	include/linux/list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	include/linux/list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	include/linux/list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	include/linux/list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	include/linux/list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	include/linux/list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	include/linux/list.h	635;"	d
hlist_for_each	include/linux/list.h	637;"	d
hlist_for_each_entry	include/linux/list.h	652;"	d
hlist_for_each_entry_continue	include/linux/list.h	664;"	d
hlist_for_each_entry_from	include/linux/list.h	676;"	d
hlist_for_each_entry_safe	include/linux/list.h	689;"	d
hlist_for_each_safe	include/linux/list.h	641;"	d
hlist_head	include/linux/list.h	/^struct hlist_head {$/;"	s
hlist_move_list	include/linux/list.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_node	include/linux/list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	include/linux/list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
hlock_class	kernel/lockdep.c	/^static inline struct lock_class *hlock_class(struct held_lock *hlock)$/;"	f	file:
hold_anon_vma	mm/ksm.c	/^static void hold_anon_vma(struct rmap_item *rmap_item,$/;"	f	file:
host_addr	fs/compat.c	/^	compat_uptr_t host_addr;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
host_addrlen	fs/compat.c	/^	compat_uint_t host_addrlen;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
host_status	fs/compat_ioctl.c	/^	unsigned short host_status;	\/* [o] errors from host adapter *\/$/;"	m	struct:sg_io_hdr32	file:
hostname	fs/compat.c	/^	struct compat_nfs_string hostname;$/;"	m	struct:compat_nfs4_mount_data_v1	typeref:struct:compat_nfs4_mount_data_v1::compat_nfs_string	file:
hotadd_new_pgdat	mm/memory_hotplug.c	/^static pg_data_t __ref *hotadd_new_pgdat(int nid, u64 start)$/;"	f	file:
hotplug_cfd	kernel/smp.c	/^hotplug_cfd(struct notifier_block *nfb, unsigned long action, void *hcpu)$/;"	f	file:
hotplug_cfd_notifier	kernel/smp.c	/^static struct notifier_block __cpuinitdata hotplug_cfd_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
hotplug_hrtick	kernel/sched.c	/^hotplug_hrtick(struct notifier_block *nfb, unsigned long action, void *hcpu)$/;"	f	file:
hotremove_migrate_alloc	mm/memory_hotplug.c	/^hotremove_migrate_alloc(struct page *page, unsigned long private, int **x)$/;"	f	file:
hres_timers_resume	kernel/hrtimer.c	/^void hres_timers_resume(void)$/;"	f
hrtick	kernel/sched.c	/^static enum hrtimer_restart hrtick(struct hrtimer *timer)$/;"	f	file:
hrtick_clear	kernel/sched.c	/^static inline void hrtick_clear(struct rq *rq)$/;"	f	file:
hrtick_clear	kernel/sched.c	/^static void hrtick_clear(struct rq *rq)$/;"	f	file:
hrtick_csd	kernel/sched.c	/^	struct call_single_data hrtick_csd;$/;"	m	struct:rq	typeref:struct:rq::call_single_data	file:
hrtick_csd_pending	kernel/sched.c	/^	int hrtick_csd_pending;$/;"	m	struct:rq	file:
hrtick_enabled	kernel/sched.c	/^static inline int hrtick_enabled(struct rq *rq)$/;"	f	file:
hrtick_start	kernel/sched.c	/^static void hrtick_start(struct rq *rq, u64 delay)$/;"	f	file:
hrtick_start_fair	kernel/sched_fair.c	/^hrtick_start_fair(struct rq *rq, struct task_struct *p)$/;"	f	file:
hrtick_start_fair	kernel/sched_fair.c	/^static void hrtick_start_fair(struct rq *rq, struct task_struct *p)$/;"	f	file:
hrtick_timer	kernel/sched.c	/^	struct hrtimer hrtick_timer;$/;"	m	struct:rq	typeref:struct:rq::hrtimer	file:
hrtick_update	kernel/sched_fair.c	/^static inline void hrtick_update(struct rq *rq)$/;"	f	file:
hrtick_update	kernel/sched_fair.c	/^static void hrtick_update(struct rq *rq)$/;"	f	file:
hrtimer_cancel	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_cancel);$/;"	v
hrtimer_cancel	kernel/hrtimer.c	/^int hrtimer_cancel(struct hrtimer *timer)$/;"	f
hrtimer_check_target	kernel/hrtimer.c	/^hrtimer_check_target(struct hrtimer *timer, struct hrtimer_clock_base *new_base)$/;"	f	file:
hrtimer_cpu_notify	kernel/hrtimer.c	/^static int __cpuinit hrtimer_cpu_notify(struct notifier_block *self,$/;"	f	file:
hrtimer_debug_descr	kernel/hrtimer.c	/^static struct debug_obj_descr hrtimer_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr	file:
hrtimer_debug_descr	kernel/hrtimer.c	/^static struct debug_obj_descr hrtimer_debug_descr;$/;"	v	typeref:struct:debug_obj_descr	file:
hrtimer_enqueue_reprogram	kernel/hrtimer.c	/^static inline int hrtimer_enqueue_reprogram(struct hrtimer *timer,$/;"	f	file:
hrtimer_fixup_activate	kernel/hrtimer.c	/^static int hrtimer_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
hrtimer_fixup_free	kernel/hrtimer.c	/^static int hrtimer_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
hrtimer_fixup_init	kernel/hrtimer.c	/^static int hrtimer_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
hrtimer_force_reprogram	kernel/hrtimer.c	/^hrtimer_force_reprogram(struct hrtimer_cpu_base *base, int skip_equal) { }$/;"	f	file:
hrtimer_force_reprogram	kernel/hrtimer.c	/^hrtimer_force_reprogram(struct hrtimer_cpu_base *cpu_base, int skip_equal)$/;"	f	file:
hrtimer_forward	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_forward);$/;"	v
hrtimer_forward	kernel/hrtimer.c	/^u64 hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval)$/;"	f
hrtimer_get_next_event	kernel/hrtimer.c	/^ktime_t hrtimer_get_next_event(void)$/;"	f
hrtimer_get_remaining	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_get_remaining);$/;"	v
hrtimer_get_remaining	kernel/hrtimer.c	/^ktime_t hrtimer_get_remaining(const struct hrtimer *timer)$/;"	f
hrtimer_get_res	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_get_res);$/;"	v
hrtimer_get_res	kernel/hrtimer.c	/^int hrtimer_get_res(const clockid_t which_clock, struct timespec *tp)$/;"	f
hrtimer_get_softirq_time	kernel/hrtimer.c	/^static void hrtimer_get_softirq_time(struct hrtimer_cpu_base *base)$/;"	f	file:
hrtimer_get_target	kernel/hrtimer.c	/^static int hrtimer_get_target(int this_cpu, int pinned)$/;"	f	file:
hrtimer_hres_active	kernel/hrtimer.c	/^static inline int hrtimer_hres_active(void) { return 0; }$/;"	f	file:
hrtimer_hres_active	kernel/hrtimer.c	/^static inline int hrtimer_hres_active(void)$/;"	f	file:
hrtimer_init	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_init);$/;"	v
hrtimer_init	kernel/hrtimer.c	/^void hrtimer_init(struct hrtimer *timer, clockid_t clock_id,$/;"	f
hrtimer_init_hres	kernel/hrtimer.c	/^static inline void hrtimer_init_hres(struct hrtimer_cpu_base *base) { }$/;"	f	file:
hrtimer_init_hres	kernel/hrtimer.c	/^static inline void hrtimer_init_hres(struct hrtimer_cpu_base *base)$/;"	f	file:
hrtimer_init_on_stack	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_init_on_stack);$/;"	v
hrtimer_init_on_stack	kernel/hrtimer.c	/^void hrtimer_init_on_stack(struct hrtimer *timer, clockid_t clock_id,$/;"	f
hrtimer_init_sleeper	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_init_sleeper);$/;"	v
hrtimer_init_sleeper	kernel/hrtimer.c	/^void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, struct task_struct *task)$/;"	f
hrtimer_init_timer_hres	kernel/hrtimer.c	/^static inline void hrtimer_init_timer_hres(struct hrtimer *timer) { }$/;"	f	file:
hrtimer_init_timer_hres	kernel/hrtimer.c	/^static inline void hrtimer_init_timer_hres(struct hrtimer *timer)$/;"	f	file:
hrtimer_interrupt	kernel/hrtimer.c	/^void hrtimer_interrupt(struct clock_event_device *dev)$/;"	f
hrtimer_is_hres_enabled	kernel/hrtimer.c	/^static inline int hrtimer_is_hres_enabled(void) { return 0; }$/;"	f	file:
hrtimer_is_hres_enabled	kernel/hrtimer.c	/^static inline int hrtimer_is_hres_enabled(void)$/;"	f	file:
hrtimer_nanosleep	kernel/hrtimer.c	/^long hrtimer_nanosleep(struct timespec *rqtp, struct timespec __user *rmtp,$/;"	f
hrtimer_nanosleep_restart	kernel/hrtimer.c	/^long __sched hrtimer_nanosleep_restart(struct restart_block *restart)$/;"	f
hrtimer_peek_ahead_timers	kernel/hrtimer.c	/^void hrtimer_peek_ahead_timers(void)$/;"	f
hrtimer_reprogram	kernel/hrtimer.c	/^static int hrtimer_reprogram(struct hrtimer *timer,$/;"	f	file:
hrtimer_run_pending	kernel/hrtimer.c	/^void hrtimer_run_pending(void)$/;"	f
hrtimer_run_queues	kernel/hrtimer.c	/^void hrtimer_run_queues(void)$/;"	f
hrtimer_start	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_start);$/;"	v
hrtimer_start	kernel/hrtimer.c	/^hrtimer_start(struct hrtimer *timer, ktime_t tim, const enum hrtimer_mode mode)$/;"	f
hrtimer_start_range_ns	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_start_range_ns);$/;"	v
hrtimer_start_range_ns	kernel/hrtimer.c	/^int hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,$/;"	f
hrtimer_switch_to_hres	kernel/hrtimer.c	/^static inline int hrtimer_switch_to_hres(void) { return 0; }$/;"	f	file:
hrtimer_switch_to_hres	kernel/hrtimer.c	/^static int hrtimer_switch_to_hres(void)$/;"	f	file:
hrtimer_try_to_cancel	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(hrtimer_try_to_cancel);$/;"	v
hrtimer_try_to_cancel	kernel/hrtimer.c	/^int hrtimer_try_to_cancel(struct hrtimer *timer)$/;"	f
hrtimer_wakeup	kernel/hrtimer.c	/^static enum hrtimer_restart hrtimer_wakeup(struct hrtimer *timer)$/;"	f	file:
hrtimers_init	kernel/hrtimer.c	/^void __init hrtimers_init(void)$/;"	f
hrtimers_nb	kernel/hrtimer.c	/^static struct notifier_block __cpuinitdata hrtimers_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
hstate_attr_group	mm/hugetlb.c	/^static struct attribute_group hstate_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
hstate_attrs	mm/hugetlb.c	/^static struct attribute *hstate_attrs[] = {$/;"	v	typeref:struct:attribute	file:
hstate_kobjs	mm/hugetlb.c	/^	struct kobject		*hstate_kobjs[HUGE_MAX_HSTATE];$/;"	m	struct:node_hstate	typeref:struct:node_hstate::kobject	file:
hstate_kobjs	mm/hugetlb.c	/^static struct kobject *hstate_kobjs[HUGE_MAX_HSTATE];$/;"	v	typeref:struct:kobject	file:
hstate_next_node_to_alloc	mm/hugetlb.c	/^static int hstate_next_node_to_alloc(struct hstate *h,$/;"	f	file:
hstate_next_node_to_free	mm/hugetlb.c	/^static int hstate_next_node_to_free(struct hstate *h, nodemask_t *nodes_allowed)$/;"	f	file:
hstates	mm/hugetlb.c	/^struct hstate hstates[HUGE_MAX_HSTATE];$/;"	v	typeref:struct:hstate
htlb_alloc_mask	mm/hugetlb.c	/^static gfp_t htlb_alloc_mask = GFP_HIGHUSER;$/;"	v	file:
hub6	fs/compat_ioctl.c	/^        compat_int_t    hub6;$/;"	m	struct:serial_struct32	file:
huge_zonelist	mm/mempolicy.c	/^struct zonelist *huge_zonelist(struct vm_area_struct *vma, unsigned long addr,$/;"	f
hugepages_kobj	mm/hugetlb.c	/^	struct kobject		*hugepages_kobj;$/;"	m	struct:node_hstate	typeref:struct:node_hstate::kobject	file:
hugepages_kobj	mm/hugetlb.c	/^static struct kobject *hugepages_kobj;$/;"	v	typeref:struct:kobject	file:
hugepages_treat_as_movable	mm/hugetlb.c	/^unsigned long hugepages_treat_as_movable;$/;"	v
hugetlb_acct_memory	mm/hugetlb.c	/^static int hugetlb_acct_memory(struct hstate *h, long delta)$/;"	f	file:
hugetlb_add_hstate	mm/hugetlb.c	/^void __init hugetlb_add_hstate(unsigned order)$/;"	f
hugetlb_change_protection	mm/hugetlb.c	/^void hugetlb_change_protection(struct vm_area_struct *vma,$/;"	f
hugetlb_cow	mm/hugetlb.c	/^static int hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
hugetlb_default_setup	mm/hugetlb.c	/^static int __init hugetlb_default_setup(char *s)$/;"	f	file:
hugetlb_exit	mm/hugetlb.c	/^module_exit(hugetlb_exit);$/;"	v
hugetlb_exit	mm/hugetlb.c	/^static void __exit hugetlb_exit(void)$/;"	f	file:
hugetlb_fault	mm/hugetlb.c	/^int hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
hugetlb_hstate_alloc_pages	mm/hugetlb.c	/^static void __init hugetlb_hstate_alloc_pages(struct hstate *h)$/;"	f	file:
hugetlb_infinity	mm/hugetlb.c	/^const unsigned long hugetlb_zero = 0, hugetlb_infinity = ~0UL;$/;"	v
hugetlb_init	mm/hugetlb.c	/^module_init(hugetlb_init);$/;"	v
hugetlb_init	mm/hugetlb.c	/^static int __init hugetlb_init(void)$/;"	f	file:
hugetlb_init_hstates	mm/hugetlb.c	/^static void __init hugetlb_init_hstates(void)$/;"	f	file:
hugetlb_mempolicy_sysctl_handler	mm/hugetlb.c	/^int hugetlb_mempolicy_sysctl_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_no_page	mm/hugetlb.c	/^static int hugetlb_no_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
hugetlb_nrpages_setup	mm/hugetlb.c	/^static int __init hugetlb_nrpages_setup(char *s)$/;"	f	file:
hugetlb_overcommit_handler	mm/hugetlb.c	/^int hugetlb_overcommit_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_register_all_nodes	mm/hugetlb.c	/^static void hugetlb_register_all_nodes(void) { }$/;"	f	file:
hugetlb_register_all_nodes	mm/hugetlb.c	/^static void hugetlb_register_all_nodes(void)$/;"	f	file:
hugetlb_register_node	mm/hugetlb.c	/^void hugetlb_register_node(struct node *node)$/;"	f
hugetlb_report_meminfo	mm/hugetlb.c	/^void hugetlb_report_meminfo(struct seq_file *m)$/;"	f
hugetlb_report_node_meminfo	mm/hugetlb.c	/^int hugetlb_report_node_meminfo(int nid, char *buf)$/;"	f
hugetlb_reserve_pages	mm/hugetlb.c	/^int hugetlb_reserve_pages(struct inode *inode,$/;"	f
hugetlb_sysctl_handler	mm/hugetlb.c	/^int hugetlb_sysctl_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_sysctl_handler_common	mm/hugetlb.c	/^static int hugetlb_sysctl_handler_common(bool obey_mempolicy,$/;"	f	file:
hugetlb_sysfs_add_hstate	mm/hugetlb.c	/^static int hugetlb_sysfs_add_hstate(struct hstate *h, struct kobject *parent,$/;"	f	file:
hugetlb_sysfs_init	mm/hugetlb.c	/^static void __init hugetlb_sysfs_init(void)$/;"	f	file:
hugetlb_total_pages	mm/hugetlb.c	/^unsigned long hugetlb_total_pages(void)$/;"	f
hugetlb_treat_movable_handler	mm/hugetlb.c	/^int hugetlb_treat_movable_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_unregister_all_nodes	mm/hugetlb.c	/^static void hugetlb_unregister_all_nodes(void) { }$/;"	f	file:
hugetlb_unregister_all_nodes	mm/hugetlb.c	/^static void hugetlb_unregister_all_nodes(void)$/;"	f	file:
hugetlb_unregister_node	mm/hugetlb.c	/^void hugetlb_unregister_node(struct node *node)$/;"	f
hugetlb_unreserve_pages	mm/hugetlb.c	/^void hugetlb_unreserve_pages(struct inode *inode, long offset, long freed)$/;"	f
hugetlb_vm_op_close	mm/hugetlb.c	/^static void hugetlb_vm_op_close(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_op_fault	mm/hugetlb.c	/^static int hugetlb_vm_op_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
hugetlb_vm_op_open	mm/hugetlb.c	/^static void hugetlb_vm_op_open(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_ops	mm/hugetlb.c	/^const struct vm_operations_struct hugetlb_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
hugetlb_zero	mm/hugetlb.c	/^const unsigned long hugetlb_zero = 0, hugetlb_infinity = ~0UL;$/;"	v
hugetlbfs_pagecache_page	mm/hugetlb.c	/^static struct page *hugetlbfs_pagecache_page(struct hstate *h,$/;"	f	file:
hugetlbfs_pagecache_present	mm/hugetlb.c	/^static bool hugetlbfs_pagecache_present(struct hstate *h,$/;"	f	file:
hung_task_init	kernel/hung_task.c	/^module_init(hung_task_init);$/;"	v
hung_task_init	kernel/hung_task.c	/^static int __init hung_task_init(void)$/;"	f	file:
hung_task_panic	kernel/hung_task.c	/^hung_task_panic(struct notifier_block *this, unsigned long event, void *ptr)$/;"	f	file:
hung_task_panic_setup	kernel/hung_task.c	/^static int __init hung_task_panic_setup(char *str)$/;"	f	file:
hw_breakpoint_exceptions_nb	kernel/hw_breakpoint.c	/^static struct notifier_block hw_breakpoint_exceptions_nb = {$/;"	v	typeref:struct:notifier_block	file:
hw_perf_disable	kernel/perf_event.c	/^void __weak hw_perf_disable(void)		{ barrier(); }$/;"	f
hw_perf_enable	kernel/perf_event.c	/^void __weak hw_perf_enable(void)		{ barrier(); }$/;"	f
hw_perf_event_init	kernel/perf_event.c	/^extern __weak const struct pmu *hw_perf_event_init(struct perf_event *event)$/;"	f
hw_perf_event_setup	kernel/perf_event.c	/^void __weak hw_perf_event_setup(int cpu)	{ barrier(); }$/;"	f
hw_perf_event_setup_online	kernel/perf_event.c	/^void __weak hw_perf_event_setup_online(int cpu)	{ barrier(); }$/;"	f
hw_perf_group_sched_in	kernel/perf_event.c	/^hw_perf_group_sched_in(struct perf_event *group_leader,$/;"	f
hwcache_align	mm/slub.c	/^SLAB_ATTR_RO(hwcache_align);$/;"	v
hwcache_align_show	mm/slub.c	/^static ssize_t hwcache_align_show(struct kmem_cache *s, char *buf)$/;"	f	file:
hwpoison_dir	mm/hwpoison-inject.c	/^static struct dentry *hwpoison_dir;$/;"	v	typeref:struct:dentry	file:
hwpoison_filter	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter);$/;"	v
hwpoison_filter	mm/memory-failure.c	/^int hwpoison_filter(struct page *p)$/;"	f
hwpoison_filter_dev	mm/memory-failure.c	/^static int hwpoison_filter_dev(struct page *p)$/;"	f	file:
hwpoison_filter_dev_major	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_dev_major);$/;"	v
hwpoison_filter_dev_major	mm/memory-failure.c	/^u32 hwpoison_filter_dev_major = ~0U;$/;"	v
hwpoison_filter_dev_minor	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_dev_minor);$/;"	v
hwpoison_filter_dev_minor	mm/memory-failure.c	/^u32 hwpoison_filter_dev_minor = ~0U;$/;"	v
hwpoison_filter_enable	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_enable);$/;"	v
hwpoison_filter_enable	mm/memory-failure.c	/^u32 hwpoison_filter_enable = 0;$/;"	v
hwpoison_filter_flags	mm/memory-failure.c	/^static int hwpoison_filter_flags(struct page *p)$/;"	f	file:
hwpoison_filter_flags_mask	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_flags_mask);$/;"	v
hwpoison_filter_flags_mask	mm/memory-failure.c	/^u64 hwpoison_filter_flags_mask;$/;"	v
hwpoison_filter_flags_value	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_flags_value);$/;"	v
hwpoison_filter_flags_value	mm/memory-failure.c	/^u64 hwpoison_filter_flags_value;$/;"	v
hwpoison_filter_memcg	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_memcg);$/;"	v
hwpoison_filter_memcg	mm/memory-failure.c	/^u64 hwpoison_filter_memcg;$/;"	v
hwpoison_filter_task	mm/memory-failure.c	/^static int hwpoison_filter_task(struct page *p) { return 0; }$/;"	f	file:
hwpoison_filter_task	mm/memory-failure.c	/^static int hwpoison_filter_task(struct page *p)$/;"	f	file:
hwpoison_inject	mm/hwpoison-inject.c	/^static int hwpoison_inject(void *data, u64 val)$/;"	f	file:
hwpoison_unpoison	mm/hwpoison-inject.c	/^static int hwpoison_unpoison(void *data, u64 val)$/;"	f	file:
hwpoison_user_mappings	mm/memory-failure.c	/^static int hwpoison_user_mappings(struct page *p, unsigned long pfn,$/;"	f	file:
i2c_msg32	fs/compat_ioctl.c	/^struct i2c_msg32 {$/;"	s	file:
i2c_rdwr_aligned	fs/compat_ioctl.c	/^struct i2c_rdwr_aligned {$/;"	s	file:
i2c_rdwr_ioctl_data32	fs/compat_ioctl.c	/^struct i2c_rdwr_ioctl_data32 {$/;"	s	file:
i2c_smbus_ioctl_data32	fs/compat_ioctl.c	/^struct i2c_smbus_ioctl_data32 {$/;"	s	file:
iFrame	fs/compat_ioctl.c	/^        compat_uptr_t iFrame;$/;"	m	struct:compat_video_still_picture	file:
i_size	fs/direct-io.c	/^	loff_t i_size;			\/* i_size when submitted *\/$/;"	m	struct:dio	file:
icache_shrinker	fs/inode.c	/^static struct shrinker icache_shrinker = {$/;"	v	typeref:struct:shrinker	file:
id	kernel/cgroup.c	/^	unsigned short id;$/;"	m	struct:css_id	file:
id	mm/page_cgroup.c	/^	unsigned short		id;$/;"	m	struct:swap_cgroup	file:
ident_map	kernel/exec_domain.c	/^static u_long ident_map[32] = {$/;"	v	file:
idle	kernel/sched.c	/^	struct task_struct *curr, *idle;$/;"	m	struct:rq	typeref:struct:rq::	file:
idle	kernel/stop_machine.c	/^static struct stop_machine_data active, idle;$/;"	v	typeref:struct:	file:
idle_at_tick	kernel/sched.c	/^	unsigned char idle_at_tick;$/;"	m	struct:rq	file:
idle_balance	kernel/sched.c	/^static inline void idle_balance(int cpu, struct rq *rq)$/;"	f	file:
idle_balance	kernel/sched.c	/^static void idle_balance(int this_cpu, struct rq *this_rq)$/;"	f	file:
idle_cpu	kernel/sched.c	/^int idle_cpu(int cpu)$/;"	f
idle_regs	kernel/fork.c	/^noinline struct pt_regs * __cpuinit __attribute__((weak)) idle_regs(struct pt_regs *regs)$/;"	f
idle_sched_class	kernel/sched_idletask.c	/^static const struct sched_class idle_sched_class = {$/;"	v	typeref:struct:sched_class	file:
idle_stamp	kernel/sched.c	/^	u64 idle_stamp;$/;"	m	struct:rq	file:
idle_task	kernel/sched.c	/^struct task_struct *idle_task(int cpu)$/;"	f
idle_task_exit	kernel/sched.c	/^void idle_task_exit(void)$/;"	f
idr	fs/notify/inotify/inotify.c	/^	struct idr		idr;		\/* idr mapping wd -> watch *\/$/;"	m	struct:inotify_handle	typeref:struct:inotify_handle::idr	file:
idx	mm/memcontrol.c	/^	enum mem_cgroup_stat_index idx;$/;"	m	struct:mem_cgroup_idx_data	typeref:enum:mem_cgroup_idx_data::mem_cgroup_stat_index	file:
ifind	fs/inode.c	/^static struct inode *ifind(struct super_block *sb,$/;"	f	file:
ifind_fast	fs/inode.c	/^static struct inode *ifind_fast(struct super_block *sb,$/;"	f	file:
iget5_locked	fs/inode.c	/^EXPORT_SYMBOL(iget5_locked);$/;"	v
iget5_locked	fs/inode.c	/^struct inode *iget5_locked(struct super_block *sb, unsigned long hashval,$/;"	f
iget_failed	fs/bad_inode.c	/^EXPORT_SYMBOL(iget_failed);$/;"	v
iget_failed	fs/bad_inode.c	/^void iget_failed(struct inode *inode)$/;"	f
iget_locked	fs/inode.c	/^EXPORT_SYMBOL(iget_locked);$/;"	v
iget_locked	fs/inode.c	/^struct inode *iget_locked(struct super_block *sb, unsigned long ino)$/;"	f
ignore_gfp_highmem	mm/page_alloc.c	/^	u32 ignore_gfp_highmem;$/;"	m	struct:fail_page_alloc_attr	file:
ignore_gfp_highmem_file	mm/page_alloc.c	/^	struct dentry *ignore_gfp_highmem_file;$/;"	m	struct:fail_page_alloc_attr	typeref:struct:fail_page_alloc_attr::dentry	file:
ignore_gfp_wait	mm/failslab.c	/^	u32 ignore_gfp_wait;$/;"	m	struct:__anon1	file:
ignore_gfp_wait	mm/page_alloc.c	/^	u32 ignore_gfp_wait;$/;"	m	struct:fail_page_alloc_attr	file:
ignore_gfp_wait_file	mm/failslab.c	/^	struct dentry *ignore_gfp_wait_file;$/;"	m	struct:__anon1	typeref:struct:__anon1::dentry	file:
ignore_gfp_wait_file	mm/page_alloc.c	/^	struct dentry *ignore_gfp_wait_file;$/;"	m	struct:fail_page_alloc_attr	typeref:struct:fail_page_alloc_attr::dentry	file:
ignore_loglevel	kernel/printk.c	/^static int __read_mostly ignore_loglevel;$/;"	v	file:
ignore_loglevel_setup	kernel/printk.c	/^static int __init ignore_loglevel_setup(char *str)$/;"	f	file:
ignore_signals	kernel/signal.c	/^void ignore_signals(struct task_struct *t)$/;"	f
ignoring_children	kernel/ptrace.c	/^static int ignoring_children(struct sighand_struct *sigh)$/;"	f	file:
igrab	fs/inode.c	/^EXPORT_SYMBOL(igrab);$/;"	v
igrab	fs/inode.c	/^struct inode *igrab(struct inode *inode)$/;"	f
ihash_entries	fs/inode.c	/^static __initdata unsigned long ihash_entries;$/;"	v	file:
ikconfig_cleanup	kernel/configs.c	/^module_exit(ikconfig_cleanup);$/;"	v
ikconfig_cleanup	kernel/configs.c	/^static void __exit ikconfig_cleanup(void)$/;"	f	file:
ikconfig_file_ops	kernel/configs.c	/^static const struct file_operations ikconfig_file_ops = {$/;"	v	typeref:struct:file_operations	file:
ikconfig_init	kernel/configs.c	/^module_init(ikconfig_init);$/;"	v
ikconfig_init	kernel/configs.c	/^static int __init ikconfig_init(void)$/;"	f	file:
ikconfig_read_current	kernel/configs.c	/^ikconfig_read_current(struct file *file, char __user *buf,$/;"	f	file:
ilb_grp_nohz_mask	kernel/sched.c	/^	cpumask_var_t ilb_grp_nohz_mask;$/;"	m	struct:__anon44	file:
ilist	kernel/audit_watch.c	/^	struct list_head	ilist;	\/* entry in inotify registration list *\/$/;"	m	struct:audit_parent	typeref:struct:audit_parent::list_head	file:
ilookup	fs/inode.c	/^EXPORT_SYMBOL(ilookup);$/;"	v
ilookup	fs/inode.c	/^struct inode *ilookup(struct super_block *sb, unsigned long ino)$/;"	f
ilookup5	fs/inode.c	/^EXPORT_SYMBOL(ilookup5);$/;"	v
ilookup5	fs/inode.c	/^struct inode *ilookup5(struct super_block *sb, unsigned long hashval,$/;"	f
ilookup5_nowait	fs/inode.c	/^EXPORT_SYMBOL(ilookup5_nowait);$/;"	v
ilookup5_nowait	fs/inode.c	/^struct inode *ilookup5_nowait(struct super_block *sb, unsigned long hashval,$/;"	f
immutable	mm/percpu.c	/^	bool			immutable;	\/* no [de]population allowed *\/$/;"	m	struct:pcpu_chunk	file:
in_egroup_p	kernel/groups.c	/^EXPORT_SYMBOL(in_egroup_p);$/;"	v
in_egroup_p	kernel/groups.c	/^int in_egroup_p(gid_t grp)$/;"	f
in_gate_area_no_task	mm/memory.c	/^int in_gate_area_no_task(unsigned long addr)$/;"	f
in_gate_area_no_task	mm/nommu.c	/^int in_gate_area_no_task(unsigned long addr)$/;"	f
in_group_p	kernel/groups.c	/^EXPORT_SYMBOL(in_group_p);$/;"	v
in_group_p	kernel/groups.c	/^int in_group_p(gid_t grp)$/;"	f
in_kprobes_functions	kernel/kprobes.c	/^static int __kprobes in_kprobes_functions(unsigned long addr)$/;"	f	file:
in_lock_functions	kernel/spinlock.c	/^EXPORT_SYMBOL(in_lock_functions);$/;"	v
in_lock_functions	kernel/spinlock.c	/^notrace int in_lock_functions(unsigned long addr)$/;"	f
in_nohz_recently	kernel/sched.c	/^	unsigned char in_nohz_recently;$/;"	m	struct:rq	file:
in_ops	fs/notify/inotify/inotify.c	/^	const struct inotify_operations *in_ops; \/* inotify caller operations *\/$/;"	m	struct:inotify_handle	typeref:struct:inotify_handle::inotify_operations	file:
in_sched_functions	kernel/sched.c	/^int in_sched_functions(unsigned long addr)$/;"	f
in_stable_tree	mm/ksm.c	/^static inline int in_stable_tree(struct rmap_item *rmap_item)$/;"	f	file:
in_syscall	kernel/auditsc.c	/^	int		    in_syscall;	\/* 1 if task is in a syscall *\/$/;"	m	struct:audit_context	file:
in_use	mm/dmapool.c	/^	unsigned int in_use;$/;"	m	struct:dma_page	file:
inactive_anon_is_low	mm/vmscan.c	/^static int inactive_anon_is_low(struct zone *zone, struct scan_control *sc)$/;"	f	file:
inactive_anon_is_low_global	mm/vmscan.c	/^static int inactive_anon_is_low_global(struct zone *zone)$/;"	f	file:
inactive_file_is_low	mm/vmscan.c	/^static int inactive_file_is_low(struct zone *zone, struct scan_control *sc)$/;"	f	file:
inactive_file_is_low_global	mm/vmscan.c	/^static int inactive_file_is_low_global(struct zone *zone)$/;"	f	file:
inactive_list_is_low	mm/vmscan.c	/^static int inactive_list_is_low(struct zone *zone, struct scan_control *sc,$/;"	f	file:
inc_chains	kernel/lockdep.c	/^static inline void inc_chains(void)$/;"	f	file:
inc_chains	kernel/lockdep.c	/^static void inc_chains(void)$/;"	f	file:
inc_cpu_load	kernel/sched.c	/^static inline void inc_cpu_load(struct rq *rq, unsigned long load)$/;"	f	file:
inc_mnt_writers	fs/namespace.c	/^static inline void inc_mnt_writers(struct vfsmount *mnt)$/;"	f	file:
inc_nr_running	kernel/sched.c	/^static void inc_nr_running(struct rq *rq)$/;"	f	file:
inc_rt_group	kernel/sched_rt.c	/^inc_rt_group(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
inc_rt_migration	kernel/sched_rt.c	/^static void inc_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
inc_rt_migration	kernel/sched_rt.c	/^void inc_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
inc_rt_prio	kernel/sched_rt.c	/^inc_rt_prio(struct rt_rq *rt_rq, int prio)$/;"	f	file:
inc_rt_prio	kernel/sched_rt.c	/^static inline void inc_rt_prio(struct rt_rq *rt_rq, int prio) {}$/;"	f	file:
inc_rt_prio_smp	kernel/sched_rt.c	/^inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)$/;"	f	file:
inc_rt_prio_smp	kernel/sched_rt.c	/^void inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio) {}$/;"	f	file:
inc_rt_tasks	kernel/sched_rt.c	/^void inc_rt_tasks(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)$/;"	f	file:
inc_slabs_node	mm/slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s, int node, int objects)$/;"	f	file:
inc_slabs_node	mm/slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s, int node,$/;"	f	file:
inc_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(inc_zone_page_state);$/;"	v
inc_zone_page_state	mm/vmstat.c	/^void inc_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
inc_zone_state	mm/vmstat.c	/^void inc_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
index	kernel/audit_tree.c	/^		unsigned index;		\/* index; upper bit indicates 'will prune' *\/$/;"	m	struct:audit_chunk::node	file:
index	kernel/printk.c	/^	int	index;				\/* Minor dev. to use	    *\/$/;"	m	struct:console_cmdline	file:
index_of	mm/slab.c	/^static __always_inline int index_of(const size_t size)$/;"	f	file:
index_to_obj	mm/slab.c	/^static inline void *index_to_obj(struct kmem_cache *cache, struct slab *slab,$/;"	f	file:
info	fs/compat_ioctl.c	/^	compat_uint_t info;		\/* [o] auxiliary information *\/$/;"	m	struct:sg_io_hdr32	file:
info	mm/memcontrol.c	/^	struct mem_cgroup_lru_info info;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mem_cgroup_lru_info	file:
inherit_event	kernel/perf_event.c	/^inherit_event(struct perf_event *parent_event,$/;"	f	file:
inherit_group	kernel/perf_event.c	/^static int inherit_group(struct perf_event *parent_event,$/;"	f	file:
inheritable	kernel/auditsc.c	/^	kernel_cap_t		inheritable;$/;"	m	struct:audit_cap_data	file:
init	kernel/rcutorture.c	/^	void (*init)(void);$/;"	m	struct:rcu_torture_ops	file:
init_alloc_cpu	mm/slub.c	/^static inline void init_alloc_cpu(void) {}$/;"	f	file:
init_alloc_cpu	mm/slub.c	/^static void __init init_alloc_cpu(void)$/;"	f	file:
init_alloc_cpu_cpu	mm/slub.c	/^static void init_alloc_cpu_cpu(int cpu)$/;"	f	file:
init_aout_binfmt	fs/binfmt_aout.c	/^core_initcall(init_aout_binfmt);$/;"	v
init_aout_binfmt	fs/binfmt_aout.c	/^static int __init init_aout_binfmt(void)$/;"	f	file:
init_bio	fs/bio.c	/^static int __init init_bio(void)$/;"	f	file:
init_bio	fs/bio.c	/^subsys_initcall(init_bio);$/;"	v
init_bootmem	mm/bootmem.c	/^unsigned long __init init_bootmem(unsigned long start, unsigned long pages)$/;"	f
init_bootmem_core	mm/bootmem.c	/^static unsigned long __init init_bootmem_core(bootmem_data_t *bdata,$/;"	f	file:
init_bootmem_node	mm/bootmem.c	/^unsigned long __init init_bootmem_node(pg_data_t *pgdat, unsigned long freepfn,$/;"	f
init_buffer	fs/buffer.c	/^EXPORT_SYMBOL(init_buffer);$/;"	v
init_buffer	fs/buffer.c	/^init_buffer(struct buffer_head *bh, bh_end_io_t *handler, void *private)$/;"	f
init_buffer_head	fs/buffer.c	/^init_buffer_head(void *data)$/;"	f	file:
init_call_single_data	kernel/smp.c	/^early_initcall(init_call_single_data);$/;"	v
init_call_single_data	kernel/smp.c	/^static int __cpuinit init_call_single_data(void)$/;"	f	file:
init_cfs_rq	kernel/sched.c	/^static void init_cfs_rq(struct cfs_rq *cfs_rq, struct rq *rq)$/;"	f	file:
init_cgroup_css	kernel/cgroup.c	/^static void init_cgroup_css(struct cgroup_subsys_state *css,$/;"	f	file:
init_cgroup_housekeeping	kernel/cgroup.c	/^static void init_cgroup_housekeeping(struct cgroup *cgrp)$/;"	f	file:
init_cgroup_root	kernel/cgroup.c	/^static void init_cgroup_root(struct cgroupfs_root *root)$/;"	f	file:
init_cpu_online	kernel/cpu.c	/^void init_cpu_online(const struct cpumask *src)$/;"	f
init_cpu_possible	kernel/cpu.c	/^void init_cpu_possible(const struct cpumask *src)$/;"	f
init_cpu_present	kernel/cpu.c	/^void init_cpu_present(const struct cpumask *src)$/;"	f
init_cpu_workqueue	kernel/workqueue.c	/^init_cpu_workqueue(struct workqueue_struct *wq, int cpu)$/;"	f	file:
init_cred	kernel/cred.c	/^struct cred init_cred = {$/;"	v	typeref:struct:cred
init_css_set	kernel/cgroup.c	/^static struct css_set init_css_set;$/;"	v	typeref:struct:css_set	file:
init_css_set_link	kernel/cgroup.c	/^static struct cg_cgroup_link init_css_set_link;$/;"	v	typeref:struct:cg_cgroup_link	file:
init_currently_empty_zone	mm/page_alloc.c	/^__meminit int init_currently_empty_zone(struct zone *zone,$/;"	f
init_defrootdomain	kernel/sched.c	/^static void init_defrootdomain(void)$/;"	f	file:
init_elf_binfmt	fs/binfmt_elf.c	/^core_initcall(init_elf_binfmt);$/;"	v
init_elf_binfmt	fs/binfmt_elf.c	/^static int __init init_elf_binfmt(void)$/;"	f	file:
init_elf_binfmt	fs/compat_binfmt_elf.c	125;"	d	file:
init_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^core_initcall(init_elf_fdpic_binfmt);$/;"	v
init_elf_fdpic_binfmt	fs/binfmt_elf_fdpic.c	/^static int __init init_elf_fdpic_binfmt(void)$/;"	f	file:
init_em86_binfmt	fs/binfmt_em86.c	/^core_initcall(init_em86_binfmt);$/;"	v
init_em86_binfmt	fs/binfmt_em86.c	/^static int __init init_em86_binfmt(void)$/;"	f	file:
init_emergency_isa_pool	mm/bounce.c	/^int init_emergency_isa_pool(void)$/;"	f
init_emergency_pool	mm/bounce.c	/^__initcall(init_emergency_pool);$/;"	v
init_emergency_pool	mm/bounce.c	/^static __init int init_emergency_pool(void)$/;"	f	file:
init_files	fs/file.c	/^struct files_struct init_files = {$/;"	v	typeref:struct:files_struct
init_flat_binfmt	fs/binfmt_flat.c	/^core_initcall(init_flat_binfmt);$/;"	v
init_flat_binfmt	fs/binfmt_flat.c	/^static int __init init_flat_binfmt(void)$/;"	f	file:
init_fs	fs/fs_struct.c	/^struct fs_struct init_fs = {$/;"	v	typeref:struct:fs_struct
init_groups	kernel/groups.c	/^struct group_info init_groups = { .usage = ATOMIC_INIT(2) };$/;"	v	typeref:struct:group_info
init_hrtick	kernel/sched.c	/^static __init void init_hrtick(void)$/;"	f	file:
init_hrtick	kernel/sched.c	/^static inline void init_hrtick(void)$/;"	f	file:
init_hrtimers_cpu	kernel/hrtimer.c	/^static void __cpuinit init_hrtimers_cpu(int cpu)$/;"	f	file:
init_hw_breakpoint	kernel/hw_breakpoint.c	/^core_initcall(init_hw_breakpoint);$/;"	v
init_hw_breakpoint	kernel/hw_breakpoint.c	/^static int __init init_hw_breakpoint(void)$/;"	f	file:
init_idle	kernel/sched.c	/^void __cpuinit init_idle(struct task_struct *idle, int cpu)$/;"	f
init_idle_bootup_task	kernel/sched.c	/^void __cpuinit init_idle_bootup_task(struct task_struct *idle)$/;"	f
init_inodecache	mm/shmem.c	/^static int init_inodecache(void)$/;"	f	file:
init_kernel_text	kernel/extable.c	/^static inline int init_kernel_text(unsigned long addr)$/;"	f	file:
init_kmem_cache_cpu	mm/slub.c	/^static void init_kmem_cache_cpu(struct kmem_cache *s,$/;"	f	file:
init_kmem_cache_node	mm/slub.c	/^init_kmem_cache_node(struct kmem_cache_node *n, struct kmem_cache *s)$/;"	f	file:
init_kmem_cache_nodes	mm/slub.c	/^static int init_kmem_cache_nodes(struct kmem_cache *s, gfp_t gfpflags)$/;"	f	file:
init_kprobes	kernel/kprobes.c	/^module_init(init_kprobes);$/;"	v
init_kprobes	kernel/kprobes.c	/^static int __init init_kprobes(void)$/;"	f	file:
init_list	mm/slab.c	/^static void init_list(struct kmem_cache *cachep, struct kmem_list3 *list,$/;"	f	file:
init_lock_keys	mm/slab.c	/^static inline void init_lock_keys(void)$/;"	f	file:
init_lstats_procfs	kernel/latencytop.c	/^device_initcall(init_lstats_procfs);$/;"	v
init_lstats_procfs	kernel/latencytop.c	/^static int __init init_lstats_procfs(void)$/;"	f	file:
init_mbcache	fs/mbcache.c	/^static int __init init_mbcache(void)$/;"	f	file:
init_misc_binfmt	fs/binfmt_misc.c	/^core_initcall(init_misc_binfmt);$/;"	v
init_misc_binfmt	fs/binfmt_misc.c	/^static int __init init_misc_binfmt(void)$/;"	f	file:
init_mm	mm/init-mm.c	/^struct mm_struct init_mm = {$/;"	v	typeref:struct:mm_struct
init_mount_tree	fs/namespace.c	/^static void __init init_mount_tree(void)$/;"	f	file:
init_node_lock_keys	mm/slab.c	/^static void init_node_lock_keys(int q)$/;"	f	file:
init_nodemask_of_mempolicy	mm/mempolicy.c	/^bool init_nodemask_of_mempolicy(nodemask_t *mask)$/;"	f
init_nsproxy	kernel/nsproxy.c	/^struct nsproxy init_nsproxy = INIT_NSPROXY(init_nsproxy);$/;"	v	typeref:struct:nsproxy
init_numa_sched_groups_power	kernel/sched.c	/^static void init_numa_sched_groups_power(struct sched_group *group_head)$/;"	f	file:
init_object	mm/slub.c	/^static void init_object(struct kmem_cache *s, void *object, int active)$/;"	f	file:
init_once	fs/block_dev.c	/^static void init_once(void *foo)$/;"	f	file:
init_once	fs/inode.c	/^static void init_once(void *foo)$/;"	f	file:
init_once	fs/locks.c	/^static void init_once(void *foo)$/;"	f	file:
init_once	mm/shmem.c	/^static void init_once(void *foo)$/;"	f	file:
init_oops_id	kernel/panic.c	/^late_initcall(init_oops_id);$/;"	v
init_oops_id	kernel/panic.c	/^static int init_oops_id(void)$/;"	f	file:
init_page_buffers	fs/buffer.c	/^init_page_buffers(struct page *page, struct block_device *bdev,$/;"	f	file:
init_per_zone_wmark_min	mm/page_alloc.c	/^static int __init init_per_zone_wmark_min(void)$/;"	f	file:
init_pid_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(init_pid_ns);$/;"	v
init_pid_ns	kernel/pid.c	/^struct pid_namespace init_pid_ns = {$/;"	v	typeref:struct:pid_namespace
init_pipe_fs	fs/pipe.c	/^fs_initcall(init_pipe_fs);$/;"	v
init_pipe_fs	fs/pipe.c	/^static int __init init_pipe_fs(void)$/;"	f	file:
init_posix_cpu_timers	kernel/posix-cpu-timers.c	/^__initcall(init_posix_cpu_timers);$/;"	v
init_posix_cpu_timers	kernel/posix-cpu-timers.c	/^static __init int init_posix_cpu_timers(void)$/;"	f	file:
init_posix_timers	kernel/posix-timers.c	/^__initcall(init_posix_timers);$/;"	v
init_posix_timers	kernel/posix-timers.c	/^static __init int init_posix_timers(void)$/;"	f	file:
init_reap_node	mm/slab.c	/^static void init_reap_node(int cpu)$/;"	f	file:
init_reap_node	mm/slab.c	865;"	d	file:
init_root_id	kernel/cgroup.c	/^static bool init_root_id(struct cgroupfs_root *root)$/;"	f	file:
init_rootdomain	kernel/sched.c	/^static int init_rootdomain(struct root_domain *rd, bool bootmem)$/;"	f	file:
init_rq_hrtick	kernel/sched.c	/^static inline void init_rq_hrtick(struct rq *rq)$/;"	f	file:
init_rq_hrtick	kernel/sched.c	/^static void init_rq_hrtick(struct rq *rq)$/;"	f	file:
init_rt_bandwidth	kernel/sched.c	/^void init_rt_bandwidth(struct rt_bandwidth *rt_b, u64 period, u64 runtime)$/;"	f	file:
init_rt_rq	kernel/sched.c	/^static void init_rt_rq(struct rt_rq *rt_rq, struct rq *rq)$/;"	f	file:
init_rttest	kernel/rtmutex-tester.c	/^device_initcall(init_rttest);$/;"	v
init_rttest	kernel/rtmutex-tester.c	/^static int init_rttest(void)$/;"	f	file:
init_sched_build_groups	kernel/sched.c	/^init_sched_build_groups(const struct cpumask *span,$/;"	f	file:
init_sched_debug_procfs	kernel/sched_debug.c	/^__initcall(init_sched_debug_procfs);$/;"	v
init_sched_debug_procfs	kernel/sched_debug.c	/^static int __init init_sched_debug_procfs(void)$/;"	f	file:
init_sched_groups_power	kernel/sched.c	/^static void init_sched_groups_power(int cpu, struct sched_domain *sd)$/;"	f	file:
init_sched_rt_class	kernel/sched_rt.c	/^static inline void init_sched_rt_class(void)$/;"	f	file:
init_script_binfmt	fs/binfmt_script.c	/^core_initcall(init_script_binfmt);$/;"	v
init_script_binfmt	fs/binfmt_script.c	/^static int __init init_script_binfmt(void)$/;"	f	file:
init_sd_power_savings_stats	kernel/sched.c	/^static inline void init_sd_power_savings_stats(struct sched_domain *sd,$/;"	f	file:
init_section_page_cgroup	mm/page_cgroup.c	/^static int __init_refok init_section_page_cgroup(unsigned long pfn)$/;"	f	file:
init_slow_work	kernel/slow-work.c	/^static int __init init_slow_work(void)$/;"	f	file:
init_slow_work	kernel/slow-work.c	/^subsys_initcall(init_slow_work);$/;"	v
init_som_binfmt	fs/binfmt_som.c	/^core_initcall(init_som_binfmt);$/;"	v
init_som_binfmt	fs/binfmt_som.c	/^static int __init init_som_binfmt(void)$/;"	f	file:
init_special_inode	fs/inode.c	/^EXPORT_SYMBOL(init_special_inode);$/;"	v
init_special_inode	fs/inode.c	/^void init_special_inode(struct inode *inode, umode_t mode, dev_t rdev)$/;"	f
init_srcu_struct	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(init_srcu_struct);$/;"	v
init_srcu_struct	kernel/srcu.c	/^int init_srcu_struct(struct srcu_struct *sp)$/;"	f
init_struct_pid	kernel/pid.c	/^struct pid init_struct_pid = INIT_STRUCT_PID;$/;"	v	typeref:struct:pid
init_sys32_ioctl	fs/compat_ioctl.c	/^__initcall(init_sys32_ioctl);$/;"	v
init_sys32_ioctl	fs/compat_ioctl.c	/^static int __init init_sys32_ioctl(void)$/;"	f	file:
init_sys32_ioctl_cmp	fs/compat_ioctl.c	/^static int __init init_sys32_ioctl_cmp(const void *p, const void *q)$/;"	f	file:
init_task_group	kernel/sched.c	/^struct task_group init_task_group;$/;"	v	typeref:struct:task_group
init_task_group_load	kernel/sched.c	/^static int init_task_group_load = INIT_TASK_GROUP_LOAD;$/;"	v	file:
init_test_probes	kernel/test_kprobes.c	/^int init_test_probes(void)$/;"	f
init_test_thread	kernel/rtmutex-tester.c	/^static int init_test_thread(int id)$/;"	f	file:
init_tg_cfs_entry	kernel/sched.c	/^static void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,$/;"	f	file:
init_tg_rt_entry	kernel/sched.c	/^static void init_tg_rt_entry(struct task_group *tg, struct rt_rq *rt_rq,$/;"	f	file:
init_tgcred	kernel/cred.c	/^static struct thread_group_cred init_tgcred = {$/;"	v	typeref:struct:thread_group_cred	file:
init_timeout	fs/aio.c	/^static inline void init_timeout(struct aio_timeout *to)$/;"	f	file:
init_timer_deferrable_key	kernel/timer.c	/^EXPORT_SYMBOL(init_timer_deferrable_key);$/;"	v
init_timer_deferrable_key	kernel/timer.c	/^void init_timer_deferrable_key(struct timer_list *timer,$/;"	f
init_timer_key	kernel/timer.c	/^EXPORT_SYMBOL(init_timer_key);$/;"	v
init_timer_key	kernel/timer.c	/^void init_timer_key(struct timer_list *timer,$/;"	f
init_timer_on_stack_key	kernel/timer.c	/^EXPORT_SYMBOL_GPL(init_timer_on_stack_key);$/;"	v
init_timer_on_stack_key	kernel/timer.c	/^void init_timer_on_stack_key(struct timer_list *timer,$/;"	f
init_timers	kernel/timer.c	/^void __init init_timers(void)$/;"	f
init_timers_cpu	kernel/timer.c	/^static int __cpuinit init_timers_cpu(int cpu)$/;"	f	file:
init_tmpfs	mm/shmem.c	/^int __init init_tmpfs(void)$/;"	f
init_tracepoints	kernel/tracepoint.c	/^__initcall(init_tracepoints);$/;"	v
init_tracepoints	kernel/tracepoint.c	/^static int init_tracepoints(void)$/;"	f	file:
init_tracking	mm/slub.c	/^static void init_tracking(struct kmem_cache *s, void *object)$/;"	f	file:
init_user_ns	kernel/user.c	/^EXPORT_SYMBOL_GPL(init_user_ns);$/;"	v
init_user_ns	kernel/user.c	/^struct user_namespace init_user_ns = {$/;"	v	typeref:struct:user_namespace
init_workqueues	kernel/workqueue.c	/^void __init init_workqueues(void)$/;"	f
init_zero_pfn	mm/memory.c	/^core_initcall(init_zero_pfn);$/;"	v
init_zero_pfn	mm/memory.c	/^static int __init init_zero_pfn(void)$/;"	f	file:
initarray_generic	mm/slab.c	/^static struct arraycache_init initarray_generic =$/;"	v	typeref:struct:arraycache_init	file:
initkmem_list3	mm/slab.c	/^struct kmem_list3 __initdata initkmem_list3[NUM_INIT_LISTS];$/;"	v	typeref:struct:__initdata
initstate	kernel/module.c	/^static struct module_attribute initstate = {$/;"	v	typeref:struct:module_attribute	file:
ino	kernel/audit_watch.c	/^	unsigned long		ino;	\/* associated inode number *\/$/;"	m	struct:audit_watch	file:
ino	kernel/auditsc.c	/^	unsigned long	ino;$/;"	m	struct:audit_names	file:
ino_count	kernel/auditsc.c	/^	int		    ino_count;$/;"	m	struct:audit_context	file:
inode	fs/direct-io.c	/^	struct inode *inode;$/;"	m	struct:dio	typeref:struct:dio::inode	file:
inode_add_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_add_bytes);$/;"	v
inode_add_bytes	fs/stat.c	/^void inode_add_bytes(struct inode *inode, loff_t bytes)$/;"	f
inode_add_to_lists	fs/inode.c	/^EXPORT_SYMBOL_GPL(inode_add_to_lists);$/;"	v
inode_add_to_lists	fs/inode.c	/^void inode_add_to_lists(struct super_block *sb, struct inode *inode)$/;"	f
inode_change_ok	fs/attr.c	/^EXPORT_SYMBOL(inode_change_ok);$/;"	v
inode_change_ok	fs/attr.c	/^int inode_change_ok(const struct inode *inode, struct iattr *attr)$/;"	f
inode_dirtied_after	fs/fs-writeback.c	/^static bool inode_dirtied_after(struct inode *inode, unsigned long t)$/;"	f	file:
inode_find_handle	fs/notify/inotify/inotify.c	/^static struct inotify_watch *inode_find_handle(struct inode *inode,$/;"	f	file:
inode_get_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_get_bytes);$/;"	v
inode_get_bytes	fs/stat.c	/^loff_t inode_get_bytes(struct inode *inode)$/;"	f
inode_has_buffers	fs/buffer.c	/^int inode_has_buffers(struct inode *inode)$/;"	f
inode_in_use	fs/inode.c	/^LIST_HEAD(inode_in_use);$/;"	v
inode_init	fs/inode.c	/^void __init inode_init(void)$/;"	f
inode_init_always	fs/inode.c	/^EXPORT_SYMBOL(inode_init_always);$/;"	v
inode_init_always	fs/inode.c	/^int inode_init_always(struct super_block *sb, struct inode *inode)$/;"	f
inode_init_early	fs/inode.c	/^void __init inode_init_early(void)$/;"	f
inode_init_once	fs/inode.c	/^EXPORT_SYMBOL(inode_init_once);$/;"	v
inode_init_once	fs/inode.c	/^void inode_init_once(struct inode *inode)$/;"	f
inode_lock	fs/inode.c	/^DEFINE_SPINLOCK(inode_lock);$/;"	v
inode_needs_sync	fs/inode.c	/^EXPORT_SYMBOL(inode_needs_sync);$/;"	v
inode_needs_sync	fs/inode.c	/^int inode_needs_sync(struct inode *inode)$/;"	f
inode_newsize_ok	fs/attr.c	/^EXPORT_SYMBOL(inode_newsize_ok);$/;"	v
inode_newsize_ok	fs/attr.c	/^int inode_newsize_ok(const struct inode *inode, loff_t offset)$/;"	f
inode_permission	fs/namei.c	/^EXPORT_SYMBOL(inode_permission);$/;"	v
inode_permission	fs/namei.c	/^int inode_permission(struct inode *inode, int mask)$/;"	f
inode_set_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_set_bytes);$/;"	v
inode_set_bytes	fs/stat.c	/^void inode_set_bytes(struct inode *inode, loff_t bytes)$/;"	f
inode_setattr	fs/attr.c	/^EXPORT_SYMBOL(inode_setattr);$/;"	v
inode_setattr	fs/attr.c	/^int inode_setattr(struct inode * inode, struct iattr * attr)$/;"	f
inode_sub_bytes	fs/stat.c	/^EXPORT_SYMBOL(inode_sub_bytes);$/;"	v
inode_sub_bytes	fs/stat.c	/^void inode_sub_bytes(struct inode *inode, loff_t bytes)$/;"	f
inode_sync_complete	fs/fs-writeback.c	/^static void inode_sync_complete(struct inode *inode)$/;"	f	file:
inode_to_bdi	fs/fs-writeback.c	30;"	d	file:
inode_unused	fs/inode.c	/^LIST_HEAD(inode_unused);$/;"	v
inode_wait	fs/inode.c	/^EXPORT_SYMBOL(inode_wait);$/;"	v
inode_wait	fs/inode.c	/^int inode_wait(void *word)$/;"	f
inode_wait_for_writeback	fs/fs-writeback.c	/^static void inode_wait_for_writeback(struct inode *inode)$/;"	f	file:
inodes_stat	fs/inode.c	/^struct inodes_stat_t inodes_stat;$/;"	v	typeref:struct:inodes_stat_t
inotify_add_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_add_watch);$/;"	v
inotify_add_watch	fs/notify/inotify/inotify.c	/^s32 inotify_add_watch(struct inotify_handle *ih, struct inotify_watch *watch,$/;"	f
inotify_clone_watch	fs/notify/inotify/inotify.c	/^s32 inotify_clone_watch(struct inotify_watch *old, struct inotify_watch *new)$/;"	f
inotify_cookie	fs/notify/inotify/inotify.c	/^static atomic_t inotify_cookie;$/;"	v	file:
inotify_d_instantiate	fs/notify/inotify/inotify.c	/^void inotify_d_instantiate(struct dentry *entry, struct inode *inode)$/;"	f
inotify_d_move	fs/notify/inotify/inotify.c	/^void inotify_d_move(struct dentry *entry)$/;"	f
inotify_dentry_parent_queue_event	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_dentry_parent_queue_event);$/;"	v
inotify_dentry_parent_queue_event	fs/notify/inotify/inotify.c	/^void inotify_dentry_parent_queue_event(struct dentry *dentry, u32 mask,$/;"	f
inotify_destroy	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_destroy);$/;"	v
inotify_destroy	fs/notify/inotify/inotify.c	/^void inotify_destroy(struct inotify_handle *ih)$/;"	f
inotify_evict_watch	fs/notify/inotify/inotify.c	/^void inotify_evict_watch(struct inotify_watch *watch)$/;"	f
inotify_find_update_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_find_update_watch);$/;"	v
inotify_find_update_watch	fs/notify/inotify/inotify.c	/^s32 inotify_find_update_watch(struct inotify_handle *ih, struct inode *inode,$/;"	f
inotify_find_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_find_watch);$/;"	v
inotify_find_watch	fs/notify/inotify/inotify.c	/^s32 inotify_find_watch(struct inotify_handle *ih, struct inode *inode,$/;"	f
inotify_get_cookie	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_get_cookie);$/;"	v
inotify_get_cookie	fs/notify/inotify/inotify.c	/^u32 inotify_get_cookie(void)$/;"	f
inotify_handle	fs/notify/inotify/inotify.c	/^struct inotify_handle {$/;"	s	file:
inotify_handle_get_wd	fs/notify/inotify/inotify.c	/^static int inotify_handle_get_wd(struct inotify_handle *ih,$/;"	f	file:
inotify_init	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_init);$/;"	v
inotify_init	fs/notify/inotify/inotify.c	/^struct inotify_handle *inotify_init(const struct inotify_operations *ops)$/;"	f
inotify_init_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_init_watch);$/;"	v
inotify_init_watch	fs/notify/inotify/inotify.c	/^void inotify_init_watch(struct inotify_watch *watch)$/;"	f
inotify_inode_is_dead	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_inode_is_dead);$/;"	v
inotify_inode_is_dead	fs/notify/inotify/inotify.c	/^void inotify_inode_is_dead(struct inode *inode)$/;"	f
inotify_inode_queue_event	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_inode_queue_event);$/;"	v
inotify_inode_queue_event	fs/notify/inotify/inotify.c	/^void inotify_inode_queue_event(struct inode *inode, u32 mask, u32 cookie,$/;"	f
inotify_inode_watched	fs/notify/inotify/inotify.c	/^static inline int inotify_inode_watched(struct inode *inode)$/;"	f	file:
inotify_remove_watch_locked	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_remove_watch_locked);$/;"	v
inotify_remove_watch_locked	fs/notify/inotify/inotify.c	/^void inotify_remove_watch_locked(struct inotify_handle *ih,$/;"	f
inotify_rm_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_rm_watch);$/;"	v
inotify_rm_watch	fs/notify/inotify/inotify.c	/^int inotify_rm_watch(struct inotify_handle *ih,$/;"	f
inotify_rm_wd	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_rm_wd);$/;"	v
inotify_rm_wd	fs/notify/inotify/inotify.c	/^int inotify_rm_wd(struct inotify_handle *ih, u32 wd)$/;"	f
inotify_setup	fs/notify/inotify/inotify.c	/^module_init(inotify_setup);$/;"	v
inotify_setup	fs/notify/inotify/inotify.c	/^static int __init inotify_setup(void)$/;"	f	file:
inotify_unmount_inodes	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(inotify_unmount_inodes);$/;"	v
inotify_unmount_inodes	fs/notify/inotify/inotify.c	/^void inotify_unmount_inodes(struct list_head *list)$/;"	f
insert_hash	kernel/audit_tree.c	/^static void insert_hash(struct audit_chunk *chunk)$/;"	f	file:
insert_inode_locked	fs/inode.c	/^EXPORT_SYMBOL(insert_inode_locked);$/;"	v
insert_inode_locked	fs/inode.c	/^int insert_inode_locked(struct inode *inode)$/;"	f
insert_inode_locked4	fs/inode.c	/^EXPORT_SYMBOL(insert_inode_locked4);$/;"	v
insert_inode_locked4	fs/inode.c	/^int insert_inode_locked4(struct inode *inode, unsigned long hashval,$/;"	f
insert_page	mm/memory.c	/^static int insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_pfn	mm/memory.c	/^static int insert_pfn(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_resource	kernel/resource.c	/^int insert_resource(struct resource *parent, struct resource *new)$/;"	f
insert_resource_expand_to_fit	kernel/resource.c	/^void insert_resource_expand_to_fit(struct resource *root, struct resource *new)$/;"	f
insert_to_mm_slots_hash	mm/ksm.c	/^static void insert_to_mm_slots_hash(struct mm_struct *mm,$/;"	f	file:
insert_vm_struct	mm/mmap.c	/^int insert_vm_struct(struct mm_struct * mm, struct vm_area_struct * vma)$/;"	f
insert_vmalloc_vm	mm/vmalloc.c	/^static void insert_vmalloc_vm(struct vm_struct *vm, struct vmap_area *va,$/;"	f	file:
insert_work	kernel/workqueue.c	/^static void insert_work(struct cpu_workqueue_struct *cwq,$/;"	f	file:
insert_wq_barrier	kernel/workqueue.c	/^static void insert_wq_barrier(struct cpu_workqueue_struct *cwq,$/;"	f	file:
insns	kernel/kprobes.c	/^	kprobe_opcode_t *insns;		\/* Page of instruction slots *\/$/;"	m	struct:kprobe_insn_page	file:
install_exec_creds	fs/exec.c	/^EXPORT_SYMBOL(install_exec_creds);$/;"	v
install_exec_creds	fs/exec.c	/^void install_exec_creds(struct linux_binprm *bprm)$/;"	f
install_file_pte	mm/fremap.c	/^static int install_file_pte(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
install_special_mapping	mm/mmap.c	/^int install_special_mapping(struct mm_struct *mm,$/;"	f
int_to_threadref	kernel/kgdb.c	/^static void int_to_threadref(unsigned char *id, int value)$/;"	f	file:
integrity_slab	fs/bio-integrity.c	/^struct integrity_slab {$/;"	s	file:
interface_id	fs/compat_ioctl.c	/^	compat_int_t interface_id;	\/* [i] 'S' for SCSI generic (required) *\/$/;"	m	struct:sg_io_hdr32	file:
interleave_nid	mm/mempolicy.c	/^static inline unsigned interleave_nid(struct mempolicy *pol,$/;"	f	file:
interleave_nodes	mm/mempolicy.c	/^static unsigned interleave_nodes(struct mempolicy *policy)$/;"	f	file:
internal_add_timer	kernel/timer.c	/^static void internal_add_timer(struct tvec_base *base, struct timer_list *timer)$/;"	f	file:
interpreter	fs/binfmt_misc.c	/^	char *interpreter;		\/* filename of interpreter *\/$/;"	m	struct:__anon16	file:
interruptible_sleep_on	kernel/sched.c	/^EXPORT_SYMBOL(interruptible_sleep_on);$/;"	v
interruptible_sleep_on	kernel/sched.c	/^void __sched interruptible_sleep_on(wait_queue_head_t *q)$/;"	f
interruptible_sleep_on_timeout	kernel/sched.c	/^EXPORT_SYMBOL(interruptible_sleep_on_timeout);$/;"	v
interruptible_sleep_on_timeout	kernel/sched.c	/^interruptible_sleep_on_timeout(wait_queue_head_t *q, long timeout)$/;"	f
inuse	mm/slab.c	/^	unsigned int inuse;	\/* num of objs active in slab *\/$/;"	m	struct:slab	file:
invalid_clockid	kernel/posix-timers.c	/^static inline int invalid_clockid(const clockid_t which_clock)$/;"	f	file:
invalidate_bdev	fs/buffer.c	/^EXPORT_SYMBOL(invalidate_bdev);$/;"	v
invalidate_bdev	fs/buffer.c	/^void invalidate_bdev(struct block_device *bdev)$/;"	f
invalidate_bh_lru	fs/buffer.c	/^static void invalidate_bh_lru(void *arg)$/;"	f	file:
invalidate_bh_lrus	fs/buffer.c	/^EXPORT_SYMBOL_GPL(invalidate_bh_lrus);$/;"	v
invalidate_bh_lrus	fs/buffer.c	/^void invalidate_bh_lrus(void)$/;"	f
invalidate_complete_page	mm/truncate.c	/^invalidate_complete_page(struct address_space *mapping, struct page *page)$/;"	f	file:
invalidate_complete_page2	mm/truncate.c	/^invalidate_complete_page2(struct address_space *mapping, struct page *page)$/;"	f	file:
invalidate_inode_buffers	fs/buffer.c	/^EXPORT_SYMBOL(invalidate_inode_buffers);$/;"	v
invalidate_inode_buffers	fs/buffer.c	/^void invalidate_inode_buffers(struct inode *inode)$/;"	f
invalidate_inode_page	mm/truncate.c	/^int invalidate_inode_page(struct page *page)$/;"	f
invalidate_inode_pages2	mm/truncate.c	/^EXPORT_SYMBOL_GPL(invalidate_inode_pages2);$/;"	v
invalidate_inode_pages2	mm/truncate.c	/^int invalidate_inode_pages2(struct address_space *mapping)$/;"	f
invalidate_inode_pages2_range	mm/truncate.c	/^EXPORT_SYMBOL_GPL(invalidate_inode_pages2_range);$/;"	v
invalidate_inode_pages2_range	mm/truncate.c	/^int invalidate_inode_pages2_range(struct address_space *mapping,$/;"	f
invalidate_inodes	fs/inode.c	/^EXPORT_SYMBOL(invalidate_inodes);$/;"	v
invalidate_inodes	fs/inode.c	/^int invalidate_inodes(struct super_block *sb)$/;"	f
invalidate_list	fs/inode.c	/^static int invalidate_list(struct list_head *head, struct list_head *dispose)$/;"	f	file:
invalidate_mapping_pages	mm/truncate.c	/^EXPORT_SYMBOL(invalidate_mapping_pages);$/;"	v
invalidate_mapping_pages	mm/truncate.c	/^unsigned long invalidate_mapping_pages(struct address_space *mapping,$/;"	f
invent_group_ids	fs/namespace.c	/^static int invent_group_ids(struct vfsmount *mnt, bool recurse)$/;"	f	file:
invoke_softirq	kernel/softirq.c	289;"	d	file:
invoke_softirq	kernel/softirq.c	291;"	d	file:
io_destroy	fs/aio.c	/^static void io_destroy(struct kioctx *ioctx)$/;"	f	file:
io_error	fs/direct-io.c	/^	int io_error;			\/* IO error in completion path *\/$/;"	m	struct:dio	file:
io_fn_t	fs/read_write.h	/^typedef ssize_t (*io_fn_t)(struct file *, char __user *, size_t, loff_t *);$/;"	t
io_schedule	kernel/sched.c	/^EXPORT_SYMBOL(io_schedule);$/;"	v
io_schedule	kernel/sched.c	/^void __sched io_schedule(void)$/;"	f
io_schedule_timeout	kernel/sched.c	/^long __sched io_schedule_timeout(long timeout)$/;"	f
io_submit_one	fs/aio.c	/^static int io_submit_one(struct kioctx *ctx, struct iocb __user *user_iocb,$/;"	f	file:
io_type	fs/compat_ioctl.c	/^        char    io_type;$/;"	m	struct:serial_struct32	file:
ioc_settimeout	fs/compat_ioctl.c	/^static int ioc_settimeout(unsigned int fd, unsigned int cmd,$/;"	f	file:
iocb	fs/direct-io.c	/^	struct kiocb *iocb;		\/* kiocb *\/$/;"	m	struct:dio	typeref:struct:dio::kiocb	file:
ioctl_by_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(ioctl_by_bdev);$/;"	v
ioctl_by_bdev	fs/block_dev.c	/^int ioctl_by_bdev(struct block_device *bdev, unsigned cmd, unsigned long arg)$/;"	f
ioctl_fibmap	fs/ioctl.c	/^static int ioctl_fibmap(struct file *filp, int __user *p)$/;"	f	file:
ioctl_fiemap	fs/ioctl.c	/^static int ioctl_fiemap(struct file *filp, unsigned long arg)$/;"	f	file:
ioctl_fioasync	fs/ioctl.c	/^static int ioctl_fioasync(unsigned int fd, struct file *filp,$/;"	f	file:
ioctl_fionbio	fs/ioctl.c	/^static int ioctl_fionbio(struct file *filp, int __user *argp)$/;"	f	file:
ioctl_fsfreeze	fs/ioctl.c	/^static int ioctl_fsfreeze(struct file *filp)$/;"	f	file:
ioctl_fsthaw	fs/ioctl.c	/^static int ioctl_fsthaw(struct file *filp)$/;"	f	file:
ioctl_pointer	fs/compat_ioctl.c	/^static unsigned int ioctl_pointer[] = {$/;"	v	file:
ioctl_preallocate	fs/ioctl.c	/^int ioctl_preallocate(struct file *filp, void __user *argp)$/;"	f
ioctx_alloc	fs/aio.c	/^static struct kioctx *ioctx_alloc(unsigned nr_events)$/;"	f	file:
iomem_base	fs/compat_ioctl.c	/^        compat_uint_t   iomem_base;$/;"	m	struct:serial_struct32	file:
iomem_is_exclusive	kernel/resource.c	/^int iomem_is_exclusive(u64 addr)$/;"	f
iomem_map_sanity_check	kernel/resource.c	/^int iomem_map_sanity_check(resource_size_t addr, unsigned long size)$/;"	f
iomem_open	kernel/resource.c	/^static int iomem_open(struct inode *inode, struct file *file)$/;"	f	file:
iomem_reg_shift	fs/compat_ioctl.c	/^        unsigned short  iomem_reg_shift;$/;"	m	struct:serial_struct32	file:
iomem_resource	kernel/resource.c	/^EXPORT_SYMBOL(iomem_resource);$/;"	v
iomem_resource	kernel/resource.c	/^struct resource iomem_resource = {$/;"	v	typeref:struct:resource
ioport_resource	kernel/resource.c	/^EXPORT_SYMBOL(ioport_resource);$/;"	v
ioport_resource	kernel/resource.c	/^struct resource ioport_resource = {$/;"	v	typeref:struct:resource
ioports_open	kernel/resource.c	/^static int ioports_open(struct inode *inode, struct file *file)$/;"	f	file:
ioprio_best	fs/ioprio.c	/^int ioprio_best(unsigned short aprio, unsigned short bprio)$/;"	f
ioresources_init	kernel/resource.c	/^__initcall(ioresources_init);$/;"	v
ioresources_init	kernel/resource.c	/^static int __init ioresources_init(void)$/;"	f	file:
iov_base	fs/compat_ioctl.c	/^	compat_uint_t iov_base;$/;"	m	struct:sg_iovec32	file:
iov_fault_in_pages_read	fs/pipe.c	/^static void iov_fault_in_pages_read(struct iovec *iov, unsigned long len)$/;"	f	file:
iov_fault_in_pages_write	fs/pipe.c	/^static int iov_fault_in_pages_write(struct iovec *iov, unsigned long len)$/;"	f	file:
iov_fn_t	fs/read_write.h	/^typedef ssize_t (*iov_fn_t)(struct kiocb *, const struct iovec *,$/;"	t
iov_iter_advance	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_advance);$/;"	v
iov_iter_advance	mm/filemap.c	/^void iov_iter_advance(struct iov_iter *i, size_t bytes)$/;"	f
iov_iter_copy_from_user	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_copy_from_user);$/;"	v
iov_iter_copy_from_user	mm/filemap.c	/^size_t iov_iter_copy_from_user(struct page *page,$/;"	f
iov_iter_copy_from_user_atomic	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_copy_from_user_atomic);$/;"	v
iov_iter_copy_from_user_atomic	mm/filemap.c	/^size_t iov_iter_copy_from_user_atomic(struct page *page,$/;"	f
iov_iter_fault_in_readable	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_fault_in_readable);$/;"	v
iov_iter_fault_in_readable	mm/filemap.c	/^int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes)$/;"	f
iov_iter_single_seg_count	mm/filemap.c	/^EXPORT_SYMBOL(iov_iter_single_seg_count);$/;"	v
iov_iter_single_seg_count	mm/filemap.c	/^size_t iov_iter_single_seg_count(struct iov_iter *i)$/;"	f
iov_len	fs/compat_ioctl.c	/^	compat_uint_t iov_len;$/;"	m	struct:sg_iovec32	file:
iov_shorten	fs/read_write.c	/^EXPORT_SYMBOL(iov_shorten);$/;"	v
iov_shorten	fs/read_write.c	/^unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to)$/;"	f
iovec_count	fs/compat_ioctl.c	/^	unsigned short iovec_count;	\/* [i] 0 implies no scatter gather *\/$/;"	m	struct:sg_io_hdr32	file:
iovecs	fs/bio.c	/^	struct bio_vec *iovecs;$/;"	m	struct:bio_map_data	typeref:struct:bio_map_data::bio_vec	file:
ip	kernel/rtmutex_common.h	/^	unsigned long		ip;$/;"	m	struct:rt_mutex_waiter
ipc	kernel/auditsc.c	/^		} ipc;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon24	file:
ipi_call_lock	kernel/smp.c	/^void ipi_call_lock(void)$/;"	f
ipi_call_lock_irq	kernel/smp.c	/^void ipi_call_lock_irq(void)$/;"	f
ipi_call_unlock	kernel/smp.c	/^void ipi_call_unlock(void)$/;"	f
ipi_call_unlock_irq	kernel/smp.c	/^void ipi_call_unlock_irq(void)$/;"	f
ipipe_prep	fs/splice.c	/^static int ipipe_prep(struct pipe_inode_info *pipe, unsigned int flags)$/;"	f	file:
iput	fs/inode.c	/^EXPORT_SYMBOL(iput);$/;"	v
iput	fs/inode.c	/^void iput(struct inode *inode)$/;"	f
iput_final	fs/inode.c	/^static inline void iput_final(struct inode *inode)$/;"	f	file:
irq	fs/compat_ioctl.c	/^        compat_int_t    irq;$/;"	m	struct:serial_struct32	file:
irq_capable	kernel/rcutorture.c	/^	int irq_capable;$/;"	m	struct:rcu_torture_ops	file:
irq_enter	kernel/softirq.c	/^void irq_enter(void)$/;"	f
irq_exit	kernel/softirq.c	/^void irq_exit(void)$/;"	f
irq_stat	kernel/softirq.c	/^EXPORT_SYMBOL(irq_stat);$/;"	v
irqreader	kernel/rcutorture.c	/^static int irqreader = 1;	\/* RCU readers from irq (timers). *\/$/;"	v	file:
is_arm_mapping_symbol	kernel/module.c	/^static inline int is_arm_mapping_symbol(const char *str)$/;"	f	file:
is_async	fs/direct-io.c	/^	int is_async;			\/* is IO async ? *\/$/;"	m	struct:dio	file:
is_bad_inode	fs/bad_inode.c	/^EXPORT_SYMBOL(is_bad_inode);$/;"	v
is_bad_inode	fs/bad_inode.c	/^int is_bad_inode(struct inode *inode)$/;"	f
is_branch_in	kernel/sysctl.c	/^static struct ctl_table *is_branch_in(struct ctl_table *branch,$/;"	f	file:
is_console_locked	kernel/printk.c	/^int is_console_locked(void)$/;"	f
is_container_init	kernel/pid.c	/^EXPORT_SYMBOL(is_container_init);$/;"	v
is_container_init	kernel/pid.c	/^int is_container_init(struct task_struct *tsk)$/;"	f
is_core_symbol	kernel/module.c	/^static bool is_core_symbol(const Elf_Sym *src, const Elf_Shdr *sechdrs,$/;"	f	file:
is_cow_mapping	mm/memory.c	/^static inline int is_cow_mapping(unsigned int flags)$/;"	f	file:
is_cpu_exclusive	kernel/cpuset.c	/^static inline int is_cpu_exclusive(const struct cpuset *cs)$/;"	f	file:
is_cpuset_subset	kernel/cpuset.c	/^static int is_cpuset_subset(const struct cpuset *p, const struct cpuset *q)$/;"	f	file:
is_current_pgrp_orphaned	kernel/exit.c	/^int is_current_pgrp_orphaned(void)$/;"	f
is_elf_fdpic	fs/binfmt_elf_fdpic.c	/^static int is_elf_fdpic(struct elfhdr *hdr, struct file *file)$/;"	f	file:
is_exported	kernel/module.c	/^static int is_exported(const char *name, unsigned long value,$/;"	f	file:
is_file_epoll	fs/eventpoll.c	/^static inline int is_file_epoll(struct file *f)$/;"	f	file:
is_free_buddy_page	mm/page_alloc.c	/^bool is_free_buddy_page(struct page *page)$/;"	f
is_kernel	kernel/kallsyms.c	/^static inline int is_kernel(unsigned long addr)$/;"	f	file:
is_kernel_inittext	kernel/kallsyms.c	/^static inline int is_kernel_inittext(unsigned long addr)$/;"	f	file:
is_kernel_text	kernel/kallsyms.c	/^static inline int is_kernel_text(unsigned long addr)$/;"	f	file:
is_ksym_addr	kernel/kallsyms.c	/^static int is_ksym_addr(unsigned long addr)$/;"	f	file:
is_live	fs/dcookies.c	/^static inline int is_live(void)$/;"	f	file:
is_mem_exclusive	kernel/cpuset.c	/^static inline int is_mem_exclusive(const struct cpuset *cs)$/;"	f	file:
is_mem_hardwall	kernel/cpuset.c	/^static inline int is_mem_hardwall(const struct cpuset *cs)$/;"	f	file:
is_mem_section_removable	mm/memory_hotplug.c	/^int is_mem_section_removable(unsigned long start_pfn, unsigned long nr_pages)$/;"	f
is_memory_migrate	kernel/cpuset.c	/^static inline int is_memory_migrate(const struct cpuset *cs)$/;"	f	file:
is_mergeable_anon_vma	mm/mmap.c	/^static inline int is_mergeable_anon_vma(struct anon_vma *anon_vma1,$/;"	f	file:
is_mergeable_vma	mm/mmap.c	/^static inline int is_mergeable_vma(struct vm_area_struct *vma,$/;"	f	file:
is_mlocked_vma	mm/internal.h	/^static inline int is_mlocked_vma(struct vm_area_struct *v, struct page *p)$/;"	f
is_mlocked_vma	mm/internal.h	/^static inline int is_mlocked_vma(struct vm_area_struct *vma, struct page *page)$/;"	f
is_module_address	kernel/module.c	/^bool is_module_address(unsigned long addr)$/;"	f
is_module_text_address	kernel/module.c	/^bool is_module_text_address(unsigned long addr)$/;"	f
is_our_pages	fs/bio.c	/^	int is_our_pages;$/;"	m	struct:bio_map_data	file:
is_page_busy	mm/dmapool.c	/^static inline int is_page_busy(struct dma_page *page)$/;"	f	file:
is_page_cache_freeable	mm/vmscan.c	/^static inline int is_page_cache_freeable(struct page *page)$/;"	f	file:
is_path_reachable	fs/pnode.c	/^static bool is_path_reachable(struct vfsmount *mnt, struct dentry *dentry,$/;"	f	file:
is_restart_addr	mm/memory.c	2310;"	d	file:
is_same_group	kernel/sched_fair.c	/^is_same_group(struct sched_entity *se, struct sched_entity *pse)$/;"	f	file:
is_sched_load_balance	kernel/cpuset.c	/^static inline int is_sched_load_balance(const struct cpuset *cs)$/;"	f	file:
is_semi_idle_group	kernel/sched.c	/^static inline int is_semi_idle_group(struct sched_group *ilb_group)$/;"	f	file:
is_si_special	kernel/signal.c	/^static inline int is_si_special(const struct siginfo *info)$/;"	f	file:
is_singleblock	kernel/ptrace.c	468;"	d	file:
is_singleblock	kernel/ptrace.c	470;"	d	file:
is_singlestep	kernel/ptrace.c	462;"	d	file:
is_singlestep	kernel/ptrace.c	464;"	d	file:
is_slob_page	mm/slob.c	/^static inline int is_slob_page(struct slob_page *sp)$/;"	f	file:
is_software_only_group	kernel/perf_event.c	/^static int is_software_only_group(struct perf_event *leader)$/;"	f	file:
is_spread_page	kernel/cpuset.c	/^static inline int is_spread_page(const struct cpuset *cs)$/;"	f	file:
is_spread_slab	kernel/cpuset.c	/^static inline int is_spread_slab(const struct cpuset *cs)$/;"	f	file:
is_subdir	fs/dcache.c	/^int is_subdir(struct dentry *new_dentry, struct dentry *old_dentry)$/;"	f
is_sysemu_singlestep	kernel/ptrace.c	474;"	d	file:
is_sysemu_singlestep	kernel/ptrace.c	476;"	d	file:
is_task_frozen_enough	kernel/cgroup_freezer.c	/^static bool is_task_frozen_enough(struct task_struct *task)$/;"	f	file:
is_under	kernel/audit_tree.c	/^static int is_under(struct vfsmount *mnt, struct dentry *dentry,$/;"	f	file:
is_valid_nodemask	mm/mempolicy.c	/^static int is_valid_nodemask(const nodemask_t *nodemask)$/;"	f	file:
is_vma_resv_set	mm/hugetlb.c	/^static int is_vma_resv_set(struct vm_area_struct *vma, unsigned long flag)$/;"	f	file:
is_vmalloc_or_module_addr	mm/vmalloc.c	/^int is_vmalloc_or_module_addr(const void *x)$/;"	f
is_wq_single_threaded	kernel/workqueue.c	/^static inline int is_wq_single_threaded(struct workqueue_struct *wq)$/;"	f	file:
is_zero_pfn	mm/memory.c	/^static inline int is_zero_pfn(unsigned long pfn)$/;"	f	file:
isa_page_pool	mm/bounce.c	/^static mempool_t *page_pool, *isa_page_pool;$/;"	v	file:
isolate_lru_page	mm/vmscan.c	/^int isolate_lru_page(struct page *page)$/;"	f
isolate_lru_pages	mm/vmscan.c	/^static unsigned long isolate_lru_pages(unsigned long nr_to_scan,$/;"	f	file:
isolate_pages	mm/vmscan.c	/^	unsigned long (*isolate_pages)(unsigned long nr, struct list_head *dst,$/;"	m	struct:scan_control	file:
isolate_pages_global	mm/vmscan.c	/^static unsigned long isolate_pages_global(unsigned long nr,$/;"	f	file:
isolated_cpu_setup	kernel/sched.c	/^static int __init isolated_cpu_setup(char *str)$/;"	f	file:
it_real_fn	kernel/itimer.c	/^enum hrtimer_restart it_real_fn(struct hrtimer *timer)$/;"	f
iter_end	kernel/lockdep_proc.c	/^	struct lock_stat_data *iter_end;$/;"	m	struct:lock_stat_seq	typeref:struct:lock_stat_seq::lock_stat_data	file:
iter_move_one_task	kernel/sched.c	/^iter_move_one_task(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
iterate_chain_key	kernel/lockdep.c	304;"	d	file:
itimer_delete	kernel/posix-timers.c	/^static void itimer_delete(struct k_itimer *timer)$/;"	f	file:
itimer_get_remtime	kernel/itimer.c	/^static struct timeval itimer_get_remtime(struct hrtimer *timer)$/;"	f	file:
iunique	fs/inode.c	/^EXPORT_SYMBOL(iunique);$/;"	v
iunique	fs/inode.c	/^ino_t iunique(struct super_block *sb, ino_t max_reserved)$/;"	f
j_kprobe_target	kernel/test_kprobes.c	/^static u32 j_kprobe_target(u32 value)$/;"	f	file:
jiffies	kernel/time.c	/^EXPORT_SYMBOL(jiffies);$/;"	v
jiffies	mm/kmemleak.c	/^	unsigned long jiffies;		\/* creation timestamp *\/$/;"	m	struct:kmemleak_object	file:
jiffies_64	kernel/timer.c	/^EXPORT_SYMBOL(jiffies_64);$/;"	v
jiffies_64_to_clock_t	kernel/time.c	/^EXPORT_SYMBOL(jiffies_64_to_clock_t);$/;"	v
jiffies_64_to_clock_t	kernel/time.c	/^u64 jiffies_64_to_clock_t(u64 x)$/;"	f
jiffies_force_qs	kernel/rcutree.h	/^	unsigned long jiffies_force_qs;		\/* Time at which to invoke *\/$/;"	m	struct:rcu_state
jiffies_last_scan	mm/kmemleak.c	/^static unsigned long jiffies_last_scan;$/;"	v	file:
jiffies_min_age	mm/kmemleak.c	/^static unsigned long jiffies_min_age;$/;"	v	file:
jiffies_scan_wait	mm/kmemleak.c	/^static signed long jiffies_scan_wait;$/;"	v	file:
jiffies_stall	kernel/rcutree.h	/^	unsigned long jiffies_stall;		\/* Time at which to check *\/$/;"	m	struct:rcu_state
jiffies_to_clock_t	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_clock_t);$/;"	v
jiffies_to_clock_t	kernel/time.c	/^clock_t jiffies_to_clock_t(long x)$/;"	f
jiffies_to_msecs	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_msecs);$/;"	v
jiffies_to_msecs	kernel/time.c	/^unsigned int inline jiffies_to_msecs(const unsigned long j)$/;"	f
jiffies_to_timespec	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_timespec);$/;"	v
jiffies_to_timespec	kernel/time.c	/^jiffies_to_timespec(const unsigned long jiffies, struct timespec *value)$/;"	f
jiffies_to_timeval	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_timeval);$/;"	v
jiffies_to_timeval	kernel/time.c	/^void jiffies_to_timeval(const unsigned long jiffies, struct timeval *value)$/;"	f
jiffies_to_usecs	kernel/time.c	/^EXPORT_SYMBOL(jiffies_to_usecs);$/;"	v
jiffies_to_usecs	kernel/time.c	/^unsigned int inline jiffies_to_usecs(const unsigned long j)$/;"	f
jp	kernel/test_kprobes.c	/^static struct jprobe jp = {$/;"	v	typeref:struct:jprobe	file:
jp2	kernel/test_kprobes.c	/^static struct jprobe jp2 = {$/;"	v	typeref:struct:jprobe	file:
jph_val	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
jprobe_return	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(jprobe_return);$/;"	v
k_getrusage	kernel/sys.c	/^static void k_getrusage(struct task_struct *p, int who, struct rusage *r)$/;"	f	file:
kallsym_iter	kernel/kallsyms.c	/^struct kallsym_iter {$/;"	s	file:
kallsyms_expand_symbol	kernel/kallsyms.c	/^static unsigned int kallsyms_expand_symbol(unsigned int off, char *result)$/;"	f	file:
kallsyms_get_symbol_type	kernel/kallsyms.c	/^static char kallsyms_get_symbol_type(unsigned int off)$/;"	f	file:
kallsyms_init	kernel/kallsyms.c	/^device_initcall(kallsyms_init);$/;"	v
kallsyms_init	kernel/kallsyms.c	/^static int __init kallsyms_init(void)$/;"	f	file:
kallsyms_lookup	kernel/kallsyms.c	/^const char *kallsyms_lookup(unsigned long addr,$/;"	f
kallsyms_lookup_name	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(kallsyms_lookup_name);$/;"	v
kallsyms_lookup_name	kernel/kallsyms.c	/^unsigned long kallsyms_lookup_name(const char *name)$/;"	f
kallsyms_lookup_size_offset	kernel/kallsyms.c	/^int kallsyms_lookup_size_offset(unsigned long addr, unsigned long *symbolsize,$/;"	f
kallsyms_on_each_symbol	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(kallsyms_on_each_symbol);$/;"	v
kallsyms_on_each_symbol	kernel/kallsyms.c	/^int kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,$/;"	f
kallsyms_op	kernel/kallsyms.c	/^static const struct seq_operations kallsyms_op = {$/;"	v	typeref:struct:seq_operations	file:
kallsyms_open	kernel/kallsyms.c	/^static int kallsyms_open(struct inode *inode, struct file *file)$/;"	f	file:
kallsyms_operations	kernel/kallsyms.c	/^static const struct file_operations kallsyms_operations = {$/;"	v	typeref:struct:file_operations	file:
kauditd_send_skb	kernel/audit.c	/^static void kauditd_send_skb(struct sk_buff *skb)$/;"	f	file:
kauditd_task	kernel/audit.c	/^static struct task_struct *kauditd_task;$/;"	v	typeref:struct:task_struct	file:
kauditd_thread	kernel/audit.c	/^static int kauditd_thread(void *dummy)$/;"	f	file:
kbps	kernel/pm_qos_params.c	/^		s32 kbps;$/;"	m	union:requirement_list::__anon40	file:
kdcore	fs/binfmt_elf_fdpic.c	53;"	d	file:
kdebug	fs/binfmt_elf_fdpic.c	47;"	d	file:
kdebug	kernel/cred.c	29;"	d	file:
kdebug	mm/nommu.c	56;"	d	file:
kenter	mm/nommu.c	52;"	d	file:
kern_mount_data	fs/super.c	/^EXPORT_SYMBOL_GPL(kern_mount_data);$/;"	v
kern_mount_data	fs/super.c	/^struct vfsmount *kern_mount_data(struct file_system_type *type, void *data)$/;"	f
kern_path	fs/namei.c	/^EXPORT_SYMBOL(kern_path);$/;"	v
kern_path	fs/namei.c	/^int kern_path(const char *name, unsigned int flags, struct path *path)$/;"	f
kern_table	kernel/sysctl.c	/^static struct ctl_table kern_table[] = {$/;"	v	typeref:struct:ctl_table	file:
kern_table	kernel/sysctl.c	/^static struct ctl_table kern_table[];$/;"	v	typeref:struct:ctl_table	file:
kernel_add_sysfs_param	kernel/params.c	/^static void __init kernel_add_sysfs_param(const char *name,$/;"	f	file:
kernel_attr_group	kernel/ksysfs.c	/^static struct attribute_group kernel_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
kernel_attrs	kernel/ksysfs.c	/^static struct attribute * kernel_attrs[] = {$/;"	v	typeref:struct:attribute	file:
kernel_config_data_size	kernel/configs.c	52;"	d	file:
kernel_halt	kernel/sys.c	/^EXPORT_SYMBOL_GPL(kernel_halt);$/;"	v
kernel_halt	kernel/sys.c	/^void kernel_halt(void)$/;"	f
kernel_kobj	kernel/ksysfs.c	/^EXPORT_SYMBOL_GPL(kernel_kobj);$/;"	v
kernel_kobj	kernel/ksysfs.c	/^struct kobject *kernel_kobj;$/;"	v	typeref:struct:kobject
kernel_map_pages	mm/debug-pagealloc.c	/^void kernel_map_pages(struct page *page, int numpages, int enable)$/;"	f
kernel_power_off	kernel/sys.c	/^EXPORT_SYMBOL_GPL(kernel_power_off);$/;"	v
kernel_power_off	kernel/sys.c	/^void kernel_power_off(void)$/;"	f
kernel_read	fs/exec.c	/^EXPORT_SYMBOL(kernel_read);$/;"	v
kernel_read	fs/exec.c	/^int kernel_read(struct file *file, loff_t offset,$/;"	f
kernel_readv	fs/splice.c	/^static ssize_t kernel_readv(struct file *file, const struct iovec *vec,$/;"	f	file:
kernel_restart	kernel/sys.c	/^EXPORT_SYMBOL_GPL(kernel_restart);$/;"	v
kernel_restart	kernel/sys.c	/^void kernel_restart(char *cmd)$/;"	f
kernel_restart_prepare	kernel/sys.c	/^void kernel_restart_prepare(char *cmd)$/;"	f
kernel_shutdown_prepare	kernel/sys.c	/^static void kernel_shutdown_prepare(enum system_states state)$/;"	f	file:
kernel_text_address	kernel/extable.c	/^int kernel_text_address(unsigned long addr)$/;"	f
kernel_write	fs/splice.c	/^static ssize_t kernel_write(struct file *file, const char *buf, size_t count,$/;"	f	file:
keventd_up	kernel/workqueue.c	/^int keventd_up(void)$/;"	f
kexec_crash_image	kernel/kexec.c	/^struct kimage *kexec_crash_image;$/;"	v	typeref:struct:kimage
kexec_crash_loaded	kernel/ksysfs.c	/^KERNEL_ATTR_RO(kexec_crash_loaded);$/;"	v
kexec_crash_loaded_show	kernel/ksysfs.c	/^static ssize_t kexec_crash_loaded_show(struct kobject *kobj,$/;"	f	file:
kexec_crash_size	kernel/ksysfs.c	/^KERNEL_ATTR_RW(kexec_crash_size);$/;"	v
kexec_crash_size_show	kernel/ksysfs.c	/^static ssize_t kexec_crash_size_show(struct kobject *kobj,$/;"	f	file:
kexec_crash_size_store	kernel/ksysfs.c	/^static ssize_t kexec_crash_size_store(struct kobject *kobj,$/;"	f	file:
kexec_image	kernel/kexec.c	/^struct kimage *kexec_image;$/;"	v	typeref:struct:kimage
kexec_loaded	kernel/ksysfs.c	/^KERNEL_ATTR_RO(kexec_loaded);$/;"	v
kexec_loaded_show	kernel/ksysfs.c	/^static ssize_t kexec_loaded_show(struct kobject *kobj,$/;"	f	file:
kexec_should_crash	kernel/kexec.c	/^int kexec_should_crash(struct task_struct *p)$/;"	f
key	kernel/futex.c	/^	union futex_key key;$/;"	m	struct:futex_pi_state	typeref:union:futex_pi_state::futex_key	file:
key	kernel/futex.c	/^	union futex_key key;$/;"	m	struct:futex_q	typeref:union:futex_q::futex_key	file:
kfifo_alloc	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_alloc);$/;"	v
kfifo_alloc	kernel/kfifo.c	/^int kfifo_alloc(struct kfifo *fifo, unsigned int size, gfp_t gfp_mask)$/;"	f
kfifo_free	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_free);$/;"	v
kfifo_free	kernel/kfifo.c	/^void kfifo_free(struct kfifo *fifo)$/;"	f
kfifo_from_user	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_from_user);$/;"	v
kfifo_from_user	kernel/kfifo.c	/^int kfifo_from_user(struct kfifo *fifo,$/;"	f
kfifo_in	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_in);$/;"	v
kfifo_in	kernel/kfifo.c	/^unsigned int kfifo_in(struct kfifo *fifo, const void *from,$/;"	f
kfifo_init	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_init);$/;"	v
kfifo_init	kernel/kfifo.c	/^void kfifo_init(struct kfifo *fifo, void *buffer, unsigned int size)$/;"	f
kfifo_out	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_out);$/;"	v
kfifo_out	kernel/kfifo.c	/^unsigned int kfifo_out(struct kfifo *fifo, void *to, unsigned int len)$/;"	f
kfifo_out_peek	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_out_peek);$/;"	v
kfifo_out_peek	kernel/kfifo.c	/^unsigned int kfifo_out_peek(struct kfifo *fifo, void *to, unsigned int len,$/;"	f
kfifo_skip	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_skip);$/;"	v
kfifo_skip	kernel/kfifo.c	/^void kfifo_skip(struct kfifo *fifo, unsigned int len)$/;"	f
kfifo_to_user	kernel/kfifo.c	/^EXPORT_SYMBOL(kfifo_to_user);$/;"	v
kfifo_to_user	kernel/kfifo.c	/^int kfifo_to_user(struct kfifo *fifo,$/;"	f
kfree	mm/slab.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	mm/slab.c	/^void kfree(const void *objp)$/;"	f
kfree	mm/slob.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	mm/slob.c	/^void kfree(const void *block)$/;"	f
kfree	mm/slub.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	mm/slub.c	/^void kfree(const void *x)$/;"	f
kfree	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kfree);$/;"	v
kfree_debugcheck	mm/slab.c	/^static void kfree_debugcheck(const void *objp)$/;"	f	file:
kfree_debugcheck	mm/slab.c	2935;"	d	file:
kgdb_activate_sw_breakpoints	kernel/kgdb.c	/^static int kgdb_activate_sw_breakpoints(void)$/;"	f	file:
kgdb_active	kernel/kgdb.c	/^atomic_t			kgdb_active = ATOMIC_INIT(-1);$/;"	v
kgdb_arch_init	kernel/kgdb.c	/^int __weak kgdb_arch_init(void)$/;"	f
kgdb_arch_pc	kernel/kgdb.c	/^unsigned long __weak kgdb_arch_pc(int exception, struct pt_regs *regs)$/;"	f
kgdb_arch_remove_breakpoint	kernel/kgdb.c	/^int __weak kgdb_arch_remove_breakpoint(unsigned long addr, char *bundle)$/;"	f
kgdb_arch_set_breakpoint	kernel/kgdb.c	/^int __weak kgdb_arch_set_breakpoint(unsigned long addr, char *saved_instr)$/;"	f
kgdb_break	kernel/kgdb.c	/^static struct kgdb_bkpt		kgdb_break[KGDB_MAX_BREAKPOINTS] = {$/;"	v	typeref:struct:kgdb_bkpt	file:
kgdb_break_asap	kernel/kgdb.c	/^static int kgdb_break_asap;$/;"	v	file:
kgdb_breakpoint	kernel/kgdb.c	/^EXPORT_SYMBOL_GPL(kgdb_breakpoint);$/;"	v
kgdb_breakpoint	kernel/kgdb.c	/^void kgdb_breakpoint(void)$/;"	f
kgdb_con_registered	kernel/kgdb.c	/^static int kgdb_con_registered;$/;"	v	file:
kgdb_connected	kernel/kgdb.c	/^EXPORT_SYMBOL_GPL(kgdb_connected);$/;"	v
kgdb_connected	kernel/kgdb.c	/^int				kgdb_connected;$/;"	v
kgdb_console_write	kernel/kgdb.c	/^static void kgdb_console_write(struct console *co, const char *s,$/;"	f	file:
kgdb_contthread	kernel/kgdb.c	/^struct task_struct		*kgdb_contthread;$/;"	v	typeref:struct:task_struct
kgdb_cpu_doing_single_step	kernel/kgdb.c	/^atomic_t			kgdb_cpu_doing_single_step = ATOMIC_INIT(-1);$/;"	v
kgdb_deactivate_sw_breakpoints	kernel/kgdb.c	/^static int kgdb_deactivate_sw_breakpoints(void)$/;"	f	file:
kgdb_disable_hw_debug	kernel/kgdb.c	/^void __weak kgdb_disable_hw_debug(struct pt_regs *regs)$/;"	f
kgdb_do_roundup	kernel/kgdb.c	/^static int kgdb_do_roundup = 1;$/;"	v	file:
kgdb_ebin2mem	kernel/kgdb.c	/^static int kgdb_ebin2mem(char *buf, char *mem, int count)$/;"	f	file:
kgdb_flush_swbreak_addr	kernel/kgdb.c	/^static void kgdb_flush_swbreak_addr(unsigned long addr)$/;"	f	file:
kgdb_handle_exception	kernel/kgdb.c	/^kgdb_handle_exception(int evector, int signo, int ecode, struct pt_regs *regs)$/;"	f
kgdb_hex2long	kernel/kgdb.c	/^int kgdb_hex2long(char **ptr, unsigned long *long_val)$/;"	f
kgdb_hex2mem	kernel/kgdb.c	/^int kgdb_hex2mem(char *buf, char *mem, int count)$/;"	f
kgdb_info	kernel/kgdb.c	/^} kgdb_info[NR_CPUS];$/;"	v	typeref:struct:debuggerinfo_struct	file:
kgdb_initial_breakpoint	kernel/kgdb.c	/^static void kgdb_initial_breakpoint(void)$/;"	f	file:
kgdb_io_module_registered	kernel/kgdb.c	/^static int			kgdb_io_module_registered;$/;"	v	file:
kgdb_io_ops	kernel/kgdb.c	/^static struct kgdb_io		*kgdb_io_ops;$/;"	v	typeref:struct:kgdb_io	file:
kgdb_io_ready	kernel/kgdb.c	/^static int kgdb_io_ready(int print_wait)$/;"	f	file:
kgdb_isremovedbreak	kernel/kgdb.c	/^int kgdb_isremovedbreak(unsigned long addr)$/;"	f
kgdb_mem2hex	kernel/kgdb.c	/^int kgdb_mem2hex(char *mem, char *buf, int count)$/;"	f
kgdb_msg_write	kernel/kgdb.c	/^static void kgdb_msg_write(const char *s, int len)$/;"	f	file:
kgdb_nmicallback	kernel/kgdb.c	/^int kgdb_nmicallback(int cpu, void *regs)$/;"	f
kgdb_post_primary_code	kernel/kgdb.c	/^kgdb_post_primary_code(struct pt_regs *regs, int e_vector, int err_code)$/;"	f
kgdb_reenter_check	kernel/kgdb.c	/^static int kgdb_reenter_check(struct kgdb_state *ks)$/;"	f	file:
kgdb_register_callbacks	kernel/kgdb.c	/^static void kgdb_register_callbacks(void)$/;"	f	file:
kgdb_register_io_module	kernel/kgdb.c	/^EXPORT_SYMBOL_GPL(kgdb_register_io_module);$/;"	v
kgdb_register_io_module	kernel/kgdb.c	/^int kgdb_register_io_module(struct kgdb_io *new_kgdb_io_ops)$/;"	f
kgdb_remove_sw_break	kernel/kgdb.c	/^static int kgdb_remove_sw_break(unsigned long addr)$/;"	f	file:
kgdb_set_sw_break	kernel/kgdb.c	/^static int kgdb_set_sw_break(unsigned long addr)$/;"	f	file:
kgdb_setting_breakpoint	kernel/kgdb.c	/^atomic_t			kgdb_setting_breakpoint;$/;"	v
kgdb_single_step	kernel/kgdb.c	/^int				kgdb_single_step;$/;"	v
kgdb_skipexception	kernel/kgdb.c	/^int __weak kgdb_skipexception(int exception, struct pt_regs *regs)$/;"	f
kgdb_sstep_pid	kernel/kgdb.c	/^pid_t				kgdb_sstep_pid;$/;"	v
kgdb_state	kernel/kgdb.c	/^struct kgdb_state {$/;"	s	file:
kgdb_unregister_callbacks	kernel/kgdb.c	/^static void kgdb_unregister_callbacks(void)$/;"	f	file:
kgdb_unregister_io_module	kernel/kgdb.c	/^EXPORT_SYMBOL_GPL(kgdb_unregister_io_module);$/;"	v
kgdb_unregister_io_module	kernel/kgdb.c	/^void kgdb_unregister_io_module(struct kgdb_io *old_kgdb_io_ops)$/;"	f
kgdb_use_con	kernel/kgdb.c	/^static int kgdb_use_con;$/;"	v	file:
kgdb_usethread	kernel/kgdb.c	/^struct task_struct		*kgdb_usethread;$/;"	v	typeref:struct:task_struct
kgdb_usethreadid	kernel/kgdb.c	/^	long			kgdb_usethreadid;$/;"	m	struct:kgdb_state	file:
kgdb_validate_break_address	kernel/kgdb.c	/^int __weak kgdb_validate_break_address(unsigned long addr)$/;"	f
kgdb_wait	kernel/kgdb.c	/^static void kgdb_wait(struct pt_regs *regs)$/;"	f	file:
kgdbcons	kernel/kgdb.c	/^static struct console kgdbcons = {$/;"	v	typeref:struct:console	file:
khelper_wq	kernel/kmod.c	/^static struct workqueue_struct *khelper_wq;$/;"	v	typeref:struct:workqueue_struct	file:
kick_iocb	fs/aio.c	/^EXPORT_SYMBOL(kick_iocb);$/;"	v
kick_iocb	fs/aio.c	/^void kick_iocb(struct kiocb *iocb)$/;"	f
kick_process	kernel/sched.c	/^EXPORT_SYMBOL_GPL(kick_process);$/;"	v
kick_process	kernel/sched.c	/^void kick_process(struct task_struct *p)$/;"	f
kill_anon_super	fs/super.c	/^EXPORT_SYMBOL(kill_anon_super);$/;"	v
kill_anon_super	fs/super.c	/^void kill_anon_super(struct super_block *sb)$/;"	f
kill_bdev	fs/block_dev.c	/^static void kill_bdev(struct block_device *bdev)$/;"	f	file:
kill_block_super	fs/super.c	/^EXPORT_SYMBOL(kill_block_super);$/;"	v
kill_block_super	fs/super.c	/^void kill_block_super(struct super_block *sb)$/;"	f
kill_fasync	fs/fcntl.c	/^EXPORT_SYMBOL(kill_fasync);$/;"	v
kill_fasync	fs/fcntl.c	/^void kill_fasync(struct fasync_struct **fp, int sig, int band)$/;"	f
kill_kprobe	kernel/kprobes.c	/^static void __kprobes kill_kprobe(struct kprobe *p)$/;"	f	file:
kill_litter_super	fs/super.c	/^EXPORT_SYMBOL(kill_litter_super);$/;"	v
kill_litter_super	fs/super.c	/^void kill_litter_super(struct super_block *sb)$/;"	f
kill_node	fs/binfmt_misc.c	/^static void kill_node(Node *e)$/;"	f	file:
kill_orphaned_pgrp	kernel/exit.c	/^kill_orphaned_pgrp(struct task_struct *tsk, struct task_struct *parent)$/;"	f	file:
kill_pgrp	kernel/signal.c	/^EXPORT_SYMBOL(kill_pgrp);$/;"	v
kill_pgrp	kernel/signal.c	/^int kill_pgrp(struct pid *pid, int sig, int priv)$/;"	f
kill_pid	kernel/signal.c	/^EXPORT_SYMBOL(kill_pid);$/;"	v
kill_pid	kernel/signal.c	/^int kill_pid(struct pid *pid, int sig, int priv)$/;"	f
kill_pid_info	kernel/signal.c	/^int kill_pid_info(int sig, struct siginfo *info, struct pid *pid)$/;"	f
kill_pid_info_as_uid	kernel/signal.c	/^EXPORT_SYMBOL_GPL(kill_pid_info_as_uid);$/;"	v
kill_pid_info_as_uid	kernel/signal.c	/^int kill_pid_info_as_uid(int sig, struct siginfo *info, struct pid *pid,$/;"	f
kill_proc_ao	mm/memory-failure.c	/^static int kill_proc_ao(struct task_struct *t, unsigned long addr, int trapno,$/;"	f	file:
kill_proc_info	kernel/signal.c	/^kill_proc_info(int sig, struct siginfo *info, pid_t pid)$/;"	f
kill_procs_ao	mm/memory-failure.c	/^static void kill_procs_ao(struct list_head *to_kill, int doit, int trapno,$/;"	f	file:
kill_rules	kernel/audit_tree.c	/^static void kill_rules(struct audit_tree *tree)$/;"	f	file:
kill_something_info	kernel/signal.c	/^static int kill_something_info(int sig, struct siginfo *info, pid_t pid)$/;"	f	file:
killed_trees	kernel/auditsc.c	/^	struct list_head killed_trees;$/;"	m	struct:audit_context	typeref:struct:audit_context::list_head	file:
kimage_add_entry	kernel/kexec.c	/^static int kimage_add_entry(struct kimage *image, kimage_entry_t entry)$/;"	f	file:
kimage_add_page	kernel/kexec.c	/^static int kimage_add_page(struct kimage *image, unsigned long page)$/;"	f	file:
kimage_alloc_control_pages	kernel/kexec.c	/^struct page *kimage_alloc_control_pages(struct kimage *image,$/;"	f
kimage_alloc_crash_control_pages	kernel/kexec.c	/^static struct page *kimage_alloc_crash_control_pages(struct kimage *image,$/;"	f	file:
kimage_alloc_normal_control_pages	kernel/kexec.c	/^static struct page *kimage_alloc_normal_control_pages(struct kimage *image,$/;"	f	file:
kimage_alloc_page	kernel/kexec.c	/^static struct page *kimage_alloc_page(struct kimage *image,$/;"	f	file:
kimage_alloc_pages	kernel/kexec.c	/^static struct page *kimage_alloc_pages(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
kimage_crash_alloc	kernel/kexec.c	/^static int kimage_crash_alloc(struct kimage **rimage, unsigned long entry,$/;"	f	file:
kimage_dst_used	kernel/kexec.c	/^static kimage_entry_t *kimage_dst_used(struct kimage *image,$/;"	f	file:
kimage_free	kernel/kexec.c	/^static void kimage_free(struct kimage *image)$/;"	f	file:
kimage_free_entry	kernel/kexec.c	/^static void kimage_free_entry(kimage_entry_t entry)$/;"	f	file:
kimage_free_extra_pages	kernel/kexec.c	/^static void kimage_free_extra_pages(struct kimage *image)$/;"	f	file:
kimage_free_page_list	kernel/kexec.c	/^static void kimage_free_page_list(struct list_head *list)$/;"	f	file:
kimage_free_pages	kernel/kexec.c	/^static void kimage_free_pages(struct page *page)$/;"	f	file:
kimage_is_destination_range	kernel/kexec.c	/^static int kimage_is_destination_range(struct kimage *image,$/;"	f	file:
kimage_load_crash_segment	kernel/kexec.c	/^static int kimage_load_crash_segment(struct kimage *image,$/;"	f	file:
kimage_load_normal_segment	kernel/kexec.c	/^static int kimage_load_normal_segment(struct kimage *image,$/;"	f	file:
kimage_load_segment	kernel/kexec.c	/^static int kimage_load_segment(struct kimage *image,$/;"	f	file:
kimage_normal_alloc	kernel/kexec.c	/^static int kimage_normal_alloc(struct kimage **rimage, unsigned long entry,$/;"	f	file:
kimage_set_destination	kernel/kexec.c	/^static int kimage_set_destination(struct kimage *image,$/;"	f	file:
kimage_terminate	kernel/kexec.c	/^static void kimage_terminate(struct kimage *image)$/;"	f	file:
kintegrityd_wq	fs/bio-integrity.c	/^static struct workqueue_struct *kintegrityd_wq;$/;"	v	typeref:struct:workqueue_struct	file:
kiocb_cachep	fs/aio.c	/^static struct kmem_cache	*kiocb_cachep;$/;"	v	typeref:struct:kmem_cache	file:
kioctx_cachep	fs/aio.c	/^static struct kmem_cache	*kioctx_cachep;$/;"	v	typeref:struct:kmem_cache	file:
kleave	mm/nommu.c	54;"	d	file:
kmalloc	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmalloc);$/;"	v
kmalloc_caches	mm/slub.c	/^EXPORT_SYMBOL(kmalloc_caches);$/;"	v
kmalloc_caches_dma	mm/slub.c	/^static struct kmem_cache *kmalloc_caches_dma[SLUB_PAGE_SHIFT];$/;"	v	typeref:struct:kmem_cache	file:
kmalloc_large_node	mm/slub.c	/^static void *kmalloc_large_node(size_t size, gfp_t flags, int node)$/;"	f	file:
kmalloc_node	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmalloc_node);$/;"	v
kmalloc_section_memmap	mm/sparse.c	/^static inline struct page *kmalloc_section_memmap(unsigned long pnum, int nid,$/;"	f	file:
kmap_flush_unused	mm/highmem.c	/^void kmap_flush_unused(void)$/;"	f
kmap_high	mm/highmem.c	/^EXPORT_SYMBOL(kmap_high);$/;"	v
kmap_high	mm/highmem.c	/^void *kmap_high(struct page *page)$/;"	f
kmap_high_get	mm/highmem.c	/^void *kmap_high_get(struct page *page)$/;"	f
kmem_bufctl_t	mm/slab.c	/^typedef unsigned int kmem_bufctl_t;$/;"	t	file:
kmem_cache	mm/slob.c	/^struct kmem_cache {$/;"	s	file:
kmem_cache_alloc	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	mm/slab.c	/^void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f
kmem_cache_alloc	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	mm/slub.c	/^void *kmem_cache_alloc(struct kmem_cache *s, gfp_t gfpflags)$/;"	f
kmem_cache_alloc	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc_node	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	mm/slab.c	/^void *kmem_cache_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid)$/;"	f
kmem_cache_alloc_node	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	mm/slob.c	/^void *kmem_cache_alloc_node(struct kmem_cache *c, gfp_t flags, int node)$/;"	f
kmem_cache_alloc_node	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	mm/slub.c	/^void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t gfpflags, int node)$/;"	f
kmem_cache_alloc_node	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node_notrace	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node_notrace);$/;"	v
kmem_cache_alloc_node_notrace	mm/slab.c	/^void *kmem_cache_alloc_node_notrace(struct kmem_cache *cachep,$/;"	f
kmem_cache_alloc_node_notrace	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node_notrace);$/;"	v
kmem_cache_alloc_node_notrace	mm/slub.c	/^void *kmem_cache_alloc_node_notrace(struct kmem_cache *s,$/;"	f
kmem_cache_alloc_notrace	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_notrace);$/;"	v
kmem_cache_alloc_notrace	mm/slab.c	/^void *kmem_cache_alloc_notrace(struct kmem_cache *cachep, gfp_t flags)$/;"	f
kmem_cache_alloc_notrace	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_notrace);$/;"	v
kmem_cache_alloc_notrace	mm/slub.c	/^void *kmem_cache_alloc_notrace(struct kmem_cache *s, gfp_t gfpflags)$/;"	f
kmem_cache_close	mm/slub.c	/^static inline int kmem_cache_close(struct kmem_cache *s)$/;"	f	file:
kmem_cache_create	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_create);$/;"	v
kmem_cache_create	mm/slab.c	/^kmem_cache_create (const char *name, size_t size, size_t align,$/;"	f
kmem_cache_create	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_create);$/;"	v
kmem_cache_create	mm/slob.c	/^struct kmem_cache *kmem_cache_create(const char *name, size_t size,$/;"	f
kmem_cache_create	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_create);$/;"	v
kmem_cache_create	mm/slub.c	/^struct kmem_cache *kmem_cache_create(const char *name, size_t size,$/;"	f
kmem_cache_destroy	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_destroy);$/;"	v
kmem_cache_destroy	mm/slab.c	/^void kmem_cache_destroy(struct kmem_cache *cachep)$/;"	f
kmem_cache_destroy	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_destroy);$/;"	v
kmem_cache_destroy	mm/slob.c	/^void kmem_cache_destroy(struct kmem_cache *c)$/;"	f
kmem_cache_destroy	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_destroy);$/;"	v
kmem_cache_destroy	mm/slub.c	/^void kmem_cache_destroy(struct kmem_cache *s)$/;"	f
kmem_cache_flags	mm/slub.c	/^static inline unsigned long kmem_cache_flags(unsigned long objsize,$/;"	f	file:
kmem_cache_flags	mm/slub.c	/^static unsigned long kmem_cache_flags(unsigned long objsize,$/;"	f	file:
kmem_cache_free	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	mm/slab.c	/^void kmem_cache_free(struct kmem_cache *cachep, void *objp)$/;"	f
kmem_cache_free	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	mm/slob.c	/^void kmem_cache_free(struct kmem_cache *c, void *b)$/;"	f
kmem_cache_free	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	mm/slub.c	/^void kmem_cache_free(struct kmem_cache *s, void *x)$/;"	f
kmem_cache_free	mm/util.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_init	mm/slab.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init	mm/slob.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init	mm/slub.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init_late	mm/slab.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_init_late	mm/slob.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_init_late	mm/slub.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_name	mm/slab.c	/^EXPORT_SYMBOL_GPL(kmem_cache_name);$/;"	v
kmem_cache_name	mm/slab.c	/^const char *kmem_cache_name(struct kmem_cache *cachep)$/;"	f
kmem_cache_name	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_name);$/;"	v
kmem_cache_name	mm/slob.c	/^const char *kmem_cache_name(struct kmem_cache *c)$/;"	f
kmem_cache_name	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_name);$/;"	v
kmem_cache_name	mm/slub.c	/^const char *kmem_cache_name(struct kmem_cache *s)$/;"	f
kmem_cache_open	mm/slub.c	/^static int kmem_cache_open(struct kmem_cache *s, gfp_t gfpflags,$/;"	f	file:
kmem_cache_release	mm/slub.c	/^static void kmem_cache_release(struct kobject *kobj)$/;"	f	file:
kmem_cache_shrink	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	mm/slab.c	/^int kmem_cache_shrink(struct kmem_cache *cachep)$/;"	f
kmem_cache_shrink	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	mm/slob.c	/^int kmem_cache_shrink(struct kmem_cache *d)$/;"	f
kmem_cache_shrink	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	mm/slub.c	/^int kmem_cache_shrink(struct kmem_cache *s)$/;"	f
kmem_cache_size	mm/slab.c	/^EXPORT_SYMBOL(kmem_cache_size);$/;"	v
kmem_cache_size	mm/slab.c	/^unsigned int kmem_cache_size(struct kmem_cache *cachep)$/;"	f
kmem_cache_size	mm/slob.c	/^EXPORT_SYMBOL(kmem_cache_size);$/;"	v
kmem_cache_size	mm/slob.c	/^unsigned int kmem_cache_size(struct kmem_cache *c)$/;"	f
kmem_cache_size	mm/slub.c	/^EXPORT_SYMBOL(kmem_cache_size);$/;"	v
kmem_cache_size	mm/slub.c	/^unsigned int kmem_cache_size(struct kmem_cache *s)$/;"	f
kmem_find_general_cachep	mm/slab.c	/^static struct kmem_cache *kmem_find_general_cachep(size_t size, gfp_t gfpflags)$/;"	f	file:
kmem_flagcheck	mm/slab.c	/^static void kmem_flagcheck(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
kmem_freepages	mm/slab.c	/^static void kmem_freepages(struct kmem_cache *cachep, void *addr)$/;"	f	file:
kmem_getpages	mm/slab.c	/^static void *kmem_getpages(struct kmem_cache *cachep, gfp_t flags, int nodeid)$/;"	f	file:
kmem_list3	mm/slab.c	/^struct kmem_list3 {$/;"	s	file:
kmem_list3_init	mm/slab.c	/^static void kmem_list3_init(struct kmem_list3 *parent)$/;"	f	file:
kmem_ptr_validate	mm/slab.c	/^int kmem_ptr_validate(struct kmem_cache *cachep, const void *ptr)$/;"	f
kmem_ptr_validate	mm/slob.c	/^int kmem_ptr_validate(struct kmem_cache *a, const void *b)$/;"	f
kmem_ptr_validate	mm/slub.c	/^EXPORT_SYMBOL(kmem_ptr_validate);$/;"	v
kmem_ptr_validate	mm/slub.c	/^int kmem_ptr_validate(struct kmem_cache *s, const void *object)$/;"	f
kmem_rcu_free	mm/slab.c	/^static void kmem_rcu_free(struct rcu_head *head)$/;"	f	file:
kmem_rcu_free	mm/slob.c	/^static void kmem_rcu_free(struct rcu_head *head)$/;"	f	file:
kmem_size	mm/slub.c	/^static int kmem_size = sizeof(struct kmem_cache);$/;"	v	file:
kmemcheck_alloc_shadow	mm/kmemcheck.c	/^void kmemcheck_alloc_shadow(struct page *page, int order, gfp_t flags, int node)$/;"	f
kmemcheck_free_shadow	mm/kmemcheck.c	/^void kmemcheck_free_shadow(struct page *page, int order)$/;"	f
kmemcheck_pagealloc_alloc	mm/kmemcheck.c	/^void kmemcheck_pagealloc_alloc(struct page *page, unsigned int order,$/;"	f
kmemcheck_slab_alloc	mm/kmemcheck.c	/^void kmemcheck_slab_alloc(struct kmem_cache *s, gfp_t gfpflags, void *object,$/;"	f
kmemcheck_slab_free	mm/kmemcheck.c	/^void kmemcheck_slab_free(struct kmem_cache *s, void *object, size_t size)$/;"	f
kmemdup	mm/util.c	/^EXPORT_SYMBOL(kmemdup);$/;"	v
kmemdup	mm/util.c	/^void *kmemdup(const void *src, size_t len, gfp_t gfp)$/;"	f
kmemleak_alloc	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_alloc);$/;"	v
kmemleak_alloc	mm/kmemleak.c	/^void __ref kmemleak_alloc(const void *ptr, size_t size, int min_count,$/;"	f
kmemleak_boot_config	mm/kmemleak.c	/^static int kmemleak_boot_config(char *str)$/;"	f	file:
kmemleak_clear	mm/kmemleak.c	/^static void kmemleak_clear(void)$/;"	f	file:
kmemleak_disable	mm/kmemleak.c	/^static void kmemleak_disable(void)$/;"	f	file:
kmemleak_do_cleanup	mm/kmemleak.c	/^static void kmemleak_do_cleanup(struct work_struct *work)$/;"	f	file:
kmemleak_early_log	mm/kmemleak.c	/^static atomic_t kmemleak_early_log = ATOMIC_INIT(1);$/;"	v	file:
kmemleak_enabled	mm/kmemleak.c	/^static atomic_t kmemleak_enabled = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_error	mm/kmemleak.c	/^static atomic_t kmemleak_error = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_fops	mm/kmemleak.c	/^static const struct file_operations kmemleak_fops = {$/;"	v	typeref:struct:file_operations	file:
kmemleak_free	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free);$/;"	v
kmemleak_free	mm/kmemleak.c	/^void __ref kmemleak_free(const void *ptr)$/;"	f
kmemleak_free_part	mm/kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free_part);$/;"	v
kmemleak_free_part	mm/kmemleak.c	/^void __ref kmemleak_free_part(const void *ptr, size_t size)$/;"	f
kmemleak_ignore	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_ignore);$/;"	v
kmemleak_ignore	mm/kmemleak.c	/^void __ref kmemleak_ignore(const void *ptr)$/;"	f
kmemleak_init	mm/kmemleak.c	/^void __init kmemleak_init(void)$/;"	f
kmemleak_initialized	mm/kmemleak.c	/^static atomic_t kmemleak_initialized = ATOMIC_INIT(0);$/;"	v	file:
kmemleak_late_init	mm/kmemleak.c	/^late_initcall(kmemleak_late_init);$/;"	v
kmemleak_late_init	mm/kmemleak.c	/^static int __init kmemleak_late_init(void)$/;"	f	file:
kmemleak_load_module	kernel/module.c	/^static inline void kmemleak_load_module(struct module *mod, Elf_Ehdr *hdr,$/;"	f	file:
kmemleak_load_module	kernel/module.c	/^static void kmemleak_load_module(struct module *mod, Elf_Ehdr *hdr,$/;"	f	file:
kmemleak_no_scan	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_no_scan);$/;"	v
kmemleak_no_scan	mm/kmemleak.c	/^void __ref kmemleak_no_scan(const void *ptr)$/;"	f
kmemleak_not_leak	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_not_leak);$/;"	v
kmemleak_not_leak	mm/kmemleak.c	/^void __ref kmemleak_not_leak(const void *ptr)$/;"	f
kmemleak_object	mm/kmemleak.c	/^struct kmemleak_object {$/;"	s	file:
kmemleak_open	mm/kmemleak.c	/^static int kmemleak_open(struct inode *inode, struct file *file)$/;"	f	file:
kmemleak_release	mm/kmemleak.c	/^static int kmemleak_release(struct inode *inode, struct file *file)$/;"	f	file:
kmemleak_scan	mm/kmemleak.c	/^static void kmemleak_scan(void)$/;"	f	file:
kmemleak_scan_area	mm/kmemleak.c	/^EXPORT_SYMBOL(kmemleak_scan_area);$/;"	v
kmemleak_scan_area	mm/kmemleak.c	/^struct kmemleak_scan_area {$/;"	s	file:
kmemleak_scan_area	mm/kmemleak.c	/^void __ref kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)$/;"	f
kmemleak_scan_thread	mm/kmemleak.c	/^static int kmemleak_scan_thread(void *arg)$/;"	f	file:
kmemleak_seq_next	mm/kmemleak.c	/^static void *kmemleak_seq_next(struct seq_file *seq, void *v, loff_t *pos)$/;"	f	file:
kmemleak_seq_ops	mm/kmemleak.c	/^static const struct seq_operations kmemleak_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
kmemleak_seq_show	mm/kmemleak.c	/^static int kmemleak_seq_show(struct seq_file *seq, void *v)$/;"	f	file:
kmemleak_seq_start	mm/kmemleak.c	/^static void *kmemleak_seq_start(struct seq_file *seq, loff_t *pos)$/;"	f	file:
kmemleak_seq_stop	mm/kmemleak.c	/^static void kmemleak_seq_stop(struct seq_file *seq, void *v)$/;"	f	file:
kmemleak_stack_scan	mm/kmemleak.c	/^static int kmemleak_stack_scan = 1;$/;"	v	file:
kmemleak_stop	mm/kmemleak.c	268;"	d	file:
kmemleak_test_exit	mm/kmemleak-test.c	/^module_exit(kmemleak_test_exit);$/;"	v
kmemleak_test_exit	mm/kmemleak-test.c	/^static void __exit kmemleak_test_exit(void)$/;"	f	file:
kmemleak_test_init	mm/kmemleak-test.c	/^module_init(kmemleak_test_init);$/;"	v
kmemleak_test_init	mm/kmemleak-test.c	/^static int __init kmemleak_test_init(void)$/;"	f	file:
kmemleak_warn	mm/kmemleak.c	258;"	d	file:
kmemleak_write	mm/kmemleak.c	/^static ssize_t kmemleak_write(struct file *file, const char __user *user_buf,$/;"	f	file:
kmsg_dump	kernel/printk.c	/^void kmsg_dump(enum kmsg_dump_reason reason)$/;"	f
kmsg_dump_register	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_register);$/;"	v
kmsg_dump_register	kernel/printk.c	/^int kmsg_dump_register(struct kmsg_dumper *dumper)$/;"	f
kmsg_dump_unregister	kernel/printk.c	/^EXPORT_SYMBOL_GPL(kmsg_dump_unregister);$/;"	v
kmsg_dump_unregister	kernel/printk.c	/^int kmsg_dump_unregister(struct kmsg_dumper *dumper)$/;"	f
kmsg_reasons	kernel/printk.c	/^static const char const *kmsg_reasons[] = {$/;"	v	file:
kmsg_to_str	kernel/printk.c	/^static const char *kmsg_to_str(enum kmsg_dump_reason reason)$/;"	f	file:
kobj_to_hstate	mm/hugetlb.c	/^static struct hstate *kobj_to_hstate(struct kobject *kobj, int *nidp)$/;"	f	file:
kobj_to_node_hstate	mm/hugetlb.c	/^static struct hstate *kobj_to_node_hstate(struct kobject *kobj, int *nidp)$/;"	f	file:
kobjsize	mm/nommu.c	/^unsigned int kobjsize(const void *objp)$/;"	f
kp	kernel/test_kprobes.c	/^static struct kprobe kp = {$/;"	v	typeref:struct:kprobe	file:
kp2	kernel/test_kprobes.c	/^static struct kprobe kp2 = {$/;"	v	typeref:struct:kprobe	file:
kp_post_handler	kernel/test_kprobes.c	/^static void kp_post_handler(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
kp_post_handler2	kernel/test_kprobes.c	/^static void kp_post_handler2(struct kprobe *p, struct pt_regs *regs,$/;"	f	file:
kp_pre_handler	kernel/test_kprobes.c	/^static int kp_pre_handler(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
kp_pre_handler2	kernel/test_kprobes.c	/^static int kp_pre_handler2(struct kprobe *p, struct pt_regs *regs)$/;"	f	file:
kpfn	mm/ksm.c	/^	unsigned long kpfn;$/;"	m	struct:stable_node	file:
kprobe_addr	kernel/kprobes.c	/^static kprobe_opcode_t __kprobes *kprobe_addr(struct kprobe *p)$/;"	f	file:
kprobe_blacklist	kernel/kprobes.c	/^static struct kprobe_blackpoint kprobe_blacklist[] = {$/;"	v	typeref:struct:kprobe_blackpoint	file:
kprobe_exceptions_nb	kernel/kprobes.c	/^static struct notifier_block kprobe_exceptions_nb = {$/;"	v	typeref:struct:notifier_block	file:
kprobe_flush_task	kernel/kprobes.c	/^void __kprobes kprobe_flush_task(struct task_struct *tk)$/;"	f
kprobe_garbage_slots	kernel/kprobes.c	/^static int kprobe_garbage_slots;$/;"	v	file:
kprobe_insn_page	kernel/kprobes.c	/^struct kprobe_insn_page {$/;"	s	file:
kprobe_lookup_name	kernel/kprobes.c	62;"	d	file:
kprobe_module_nb	kernel/kprobes.c	/^static struct notifier_block kprobe_module_nb = {$/;"	v	typeref:struct:notifier_block	file:
kprobe_seq_next	kernel/kprobes.c	/^static void __kprobes *kprobe_seq_next(struct seq_file *f, void *v, loff_t *pos)$/;"	f	file:
kprobe_seq_start	kernel/kprobes.c	/^static void __kprobes *kprobe_seq_start(struct seq_file *f, loff_t *pos)$/;"	f	file:
kprobe_seq_stop	kernel/kprobes.c	/^static void __kprobes kprobe_seq_stop(struct seq_file *f, void *v)$/;"	f	file:
kprobe_slot_state	kernel/kprobes.c	/^enum kprobe_slot_state {$/;"	g	file:
kprobe_table	kernel/kprobes.c	/^static struct hlist_head kprobe_table[KPROBE_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
kprobe_target	kernel/test_kprobes.c	/^static noinline u32 kprobe_target(u32 value)$/;"	f	file:
kprobe_target2	kernel/test_kprobes.c	/^static noinline u32 kprobe_target2(u32 value)$/;"	f	file:
kprobes_all_disarmed	kernel/kprobes.c	/^static bool kprobes_all_disarmed;$/;"	v	file:
kprobes_inc_nmissed_count	kernel/kprobes.c	/^void __kprobes kprobes_inc_nmissed_count(struct kprobe *p)$/;"	f
kprobes_initialized	kernel/kprobes.c	/^static int kprobes_initialized;$/;"	v	file:
kprobes_module_callback	kernel/kprobes.c	/^static int __kprobes kprobes_module_callback(struct notifier_block *nb,$/;"	f	file:
kprobes_open	kernel/kprobes.c	/^static int __kprobes kprobes_open(struct inode *inode, struct file *filp)$/;"	f	file:
kprobes_seq_ops	kernel/kprobes.c	/^static const struct seq_operations kprobes_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
krealloc	mm/util.c	/^EXPORT_SYMBOL(krealloc);$/;"	v
krealloc	mm/util.c	/^void *krealloc(const void *p, size_t new_size, gfp_t flags)$/;"	f
kref	fs/eventfd.c	/^	struct kref kref;$/;"	m	struct:eventfd_ctx	typeref:struct:eventfd_ctx::kref	file:
kretprobe_hash_lock	kernel/kprobes.c	/^void __kprobes kretprobe_hash_lock(struct task_struct *tsk,$/;"	f
kretprobe_hash_unlock	kernel/kprobes.c	/^void __kprobes kretprobe_hash_unlock(struct task_struct *tsk,$/;"	f
kretprobe_inst_table	kernel/kprobes.c	/^static struct hlist_head kretprobe_inst_table[KPROBE_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
kretprobe_table_lock	kernel/kprobes.c	/^static void __kprobes kretprobe_table_lock(unsigned long hash,$/;"	f	file:
kretprobe_table_lock_ptr	kernel/kprobes.c	/^static spinlock_t *kretprobe_table_lock_ptr(unsigned long hash)$/;"	f	file:
kretprobe_table_locks	kernel/kprobes.c	/^} kretprobe_table_locks[KPROBE_TABLE_SIZE];$/;"	v	typeref:struct:__anon35	file:
kretprobe_table_unlock	kernel/kprobes.c	/^void __kprobes kretprobe_table_unlock(unsigned long hash, unsigned long *flags)$/;"	f
krph_val	kernel/test_kprobes.c	/^static u32 krph_val;$/;"	v	file:
ksize	mm/slab.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	mm/slab.c	/^size_t ksize(const void *objp)$/;"	f
ksize	mm/slob.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	mm/slob.c	/^size_t ksize(const void *block)$/;"	f
ksize	mm/slub.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	mm/slub.c	/^size_t ksize(const void *object)$/;"	f
ksm_attr_group	mm/ksm.c	/^static struct attribute_group ksm_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
ksm_attrs	mm/ksm.c	/^static struct attribute *ksm_attrs[] = {$/;"	v	typeref:struct:attribute	file:
ksm_check_stable_tree	mm/ksm.c	/^static struct stable_node *ksm_check_stable_tree(unsigned long start_pfn,$/;"	f	file:
ksm_do_scan	mm/ksm.c	/^static void ksm_do_scan(unsigned int scan_npages)$/;"	f	file:
ksm_does_need_to_copy	mm/ksm.c	/^struct page *ksm_does_need_to_copy(struct page *page,$/;"	f
ksm_init	mm/ksm.c	/^static int __init ksm_init(void)$/;"	f	file:
ksm_madvise	mm/ksm.c	/^int ksm_madvise(struct vm_area_struct *vma, unsigned long start,$/;"	f
ksm_memory_callback	mm/ksm.c	/^static int ksm_memory_callback(struct notifier_block *self,$/;"	f	file:
ksm_migrate_page	mm/ksm.c	/^void ksm_migrate_page(struct page *newpage, struct page *oldpage)$/;"	f
ksm_mm_head	mm/ksm.c	/^static struct mm_slot ksm_mm_head = {$/;"	v	typeref:struct:mm_slot	file:
ksm_pages_shared	mm/ksm.c	/^static unsigned long ksm_pages_shared;$/;"	v	file:
ksm_pages_sharing	mm/ksm.c	/^static unsigned long ksm_pages_sharing;$/;"	v	file:
ksm_pages_unshared	mm/ksm.c	/^static unsigned long ksm_pages_unshared;$/;"	v	file:
ksm_rmap_items	mm/ksm.c	/^static unsigned long ksm_rmap_items;$/;"	v	file:
ksm_run	mm/ksm.c	/^static unsigned int ksm_run = KSM_RUN_STOP;$/;"	v	file:
ksm_scan	mm/ksm.c	/^static struct ksm_scan ksm_scan = {$/;"	v	typeref:struct:ksm_scan	file:
ksm_scan	mm/ksm.c	/^struct ksm_scan {$/;"	s	file:
ksm_scan_thread	mm/ksm.c	/^static int ksm_scan_thread(void *nothing)$/;"	f	file:
ksm_slab_free	mm/ksm.c	/^static void __init ksm_slab_free(void)$/;"	f	file:
ksm_slab_init	mm/ksm.c	/^static int __init ksm_slab_init(void)$/;"	f	file:
ksm_test_exit	mm/ksm.c	/^static inline bool ksm_test_exit(struct mm_struct *mm)$/;"	f	file:
ksm_thread_pages_to_scan	mm/ksm.c	/^static unsigned int ksm_thread_pages_to_scan = 100;$/;"	v	file:
ksm_thread_sleep_millisecs	mm/ksm.c	/^static unsigned int ksm_thread_sleep_millisecs = 20;$/;"	v	file:
ksmd_should_run	mm/ksm.c	/^static int ksmd_should_run(void)$/;"	f	file:
kstat	kernel/sched.c	/^EXPORT_PER_CPU_SYMBOL(kstat);$/;"	v
kstrdup	mm/util.c	/^EXPORT_SYMBOL(kstrdup);$/;"	v
kstrdup	mm/util.c	/^char *kstrdup(const char *s, gfp_t gfp)$/;"	f
kstrndup	mm/util.c	/^EXPORT_SYMBOL(kstrndup);$/;"	v
kstrndup	mm/util.c	/^char *kstrndup(const char *s, size_t max, gfp_t gfp)$/;"	f
kswapd	mm/vmscan.c	/^static int kswapd(void *p)$/;"	f	file:
kswapd_init	mm/vmscan.c	/^static int __init kswapd_init(void)$/;"	f	file:
kswapd_run	mm/vmscan.c	/^int kswapd_run(int nid)$/;"	f
kswapd_stop	mm/vmscan.c	/^void kswapd_stop(int nid)$/;"	f
ksysfs_init	kernel/ksysfs.c	/^core_initcall(ksysfs_init);$/;"	v
ksysfs_init	kernel/ksysfs.c	/^static int __init ksysfs_init(void)$/;"	f	file:
kthread	kernel/kthread.c	/^static int kthread(void *_create)$/;"	f	file:
kthread	kernel/kthread.c	/^struct kthread {$/;"	s	file:
kthread_bind	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_bind);$/;"	v
kthread_bind	kernel/kthread.c	/^void kthread_bind(struct task_struct *p, unsigned int cpu)$/;"	f
kthread_create	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_create);$/;"	v
kthread_create	kernel/kthread.c	/^struct task_struct *kthread_create(int (*threadfn)(void *data),$/;"	f
kthread_create_info	kernel/kthread.c	/^struct kthread_create_info$/;"	s	file:
kthread_should_stop	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_should_stop);$/;"	v
kthread_should_stop	kernel/kthread.c	/^int kthread_should_stop(void)$/;"	f
kthread_stop	kernel/kthread.c	/^EXPORT_SYMBOL(kthread_stop);$/;"	v
kthread_stop	kernel/kthread.c	/^int kthread_stop(struct task_struct *k)$/;"	f
kthreadd	kernel/kthread.c	/^int kthreadd(void *unused)$/;"	f
kthreadd_task	kernel/kthread.c	/^struct task_struct *kthreadd_task;$/;"	v	typeref:struct:task_struct
ktime_add_ns	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(ktime_add_ns);$/;"	v
ktime_add_ns	kernel/hrtimer.c	/^ktime_t ktime_add_ns(const ktime_t kt, u64 nsec)$/;"	f
ktime_add_safe	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(ktime_add_safe);$/;"	v
ktime_add_safe	kernel/hrtimer.c	/^ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs)$/;"	f
ktime_divns	kernel/hrtimer.c	/^u64 ktime_divns(const ktime_t kt, s64 div)$/;"	f
ktime_sub_ns	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(ktime_sub_ns);$/;"	v
ktime_sub_ns	kernel/hrtimer.c	/^ktime_t ktime_sub_ns(const ktime_t kt, u64 nsec)$/;"	f
ktype_cdev_default	fs/char_dev.c	/^static struct kobj_type ktype_cdev_default = {$/;"	v	typeref:struct:kobj_type	file:
ktype_cdev_dynamic	fs/char_dev.c	/^static struct kobj_type ktype_cdev_dynamic = {$/;"	v	typeref:struct:kobj_type	file:
kunmap_high	mm/highmem.c	/^EXPORT_SYMBOL(kunmap_high);$/;"	v
kunmap_high	mm/highmem.c	/^void kunmap_high(struct page *page)$/;"	f
kzfree	mm/util.c	/^EXPORT_SYMBOL(kzfree);$/;"	v
kzfree	mm/util.c	/^void kzfree(const void *p)$/;"	f
l_len	fs/compat_ioctl.c	/^	__s64		l_len __attribute__((packed));$/;"	m	struct:space_resv_32	file:
l_next	kernel/lockdep_proc.c	/^static void *l_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
l_pad	fs/compat_ioctl.c	/^	__s32		l_pad[4];	\/* reserve area *\/$/;"	m	struct:space_resv_32	file:
l_pid	fs/compat_ioctl.c	/^	__u32		l_pid;$/;"	m	struct:space_resv_32	file:
l_show	kernel/lockdep_proc.c	/^static int l_show(struct seq_file *m, void *v)$/;"	f	file:
l_start	fs/compat_ioctl.c	/^	__s64		l_start	__attribute__((packed));$/;"	m	struct:space_resv_32	file:
l_start	kernel/lockdep_proc.c	/^static void *l_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
l_stop	kernel/lockdep_proc.c	/^static void l_stop(struct seq_file *m, void *v)$/;"	f	file:
l_sysid	fs/compat_ioctl.c	/^	__s32		l_sysid;$/;"	m	struct:space_resv_32	file:
l_type	fs/compat_ioctl.c	/^	__s16		l_type;$/;"	m	struct:space_resv_32	file:
l_whence	fs/compat_ioctl.c	/^	__s16		l_whence;$/;"	m	struct:space_resv_32	file:
laptop_io_completion	mm/page-writeback.c	/^void laptop_io_completion(void)$/;"	f
laptop_mode	mm/page-writeback.c	/^EXPORT_SYMBOL(laptop_mode);$/;"	v
laptop_mode	mm/page-writeback.c	/^int laptop_mode;$/;"	v
laptop_sync_completion	mm/page-writeback.c	/^void laptop_sync_completion(void)$/;"	f
laptop_timer_fn	mm/page-writeback.c	/^static void laptop_timer_fn(unsigned long unused)$/;"	f	file:
last	kernel/sched.c	/^	struct sched_entity *curr, *next, *last;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::	file:
last_block_in_bio	fs/mpage.c	/^	sector_t last_block_in_bio;$/;"	m	struct:mpage_data	file:
last_oom_jiffies	mm/memcontrol.c	/^	unsigned long	last_oom_jiffies;$/;"	m	struct:mem_cgroup	file:
last_pkmap_nr	mm/highmem.c	/^static unsigned int last_pkmap_nr;$/;"	v	file:
last_scanned_child	mm/memcontrol.c	/^	int last_scanned_child;$/;"	m	struct:mem_cgroup	file:
last_unloaded_module	kernel/module.c	/^static char last_unloaded_module[MODULE_NAME_LEN+1];$/;"	v	file:
last_wd	fs/notify/inotify/inotify.c	/^	u32			last_wd;	\/* the last wd allocated *\/$/;"	m	struct:inotify_handle	file:
latency_record	kernel/latencytop.c	/^static struct latency_record latency_record[MAXLR];$/;"	v	typeref:struct:latency_record	file:
latencytop_enabled	kernel/latencytop.c	/^int latencytop_enabled;$/;"	v
layout_sections	kernel/module.c	/^static void layout_sections(struct module *mod,$/;"	f	file:
layout_symtab	kernel/module.c	/^static inline unsigned long layout_symtab(struct module *mod,$/;"	f	file:
layout_symtab	kernel/module.c	/^static unsigned long layout_symtab(struct module *mod,$/;"	f	file:
lazy_max_pages	mm/vmalloc.c	/^static unsigned long lazy_max_pages(void)$/;"	f	file:
lc_next	kernel/lockdep_proc.c	/^static void *lc_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
lc_show	kernel/lockdep_proc.c	/^static int lc_show(struct seq_file *m, void *v)$/;"	f	file:
lc_start	kernel/lockdep_proc.c	/^static void *lc_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
lc_stop	kernel/lockdep_proc.c	/^static void lc_stop(struct seq_file *m, void *v)$/;"	f	file:
leader_nr_running	kernel/sched.c	/^	unsigned long leader_nr_running; \/* Nr running of group_leader *\/$/;"	m	struct:sd_lb_stats	file:
leaf_cfs_rq_list	kernel/sched.c	/^	struct list_head leaf_cfs_rq_list;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::list_head	file:
leaf_cfs_rq_list	kernel/sched.c	/^	struct list_head leaf_cfs_rq_list;$/;"	m	struct:rq	typeref:struct:rq::list_head	file:
leaf_rt_rq_list	kernel/sched.c	/^	struct list_head leaf_rt_rq_list;$/;"	m	struct:rq	typeref:struct:rq::list_head	file:
leaf_rt_rq_list	kernel/sched.c	/^	struct list_head leaf_rt_rq_list;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::list_head	file:
leaks_show	mm/slab.c	/^static int leaks_show(struct seq_file *m, void *p)$/;"	f	file:
leaks_start	mm/slab.c	/^static void *leaks_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
lease_alloc	fs/locks.c	/^static struct file_lock *lease_alloc(struct file *filp, int type)$/;"	f	file:
lease_break_callback	fs/locks.c	/^static void lease_break_callback(struct file_lock *fl)$/;"	f	file:
lease_break_time	fs/locks.c	/^int lease_break_time = 45;$/;"	v
lease_get_mtime	fs/locks.c	/^EXPORT_SYMBOL(lease_get_mtime);$/;"	v
lease_get_mtime	fs/locks.c	/^void lease_get_mtime(struct inode *inode, struct timespec *time)$/;"	f
lease_init	fs/locks.c	/^static int lease_init(struct file *filp, int type, struct file_lock *fl)$/;"	f	file:
lease_manager_ops	fs/locks.c	/^static const struct lock_manager_operations lease_manager_ops = {$/;"	v	typeref:struct:lock_manager_operations	file:
lease_modify	fs/locks.c	/^EXPORT_SYMBOL(lease_modify);$/;"	v
lease_modify	fs/locks.c	/^int lease_modify(struct file_lock **before, int arg)$/;"	f
lease_mylease_callback	fs/locks.c	/^static int lease_mylease_callback(struct file_lock *fl, struct file_lock *try)$/;"	f	file:
lease_release_private_callback	fs/locks.c	/^static void lease_release_private_callback(struct file_lock *fl)$/;"	f	file:
leases_enable	fs/locks.c	/^int leases_enable = 1;$/;"	v
least_priority	mm/swapfile.c	/^static int least_priority;$/;"	v	file:
legacy_queue	kernel/signal.c	/^static inline int legacy_queue(struct sigpending *signals, int sig)$/;"	f	file:
len	fs/compat.c	/^	compat_uint_t len;$/;"	m	struct:compat_nfs_string	file:
len	fs/compat_ioctl.c	/^	u16 len;$/;"	m	struct:i2c_msg32	file:
len	fs/compat_ioctl.c	/^	unsigned short	len;$/;"	m	struct:sock_fprog32	file:
len	fs/select.c	/^	int len;$/;"	m	struct:poll_list	file:
len	kernel/perf_event.c	/^		u64				len;$/;"	m	struct:perf_mmap_event::__anon39	file:
length	fs/compat_ioctl.c	/^	int length;$/;"	m	struct:compat_video_spu_palette	file:
length	fs/compat_ioctl.c	/^	u32			length;$/;"	m	struct:ppp_option_data32	file:
length	mm/page_cgroup.c	/^	unsigned long length;$/;"	m	struct:swap_cgroup_ctrl	file:
level	kernel/rcutree.h	/^	struct rcu_node *level[NUM_RCU_LVLS];	\/* Hierarchy levels. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_node
level	kernel/rcutree.h	/^	u8	level;		\/* root is at level 0. *\/$/;"	m	struct:rcu_node
levelcnt	kernel/rcutree.h	/^	u32 levelcnt[MAX_RCU_LVLS + 1];		\/* # nodes in each level. *\/$/;"	m	struct:rcu_state
levelspread	kernel/rcutree.h	/^	u8 levelspread[NUM_RCU_LVLS];		\/* kids\/node in each level. *\/$/;"	m	struct:rcu_state
lh	mm/highmem.c	/^	struct list_head lh;			\/* List of page_address_maps *\/$/;"	m	struct:page_address_slot	typeref:struct:page_address_slot::list_head	file:
lib_info	fs/binfmt_flat.c	/^struct lib_info {$/;"	s	file:
lib_list	fs/binfmt_flat.c	/^	} lib_list[MAX_SHARED_LIBS];$/;"	m	struct:lib_info	typeref:struct:lib_info::__anon13	file:
limit	mm/slab.c	/^	unsigned int limit;$/;"	m	struct:array_cache	file:
line	fs/compat_ioctl.c	/^        compat_int_t    line;$/;"	m	struct:serial_struct32	file:
linear_page_index	include/linux/pagemap.h	/^static inline pgoff_t linear_page_index(struct vm_area_struct *vma,$/;"	f
link	mm/hugetlb.c	/^	struct list_head link;$/;"	m	struct:file_region	typeref:struct:file_region::list_head	file:
link	mm/ksm.c	/^	struct hlist_node link;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::hlist_node	file:
link_bootmem	mm/bootmem.c	/^static void __init link_bootmem(bootmem_data_t *bdata)$/;"	f	file:
link_css_set	kernel/cgroup.c	/^static void link_css_set(struct list_head *tmp_cg_links,$/;"	f	file:
link_dev_buffers	fs/buffer.c	/^link_dev_buffers(struct page *page, struct buffer_head *head)$/;"	f	file:
link_path_walk	fs/namei.c	/^static int link_path_walk(const char *name, struct nameidata *nd)$/;"	f	file:
link_pipe	fs/splice.c	/^static int link_pipe(struct pipe_inode_info *ipipe,$/;"	f	file:
linux_dirent	fs/readdir.c	/^struct linux_dirent {$/;"	s	file:
linux_regs	kernel/kgdb.c	/^	struct pt_regs		*linux_regs;$/;"	m	struct:kgdb_state	typeref:struct:kgdb_state::pt_regs	file:
list	fs/aio.c	/^	struct hlist_node list;$/;"	m	struct:aio_batch_entry	typeref:struct:aio_batch_entry::hlist_node	file:
list	fs/binfmt_elf.c	/^	struct list_head list;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::list_head	file:
list	fs/binfmt_elf_fdpic.c	/^	struct list_head list;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::list_head	file:
list	fs/binfmt_misc.c	/^	struct list_head list;$/;"	m	struct:__anon16	typeref:struct:__anon16::list_head	file:
list	fs/block_dev.c	/^	struct list_head list;	\/* chain of holders of the bdev *\/$/;"	m	struct:bd_holder	typeref:struct:bd_holder::list_head	file:
list	fs/fs-writeback.c	/^	struct list_head list;		\/* pending work list *\/$/;"	m	struct:bdi_work	typeref:struct:bdi_work::list_head	file:
list	kernel/acct.c	/^	struct list_head	list;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::list_head	file:
list	kernel/async.c	/^	struct list_head list;$/;"	m	struct:async_entry	typeref:struct:async_entry::list_head	file:
list	kernel/audit.c	/^	struct list_head     list;$/;"	m	struct:audit_buffer	typeref:struct:audit_buffer::list_head	file:
list	kernel/audit.h	/^	struct list_head	list;$/;"	m	struct:audit_entry	typeref:struct:audit_entry::list_head
list	kernel/audit_tree.c	/^		struct list_head list;$/;"	m	struct:audit_chunk::node	typeref:struct:audit_chunk::node::list_head	file:
list	kernel/audit_tree.c	/^	struct list_head list;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
list	kernel/futex.c	/^	struct list_head list;$/;"	m	struct:futex_pi_state	typeref:struct:futex_pi_state::list_head	file:
list	kernel/futex.c	/^	struct plist_node list;$/;"	m	struct:futex_q	typeref:struct:futex_q::plist_node	file:
list	kernel/kprobes.c	/^	struct list_head list;$/;"	m	struct:kprobe_insn_page	typeref:struct:kprobe_insn_page::list_head	file:
list	kernel/kthread.c	/^	struct list_head list;$/;"	m	struct:kthread_create_info	typeref:struct:kthread_create_info::list_head	file:
list	kernel/module.c	/^	struct list_head list;$/;"	m	struct:module_use	typeref:struct:module_use::list_head	file:
list	kernel/pid_namespace.c	/^	struct list_head list;$/;"	m	struct:pid_cache	typeref:struct:pid_cache::list_head	file:
list	kernel/pm_qos_params.c	/^	struct list_head list;$/;"	m	struct:requirement_list	typeref:struct:requirement_list::list_head	file:
list	kernel/sched.c	/^	struct list_head list;$/;"	m	struct:migration_req	typeref:struct:migration_req::list_head	file:
list	kernel/sched.c	/^	struct list_head list;$/;"	m	struct:task_group	typeref:struct:task_group::list_head	file:
list	kernel/semaphore.c	/^	struct list_head list;$/;"	m	struct:semaphore_waiter	typeref:struct:semaphore_waiter::list_head	file:
list	kernel/smp.c	/^	struct list_head	list;$/;"	m	struct:call_single_queue	typeref:struct:call_single_queue::list_head	file:
list	kernel/taskstats.c	/^	struct list_head list;$/;"	m	struct:listener	typeref:struct:listener::list_head	file:
list	kernel/taskstats.c	/^	struct list_head list;$/;"	m	struct:listener_list	typeref:struct:listener_list::list_head	file:
list	kernel/tracepoint.c	/^		struct list_head list;$/;"	m	union:tp_probes::__anon47	typeref:struct:tp_probes::__anon47::list_head	file:
list	kernel/workqueue.c	/^	struct list_head list;$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::list_head	file:
list	lib/rwsem-spinlock.c	/^	struct list_head list;$/;"	m	struct:rwsem_waiter	typeref:struct:rwsem_waiter::list_head	file:
list	mm/highmem.c	/^	struct list_head list;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::list_head	file:
list	mm/kmemleak-test.c	/^	struct list_head list;$/;"	m	struct:test_node	typeref:struct:test_node::list_head	file:
list	mm/percpu.c	/^	struct list_head	list;		\/* linked to pcpu_slot lists *\/$/;"	m	struct:pcpu_chunk	typeref:struct:pcpu_chunk::list_head	file:
list	mm/slab.c	/^	struct list_head list;$/;"	m	struct:slab	typeref:struct:slab::list_head	file:
list	mm/slob.c	/^			struct list_head list;	\/* linked list of free pages *\/$/;"	m	struct:slob_page::__anon8::__anon9	typeref:struct:slob_page::__anon8::__anon9::list_head	file:
list	mm/vmalloc.c	/^	struct list_head list;		\/* address sorted list *\/$/;"	m	struct:vmap_area	typeref:struct:vmap_area::list_head	file:
list_add	include/linux/list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_event	kernel/perf_event.c	/^list_add_event(struct perf_event *event, struct perf_event_context *ctx)$/;"	f	file:
list_add_tail	include/linux/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	include/linux/list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	include/linux/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_event	kernel/perf_event.c	/^list_del_event(struct perf_event *event, struct perf_event_context *ctx)$/;"	f	file:
list_del_init	include/linux/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	include/linux/list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	include/linux/list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entries	kernel/lockdep.c	/^static struct lock_list list_entries[MAX_LOCKDEP_ENTRIES];$/;"	v	typeref:struct:lock_list	file:
list_entry	include/linux/list.h	334;"	d
list_entry	kernel/rtmutex_common.h	/^	struct plist_node	list_entry;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::plist_node
list_first_entry	include/linux/list.h	345;"	d
list_for_each	include/linux/list.h	353;"	d
list_for_each_entry	include/linux/list.h	406;"	d
list_for_each_entry_continue	include/linux/list.h	442;"	d
list_for_each_entry_continue_reverse	include/linux/list.h	456;"	d
list_for_each_entry_from	include/linux/list.h	469;"	d
list_for_each_entry_reverse	include/linux/list.h	417;"	d
list_for_each_entry_safe	include/linux/list.h	480;"	d
list_for_each_entry_safe_continue	include/linux/list.h	496;"	d
list_for_each_entry_safe_from	include/linux/list.h	512;"	d
list_for_each_entry_safe_reverse	include/linux/list.h	527;"	d
list_for_each_prev	include/linux/list.h	375;"	d
list_for_each_prev_safe	include/linux/list.h	395;"	d
list_for_each_safe	include/linux/list.h	385;"	d
list_head	include/linux/list.h	/^struct list_head {$/;"	s
list_is_last	include/linux/list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	include/linux/list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_locations	mm/slub.c	/^static int list_locations(struct kmem_cache *s, char *buf,$/;"	f	file:
list_lock	mm/slab.c	/^	spinlock_t list_lock;$/;"	m	struct:kmem_list3	file:
list_move	include/linux/list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	include/linux/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_next_entry	kernel/perf_event.c	1132;"	d	file:
list_prepare_entry	include/linux/list.h	430;"	d
list_replace	include/linux/list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	include/linux/list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_slab_objects	mm/slub.c	/^static void list_slab_objects(struct kmem_cache *s, struct page *page,$/;"	f	file:
list_splice	include/linux/list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	include/linux/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	include/linux/list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	include/linux/list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
list_to_page	mm/readahead.c	32;"	d	file:
listener	kernel/taskstats.c	/^struct listener {$/;"	s	file:
listener_list	kernel/taskstats.c	/^struct listener_list {$/;"	s	file:
lists	mm/memcontrol.c	/^	struct list_head	lists[NR_LRU_LISTS];$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::list_head	file:
listxattr	fs/xattr.c	/^listxattr(struct dentry *d, char __user *list, size_t size)$/;"	f	file:
ll_rw_block	fs/buffer.c	/^EXPORT_SYMBOL(ll_rw_block);$/;"	v
ll_rw_block	fs/buffer.c	/^void ll_rw_block(int rw, int nr, struct buffer_head *bhs[])$/;"	f
llink	fs/eventpoll.c	/^	struct list_head llink;$/;"	m	struct:eppoll_entry	typeref:struct:eppoll_entry::list_head	file:
llink	fs/eventpoll.c	/^	struct list_head llink;$/;"	m	struct:nested_call_node	typeref:struct:nested_call_node::list_head	file:
load	kernel/sched.c	/^	struct load_weight load;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::load_weight	file:
load	kernel/sched.c	/^	struct load_weight load;$/;"	m	struct:rq	typeref:struct:rq::load_weight	file:
load_aout_binary	fs/binfmt_aout.c	/^static int load_aout_binary(struct linux_binprm * bprm, struct pt_regs * regs)$/;"	f	file:
load_aout_library	fs/binfmt_aout.c	/^static int load_aout_library(struct file *file)$/;"	f	file:
load_balance	kernel/sched.c	/^static int load_balance(int this_cpu, struct rq *this_rq,$/;"	f	file:
load_balance_fair	kernel/sched_fair.c	/^load_balance_fair(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
load_balance_idle	kernel/sched_idletask.c	/^load_balance_idle(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
load_balance_newidle	kernel/sched.c	/^load_balance_newidle(int this_cpu, struct rq *this_rq, struct sched_domain *sd)$/;"	f	file:
load_balance_next_fair	kernel/sched_fair.c	/^static struct task_struct *load_balance_next_fair(void *arg)$/;"	f	file:
load_balance_rt	kernel/sched_rt.c	/^load_balance_rt(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
load_balance_start_fair	kernel/sched_fair.c	/^static struct task_struct *load_balance_start_fair(void *arg)$/;"	f	file:
load_balancer	kernel/sched.c	/^	atomic_t load_balancer;$/;"	m	struct:__anon44	file:
load_elf_binary	fs/binfmt_elf.c	/^static int load_elf_binary(struct linux_binprm *bprm, struct pt_regs *regs)$/;"	f	file:
load_elf_fdpic_binary	fs/binfmt_elf_fdpic.c	/^static int load_elf_fdpic_binary(struct linux_binprm *bprm,$/;"	f	file:
load_elf_interp	fs/binfmt_elf.c	/^static unsigned long load_elf_interp(struct elfhdr *interp_elf_ex,$/;"	f	file:
load_elf_library	fs/binfmt_elf.c	/^static int load_elf_library(struct file *file)$/;"	f	file:
load_em86	fs/binfmt_em86.c	/^static int load_em86(struct linux_binprm *bprm,struct pt_regs *regs)$/;"	f	file:
load_flat_binary	fs/binfmt_flat.c	/^static int load_flat_binary(struct linux_binprm * bprm, struct pt_regs * regs)$/;"	f	file:
load_flat_file	fs/binfmt_flat.c	/^static int load_flat_file(struct linux_binprm * bprm,$/;"	f	file:
load_flat_shared_library	fs/binfmt_flat.c	/^static int load_flat_shared_library(int id, struct lib_info *libs)$/;"	f	file:
load_misc_binary	fs/binfmt_misc.c	/^static int load_misc_binary(struct linux_binprm *bprm, struct pt_regs *regs)$/;"	f	file:
load_module	kernel/module.c	/^static noinline struct module *load_module(void __user *umod,$/;"	f	file:
load_script	fs/binfmt_script.c	/^static int load_script(struct linux_binprm *bprm,struct pt_regs *regs)$/;"	f	file:
load_som_binary	fs/binfmt_som.c	/^load_som_binary(struct linux_binprm * bprm, struct pt_regs * regs)$/;"	f	file:
load_som_library	fs/binfmt_som.c	/^static int load_som_library(struct file *f)$/;"	f	file:
loaded	fs/binfmt_flat.c	/^		short loaded;				\/* Has this library been loaded? *\/$/;"	m	struct:lib_info::__anon13	file:
loads	kernel/compat.c	/^	u32 loads[3];$/;"	m	struct:compat_sysinfo	file:
loc	mm/slub.c	/^	struct location *loc;$/;"	m	struct:loc_track	typeref:struct:loc_track::location	file:
loc_track	mm/slub.c	/^struct loc_track {$/;"	s	file:
local_bh_disable	kernel/softirq.c	/^EXPORT_SYMBOL(local_bh_disable);$/;"	v
local_bh_disable	kernel/softirq.c	/^void local_bh_disable(void)$/;"	f
local_bh_enable	kernel/softirq.c	/^EXPORT_SYMBOL(local_bh_enable);$/;"	v
local_bh_enable	kernel/softirq.c	/^void local_bh_enable(void)$/;"	f
local_bh_enable_ip	kernel/softirq.c	/^EXPORT_SYMBOL(local_bh_enable_ip);$/;"	v
local_bh_enable_ip	kernel/softirq.c	/^void local_bh_enable_ip(unsigned long ip)$/;"	f
local_name	mm/memcontrol.c	/^	char *local_name;$/;"	m	struct:__anon6	file:
location	mm/slub.c	/^struct location {$/;"	s	file:
lock	fs/eventpoll.c	/^	spinlock_t lock;$/;"	m	struct:eventpoll	file:
lock	fs/eventpoll.c	/^	spinlock_t lock;$/;"	m	struct:nested_calls	file:
lock	fs/file.c	/^	spinlock_t lock;$/;"	m	struct:fdtable_defer	file:
lock	kernel/cgroup_freezer.c	/^	spinlock_t lock; \/* protects _writes_ to state *\/$/;"	m	struct:freezer	file:
lock	kernel/cpu.c	/^	struct mutex lock; \/* Synchronizes accesses to refcount, *\/$/;"	m	struct:__anon32	typeref:struct:__anon32::mutex	file:
lock	kernel/cpuset.c	/^	spinlock_t lock;	\/* guards read or write of above *\/$/;"	m	struct:fmeter	file:
lock	kernel/dma.c	/^	int  lock;$/;"	m	struct:dma_chan	file:
lock	kernel/futex.c	/^	spinlock_t lock;$/;"	m	struct:futex_hash_bucket	file:
lock	kernel/rcutree.h	/^	spinlock_t lock;	\/* Root rcu_node's lock protects some *\/$/;"	m	struct:rcu_node
lock	kernel/rtmutex_common.h	/^	struct rt_mutex		*lock;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::rt_mutex
lock	kernel/sched.c	/^	raw_spinlock_t lock;$/;"	m	struct:rq	file:
lock	kernel/sched_cpupri.h	/^	raw_spinlock_t lock;$/;"	m	struct:cpupri_vec
lock	kernel/smp.c	/^	raw_spinlock_t		lock;$/;"	m	struct:__anon45	file:
lock	kernel/smp.c	/^	raw_spinlock_t		lock;$/;"	m	struct:call_single_queue	file:
lock	kernel/timer.c	/^	spinlock_t lock;$/;"	m	struct:tvec_base	file:
lock	kernel/workqueue.c	/^	spinlock_t lock;$/;"	m	struct:cpu_workqueue_struct	file:
lock	mm/dmapool.c	/^	spinlock_t lock;$/;"	m	struct:dma_pool	file:
lock	mm/highmem.c	/^	spinlock_t lock;			\/* Protect this bucket's list *\/$/;"	m	struct:page_address_slot	file:
lock	mm/kmemleak.c	/^	spinlock_t lock;$/;"	m	struct:kmemleak_object	file:
lock	mm/memcontrol.c	/^	spinlock_t lock;$/;"	m	struct:mem_cgroup_tree_per_zone	file:
lock	mm/slab.c	/^	spinlock_t lock;$/;"	m	struct:array_cache	file:
lock	mm/vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block	file:
lock	mm/vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block_queue	file:
lock_accessed	kernel/lockdep.c	/^static inline unsigned long lock_accessed(struct lock_list *lock)$/;"	f	file:
lock_acquire	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_acquire);$/;"	v
lock_acquire	kernel/lockdep.c	/^void lock_acquire(struct lockdep_map *lock, unsigned int subclass,$/;"	f
lock_acquired	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_acquired);$/;"	v
lock_acquired	kernel/lockdep.c	/^void lock_acquired(struct lockdep_map *lock, unsigned long ip)$/;"	f
lock_and_freeze_slab	mm/slub.c	/^static inline int lock_and_freeze_slab(struct kmem_cache_node *n,$/;"	f	file:
lock_chain_get_class	kernel/lockdep.c	/^struct lock_class *lock_chain_get_class(struct lock_chain *chain, int i)$/;"	f
lock_chains	kernel/lockdep.c	/^struct lock_chain lock_chains[MAX_LOCKDEP_CHAINS];$/;"	v	typeref:struct:lock_chain
lock_classes	kernel/lockdep.c	/^static struct lock_class lock_classes[MAX_LOCKDEP_KEYS];$/;"	v	typeref:struct:lock_class	file:
lock_contended	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_contended);$/;"	v
lock_contended	kernel/lockdep.c	/^void lock_contended(struct lockdep_map *lock, unsigned long ip)$/;"	f
lock_cq	kernel/lockdep.c	/^static struct circular_queue lock_cq;$/;"	v	typeref:struct:circular_queue	file:
lock_flag	kernel/lockdep.c	/^static inline unsigned long lock_flag(enum lock_usage_bit bit)$/;"	f	file:
lock_get_status	fs/locks.c	/^static void lock_get_status(struct seq_file *f, struct file_lock *fl,$/;"	f	file:
lock_hrtimer_base	kernel/hrtimer.c	/^lock_hrtimer_base(const struct hrtimer *timer, unsigned long *flags)$/;"	f	file:
lock_hrtimer_base	kernel/hrtimer.c	/^struct hrtimer_clock_base *lock_hrtimer_base(const struct hrtimer *timer,$/;"	f	file:
lock_is_held	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_is_held);$/;"	v
lock_is_held	kernel/lockdep.c	/^int lock_is_held(struct lockdep_map *lock)$/;"	f
lock_kmap	mm/highmem.c	75;"	d	file:
lock_kmap	mm/highmem.c	80;"	d	file:
lock_kmap_any	mm/highmem.c	77;"	d	file:
lock_kmap_any	mm/highmem.c	82;"	d	file:
lock_may_read	fs/locks.c	/^EXPORT_SYMBOL(lock_may_read);$/;"	v
lock_may_read	fs/locks.c	/^int lock_may_read(struct inode *inode, loff_t start, unsigned long len)$/;"	f
lock_may_write	fs/locks.c	/^EXPORT_SYMBOL(lock_may_write);$/;"	v
lock_may_write	fs/locks.c	/^int lock_may_write(struct inode *inode, loff_t start, unsigned long len)$/;"	f
lock_page	include/linux/pagemap.h	/^static inline void lock_page(struct page *page)$/;"	f
lock_page_killable	include/linux/pagemap.h	/^static inline int lock_page_killable(struct page *page)$/;"	f
lock_page_nosync	include/linux/pagemap.h	/^static inline void lock_page_nosync(struct page *page)$/;"	f
lock_point	kernel/lockdep.c	/^static int lock_point(unsigned long points[], unsigned long ip)$/;"	f	file:
lock_ptr	kernel/futex.c	/^	spinlock_t *lock_ptr;$/;"	m	struct:futex_q	file:
lock_release	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_release);$/;"	v
lock_release	kernel/lockdep.c	/^void lock_release(struct lockdep_map *lock, int nested,$/;"	f
lock_release_holdtime	kernel/lockdep.c	/^static inline void lock_release_holdtime(struct held_lock *hlock)$/;"	f	file:
lock_release_holdtime	kernel/lockdep.c	/^static void lock_release_holdtime(struct held_lock *hlock)$/;"	f	file:
lock_release_nested	kernel/lockdep.c	/^static int lock_release_nested(struct task_struct *curr,$/;"	f	file:
lock_release_non_nested	kernel/lockdep.c	/^lock_release_non_nested(struct task_struct *curr,$/;"	f	file:
lock_rename	fs/namei.c	/^EXPORT_SYMBOL(lock_rename);$/;"	v
lock_rename	fs/namei.c	/^struct dentry *lock_rename(struct dentry *p1, struct dentry *p2)$/;"	f
lock_set_class	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lock_set_class);$/;"	v
lock_set_class	kernel/lockdep.c	/^void lock_set_class(struct lockdep_map *lock, const char *name,$/;"	f
lock_stat	kernel/lockdep.c	/^int lock_stat = 1;$/;"	v
lock_stat	kernel/lockdep.c	65;"	d	file:
lock_stat_cmp	kernel/lockdep_proc.c	/^static int lock_stat_cmp(const void *l, const void *r)$/;"	f	file:
lock_stat_data	kernel/lockdep_proc.c	/^struct lock_stat_data {$/;"	s	file:
lock_stat_open	kernel/lockdep_proc.c	/^static int lock_stat_open(struct inode *inode, struct file *file)$/;"	f	file:
lock_stat_release	kernel/lockdep_proc.c	/^static int lock_stat_release(struct inode *inode, struct file *file)$/;"	f	file:
lock_stat_seq	kernel/lockdep_proc.c	/^struct lock_stat_seq {$/;"	s	file:
lock_stat_write	kernel/lockdep_proc.c	/^static ssize_t lock_stat_write(struct file *file, const char __user *buf,$/;"	f	file:
lock_stats	kernel/lockdep.c	/^struct lock_class_stats lock_stats(struct lock_class *class)$/;"	f
lock_super	fs/super.c	/^EXPORT_SYMBOL(lock_super);$/;"	v
lock_super	fs/super.c	/^void lock_super(struct super_block * sb)$/;"	f
lock_task_sighand	kernel/signal.c	/^struct sighand_struct *lock_task_sighand(struct task_struct *tsk, unsigned long *flags)$/;"	f
lock_time_add	kernel/lockdep.c	/^static inline void lock_time_add(struct lock_time *src, struct lock_time *dst)$/;"	f	file:
lock_time_inc	kernel/lockdep.c	/^static void lock_time_inc(struct lock_time *lt, u64 time)$/;"	f	file:
lock_timer	kernel/posix-timers.c	/^static struct k_itimer *lock_timer(timer_t timer_id, unsigned long *flags)$/;"	f	file:
lock_usage_bit	kernel/lockdep_internals.h	/^enum lock_usage_bit {$/;"	g
lockdep_chains_open	kernel/lockdep_proc.c	/^static int lockdep_chains_open(struct inode *inode, struct file *file)$/;"	f	file:
lockdep_chains_ops	kernel/lockdep_proc.c	/^static const struct seq_operations lockdep_chains_ops = {$/;"	v	typeref:struct:seq_operations	file:
lockdep_clear_current_reclaim_state	kernel/lockdep.c	/^void lockdep_clear_current_reclaim_state(void)$/;"	f
lockdep_count_backward_deps	kernel/lockdep.c	/^unsigned long lockdep_count_backward_deps(struct lock_class *class)$/;"	f
lockdep_count_backward_deps	kernel/lockdep_internals.h	/^lockdep_count_backward_deps(struct lock_class *class)$/;"	f
lockdep_count_forward_deps	kernel/lockdep.c	/^unsigned long lockdep_count_forward_deps(struct lock_class *class)$/;"	f
lockdep_count_forward_deps	kernel/lockdep_internals.h	/^lockdep_count_forward_deps(struct lock_class *class)$/;"	f
lockdep_dependency_gen_id	kernel/lockdep.c	/^static unsigned int lockdep_dependency_gen_id;$/;"	v	file:
lockdep_free_key_range	kernel/lockdep.c	/^void lockdep_free_key_range(void *start, unsigned long size)$/;"	f
lockdep_info	kernel/lockdep.c	/^void __init lockdep_info(void)$/;"	f
lockdep_init	kernel/lockdep.c	/^void lockdep_init(void)$/;"	f
lockdep_init_error	kernel/lockdep.c	/^static int lockdep_init_error;$/;"	v	file:
lockdep_init_map	kernel/lockdep.c	/^EXPORT_SYMBOL_GPL(lockdep_init_map);$/;"	v
lockdep_init_map	kernel/lockdep.c	/^void lockdep_init_map(struct lockdep_map *lock, const char *name,$/;"	f
lockdep_init_trace	kernel/lockdep.c	/^static struct stack_trace lockdep_init_trace = {$/;"	v	typeref:struct:stack_trace	file:
lockdep_init_trace_data	kernel/lockdep.c	/^static unsigned long lockdep_init_trace_data[20];$/;"	v	file:
lockdep_initialized	kernel/lockdep.c	/^static int lockdep_initialized;$/;"	v	file:
lockdep_lock	kernel/lockdep.c	/^static arch_spinlock_t lockdep_lock = (arch_spinlock_t)__ARCH_SPIN_LOCK_UNLOCKED;$/;"	v	file:
lockdep_map	kernel/workqueue.c	/^	struct lockdep_map lockdep_map;$/;"	m	struct:workqueue_struct	typeref:struct:workqueue_struct::lockdep_map	file:
lockdep_off	kernel/lockdep.c	/^EXPORT_SYMBOL(lockdep_off);$/;"	v
lockdep_off	kernel/lockdep.c	/^void lockdep_off(void)$/;"	f
lockdep_on	kernel/lockdep.c	/^EXPORT_SYMBOL(lockdep_on);$/;"	v
lockdep_on	kernel/lockdep.c	/^void lockdep_on(void)$/;"	f
lockdep_open	kernel/lockdep_proc.c	/^static int lockdep_open(struct inode *inode, struct file *file)$/;"	f	file:
lockdep_ops	kernel/lockdep_proc.c	/^static const struct seq_operations lockdep_ops = {$/;"	v	typeref:struct:seq_operations	file:
lockdep_print_held_locks	kernel/lockdep.c	/^static void lockdep_print_held_locks(struct task_struct *curr)$/;"	f	file:
lockdep_proc_init	kernel/lockdep_proc.c	/^__initcall(lockdep_proc_init);$/;"	v
lockdep_proc_init	kernel/lockdep_proc.c	/^static int __init lockdep_proc_init(void)$/;"	f	file:
lockdep_reset	kernel/lockdep.c	/^void lockdep_reset(void)$/;"	f
lockdep_reset_lock	kernel/lockdep.c	/^void lockdep_reset_lock(struct lockdep_map *lock)$/;"	f
lockdep_set_current_reclaim_state	kernel/lockdep.c	/^void lockdep_set_current_reclaim_state(gfp_t gfp_mask)$/;"	f
lockdep_stats_debug_show	kernel/lockdep_proc.c	/^static void lockdep_stats_debug_show(struct seq_file *m)$/;"	f	file:
lockdep_stats_open	kernel/lockdep_proc.c	/^static int lockdep_stats_open(struct inode *inode, struct file *file)$/;"	f	file:
lockdep_stats_show	kernel/lockdep_proc.c	/^static int lockdep_stats_show(struct seq_file *m, void *v)$/;"	f	file:
lockdep_sys_exit	kernel/lockdep.c	/^void lockdep_sys_exit(void)$/;"	f
lockdep_trace_alloc	kernel/lockdep.c	/^void lockdep_trace_alloc(gfp_t gfp_mask)$/;"	f
locks_alloc_lock	fs/locks.c	/^static struct file_lock *locks_alloc_lock(void)$/;"	f	file:
locks_conflict	fs/locks.c	/^static int locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)$/;"	f	file:
locks_copy_lock	fs/locks.c	/^EXPORT_SYMBOL(locks_copy_lock);$/;"	v
locks_copy_lock	fs/locks.c	/^void locks_copy_lock(struct file_lock *new, struct file_lock *fl)$/;"	f
locks_copy_private	fs/locks.c	/^static void locks_copy_private(struct file_lock *new, struct file_lock *fl)$/;"	f	file:
locks_delete_block	fs/locks.c	/^static void locks_delete_block(struct file_lock *waiter)$/;"	f	file:
locks_delete_lock	fs/locks.c	/^static void locks_delete_lock(struct file_lock **thisfl_p)$/;"	f	file:
locks_free_lock	fs/locks.c	/^static void locks_free_lock(struct file_lock *fl)$/;"	f	file:
locks_init_lock	fs/locks.c	/^EXPORT_SYMBOL(locks_init_lock);$/;"	v
locks_init_lock	fs/locks.c	/^void locks_init_lock(struct file_lock *fl)$/;"	f
locks_insert_block	fs/locks.c	/^static void locks_insert_block(struct file_lock *blocker, $/;"	f	file:
locks_insert_lock	fs/locks.c	/^static void locks_insert_lock(struct file_lock **pos, struct file_lock *fl)$/;"	f	file:
locks_mandatory_area	fs/locks.c	/^EXPORT_SYMBOL(locks_mandatory_area);$/;"	v
locks_mandatory_area	fs/locks.c	/^int locks_mandatory_area(int read_write, struct inode *inode,$/;"	f
locks_mandatory_locked	fs/locks.c	/^int locks_mandatory_locked(struct inode *inode)$/;"	f
locks_next	fs/locks.c	/^static void *locks_next(struct seq_file *f, void *v, loff_t *pos)$/;"	f	file:
locks_open	fs/locks.c	/^static int locks_open(struct inode *inode, struct file *filp)$/;"	f	file:
locks_overlap	fs/locks.c	/^static inline int locks_overlap(struct file_lock *fl1, struct file_lock *fl2)$/;"	f	file:
locks_release_private	fs/locks.c	/^EXPORT_SYMBOL_GPL(locks_release_private);$/;"	v
locks_release_private	fs/locks.c	/^void locks_release_private(struct file_lock *fl)$/;"	f
locks_remove_flock	fs/locks.c	/^void locks_remove_flock(struct file *filp)$/;"	f
locks_remove_posix	fs/locks.c	/^EXPORT_SYMBOL(locks_remove_posix);$/;"	v
locks_remove_posix	fs/locks.c	/^void locks_remove_posix(struct file *filp, fl_owner_t owner)$/;"	f
locks_seq_operations	fs/locks.c	/^static const struct seq_operations locks_seq_operations = {$/;"	v	typeref:struct:seq_operations	file:
locks_show	fs/locks.c	/^static int locks_show(struct seq_file *f, void *v)$/;"	f	file:
locks_start	fs/locks.c	/^static void *locks_start(struct seq_file *f, loff_t *pos)$/;"	f	file:
locks_stop	fs/locks.c	/^static void locks_stop(struct seq_file *f, void *v)$/;"	f	file:
locks_wake_up_blocks	fs/locks.c	/^static void locks_wake_up_blocks(struct file_lock *blocker)$/;"	f	file:
lockstat_clock	kernel/lockdep.c	/^static inline u64 lockstat_clock(void)$/;"	f	file:
lockstat_ops	kernel/lockdep_proc.c	/^static const struct seq_operations lockstat_ops = {$/;"	v	typeref:struct:seq_operations	file:
log_buf	kernel/printk.c	/^static char *log_buf = __log_buf;$/;"	v	file:
log_buf_kexec_setup	kernel/printk.c	/^void log_buf_kexec_setup(void)$/;"	f
log_buf_len	kernel/printk.c	/^static int log_buf_len = __LOG_BUF_LEN;$/;"	v	file:
log_buf_len_setup	kernel/printk.c	/^static int __init log_buf_len_setup(char *str)$/;"	f	file:
log_early	mm/kmemleak.c	/^static void __init log_early(int op_type, const void *ptr, size_t size,$/;"	f	file:
log_end	kernel/printk.c	/^static unsigned log_end;	\/* Index into log_buf: most-recently-written-char + 1 *\/$/;"	v	file:
log_start	kernel/printk.c	/^static unsigned log_start;	\/* Index into log_buf: next char to be read by syslog() *\/$/;"	v	file:
log_wait	kernel/printk.c	/^DECLARE_WAIT_QUEUE_HEAD(log_wait);$/;"	v
logged_chars	kernel/printk.c	/^static unsigned logged_chars; \/* Number of chars produced since last read+clear operation *\/$/;"	v	file:
logical_to_blk	fs/ioctl.c	232;"	d	file:
look_up_lock_class	kernel/lockdep.c	/^look_up_lock_class(struct lockdep_map *lock, unsigned int subclass)$/;"	f	file:
lookup_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(lookup_bdev);$/;"	v
lookup_bdev	fs/block_dev.c	/^struct block_device *lookup_bdev(const char *pathname)$/;"	f
lookup_bh_lru	fs/buffer.c	/^lookup_bh_lru(struct block_device *bdev, sector_t block, unsigned size)$/;"	f	file:
lookup_chain_cache	kernel/lockdep.c	/^static inline int lookup_chain_cache(struct task_struct *curr,$/;"	f	file:
lookup_create	fs/namei.c	/^EXPORT_SYMBOL_GPL(lookup_create);$/;"	v
lookup_create	fs/namei.c	/^struct dentry *lookup_create(struct nameidata *nd, int is_dir)$/;"	f
lookup_dcookie	fs/dcookies.c	/^SYSCALL_DEFINE(lookup_dcookie)(u64 cookie64, char __user * buf, size_t len)$/;"	f
lookup_exec_domain	kernel/exec_domain.c	/^lookup_exec_domain(u_long personality)$/;"	f	file:
lookup_flags	fs/namei.c	/^static inline int lookup_flags(unsigned int f)$/;"	f	file:
lookup_hash	fs/namei.c	/^static struct dentry *lookup_hash(struct nameidata *nd)$/;"	f	file:
lookup_header_list	kernel/sysctl.c	/^lookup_header_list(struct ctl_table_root *root, struct nsproxy *namespaces)$/;"	f	file:
lookup_header_set	kernel/sysctl.c	/^lookup_header_set(struct ctl_table_root *root, struct nsproxy *namespaces)$/;"	f	file:
lookup_instantiate_filp	fs/open.c	/^EXPORT_SYMBOL_GPL(lookup_instantiate_filp);$/;"	v
lookup_instantiate_filp	fs/open.c	/^struct file *lookup_instantiate_filp(struct nameidata *nd, struct dentry *dentry,$/;"	f
lookup_ioctx	fs/aio.c	/^static struct kioctx *lookup_ioctx(unsigned long ctx_id)$/;"	f	file:
lookup_kiocb	fs/aio.c	/^static struct kiocb *lookup_kiocb(struct kioctx *ctx, struct iocb __user *iocb,$/;"	f	file:
lookup_mnt	fs/namespace.c	/^struct vfsmount *lookup_mnt(struct path *path)$/;"	f
lookup_module_symbol_attrs	kernel/module.c	/^int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size,$/;"	f
lookup_module_symbol_name	kernel/module.c	/^int lookup_module_symbol_name(unsigned long addr, char *symname)$/;"	f
lookup_node	mm/mempolicy.c	/^static int lookup_node(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
lookup_object	mm/kmemleak.c	/^static struct kmemleak_object *lookup_object(unsigned long ptr, int alias)$/;"	f	file:
lookup_one_len	fs/namei.c	/^EXPORT_SYMBOL(lookup_one_len);$/;"	v
lookup_one_len	fs/namei.c	/^struct dentry *lookup_one_len(const char *name, struct dentry *base, int len)$/;"	f
lookup_page_cgroup	mm/page_cgroup.c	/^struct page_cgroup *lookup_page_cgroup(struct page *page)$/;"	f
lookup_pi_state	kernel/futex.c	/^lookup_pi_state(u32 uval, struct futex_hash_bucket *hb,$/;"	f	file:
lookup_swap_cache	mm/swap_state.c	/^struct page * lookup_swap_cache(swp_entry_t entry)$/;"	f
lookup_swap_cgroup	mm/page_cgroup.c	/^unsigned short lookup_swap_cgroup(swp_entry_t ent)$/;"	f
lookup_symbol	kernel/module.c	/^static const struct kernel_symbol *lookup_symbol(const char *name,$/;"	f	file:
lookup_symbol_attrs	kernel/kallsyms.c	/^int lookup_symbol_attrs(unsigned long addr, unsigned long *size,$/;"	f
lookup_symbol_name	kernel/kallsyms.c	/^int lookup_symbol_name(unsigned long addr, char *symname)$/;"	f
loops_per_msec	kernel/printk.c	/^static unsigned long long loops_per_msec;	\/* based on boot_delay *\/$/;"	v	file:
lowest_flag_domain	kernel/sched.c	/^static inline struct sched_domain *lowest_flag_domain(int cpu, int flag)$/;"	f	file:
lowest_in_progress	kernel/async.c	/^static async_cookie_t  lowest_in_progress(struct list_head *running)$/;"	f	file:
lowmem_reserve_ratio_sysctl_handler	mm/page_alloc.c	/^int lowmem_reserve_ratio_sysctl_handler(ctl_table *table, int write,$/;"	f
lru	mm/memory-failure.c	719;"	d	file:
lru	mm/memory-failure.c	776;"	d	file:
lru_add_drain	mm/swap.c	/^void lru_add_drain(void)$/;"	f
lru_add_drain_all	mm/swap.c	/^int lru_add_drain_all(void)$/;"	f
lru_add_drain_per_cpu	mm/swap.c	/^static void lru_add_drain_per_cpu(struct work_struct *dummy)$/;"	f	file:
lru_cache_add_lru	mm/swap.c	/^void lru_cache_add_lru(struct page *page, enum lru_list lru)$/;"	f
lru_to_page	mm/migrate.c	38;"	d	file:
lru_to_page	mm/vmscan.c	96;"	d	file:
ls_next	kernel/lockdep_proc.c	/^static void *ls_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
ls_show	kernel/lockdep_proc.c	/^static int ls_show(struct seq_file *m, void *v)$/;"	f	file:
ls_start	kernel/lockdep_proc.c	/^static void *ls_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
ls_stop	kernel/lockdep_proc.c	/^static void ls_stop(struct seq_file *m, void *v)$/;"	f	file:
lstats_fops	kernel/latencytop.c	/^static const struct file_operations lstats_fops = {$/;"	v	typeref:struct:file_operations	file:
lstats_open	kernel/latencytop.c	/^static int lstats_open(struct inode *inode, struct file *filp)$/;"	f	file:
lstats_show	kernel/latencytop.c	/^static int lstats_show(struct seq_file *m, void *v)$/;"	f	file:
lstats_write	kernel/latencytop.c	/^lstats_write(struct file *file, const char __user *buf, size_t count,$/;"	f	file:
m_next	fs/namespace.c	/^static void *m_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
m_next	kernel/module.c	/^static void *m_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
m_show	kernel/module.c	/^static int m_show(struct seq_file *m, void *p)$/;"	f	file:
m_start	fs/namespace.c	/^static void *m_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
m_start	kernel/module.c	/^static void *m_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
m_stop	fs/namespace.c	/^static void m_stop(struct seq_file *m, void *v)$/;"	f	file:
m_stop	kernel/module.c	/^static void m_stop(struct seq_file *m, void *p)$/;"	f	file:
madvise_behavior	mm/madvise.c	/^static long madvise_behavior(struct vm_area_struct * vma,$/;"	f	file:
madvise_behavior_valid	mm/madvise.c	/^madvise_behavior_valid(int behavior)$/;"	f	file:
madvise_dontneed	mm/madvise.c	/^static long madvise_dontneed(struct vm_area_struct * vma,$/;"	f	file:
madvise_hwpoison	mm/madvise.c	/^static int madvise_hwpoison(int bhv, unsigned long start, unsigned long end)$/;"	f	file:
madvise_need_mmap_write	mm/madvise.c	/^static int madvise_need_mmap_write(int behavior)$/;"	f	file:
madvise_remove	mm/madvise.c	/^static long madvise_remove(struct vm_area_struct *vma,$/;"	f	file:
madvise_vma	mm/madvise.c	/^madvise_vma(struct vm_area_struct *vma, struct vm_area_struct **prev,$/;"	f	file:
madvise_willneed	mm/madvise.c	/^static long madvise_willneed(struct vm_area_struct * vma,$/;"	f	file:
magic	fs/binfmt_misc.c	/^	char *magic;			\/* magic or filename extension *\/$/;"	m	struct:__anon16	file:
major	fs/char_dev.c	/^	unsigned int major;$/;"	m	struct:char_device_struct	file:
major	kernel/auditsc.c	/^	int		    major;      \/* syscall number *\/$/;"	m	struct:audit_context	file:
major_to_index	fs/char_dev.c	/^static inline int major_to_index(int major)$/;"	f	file:
make_bad_inode	fs/bad_inode.c	/^EXPORT_SYMBOL(make_bad_inode);$/;"	v
make_bad_inode	fs/bad_inode.c	/^void make_bad_inode(struct inode *inode)$/;"	f
make_black_object	mm/kmemleak.c	/^static void make_black_object(unsigned long ptr)$/;"	f	file:
make_gray_object	mm/kmemleak.c	/^static void make_gray_object(unsigned long ptr)$/;"	f	file:
make_huge_pte	mm/hugetlb.c	/^static pte_t make_huge_pte(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
make_pages_present	mm/memory.c	/^int make_pages_present(unsigned long addr, unsigned long end)$/;"	f
malloc_sizes	mm/slab.c	/^EXPORT_SYMBOL(malloc_sizes);$/;"	v
malloc_sizes	mm/slab.c	/^struct cache_sizes malloc_sizes[] = {$/;"	v	typeref:struct:cache_sizes
mangle	fs/namespace.c	/^static inline void mangle(struct seq_file *m, const char *s)$/;"	f	file:
mangle_path	fs/seq_file.c	/^EXPORT_SYMBOL(mangle_path);$/;"	v
mangle_path	fs/seq_file.c	/^char *mangle_path(char *s, char *p, char *esc)$/;"	f
map	fs/nfsctl.c	/^} map[] = {$/;"	v	typeref:struct:__anon20	file:
map	mm/page_cgroup.c	/^	struct page **map;$/;"	m	struct:swap_cgroup_ctrl	typeref:struct:swap_cgroup_ctrl::page	file:
map	mm/percpu.c	/^	int			*map;		\/* allocation map *\/$/;"	m	struct:pcpu_chunk	file:
map_alloc	mm/percpu.c	/^	int			map_alloc;	\/* # of map entries allocated *\/$/;"	m	struct:pcpu_chunk	file:
map_bh	fs/direct-io.c	/^	struct buffer_head map_bh;	\/* last get_block() result *\/$/;"	m	struct:dio	typeref:struct:dio::buffer_head	file:
map_buffer_to_page	fs/mpage.c	/^map_buffer_to_page(struct page *page, struct buffer_head *bh, int page_block) $/;"	f	file:
map_kernel_range_noflush	mm/vmalloc.c	/^int map_kernel_range_noflush(unsigned long addr, unsigned long size,$/;"	f
map_new_virtual	mm/highmem.c	/^static inline unsigned long map_new_virtual(struct page *page)$/;"	f	file:
map_som_binary	fs/binfmt_som.c	/^static int map_som_binary(struct file *file,$/;"	f	file:
map_swap_entry	mm/swapfile.c	/^static sector_t map_swap_entry(swp_entry_t entry, struct block_device **bdev)$/;"	f	file:
map_swap_page	mm/swapfile.c	/^sector_t map_swap_page(struct page *page, struct block_device **bdev)$/;"	f
map_used	mm/percpu.c	/^	int			map_used;	\/* # of map entries used *\/$/;"	m	struct:pcpu_chunk	file:
map_vm_area	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(map_vm_area);$/;"	v
map_vm_area	mm/vmalloc.c	/^int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page ***pages)$/;"	f
mapcount_max	mm/mempolicy.c	/^	unsigned long mapcount_max;$/;"	m	struct:numa_maps	file:
mapping	fs/aio.c	/^	struct address_space *mapping;$/;"	m	struct:aio_batch_entry	typeref:struct:aio_batch_entry::address_space	file:
mapping_clear_unevictable	include/linux/pagemap.h	/^static inline void mapping_clear_unevictable(struct address_space *mapping)$/;"	f
mapping_flags	include/linux/pagemap.h	/^enum mapping_flags {$/;"	g
mapping_gfp_mask	include/linux/pagemap.h	/^static inline gfp_t mapping_gfp_mask(struct address_space * mapping)$/;"	f
mapping_set_error	include/linux/pagemap.h	/^static inline void mapping_set_error(struct address_space *mapping, int error)$/;"	f
mapping_set_gfp_mask	include/linux/pagemap.h	/^static inline void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)$/;"	f
mapping_set_unevictable	include/linux/pagemap.h	/^static inline void mapping_set_unevictable(struct address_space *mapping)$/;"	f
mapping_tagged	mm/page-writeback.c	/^EXPORT_SYMBOL(mapping_tagged);$/;"	v
mapping_tagged	mm/page-writeback.c	/^int mapping_tagged(struct address_space *mapping, int tag)$/;"	f
mapping_unevictable	include/linux/pagemap.h	/^static inline int mapping_unevictable(struct address_space *mapping)$/;"	f
mark_bootmem	mm/bootmem.c	/^static int __init mark_bootmem(unsigned long start, unsigned long end,$/;"	f	file:
mark_bootmem_node	mm/bootmem.c	/^static int __init mark_bootmem_node(bootmem_data_t *bdata,$/;"	f	file:
mark_buffer_async_read	fs/buffer.c	/^static void mark_buffer_async_read(struct buffer_head *bh)$/;"	f	file:
mark_buffer_async_write	fs/buffer.c	/^EXPORT_SYMBOL(mark_buffer_async_write);$/;"	v
mark_buffer_async_write	fs/buffer.c	/^void mark_buffer_async_write(struct buffer_head *bh)$/;"	f
mark_buffer_async_write_endio	fs/buffer.c	/^static void mark_buffer_async_write_endio(struct buffer_head *bh,$/;"	f	file:
mark_buffer_dirty	fs/buffer.c	/^EXPORT_SYMBOL(mark_buffer_dirty);$/;"	v
mark_buffer_dirty	fs/buffer.c	/^void mark_buffer_dirty(struct buffer_head *bh)$/;"	f
mark_buffer_dirty_inode	fs/buffer.c	/^EXPORT_SYMBOL(mark_buffer_dirty_inode);$/;"	v
mark_buffer_dirty_inode	fs/buffer.c	/^void mark_buffer_dirty_inode(struct buffer_head *bh, struct inode *inode)$/;"	f
mark_files_ro	fs/file_table.c	/^void mark_files_ro(struct super_block *sb)$/;"	f
mark_free_pages	mm/page_alloc.c	/^void mark_free_pages(struct zone *zone)$/;"	f
mark_held_locks	kernel/lockdep.c	/^mark_held_locks(struct task_struct *curr, enum mark_type mark)$/;"	f	file:
mark_irqflags	kernel/lockdep.c	/^static inline int mark_irqflags(struct task_struct *curr,$/;"	f	file:
mark_irqflags	kernel/lockdep.c	/^static int mark_irqflags(struct task_struct *curr, struct held_lock *hlock)$/;"	f	file:
mark_lock	kernel/lockdep.c	/^static int mark_lock(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
mark_lock_accessed	kernel/lockdep.c	/^static inline void mark_lock_accessed(struct lock_list *lock,$/;"	f	file:
mark_lock_irq	kernel/lockdep.c	/^int mark_lock_irq(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
mark_lock_irq	kernel/lockdep.c	/^mark_lock_irq(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
mark_mounts_for_expiry	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mark_mounts_for_expiry);$/;"	v
mark_mounts_for_expiry	fs/namespace.c	/^void mark_mounts_for_expiry(struct list_head *mounts)$/;"	f
mark_page_accessed	mm/swap.c	/^EXPORT_SYMBOL(mark_page_accessed);$/;"	v
mark_page_accessed	mm/swap.c	/^void mark_page_accessed(struct page *page)$/;"	f
mark_rt_mutex_waiters	kernel/rtmutex.c	/^static inline void mark_rt_mutex_waiters(struct rt_mutex *lock)$/;"	f	file:
mark_type	kernel/lockdep.c	/^enum mark_type {$/;"	g	file:
mask	fs/binfmt_misc.c	/^	char *mask;			\/* mask, NULL for exact match *\/$/;"	m	struct:__anon16	file:
mask	kernel/sched_cpupri.h	/^	cpumask_var_t mask;$/;"	m	struct:cpupri_vec
mask	mm/memory-failure.c	/^	unsigned long mask;$/;"	m	struct:page_state	file:
masked_status	fs/compat_ioctl.c	/^	unsigned char masked_status;	\/* [o] shifted, masked scsi status *\/$/;"	m	struct:sg_io_hdr32	file:
match_futex	kernel/futex.c	/^static inline int match_futex(union futex_key *key1, union futex_key *key2)$/;"	f	file:
match_held_lock	kernel/lockdep.c	/^static int match_held_lock(struct held_lock *hlock, struct lockdep_map *lock)$/;"	f	file:
match_tree_refs	kernel/auditsc.c	/^static int match_tree_refs(struct audit_context *ctx, struct audit_tree *tree)$/;"	f	file:
mattr	kernel/module.c	/^	struct module_attribute mattr;$/;"	m	struct:module_sect_attr	typeref:struct:module_sect_attr::module_attribute	file:
mattr	kernel/params.c	/^	struct module_attribute mattr;$/;"	m	struct:param_attribute	typeref:struct:param_attribute::module_attribute	file:
max	kernel/sysctl.c	/^	int *max;$/;"	m	struct:do_proc_dointvec_minmax_conv_param	file:
max	mm/slub.c	/^	unsigned long max;$/;"	m	struct:loc_track	file:
max_addr	mm/kmemleak.c	/^static unsigned long max_addr;$/;"	v	file:
max_bfs_queue_depth	kernel/lockdep.c	/^unsigned int max_bfs_queue_depth;$/;"	v
max_block	fs/block_dev.c	/^static sector_t max_block(struct block_device *bdev)$/;"	f	file:
max_buffer_heads	fs/buffer.c	/^static int max_buffer_heads;$/;"	v	file:
max_compare	kernel/pm_qos_params.c	/^static s32 max_compare(s32 v1, s32 v2)$/;"	f	file:
max_hstate	mm/hugetlb.c	/^static int max_hstate;$/;"	v	file:
max_load	kernel/sched.c	/^	unsigned long max_load;$/;"	m	struct:sd_lb_stats	file:
max_lock_depth	kernel/rtmutex.c	/^int max_lock_depth = 1024;$/;"	v
max_lockdep_depth	kernel/lockdep.c	/^unsigned int max_lockdep_depth;$/;"	v
max_low_pfn	mm/bootmem.c	/^unsigned long max_low_pfn;$/;"	v
max_mapnr	mm/memory.c	/^EXPORT_SYMBOL(max_mapnr);$/;"	v
max_mapnr	mm/memory.c	/^unsigned long max_mapnr;$/;"	v
max_mapnr	mm/nommu.c	/^unsigned long max_mapnr;$/;"	v
max_pages	mm/quicklist.c	/^static unsigned long max_pages(unsigned long min_pages)$/;"	f	file:
max_pfn	mm/bootmem.c	/^unsigned long max_pfn;$/;"	v
max_pid	mm/slub.c	/^	long max_pid;$/;"	m	struct:location	file:
max_ratio_store	mm/backing-dev.c	/^static ssize_t max_ratio_store(struct device *dev,$/;"	f	file:
max_sane_readahead	mm/readahead.c	/^unsigned long max_sane_readahead(unsigned long nr)$/;"	f
max_sched_granularity_ns	kernel/sysctl.c	/^static int max_sched_granularity_ns = NSEC_PER_SEC;	\/* 1 second *\/$/;"	v	file:
max_sched_shares_ratelimit	kernel/sysctl.c	/^static int max_sched_shares_ratelimit = NSEC_PER_SEC; \/* 1 second *\/$/;"	v	file:
max_sched_tunable_scaling	kernel/sysctl.c	/^static int max_sched_tunable_scaling = SCHED_TUNABLESCALING_END-1;$/;"	v	file:
max_select_fd	fs/select.c	/^static int max_select_fd(unsigned long n, fd_set_bits *fds)$/;"	f	file:
max_swapfiles_check	mm/swapfile.c	/^late_initcall(max_swapfiles_check);$/;"	v
max_swapfiles_check	mm/swapfile.c	/^static int __init max_swapfiles_check(void)$/;"	f	file:
max_task_bp_pinned	kernel/hw_breakpoint.c	/^static unsigned int max_task_bp_pinned(int cpu)$/;"	f	file:
max_threads	kernel/fork.c	/^int max_threads;		\/* tunable limit on nr_threads *\/$/;"	v
max_time	mm/slub.c	/^	long max_time;$/;"	m	struct:location	file:
max_vruntime	kernel/sched_fair.c	/^static inline u64 max_vruntime(u64 min_vruntime, u64 vruntime)$/;"	f	file:
max_wakeup_granularity_ns	kernel/sysctl.c	/^static int max_wakeup_granularity_ns = NSEC_PER_SEC;	\/* 1 second *\/$/;"	v	file:
maxevents	fs/eventpoll.c	/^	int maxevents;$/;"	m	struct:ep_send_events_data	file:
maxolduid	kernel/sysctl.c	/^static int maxolduid = 65535;$/;"	v	file:
may_create	fs/namei.c	/^static inline int may_create(struct inode *dir, struct dentry *child)$/;"	f	file:
may_delete	fs/namei.c	/^static int may_delete(struct inode *dir,struct dentry *victim,int isdir)$/;"	f	file:
may_expand_vm	mm/mmap.c	/^int may_expand_vm(struct mm_struct *mm, unsigned long npages)$/;"	f
may_mknod	fs/namei.c	/^static int may_mknod(mode_t mode)$/;"	f	file:
may_open	fs/namei.c	/^int may_open(struct path *path, int acc_mode, int flag)$/;"	f
may_ptrace_stop	kernel/signal.c	/^static inline int may_ptrace_stop(void)$/;"	f	file:
may_swap	mm/vmscan.c	/^	int may_swap;$/;"	m	struct:scan_control	file:
may_umount	fs/namespace.c	/^EXPORT_SYMBOL(may_umount);$/;"	v
may_umount	fs/namespace.c	/^int may_umount(struct vfsmount *mnt)$/;"	f
may_umount_tree	fs/namespace.c	/^EXPORT_SYMBOL(may_umount_tree);$/;"	v
may_umount_tree	fs/namespace.c	/^int may_umount_tree(struct vfsmount *mnt)$/;"	f
may_unmap	mm/vmscan.c	/^	int may_unmap;$/;"	m	struct:scan_control	file:
may_write_to_queue	mm/vmscan.c	/^static int may_write_to_queue(struct backing_dev_info *bdi)$/;"	f	file:
may_writepage	mm/vmscan.c	/^	int may_writepage;$/;"	m	struct:scan_control	file:
maybe_mkwrite	mm/memory.c	/^static inline pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)$/;"	f	file:
maybe_relocated	kernel/module.c	/^static unsigned long maybe_relocated(unsigned long crc,$/;"	f	file:
maydump	fs/binfmt_elf_fdpic.c	/^static int maydump(struct vm_area_struct *vma, unsigned long mm_flags)$/;"	f	file:
mb_assert	fs/mbcache.c	46;"	d	file:
mb_assert	fs/mbcache.c	51;"	d	file:
mb_cache	fs/mbcache.c	/^struct mb_cache {$/;"	s	file:
mb_cache_create	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_create);$/;"	v
mb_cache_create	fs/mbcache.c	/^mb_cache_create(const char *name, struct mb_cache_op *cache_op,$/;"	f
mb_cache_destroy	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_destroy);$/;"	v
mb_cache_destroy	fs/mbcache.c	/^mb_cache_destroy(struct mb_cache *cache)$/;"	f
mb_cache_entry_alloc	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_alloc);$/;"	v
mb_cache_entry_alloc	fs/mbcache.c	/^mb_cache_entry_alloc(struct mb_cache *cache, gfp_t gfp_flags)$/;"	f
mb_cache_entry_find_first	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_find_first);$/;"	v
mb_cache_entry_find_first	fs/mbcache.c	/^mb_cache_entry_find_first(struct mb_cache *cache, int index,$/;"	f
mb_cache_entry_find_next	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_find_next);$/;"	v
mb_cache_entry_find_next	fs/mbcache.c	/^mb_cache_entry_find_next(struct mb_cache_entry *prev, int index,$/;"	f
mb_cache_entry_free	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_free);$/;"	v
mb_cache_entry_free	fs/mbcache.c	/^mb_cache_entry_free(struct mb_cache_entry *ce)$/;"	f
mb_cache_entry_get	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_get);$/;"	v
mb_cache_entry_get	fs/mbcache.c	/^mb_cache_entry_get(struct mb_cache *cache, struct block_device *bdev,$/;"	f
mb_cache_entry_insert	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_insert);$/;"	v
mb_cache_entry_insert	fs/mbcache.c	/^mb_cache_entry_insert(struct mb_cache_entry *ce, struct block_device *bdev,$/;"	f
mb_cache_entry_release	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_entry_release);$/;"	v
mb_cache_entry_release	fs/mbcache.c	/^mb_cache_entry_release(struct mb_cache_entry *ce)$/;"	f
mb_cache_indexes	fs/mbcache.c	/^mb_cache_indexes(struct mb_cache *cache)$/;"	f	file:
mb_cache_shrink	fs/mbcache.c	/^EXPORT_SYMBOL(mb_cache_shrink);$/;"	v
mb_cache_shrink	fs/mbcache.c	/^mb_cache_shrink(struct block_device *bdev)$/;"	f
mb_cache_shrink_fn	fs/mbcache.c	/^mb_cache_shrink_fn(int nr_to_scan, gfp_t gfp_mask)$/;"	f	file:
mb_cache_shrinker	fs/mbcache.c	/^static struct shrinker mb_cache_shrinker = {$/;"	v	typeref:struct:shrinker	file:
mb_debug	fs/mbcache.c	42;"	d	file:
mb_debug	fs/mbcache.c	50;"	d	file:
mb_error	fs/mbcache.c	53;"	d	file:
mbind_range	mm/mempolicy.c	/^static int mbind_range(struct vm_area_struct *vma, unsigned long start,$/;"	f	file:
mcs_total_stat	mm/memcontrol.c	/^struct mcs_total_stat {$/;"	s	file:
me_huge_page	mm/memory-failure.c	/^static int me_huge_page(struct page *p, unsigned long pfn)$/;"	f	file:
me_kernel	mm/memory-failure.c	/^static int me_kernel(struct page *p, unsigned long pfn)$/;"	f	file:
me_pagecache_clean	mm/memory-failure.c	/^static int me_pagecache_clean(struct page *p, unsigned long pfn)$/;"	f	file:
me_pagecache_dirty	mm/memory-failure.c	/^static int me_pagecache_dirty(struct page *p, unsigned long pfn)$/;"	f	file:
me_swapcache_clean	mm/memory-failure.c	/^static int me_swapcache_clean(struct page *p, unsigned long pfn)$/;"	f	file:
me_swapcache_dirty	mm/memory-failure.c	/^static int me_swapcache_dirty(struct page *p, unsigned long pfn)$/;"	f	file:
me_unknown	mm/memory-failure.c	/^static int me_unknown(struct page *p, unsigned long pfn)$/;"	f	file:
mem	mm/memcontrol.c	/^	struct mem_cgroup	*mem;		\/* Back pointer, we cannot *\/$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::mem_cgroup	file:
mem_cgroup	mm/memcontrol.c	/^struct mem_cgroup {$/;"	s	file:
mem_cgroup	mm/vmscan.c	/^	struct mem_cgroup *mem_cgroup;$/;"	m	struct:scan_control	typeref:struct:scan_control::mem_cgroup	file:
mem_cgroup_add_lru_list	mm/memcontrol.c	/^void mem_cgroup_add_lru_list(struct page *page, enum lru_list lru)$/;"	f
mem_cgroup_alloc	mm/memcontrol.c	/^static struct mem_cgroup *mem_cgroup_alloc(void)$/;"	f	file:
mem_cgroup_cache_charge	mm/memcontrol.c	/^int mem_cgroup_cache_charge(struct page *page, struct mm_struct *mm,$/;"	f
mem_cgroup_cancel_charge	mm/memcontrol.c	/^static void mem_cgroup_cancel_charge(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_cancel_charge_swapin	mm/memcontrol.c	/^void mem_cgroup_cancel_charge_swapin(struct mem_cgroup *mem)$/;"	f
mem_cgroup_charge_common	mm/memcontrol.c	/^static int mem_cgroup_charge_common(struct page *page, struct mm_struct *mm,$/;"	f	file:
mem_cgroup_charge_statistics	mm/memcontrol.c	/^static void mem_cgroup_charge_statistics(struct mem_cgroup *mem,$/;"	f	file:
mem_cgroup_check_under_limit	mm/memcontrol.c	/^static bool mem_cgroup_check_under_limit(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_commit_charge_swapin	mm/memcontrol.c	/^void mem_cgroup_commit_charge_swapin(struct page *page, struct mem_cgroup *ptr)$/;"	f
mem_cgroup_count_children	mm/memcontrol.c	/^static int mem_cgroup_count_children(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_count_children_cb	mm/memcontrol.c	/^static int mem_cgroup_count_children_cb(struct mem_cgroup *mem, void *data)$/;"	f	file:
mem_cgroup_create	mm/memcontrol.c	/^mem_cgroup_create(struct cgroup_subsys *ss, struct cgroup *cont)$/;"	f	file:
mem_cgroup_css	mm/memcontrol.c	/^struct cgroup_subsys_state *mem_cgroup_css(struct mem_cgroup *mem)$/;"	f
mem_cgroup_del_lru	mm/memcontrol.c	/^void mem_cgroup_del_lru(struct page *page)$/;"	f
mem_cgroup_del_lru_list	mm/memcontrol.c	/^void mem_cgroup_del_lru_list(struct page *page, enum lru_list lru)$/;"	f
mem_cgroup_destroy	mm/memcontrol.c	/^static void mem_cgroup_destroy(struct cgroup_subsys *ss,$/;"	f	file:
mem_cgroup_end_migration	mm/memcontrol.c	/^void mem_cgroup_end_migration(struct mem_cgroup *mem,$/;"	f
mem_cgroup_files	mm/memcontrol.c	/^static struct cftype mem_cgroup_files[] = {$/;"	v	typeref:struct:cftype	file:
mem_cgroup_force_empty	mm/memcontrol.c	/^static int mem_cgroup_force_empty(struct mem_cgroup *mem, bool free_all)$/;"	f	file:
mem_cgroup_force_empty_list	mm/memcontrol.c	/^static int mem_cgroup_force_empty_list(struct mem_cgroup *mem,$/;"	f	file:
mem_cgroup_force_empty_write	mm/memcontrol.c	/^int mem_cgroup_force_empty_write(struct cgroup *cont, unsigned int event)$/;"	f
mem_cgroup_from_cont	mm/memcontrol.c	/^static struct mem_cgroup *mem_cgroup_from_cont(struct cgroup *cont)$/;"	f	file:
mem_cgroup_from_res_counter	mm/memcontrol.c	964;"	d	file:
mem_cgroup_from_task	mm/memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p)$/;"	f
mem_cgroup_get	mm/memcontrol.c	/^static void mem_cgroup_get(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_get_excess	mm/memcontrol.c	/^static inline unsigned long mem_cgroup_get_excess(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_get_idx_stat	mm/memcontrol.c	/^mem_cgroup_get_idx_stat(struct mem_cgroup *mem, void *data)$/;"	f	file:
mem_cgroup_get_local_stat	mm/memcontrol.c	/^static int mem_cgroup_get_local_stat(struct mem_cgroup *mem, void *data)$/;"	f	file:
mem_cgroup_get_local_zonestat	mm/memcontrol.c	/^static unsigned long mem_cgroup_get_local_zonestat(struct mem_cgroup *mem,$/;"	f	file:
mem_cgroup_get_reclaim_priority	mm/memcontrol.c	/^int mem_cgroup_get_reclaim_priority(struct mem_cgroup *mem)$/;"	f
mem_cgroup_get_reclaim_stat	mm/memcontrol.c	/^struct zone_reclaim_stat *mem_cgroup_get_reclaim_stat(struct mem_cgroup *memcg,$/;"	f
mem_cgroup_get_reclaim_stat_from_page	mm/memcontrol.c	/^mem_cgroup_get_reclaim_stat_from_page(struct page *page)$/;"	f
mem_cgroup_get_recursive_idx_stat	mm/memcontrol.c	/^mem_cgroup_get_recursive_idx_stat(struct mem_cgroup *mem,$/;"	f	file:
mem_cgroup_get_total_stat	mm/memcontrol.c	/^mem_cgroup_get_total_stat(struct mem_cgroup *mem, struct mcs_total_stat *s)$/;"	f	file:
mem_cgroup_hierarchical_reclaim	mm/memcontrol.c	/^static int mem_cgroup_hierarchical_reclaim(struct mem_cgroup *root_mem,$/;"	f	file:
mem_cgroup_hierarchy_read	mm/memcontrol.c	/^static u64 mem_cgroup_hierarchy_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
mem_cgroup_hierarchy_write	mm/memcontrol.c	/^static int mem_cgroup_hierarchy_write(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_cgroup_idx_data	mm/memcontrol.c	/^struct mem_cgroup_idx_data {$/;"	s	file:
mem_cgroup_inactive_anon_is_low	mm/memcontrol.c	/^int mem_cgroup_inactive_anon_is_low(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_inactive_file_is_low	mm/memcontrol.c	/^int mem_cgroup_inactive_file_is_low(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_is_root	mm/memcontrol.c	/^static inline bool mem_cgroup_is_root(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_isolate_pages	mm/memcontrol.c	/^unsigned long mem_cgroup_isolate_pages(unsigned long nr_to_scan,$/;"	f
mem_cgroup_largest_soft_limit_node	mm/memcontrol.c	/^mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_zone *mctz)$/;"	f	file:
mem_cgroup_local_usage	mm/memcontrol.c	/^static s64 mem_cgroup_local_usage(struct mem_cgroup_stat *stat)$/;"	f	file:
mem_cgroup_lookup	mm/memcontrol.c	/^static struct mem_cgroup *mem_cgroup_lookup(unsigned short id)$/;"	f	file:
mem_cgroup_lru_add_after_commit_swapcache	mm/memcontrol.c	/^static void mem_cgroup_lru_add_after_commit_swapcache(struct page *page)$/;"	f	file:
mem_cgroup_lru_del_before_commit_swapcache	mm/memcontrol.c	/^static void mem_cgroup_lru_del_before_commit_swapcache(struct page *page)$/;"	f	file:
mem_cgroup_lru_info	mm/memcontrol.c	/^struct mem_cgroup_lru_info {$/;"	s	file:
mem_cgroup_move_account	mm/memcontrol.c	/^static int mem_cgroup_move_account(struct page_cgroup *pc,$/;"	f	file:
mem_cgroup_move_lists	mm/memcontrol.c	/^void mem_cgroup_move_lists(struct page *page,$/;"	f
mem_cgroup_move_parent	mm/memcontrol.c	/^static int mem_cgroup_move_parent(struct page_cgroup *pc,$/;"	f	file:
mem_cgroup_move_task	mm/memcontrol.c	/^static void mem_cgroup_move_task(struct cgroup_subsys *ss,$/;"	f	file:
mem_cgroup_newpage_charge	mm/memcontrol.c	/^int mem_cgroup_newpage_charge(struct page *page,$/;"	f
mem_cgroup_note_reclaim_priority	mm/memcontrol.c	/^void mem_cgroup_note_reclaim_priority(struct mem_cgroup *mem, int priority)$/;"	f
mem_cgroup_oom_called	mm/memcontrol.c	/^bool mem_cgroup_oom_called(struct task_struct *task)$/;"	f
mem_cgroup_out_of_memory	mm/oom_kill.c	/^void mem_cgroup_out_of_memory(struct mem_cgroup *mem, gfp_t gfp_mask)$/;"	f
mem_cgroup_per_node	mm/memcontrol.c	/^struct mem_cgroup_per_node {$/;"	s	file:
mem_cgroup_per_zone	mm/memcontrol.c	/^struct mem_cgroup_per_zone {$/;"	s	file:
mem_cgroup_populate	mm/memcontrol.c	/^static int mem_cgroup_populate(struct cgroup_subsys *ss,$/;"	f	file:
mem_cgroup_pre_destroy	mm/memcontrol.c	/^static int mem_cgroup_pre_destroy(struct cgroup_subsys *ss,$/;"	f	file:
mem_cgroup_prepare_migration	mm/memcontrol.c	/^int mem_cgroup_prepare_migration(struct page *page, struct mem_cgroup **ptr)$/;"	f
mem_cgroup_print_oom_info	mm/memcontrol.c	/^void mem_cgroup_print_oom_info(struct mem_cgroup *memcg, struct task_struct *p)$/;"	f
mem_cgroup_put	mm/memcontrol.c	/^static void mem_cgroup_put(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_read	mm/memcontrol.c	/^static u64 mem_cgroup_read(struct cgroup *cont, struct cftype *cft)$/;"	f	file:
mem_cgroup_read_stat	mm/memcontrol.c	/^static s64 mem_cgroup_read_stat(struct mem_cgroup_stat *stat,$/;"	f	file:
mem_cgroup_record_reclaim_priority	mm/memcontrol.c	/^void mem_cgroup_record_reclaim_priority(struct mem_cgroup *mem, int priority)$/;"	f
mem_cgroup_remove_exceeded	mm/memcontrol.c	/^mem_cgroup_remove_exceeded(struct mem_cgroup *mem,$/;"	f	file:
mem_cgroup_remove_from_trees	mm/memcontrol.c	/^static void mem_cgroup_remove_from_trees(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_reset	mm/memcontrol.c	/^static int mem_cgroup_reset(struct cgroup *cont, unsigned int event)$/;"	f	file:
mem_cgroup_resize_limit	mm/memcontrol.c	/^static int mem_cgroup_resize_limit(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_resize_memsw_limit	mm/memcontrol.c	/^static int mem_cgroup_resize_memsw_limit(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_rotate_lru_list	mm/memcontrol.c	/^void mem_cgroup_rotate_lru_list(struct page *page, enum lru_list lru)$/;"	f
mem_cgroup_select_victim	mm/memcontrol.c	/^mem_cgroup_select_victim(struct mem_cgroup *root_mem)$/;"	f	file:
mem_cgroup_shmem_charge_fallback	mm/memcontrol.c	/^int mem_cgroup_shmem_charge_fallback(struct page *page,$/;"	f
mem_cgroup_shrink_node_zone	mm/vmscan.c	/^unsigned long mem_cgroup_shrink_node_zone(struct mem_cgroup *mem,$/;"	f
mem_cgroup_size	mm/memcontrol.c	/^static int mem_cgroup_size(void)$/;"	f	file:
mem_cgroup_soft_limit_check	mm/memcontrol.c	/^static bool mem_cgroup_soft_limit_check(struct mem_cgroup *mem)$/;"	f	file:
mem_cgroup_soft_limit_reclaim	mm/memcontrol.c	/^unsigned long mem_cgroup_soft_limit_reclaim(struct zone *zone, int order,$/;"	f
mem_cgroup_soft_limit_tree_init	mm/memcontrol.c	/^static int mem_cgroup_soft_limit_tree_init(void)$/;"	f	file:
mem_cgroup_stat	mm/memcontrol.c	/^struct mem_cgroup_stat {$/;"	s	file:
mem_cgroup_stat_cpu	mm/memcontrol.c	/^struct mem_cgroup_stat_cpu {$/;"	s	file:
mem_cgroup_stat_index	mm/memcontrol.c	/^enum mem_cgroup_stat_index {$/;"	g	file:
mem_cgroup_subsys	mm/memcontrol.c	/^struct cgroup_subsys mem_cgroup_subsys = {$/;"	v	typeref:struct:cgroup_subsys
mem_cgroup_swap_statistics	mm/memcontrol.c	/^static void mem_cgroup_swap_statistics(struct mem_cgroup *mem,$/;"	f	file:
mem_cgroup_swappiness_read	mm/memcontrol.c	/^static u64 mem_cgroup_swappiness_read(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
mem_cgroup_swappiness_write	mm/memcontrol.c	/^static int mem_cgroup_swappiness_write(struct cgroup *cgrp, struct cftype *cft,$/;"	f	file:
mem_cgroup_tree	mm/memcontrol.c	/^struct mem_cgroup_tree {$/;"	s	file:
mem_cgroup_tree_per_node	mm/memcontrol.c	/^struct mem_cgroup_tree_per_node {$/;"	s	file:
mem_cgroup_tree_per_zone	mm/memcontrol.c	/^struct mem_cgroup_tree_per_zone {$/;"	s	file:
mem_cgroup_try_charge_swapin	mm/memcontrol.c	/^int mem_cgroup_try_charge_swapin(struct mm_struct *mm,$/;"	f
mem_cgroup_uncharge_cache_page	mm/memcontrol.c	/^void mem_cgroup_uncharge_cache_page(struct page *page)$/;"	f
mem_cgroup_uncharge_end	mm/memcontrol.c	/^void mem_cgroup_uncharge_end(void)$/;"	f
mem_cgroup_uncharge_page	mm/memcontrol.c	/^void mem_cgroup_uncharge_page(struct page *page)$/;"	f
mem_cgroup_uncharge_start	mm/memcontrol.c	/^void mem_cgroup_uncharge_start(void)$/;"	f
mem_cgroup_uncharge_swap	mm/memcontrol.c	/^void mem_cgroup_uncharge_swap(swp_entry_t ent)$/;"	f
mem_cgroup_uncharge_swapcache	mm/memcontrol.c	/^mem_cgroup_uncharge_swapcache(struct page *page, swp_entry_t ent, bool swapout)$/;"	f
mem_cgroup_update_file_mapped	mm/memcontrol.c	/^void mem_cgroup_update_file_mapped(struct page *page, int val)$/;"	f
mem_cgroup_update_tree	mm/memcontrol.c	/^static void mem_cgroup_update_tree(struct mem_cgroup *mem, struct page *page)$/;"	f	file:
mem_cgroup_walk_tree	mm/memcontrol.c	/^static int mem_cgroup_walk_tree(struct mem_cgroup *root, void *data,$/;"	f	file:
mem_cgroup_write	mm/memcontrol.c	/^static int mem_cgroup_write(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_cgroup_zone_nr_pages	mm/memcontrol.c	/^unsigned long mem_cgroup_zone_nr_pages(struct mem_cgroup *memcg,$/;"	f
mem_cgroup_zoneinfo	mm/memcontrol.c	/^mem_cgroup_zoneinfo(struct mem_cgroup *mem, int nid, int zid)$/;"	f	file:
mem_control_stat_show	mm/memcontrol.c	/^static int mem_control_stat_show(struct cgroup *cont, struct cftype *cft,$/;"	f	file:
mem_map	mm/memory.c	/^EXPORT_SYMBOL(mem_map);$/;"	v
mem_map	mm/memory.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_map	mm/nommu.c	/^EXPORT_SYMBOL(mem_map);$/;"	v
mem_map	mm/nommu.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_map_next	mm/internal.h	/^static inline struct page *mem_map_next(struct page *iter,$/;"	f
mem_map_offset	mm/internal.h	/^static inline struct page *mem_map_offset(struct page *base, int offset)$/;"	f
mem_section	mm/sparse.c	/^EXPORT_SYMBOL(mem_section);$/;"	v
mem_unit	kernel/compat.c	/^	u32 mem_unit;$/;"	m	struct:compat_sysinfo	file:
memcg_drain_count	mm/memcontrol.c	/^static atomic_t memcg_drain_count;$/;"	v	file:
memcg_get_hierarchical_limit	mm/memcontrol.c	/^static void memcg_get_hierarchical_limit(struct mem_cgroup *memcg,$/;"	f	file:
memcg_stat_strings	mm/memcontrol.c	/^} memcg_stat_strings[NR_MCS_STAT] = {$/;"	v	typeref:struct:__anon6
memcg_stock_cpu_callback	mm/memcontrol.c	/^static int __cpuinit memcg_stock_cpu_callback(struct notifier_block *nb,$/;"	f	file:
memcg_stock_pcp	mm/memcontrol.c	/^struct memcg_stock_pcp {$/;"	s	file:
memchr	lib/string.c	/^EXPORT_SYMBOL(memchr);$/;"	v
memchr	lib/string.c	/^void *memchr(const void *s, int c, size_t n)$/;"	f
memcmp	lib/string.c	/^EXPORT_SYMBOL(memcmp);$/;"	v
memcmp	lib/string.c	/^int memcmp(const void *cs, const void *ct, size_t count)$/;"	f
memcmp	lib/string.c	623;"	d	file:
memcmp_pages	mm/ksm.c	/^static int memcmp_pages(struct page *page1, struct page *page2)$/;"	f	file:
memcpy	lib/string.c	/^EXPORT_SYMBOL(memcpy);$/;"	v
memcpy	lib/string.c	/^void *memcpy(void *dest, const void *src, size_t count)$/;"	f
memdup_user	mm/util.c	/^EXPORT_SYMBOL(memdup_user);$/;"	v
memdup_user	mm/util.c	/^void *memdup_user(const void __user *src, size_t len)$/;"	f
memelfnote	fs/binfmt_elf.c	/^struct memelfnote$/;"	s	file:
memelfnote	fs/binfmt_elf_fdpic.c	/^struct memelfnote$/;"	s	file:
memfmt	mm/hugetlb.c	/^static char * __init memfmt(char *buf, unsigned long n)$/;"	f	file:
memmap_init	mm/page_alloc.c	3013;"	d	file:
memmap_init_zone	mm/page_alloc.c	/^void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,$/;"	f
memmap_valid_within	mm/mmzone.c	/^int memmap_valid_within(unsigned long pfn,$/;"	f
memmove	lib/string.c	/^EXPORT_SYMBOL(memmove);$/;"	v
memmove	lib/string.c	/^void *memmove(void *dest, const void *src, size_t count)$/;"	f
memory_failure	mm/memory-failure.c	/^void memory_failure(unsigned long pfn, int trapno)$/;"	f
memory_present	mm/sparse.c	/^void __init memory_present(int nid, unsigned long start, unsigned long end)$/;"	f
memory_read_from_buffer	fs/libfs.c	/^EXPORT_SYMBOL(memory_read_from_buffer);$/;"	v
memory_read_from_buffer	fs/libfs.c	/^ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,$/;"	f
mempolicy_operations	mm/mempolicy.c	/^static const struct mempolicy_operations {$/;"	s	file:
mempool_alloc	mm/mempool.c	/^EXPORT_SYMBOL(mempool_alloc);$/;"	v
mempool_alloc	mm/mempool.c	/^void * mempool_alloc(mempool_t *pool, gfp_t gfp_mask)$/;"	f
mempool_alloc_pages	mm/mempool.c	/^EXPORT_SYMBOL(mempool_alloc_pages);$/;"	v
mempool_alloc_pages	mm/mempool.c	/^void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_alloc_pages_isa	mm/bounce.c	/^static void *mempool_alloc_pages_isa(gfp_t gfp_mask, void *data)$/;"	f	file:
mempool_alloc_slab	mm/mempool.c	/^EXPORT_SYMBOL(mempool_alloc_slab);$/;"	v
mempool_alloc_slab	mm/mempool.c	/^void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_create	mm/mempool.c	/^EXPORT_SYMBOL(mempool_create);$/;"	v
mempool_create	mm/mempool.c	/^mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_create_node	mm/mempool.c	/^EXPORT_SYMBOL(mempool_create_node);$/;"	v
mempool_create_node	mm/mempool.c	/^mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_destroy	mm/mempool.c	/^EXPORT_SYMBOL(mempool_destroy);$/;"	v
mempool_destroy	mm/mempool.c	/^void mempool_destroy(mempool_t *pool)$/;"	f
mempool_free	mm/mempool.c	/^EXPORT_SYMBOL(mempool_free);$/;"	v
mempool_free	mm/mempool.c	/^void mempool_free(void *element, mempool_t *pool)$/;"	f
mempool_free_pages	mm/mempool.c	/^EXPORT_SYMBOL(mempool_free_pages);$/;"	v
mempool_free_pages	mm/mempool.c	/^void mempool_free_pages(void *element, void *pool_data)$/;"	f
mempool_free_slab	mm/mempool.c	/^EXPORT_SYMBOL(mempool_free_slab);$/;"	v
mempool_free_slab	mm/mempool.c	/^void mempool_free_slab(void *element, void *pool_data)$/;"	f
mempool_kfree	mm/mempool.c	/^EXPORT_SYMBOL(mempool_kfree);$/;"	v
mempool_kfree	mm/mempool.c	/^void mempool_kfree(void *element, void *pool_data)$/;"	f
mempool_kmalloc	mm/mempool.c	/^EXPORT_SYMBOL(mempool_kmalloc);$/;"	v
mempool_kmalloc	mm/mempool.c	/^void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_resize	mm/mempool.c	/^EXPORT_SYMBOL(mempool_resize);$/;"	v
mempool_resize	mm/mempool.c	/^int mempool_resize(mempool_t *pool, int new_min_nr, gfp_t gfp_mask)$/;"	f
mems_allowed	kernel/cpuset.c	/^	nodemask_t mems_allowed;	\/* Memory Nodes allowed to tasks *\/$/;"	m	struct:cpuset	file:
memscan	lib/string.c	/^EXPORT_SYMBOL(memscan);$/;"	v
memscan	lib/string.c	/^void *memscan(void *addr, int c, size_t size)$/;"	f
memset	lib/string.c	/^EXPORT_SYMBOL(memset);$/;"	v
memset	lib/string.c	/^void *memset(void *s, int c, size_t count)$/;"	f
memsw	mm/memcontrol.c	/^	struct res_counter memsw;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::res_counter	file:
memsw_cgroup_files	mm/memcontrol.c	/^static struct cftype memsw_cgroup_files[] = {$/;"	v	typeref:struct:cftype	file:
memsw_is_minimum	mm/memcontrol.c	/^	bool		memsw_is_minimum;$/;"	m	struct:mem_cgroup	file:
might_fault	mm/memory.c	/^EXPORT_SYMBOL(might_fault);$/;"	v
might_fault	mm/memory.c	/^void might_fault(void)$/;"	f
migrate_dead	kernel/sched.c	/^static void migrate_dead(unsigned int dead_cpu, struct task_struct *p)$/;"	f	file:
migrate_dead_tasks	kernel/sched.c	/^static void migrate_dead_tasks(unsigned int dead_cpu)$/;"	f	file:
migrate_hrtimer_list	kernel/hrtimer.c	/^static void migrate_hrtimer_list(struct hrtimer_clock_base *old_base,$/;"	f	file:
migrate_hrtimers	kernel/hrtimer.c	/^static void migrate_hrtimers(int scpu)$/;"	f	file:
migrate_live_tasks	kernel/sched.c	/^static void migrate_live_tasks(int src_cpu)$/;"	f	file:
migrate_nr_uninterruptible	kernel/sched.c	/^static void migrate_nr_uninterruptible(struct rq *rq_src)$/;"	f	file:
migrate_page	mm/migrate.c	/^EXPORT_SYMBOL(migrate_page);$/;"	v
migrate_page	mm/migrate.c	/^int migrate_page(struct address_space *mapping,$/;"	f
migrate_page_add	mm/mempolicy.c	/^static void migrate_page_add(struct page *page, struct list_head *pagelist,$/;"	f	file:
migrate_page_copy	mm/migrate.c	/^static void migrate_page_copy(struct page *newpage, struct page *page)$/;"	f	file:
migrate_page_move_mapping	mm/migrate.c	/^static int migrate_page_move_mapping(struct address_space *mapping,$/;"	f	file:
migrate_pages	mm/migrate.c	/^int migrate_pages(struct list_head *from,$/;"	f
migrate_prep	mm/migrate.c	/^int migrate_prep(void)$/;"	f
migrate_task	kernel/sched.c	/^migrate_task(struct task_struct *p, int dest_cpu, struct migration_req *req)$/;"	f	file:
migrate_timer_list	kernel/timer.c	/^static void migrate_timer_list(struct tvec_base *new_base, struct list_head *head)$/;"	f	file:
migrate_timers	kernel/timer.c	/^static void __cpuinit migrate_timers(int cpu)$/;"	f	file:
migrate_to_node	mm/mempolicy.c	/^static int migrate_to_node(struct mm_struct *mm, int source, int dest,$/;"	f	file:
migrate_vmas	mm/migrate.c	/^int migrate_vmas(struct mm_struct *mm, const nodemask_t *to,$/;"	f
migratetype_names	mm/vmstat.c	/^static char * const migratetype_names[MIGRATE_TYPES] = {$/;"	v	file:
migration_call	kernel/sched.c	/^migration_call(struct notifier_block *nfb, unsigned long action, void *hcpu)$/;"	f	file:
migration_entry_wait	mm/migrate.c	/^void migration_entry_wait(struct mm_struct *mm, pmd_t *pmd,$/;"	f
migration_init	kernel/sched.c	/^early_initcall(migration_init);$/;"	v
migration_init	kernel/sched.c	/^static int __init migration_init(void)$/;"	f	file:
migration_notifier	kernel/sched.c	/^static struct notifier_block __cpuinitdata migration_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
migration_queue	kernel/sched.c	/^	struct list_head migration_queue;$/;"	m	struct:rq	typeref:struct:rq::list_head	file:
migration_req	kernel/sched.c	/^struct migration_req {$/;"	s	file:
migration_thread	kernel/sched.c	/^	struct task_struct *migration_thread;$/;"	m	struct:rq	typeref:struct:rq::task_struct	file:
migration_thread	kernel/sched.c	/^static int migration_thread(void *data)$/;"	f	file:
min	kernel/sysctl.c	/^	int *min;$/;"	m	struct:do_proc_dointvec_minmax_conv_param	file:
min_addr	mm/kmemleak.c	/^static unsigned long min_addr = ULONG_MAX;$/;"	v	file:
min_compare	kernel/pm_qos_params.c	/^static s32 min_compare(s32 v1, s32 v2)$/;"	f	file:
min_count	mm/kmemleak.c	/^	int min_count;			\/* minimum reference count *\/$/;"	m	struct:early_log	file:
min_count	mm/kmemleak.c	/^	int min_count;$/;"	m	struct:kmemleak_object	file:
min_free_kbytes	mm/page_alloc.c	/^int min_free_kbytes = 1024;$/;"	v
min_load_per_task	kernel/sched.c	/^	unsigned long min_load_per_task; \/* load_per_task in group_min *\/$/;"	m	struct:sd_lb_stats	file:
min_low_pfn	mm/bootmem.c	/^unsigned long min_low_pfn;$/;"	v
min_nr_running	kernel/sched.c	/^	unsigned long min_nr_running; \/* Nr running of group_min *\/$/;"	m	struct:sd_lb_stats	file:
min_order	mm/page_alloc.c	/^	u32 min_order;$/;"	m	struct:fail_page_alloc_attr	file:
min_order_file	mm/page_alloc.c	/^	struct dentry *min_order_file;$/;"	m	struct:fail_page_alloc_attr	typeref:struct:fail_page_alloc_attr::dentry	file:
min_pages_to_free	mm/quicklist.c	/^static long min_pages_to_free(struct quicklist *q,$/;"	f	file:
min_partial	mm/slub.c	/^SLAB_ATTR(min_partial);$/;"	v
min_partial_show	mm/slub.c	/^static ssize_t min_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
min_partial_store	mm/slub.c	/^static ssize_t min_partial_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
min_percpu_pagelist_fract	kernel/sysctl.c	/^static int min_percpu_pagelist_fract = 8;$/;"	v	file:
min_pid	mm/slub.c	/^	long min_pid;$/;"	m	struct:location	file:
min_ratio_store	mm/backing-dev.c	/^static ssize_t min_ratio_store(struct device *dev,$/;"	f	file:
min_sched_granularity_ns	kernel/sysctl.c	/^static int min_sched_granularity_ns = 100000;		\/* 100 usecs *\/$/;"	v	file:
min_sched_shares_ratelimit	kernel/sysctl.c	/^static int min_sched_shares_ratelimit = 100000; \/* 100 usec *\/$/;"	v	file:
min_sched_tunable_scaling	kernel/sysctl.c	/^static int min_sched_tunable_scaling = SCHED_TUNABLESCALING_NONE;$/;"	v	file:
min_time	mm/slub.c	/^	long min_time;$/;"	m	struct:location	file:
min_vruntime	kernel/sched.c	/^	u64 min_vruntime;$/;"	m	struct:cfs_rq	file:
min_vruntime	kernel/sched_fair.c	/^static inline u64 min_vruntime(u64 min_vruntime, u64 vruntime)$/;"	f	file:
min_wakeup_granularity_ns	kernel/sysctl.c	/^static int min_wakeup_granularity_ns;			\/* 0 usecs *\/$/;"	v	file:
mincore_page	mm/mincore.c	/^static unsigned char mincore_page(struct address_space *mapping, pgoff_t pgoff)$/;"	f	file:
minolduid	kernel/sysctl.c	/^static int minolduid;$/;"	v	file:
minorct	fs/char_dev.c	/^	int minorct;$/;"	m	struct:char_device_struct	file:
misc_format	fs/binfmt_misc.c	/^static struct linux_binfmt misc_format = {$/;"	v	typeref:struct:linux_binfmt	file:
mk_pid	kernel/pid.c	/^static inline int mk_pid(struct pid_namespace *pid_ns,$/;"	f	file:
mk_reply	kernel/taskstats.c	/^static struct taskstats *mk_reply(struct sk_buff *skb, int type, u32 pid)$/;"	f	file:
mktime	kernel/time.c	/^EXPORT_SYMBOL(mktime);$/;"	v
mktime	kernel/time.c	/^mktime(const unsigned int year0, const unsigned int mon0,$/;"	f
mlock	mm/memory-failure.c	717;"	d	file:
mlock	mm/memory-failure.c	774;"	d	file:
mlock_fixup	mm/mlock.c	/^static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,$/;"	f	file:
mlock_migrate_page	mm/internal.h	/^static inline void mlock_migrate_page(struct page *new, struct page *old) { }$/;"	f
mlock_migrate_page	mm/internal.h	/^static inline void mlock_migrate_page(struct page *newpage, struct page *page)$/;"	f
mlock_vma_page	mm/internal.h	/^static inline void mlock_vma_page(struct page *page) { }$/;"	f
mlock_vma_page	mm/mlock.c	/^void mlock_vma_page(struct page *page)$/;"	f
mlock_vma_pages_range	mm/mlock.c	/^long mlock_vma_pages_range(struct vm_area_struct *vma,$/;"	f
mm	kernel/auditsc.c	/^	struct mm_struct *mm;$/;"	m	struct:audit_aux_data_execve	typeref:struct:audit_aux_data_execve::mm_struct	file:
mm	mm/ksm.c	/^	struct mm_struct *mm;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::mm_struct	file:
mm	mm/ksm.c	/^	struct mm_struct *mm;$/;"	m	struct:rmap_item	typeref:struct:rmap_item::mm_struct	file:
mm_alloc	kernel/fork.c	/^struct mm_struct * mm_alloc(void)$/;"	f
mm_alloc_pgd	kernel/fork.c	/^static inline int mm_alloc_pgd(struct mm_struct * mm)$/;"	f	file:
mm_alloc_pgd	kernel/fork.c	416;"	d	file:
mm_cachep	kernel/fork.c	/^static struct kmem_cache *mm_cachep;$/;"	v	typeref:struct:kmem_cache	file:
mm_drop_all_locks	mm/mmap.c	/^void mm_drop_all_locks(struct mm_struct *mm)$/;"	f
mm_free_pgd	kernel/fork.c	/^static inline void mm_free_pgd(struct mm_struct * mm)$/;"	f	file:
mm_free_pgd	kernel/fork.c	417;"	d	file:
mm_init	kernel/fork.c	/^static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)$/;"	f	file:
mm_init_aio	kernel/fork.c	/^static void mm_init_aio(struct mm_struct *mm)$/;"	f	file:
mm_init_owner	kernel/fork.c	/^void mm_init_owner(struct mm_struct *mm, struct task_struct *p)$/;"	f
mm_kobj	mm/mm_init.c	/^EXPORT_SYMBOL_GPL(mm_kobj);$/;"	v
mm_kobj	mm/mm_init.c	/^struct kobject *mm_kobj;$/;"	v	typeref:struct:kobject
mm_list	mm/ksm.c	/^	struct list_head mm_list;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::list_head	file:
mm_need_new_owner	kernel/exit.c	/^mm_need_new_owner(struct mm_struct *mm, struct task_struct *p)$/;"	f	file:
mm_release	kernel/fork.c	/^void mm_release(struct task_struct *tsk, struct mm_struct *mm)$/;"	f
mm_slot	mm/ksm.c	/^	struct mm_slot *mm_slot;$/;"	m	struct:ksm_scan	typeref:struct:ksm_scan::mm_slot	file:
mm_slot	mm/ksm.c	/^struct mm_slot {$/;"	s	file:
mm_slot_cache	mm/ksm.c	/^static struct kmem_cache *mm_slot_cache;$/;"	v	typeref:struct:kmem_cache	file:
mm_slots_hash	mm/ksm.c	/^static struct hlist_head *mm_slots_hash;$/;"	v	typeref:struct:hlist_head	file:
mm_slots_hash_free	mm/ksm.c	/^static void __init mm_slots_hash_free(void)$/;"	f	file:
mm_slots_hash_init	mm/ksm.c	/^static int __init mm_slots_hash_init(void)$/;"	f	file:
mm_sysfs_init	mm/mm_init.c	/^__initcall(mm_sysfs_init);$/;"	v
mm_sysfs_init	mm/mm_init.c	/^static int __init mm_sysfs_init(void)$/;"	f	file:
mm_take_all_locks	mm/mmap.c	/^int mm_take_all_locks(struct mm_struct *mm)$/;"	f
mm_update_next_owner	kernel/exit.c	/^void mm_update_next_owner(struct mm_struct *mm)$/;"	f
mmap_init	mm/mmap.c	/^void __init mmap_init(void)$/;"	f
mmap_init	mm/nommu.c	/^void __init mmap_init(void)$/;"	f
mmap_pages_allocated	mm/nommu.c	/^atomic_long_t mmap_pages_allocated;$/;"	v
mmap_region	mm/mmap.c	/^unsigned long mmap_region(struct file *file, unsigned long addr,$/;"	f
mminit_dprintk	mm/internal.h	/^static inline void mminit_dprintk(enum mminit_level level,$/;"	f
mminit_dprintk	mm/internal.h	199;"	d
mminit_level	mm/internal.h	/^enum mminit_level {$/;"	g
mminit_loglevel	mm/mm_init.c	/^int mminit_loglevel;$/;"	v
mminit_validate_memmodel_limits	mm/internal.h	/^static inline void mminit_validate_memmodel_limits(unsigned long *start_pfn,$/;"	f
mminit_validate_memmodel_limits	mm/sparse.c	/^void __meminit mminit_validate_memmodel_limits(unsigned long *start_pfn,$/;"	f
mminit_verify_page_links	mm/internal.h	/^static inline void mminit_verify_page_links(struct page *page,$/;"	f
mminit_verify_page_links	mm/mm_init.c	/^void __meminit mminit_verify_page_links(struct page *page, enum zone_type zone,$/;"	f
mminit_verify_pageflags_layout	mm/internal.h	/^static inline void mminit_verify_pageflags_layout(void)$/;"	f
mminit_verify_pageflags_layout	mm/mm_init.c	/^void __init mminit_verify_pageflags_layout(void)$/;"	f
mminit_verify_zonelist	mm/internal.h	/^static inline void mminit_verify_zonelist(void)$/;"	f
mminit_verify_zonelist	mm/mm_init.c	/^void mminit_verify_zonelist(void)$/;"	f
mmput	kernel/fork.c	/^EXPORT_SYMBOL_GPL(mmput);$/;"	v
mmput	kernel/fork.c	/^void mmput(struct mm_struct *mm)$/;"	f
mmu-y	mm/Makefile	/^mmu-y			:= nommu.o$/;"	m
mmu_notifier_register	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_register);$/;"	v
mmu_notifier_register	mm/mmu_notifier.c	/^int mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
mmu_notifier_unregister	mm/mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_unregister);$/;"	v
mmu_notifier_unregister	mm/mmu_notifier.c	/^void mmu_notifier_unregister(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
mnt_alloc_group_id	fs/namespace.c	/^static int mnt_alloc_group_id(struct vfsmount *mnt)$/;"	f	file:
mnt_alloc_id	fs/namespace.c	/^static int mnt_alloc_id(struct vfsmount *mnt)$/;"	f	file:
mnt_clone_write	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_clone_write);$/;"	v
mnt_clone_write	fs/namespace.c	/^int mnt_clone_write(struct vfsmount *mnt)$/;"	f
mnt_drop_write	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_drop_write);$/;"	v
mnt_drop_write	fs/namespace.c	/^void mnt_drop_write(struct vfsmount *mnt)$/;"	f
mnt_free_id	fs/namespace.c	/^static void mnt_free_id(struct vfsmount *mnt)$/;"	f	file:
mnt_group_start	fs/namespace.c	/^static int mnt_group_start = 1;$/;"	v	file:
mnt_id_start	fs/namespace.c	/^static int mnt_id_start = 0;$/;"	v	file:
mnt_init	fs/namespace.c	/^void __init mnt_init(void)$/;"	f
mnt_make_readonly	fs/namespace.c	/^static int mnt_make_readonly(struct vfsmount *mnt)$/;"	f	file:
mnt_path	fs/compat.c	/^	struct compat_nfs_string mnt_path;$/;"	m	struct:compat_nfs4_mount_data_v1	typeref:struct:compat_nfs4_mount_data_v1::compat_nfs_string	file:
mnt_pin	fs/namespace.c	/^EXPORT_SYMBOL(mnt_pin);$/;"	v
mnt_pin	fs/namespace.c	/^void mnt_pin(struct vfsmount *mnt)$/;"	f
mnt_release_group_id	fs/namespace.c	/^void mnt_release_group_id(struct vfsmount *mnt)$/;"	f
mnt_set_mountpoint	fs/namespace.c	/^void mnt_set_mountpoint(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
mnt_unpin	fs/namespace.c	/^EXPORT_SYMBOL(mnt_unpin);$/;"	v
mnt_unpin	fs/namespace.c	/^void mnt_unpin(struct vfsmount *mnt)$/;"	f
mnt_want_write	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_want_write);$/;"	v
mnt_want_write	fs/namespace.c	/^int mnt_want_write(struct vfsmount *mnt)$/;"	f
mnt_want_write_file	fs/namespace.c	/^EXPORT_SYMBOL_GPL(mnt_want_write_file);$/;"	v
mnt_want_write_file	fs/namespace.c	/^int mnt_want_write_file(struct file *file)$/;"	f
mntput_no_expire	fs/namespace.c	/^EXPORT_SYMBOL(mntput_no_expire);$/;"	v
mntput_no_expire	fs/namespace.c	/^void mntput_no_expire(struct vfsmount *mnt)$/;"	f
mod	kernel/cpu.c	/^	unsigned long mod;$/;"	m	struct:take_cpu_down_param	file:
mod	kernel/module.c	/^	struct module *mod;$/;"	m	struct:stopref	typeref:struct:stopref::module	file:
mod_find_symname	kernel/module.c	/^static unsigned long mod_find_symname(struct module *mod, const char *name)$/;"	f	file:
mod_kobject_remove	kernel/module.c	/^static void mod_kobject_remove(struct module *mod)$/;"	f	file:
mod_sysfs_fini	kernel/module.c	/^static void mod_sysfs_fini(struct module *mod)$/;"	f	file:
mod_sysfs_init	kernel/module.c	/^int mod_sysfs_init(struct module *mod)$/;"	f
mod_sysfs_setup	kernel/module.c	/^int mod_sysfs_setup(struct module *mod,$/;"	f
mod_timer	kernel/timer.c	/^EXPORT_SYMBOL(mod_timer);$/;"	v
mod_timer	kernel/timer.c	/^int mod_timer(struct timer_list *timer, unsigned long expires)$/;"	f
mod_timer_pending	kernel/timer.c	/^EXPORT_SYMBOL(mod_timer_pending);$/;"	v
mod_timer_pending	kernel/timer.c	/^int mod_timer_pending(struct timer_list *timer, unsigned long expires)$/;"	f
mod_timer_pinned	kernel/timer.c	/^EXPORT_SYMBOL(mod_timer_pinned);$/;"	v
mod_timer_pinned	kernel/timer.c	/^int mod_timer_pinned(struct timer_list *timer, unsigned long expires)$/;"	f
mod_zone_page_state	mm/vmstat.c	/^EXPORT_SYMBOL(mod_zone_page_state);$/;"	v
mod_zone_page_state	mm/vmstat.c	/^void mod_zone_page_state(struct zone *zone, enum zone_stat_item item,$/;"	f
mode	kernel/auditsc.c	/^			mode_t			mode;$/;"	m	struct:audit_context::__anon22::__anon24	file:
mode	kernel/auditsc.c	/^			mode_t			mode;$/;"	m	struct:audit_context::__anon22::__anon28	file:
mode	kernel/auditsc.c	/^	umode_t		mode;$/;"	m	struct:audit_names	file:
mode1_syscalls	kernel/seccomp.c	/^static int mode1_syscalls[] = {$/;"	v	file:
mode1_syscalls_32	kernel/seccomp.c	/^static int mode1_syscalls_32[] = {$/;"	v	file:
modify_user_hw_breakpoint	kernel/hw_breakpoint.c	/^EXPORT_SYMBOL_GPL(modify_user_hw_breakpoint);$/;"	v
modify_user_hw_breakpoint	kernel/hw_breakpoint.c	/^int modify_user_hw_breakpoint(struct perf_event *bp, struct perf_event_attr *attr)$/;"	f
modinfo_attrs	kernel/module.c	/^static struct module_attribute *modinfo_attrs[] = {$/;"	v	typeref:struct:module_attribute	file:
modprobe_path	kernel/kmod.c	/^char modprobe_path[KMOD_PATH_LEN] = "\/sbin\/modprobe";$/;"	v
module_add_modinfo_attrs	kernel/module.c	/^int module_add_modinfo_attrs(struct module *mod)$/;"	f
module_addr_max	kernel/module.c	/^static unsigned long module_addr_min = -1UL, module_addr_max = 0;$/;"	v	file:
module_addr_min	kernel/module.c	/^static unsigned long module_addr_min = -1UL, module_addr_max = 0;$/;"	v	file:
module_address_lookup	kernel/module.c	/^const char *module_address_lookup(unsigned long addr,$/;"	f
module_alloc_update_bounds	kernel/module.c	/^static void *module_alloc_update_bounds(unsigned long size)$/;"	f	file:
module_attr_show	kernel/params.c	/^static ssize_t module_attr_show(struct kobject *kobj,$/;"	f	file:
module_attr_store	kernel/params.c	/^static ssize_t module_attr_store(struct kobject *kobj,$/;"	f	file:
module_flags	kernel/module.c	/^static char *module_flags(struct module *mod, char *buf)$/;"	f	file:
module_get	kernel/module.c	/^EXPORT_TRACEPOINT_SYMBOL(module_get);$/;"	v
module_get_iter_tracepoints	kernel/module.c	/^int module_get_iter_tracepoints(struct tracepoint_iter *iter)$/;"	f
module_get_kallsym	kernel/module.c	/^int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,$/;"	f
module_init	kernel/kexec.c	/^module_init(crash_save_vmcoreinfo_init)$/;"	f
module_init	mm/page_alloc.c	/^module_init(init_per_zone_wmark_min)$/;"	f
module_kallsyms_lookup_name	kernel/module.c	/^unsigned long module_kallsyms_lookup_name(const char *name)$/;"	f
module_kallsyms_on_each_symbol	kernel/module.c	/^int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,$/;"	f
module_kset	kernel/params.c	/^struct kset *module_kset;$/;"	v	typeref:struct:kset
module_ktype	kernel/params.c	/^struct kobj_type module_ktype = {$/;"	v	typeref:struct:kobj_type
module_layout	kernel/module.c	/^EXPORT_SYMBOL(module_layout);$/;"	v
module_layout	kernel/module.c	/^void module_layout(struct module *mod,$/;"	f
module_mutex	kernel/module.c	/^DEFINE_MUTEX(module_mutex);$/;"	v
module_mutex	kernel/module.c	/^EXPORT_SYMBOL_GPL(module_mutex);$/;"	v
module_name	kernel/kallsyms.c	/^	char module_name[MODULE_NAME_LEN];$/;"	m	struct:kallsym_iter	file:
module_notes_attrs	kernel/module.c	/^struct module_notes_attrs {$/;"	s	file:
module_notes_read	kernel/module.c	/^static ssize_t module_notes_read(struct kobject *kobj,$/;"	f	file:
module_param_attrs	kernel/params.c	/^struct module_param_attrs$/;"	s	file:
module_param_sysfs_remove	kernel/params.c	/^void module_param_sysfs_remove(struct module *mod)$/;"	f
module_param_sysfs_setup	kernel/params.c	/^int module_param_sysfs_setup(struct module *mod,$/;"	f
module_put	kernel/module.c	/^EXPORT_SYMBOL(module_put);$/;"	v
module_put	kernel/module.c	/^void module_put(struct module *module)$/;"	f
module_refcount	kernel/module.c	/^EXPORT_SYMBOL(module_refcount);$/;"	v
module_refcount	kernel/module.c	/^unsigned int module_refcount(struct module *mod)$/;"	f
module_remove_modinfo_attrs	kernel/module.c	/^void module_remove_modinfo_attrs(struct module *mod)$/;"	f
module_sect_attr	kernel/module.c	/^struct module_sect_attr$/;"	s	file:
module_sect_attrs	kernel/module.c	/^struct module_sect_attrs$/;"	s	file:
module_sect_show	kernel/module.c	/^static ssize_t module_sect_show(struct module_attribute *mattr,$/;"	f	file:
module_sysfs_initialized	kernel/params.c	/^int module_sysfs_initialized;$/;"	v
module_sysfs_ops	kernel/params.c	/^static struct sysfs_ops module_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
module_uevent_ops	kernel/params.c	/^static struct kset_uevent_ops module_uevent_ops = {$/;"	v	typeref:struct:kset_uevent_ops	file:
module_unload_free	kernel/module.c	/^static inline void module_unload_free(struct module *mod)$/;"	f	file:
module_unload_free	kernel/module.c	/^static void module_unload_free(struct module *mod)$/;"	f	file:
module_unload_init	kernel/module.c	/^static inline void module_unload_init(struct module *mod)$/;"	f	file:
module_unload_init	kernel/module.c	/^static void module_unload_init(struct module *mod)$/;"	f	file:
module_update_tracepoints	kernel/module.c	/^void module_update_tracepoints(void)$/;"	f
module_use	kernel/module.c	/^struct module_use$/;"	s	file:
module_which_uses	kernel/module.c	/^	struct module *module_which_uses;$/;"	m	struct:module_use	typeref:struct:module_use::module	file:
modules_disabled	kernel/module.c	/^int modules_disabled = 0;$/;"	v
modules_op	kernel/module.c	/^static const struct seq_operations modules_op = {$/;"	v	typeref:struct:seq_operations	file:
modules_open	kernel/module.c	/^static int modules_open(struct inode *inode, struct file *file)$/;"	f	file:
more_work	kernel/workqueue.c	/^	wait_queue_head_t more_work;$/;"	m	struct:cpu_workqueue_struct	file:
mount_is_safe	fs/namespace.c	/^static int mount_is_safe(struct path *path)$/;"	f	file:
mounted_uid	fs/compat.c	/^	__compat_uid_t mounted_uid;$/;"	m	struct:compat_ncp_mount_data	file:
mounted_uid	fs/compat.c	/^	__compat_uid_t mounted_uid;$/;"	m	struct:compat_smb_mount_data	file:
mounted_uid	fs/compat.c	/^	compat_ulong_t mounted_uid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
mounted_vol	fs/compat.c	/^	unsigned char mounted_vol[NCP_VOLNAME_LEN + 1];$/;"	m	struct:compat_ncp_mount_data	file:
mountinfo_op	fs/namespace.c	/^const struct seq_operations mountinfo_op = {$/;"	v	typeref:struct:seq_operations
mounts_op	fs/namespace.c	/^const struct seq_operations mounts_op = {$/;"	v	typeref:struct:seq_operations
mountstats_op	fs/namespace.c	/^const struct seq_operations mountstats_op = {$/;"	v	typeref:struct:seq_operations
movable_zone	mm/page_alloc.c	/^  EXPORT_SYMBOL(movable_zone);$/;"	v
movable_zone	mm/page_alloc.c	/^  int movable_zone;$/;"	v
move_active_pages_to_lru	mm/vmscan.c	/^static void move_active_pages_to_lru(struct zone *zone,$/;"	f	file:
move_expired_inodes	fs/fs-writeback.c	/^static void move_expired_inodes(struct list_head *delaying_queue,$/;"	f	file:
move_freepages	mm/page_alloc.c	/^static int move_freepages(struct zone *zone,$/;"	f	file:
move_freepages_block	mm/page_alloc.c	/^static int move_freepages_block(struct zone *zone, struct page *page,$/;"	f	file:
move_member_tasks_to_cpuset	kernel/cpuset.c	/^static void move_member_tasks_to_cpuset(struct cpuset *from, struct cpuset *to)$/;"	f	file:
move_one_task	kernel/sched.c	/^static int move_one_task(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
move_one_task_fair	kernel/sched_fair.c	/^move_one_task_fair(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
move_one_task_idle	kernel/sched_idletask.c	/^move_one_task_idle(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
move_one_task_rt	kernel/sched_rt.c	/^move_one_task_rt(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
move_page_tables	mm/mremap.c	/^unsigned long move_page_tables(struct vm_area_struct *vma,$/;"	f
move_ptes	mm/mremap.c	/^static void move_ptes(struct vm_area_struct *vma, pmd_t *old_pmd,$/;"	f	file:
move_task_off_dead_cpu	kernel/sched.c	/^static void move_task_off_dead_cpu(int dead_cpu, struct task_struct *p)$/;"	f	file:
move_tasks	kernel/sched.c	/^static int move_tasks(struct rq *this_rq, int this_cpu, struct rq *busiest,$/;"	f	file:
move_to_new_page	mm/migrate.c	/^static int move_to_new_page(struct page *newpage, struct page *page)$/;"	f	file:
move_vma	mm/mremap.c	/^static unsigned long move_vma(struct vm_area_struct *vma,$/;"	f	file:
moved_group_fair	kernel/sched_fair.c	/^static void moved_group_fair(struct task_struct *p, int on_rq)$/;"	f	file:
mpage_alloc	fs/mpage.c	/^mpage_alloc(struct block_device *bdev,$/;"	f	file:
mpage_bio_submit	fs/mpage.c	/^static struct bio *mpage_bio_submit(int rw, struct bio *bio)$/;"	f	file:
mpage_data	fs/mpage.c	/^struct mpage_data {$/;"	s	file:
mpage_end_io_read	fs/mpage.c	/^static void mpage_end_io_read(struct bio *bio, int err)$/;"	f	file:
mpage_end_io_write	fs/mpage.c	/^static void mpage_end_io_write(struct bio *bio, int err)$/;"	f	file:
mpage_readpage	fs/mpage.c	/^EXPORT_SYMBOL(mpage_readpage);$/;"	v
mpage_readpage	fs/mpage.c	/^int mpage_readpage(struct page *page, get_block_t get_block)$/;"	f
mpage_readpages	fs/mpage.c	/^EXPORT_SYMBOL(mpage_readpages);$/;"	v
mpage_readpages	fs/mpage.c	/^mpage_readpages(struct address_space *mapping, struct list_head *pages,$/;"	f
mpage_writepage	fs/mpage.c	/^EXPORT_SYMBOL(mpage_writepage);$/;"	v
mpage_writepage	fs/mpage.c	/^int mpage_writepage(struct page *page, get_block_t get_block,$/;"	f
mpage_writepages	fs/mpage.c	/^EXPORT_SYMBOL(mpage_writepages);$/;"	v
mpage_writepages	fs/mpage.c	/^mpage_writepages(struct address_space *mapping,$/;"	f
mpol_fix_fork_child_flag	mm/mempolicy.c	/^void mpol_fix_fork_child_flag(struct task_struct *p)$/;"	f
mpol_free_shared_policy	mm/mempolicy.c	/^void mpol_free_shared_policy(struct shared_policy *p)$/;"	f
mpol_match_intent	mm/mempolicy.c	/^static int mpol_match_intent(const struct mempolicy *a,$/;"	f	file:
mpol_new	mm/mempolicy.c	/^static struct mempolicy *mpol_new(unsigned short mode, unsigned short flags,$/;"	f	file:
mpol_new_bind	mm/mempolicy.c	/^static int mpol_new_bind(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_new_interleave	mm/mempolicy.c	/^static int mpol_new_interleave(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_new_preferred	mm/mempolicy.c	/^static int mpol_new_preferred(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_ops	mm/mempolicy.c	/^static const struct mempolicy_operations mpol_ops[MPOL_MAX] = {$/;"	v	typeref:struct:mempolicy_operations	file:
mpol_ops	mm/mempolicy.c	/^} mpol_ops[MPOL_MAX];$/;"	v	typeref:struct:mempolicy_operations	file:
mpol_parse_str	mm/mempolicy.c	/^int mpol_parse_str(char *str, struct mempolicy **mpol, int no_context)$/;"	f
mpol_rebind_default	mm/mempolicy.c	/^static void mpol_rebind_default(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_rebind_mm	mm/mempolicy.c	/^void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new)$/;"	f
mpol_rebind_nodemask	mm/mempolicy.c	/^static void mpol_rebind_nodemask(struct mempolicy *pol,$/;"	f	file:
mpol_rebind_policy	mm/mempolicy.c	/^static void mpol_rebind_policy(struct mempolicy *pol,$/;"	f	file:
mpol_rebind_preferred	mm/mempolicy.c	/^static void mpol_rebind_preferred(struct mempolicy *pol,$/;"	f	file:
mpol_rebind_task	mm/mempolicy.c	/^void mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new)$/;"	f
mpol_relative_nodemask	mm/mempolicy.c	/^static void mpol_relative_nodemask(nodemask_t *ret, const nodemask_t *orig,$/;"	f	file:
mpol_set_nodemask	mm/mempolicy.c	/^static int mpol_set_nodemask(struct mempolicy *pol,$/;"	f	file:
mpol_set_shared_policy	mm/mempolicy.c	/^int mpol_set_shared_policy(struct shared_policy *info,$/;"	f
mpol_set_task_struct_flag	mm/mempolicy.c	/^static void mpol_set_task_struct_flag(void)$/;"	f	file:
mpol_shared_policy_init	mm/mempolicy.c	/^void mpol_shared_policy_init(struct shared_policy *sp, struct mempolicy *mpol)$/;"	f
mpol_shared_policy_lookup	mm/mempolicy.c	/^mpol_shared_policy_lookup(struct shared_policy *sp, unsigned long idx)$/;"	f
mpol_store_user_nodemask	mm/mempolicy.c	/^static inline int mpol_store_user_nodemask(const struct mempolicy *pol)$/;"	f	file:
mpol_to_str	mm/mempolicy.c	/^int mpol_to_str(char *buffer, int maxlen, struct mempolicy *pol, int no_context)$/;"	f
mprotect_fixup	mm/mprotect.c	/^mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,$/;"	f
mq_getsetattr	kernel/auditsc.c	/^		} mq_getsetattr;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon25	file:
mq_notify	kernel/auditsc.c	/^		} mq_notify;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon26	file:
mq_open	kernel/auditsc.c	/^		} mq_open;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon28	file:
mq_sendrecv	kernel/auditsc.c	/^		} mq_sendrecv;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon27	file:
mqdes	kernel/auditsc.c	/^			mqd_t			mqdes;$/;"	m	struct:audit_context::__anon22::__anon25	file:
mqdes	kernel/auditsc.c	/^			mqd_t			mqdes;$/;"	m	struct:audit_context::__anon22::__anon26	file:
mqdes	kernel/auditsc.c	/^			mqd_t			mqdes;$/;"	m	struct:audit_context::__anon22::__anon27	file:
mqstat	kernel/auditsc.c	/^			struct mq_attr 		mqstat;$/;"	m	struct:audit_context::__anon22::__anon25	typeref:struct:audit_context::__anon22::__anon25::mq_attr	file:
mremap_to	mm/mremap.c	/^static unsigned long mremap_to(unsigned long addr,$/;"	f	file:
msecs_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(msecs_to_jiffies);$/;"	v
msecs_to_jiffies	kernel/time.c	/^unsigned long msecs_to_jiffies(const unsigned int m)$/;"	f
msg	mm/memory-failure.c	/^	char *msg;$/;"	m	struct:page_state	file:
msg_len	kernel/auditsc.c	/^			size_t			msg_len;$/;"	m	struct:audit_context::__anon22::__anon27	file:
msg_prio	kernel/auditsc.c	/^			unsigned int		msg_prio;$/;"	m	struct:audit_context::__anon22::__anon27	file:
msg_status	fs/compat_ioctl.c	/^	unsigned char msg_status;		\/* [o] messaging level data (optional) *\/$/;"	m	struct:sg_io_hdr32	file:
msgs	fs/compat_ioctl.c	/^	compat_caddr_t msgs; \/* struct i2c_msg __user *msgs *\/$/;"	m	struct:i2c_rdwr_ioctl_data32	file:
msgs	fs/compat_ioctl.c	/^	struct i2c_msg msgs[0];$/;"	m	struct:i2c_rdwr_aligned	typeref:struct:i2c_rdwr_aligned::i2c_msg	file:
msleep	kernel/timer.c	/^EXPORT_SYMBOL(msleep);$/;"	v
msleep	kernel/timer.c	/^void msleep(unsigned int msecs)$/;"	f
msleep_interruptible	kernel/timer.c	/^EXPORT_SYMBOL(msleep_interruptible);$/;"	v
msleep_interruptible	kernel/timer.c	/^unsigned long msleep_interruptible(unsigned int msecs)$/;"	f
mt_blkno	fs/compat_ioctl.c	/^	compat_daddr_t	mt_blkno;$/;"	m	struct:mtget32	file:
mt_blkno	fs/compat_ioctl.c	/^	compat_long_t	mt_blkno;$/;"	m	struct:mtpos32	file:
mt_dsreg	fs/compat_ioctl.c	/^	compat_long_t	mt_dsreg;$/;"	m	struct:mtget32	file:
mt_erreg	fs/compat_ioctl.c	/^	compat_long_t	mt_erreg;$/;"	m	struct:mtget32	file:
mt_fileno	fs/compat_ioctl.c	/^	compat_daddr_t	mt_fileno;$/;"	m	struct:mtget32	file:
mt_gstat	fs/compat_ioctl.c	/^	compat_long_t	mt_gstat;$/;"	m	struct:mtget32	file:
mt_ioctl_trans	fs/compat_ioctl.c	/^static int mt_ioctl_trans(unsigned int fd, unsigned int cmd, void __user *argp)$/;"	f	file:
mt_resid	fs/compat_ioctl.c	/^	compat_long_t	mt_resid;$/;"	m	struct:mtget32	file:
mt_type	fs/compat_ioctl.c	/^	compat_long_t	mt_type;$/;"	m	struct:mtget32	file:
mtget32	fs/compat_ioctl.c	/^struct mtget32 {$/;"	s	file:
mtpos32	fs/compat_ioctl.c	/^struct mtpos32 {$/;"	s	file:
mtx	fs/eventpoll.c	/^	struct mutex mtx;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::mutex	file:
muladj	kernel/timeconst.pl	/^sub muladj($$$) {$/;"	s
munlock_vma_page	mm/mlock.c	/^void munlock_vma_page(struct page *page)$/;"	f
munlock_vma_pages_all	mm/internal.h	/^static inline void munlock_vma_pages_all(struct vm_area_struct *vma)$/;"	f
munlock_vma_pages_range	mm/mlock.c	/^void munlock_vma_pages_range(struct vm_area_struct *vma,$/;"	f
mutex	fs/libfs.c	/^	struct mutex mutex;	\/* protects access to these buffers *\/$/;"	m	struct:simple_attr	typeref:struct:simple_attr::mutex	file:
mutex	fs/notify/inotify/inotify.c	/^	struct mutex		mutex;		\/* protects this bad boy *\/$/;"	m	struct:inotify_handle	typeref:struct:inotify_handle::mutex	file:
mutex_clear_owner	kernel/mutex-debug.h	/^static inline void mutex_clear_owner(struct mutex *lock)$/;"	f
mutex_clear_owner	kernel/mutex.h	/^static inline void mutex_clear_owner(struct mutex *lock)$/;"	f
mutex_destroy	kernel/mutex-debug.c	/^EXPORT_SYMBOL_GPL(mutex_destroy);$/;"	v
mutex_destroy	kernel/mutex-debug.c	/^void mutex_destroy(struct mutex *lock)$/;"	f
mutex_lock	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_lock);$/;"	v
mutex_lock	kernel/mutex.c	/^void __sched mutex_lock(struct mutex *lock)$/;"	f
mutex_lock_interruptible	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_lock_interruptible);$/;"	v
mutex_lock_interruptible	kernel/mutex.c	/^int __sched mutex_lock_interruptible(struct mutex *lock)$/;"	f
mutex_lock_interruptible_nested	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(mutex_lock_interruptible_nested);$/;"	v
mutex_lock_interruptible_nested	kernel/mutex.c	/^mutex_lock_interruptible_nested(struct mutex *lock, unsigned int subclass)$/;"	f
mutex_lock_killable	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_lock_killable);$/;"	v
mutex_lock_killable	kernel/mutex.c	/^int __sched mutex_lock_killable(struct mutex *lock)$/;"	f
mutex_lock_killable_nested	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(mutex_lock_killable_nested);$/;"	v
mutex_lock_killable_nested	kernel/mutex.c	/^mutex_lock_killable_nested(struct mutex *lock, unsigned int subclass)$/;"	f
mutex_lock_nested	kernel/mutex.c	/^EXPORT_SYMBOL_GPL(mutex_lock_nested);$/;"	v
mutex_lock_nested	kernel/mutex.c	/^mutex_lock_nested(struct mutex *lock, unsigned int subclass)$/;"	f
mutex_remove_waiter	kernel/mutex-debug.c	/^void mutex_remove_waiter(struct mutex *lock, struct mutex_waiter *waiter,$/;"	f
mutex_remove_waiter	kernel/mutex.h	16;"	d
mutex_set_owner	kernel/mutex-debug.h	/^static inline void mutex_set_owner(struct mutex *lock)$/;"	f
mutex_set_owner	kernel/mutex.h	/^static inline void mutex_set_owner(struct mutex *lock)$/;"	f
mutex_spin_on_owner	kernel/sched.c	/^int mutex_spin_on_owner(struct mutex *lock, struct thread_info *owner)$/;"	f
mutex_trylock	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_trylock);$/;"	v
mutex_trylock	kernel/mutex.c	/^int __sched mutex_trylock(struct mutex *lock)$/;"	f
mutex_unlock	kernel/mutex.c	/^EXPORT_SYMBOL(mutex_unlock);$/;"	v
mutex_unlock	kernel/mutex.c	/^void __sched mutex_unlock(struct mutex *lock)$/;"	f
mutexes	kernel/rtmutex-tester.c	/^	int			mutexes[MAX_RT_TEST_MUTEXES];$/;"	m	struct:test_thread_data	file:
mutexes	kernel/rtmutex-tester.c	/^static struct rt_mutex mutexes[MAX_RT_TEST_MUTEXES];$/;"	v	typeref:struct:rt_mutex	file:
mx_sb_len	fs/compat_ioctl.c	/^	unsigned char mx_sb_len;		\/* [i] max length to write to sbp *\/$/;"	m	struct:sg_io_hdr32	file:
my_zero_pfn	mm/memory.c	/^static inline unsigned long my_zero_pfn(unsigned long addr)$/;"	f	file:
mynode	kernel/rcutree.h	/^	struct rcu_node *mynode;	\/* This CPU's leaf of hierarchy *\/$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_node
n	kernel/resource.c	/^	resource_size_t n;$/;"	m	struct:region_devres	file:
n_force_qs	kernel/rcutree.h	/^	unsigned long n_force_qs;		\/* Number of calls to *\/$/;"	m	struct:rcu_state
n_force_qs_lh	kernel/rcutree.h	/^	unsigned long n_force_qs_lh;		\/* ~Number of calls leaving *\/$/;"	m	struct:rcu_state
n_force_qs_ngp	kernel/rcutree.h	/^	unsigned long n_force_qs_ngp;		\/* Number of calls leaving *\/$/;"	m	struct:rcu_state
n_force_qs_snap	kernel/rcutree.h	/^	unsigned long	n_force_qs_snap;$/;"	m	struct:rcu_data
n_rcu_pending	kernel/rcutree.h	/^	long n_rcu_pending;		\/* rcu_pending() calls since boot. *\/$/;"	m	struct:rcu_data
n_rcu_torture_alloc	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_alloc;$/;"	v	file:
n_rcu_torture_alloc_fail	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_alloc_fail;$/;"	v	file:
n_rcu_torture_error	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_error;$/;"	v	file:
n_rcu_torture_free	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_free;$/;"	v	file:
n_rcu_torture_mberror	kernel/rcutorture.c	/^static atomic_t n_rcu_torture_mberror;$/;"	v	file:
n_rcu_torture_timers	kernel/rcutorture.c	/^static long n_rcu_torture_timers;$/;"	v	file:
n_rp_cb_ready	kernel/rcutree.h	/^	long n_rp_cb_ready;$/;"	m	struct:rcu_data
n_rp_cpu_needs_gp	kernel/rcutree.h	/^	long n_rp_cpu_needs_gp;$/;"	m	struct:rcu_data
n_rp_gp_completed	kernel/rcutree.h	/^	long n_rp_gp_completed;$/;"	m	struct:rcu_data
n_rp_gp_started	kernel/rcutree.h	/^	long n_rp_gp_started;$/;"	m	struct:rcu_data
n_rp_need_fqs	kernel/rcutree.h	/^	long n_rp_need_fqs;$/;"	m	struct:rcu_data
n_rp_need_nothing	kernel/rcutree.h	/^	long n_rp_need_nothing;$/;"	m	struct:rcu_data
n_rp_qs_pending	kernel/rcutree.h	/^	long n_rp_qs_pending;$/;"	m	struct:rcu_data
name	fs/binfmt_elf.c	/^	const char *name;$/;"	m	struct:memelfnote	file:
name	fs/binfmt_elf_fdpic.c	/^	const char *name;$/;"	m	struct:memelfnote	file:
name	fs/binfmt_misc.c	/^	char *name;$/;"	m	struct:__anon16	file:
name	fs/bio-integrity.c	/^	char name[8];$/;"	m	struct:integrity_slab	file:
name	fs/bio.c	/^	char name[8];$/;"	m	struct:bio_slab	file:
name	fs/char_dev.c	/^	char name[64];$/;"	m	struct:char_device_struct	file:
name	fs/nfsctl.c	/^	char *name; int wsize; int rsize;$/;"	m	struct:__anon20	file:
name	kernel/auditsc.c	/^	const char	*name;$/;"	m	struct:audit_names	file:
name	kernel/cgroup.c	/^	char *name;$/;"	m	struct:cgroup_sb_opts	file:
name	kernel/cgroup.c	/^	char name[MAX_CGROUP_ROOT_NAMELEN];$/;"	m	struct:cgroupfs_root	file:
name	kernel/kallsyms.c	/^	char name[KSYM_NAME_LEN];$/;"	m	struct:kallsym_iter	file:
name	kernel/module.c	/^	char *name;$/;"	m	struct:module_sect_attr	file:
name	kernel/module.c	/^	const char *name;$/;"	m	struct:find_symbol_arg	file:
name	kernel/pid_namespace.c	/^	char name[16];$/;"	m	struct:pid_cache	file:
name	kernel/pm_qos_params.c	/^	char *name;$/;"	m	struct:pm_qos_object	file:
name	kernel/pm_qos_params.c	/^	char *name;$/;"	m	struct:requirement_list	file:
name	kernel/printk.c	/^	char	name[8];			\/* Name of the driver	    *\/$/;"	m	struct:console_cmdline	file:
name	kernel/rcutorture.c	/^	char *name;$/;"	m	struct:rcu_torture_ops	file:
name	kernel/sysctl_binary.c	/^	compat_uptr_t	name;$/;"	m	struct:compat_sysctl_args	file:
name	kernel/tracepoint.c	/^	char name[0];$/;"	m	struct:tracepoint_entry	file:
name	kernel/workqueue.c	/^	const char *name;$/;"	m	struct:workqueue_struct	file:
name	mm/dmapool.c	/^	char name[32];$/;"	m	struct:dma_pool	file:
name	mm/slab.c	/^	char *name;$/;"	m	struct:cache_names	file:
name	mm/slob.c	/^	const char *name;$/;"	m	struct:kmem_cache	file:
name	mm/slub.c	/^	const char *name;$/;"	m	struct:saved_alias	file:
name_count	kernel/auditsc.c	/^	int		    name_count;$/;"	m	struct:audit_context	file:
name_dma	mm/slab.c	/^	char *name_dma;$/;"	m	struct:cache_names	file:
name_len	kernel/auditsc.c	/^	int		name_len;	\/* number of name's characters to log *\/$/;"	m	struct:audit_names	file:
name_put	kernel/auditsc.c	/^	unsigned	name_put;	\/* call __putname() for this name *\/$/;"	m	struct:audit_names	file:
nameidata_to_filp	fs/open.c	/^struct file *nameidata_to_filp(struct nameidata *nd)$/;"	f
nameoff	kernel/kallsyms.c	/^	unsigned int nameoff; \/* If iterating in core kernel symbols. *\/$/;"	m	struct:kallsym_iter	file:
names	kernel/auditsc.c	/^	struct audit_names  names[AUDIT_NAMES];$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_names	file:
names_cachep	fs/dcache.c	/^EXPORT_SYMBOL(names_cachep);$/;"	v
namespace_sem	fs/namespace.c	/^static struct rw_semaphore namespace_sem;$/;"	v	typeref:struct:rw_semaphore	file:
nargs	kernel/auditsc.c	/^			int nargs;$/;"	m	struct:audit_context::__anon22::__anon23	file:
ncp_fd	fs/compat.c	/^	compat_uint_t ncp_fd;$/;"	m	struct:compat_ncp_mount_data	file:
ncp_fd	fs/compat.c	/^	compat_uint_t ncp_fd;$/;"	m	struct:compat_ncp_mount_data_v4	file:
nd	mm/memory-failure.c	/^	struct list_head nd;$/;"	m	struct:to_kill	typeref:struct:to_kill::list_head	file:
ndoms_cur	kernel/sched.c	/^static int ndoms_cur;		\/* number of sched domains in 'doms_cur' *\/$/;"	v	file:
nearest_hardwall_ancestor	kernel/cpuset.c	/^static const struct cpuset *nearest_hardwall_ancestor(const struct cpuset *cs)$/;"	f	file:
need_update	kernel/tracepoint.c	/^static int need_update;$/;"	v	file:
needcheck	kernel/acct.c	/^	volatile int		needcheck;$/;"	m	struct:bsd_acct_struct	file:
neg_one	kernel/sysctl.c	/^static int neg_one = -1;$/;"	v	file:
nested_call_node	fs/eventpoll.c	/^struct nested_call_node {$/;"	s	file:
nested_calls	fs/eventpoll.c	/^struct nested_calls {$/;"	s	file:
network_lat_pm_qos	kernel/pm_qos_params.c	/^static struct pm_qos_object network_lat_pm_qos = {$/;"	v	typeref:struct:pm_qos_object	file:
network_throughput_pm_qos	kernel/pm_qos_params.c	/^static struct pm_qos_object network_throughput_pm_qos = {$/;"	v	typeref:struct:pm_qos_object	file:
new	mm/slab.c	/^	struct array_cache *new[NR_CPUS];$/;"	m	struct:ccupdate_struct	typeref:struct:ccupdate_struct::array_cache	file:
new_inode	fs/inode.c	/^EXPORT_SYMBOL(new_inode);$/;"	v
new_inode	fs/inode.c	/^struct inode *new_inode(struct super_block *sb)$/;"	f
new_node_page	mm/mempolicy.c	/^static struct page *new_node_page(struct page *page, unsigned long node, int **x)$/;"	f	file:
new_page	mm/memory-failure.c	/^static struct page *new_page(struct page *p, unsigned long private, int **x)$/;"	f	file:
new_page_node	mm/migrate.c	/^static struct page *new_page_node(struct page *p, unsigned long private,$/;"	f	file:
new_pcap	kernel/auditsc.c	/^	struct audit_cap_data	new_pcap;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_cap_data	file:
new_root	kernel/cgroup.c	/^	struct cgroupfs_root *new_root;$/;"	m	struct:cgroup_sb_opts	typeref:struct:cgroup_sb_opts::cgroupfs_root	file:
new_slab	mm/slub.c	/^static struct page *new_slab(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
new_text_line	kernel/printk.c	/^static int new_text_line = 1;$/;"	v	file:
new_vma_page	mm/mempolicy.c	/^static struct page *new_vma_page(struct page *page, unsigned long private, int **x)$/;"	f	file:
new_vmap_block	mm/vmalloc.c	/^static struct vmap_block *new_vmap_block(gfp_t gfp_mask)$/;"	f	file:
newlen	kernel/sysctl_binary.c	/^	compat_size_t	newlen;$/;"	m	struct:compat_sysctl_args	file:
newval	kernel/sysctl_binary.c	/^	compat_uptr_t	newval;$/;"	m	struct:compat_sysctl_args	file:
next	fs/binfmt_elf.c	/^	struct elf_thread_core_info *next;$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::elf_thread_core_info	file:
next	fs/char_dev.c	/^	struct char_device_struct *next;$/;"	m	struct:char_device_struct	typeref:struct:char_device_struct::char_device_struct	file:
next	fs/dcookies.c	/^	struct list_head next;$/;"	m	struct:dcookie_user	typeref:struct:dcookie_user::list_head	file:
next	fs/eventpoll.c	/^	struct epitem *next;$/;"	m	struct:epitem	typeref:struct:epitem::epitem	file:
next	fs/file.c	/^	struct fdtable *next;$/;"	m	struct:fdtable_defer	typeref:struct:fdtable_defer::fdtable	file:
next	fs/select.c	/^	struct poll_list *next;$/;"	m	struct:poll_list	typeref:struct:poll_list::poll_list	file:
next	fs/select.c	/^	struct poll_table_page * next;$/;"	m	struct:poll_table_page	typeref:struct:poll_table_page::poll_table_page	file:
next	include/linux/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	include/linux/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	kernel/auditsc.c	/^	struct audit_aux_data	*next;$/;"	m	struct:audit_aux_data	typeref:struct:audit_aux_data::audit_aux_data	file:
next	kernel/auditsc.c	/^	struct audit_tree_refs *next;$/;"	m	struct:audit_tree_refs	typeref:struct:audit_tree_refs::audit_tree_refs	file:
next	kernel/sched.c	/^		int next; \/* next highest *\/$/;"	m	struct:rt_rq::__anon42	file:
next	kernel/sched.c	/^	struct sched_entity *curr, *next, *last;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::	file:
next	kernel/sched.c	/^	struct task_struct *(*next)(void *);$/;"	m	struct:rq_iterator	typeref:struct:rq_iterator::next	file:
next	mm/slub.c	/^	struct saved_alias *next;$/;"	m	struct:saved_alias	typeref:struct:saved_alias::saved_alias	file:
next_active_pageblock	mm/memory_hotplug.c	/^static struct page *next_active_pageblock(struct page *page)$/;"	f	file:
next_active_region_index_in_nid	mm/page_alloc.c	/^static int __meminit next_active_region_index_in_nid(int index, int nid)$/;"	f	file:
next_arg	kernel/params.c	/^static char *next_arg(char *args, char **param, char **val)$/;"	f	file:
next_balance	kernel/sched.c	/^	unsigned long next_balance;$/;"	m	struct:rq	file:
next_block_for_io	fs/direct-io.c	/^	sector_t next_block_for_io;	\/* next block to be put under IO,$/;"	m	struct:dio	file:
next_cookie	kernel/async.c	/^static async_cookie_t next_cookie = 1;$/;"	v	file:
next_hierarchy_id	kernel/cgroup.c	/^static int next_hierarchy_id;$/;"	v	file:
next_mnt	fs/namespace.c	/^static struct vfsmount *next_mnt(struct vfsmount *p, struct vfsmount *root)$/;"	f	file:
next_node_allowed	mm/hugetlb.c	/^static int next_node_allowed(int nid, nodemask_t *nodes_allowed)$/;"	f	file:
next_online_pgdat	mm/mmzone.c	/^struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)$/;"	f
next_peer	fs/pnode.c	/^static inline struct vfsmount *next_peer(struct vfsmount *p)$/;"	f	file:
next_pidmap	kernel/pid.c	/^int next_pidmap(struct pid_namespace *pid_ns, int last)$/;"	f
next_prio	kernel/sched_rt.c	/^static inline int next_prio(struct rq *rq)$/;"	f	file:
next_reap	mm/slab.c	/^	unsigned long next_reap;	\/* updated without locking *\/$/;"	m	struct:kmem_list3	file:
next_reap_node	mm/slab.c	/^static void next_reap_node(void)$/;"	f	file:
next_reap_node	mm/slab.c	866;"	d	file:
next_signal	kernel/signal.c	/^int next_signal(struct sigpending *pending, sigset_t *mask)$/;"	f
next_slave	fs/pnode.c	/^static inline struct vfsmount *next_slave(struct vfsmount *p)$/;"	f	file:
next_string	kernel/module.c	/^static char *next_string(char *string, unsigned long *secsize)$/;"	f	file:
next_timer	kernel/timer.c	/^	unsigned long next_timer;$/;"	m	struct:tvec_base	file:
next_vma	fs/binfmt_elf.c	/^static struct vm_area_struct *next_vma(struct vm_area_struct *this_vma,$/;"	f	file:
next_zone	mm/mmzone.c	/^struct zone *next_zone(struct zone *zone)$/;"	f
next_zones_zonelist	mm/mmzone.c	/^struct zoneref *next_zones_zonelist(struct zoneref *z,$/;"	f
nfakewriters	kernel/rcutorture.c	/^static int nfakewriters = 4;	\/* # fake writer threads *\/$/;"	v	file:
ngarbage	kernel/kprobes.c	/^	int ngarbage;$/;"	m	struct:kprobe_insn_page	file:
ngroups_max	kernel/sysctl.c	/^static int ngroups_max = NGROUPS_MAX;$/;"	v	file:
nlen	kernel/sysctl_binary.c	/^	int		nlen;$/;"	m	struct:compat_sysctl_args	file:
nmsgs	fs/compat_ioctl.c	/^	u32 nmsgs;$/;"	m	struct:i2c_rdwr_ioctl_data32	file:
no_blink	kernel/panic.c	/^static long no_blink(long time)$/;"	f	file:
no_blkdev_open	fs/no-block.c	/^static int no_blkdev_open(struct inode * inode, struct file * filp)$/;"	f	file:
no_llseek	fs/read_write.c	/^EXPORT_SYMBOL(no_llseek);$/;"	v
no_llseek	fs/read_write.c	/^loff_t no_llseek(struct file *file, loff_t offset, int origin)$/;"	f
no_nsleep	kernel/posix-timers.c	/^static int no_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
no_printk	kernel/cred.c	/^void no_printk(const char *fmt, ...)$/;"	f	file:
no_printk	mm/nommu.c	/^void no_printk(const char *fmt, ...)$/;"	f	file:
no_timer_create	kernel/posix-timers.c	/^static int no_timer_create(struct k_itimer *new_timer)$/;"	f	file:
noaliencache_setup	mm/slab.c	/^static int __init noaliencache_setup(char *s)$/;"	f	file:
nobh_truncate_page	fs/buffer.c	/^EXPORT_SYMBOL(nobh_truncate_page);$/;"	v
nobh_truncate_page	fs/buffer.c	/^int nobh_truncate_page(struct address_space *mapping,$/;"	f
nobh_write_begin	fs/buffer.c	/^EXPORT_SYMBOL(nobh_write_begin);$/;"	v
nobh_write_begin	fs/buffer.c	/^int nobh_write_begin(struct file *file, struct address_space *mapping,$/;"	f
nobh_write_end	fs/buffer.c	/^EXPORT_SYMBOL(nobh_write_end);$/;"	v
nobh_write_end	fs/buffer.c	/^int nobh_write_end(struct file *file, struct address_space *mapping,$/;"	f
nobh_writepage	fs/buffer.c	/^EXPORT_SYMBOL(nobh_writepage);$/;"	v
nobh_writepage	fs/buffer.c	/^int nobh_writepage(struct page *page, get_block_t *get_block,$/;"	f
node	kernel/audit_tree.c	/^	struct node {$/;"	s	struct:audit_chunk	file:
node	kernel/rcutree.h	/^	struct rcu_node node[NUM_RCU_NODES];	\/* Hierarchy. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_node
node	lib/radix-tree.c	/^	struct radix_tree_node *node;$/;"	m	struct:radix_tree_path	typeref:struct:radix_tree_path::radix_tree_node	file:
node	mm/kmemleak.c	/^	struct hlist_node node;$/;"	m	struct:kmemleak_scan_area	typeref:struct:kmemleak_scan_area::hlist_node	file:
node	mm/ksm.c	/^		struct rb_node node;	\/* when node of unstable tree *\/$/;"	m	union:rmap_item::__anon3	typeref:struct:rmap_item::__anon3::rb_node	file:
node	mm/ksm.c	/^	struct rb_node node;$/;"	m	struct:stable_node	typeref:struct:stable_node::rb_node	file:
node	mm/mempolicy.c	/^	unsigned long node[MAX_NUMNODES];$/;"	m	struct:numa_maps	file:
node	mm/migrate.c	/^	int node;$/;"	m	struct:page_to_node	file:
node_hstate	mm/hugetlb.c	/^struct node_hstate {$/;"	s	file:
node_hstates	mm/hugetlb.c	/^struct node_hstate node_hstates[MAX_NUMNODES];$/;"	v	typeref:struct:node_hstate
node_load	mm/page_alloc.c	/^static int node_load[MAX_NUMNODES];$/;"	v	file:
node_match	mm/slub.c	/^static inline int node_match(struct kmem_cache_cpu *c, int node)$/;"	f	file:
node_memmap_size_bytes	mm/sparse.c	/^unsigned long __init node_memmap_size_bytes(int nid, unsigned long start_pfn,$/;"	f
node_nr_objs	mm/slub.c	/^static inline unsigned long node_nr_objs(struct kmem_cache_node *n)$/;"	f	file:
node_nr_slabs	mm/slub.c	/^static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)$/;"	f	file:
node_order	mm/page_alloc.c	/^static int node_order[MAX_NUMNODES];$/;"	v	file:
node_states	mm/page_alloc.c	/^EXPORT_SYMBOL(node_states);$/;"	v
node_to_va	mm/vmalloc.c	/^static struct vmap_area *node_to_va(struct rb_node *n)$/;"	f	file:
nodeid	mm/slab.c	/^	unsigned short nodeid;$/;"	m	struct:slab	file:
nodeinfo	mm/memcontrol.c	/^	struct mem_cgroup_per_node *nodeinfo[MAX_NUMNODES];$/;"	m	struct:mem_cgroup_lru_info	typeref:struct:mem_cgroup_lru_info::mem_cgroup_per_node	file:
nodemask	kernel/sched.c	/^	cpumask_var_t		nodemask;$/;"	m	struct:s_data	file:
nodemask	mm/vmscan.c	/^	nodemask_t	*nodemask;$/;"	m	struct:scan_control	file:
nodes	lib/radix-tree.c	/^	struct radix_tree_node *nodes[RADIX_TREE_MAX_PATH];$/;"	m	struct:radix_tree_preload	typeref:struct:radix_tree_preload::radix_tree_node	file:
nodes	mm/slub.c	/^	nodemask_t nodes;$/;"	m	struct:location	file:
nohz_cpu_mask	kernel/sched.c	/^cpumask_var_t nohz_cpu_mask;$/;"	v
nommu_region_sem	mm/nommu.c	/^DECLARE_RWSEM(nommu_region_sem);$/;"	v
nommu_region_tree	mm/nommu.c	/^struct rb_root nommu_region_tree = RB_ROOT;$/;"	v	typeref:struct:rb_root
nommu_shrink_inode_mappings	mm/nommu.c	/^int nommu_shrink_inode_mappings(struct inode *inode, size_t size,$/;"	f
none	kernel/cgroup.c	/^	bool none;$/;"	m	struct:cgroup_sb_opts	file:
nonseekable_open	fs/open.c	/^EXPORT_SYMBOL(nonseekable_open);$/;"	v
nonseekable_open	fs/open.c	/^int nonseekable_open(struct inode *inode, struct file *filp)$/;"	f
noop_count	kernel/lockdep.c	/^static int noop_count(struct lock_list *entry, void *data)$/;"	f	file:
normal_prio	kernel/sched.c	/^static inline int normal_prio(struct task_struct *p)$/;"	f	file:
normalize_rt_tasks	kernel/sched.c	/^void normalize_rt_tasks(void)$/;"	f
normalize_task	kernel/sched.c	/^static void normalize_task(struct rq *rq, struct task_struct *p)$/;"	f	file:
normalized_sysctl_sched_latency	kernel/sched_fair.c	/^unsigned int normalized_sysctl_sched_latency = 5000000ULL;$/;"	v
normalized_sysctl_sched_min_granularity	kernel/sched_fair.c	/^unsigned int normalized_sysctl_sched_min_granularity = 1000000ULL;$/;"	v
normalized_sysctl_sched_shares_ratelimit	kernel/sched.c	/^unsigned int normalized_sysctl_sched_shares_ratelimit = 250000;$/;"	v
normalized_sysctl_sched_wakeup_granularity	kernel/sched_fair.c	/^unsigned int normalized_sysctl_sched_wakeup_granularity = 1000000UL;$/;"	v
nosoftlockup	kernel/softlockup.c	/^static int __initdata nosoftlockup;$/;"	v	file:
nosoftlockup_setup	kernel/softlockup.c	/^static int __init nosoftlockup_setup(char *str)$/;"	f	file:
not_in_range	kernel/lockdep.c	/^static inline int not_in_range(const void* mem_from, unsigned long mem_len,$/;"	f	file:
notask_error	kernel/exit.c	/^	int			notask_error;$/;"	m	struct:wait_opts	file:
notcovered	kernel/sched.c	/^	cpumask_var_t		notcovered;$/;"	m	struct:s_data	file:
note_new_gpnum	kernel/rcutree.c	/^static void note_new_gpnum(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
note_zone_scanning_priority	mm/vmscan.c	/^static inline void note_zone_scanning_priority(struct zone *zone, int priority)$/;"	f	file:
notes	fs/binfmt_elf.c	/^	struct memelfnote *notes;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
notes	fs/binfmt_elf.c	/^	struct memelfnote notes[0];$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::memelfnote	file:
notes	fs/binfmt_elf.c	/^	struct memelfnote notes[3];$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::memelfnote	file:
notes	fs/binfmt_elf_fdpic.c	/^	struct memelfnote notes[3];$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::memelfnote	file:
notes	kernel/module.c	/^	unsigned int notes;$/;"	m	struct:module_notes_attrs	file:
notes_attr	kernel/ksysfs.c	/^static struct bin_attribute notes_attr = {$/;"	v	typeref:struct:bin_attribute	file:
notes_read	kernel/ksysfs.c	/^static ssize_t notes_read(struct kobject *kobj, struct bin_attribute *bin_attr,$/;"	f	file:
notes_size	kernel/ksysfs.c	139;"	d	file:
notesize	fs/binfmt_elf.c	/^static int notesize(struct memelfnote *en)$/;"	f	file:
notesize	fs/binfmt_elf_fdpic.c	/^static int notesize(struct memelfnote *en)$/;"	f	file:
notifier_call_chain	kernel/notifier.c	/^static int __kprobes notifier_call_chain(struct notifier_block **nl,$/;"	f	file:
notifier_chain_cond_register	kernel/notifier.c	/^static int notifier_chain_cond_register(struct notifier_block **nl,$/;"	f	file:
notifier_chain_register	kernel/notifier.c	/^static int notifier_chain_register(struct notifier_block **nl,$/;"	f	file:
notifier_chain_unregister	kernel/notifier.c	/^static int notifier_chain_unregister(struct notifier_block **nl,$/;"	f	file:
notifiers	kernel/pm_qos_params.c	/^	struct blocking_notifier_head *notifiers;$/;"	m	struct:pm_qos_object	typeref:struct:pm_qos_object::blocking_notifier_head	file:
notify_change	fs/attr.c	/^EXPORT_SYMBOL(notify_change);$/;"	v
notify_change	fs/attr.c	/^int notify_change(struct dentry * dentry, struct iattr * attr)$/;"	f
notify_cpu_starting	kernel/cpu.c	/^void __cpuinit notify_cpu_starting(unsigned int cpu)$/;"	f
notify_die	kernel/notifier.c	/^int notrace __kprobes notify_die(enum die_val val, const char *str,$/;"	f
notify_on_release	kernel/cgroup.c	/^static int notify_on_release(const struct cgroup *cgrp)$/;"	f	file:
nr	fs/buffer.c	/^	int nr;			\/* Number of live bh's *\/$/;"	m	struct:bh_accounting	file:
nr	lib/radix-tree.c	/^	int nr;$/;"	m	struct:radix_tree_preload	file:
nr_all_pages	mm/page_alloc.c	/^static unsigned long __meminitdata nr_all_pages;$/;"	v	file:
nr_blockdev_pages	fs/block_dev.c	/^long nr_blockdev_pages(void)$/;"	f
nr_chain_hlocks	kernel/lockdep.c	/^int nr_chain_hlocks;$/;"	v
nr_context_switches	kernel/sched.c	/^unsigned long long nr_context_switches(void)$/;"	f
nr_cyclic_checks	kernel/lockdep.c	/^atomic_t nr_cyclic_checks;$/;"	v
nr_find_usage_backwards_checks	kernel/lockdep.c	/^atomic_t nr_find_usage_backwards_checks;$/;"	v
nr_find_usage_forwards_checks	kernel/lockdep.c	/^atomic_t nr_find_usage_forwards_checks;$/;"	v
nr_free_buffer_pages	mm/page_alloc.c	/^EXPORT_SYMBOL_GPL(nr_free_buffer_pages);$/;"	v
nr_free_buffer_pages	mm/page_alloc.c	/^unsigned int nr_free_buffer_pages(void)$/;"	f
nr_free_highpages	mm/highmem.c	/^unsigned int nr_free_highpages (void)$/;"	f
nr_free_pagecache_pages	mm/page_alloc.c	/^unsigned int nr_free_pagecache_pages(void)$/;"	f
nr_free_zone_pages	mm/page_alloc.c	/^static unsigned int nr_free_zone_pages(int offset)$/;"	f	file:
nr_hardirq_chains	kernel/lockdep.c	/^unsigned int nr_hardirq_chains;$/;"	v
nr_hugepages	mm/hugetlb.c	/^HSTATE_ATTR(nr_hugepages);$/;"	v
nr_hugepages_mempolicy	mm/hugetlb.c	/^HSTATE_ATTR(nr_hugepages_mempolicy);$/;"	v
nr_hugepages_mempolicy_show	mm/hugetlb.c	/^static ssize_t nr_hugepages_mempolicy_show(struct kobject *kobj,$/;"	f	file:
nr_hugepages_mempolicy_store	mm/hugetlb.c	/^static ssize_t nr_hugepages_mempolicy_store(struct kobject *kobj,$/;"	f	file:
nr_hugepages_show	mm/hugetlb.c	/^static ssize_t nr_hugepages_show(struct kobject *kobj,$/;"	f	file:
nr_hugepages_show_common	mm/hugetlb.c	/^static ssize_t nr_hugepages_show_common(struct kobject *kobj,$/;"	f	file:
nr_hugepages_store	mm/hugetlb.c	/^static ssize_t nr_hugepages_store(struct kobject *kobj,$/;"	f	file:
nr_hugepages_store_common	mm/hugetlb.c	/^static ssize_t nr_hugepages_store_common(bool obey_mempolicy,$/;"	f	file:
nr_ids	kernel/pid_namespace.c	/^	int nr_ids;$/;"	m	struct:pid_cache	file:
nr_iowait	kernel/sched.c	/^	atomic_t nr_iowait;$/;"	m	struct:rq	file:
nr_iowait	kernel/sched.c	/^unsigned long nr_iowait(void)$/;"	f
nr_iowait_cpu	kernel/sched.c	/^unsigned long nr_iowait_cpu(void)$/;"	f
nr_kernel_pages	mm/page_alloc.c	/^static unsigned long __meminitdata nr_kernel_pages;$/;"	v	file:
nr_list_entries	kernel/lockdep.c	/^unsigned long nr_list_entries;$/;"	v
nr_load_updates	kernel/sched.c	/^	unsigned long nr_load_updates;$/;"	m	struct:rq	file:
nr_lock_chains	kernel/lockdep.c	/^unsigned long nr_lock_chains;$/;"	v
nr_lock_classes	kernel/lockdep.c	/^unsigned long nr_lock_classes;$/;"	v
nr_node_ids	mm/page_alloc.c	/^EXPORT_SYMBOL(nr_node_ids);$/;"	v
nr_nodemap_entries	mm/page_alloc.c	/^  static int __meminitdata nr_nodemap_entries;$/;"	v	file:
nr_online_nodes	mm/page_alloc.c	/^EXPORT_SYMBOL(nr_online_nodes);$/;"	v
nr_overcommit_hugepages	mm/hugetlb.c	/^HSTATE_ATTR(nr_overcommit_hugepages);$/;"	v
nr_overcommit_hugepages_show	mm/hugetlb.c	/^static ssize_t nr_overcommit_hugepages_show(struct kobject *kobj,$/;"	f	file:
nr_overcommit_hugepages_store	mm/hugetlb.c	/^static ssize_t nr_overcommit_hugepages_store(struct kobject *kobj,$/;"	f	file:
nr_pages	fs/fs-writeback.c	/^	long nr_pages;$/;"	m	struct:wb_writeback_args	file:
nr_pdflush_threads	fs/fs-writeback.c	/^int nr_pdflush_threads;$/;"	v
nr_process_chains	kernel/lockdep.c	/^unsigned int nr_process_chains;$/;"	v
nr_processes	kernel/fork.c	/^int nr_processes(void)$/;"	f
nr_reclaimed	mm/vmscan.c	/^	unsigned long nr_reclaimed;$/;"	m	struct:scan_control	file:
nr_running	kernel/sched.c	/^	unsigned long nr_running;$/;"	m	struct:cfs_rq	file:
nr_running	kernel/sched.c	/^	unsigned long nr_running;$/;"	m	struct:rq	file:
nr_running	kernel/sched.c	/^unsigned long nr_running(void)$/;"	f
nr_scan_try_batch	mm/vmscan.c	/^static unsigned long nr_scan_try_batch(unsigned long nr_to_scan,$/;"	f	file:
nr_scanned	mm/vmscan.c	/^	unsigned long nr_scanned;$/;"	m	struct:scan_control	file:
nr_sgvecs	fs/bio.c	/^	int nr_sgvecs;$/;"	m	struct:bio_map_data	file:
nr_softirq_chains	kernel/lockdep.c	/^unsigned int nr_softirq_chains;$/;"	v
nr_spread_over	kernel/sched.c	/^	unsigned int nr_spread_over;$/;"	m	struct:cfs_rq	file:
nr_stack_trace_entries	kernel/lockdep.c	/^unsigned long nr_stack_trace_entries;$/;"	v
nr_swap_pages	mm/swapfile.c	/^long nr_swap_pages;$/;"	v
nr_swapfiles	mm/swapfile.c	/^static unsigned int nr_swapfiles;$/;"	v	file:
nr_switches	kernel/sched.c	/^	u64 nr_switches;$/;"	m	struct:rq	file:
nr_threads	kernel/fork.c	/^int nr_threads; 		\/* The idle threads do not count.. *\/$/;"	v
nr_to_reclaim	mm/vmscan.c	/^	unsigned long nr_to_reclaim;$/;"	m	struct:scan_control	file:
nr_uninterruptible	kernel/sched.c	/^	unsigned long nr_uninterruptible;$/;"	m	struct:rq	file:
nr_uninterruptible	kernel/sched.c	/^unsigned long nr_uninterruptible(void)$/;"	f
nr_unused_locks	kernel/lockdep.c	/^atomic_t nr_unused_locks;$/;"	v
nr_vecs	fs/bio-integrity.c	/^	unsigned short nr_vecs;$/;"	m	struct:integrity_slab	file:
nreaders	kernel/rcutorture.c	/^static int nreaders = -1;	\/* # reader threads, defaults to 2*ncpus *\/$/;"	v	file:
nrealreaders	kernel/rcutorture.c	/^static int nrealreaders;$/;"	v	file:
ns	kernel/acct.c	/^	struct pid_namespace	*ns;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::pid_namespace	file:
ns_can_attach	kernel/ns_cgroup.c	/^static int ns_can_attach(struct cgroup_subsys *ss, struct cgroup *new_cgroup,$/;"	f	file:
ns_cgroup	kernel/ns_cgroup.c	/^struct ns_cgroup {$/;"	s	file:
ns_cgroup_clone	kernel/ns_cgroup.c	/^int ns_cgroup_clone(struct task_struct *task, struct pid *pid)$/;"	f
ns_create	kernel/ns_cgroup.c	/^static struct cgroup_subsys_state *ns_create(struct cgroup_subsys *ss,$/;"	f	file:
ns_destroy	kernel/ns_cgroup.c	/^static void ns_destroy(struct cgroup_subsys *ss,$/;"	f	file:
ns_set_super	fs/super.c	/^static int ns_set_super(struct super_block *sb, void *data)$/;"	f	file:
ns_subsys	kernel/ns_cgroup.c	/^struct cgroup_subsys ns_subsys = {$/;"	v	typeref:struct:cgroup_subsys
ns_subsys	kernel/ns_cgroup.c	/^struct cgroup_subsys ns_subsys;$/;"	v	typeref:struct:cgroup_subsys
ns_test_super	fs/super.c	/^static int ns_test_super(struct super_block *sb, void *data)$/;"	f	file:
ns_to_timespec	kernel/time.c	/^EXPORT_SYMBOL(ns_to_timespec);$/;"	v
ns_to_timespec	kernel/time.c	/^struct timespec ns_to_timespec(const s64 nsec)$/;"	f
ns_to_timeval	kernel/time.c	/^EXPORT_SYMBOL(ns_to_timeval);$/;"	v
ns_to_timeval	kernel/time.c	/^struct timeval ns_to_timeval(const s64 nsec)$/;"	f
nsec_high	kernel/sched_debug.c	/^static long long nsec_high(unsigned long long nsec)$/;"	f	file:
nsec_low	kernel/sched_debug.c	/^static unsigned long nsec_low(unsigned long long nsec)$/;"	f	file:
nsec_to_clock_t	kernel/time.c	/^u64 nsec_to_clock_t(u64 x)$/;"	f
nsec_valid	fs/utimes.c	/^static bool nsec_valid(long nsec)$/;"	f	file:
nsecs_to_cputime	kernel/sched.c	5228;"	d	file:
nsecs_to_jiffies	kernel/time.c	/^unsigned long nsecs_to_jiffies(u64 n)$/;"	f
nsections	kernel/module.c	/^	unsigned int nsections;$/;"	m	struct:module_sect_attrs	file:
nsproxy_cache_init	kernel/nsproxy.c	/^module_init(nsproxy_cache_init);$/;"	v
nsproxy_cache_init	kernel/nsproxy.c	/^static int __init nsproxy_cache_init(void)$/;"	f	file:
nsproxy_cachep	kernel/nsproxy.c	/^static struct kmem_cache *nsproxy_cachep;$/;"	v	typeref:struct:kmem_cache	file:
null_pm_qos	kernel/pm_qos_params.c	/^static struct pm_qos_object null_pm_qos;$/;"	v	typeref:struct:pm_qos_object	file:
num	kernel/params.c	/^	unsigned int num;$/;"	m	struct:module_param_attrs	file:
num_notes	fs/binfmt_elf.c	/^	int num_notes;$/;"	m	struct:elf_thread_status	file:
num_notes	fs/binfmt_elf_fdpic.c	/^	int num_notes;$/;"	m	struct:elf_thread_status	file:
num_physpages	mm/memory.c	/^EXPORT_SYMBOL(num_physpages);$/;"	v
num_physpages	mm/memory.c	/^unsigned long num_physpages;$/;"	v
num_physpages	mm/nommu.c	/^EXPORT_SYMBOL(num_physpages);$/;"	v
num_physpages	mm/nommu.c	/^unsigned long num_physpages;$/;"	v
num_tests	kernel/test_kprobes.c	/^static int errors, handler_errors, num_tests;$/;"	v	file:
num_threads	kernel/stop_machine.c	/^static unsigned int num_threads;$/;"	v	file:
numa_default_policy	mm/mempolicy.c	/^void numa_default_policy(void)$/;"	f
numa_maps	mm/mempolicy.c	/^struct numa_maps {$/;"	s	file:
numa_policy_init	mm/mempolicy.c	/^void __init numa_policy_init(void)$/;"	f
numa_zonelist_order	mm/page_alloc.c	/^char numa_zonelist_order[16] = "default";$/;"	v
numa_zonelist_order_handler	mm/page_alloc.c	/^int numa_zonelist_order_handler(ctl_table *table, int write,$/;"	f
number_of_cgroups	kernel/cgroup.c	/^	int number_of_cgroups;$/;"	m	struct:cgroupfs_root	file:
numden	kernel/timeconst.pl	/^sub numden($$) {$/;"	s
numnote	fs/binfmt_elf.c	/^	int numnote;$/;"	m	struct:elf_note_info	file:
nused	kernel/kprobes.c	/^	int nused;$/;"	m	struct:kprobe_insn_page	file:
nwait	fs/eventpoll.c	/^	int nwait;$/;"	m	struct:epitem	file:
nxtlist	kernel/rcutree.h	/^	struct rcu_head *nxtlist;$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
nxttail	kernel/rcutree.h	/^	struct rcu_head **nxttail[RCU_NEXT_SIZE];$/;"	m	struct:rcu_data	typeref:struct:rcu_data::rcu_head
obj-y	fs/Makefile	/^obj-y :=	open.o read_write.o file_table.o super.o \\$/;"	m
obj-y	kernel/Makefile	/^obj-y     = sched.o fork.o exec_domain.o panic.o printk.o \\$/;"	m
obj-y	mm/Makefile	/^obj-y			:= bootmem.o filemap.o mempool.o oom_kill.o fadvise.o \\$/;"	m
obj_offset	mm/slab.c	/^static int obj_offset(struct kmem_cache *cachep)$/;"	f	file:
obj_offset	mm/slab.c	485;"	d	file:
obj_size	mm/slab.c	/^static int obj_size(struct kmem_cache *cachep)$/;"	f	file:
obj_size	mm/slab.c	486;"	d	file:
obj_to_index	mm/slab.c	/^static inline unsigned int obj_to_index(const struct kmem_cache *cache,$/;"	f	file:
object_cache	mm/kmemleak.c	/^static struct kmem_cache *object_cache;$/;"	v	typeref:struct:kmem_cache	file:
object_err	mm/slub.c	/^static void object_err(struct kmem_cache *s, struct page *page,$/;"	f	file:
object_list	mm/kmemleak.c	/^	struct list_head object_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::list_head	file:
object_no_scan	mm/kmemleak.c	/^static void object_no_scan(unsigned long ptr)$/;"	f	file:
object_size	mm/slub.c	/^SLAB_ATTR_RO(object_size);$/;"	v
object_size_show	mm/slub.c	/^static ssize_t object_size_show(struct kmem_cache *s, char *buf)$/;"	f	file:
object_tree_root	mm/kmemleak.c	/^static struct prio_tree_root object_tree_root;$/;"	v	typeref:struct:prio_tree_root	file:
objects	mm/slub.c	/^SLAB_ATTR_RO(objects);$/;"	v
objects_partial	mm/slub.c	/^SLAB_ATTR_RO(objects_partial);$/;"	v
objects_partial_show	mm/slub.c	/^static ssize_t objects_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objects_show	mm/slub.c	/^static ssize_t objects_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objs_per_slab	mm/slub.c	/^SLAB_ATTR_RO(objs_per_slab);$/;"	v
objs_per_slab_show	mm/slub.c	/^static ssize_t objs_per_slab_show(struct kmem_cache *s, char *buf)$/;"	f	file:
offline_fqs	kernel/rcutree.h	/^	unsigned long offline_fqs;	\/* Kicked due to being offline. *\/$/;"	m	struct:rcu_data
offline_isolated_pages	mm/memory_hotplug.c	/^offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
offline_isolated_pages_cb	mm/memory_hotplug.c	/^offline_isolated_pages_cb(unsigned long start, unsigned long nr_pages,$/;"	f	file:
offline_page_cgroup	mm/page_cgroup.c	/^int __meminit offline_page_cgroup(unsigned long start_pfn,$/;"	f
offline_pages	mm/memory_hotplug.c	/^static int offline_pages(unsigned long start_pfn,$/;"	f	file:
offset	fs/binfmt_misc.c	/^	int offset;			\/* offset of magic *\/$/;"	m	struct:__anon16	file:
offset	lib/radix-tree.c	/^	int offset;$/;"	m	struct:radix_tree_path	file:
offset	mm/dmapool.c	/^	unsigned int offset;$/;"	m	struct:dma_page	file:
offset_il_node	mm/mempolicy.c	/^static unsigned offset_il_node(struct mempolicy *pol,$/;"	f	file:
oflag	kernel/auditsc.c	/^			int			oflag;$/;"	m	struct:audit_context::__anon22::__anon28	file:
old_linux_dirent	fs/readdir.c	/^struct old_linux_dirent {$/;"	s	file:
old_pcap	kernel/auditsc.c	/^	struct audit_cap_data	old_pcap;$/;"	m	struct:audit_aux_data_bprm_fcaps	typeref:struct:audit_aux_data_bprm_fcaps::audit_cap_data	file:
old_reloc	fs/binfmt_flat.c	/^void old_reloc(unsigned long rl)$/;"	f
oldchecksum	mm/ksm.c	/^	unsigned int oldchecksum;	\/* when unstable *\/$/;"	m	struct:rmap_item	file:
oldlenp	kernel/sysctl_binary.c	/^	compat_uptr_t	oldlenp;$/;"	m	struct:compat_sysctl_args	file:
oldval	kernel/sysctl_binary.c	/^	compat_uptr_t	oldval;$/;"	m	struct:compat_sysctl_args	file:
on_each_cpu	kernel/softirq.c	/^EXPORT_SYMBOL(on_each_cpu);$/;"	v
on_each_cpu	kernel/softirq.c	/^int on_each_cpu(void (*func) (void *info), void *info, int wait)$/;"	f
on_freelist	mm/slub.c	/^static int on_freelist(struct kmem_cache *s, struct page *page, void *search)$/;"	f	file:
on_null_domain	kernel/sched.c	/^static inline int on_null_domain(int cpu)$/;"	f	file:
on_rt_rq	kernel/sched_rt.c	/^static inline int on_rt_rq(struct sched_rt_entity *rt_se)$/;"	f	file:
on_slab_alc_key	mm/slab.c	/^static struct lock_class_key on_slab_alc_key;$/;"	v	typeref:struct:lock_class_key	file:
on_slab_l3_key	mm/slab.c	/^static struct lock_class_key on_slab_l3_key;$/;"	v	typeref:struct:lock_class_key	file:
on_tree	mm/memcontrol.c	/^	bool			on_tree;$/;"	m	struct:mem_cgroup_per_zone	file:
ondemand_readahead	mm/readahead.c	/^ondemand_readahead(struct address_space *mapping,$/;"	f	file:
one	kernel/sysctl.c	/^static int __maybe_unused one = 1;$/;"	v	file:
one_hundred	kernel/sysctl.c	/^static int one_hundred = 100;$/;"	v	file:
one_ul	kernel/sysctl.c	/^static unsigned long one_ul = 1;$/;"	v	file:
onecputick	kernel/posix-cpu-timers.c	/^static u32 onecputick;$/;"	v	file:
online	kernel/sched.c	/^	cpumask_var_t online;$/;"	m	struct:root_domain	file:
online	kernel/sched.c	/^	int online;$/;"	m	struct:rq	file:
online_page	mm/memory_hotplug.c	/^void online_page(struct page *page)$/;"	f
online_page_cgroup	mm/page_cgroup.c	/^int __meminit online_page_cgroup(unsigned long start_pfn,$/;"	f
online_pages	mm/memory_hotplug.c	/^int online_pages(unsigned long pfn, unsigned long nr_pages)$/;"	f
online_pages_range	mm/memory_hotplug.c	/^static int online_pages_range(unsigned long start_pfn, unsigned long nr_pages,$/;"	f	file:
onofflock	kernel/rcutree.h	/^	spinlock_t onofflock;			\/* exclude on\/offline and *\/$/;"	m	struct:rcu_state
oo_make	mm/slub.c	/^static inline struct kmem_cache_order_objects oo_make(int order,$/;"	f	file:
oo_objects	mm/slub.c	/^static inline int oo_objects(struct kmem_cache_order_objects x)$/;"	f	file:
oo_order	mm/slub.c	/^static inline int oo_order(struct kmem_cache_order_objects x)$/;"	f	file:
oom_kill_process	mm/oom_kill.c	/^static int oom_kill_process(struct task_struct *p, gfp_t gfp_mask, int order,$/;"	f	file:
oom_kill_task	mm/oom_kill.c	/^static int oom_kill_task(struct task_struct *p)$/;"	f	file:
oops_enter	kernel/panic.c	/^void oops_enter(void)$/;"	f
oops_exit	kernel/panic.c	/^void oops_exit(void)$/;"	f
oops_id	kernel/panic.c	/^static u64 oops_id;$/;"	v	file:
oops_in_progress	kernel/printk.c	/^EXPORT_SYMBOL(oops_in_progress);$/;"	v
oops_in_progress	kernel/printk.c	/^int oops_in_progress;$/;"	v
oops_may_print	kernel/panic.c	/^int oops_may_print(void)$/;"	f
op_type	mm/kmemleak.c	/^	int op_type;			\/* kmemleak operation type *\/$/;"	m	struct:early_log	file:
opcode	kernel/rtmutex-tester.c	/^	int			opcode;$/;"	m	struct:test_thread_data	file:
opdata	kernel/rtmutex-tester.c	/^	int			opdata;$/;"	m	struct:test_thread_data	file:
open_arg	kernel/auditsc.c	/^static inline int open_arg(int flags, int mask)$/;"	f	file:
open_bdev_exclusive	fs/block_dev.c	/^EXPORT_SYMBOL(open_bdev_exclusive);$/;"	v
open_bdev_exclusive	fs/block_dev.c	/^struct block_device *open_bdev_exclusive(const char *path, fmode_t mode, void *holder)$/;"	f
open_by_devnum	fs/block_dev.c	/^EXPORT_SYMBOL(open_by_devnum);$/;"	v
open_by_devnum	fs/block_dev.c	/^struct block_device *open_by_devnum(dev_t dev, fmode_t mode)$/;"	f
open_exec	fs/exec.c	/^EXPORT_SYMBOL(open_exec);$/;"	v
open_exec	fs/exec.c	/^struct file *open_exec(const char *name)$/;"	f
open_softirq	kernel/softirq.c	/^void open_softirq(int nr, void (*action)(struct softirq_action *))$/;"	f
open_to_namei_flags	fs/namei.c	/^static inline int open_to_namei_flags(int flag)$/;"	f	file:
open_will_truncate	fs/namei.c	/^static int open_will_truncate(int flag, struct inode *inode)$/;"	f	file:
opipe_prep	fs/splice.c	/^static int opipe_prep(struct pipe_inode_info *pipe, unsigned int flags)$/;"	f	file:
opt_kgdb_con	kernel/kgdb.c	/^static int __init opt_kgdb_con(char *str)$/;"	f	file:
opt_kgdb_wait	kernel/kgdb.c	/^static int __init opt_kgdb_wait(char *str)$/;"	f	file:
opt_nokgdbroundup	kernel/kgdb.c	/^static int __init opt_nokgdbroundup(char *str)$/;"	f	file:
options	kernel/printk.c	/^	char	*options;			\/* Options for the driver   *\/$/;"	m	struct:console_cmdline	file:
order	mm/slub.c	/^SLAB_ATTR(order);$/;"	v
order	mm/vmscan.c	/^	int order;$/;"	m	struct:scan_control	file:
order_show	mm/slub.c	/^static ssize_t order_show(struct kmem_cache *s, char *buf)$/;"	f	file:
order_store	mm/slub.c	/^static ssize_t order_store(struct kmem_cache *s,$/;"	f	file:
orderly_poweroff	kernel/sys.c	/^EXPORT_SYMBOL_GPL(orderly_poweroff);$/;"	v
orderly_poweroff	kernel/sys.c	/^int orderly_poweroff(bool force)$/;"	f
orphan	fs/compat_ioctl.c	/^	char orphan;$/;"	m	struct:compat_sg_req_info	file:
orphan_cbs_list	kernel/rcutree.h	/^	struct rcu_head *orphan_cbs_list;	\/* list of rcu_head structs *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_head
orphan_cbs_tail	kernel/rcutree.h	/^	struct rcu_head **orphan_cbs_tail;	\/* And tail pointer. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_head
orphan_qlen	kernel/rcutree.h	/^	long orphan_qlen;			\/* Number of orphaned cbs. *\/$/;"	m	struct:rcu_state
osid	kernel/auditsc.c	/^			u32			osid;$/;"	m	struct:audit_context::__anon22::__anon24	file:
osid	kernel/auditsc.c	/^	u32		osid;$/;"	m	struct:audit_names	file:
osync_buffers_list	fs/buffer.c	/^static int osync_buffers_list(spinlock_t *lock, struct list_head *list)$/;"	f	file:
out_of_line_wait_on_bit	kernel/wait.c	/^EXPORT_SYMBOL(out_of_line_wait_on_bit);$/;"	v
out_of_line_wait_on_bit	kernel/wait.c	/^int __sched out_of_line_wait_on_bit(void *word, int bit,$/;"	f
out_of_line_wait_on_bit_lock	kernel/wait.c	/^EXPORT_SYMBOL(out_of_line_wait_on_bit_lock);$/;"	v
out_of_line_wait_on_bit_lock	kernel/wait.c	/^int __sched out_of_line_wait_on_bit_lock(void *word, int bit,$/;"	f
out_of_memory	mm/oom_kill.c	/^void out_of_memory(struct zonelist *zonelist, gfp_t gfp_mask,$/;"	f
outcome	mm/memory-failure.c	/^enum outcome {$/;"	g	file:
output	kernel/timeconst.pl	/^sub output($@)$/;"	s
outputval	kernel/timeconst.pl	/^sub outputval($$)$/;"	s
over_bground_thresh	fs/fs-writeback.c	/^static inline bool over_bground_thresh(void)$/;"	f	file:
overflowgid	kernel/sys.c	/^EXPORT_SYMBOL(overflowgid);$/;"	v
overflowgid	kernel/sys.c	/^int overflowgid = DEFAULT_OVERFLOWGID;$/;"	v
overflowuid	kernel/sys.c	/^EXPORT_SYMBOL(overflowuid);$/;"	v
overflowuid	kernel/sys.c	/^int overflowuid = DEFAULT_OVERFLOWUID;$/;"	v
overloaded	kernel/sched.c	/^	int overloaded;$/;"	m	struct:rt_rq	file:
override_creds	kernel/cred.c	/^EXPORT_SYMBOL(override_creds);$/;"	v
override_creds	kernel/cred.c	/^const struct cred *override_creds(const struct cred *new)$/;"	f
ovflist	fs/eventpoll.c	/^	struct epitem *ovflist;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::epitem	file:
owner	kernel/audit_tree.c	/^		struct audit_tree *owner;$/;"	m	struct:audit_chunk::node	typeref:struct:audit_chunk::node::audit_tree	file:
owner	kernel/futex.c	/^	struct task_struct *owner;$/;"	m	struct:futex_pi_state	typeref:struct:futex_pi_state::task_struct	file:
owner	kernel/module.c	/^	struct module *owner;$/;"	m	struct:find_symbol_arg	typeref:struct:find_symbol_arg::module	file:
owners	kernel/audit_tree.c	/^	} owners[];$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::node	file:
p	fs/aio.c	/^	struct task_struct	*p;$/;"	m	struct:aio_timeout	typeref:struct:aio_timeout::task_struct	file:
pack_id	fs/compat_ioctl.c	/^	compat_int_t pack_id;		\/* [i->o] unused internally (normally) *\/$/;"	m	struct:sg_io_hdr32	file:
pack_id	fs/compat_ioctl.c	/^	int pack_id;$/;"	m	struct:compat_sg_req_info	file:
pack_threadid	kernel/kgdb.c	/^static char *pack_threadid(char *pkt, unsigned char *id)$/;"	f	file:
pad	kernel/compat.c	/^	u16 pad;$/;"	m	struct:compat_sysinfo	file:
pad	mm/slob.c	/^			unsigned long pad[2];$/;"	m	struct:slob_page::__anon8::__anon9	file:
paddr_vmcoreinfo_note	kernel/kexec.c	/^unsigned long __attribute__ ((weak)) paddr_vmcoreinfo_note(void)$/;"	f
padzero	fs/binfmt_elf.c	/^static int padzero(unsigned long elf_bss)$/;"	f	file:
page	mm/highmem.c	/^	struct page *page;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::page	file:
page	mm/migrate.c	/^	struct page *page;$/;"	m	struct:page_to_node	typeref:struct:page_to_node::page	file:
page	mm/slob.c	/^		struct page page;$/;"	m	union:slob_page::__anon8	typeref:struct:slob_page::__anon8::page	file:
page_action	mm/memory-failure.c	/^static int page_action(struct page_state *ps, struct page *p,$/;"	f	file:
page_add_anon_rmap	mm/rmap.c	/^void page_add_anon_rmap(struct page *page,$/;"	f
page_add_file_rmap	mm/rmap.c	/^void page_add_file_rmap(struct page *page)$/;"	f
page_add_new_anon_rmap	mm/rmap.c	/^void page_add_new_anon_rmap(struct page *page,$/;"	f
page_address	mm/highmem.c	/^EXPORT_SYMBOL(page_address);$/;"	v
page_address	mm/highmem.c	/^void *page_address(struct page *page)$/;"	f
page_address_htable	mm/highmem.c	/^} ____cacheline_aligned_in_smp page_address_htable[1<<PA_HASH_ORDER];$/;"	v	typeref:struct:page_address_slot	file:
page_address_in_vma	mm/rmap.c	/^unsigned long page_address_in_vma(struct page *page, struct vm_area_struct *vma)$/;"	f
page_address_init	mm/highmem.c	/^void __init page_address_init(void)$/;"	f
page_address_map	mm/highmem.c	/^struct page_address_map {$/;"	s	file:
page_address_maps	mm/highmem.c	/^static struct page_address_map page_address_maps[LAST_PKMAP];$/;"	v	typeref:struct:page_address_map	file:
page_address_pool	mm/highmem.c	/^static struct list_head page_address_pool;	\/* freelist *\/$/;"	v	typeref:struct:list_head	file:
page_address_slot	mm/highmem.c	/^static struct page_address_slot {$/;"	s	file:
page_alloc_cpu_notify	mm/page_alloc.c	/^static int page_alloc_cpu_notify(struct notifier_block *self,$/;"	f	file:
page_alloc_init	mm/page_alloc.c	/^void __init page_alloc_init(void)$/;"	f
page_cache_add_speculative	include/linux/pagemap.h	/^static inline int page_cache_add_speculative(struct page *page, int count)$/;"	f
page_cache_alloc	include/linux/pagemap.h	/^static inline struct page *page_cache_alloc(struct address_space *x)$/;"	f
page_cache_alloc_cold	include/linux/pagemap.h	/^static inline struct page *page_cache_alloc_cold(struct address_space *x)$/;"	f
page_cache_async_readahead	mm/readahead.c	/^EXPORT_SYMBOL_GPL(page_cache_async_readahead);$/;"	v
page_cache_async_readahead	mm/readahead.c	/^page_cache_async_readahead(struct address_space *mapping,$/;"	f
page_cache_get	include/linux/pagemap.h	83;"	d
page_cache_get_speculative	include/linux/pagemap.h	/^static inline int page_cache_get_speculative(struct page *page)$/;"	f
page_cache_pipe_buf_confirm	fs/splice.c	/^static int page_cache_pipe_buf_confirm(struct pipe_inode_info *pipe,$/;"	f	file:
page_cache_pipe_buf_ops	fs/splice.c	/^static const struct pipe_buf_operations page_cache_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
page_cache_pipe_buf_release	fs/splice.c	/^static void page_cache_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f	file:
page_cache_pipe_buf_steal	fs/splice.c	/^static int page_cache_pipe_buf_steal(struct pipe_inode_info *pipe,$/;"	f	file:
page_cache_read	mm/filemap.c	/^static int page_cache_read(struct file *file, pgoff_t offset)$/;"	f	file:
page_cache_release	include/linux/pagemap.h	84;"	d
page_cache_sync_readahead	mm/readahead.c	/^EXPORT_SYMBOL_GPL(page_cache_sync_readahead);$/;"	v
page_cache_sync_readahead	mm/readahead.c	/^void page_cache_sync_readahead(struct address_space *mapping,$/;"	f
page_cgroup_callback	mm/page_cgroup.c	/^static int __meminit page_cgroup_callback(struct notifier_block *self,$/;"	f	file:
page_cgroup_init	mm/page_cgroup.c	/^void __init page_cgroup_init(void)$/;"	f
page_cgroup_init_flatmem	mm/page_cgroup.c	/^void __init page_cgroup_init_flatmem(void)$/;"	f
page_cgroup_zoneinfo	mm/memcontrol.c	/^page_cgroup_zoneinfo(struct page_cgroup *pc)$/;"	f	file:
page_check_address	mm/rmap.c	/^pte_t *page_check_address(struct page *page, struct mm_struct *mm,$/;"	f
page_cluster	mm/swap.c	/^int page_cluster;$/;"	v
page_errors	fs/direct-io.c	/^	int page_errors;		\/* errno from get_user_pages() *\/$/;"	m	struct:dio	file:
page_evictable	mm/vmscan.c	/^int page_evictable(struct page *page, struct vm_area_struct *vma)$/;"	f
page_follow_link_light	fs/namei.c	/^EXPORT_SYMBOL(page_follow_link_light);$/;"	v
page_follow_link_light	fs/namei.c	/^void *page_follow_link_light(struct dentry *dentry, struct nameidata *nd)$/;"	f
page_freeze_refs	include/linux/pagemap.h	/^static inline int page_freeze_refs(struct page *page, int count)$/;"	f
page_get_cache	mm/slab.c	/^static inline struct kmem_cache *page_get_cache(struct page *page)$/;"	f	file:
page_get_slab	mm/slab.c	/^static inline struct slab *page_get_slab(struct page *page)$/;"	f	file:
page_getlink	fs/namei.c	/^static char *page_getlink(struct dentry * dentry, struct page **ppage)$/;"	f	file:
page_is_buddy	mm/page_alloc.c	/^static inline int page_is_buddy(struct page *page, struct page *buddy,$/;"	f	file:
page_is_consistent	mm/page_alloc.c	/^static int page_is_consistent(struct zone *zone, struct page *page)$/;"	f	file:
page_list	mm/dmapool.c	/^	struct list_head page_list;$/;"	m	struct:dma_page	typeref:struct:dma_page::list_head	file:
page_list	mm/dmapool.c	/^	struct list_head page_list;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::list_head	file:
page_lock_anon_vma	mm/rmap.c	/^struct anon_vma *page_lock_anon_vma(struct page *page)$/;"	f
page_mapped_in_vma	mm/rmap.c	/^int page_mapped_in_vma(struct page *page, struct vm_area_struct *vma)$/;"	f
page_mapping_inuse	mm/vmscan.c	/^static inline int page_mapping_inuse(struct page *page)$/;"	f	file:
page_mkclean	mm/rmap.c	/^EXPORT_SYMBOL_GPL(page_mkclean);$/;"	v
page_mkclean	mm/rmap.c	/^int page_mkclean(struct page *page)$/;"	f
page_mkclean_file	mm/rmap.c	/^static int page_mkclean_file(struct address_space *mapping, struct page *page)$/;"	f	file:
page_mkclean_one	mm/rmap.c	/^static int page_mkclean_one(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
page_offset	include/linux/pagemap.h	/^static inline loff_t page_offset(struct page *page)$/;"	f
page_order	mm/internal.h	/^static inline unsigned long page_order(struct page *page)$/;"	f
page_outside_zone_boundaries	mm/page_alloc.c	/^static int page_outside_zone_boundaries(struct zone *zone, struct page *page)$/;"	f	file:
page_poison	mm/debug-pagealloc.c	/^static inline bool page_poison(struct page *page)$/;"	f	file:
page_pool	mm/bounce.c	/^static mempool_t *page_pool, *isa_page_pool;$/;"	v	file:
page_put_link	fs/namei.c	/^EXPORT_SYMBOL(page_put_link);$/;"	v
page_put_link	fs/namei.c	/^void page_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)$/;"	f
page_readlink	fs/namei.c	/^EXPORT_SYMBOL(page_readlink);$/;"	v
page_readlink	fs/namei.c	/^int page_readlink(struct dentry *dentry, char __user *buffer, int buflen)$/;"	f
page_referenced	mm/rmap.c	/^int page_referenced(struct page *page,$/;"	f
page_referenced_anon	mm/rmap.c	/^static int page_referenced_anon(struct page *page,$/;"	f	file:
page_referenced_file	mm/rmap.c	/^static int page_referenced_file(struct page *page,$/;"	f	file:
page_referenced_ksm	mm/ksm.c	/^int page_referenced_ksm(struct page *page, struct mem_cgroup *memcg,$/;"	f
page_referenced_one	mm/rmap.c	/^int page_referenced_one(struct page *page, struct vm_area_struct *vma,$/;"	f
page_remove_rmap	mm/rmap.c	/^void page_remove_rmap(struct page *page)$/;"	f
page_set_cache	mm/slab.c	/^static inline void page_set_cache(struct page *page, struct kmem_cache *cache)$/;"	f	file:
page_set_slab	mm/slab.c	/^static inline void page_set_slab(struct page *page, struct slab *slab)$/;"	f	file:
page_slot	mm/highmem.c	/^static struct page_address_slot *page_slot(struct page *page)$/;"	f	file:
page_state	mm/memory-failure.c	/^static struct page_state {$/;"	s	file:
page_swapcount	mm/swapfile.c	/^static inline int page_swapcount(struct page *page)$/;"	f	file:
page_symlink	fs/namei.c	/^EXPORT_SYMBOL(page_symlink);$/;"	v
page_symlink	fs/namei.c	/^int page_symlink(struct inode *inode, const char *symname, int len)$/;"	f
page_symlink_inode_operations	fs/namei.c	/^EXPORT_SYMBOL(page_symlink_inode_operations);$/;"	v
page_symlink_inode_operations	fs/namei.c	/^const struct inode_operations page_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
page_to_nid	mm/sparse.c	/^EXPORT_SYMBOL(page_to_nid);$/;"	v
page_to_nid	mm/sparse.c	/^int page_to_nid(struct page *page)$/;"	f
page_to_node	mm/migrate.c	/^struct page_to_node {$/;"	s	file:
page_unfreeze_refs	include/linux/pagemap.h	/^static inline void page_unfreeze_refs(struct page *page, int count)$/;"	f
page_unlock_anon_vma	mm/rmap.c	/^void page_unlock_anon_vma(struct anon_vma *anon_vma)$/;"	f
page_waitqueue	mm/filemap.c	/^static wait_queue_head_t *page_waitqueue(struct page *page)$/;"	f	file:
page_writeback_init	mm/page-writeback.c	/^void __init page_writeback_init(void)$/;"	f
page_zero_new_buffers	fs/buffer.c	/^EXPORT_SYMBOL(page_zero_new_buffers);$/;"	v
page_zero_new_buffers	fs/buffer.c	/^void page_zero_new_buffers(struct page *page, unsigned from, unsigned to)$/;"	f
pageblock_default_order	mm/page_alloc.c	/^static inline int pageblock_default_order(unsigned int order)$/;"	f	file:
pageblock_default_order	mm/page_alloc.c	/^static inline int pageblock_default_order(void)$/;"	f	file:
pageblock_free	mm/memory_hotplug.c	/^static inline int pageblock_free(struct page *page)$/;"	f	file:
pagecache_write_begin	mm/filemap.c	/^EXPORT_SYMBOL(pagecache_write_begin);$/;"	v
pagecache_write_begin	mm/filemap.c	/^int pagecache_write_begin(struct file *file, struct address_space *mapping,$/;"	f
pagecache_write_end	mm/filemap.c	/^EXPORT_SYMBOL(pagecache_write_end);$/;"	v
pagecache_write_end	mm/filemap.c	/^int pagecache_write_end(struct file *file, struct address_space *mapping,$/;"	f
pagefault_out_of_memory	mm/oom_kill.c	/^void pagefault_out_of_memory(void)$/;"	f
pageout	mm/vmscan.c	/^static pageout_t pageout(struct page *page, struct address_space *mapping,$/;"	f	file:
pageout_io	mm/vmscan.c	/^enum pageout_io {$/;"	g	file:
pageout_t	mm/vmscan.c	/^} pageout_t;$/;"	t	typeref:enum:__anon12	file:
pages	fs/direct-io.c	/^	struct page *pages[DIO_PAGES];	\/* page buffer *\/$/;"	m	struct:dio	typeref:struct:dio::page	file:
pages	mm/mempolicy.c	/^	unsigned long pages;$/;"	m	struct:numa_maps	file:
pages_identical	mm/ksm.c	/^static inline int pages_identical(struct page *page1, struct page *page2)$/;"	f	file:
pages_in_io	fs/direct-io.c	/^	int pages_in_io;		\/* approximate total IO pages *\/$/;"	m	struct:dio	file:
pages_shared	mm/ksm.c	/^KSM_ATTR_RO(pages_shared);$/;"	v
pages_shared_show	mm/ksm.c	/^static ssize_t pages_shared_show(struct kobject *kobj,$/;"	f	file:
pages_sharing	mm/ksm.c	/^KSM_ATTR_RO(pages_sharing);$/;"	v
pages_sharing_show	mm/ksm.c	/^static ssize_t pages_sharing_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan	mm/ksm.c	/^KSM_ATTR(pages_to_scan);$/;"	v
pages_to_scan_show	mm/ksm.c	/^static ssize_t pages_to_scan_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan_store	mm/ksm.c	/^static ssize_t pages_to_scan_store(struct kobject *kobj,$/;"	f	file:
pages_unshared	mm/ksm.c	/^KSM_ATTR_RO(pages_unshared);$/;"	v
pages_unshared_show	mm/ksm.c	/^static ssize_t pages_unshared_show(struct kobject *kobj,$/;"	f	file:
pages_volatile	mm/ksm.c	/^KSM_ATTR_RO(pages_volatile);$/;"	v
pages_volatile_show	mm/ksm.c	/^static ssize_t pages_volatile_show(struct kobject *kobj,$/;"	f	file:
pageset_cpuup_callback	mm/page_alloc.c	/^static int __cpuinit pageset_cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
pageset_notifier	mm/page_alloc.c	/^static struct notifier_block __cpuinitdata pageset_notifier =$/;"	v	typeref:struct:__cpuinitdata	file:
pagetypeinfo_file_ops	mm/vmstat.c	/^static const struct file_operations pagetypeinfo_file_ops = {$/;"	v	typeref:struct:file_operations	file:
pagetypeinfo_op	mm/vmstat.c	/^static const struct seq_operations pagetypeinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
pagetypeinfo_open	mm/vmstat.c	/^static int pagetypeinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
pagetypeinfo_show	mm/vmstat.c	/^static int pagetypeinfo_show(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showblockcount	mm/vmstat.c	/^static int pagetypeinfo_showblockcount(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showblockcount_print	mm/vmstat.c	/^static void pagetypeinfo_showblockcount_print(struct seq_file *m,$/;"	f	file:
pagetypeinfo_showfree	mm/vmstat.c	/^static int pagetypeinfo_showfree(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showfree_print	mm/vmstat.c	/^static void pagetypeinfo_showfree_print(struct seq_file *m,$/;"	f	file:
pagevec_lookup	mm/swap.c	/^EXPORT_SYMBOL(pagevec_lookup);$/;"	v
pagevec_lookup	mm/swap.c	/^unsigned pagevec_lookup(struct pagevec *pvec, struct address_space *mapping,$/;"	f
pagevec_lookup_tag	mm/swap.c	/^EXPORT_SYMBOL(pagevec_lookup_tag);$/;"	v
pagevec_lookup_tag	mm/swap.c	/^unsigned pagevec_lookup_tag(struct pagevec *pvec, struct address_space *mapping,$/;"	f
pagevec_move_tail	mm/swap.c	/^static void pagevec_move_tail(struct pagevec *pvec)$/;"	f	file:
pagevec_strip	mm/swap.c	/^void pagevec_strip(struct pagevec *pvec)$/;"	f
paint_it	mm/kmemleak.c	/^static void paint_it(struct kmemleak_object *object, int color)$/;"	f	file:
paint_ptr	mm/kmemleak.c	/^static void paint_ptr(unsigned long ptr, int color)$/;"	f	file:
palette	fs/compat_ioctl.c	/^	compat_uptr_t palette;$/;"	m	struct:compat_video_spu_palette	file:
panic	kernel/panic.c	/^EXPORT_SYMBOL(panic);$/;"	v
panic	kernel/panic.c	/^NORET_TYPE void panic(const char * fmt, ...)$/;"	f
panic_blink	kernel/panic.c	/^EXPORT_SYMBOL(panic_blink);$/;"	v
panic_blink	kernel/panic.c	/^long (*panic_blink)(long time);$/;"	v
panic_block	kernel/hung_task.c	/^static struct notifier_block panic_block = {$/;"	v	typeref:struct:notifier_block	file:
panic_block	kernel/softlockup.c	/^static struct notifier_block panic_block = {$/;"	v	typeref:struct:notifier_block	file:
panic_notifier_list	kernel/panic.c	/^ATOMIC_NOTIFIER_HEAD(panic_notifier_list);$/;"	v
panic_notifier_list	kernel/panic.c	/^EXPORT_SYMBOL(panic_notifier_list);$/;"	v
panic_on_oops	kernel/panic.c	/^int panic_on_oops;$/;"	v
panic_timeout	kernel/panic.c	/^int panic_timeout;$/;"	v
param	kernel/params.c	/^	struct kernel_param *param;$/;"	m	struct:param_attribute	typeref:struct:param_attribute::kernel_param	file:
param_array	kernel/params.c	/^static int param_array(const char *name,$/;"	f	file:
param_array_get	kernel/params.c	/^EXPORT_SYMBOL(param_array_get);$/;"	v
param_array_get	kernel/params.c	/^int param_array_get(char *buffer, struct kernel_param *kp)$/;"	f
param_array_set	kernel/params.c	/^EXPORT_SYMBOL(param_array_set);$/;"	v
param_array_set	kernel/params.c	/^int param_array_set(const char *val, struct kernel_param *kp)$/;"	f
param_attr_show	kernel/params.c	/^static ssize_t param_attr_show(struct module_attribute *mattr,$/;"	f	file:
param_attr_store	kernel/params.c	/^static ssize_t param_attr_store(struct module_attribute *mattr,$/;"	f	file:
param_attribute	kernel/params.c	/^struct param_attribute$/;"	s	file:
param_get_bool	kernel/params.c	/^EXPORT_SYMBOL(param_get_bool);$/;"	v
param_get_bool	kernel/params.c	/^int param_get_bool(char *buffer, struct kernel_param *kp)$/;"	f
param_get_byte	kernel/params.c	/^EXPORT_SYMBOL(param_get_byte);$/;"	v
param_get_charp	kernel/params.c	/^EXPORT_SYMBOL(param_get_charp);$/;"	v
param_get_charp	kernel/params.c	/^int param_get_charp(char *buffer, struct kernel_param *kp)$/;"	f
param_get_int	kernel/params.c	/^EXPORT_SYMBOL(param_get_int);$/;"	v
param_get_invbool	kernel/params.c	/^EXPORT_SYMBOL(param_get_invbool);$/;"	v
param_get_invbool	kernel/params.c	/^int param_get_invbool(char *buffer, struct kernel_param *kp)$/;"	f
param_get_long	kernel/params.c	/^EXPORT_SYMBOL(param_get_long);$/;"	v
param_get_short	kernel/params.c	/^EXPORT_SYMBOL(param_get_short);$/;"	v
param_get_string	kernel/params.c	/^EXPORT_SYMBOL(param_get_string);$/;"	v
param_get_string	kernel/params.c	/^int param_get_string(char *buffer, struct kernel_param *kp)$/;"	f
param_get_uint	kernel/params.c	/^EXPORT_SYMBOL(param_get_uint);$/;"	v
param_get_ulong	kernel/params.c	/^EXPORT_SYMBOL(param_get_ulong);$/;"	v
param_get_ushort	kernel/params.c	/^EXPORT_SYMBOL(param_get_ushort);$/;"	v
param_set_bool	kernel/params.c	/^EXPORT_SYMBOL(param_set_bool);$/;"	v
param_set_bool	kernel/params.c	/^int param_set_bool(const char *val, struct kernel_param *kp)$/;"	f
param_set_byte	kernel/params.c	/^EXPORT_SYMBOL(param_set_byte);$/;"	v
param_set_charp	kernel/params.c	/^EXPORT_SYMBOL(param_set_charp);$/;"	v
param_set_charp	kernel/params.c	/^int param_set_charp(const char *val, struct kernel_param *kp)$/;"	f
param_set_copystring	kernel/params.c	/^EXPORT_SYMBOL(param_set_copystring);$/;"	v
param_set_copystring	kernel/params.c	/^int param_set_copystring(const char *val, struct kernel_param *kp)$/;"	f
param_set_int	kernel/params.c	/^EXPORT_SYMBOL(param_set_int);$/;"	v
param_set_invbool	kernel/params.c	/^EXPORT_SYMBOL(param_set_invbool);$/;"	v
param_set_invbool	kernel/params.c	/^int param_set_invbool(const char *val, struct kernel_param *kp)$/;"	f
param_set_long	kernel/params.c	/^EXPORT_SYMBOL(param_set_long);$/;"	v
param_set_short	kernel/params.c	/^EXPORT_SYMBOL(param_set_short);$/;"	v
param_set_uint	kernel/params.c	/^EXPORT_SYMBOL(param_set_uint);$/;"	v
param_set_ulong	kernel/params.c	/^EXPORT_SYMBOL(param_set_ulong);$/;"	v
param_set_ushort	kernel/params.c	/^EXPORT_SYMBOL(param_set_ushort);$/;"	v
param_sysfs_builtin	kernel/params.c	/^static void __init param_sysfs_builtin(void)$/;"	f	file:
param_sysfs_init	kernel/params.c	/^static int __init param_sysfs_init(void)$/;"	f	file:
param_sysfs_init	kernel/params.c	/^subsys_initcall(param_sysfs_init);$/;"	v
parameq	kernel/params.c	/^static inline int parameq(const char *input, const char *paramname)$/;"	f	file:
parent	kernel/audit_watch.c	/^	struct audit_parent	*parent; \/* associated parent *\/$/;"	m	struct:audit_watch	typeref:struct:audit_watch::audit_parent	file:
parent	kernel/cpuset.c	/^	struct cpuset *parent;		\/* my parent *\/$/;"	m	struct:cpuset	typeref:struct:cpuset::cpuset	file:
parent	kernel/rcutree.h	/^	struct rcu_node *parent;$/;"	m	struct:rcu_node	typeref:struct:rcu_node::rcu_node
parent	kernel/resource.c	/^	struct resource *parent;$/;"	m	struct:region_devres	typeref:struct:region_devres::resource	file:
parent	kernel/sched.c	/^	struct cpuacct *parent;$/;"	m	struct:cpuacct	typeref:struct:cpuacct::cpuacct	file:
parent	kernel/sched.c	/^	struct task_group *parent;$/;"	m	struct:task_group	typeref:struct:task_group::task_group	file:
parent_entity	kernel/sched_fair.c	/^static inline struct sched_entity *parent_entity(struct sched_entity *se)$/;"	f	file:
parent_mem_cgroup	mm/memcontrol.c	/^static struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *mem)$/;"	f	file:
parse	kernel/taskstats.c	/^static int parse(struct nlattr *na, struct cpumask *mask)$/;"	f	file:
parse_args	kernel/params.c	/^int parse_args(const char *name,$/;"	f
parse_cgroupfs_options	kernel/cgroup.c	/^static int parse_cgroupfs_options(char *data,$/;"	f	file:
parse_command	fs/binfmt_misc.c	/^static int parse_command(const char __user *buffer, size_t count)$/;"	f	file:
parse_crashkernel	kernel/kexec.c	/^int __init parse_crashkernel(char 		 *cmdline,$/;"	f
parse_crashkernel_mem	kernel/kexec.c	/^static int __init parse_crashkernel_mem(char 			*cmdline,$/;"	f	file:
parse_crashkernel_simple	kernel/kexec.c	/^static int __init parse_crashkernel_simple(char 		*cmdline,$/;"	f	file:
parse_one	kernel/params.c	/^static int parse_one(char *param,$/;"	f	file:
parsed_hstate	mm/hugetlb.c	/^static struct hstate * __initdata parsed_hstate;$/;"	v	typeref:struct:__initdata	file:
partial	mm/slub.c	/^SLAB_ATTR_RO(partial);$/;"	v
partial_show	mm/slub.c	/^static ssize_t partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
partition_sched_domains	kernel/sched.c	/^void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],$/;"	f
pass_exception	kernel/kgdb.c	/^	int			pass_exception;$/;"	m	struct:kgdb_state	file:
passed_quiesc	kernel/rcutree.h	/^	bool		passed_quiesc;	\/* User-mode\/idle loop etc. *\/$/;"	m	struct:rcu_data
passed_quiesc_completed	kernel/rcutree.h	/^	long		passed_quiesc_completed;$/;"	m	struct:rcu_data
passive_cpu_wait	kernel/kgdb.c	/^static atomic_t			passive_cpu_wait[NR_CPUS];$/;"	v	file:
path	fs/dcookies.c	/^	struct path path;$/;"	m	struct:dcookie_struct	typeref:struct:dcookie_struct::path	file:
path	kernel/audit_watch.c	/^	char			*path;	\/* insertion path *\/$/;"	m	struct:audit_watch	file:
path	kernel/kmod.c	/^	char *path;$/;"	m	struct:subprocess_info	file:
path_get	fs/namei.c	/^EXPORT_SYMBOL(path_get);$/;"	v
path_get	fs/namei.c	/^void path_get(struct path *path)$/;"	f
path_init	fs/namei.c	/^static int path_init(int dfd, const char *name, unsigned int flags, struct nameidata *nd)$/;"	f	file:
path_lookup	fs/namei.c	/^EXPORT_SYMBOL(path_lookup);$/;"	v
path_lookup	fs/namei.c	/^int path_lookup(const char *name, unsigned int flags,$/;"	f
path_put	fs/namei.c	/^EXPORT_SYMBOL(path_put);$/;"	v
path_put	fs/namei.c	/^void path_put(struct path *path)$/;"	f
path_put_conditional	fs/namei.c	/^static void path_put_conditional(struct path *path, struct nameidata *nd)$/;"	f	file:
path_to_nameidata	fs/namei.c	/^static inline void path_to_nameidata(struct path *path, struct nameidata *nd)$/;"	f	file:
path_walk	fs/namei.c	/^static int path_walk(const char *name, struct nameidata *nd)$/;"	f	file:
pathname	kernel/audit_tree.c	/^	char pathname[];$/;"	m	struct:audit_tree	file:
pause_on_oops	kernel/panic.c	/^static int pause_on_oops;$/;"	v	file:
pause_on_oops_flag	kernel/panic.c	/^static int pause_on_oops_flag;$/;"	v	file:
pc	kernel/profile.c	/^	u32 pc, hits;$/;"	m	struct:profile_hit	file:
pcpu_alloc	mm/percpu.c	/^static void *pcpu_alloc(size_t size, size_t align, bool reserved)$/;"	f	file:
pcpu_alloc_alloc_info	mm/percpu.c	/^struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,$/;"	f
pcpu_alloc_area	mm/percpu.c	/^static int pcpu_alloc_area(struct pcpu_chunk *chunk, int size, int align)$/;"	f	file:
pcpu_alloc_pages	mm/percpu.c	/^static int pcpu_alloc_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_base_addr	mm/percpu.c	/^EXPORT_SYMBOL_GPL(pcpu_base_addr);$/;"	v
pcpu_build_alloc_info	mm/percpu.c	/^struct pcpu_alloc_info * __init pcpu_build_alloc_info($/;"	f
pcpu_calc_fc_sizes	mm/percpu.c	/^static inline size_t pcpu_calc_fc_sizes(size_t static_size,$/;"	f	file:
pcpu_chunk	mm/percpu.c	/^struct pcpu_chunk {$/;"	s	file:
pcpu_chunk_addr	mm/percpu.c	/^static unsigned long pcpu_chunk_addr(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_addr_search	mm/percpu.c	/^static struct pcpu_chunk *pcpu_chunk_addr_search(void *addr)$/;"	f	file:
pcpu_chunk_page	mm/percpu.c	/^static struct page *pcpu_chunk_page(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_relocate	mm/percpu.c	/^static void pcpu_chunk_relocate(struct pcpu_chunk *chunk, int oslot)$/;"	f	file:
pcpu_chunk_slot	mm/percpu.c	/^static int pcpu_chunk_slot(const struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_depopulate_chunk	mm/percpu.c	/^static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk, int off, int size)$/;"	f	file:
pcpu_dfl_fc_alloc	mm/percpu.c	/^static void * __init pcpu_dfl_fc_alloc(unsigned int cpu, size_t size,$/;"	f	file:
pcpu_dfl_fc_free	mm/percpu.c	/^static void __init pcpu_dfl_fc_free(void *ptr, size_t size)$/;"	f	file:
pcpu_dump_alloc_info	mm/percpu.c	/^static void pcpu_dump_alloc_info(const char *lvl,$/;"	f	file:
pcpu_embed_first_chunk	mm/percpu.c	/^int __init pcpu_embed_first_chunk(size_t reserved_size, ssize_t dyn_size,$/;"	f
pcpu_extend_area_map	mm/percpu.c	/^static int pcpu_extend_area_map(struct pcpu_chunk *chunk, int new_alloc)$/;"	f	file:
pcpu_first_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_first_chunk;$/;"	v	typeref:struct:pcpu_chunk	file:
pcpu_for_each_pop_region	mm/percpu.c	255;"	d	file:
pcpu_for_each_unpop_region	mm/percpu.c	250;"	d	file:
pcpu_free_alloc_info	mm/percpu.c	/^void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai)$/;"	f
pcpu_free_area	mm/percpu.c	/^static void pcpu_free_area(struct pcpu_chunk *chunk, int freeme)$/;"	f	file:
pcpu_free_pages	mm/percpu.c	/^static void pcpu_free_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_free_vm_areas	mm/vmalloc.c	/^void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms)$/;"	f
pcpu_get_page_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_get_page_chunk(struct page *page)$/;"	f	file:
pcpu_get_pages_and_bitmap	mm/percpu.c	/^static struct page **pcpu_get_pages_and_bitmap(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_get_vm_areas	mm/vmalloc.c	/^struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,$/;"	f
pcpu_map_pages	mm/percpu.c	/^static int pcpu_map_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_mem_alloc	mm/percpu.c	/^static void *pcpu_mem_alloc(size_t size)$/;"	f	file:
pcpu_mem_free	mm/percpu.c	/^static void pcpu_mem_free(void *ptr, size_t size)$/;"	f	file:
pcpu_need_to_extend	mm/percpu.c	/^static int pcpu_need_to_extend(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_next_pop	mm/percpu.c	/^static void pcpu_next_pop(struct pcpu_chunk *chunk, int *rs, int *re, int end)$/;"	f	file:
pcpu_next_unpop	mm/percpu.c	/^static void pcpu_next_unpop(struct pcpu_chunk *chunk, int *rs, int *re, int end)$/;"	f	file:
pcpu_page_first_chunk	mm/percpu.c	/^int __init pcpu_page_first_chunk(size_t reserved_size,$/;"	f
pcpu_page_idx	mm/percpu.c	/^static int pcpu_page_idx(unsigned int cpu, int page_idx)$/;"	f	file:
pcpu_populate_chunk	mm/percpu.c	/^static int pcpu_populate_chunk(struct pcpu_chunk *chunk, int off, int size)$/;"	f	file:
pcpu_post_map_flush	mm/percpu.c	/^static void pcpu_post_map_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_post_unmap_tlb_flush	mm/percpu.c	/^static void pcpu_post_unmap_tlb_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_pre_unmap_flush	mm/percpu.c	/^static void pcpu_pre_unmap_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_reclaim	mm/percpu.c	/^static void pcpu_reclaim(struct work_struct *work)$/;"	f	file:
pcpu_reserved_chunk	mm/percpu.c	/^static struct pcpu_chunk *pcpu_reserved_chunk;$/;"	v	typeref:struct:pcpu_chunk	file:
pcpu_reserved_chunk_limit	mm/percpu.c	/^static int pcpu_reserved_chunk_limit;$/;"	v	file:
pcpu_set_page_chunk	mm/percpu.c	/^static void pcpu_set_page_chunk(struct page *page, struct pcpu_chunk *pcpu)$/;"	f	file:
pcpu_setup_first_chunk	mm/percpu.c	/^int __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,$/;"	f
pcpu_size_to_slot	mm/percpu.c	/^static int pcpu_size_to_slot(int size)$/;"	f	file:
pcpu_split_block	mm/percpu.c	/^static void pcpu_split_block(struct pcpu_chunk *chunk, int i,$/;"	f	file:
pcpu_unmap_pages	mm/percpu.c	/^static void pcpu_unmap_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pending	fs/fs-writeback.c	/^	atomic_t pending;		\/* number of threads still to do work *\/$/;"	m	struct:bdi_work	file:
per_cpu_ptr_to_phys	mm/percpu.c	/^phys_addr_t per_cpu_ptr_to_phys(void *addr)$/;"	f
per_node_hstate_attr_group	mm/hugetlb.c	/^static struct attribute_group per_node_hstate_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
per_node_hstate_attrs	mm/hugetlb.c	/^static struct attribute *per_node_hstate_attrs[] = {$/;"	v	typeref:struct:attribute	file:
percpu_alloc_setup	mm/percpu.c	/^static int __init percpu_alloc_setup(char *str)$/;"	f	file:
percpu_modalloc	kernel/module.c	/^static inline void *percpu_modalloc(unsigned long size, unsigned long align,$/;"	f	file:
percpu_modalloc	kernel/module.c	/^static void *percpu_modalloc(unsigned long size, unsigned long align,$/;"	f	file:
percpu_modcopy	kernel/module.c	/^static inline void percpu_modcopy(void *pcpudst, const void *src,$/;"	f	file:
percpu_modcopy	kernel/module.c	/^static void percpu_modcopy(void *pcpudest, const void *from, unsigned long size)$/;"	f	file:
percpu_modfree	kernel/module.c	/^static inline void percpu_modfree(void *pcpuptr)$/;"	f	file:
percpu_modfree	kernel/module.c	/^static void percpu_modfree(void *freeme)$/;"	f	file:
percpu_pagelist_fraction	mm/page_alloc.c	/^int percpu_pagelist_fraction;$/;"	v
percpu_pagelist_fraction_sysctl_handler	mm/page_alloc.c	/^int percpu_pagelist_fraction_sysctl_handler(ctl_table *table, int write,$/;"	f
perf_adjust_period	kernel/perf_event.c	/^static void perf_adjust_period(struct perf_event *event, u64 events)$/;"	f	file:
perf_bp_event	kernel/perf_event.c	/^void perf_bp_event(struct perf_event *bp, void *data)$/;"	f
perf_bp_event	kernel/perf_event.c	/^void perf_bp_event(struct perf_event *bp, void *regs)$/;"	f
perf_callchain	kernel/perf_event.c	/^__weak struct perf_callchain_entry *perf_callchain(struct pt_regs *regs)$/;"	f
perf_clock	kernel/perf_event.c	/^static inline u64 perf_clock(void)$/;"	f	file:
perf_comm_event	kernel/perf_event.c	/^struct perf_comm_event {$/;"	s	file:
perf_copy_attr	kernel/perf_event.c	/^static int perf_copy_attr(struct perf_event_attr __user *uattr,$/;"	f	file:
perf_cpu_nb	kernel/perf_event.c	/^static struct notifier_block __cpuinitdata perf_cpu_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
perf_cpu_notify	kernel/perf_event.c	/^perf_cpu_notify(struct notifier_block *self, unsigned long action, void *hcpu)$/;"	f	file:
perf_ctx_adjust_freq	kernel/perf_event.c	/^static void perf_ctx_adjust_freq(struct perf_event_context *ctx)$/;"	f	file:
perf_data_size	kernel/perf_event.c	/^static unsigned long perf_data_size(struct perf_mmap_data *data)$/;"	f	file:
perf_disable	kernel/perf_event.c	/^void perf_disable(void)$/;"	f
perf_enable	kernel/perf_event.c	/^void perf_enable(void)$/;"	f
perf_event_alloc	kernel/perf_event.c	/^perf_event_alloc(struct perf_event_attr *attr,$/;"	f	file:
perf_event_comm	kernel/perf_event.c	/^void perf_event_comm(struct task_struct *task)$/;"	f
perf_event_comm_ctx	kernel/perf_event.c	/^static void perf_event_comm_ctx(struct perf_event_context *ctx,$/;"	f	file:
perf_event_comm_event	kernel/perf_event.c	/^static void perf_event_comm_event(struct perf_comm_event *comm_event)$/;"	f	file:
perf_event_comm_match	kernel/perf_event.c	/^static int perf_event_comm_match(struct perf_event *event)$/;"	f	file:
perf_event_comm_output	kernel/perf_event.c	/^static void perf_event_comm_output(struct perf_event *event,$/;"	f	file:
perf_event_cpu_sched_in	kernel/perf_event.c	/^static void perf_event_cpu_sched_in(struct perf_cpu_context *cpuctx, int cpu)$/;"	f	file:
perf_event_cpu_sched_out	kernel/perf_event.c	/^static void perf_event_cpu_sched_out(struct perf_cpu_context *cpuctx)$/;"	f	file:
perf_event_create_kernel_counter	kernel/perf_event.c	/^EXPORT_SYMBOL_GPL(perf_event_create_kernel_counter);$/;"	v
perf_event_create_kernel_counter	kernel/perf_event.c	/^perf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,$/;"	f
perf_event_disable	kernel/perf_event.c	/^void perf_event_disable(struct perf_event *event)$/;"	f
perf_event_do_pending	kernel/perf_event.c	/^void perf_event_do_pending(void)$/;"	f
perf_event_enable	kernel/perf_event.c	/^void perf_event_enable(struct perf_event *event)$/;"	f
perf_event_enable_on_exec	kernel/perf_event.c	/^static void perf_event_enable_on_exec(struct task_struct *task)$/;"	f	file:
perf_event_exit_cpu	kernel/perf_event.c	/^static inline void perf_event_exit_cpu(int cpu) { }$/;"	f	file:
perf_event_exit_cpu	kernel/perf_event.c	/^static void perf_event_exit_cpu(int cpu)$/;"	f	file:
perf_event_exit_task	kernel/perf_event.c	/^void perf_event_exit_task(struct task_struct *child)$/;"	f
perf_event_for_each	kernel/perf_event.c	/^static void perf_event_for_each(struct perf_event *event,$/;"	f	file:
perf_event_for_each_child	kernel/perf_event.c	/^static void perf_event_for_each_child(struct perf_event *event,$/;"	f	file:
perf_event_fork	kernel/perf_event.c	/^void perf_event_fork(struct task_struct *task)$/;"	f
perf_event_free_filter	kernel/perf_event.c	/^static void perf_event_free_filter(struct perf_event *event)$/;"	f	file:
perf_event_free_task	kernel/perf_event.c	/^void perf_event_free_task(struct task_struct *task)$/;"	f
perf_event_id	kernel/perf_event.c	/^static atomic64_t perf_event_id;$/;"	v	file:
perf_event_index	kernel/perf_event.c	/^static int perf_event_index(struct perf_event *event)$/;"	f	file:
perf_event_init	kernel/perf_event.c	/^void __init perf_event_init(void)$/;"	f
perf_event_init_cpu	kernel/perf_event.c	/^static void __cpuinit perf_event_init_cpu(int cpu)$/;"	f	file:
perf_event_init_task	kernel/perf_event.c	/^int perf_event_init_task(struct task_struct *child)$/;"	f
perf_event_mmap_ctx	kernel/perf_event.c	/^static void perf_event_mmap_ctx(struct perf_event_context *ctx,$/;"	f	file:
perf_event_mmap_event	kernel/perf_event.c	/^static void perf_event_mmap_event(struct perf_mmap_event *mmap_event)$/;"	f	file:
perf_event_mmap_match	kernel/perf_event.c	/^static int perf_event_mmap_match(struct perf_event *event,$/;"	f	file:
perf_event_mmap_output	kernel/perf_event.c	/^static void perf_event_mmap_output(struct perf_event *event,$/;"	f	file:
perf_event_output	kernel/perf_event.c	/^static void perf_event_output(struct perf_event *event, int nmi,$/;"	f	file:
perf_event_overflow	kernel/perf_event.c	/^int perf_event_overflow(struct perf_event *event, int nmi,$/;"	f
perf_event_period	kernel/perf_event.c	/^static int perf_event_period(struct perf_event *event, u64 __user *arg)$/;"	f	file:
perf_event_pid	kernel/perf_event.c	/^static u32 perf_event_pid(struct perf_event *event, struct task_struct *p)$/;"	f	file:
perf_event_print_debug	kernel/perf_event.c	/^void __weak perf_event_print_debug(void)	{ }$/;"	f
perf_event_read	kernel/perf_event.c	/^static u64 perf_event_read(struct perf_event *event)$/;"	f	file:
perf_event_read_event	kernel/perf_event.c	/^perf_event_read_event(struct perf_event *event,$/;"	f	file:
perf_event_read_group	kernel/perf_event.c	/^static int perf_event_read_group(struct perf_event *event,$/;"	f	file:
perf_event_read_one	kernel/perf_event.c	/^static int perf_event_read_one(struct perf_event *event,$/;"	f	file:
perf_event_read_size	kernel/perf_event.c	/^static int perf_event_read_size(struct perf_event *event)$/;"	f	file:
perf_event_read_value	kernel/perf_event.c	/^EXPORT_SYMBOL_GPL(perf_event_read_value);$/;"	v
perf_event_read_value	kernel/perf_event.c	/^u64 perf_event_read_value(struct perf_event *event, u64 *enabled, u64 *running)$/;"	f
perf_event_refresh	kernel/perf_event.c	/^static int perf_event_refresh(struct perf_event *event, int refresh)$/;"	f	file:
perf_event_release_kernel	kernel/perf_event.c	/^EXPORT_SYMBOL_GPL(perf_event_release_kernel);$/;"	v
perf_event_release_kernel	kernel/perf_event.c	/^int perf_event_release_kernel(struct perf_event *event)$/;"	f
perf_event_remove_from_context	kernel/perf_event.c	/^static void perf_event_remove_from_context(struct perf_event *event)$/;"	f	file:
perf_event_reset	kernel/perf_event.c	/^static void perf_event_reset(struct perf_event *event)$/;"	f	file:
perf_event_set_filter	kernel/perf_event.c	/^static int perf_event_set_filter(struct perf_event *event, void __user *arg)$/;"	f	file:
perf_event_set_output	kernel/perf_event.c	/^static int perf_event_set_output(struct perf_event *event, int output_fd)$/;"	f	file:
perf_event_sync_stat	kernel/perf_event.c	/^static void perf_event_sync_stat(struct perf_event_context *ctx,$/;"	f	file:
perf_event_sysfs_init	kernel/perf_event.c	/^device_initcall(perf_event_sysfs_init);$/;"	v
perf_event_sysfs_init	kernel/perf_event.c	/^static int __init perf_event_sysfs_init(void)$/;"	f	file:
perf_event_task	kernel/perf_event.c	/^static void perf_event_task(struct task_struct *task,$/;"	f	file:
perf_event_task_ctx	kernel/perf_event.c	/^static void perf_event_task_ctx(struct perf_event_context *ctx,$/;"	f	file:
perf_event_task_disable	kernel/perf_event.c	/^int perf_event_task_disable(void)$/;"	f
perf_event_task_enable	kernel/perf_event.c	/^int perf_event_task_enable(void)$/;"	f
perf_event_task_event	kernel/perf_event.c	/^static void perf_event_task_event(struct perf_task_event *task_event)$/;"	f	file:
perf_event_task_match	kernel/perf_event.c	/^static int perf_event_task_match(struct perf_event *event)$/;"	f	file:
perf_event_task_output	kernel/perf_event.c	/^static void perf_event_task_output(struct perf_event *event,$/;"	f	file:
perf_event_task_sched_in	kernel/perf_event.c	/^void perf_event_task_sched_in(struct task_struct *task, int cpu)$/;"	f
perf_event_task_sched_out	kernel/perf_event.c	/^void perf_event_task_sched_out(struct task_struct *task,$/;"	f
perf_event_task_tick	kernel/perf_event.c	/^void perf_event_task_tick(struct task_struct *curr, int cpu)$/;"	f
perf_event_tid	kernel/perf_event.c	/^static u32 perf_event_tid(struct perf_event *event, struct task_struct *p)$/;"	f	file:
perf_event_update_userpage	kernel/perf_event.c	/^void perf_event_update_userpage(struct perf_event *event)$/;"	f
perf_event_wakeup	kernel/perf_event.c	/^void perf_event_wakeup(struct perf_event *event)$/;"	f
perf_exclude_event	kernel/perf_event.c	/^static int perf_exclude_event(struct perf_event *event,$/;"	f	file:
perf_fasync	kernel/perf_event.c	/^static int perf_fasync(int fd, struct file *filp, int on)$/;"	f	file:
perf_fops	kernel/perf_event.c	/^static const struct file_operations perf_fops = {$/;"	v	typeref:struct:file_operations	file:
perf_install_in_context	kernel/perf_event.c	/^perf_install_in_context(struct perf_event_context *ctx,$/;"	f	file:
perf_ioctl	kernel/perf_event.c	/^static long perf_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f	file:
perf_lock_task_context	kernel/perf_event.c	/^perf_lock_task_context(struct task_struct *task, unsigned long *flags)$/;"	f	file:
perf_log_throttle	kernel/perf_event.c	/^static void perf_log_throttle(struct perf_event *event, int enable)$/;"	f	file:
perf_mmap	kernel/perf_event.c	/^static int perf_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
perf_mmap_close	kernel/perf_event.c	/^static void perf_mmap_close(struct vm_area_struct *vma)$/;"	f	file:
perf_mmap_data_alloc	kernel/perf_event.c	/^perf_mmap_data_alloc(struct perf_event *event, int nr_pages)$/;"	f	file:
perf_mmap_data_free	kernel/perf_event.c	/^static void perf_mmap_data_free(struct perf_mmap_data *data)$/;"	f	file:
perf_mmap_data_free_rcu	kernel/perf_event.c	/^static void perf_mmap_data_free_rcu(struct rcu_head *rcu_head)$/;"	f	file:
perf_mmap_data_free_work	kernel/perf_event.c	/^static void perf_mmap_data_free_work(struct work_struct *work)$/;"	f	file:
perf_mmap_data_init	kernel/perf_event.c	/^perf_mmap_data_init(struct perf_event *event, struct perf_mmap_data *data)$/;"	f	file:
perf_mmap_data_release	kernel/perf_event.c	/^static void perf_mmap_data_release(struct perf_event *event)$/;"	f	file:
perf_mmap_event	kernel/perf_event.c	/^struct perf_mmap_event {$/;"	s	file:
perf_mmap_fault	kernel/perf_event.c	/^static int perf_mmap_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
perf_mmap_free_page	kernel/perf_event.c	/^static void perf_mmap_free_page(unsigned long addr)$/;"	f	file:
perf_mmap_open	kernel/perf_event.c	/^static void perf_mmap_open(struct vm_area_struct *vma)$/;"	f	file:
perf_mmap_to_page	kernel/perf_event.c	/^perf_mmap_to_page(struct perf_mmap_data *data, unsigned long pgoff)$/;"	f	file:
perf_mmap_unmark_page	kernel/perf_event.c	/^static void perf_mmap_unmark_page(void *addr)$/;"	f	file:
perf_mmap_vmops	kernel/perf_event.c	/^static const struct vm_operations_struct perf_mmap_vmops = {$/;"	v	typeref:struct:vm_operations_struct	file:
perf_not_pending	kernel/perf_event.c	/^static inline int perf_not_pending(struct perf_event *event)$/;"	f	file:
perf_ops_bp	kernel/hw_breakpoint.c	/^struct pmu perf_ops_bp = {$/;"	v	typeref:struct:pmu
perf_ops_cpu_clock	kernel/perf_event.c	/^static const struct pmu perf_ops_cpu_clock = {$/;"	v	typeref:struct:pmu	file:
perf_ops_generic	kernel/perf_event.c	/^static const struct pmu perf_ops_generic = {$/;"	v	typeref:struct:pmu	file:
perf_ops_task_clock	kernel/perf_event.c	/^static const struct pmu perf_ops_task_clock = {$/;"	v	typeref:struct:pmu	file:
perf_output_begin	kernel/perf_event.c	/^int perf_output_begin(struct perf_output_handle *handle,$/;"	f
perf_output_copy	kernel/perf_event.c	/^void perf_output_copy(struct perf_output_handle *handle,$/;"	f
perf_output_end	kernel/perf_event.c	/^void perf_output_end(struct perf_output_handle *handle)$/;"	f
perf_output_lock	kernel/perf_event.c	/^static void perf_output_lock(struct perf_output_handle *handle)$/;"	f	file:
perf_output_read	kernel/perf_event.c	/^static void perf_output_read(struct perf_output_handle *handle,$/;"	f	file:
perf_output_read_group	kernel/perf_event.c	/^static void perf_output_read_group(struct perf_output_handle *handle,$/;"	f	file:
perf_output_read_one	kernel/perf_event.c	/^static void perf_output_read_one(struct perf_output_handle *handle,$/;"	f	file:
perf_output_sample	kernel/perf_event.c	/^void perf_output_sample(struct perf_output_handle *handle,$/;"	f
perf_output_space	kernel/perf_event.c	/^static bool perf_output_space(struct perf_mmap_data *data, unsigned long tail,$/;"	f	file:
perf_output_unlock	kernel/perf_event.c	/^static void perf_output_unlock(struct perf_output_handle *handle)$/;"	f	file:
perf_output_wakeup	kernel/perf_event.c	/^static void perf_output_wakeup(struct perf_output_handle *handle)$/;"	f	file:
perf_paranoid_cpu	kernel/perf_event.c	/^static inline bool perf_paranoid_cpu(void)$/;"	f	file:
perf_paranoid_kernel	kernel/perf_event.c	/^static inline bool perf_paranoid_kernel(void)$/;"	f	file:
perf_paranoid_tracepoint_raw	kernel/perf_event.c	/^static inline bool perf_paranoid_tracepoint_raw(void)$/;"	f	file:
perf_pending_event	kernel/perf_event.c	/^static void perf_pending_event(struct perf_pending_entry *entry)$/;"	f	file:
perf_pending_queue	kernel/perf_event.c	/^static void perf_pending_queue(struct perf_pending_entry *entry,$/;"	f	file:
perf_pending_sync	kernel/perf_event.c	/^static void perf_pending_sync(struct perf_event *event)$/;"	f	file:
perf_pin_task_context	kernel/perf_event.c	/^static struct perf_event_context *perf_pin_task_context(struct task_struct *task)$/;"	f	file:
perf_poll	kernel/perf_event.c	/^static unsigned int perf_poll(struct file *file, poll_table *wait)$/;"	f	file:
perf_prepare_sample	kernel/perf_event.c	/^void perf_prepare_sample(struct perf_event_header *header,$/;"	f
perf_read	kernel/perf_event.c	/^perf_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
perf_read_event	kernel/perf_event.c	/^struct perf_read_event {$/;"	s	file:
perf_read_hw	kernel/perf_event.c	/^perf_read_hw(struct perf_event *event, char __user *buf, size_t count)$/;"	f	file:
perf_release	kernel/perf_event.c	/^static int perf_release(struct inode *inode, struct file *file)$/;"	f	file:
perf_set_overcommit	kernel/perf_event.c	/^perf_set_overcommit(struct sysdev_class *class, const char *buf, size_t count)$/;"	f	file:
perf_set_reserve_percpu	kernel/perf_event.c	/^perf_set_reserve_percpu(struct sysdev_class *class,$/;"	f	file:
perf_show_overcommit	kernel/perf_event.c	/^static ssize_t perf_show_overcommit(struct sysdev_class *class, char *buf)$/;"	f	file:
perf_show_reserve_percpu	kernel/perf_event.c	/^static ssize_t perf_show_reserve_percpu(struct sysdev_class *class, char *buf)$/;"	f	file:
perf_swevent_add	kernel/perf_event.c	/^static void perf_swevent_add(struct perf_event *event, u64 nr,$/;"	f	file:
perf_swevent_cancel_hrtimer	kernel/perf_event.c	/^static void perf_swevent_cancel_hrtimer(struct perf_event *event)$/;"	f	file:
perf_swevent_ctx_event	kernel/perf_event.c	/^static void perf_swevent_ctx_event(struct perf_event_context *ctx,$/;"	f	file:
perf_swevent_disable	kernel/perf_event.c	/^static void perf_swevent_disable(struct perf_event *event)$/;"	f	file:
perf_swevent_enable	kernel/perf_event.c	/^static int perf_swevent_enable(struct perf_event *event)$/;"	f	file:
perf_swevent_enabled	kernel/perf_event.c	/^atomic_t perf_swevent_enabled[PERF_COUNT_SW_MAX];$/;"	v
perf_swevent_get_recursion_context	kernel/perf_event.c	/^EXPORT_SYMBOL_GPL(perf_swevent_get_recursion_context);$/;"	v
perf_swevent_get_recursion_context	kernel/perf_event.c	/^int perf_swevent_get_recursion_context(void)$/;"	f
perf_swevent_hrtimer	kernel/perf_event.c	/^static enum hrtimer_restart perf_swevent_hrtimer(struct hrtimer *hrtimer)$/;"	f	file:
perf_swevent_is_counting	kernel/perf_event.c	/^static int perf_swevent_is_counting(struct perf_event *event)$/;"	f	file:
perf_swevent_match	kernel/perf_event.c	/^static int perf_swevent_match(struct perf_event *event,$/;"	f	file:
perf_swevent_overflow	kernel/perf_event.c	/^static void perf_swevent_overflow(struct perf_event *event, u64 overflow,$/;"	f	file:
perf_swevent_put_recursion_context	kernel/perf_event.c	/^EXPORT_SYMBOL_GPL(perf_swevent_put_recursion_context);$/;"	v
perf_swevent_put_recursion_context	kernel/perf_event.c	/^void perf_swevent_put_recursion_context(int rctx)$/;"	f
perf_swevent_read	kernel/perf_event.c	/^static void perf_swevent_read(struct perf_event *event)$/;"	f	file:
perf_swevent_set_period	kernel/perf_event.c	/^static u64 perf_swevent_set_period(struct perf_event *event)$/;"	f	file:
perf_swevent_start_hrtimer	kernel/perf_event.c	/^static void perf_swevent_start_hrtimer(struct perf_event *event)$/;"	f	file:
perf_swevent_unthrottle	kernel/perf_event.c	/^static void perf_swevent_unthrottle(struct perf_event *event)$/;"	f	file:
perf_task_event	kernel/perf_event.c	/^struct perf_task_event {$/;"	s	file:
perf_tp_event	kernel/perf_event.c	/^EXPORT_SYMBOL_GPL(perf_tp_event);$/;"	v
perf_tp_event	kernel/perf_event.c	/^void perf_tp_event(int event_id, u64 addr, u64 count, void *record,$/;"	f
perf_tp_event_match	kernel/perf_event.c	/^static int perf_tp_event_match(struct perf_event *event,$/;"	f	file:
perf_unpin_context	kernel/perf_event.c	/^static void perf_unpin_context(struct perf_event_context *ctx)$/;"	f	file:
perfclass_attr_group	kernel/perf_event.c	/^static struct attribute_group perfclass_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
perfclass_attrs	kernel/perf_event.c	/^static struct attribute *perfclass_attrs[] = {$/;"	v	typeref:struct:attribute	file:
perlvals	kernel/timeconst.pl	/^sub perlvals(@) {$/;"	s
perm_gid	kernel/auditsc.c	/^			gid_t			perm_gid;$/;"	m	struct:audit_context::__anon22::__anon24	file:
perm_mode	kernel/auditsc.c	/^			mode_t			perm_mode;$/;"	m	struct:audit_context::__anon22::__anon24	file:
perm_uid	kernel/auditsc.c	/^			uid_t			perm_uid;$/;"	m	struct:audit_context::__anon22::__anon24	file:
permitted	kernel/auditsc.c	/^	kernel_cap_t		permitted;$/;"	m	struct:audit_cap_data	file:
persistent_huge_pages	mm/hugetlb.c	1243;"	d	file:
personality	kernel/auditsc.c	/^	unsigned long	    personality;$/;"	m	struct:audit_context	file:
pfn_inject_exit	mm/hwpoison-inject.c	/^module_exit(pfn_inject_exit);$/;"	v
pfn_inject_exit	mm/hwpoison-inject.c	/^static void pfn_inject_exit(void)$/;"	f	file:
pfn_inject_init	mm/hwpoison-inject.c	/^module_init(pfn_inject_init);$/;"	v
pfn_inject_init	mm/hwpoison-inject.c	/^static int pfn_inject_init(void)$/;"	f	file:
pfn_to_bitidx	mm/page_alloc.c	/^static inline int pfn_to_bitidx(struct zone *zone, unsigned long pfn)$/;"	f	file:
pgd_clear_bad	mm/memory.c	/^void pgd_clear_bad(pgd_t *pgd)$/;"	f
pgdat_page_cgroup_init	mm/page_cgroup.c	/^void __meminit pgdat_page_cgroup_init(struct pglist_data *pgdat)$/;"	f
pgoff	kernel/perf_event.c	/^		u64				pgoff;$/;"	m	struct:perf_mmap_event::__anon39	file:
pgprot_modify	mm/mprotect.c	/^static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)$/;"	f	file:
pi_list_entry	kernel/rtmutex_common.h	/^	struct plist_node	pi_list_entry;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::plist_node
pi_mutex	kernel/futex.c	/^	struct rt_mutex pi_mutex;$/;"	m	struct:futex_pi_state	typeref:struct:futex_pi_state::rt_mutex	file:
pi_state	kernel/futex.c	/^	struct futex_pi_state *pi_state;$/;"	m	struct:futex_q	typeref:struct:futex_q::futex_pi_state	file:
pick_next_entity	kernel/sched_fair.c	/^static struct sched_entity *pick_next_entity(struct cfs_rq *cfs_rq)$/;"	f	file:
pick_next_highest_task_rt	kernel/sched_rt.c	/^static struct task_struct *pick_next_highest_task_rt(struct rq *rq, int cpu)$/;"	f	file:
pick_next_pushable_task	kernel/sched_rt.c	/^static struct task_struct *pick_next_pushable_task(struct rq *rq)$/;"	f	file:
pick_next_rt_entity	kernel/sched_rt.c	/^static struct sched_rt_entity *pick_next_rt_entity(struct rq *rq,$/;"	f	file:
pick_next_task	kernel/sched.c	/^pick_next_task(struct rq *rq)$/;"	f	file:
pick_next_task_fair	kernel/sched_fair.c	/^static struct task_struct *pick_next_task_fair(struct rq *rq)$/;"	f	file:
pick_next_task_idle	kernel/sched_idletask.c	/^static struct task_struct *pick_next_task_idle(struct rq *rq)$/;"	f	file:
pick_next_task_rt	kernel/sched_rt.c	/^static struct task_struct *pick_next_task_rt(struct rq *rq)$/;"	f	file:
pick_rt_task	kernel/sched_rt.c	/^static int pick_rt_task(struct rq *rq, struct task_struct *p, int cpu)$/;"	f	file:
pid	kernel/audit.c	/^	int pid;$/;"	m	struct:audit_reply	file:
pid	kernel/audit.h	/^	int pid;$/;"	m	struct:audit_netlink_list
pid	kernel/auditsc.c	/^			pid_t			pid;$/;"	m	struct:audit_context::__anon22::__anon29	file:
pid	kernel/auditsc.c	/^	pid_t			pid;$/;"	m	struct:audit_aux_data_capset	file:
pid	kernel/auditsc.c	/^	pid_t		    pid, ppid;$/;"	m	struct:audit_context	file:
pid	kernel/perf_event.c	/^		u32				pid;$/;"	m	struct:perf_comm_event::__anon38	file:
pid	kernel/perf_event.c	/^		u32				pid;$/;"	m	struct:perf_mmap_event::__anon39	file:
pid	kernel/perf_event.c	/^		u32				pid;$/;"	m	struct:perf_task_event::__anon37	file:
pid	kernel/perf_event.c	/^	u32				pid;$/;"	m	struct:perf_read_event	file:
pid	kernel/taskstats.c	/^	pid_t pid;$/;"	m	struct:listener	file:
pid	mm/kmemleak.c	/^	pid_t pid;			\/* pid of the current task *\/$/;"	m	struct:kmemleak_object	file:
pid	mm/slub.c	/^	int pid;		\/* Pid context *\/$/;"	m	struct:track	file:
pid_cache	kernel/pid_namespace.c	/^struct pid_cache {$/;"	s	file:
pid_count	kernel/auditsc.c	/^	int			pid_count;$/;"	m	struct:audit_aux_data_pids	file:
pid_hash	kernel/pid.c	/^static struct hlist_head *pid_hash;$/;"	v	typeref:struct:hlist_head	file:
pid_hashfn	kernel/pid.c	40;"	d	file:
pid_max	kernel/pid.c	/^int pid_max = PID_MAX_DEFAULT;$/;"	v
pid_max_max	kernel/pid.c	/^int pid_max_max = PID_MAX_LIMIT;$/;"	v
pid_max_min	kernel/pid.c	/^int pid_max_min = RESERVED_PIDS + 1;$/;"	v
pid_namespaces_init	kernel/pid_namespace.c	/^__initcall(pid_namespaces_init);$/;"	v
pid_namespaces_init	kernel/pid_namespace.c	/^static __init int pid_namespaces_init(void)$/;"	f	file:
pid_nr_ns	kernel/pid.c	/^pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns)$/;"	f
pid_ns_cachep	kernel/pid_namespace.c	/^static struct kmem_cache *pid_ns_cachep;$/;"	v	typeref:struct:kmem_cache	file:
pid_task	kernel/pid.c	/^EXPORT_SYMBOL(pid_task);$/;"	v
pid_task	kernel/pid.c	/^struct task_struct *pid_task(struct pid *pid, enum pid_type type)$/;"	f
pid_vnr	kernel/pid.c	/^EXPORT_SYMBOL_GPL(pid_vnr);$/;"	v
pid_vnr	kernel/pid.c	/^pid_t pid_vnr(struct pid *pid)$/;"	f
pidhash_init	kernel/pid.c	/^void __init pidhash_init(void)$/;"	f
pidhash_shift	kernel/pid.c	/^static unsigned int pidhash_shift = 4;$/;"	v	file:
pidlist_allocate	kernel/cgroup.c	/^static void *pidlist_allocate(int count)$/;"	f	file:
pidlist_array_load	kernel/cgroup.c	/^static int pidlist_array_load(struct cgroup *cgrp, enum cgroup_filetype type,$/;"	f	file:
pidlist_free	kernel/cgroup.c	/^static void pidlist_free(void *p)$/;"	f	file:
pidlist_resize	kernel/cgroup.c	/^static void *pidlist_resize(void *p, int newcount)$/;"	f	file:
pidlist_uniq	kernel/cgroup.c	/^static int pidlist_uniq(pid_t **p, int length)$/;"	f	file:
pidmap_init	kernel/pid.c	/^void __init pidmap_init(void)$/;"	f
pin_inotify_watch	fs/notify/inotify/inotify.c	/^int pin_inotify_watch(struct inotify_watch *watch)$/;"	f
pin_sb_for_writeback	fs/fs-writeback.c	/^static int pin_sb_for_writeback(struct writeback_control *wbc,$/;"	f	file:
pin_to_kill	fs/notify/inotify/inotify.c	/^static int pin_to_kill(struct inotify_handle *ih, struct inotify_watch *watch)$/;"	f	file:
pinned	kernel/hw_breakpoint.c	/^	unsigned int pinned;$/;"	m	struct:bp_busy_slots	file:
pipe_double_lock	fs/pipe.c	/^void pipe_double_lock(struct pipe_inode_info *pipe1,$/;"	f
pipe_fs_type	fs/pipe.c	/^static struct file_system_type pipe_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
pipe_info	fs/splice.c	/^static inline struct pipe_inode_info *pipe_info(struct inode *inode)$/;"	f	file:
pipe_ioctl	fs/pipe.c	/^static long pipe_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f	file:
pipe_iov_copy_from_user	fs/pipe.c	/^pipe_iov_copy_from_user(void *to, struct iovec *iov, unsigned long len,$/;"	f	file:
pipe_iov_copy_to_user	fs/pipe.c	/^pipe_iov_copy_to_user(struct iovec *iov, const void *from, unsigned long len,$/;"	f	file:
pipe_lock	fs/pipe.c	/^EXPORT_SYMBOL(pipe_lock);$/;"	v
pipe_lock	fs/pipe.c	/^void pipe_lock(struct pipe_inode_info *pipe)$/;"	f
pipe_lock_nested	fs/pipe.c	/^static void pipe_lock_nested(struct pipe_inode_info *pipe, int subclass)$/;"	f	file:
pipe_poll	fs/pipe.c	/^pipe_poll(struct file *filp, poll_table *wait)$/;"	f	file:
pipe_rdwr_fasync	fs/pipe.c	/^pipe_rdwr_fasync(int fd, struct file *filp, int on)$/;"	f	file:
pipe_rdwr_open	fs/pipe.c	/^pipe_rdwr_open(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_rdwr_release	fs/pipe.c	/^pipe_rdwr_release(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_read	fs/pipe.c	/^pipe_read(struct kiocb *iocb, const struct iovec *_iov,$/;"	f	file:
pipe_read_fasync	fs/pipe.c	/^pipe_read_fasync(int fd, struct file *filp, int on)$/;"	f	file:
pipe_read_open	fs/pipe.c	/^pipe_read_open(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_read_release	fs/pipe.c	/^pipe_read_release(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_release	fs/pipe.c	/^pipe_release(struct inode *inode, int decr, int decw)$/;"	f	file:
pipe_to_file	fs/splice.c	/^EXPORT_SYMBOL(pipe_to_file);$/;"	v
pipe_to_file	fs/splice.c	/^int pipe_to_file(struct pipe_inode_info *pipe, struct pipe_buffer *buf,$/;"	f
pipe_to_sendpage	fs/splice.c	/^static int pipe_to_sendpage(struct pipe_inode_info *pipe,$/;"	f	file:
pipe_to_user	fs/splice.c	/^static int pipe_to_user(struct pipe_inode_info *pipe, struct pipe_buffer *buf,$/;"	f	file:
pipe_unlock	fs/pipe.c	/^EXPORT_SYMBOL(pipe_unlock);$/;"	v
pipe_unlock	fs/pipe.c	/^void pipe_unlock(struct pipe_inode_info *pipe)$/;"	f
pipe_wait	fs/pipe.c	/^void pipe_wait(struct pipe_inode_info *pipe)$/;"	f
pipe_write	fs/pipe.c	/^pipe_write(struct kiocb *iocb, const struct iovec *_iov,$/;"	f	file:
pipe_write_fasync	fs/pipe.c	/^pipe_write_fasync(int fd, struct file *filp, int on)$/;"	f	file:
pipe_write_open	fs/pipe.c	/^pipe_write_open(struct inode *inode, struct file *filp)$/;"	f	file:
pipe_write_release	fs/pipe.c	/^pipe_write_release(struct inode *inode, struct file *filp)$/;"	f	file:
pipefs_dentry_operations	fs/pipe.c	/^static const struct dentry_operations pipefs_dentry_operations = {$/;"	v	typeref:struct:dentry_operations	file:
pipefs_dname	fs/pipe.c	/^static char *pipefs_dname(struct dentry *dentry, char *buffer, int buflen)$/;"	f	file:
pipefs_get_sb	fs/pipe.c	/^static int pipefs_get_sb(struct file_system_type *fs_type,$/;"	f	file:
pkmap_count	mm/highmem.c	/^static int pkmap_count[LAST_PKMAP];$/;"	v	file:
pkmap_page_table	mm/highmem.c	/^pte_t * pkmap_page_table;$/;"	v
place_entity	kernel/sched_fair.c	/^place_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int initial)$/;"	f	file:
pm_power_off_prepare	kernel/sys.c	/^void (*pm_power_off_prepare)(void);$/;"	v
pm_qos_add_notifier	kernel/pm_qos_params.c	/^ int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier)$/;"	f
pm_qos_add_notifier	kernel/pm_qos_params.c	/^EXPORT_SYMBOL_GPL(pm_qos_add_notifier);$/;"	v
pm_qos_add_requirement	kernel/pm_qos_params.c	/^EXPORT_SYMBOL_GPL(pm_qos_add_requirement);$/;"	v
pm_qos_add_requirement	kernel/pm_qos_params.c	/^int pm_qos_add_requirement(int pm_qos_class, char *name, s32 value)$/;"	f
pm_qos_array	kernel/pm_qos_params.c	/^static struct pm_qos_object *pm_qos_array[] = {$/;"	v	typeref:struct:pm_qos_object	file:
pm_qos_object	kernel/pm_qos_params.c	/^struct pm_qos_object {$/;"	s	file:
pm_qos_power_fops	kernel/pm_qos_params.c	/^static const struct file_operations pm_qos_power_fops = {$/;"	v	typeref:struct:file_operations	file:
pm_qos_power_init	kernel/pm_qos_params.c	/^late_initcall(pm_qos_power_init);$/;"	v
pm_qos_power_init	kernel/pm_qos_params.c	/^static int __init pm_qos_power_init(void)$/;"	f	file:
pm_qos_power_miscdev	kernel/pm_qos_params.c	/^	struct miscdevice pm_qos_power_miscdev;$/;"	m	struct:pm_qos_object	typeref:struct:pm_qos_object::miscdevice	file:
pm_qos_power_open	kernel/pm_qos_params.c	/^static int pm_qos_power_open(struct inode *inode, struct file *filp)$/;"	f	file:
pm_qos_power_release	kernel/pm_qos_params.c	/^static int pm_qos_power_release(struct inode *inode, struct file *filp)$/;"	f	file:
pm_qos_power_write	kernel/pm_qos_params.c	/^static ssize_t pm_qos_power_write(struct file *filp, const char __user *buf,$/;"	f	file:
pm_qos_remove_notifier	kernel/pm_qos_params.c	/^EXPORT_SYMBOL_GPL(pm_qos_remove_notifier);$/;"	v
pm_qos_remove_notifier	kernel/pm_qos_params.c	/^int pm_qos_remove_notifier(int pm_qos_class, struct notifier_block *notifier)$/;"	f
pm_qos_remove_requirement	kernel/pm_qos_params.c	/^EXPORT_SYMBOL_GPL(pm_qos_remove_requirement);$/;"	v
pm_qos_remove_requirement	kernel/pm_qos_params.c	/^void pm_qos_remove_requirement(int pm_qos_class, char *name)$/;"	f
pm_qos_requirement	kernel/pm_qos_params.c	/^EXPORT_SYMBOL_GPL(pm_qos_requirement);$/;"	v
pm_qos_requirement	kernel/pm_qos_params.c	/^int pm_qos_requirement(int pm_qos_class)$/;"	f
pm_qos_update_requirement	kernel/pm_qos_params.c	/^EXPORT_SYMBOL_GPL(pm_qos_update_requirement);$/;"	v
pm_qos_update_requirement	kernel/pm_qos_params.c	/^int pm_qos_update_requirement(int pm_qos_class, char *name, s32 new_value)$/;"	f
pmd_clear_bad	mm/memory.c	/^void pmd_clear_bad(pmd_t *pmd)$/;"	f
pn	kernel/cpuset.c	/^	int pn;$/;"	m	struct:cpuset	file:
pointer	mm/kmemleak.c	/^	unsigned long pointer;$/;"	m	struct:kmemleak_object	file:
poison	mm/slub.c	/^SLAB_ATTR(poison);$/;"	v
poison_highpage	mm/debug-pagealloc.c	/^static void poison_highpage(struct page *page)$/;"	f	file:
poison_obj	mm/slab.c	/^static void poison_obj(struct kmem_cache *cachep, void *addr, unsigned char val)$/;"	f	file:
poison_page	mm/debug-pagealloc.c	/^static void poison_page(struct page *page)$/;"	f	file:
poison_pages	mm/debug-pagealloc.c	/^static void poison_pages(struct page *page, int n)$/;"	f	file:
poison_show	mm/slub.c	/^static ssize_t poison_show(struct kmem_cache *s, char *buf)$/;"	f	file:
poison_store	mm/slub.c	/^static ssize_t poison_store(struct kmem_cache *s,$/;"	f	file:
policy_cache	mm/mempolicy.c	/^static struct kmem_cache *policy_cache;$/;"	v	typeref:struct:kmem_cache	file:
policy_nodemask	mm/mempolicy.c	/^static nodemask_t *policy_nodemask(gfp_t gfp, struct mempolicy *policy)$/;"	f	file:
policy_types	mm/mempolicy.c	/^static const char * const policy_types[] =$/;"	v	file:
policy_vma	mm/mempolicy.c	/^static int policy_vma(struct vm_area_struct *vma, struct mempolicy *new)$/;"	f	file:
policy_zone	mm/mempolicy.c	/^enum zone_type policy_zone = 0;$/;"	v	typeref:enum:zone_type
policy_zonelist	mm/mempolicy.c	/^static struct zonelist *policy_zonelist(gfp_t gfp, struct mempolicy *policy)$/;"	f	file:
poll_freewait	fs/select.c	/^EXPORT_SYMBOL(poll_freewait);$/;"	v
poll_freewait	fs/select.c	/^void poll_freewait(struct poll_wqueues *pwq)$/;"	f
poll_get_entry	fs/select.c	/^static struct poll_table_entry *poll_get_entry(struct poll_wqueues *p)$/;"	f	file:
poll_initwait	fs/select.c	/^EXPORT_SYMBOL(poll_initwait);$/;"	v
poll_initwait	fs/select.c	/^void poll_initwait(struct poll_wqueues *pwq)$/;"	f
poll_list	fs/select.c	/^struct poll_list {$/;"	s	file:
poll_readywalk_ncalls	fs/eventpoll.c	/^static struct nested_calls poll_readywalk_ncalls;$/;"	v	typeref:struct:nested_calls	file:
poll_safewake_ncalls	fs/eventpoll.c	/^static struct nested_calls poll_safewake_ncalls;$/;"	v	typeref:struct:nested_calls	file:
poll_schedule_timeout	fs/select.c	/^EXPORT_SYMBOL(poll_schedule_timeout);$/;"	v
poll_schedule_timeout	fs/select.c	/^int poll_schedule_timeout(struct poll_wqueues *pwq, int state,$/;"	f
poll_select_copy_remaining	fs/compat.c	/^static int poll_select_copy_remaining(struct timespec *end_time, void __user *p,$/;"	f	file:
poll_select_copy_remaining	fs/select.c	/^static int poll_select_copy_remaining(struct timespec *end_time, void __user *p,$/;"	f	file:
poll_select_set_timeout	fs/select.c	/^int poll_select_set_timeout(struct timespec *to, long sec, long nsec)$/;"	f
poll_table_page	fs/select.c	/^struct poll_table_page {$/;"	s	file:
poll_wait	fs/eventpoll.c	/^	wait_queue_head_t poll_wait;$/;"	m	struct:eventpoll	file:
pollwake	fs/select.c	/^static int pollwake(wait_queue_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
pool_alloc_page	mm/dmapool.c	/^static struct dma_page *pool_alloc_page(struct dma_pool *pool, gfp_t mem_flags)$/;"	f	file:
pool_find_page	mm/dmapool.c	/^static struct dma_page *pool_find_page(struct dma_pool *pool, dma_addr_t dma)$/;"	f	file:
pool_free_page	mm/dmapool.c	/^static void pool_free_page(struct dma_pool *pool, struct dma_page *page)$/;"	f	file:
pool_initialise_page	mm/dmapool.c	/^static void pool_initialise_page(struct dma_pool *pool, struct dma_page *page)$/;"	f	file:
pool_lock	mm/highmem.c	/^static spinlock_t pool_lock;			\/* protects page_address_pool *\/$/;"	v	file:
pools	mm/dmapool.c	/^	struct list_head pools;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::list_head	file:
populate_range	mm/fremap.c	/^static int populate_range(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
populated	mm/percpu.c	/^	unsigned long		populated[];	\/* populated bitmap *\/$/;"	m	struct:pcpu_chunk	file:
port	fs/compat_ioctl.c	/^        compat_uint_t   port;$/;"	m	struct:serial_struct32	file:
port_high	fs/compat_ioctl.c	/^        unsigned int    port_high;$/;"	m	struct:serial_struct32	file:
pos	kernel/kallsyms.c	/^	loff_t pos;$/;"	m	struct:kallsym_iter	file:
pos_from_hilo	fs/read_write.c	/^static inline loff_t pos_from_hilo(unsigned long high, unsigned long low)$/;"	f	file:
posix_acl_alloc	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_alloc);$/;"	v
posix_acl_alloc	fs/posix_acl.c	/^posix_acl_alloc(int count, gfp_t flags)$/;"	f
posix_acl_chmod_masq	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_chmod_masq);$/;"	v
posix_acl_chmod_masq	fs/posix_acl.c	/^posix_acl_chmod_masq(struct posix_acl *acl, mode_t mode)$/;"	f
posix_acl_clone	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_clone);$/;"	v
posix_acl_clone	fs/posix_acl.c	/^posix_acl_clone(const struct posix_acl *acl, gfp_t flags)$/;"	f
posix_acl_create_masq	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_create_masq);$/;"	v
posix_acl_create_masq	fs/posix_acl.c	/^posix_acl_create_masq(struct posix_acl *acl, mode_t *mode_p)$/;"	f
posix_acl_equiv_mode	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_equiv_mode);$/;"	v
posix_acl_equiv_mode	fs/posix_acl.c	/^posix_acl_equiv_mode(const struct posix_acl *acl, mode_t *mode_p)$/;"	f
posix_acl_from_mode	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_from_mode);$/;"	v
posix_acl_from_mode	fs/posix_acl.c	/^posix_acl_from_mode(mode_t mode, gfp_t flags)$/;"	f
posix_acl_from_xattr	fs/xattr_acl.c	/^EXPORT_SYMBOL (posix_acl_from_xattr);$/;"	v
posix_acl_from_xattr	fs/xattr_acl.c	/^posix_acl_from_xattr(const void *value, size_t size)$/;"	f
posix_acl_permission	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_permission);$/;"	v
posix_acl_permission	fs/posix_acl.c	/^posix_acl_permission(struct inode *inode, const struct posix_acl *acl, int want)$/;"	f
posix_acl_to_xattr	fs/xattr_acl.c	/^EXPORT_SYMBOL (posix_acl_to_xattr);$/;"	v
posix_acl_to_xattr	fs/xattr_acl.c	/^posix_acl_to_xattr(const struct posix_acl *acl, void *buffer, size_t size)$/;"	f
posix_acl_valid	fs/posix_acl.c	/^EXPORT_SYMBOL(posix_acl_valid);$/;"	v
posix_acl_valid	fs/posix_acl.c	/^posix_acl_valid(const struct posix_acl *acl)$/;"	f
posix_clocks	kernel/posix-timers.c	/^static struct k_clock posix_clocks[MAX_CLOCKS];$/;"	v	typeref:struct:k_clock	file:
posix_cpu_clock_get	kernel/posix-cpu-timers.c	/^int posix_cpu_clock_get(const clockid_t which_clock, struct timespec *tp)$/;"	f
posix_cpu_clock_getres	kernel/posix-cpu-timers.c	/^int posix_cpu_clock_getres(const clockid_t which_clock, struct timespec *tp)$/;"	f
posix_cpu_clock_set	kernel/posix-cpu-timers.c	/^int posix_cpu_clock_set(const clockid_t which_clock, const struct timespec *tp)$/;"	f
posix_cpu_nsleep	kernel/posix-cpu-timers.c	/^int posix_cpu_nsleep(const clockid_t which_clock, int flags,$/;"	f
posix_cpu_nsleep_restart	kernel/posix-cpu-timers.c	/^long posix_cpu_nsleep_restart(struct restart_block *restart_block)$/;"	f
posix_cpu_timer_create	kernel/posix-cpu-timers.c	/^int posix_cpu_timer_create(struct k_itimer *new_timer)$/;"	f
posix_cpu_timer_del	kernel/posix-cpu-timers.c	/^int posix_cpu_timer_del(struct k_itimer *timer)$/;"	f
posix_cpu_timer_get	kernel/posix-cpu-timers.c	/^void posix_cpu_timer_get(struct k_itimer *timer, struct itimerspec *itp)$/;"	f
posix_cpu_timer_schedule	kernel/posix-cpu-timers.c	/^void posix_cpu_timer_schedule(struct k_itimer *timer)$/;"	f
posix_cpu_timer_set	kernel/posix-cpu-timers.c	/^int posix_cpu_timer_set(struct k_itimer *timer, int flags,$/;"	f
posix_cpu_timers_exit	kernel/posix-cpu-timers.c	/^void posix_cpu_timers_exit(struct task_struct *tsk)$/;"	f
posix_cpu_timers_exit_group	kernel/posix-cpu-timers.c	/^void posix_cpu_timers_exit_group(struct task_struct *tsk)$/;"	f
posix_cpu_timers_init	kernel/fork.c	/^static void posix_cpu_timers_init(struct task_struct *tsk)$/;"	f	file:
posix_cpu_timers_init_group	kernel/fork.c	/^static void posix_cpu_timers_init_group(struct signal_struct *sig)$/;"	f	file:
posix_get_coarse_res	kernel/posix-timers.c	/^int posix_get_coarse_res(const clockid_t which_clock, struct timespec *tp)$/;"	f
posix_get_monotonic_coarse	kernel/posix-timers.c	/^static int posix_get_monotonic_coarse(clockid_t which_clock,$/;"	f	file:
posix_get_monotonic_raw	kernel/posix-timers.c	/^static int posix_get_monotonic_raw(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_get_realtime_coarse	kernel/posix-timers.c	/^static int posix_get_realtime_coarse(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_ktime_get_ts	kernel/posix-timers.c	/^static int posix_ktime_get_ts(clockid_t which_clock, struct timespec *tp)$/;"	f	file:
posix_lock_file	fs/locks.c	/^EXPORT_SYMBOL(posix_lock_file);$/;"	v
posix_lock_file	fs/locks.c	/^int posix_lock_file(struct file *filp, struct file_lock *fl,$/;"	f
posix_lock_file_wait	fs/locks.c	/^EXPORT_SYMBOL(posix_lock_file_wait);$/;"	v
posix_lock_file_wait	fs/locks.c	/^int posix_lock_file_wait(struct file *filp, struct file_lock *fl)$/;"	f
posix_lock_to_flock	fs/locks.c	/^static int posix_lock_to_flock(struct flock *flock, struct file_lock *fl)$/;"	f	file:
posix_lock_to_flock64	fs/locks.c	/^static void posix_lock_to_flock64(struct flock64 *flock, struct file_lock *fl)$/;"	f	file:
posix_locks_conflict	fs/locks.c	/^static int posix_locks_conflict(struct file_lock *caller_fl, struct file_lock *sys_fl)$/;"	f	file:
posix_locks_deadlock	fs/locks.c	/^static int posix_locks_deadlock(struct file_lock *caller_fl,$/;"	f	file:
posix_same_owner	fs/locks.c	/^static int posix_same_owner(struct file_lock *fl1, struct file_lock *fl2)$/;"	f	file:
posix_test_lock	fs/locks.c	/^EXPORT_SYMBOL(posix_test_lock);$/;"	v
posix_test_lock	fs/locks.c	/^posix_test_lock(struct file *filp, struct file_lock *fl)$/;"	f
posix_timer_event	kernel/posix-timers.c	/^EXPORT_SYMBOL_GPL(posix_timer_event);$/;"	v
posix_timer_event	kernel/posix-timers.c	/^int posix_timer_event(struct k_itimer *timr, int si_private)$/;"	f
posix_timer_fn	kernel/posix-timers.c	/^static enum hrtimer_restart posix_timer_fn(struct hrtimer *timer)$/;"	f	file:
posix_timers_cache	kernel/posix-timers.c	/^static struct kmem_cache *posix_timers_cache;$/;"	v	typeref:struct:kmem_cache	file:
posix_timers_id	kernel/posix-timers.c	/^static struct idr posix_timers_id;$/;"	v	typeref:struct:idr	file:
posix_unblock_lock	fs/locks.c	/^EXPORT_SYMBOL(posix_unblock_lock);$/;"	v
posix_unblock_lock	fs/locks.c	/^posix_unblock_lock(struct file *filp, struct file_lock *waiter)$/;"	f
post_schedule	kernel/sched.c	/^	int post_schedule;$/;"	m	struct:rq	file:
post_schedule	kernel/sched.c	/^static inline void post_schedule(struct rq *rq)$/;"	f	file:
post_schedule_rt	kernel/sched_rt.c	/^static void post_schedule_rt(struct rq *rq)$/;"	f	file:
posth_val	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
power_of	kernel/sched.c	/^static unsigned long power_of(int cpu)$/;"	f	file:
power_savings_balance	kernel/sched.c	/^	int power_savings_balance; \/* Is powersave balance needed for this sd *\/$/;"	m	struct:sd_lb_stats	file:
poweroff_cmd	kernel/sys.c	/^char poweroff_cmd[POWEROFF_CMD_PATH_LEN] = "\/sbin\/poweroff";$/;"	v
ppc_rtas	kernel/sys_ni.c	/^cond_syscall(ppc_rtas);$/;"	v
ppid	kernel/auditsc.c	/^	pid_t		    pid, ppid;$/;"	m	struct:audit_context	file:
ppid	kernel/perf_event.c	/^		u32				ppid;$/;"	m	struct:perf_task_event::__anon37	file:
ppp_gidle	fs/compat_ioctl.c	/^static int ppp_gidle(unsigned int fd, unsigned int cmd,$/;"	f	file:
ppp_idle32	fs/compat_ioctl.c	/^struct ppp_idle32 {$/;"	s	file:
ppp_option_data32	fs/compat_ioctl.c	/^struct ppp_option_data32 {$/;"	s	file:
ppp_scompress	fs/compat_ioctl.c	/^static int ppp_scompress(unsigned int fd, unsigned int cmd,$/;"	f	file:
ppp_sock_fprog_ioctl_trans	fs/compat_ioctl.c	/^static int ppp_sock_fprog_ioctl_trans(unsigned int fd, unsigned int cmd,$/;"	f	file:
pprev	include/linux/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
pr_fmt	mm/kmemleak.c	64;"	d	file:
prctl_get_seccomp	kernel/seccomp.c	/^long prctl_get_seccomp(void)$/;"	f
prctl_set_seccomp	kernel/seccomp.c	/^long prctl_set_seccomp(unsigned long seccomp_mode)$/;"	f
pre_handler_kretprobe	kernel/kprobes.c	/^static int __kprobes pre_handler_kretprobe(struct kprobe *p,$/;"	f	file:
pre_schedule	kernel/sched.c	/^static inline void pre_schedule(struct rq *rq, struct task_struct *p)$/;"	f	file:
pre_schedule	kernel/sched.c	/^static inline void pre_schedule(struct rq *rq, struct task_struct *prev)$/;"	f	file:
pre_schedule_rt	kernel/sched_rt.c	/^static void pre_schedule_rt(struct rq *rq, struct task_struct *prev)$/;"	f	file:
pread64	fs/read_write.c	/^SYSCALL_DEFINE(pread64)(unsigned int fd, char __user *buf,$/;"	f
preempt_count_equals	kernel/sched.c	/^static inline int preempt_count_equals(int preempt_offset)$/;"	f	file:
preempt_notifier_register	kernel/sched.c	/^EXPORT_SYMBOL_GPL(preempt_notifier_register);$/;"	v
preempt_notifier_register	kernel/sched.c	/^void preempt_notifier_register(struct preempt_notifier *notifier)$/;"	f
preempt_notifier_unregister	kernel/sched.c	/^EXPORT_SYMBOL_GPL(preempt_notifier_unregister);$/;"	v
preempt_notifier_unregister	kernel/sched.c	/^void preempt_notifier_unregister(struct preempt_notifier *notifier)$/;"	f
preempt_schedule	kernel/sched.c	/^EXPORT_SYMBOL(preempt_schedule);$/;"	v
preempt_schedule	kernel/sched.c	/^asmlinkage void __sched preempt_schedule(void)$/;"	f
preempt_schedule_irq	kernel/sched.c	/^asmlinkage void __sched preempt_schedule_irq(void)$/;"	f
preemptable	kernel/rcutree.h	/^	bool		preemptable;	\/* Preemptable RCU? *\/$/;"	m	struct:rcu_data
preferred_console	kernel/printk.c	/^static int preferred_console = -1;$/;"	v	file:
prefetch_prev_lru_page	mm/vmscan.c	109;"	d	file:
prefetch_prev_lru_page	mm/vmscan.c	99;"	d	file:
prefetchw_prev_lru_page	mm/vmscan.c	113;"	d	file:
prefetchw_prev_lru_page	mm/vmscan.c	123;"	d	file:
preh_val	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
prep_compound_gigantic_page	mm/hugetlb.c	/^static void prep_compound_gigantic_page(struct page *page, unsigned long order)$/;"	f	file:
prep_compound_huge_page	mm/hugetlb.c	/^static void prep_compound_huge_page(struct page *page, int order)$/;"	f	file:
prep_compound_page	mm/page_alloc.c	/^void prep_compound_page(struct page *page, unsigned long order)$/;"	f
prep_new_huge_page	mm/hugetlb.c	/^static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)$/;"	f	file:
prep_new_page	mm/page_alloc.c	/^static int prep_new_page(struct page *page, int order, gfp_t gfp_flags)$/;"	f	file:
prep_zero_page	mm/page_alloc.c	/^static inline void prep_zero_page(struct page *page, int order, gfp_t gfp_flags)$/;"	f	file:
prepare_arch_switch	kernel/sched.c	862;"	d	file:
prepare_binprm	fs/exec.c	/^EXPORT_SYMBOL(prepare_binprm);$/;"	v
prepare_binprm	fs/exec.c	/^int prepare_binprm(struct linux_binprm *bprm)$/;"	f
prepare_bprm_creds	fs/exec.c	/^int prepare_bprm_creds(struct linux_binprm *bprm)$/;"	f
prepare_creds	kernel/cred.c	/^EXPORT_SYMBOL(prepare_creds);$/;"	v
prepare_creds	kernel/cred.c	/^struct cred *prepare_creds(void)$/;"	f
prepare_exec_creds	kernel/cred.c	/^struct cred *prepare_exec_creds(void)$/;"	f
prepare_kernel_cred	kernel/cred.c	/^EXPORT_SYMBOL(prepare_kernel_cred);$/;"	v
prepare_kernel_cred	kernel/cred.c	/^struct cred *prepare_kernel_cred(struct task_struct *daemon)$/;"	f
prepare_lock_switch	kernel/sched.c	/^static inline void prepare_lock_switch(struct rq *rq, struct task_struct *next)$/;"	f	file:
prepare_reply	kernel/taskstats.c	/^static int prepare_reply(struct genl_info *info, u8 cmd, struct sk_buff **skbp,$/;"	f	file:
prepare_signal	kernel/signal.c	/^static int prepare_signal(int sig, struct task_struct *p, int from_ancestor_ns)$/;"	f	file:
prepare_task_switch	kernel/sched.c	/^prepare_task_switch(struct rq *rq, struct task_struct *prev,$/;"	f	file:
prepare_to_wait	kernel/wait.c	/^EXPORT_SYMBOL(prepare_to_wait);$/;"	v
prepare_to_wait	kernel/wait.c	/^prepare_to_wait(wait_queue_head_t *q, wait_queue_t *wait, int state)$/;"	f
prepare_to_wait_exclusive	kernel/wait.c	/^EXPORT_SYMBOL(prepare_to_wait_exclusive);$/;"	v
prepare_to_wait_exclusive	kernel/wait.c	/^prepare_to_wait_exclusive(wait_queue_head_t *q, wait_queue_t *wait, int state)$/;"	f
prepare_usermodehelper_creds	kernel/cred.c	/^struct cred *prepare_usermodehelper_creds(void)$/;"	f
prepend	fs/dcache.c	/^static int prepend(char **buffer, int *buflen, const char *str, int namelen)$/;"	f	file:
prepend_name	fs/dcache.c	/^static int prepend_name(char **buffer, int *buflen, struct qstr *name)$/;"	f	file:
prev	include/linux/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev_mm	kernel/sched.c	/^	struct mm_struct *prev_mm;$/;"	m	struct:rq	typeref:struct:rq::mm_struct	file:
prev_priority	mm/memcontrol.c	/^	int	prev_priority;	\/* for recording reclaim priority *\/$/;"	m	struct:mem_cgroup	file:
previous	fs/compat.c	/^	struct compat_linux_dirent __user *previous;$/;"	m	struct:compat_getdents_callback	typeref:struct:compat_getdents_callback::__user	file:
previous	fs/compat.c	/^	struct linux_dirent64 __user *previous;$/;"	m	struct:compat_getdents_callback64	typeref:struct:compat_getdents_callback64::__user	file:
previous	fs/readdir.c	/^	struct linux_dirent __user * previous;$/;"	m	struct:getdents_callback	typeref:struct:getdents_callback::__user	file:
previous	fs/readdir.c	/^	struct linux_dirent64 __user * previous;$/;"	m	struct:getdents_callback64	typeref:struct:getdents_callback64::__user	file:
previous	kernel/auditsc.c	/^	struct audit_context *previous; \/* For nested syscalls *\/$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_context	file:
pri_active	kernel/sched_cpupri.h	/^	long              pri_active[CPUPRI_NR_PRI_WORDS];$/;"	m	struct:cpupri
pri_to_cpu	kernel/sched_cpupri.h	/^	struct cpupri_vec pri_to_cpu[CPUPRI_NR_PRIORITIES];$/;"	m	struct:cpupri	typeref:struct:cpupri::cpupri_vec
primary_event_id	kernel/perf_event.c	/^static u64 primary_event_id(struct perf_event *event)$/;"	f	file:
print_bad_irq_dependency	kernel/lockdep.c	/^print_bad_irq_dependency(struct task_struct *curr,$/;"	f	file:
print_bad_pte	mm/memory.c	/^static void print_bad_pte(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
print_bfs_bug	kernel/lockdep.c	/^static noinline int print_bfs_bug(int ret)$/;"	f	file:
print_cfs_group_stats	kernel/sched_debug.c	/^static void print_cfs_group_stats(struct seq_file *m, int cpu,$/;"	f	file:
print_cfs_rq	kernel/sched_debug.c	/^void print_cfs_rq(struct seq_file *m, int cpu, struct cfs_rq *cfs_rq)$/;"	f
print_cfs_stats	kernel/sched_fair.c	/^static void print_cfs_stats(struct seq_file *m, int cpu)$/;"	f	file:
print_circular_bug	kernel/lockdep.c	/^static noinline int print_circular_bug(struct lock_list *this,$/;"	f	file:
print_circular_bug_entry	kernel/lockdep.c	/^print_circular_bug_entry(struct lock_list *target, int depth)$/;"	f	file:
print_circular_bug_header	kernel/lockdep.c	/^print_circular_bug_header(struct lock_list *entry, unsigned int depth,$/;"	f	file:
print_cpu	kernel/sched_debug.c	/^static void print_cpu(struct seq_file *m, int cpu)$/;"	f	file:
print_cpu_stall	kernel/rcutree.c	/^static void print_cpu_stall(struct rcu_state *rsp)$/;"	f	file:
print_deadlock_bug	kernel/lockdep.c	/^print_deadlock_bug(struct task_struct *curr, struct held_lock *prev,$/;"	f	file:
print_dropped_signal	kernel/signal.c	/^static inline void print_dropped_signal(int sig)$/;"	f	file:
print_fatal_signal	kernel/signal.c	/^static void print_fatal_signal(struct pt_regs *regs, int signr)$/;"	f	file:
print_freed_lock_bug	kernel/lockdep.c	/^print_freed_lock_bug(struct task_struct *curr, const void *mem_from,$/;"	f	file:
print_held_locks_bug	kernel/lockdep.c	/^static void print_held_locks_bug(struct task_struct *curr)$/;"	f	file:
print_irq_inversion_bug	kernel/lockdep.c	/^print_irq_inversion_bug(struct task_struct *curr,$/;"	f	file:
print_irqtrace_events	kernel/lockdep.c	/^void print_irqtrace_events(struct task_struct *curr)$/;"	f
print_kernel_version	kernel/lockdep.c	/^static void print_kernel_version(void)$/;"	f	file:
print_lock	kernel/lockdep.c	/^static void print_lock(struct held_lock *hlock)$/;"	f	file:
print_lock_class_header	kernel/lockdep.c	/^static void print_lock_class_header(struct lock_class *class, int depth)$/;"	f	file:
print_lock_contention_bug	kernel/lockdep.c	/^print_lock_contention_bug(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
print_lock_name	kernel/lockdep.c	/^static void print_lock_name(struct lock_class *class)$/;"	f	file:
print_lockdep_cache	kernel/lockdep.c	/^static void print_lockdep_cache(struct lockdep_map *lock)$/;"	f	file:
print_modules	kernel/module.c	/^void print_modules(void)$/;"	f
print_name	kernel/lockdep_proc.c	/^static void print_name(struct seq_file *m, struct lock_class *class)$/;"	f	file:
print_objinfo	mm/slab.c	/^static void print_objinfo(struct kmem_cache *cachep, void *objp, int lines)$/;"	f	file:
print_one_rcu_data	kernel/rcutree_trace.c	/^static void print_one_rcu_data(struct seq_file *m, struct rcu_data *rdp)$/;"	f	file:
print_one_rcu_data_csv	kernel/rcutree_trace.c	/^static void print_one_rcu_data_csv(struct seq_file *m, struct rcu_data *rdp)$/;"	f	file:
print_one_rcu_pending	kernel/rcutree_trace.c	/^static void print_one_rcu_pending(struct seq_file *m, struct rcu_data *rdp)$/;"	f	file:
print_one_rcu_state	kernel/rcutree_trace.c	/^static void print_one_rcu_state(struct seq_file *m, struct rcu_state *rsp)$/;"	f	file:
print_oops_end_marker	kernel/panic.c	/^static void print_oops_end_marker(void)$/;"	f	file:
print_other_cpu_stall	kernel/rcutree.c	/^static void print_other_cpu_stall(struct rcu_state *rsp)$/;"	f	file:
print_page_info	mm/slub.c	/^static void print_page_info(struct page *page)$/;"	f	file:
print_rcu_pendings	kernel/rcutree_trace.c	/^static void print_rcu_pendings(struct seq_file *m, struct rcu_state *rsp)$/;"	f	file:
print_rq	kernel/sched_debug.c	/^static void print_rq(struct seq_file *m, struct rq *rq, int rq_cpu)$/;"	f	file:
print_rt_rq	kernel/sched_debug.c	/^void print_rt_rq(struct seq_file *m, int cpu, struct rt_rq *rt_rq)$/;"	f
print_rt_stats	kernel/sched_rt.c	/^static void print_rt_stats(struct seq_file *m, int cpu)$/;"	f	file:
print_section	mm/slub.c	/^static void print_section(char *text, u8 *addr, unsigned int length)$/;"	f	file:
print_shortest_lock_dependencies	kernel/lockdep.c	/^print_shortest_lock_dependencies(struct lock_list *leaf,$/;"	f	file:
print_slabinfo_header	mm/slab.c	/^static void print_slabinfo_header(struct seq_file *m)$/;"	f	file:
print_slabinfo_header	mm/slub.c	/^static void print_slabinfo_header(struct seq_file *m)$/;"	f	file:
print_stack_trace	kernel/stacktrace.c	/^EXPORT_SYMBOL_GPL(print_stack_trace);$/;"	v
print_stack_trace	kernel/stacktrace.c	/^void print_stack_trace(struct stack_trace *trace, int spaces)$/;"	f
print_tainted	kernel/panic.c	/^const char *print_tainted(void)$/;"	f
print_task	kernel/sched_debug.c	/^print_task(struct seq_file *m, struct rq *rq, struct task_struct *p)$/;"	f	file:
print_track	mm/slub.c	/^static void print_track(const char *s, struct track *t)$/;"	f	file:
print_tracking	mm/slub.c	/^static void print_tracking(struct kmem_cache *s, void *object)$/;"	f	file:
print_trailer	mm/slub.c	/^static void print_trailer(struct kmem_cache *s, struct page *page, u8 *p)$/;"	f	file:
print_unload_info	kernel/module.c	/^static inline void print_unload_info(struct seq_file *m, struct module *mod)$/;"	f	file:
print_unlock_inbalance_bug	kernel/lockdep.c	/^print_unlock_inbalance_bug(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
print_unreferenced	mm/kmemleak.c	/^static void print_unreferenced(struct seq_file *seq,$/;"	f	file:
print_usage_bug	kernel/lockdep.c	/^print_usage_bug(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
print_vma_addr	mm/memory.c	/^void print_vma_addr(char *prefix, unsigned long ip)$/;"	f
printable	fs/exec.c	1296;"	d	file:
printk	kernel/printk.c	/^EXPORT_SYMBOL(printk);$/;"	v
printk	kernel/printk.c	/^asmlinkage int printk(const char *fmt, ...)$/;"	f
printk_buf	kernel/printk.c	/^static char printk_buf[1024];$/;"	v	file:
printk_buf	kernel/rcutorture.c	/^static char printk_buf[4096];$/;"	v	file:
printk_cpu	kernel/printk.c	/^static volatile unsigned int printk_cpu = UINT_MAX;$/;"	v	file:
printk_delay	kernel/printk.c	/^static inline void printk_delay(void)$/;"	f	file:
printk_lock	kernel/rtmutex-debug.c	/^static void printk_lock(struct rt_mutex *lock, int print_owner)$/;"	f	file:
printk_needs_cpu	kernel/printk.c	/^int printk_needs_cpu(int cpu)$/;"	f
printk_task	kernel/rtmutex-debug.c	/^static void printk_task(struct task_struct *p)$/;"	f	file:
printk_tick	kernel/printk.c	/^void printk_tick(void)$/;"	f
printk_time	kernel/printk.c	/^static int printk_time = 0;$/;"	v	file:
printk_time	kernel/printk.c	/^static int printk_time = 1;$/;"	v	file:
printk_timed_ratelimit	kernel/printk.c	/^EXPORT_SYMBOL(printk_timed_ratelimit);$/;"	v
printk_timed_ratelimit	kernel/printk.c	/^bool printk_timed_ratelimit(unsigned long *caller_jiffies,$/;"	f
prio	kernel/auditsc.c	/^	u64		    prio;$/;"	m	struct:audit_context	file:
prio_changed_fair	kernel/sched_fair.c	/^static void prio_changed_fair(struct rq *rq, struct task_struct *p,$/;"	f	file:
prio_changed_idle	kernel/sched_idletask.c	/^static void prio_changed_idle(struct rq *rq, struct task_struct *p,$/;"	f	file:
prio_changed_rt	kernel/sched_rt.c	/^static void prio_changed_rt(struct rq *rq, struct task_struct *p,$/;"	f	file:
prio_high	kernel/auditfilter.c	/^static u64 prio_high = ~0ULL\/2 - 1;$/;"	v	file:
prio_low	kernel/auditfilter.c	/^static u64 prio_low = ~0ULL\/2;$/;"	v	file:
prio_to_weight	kernel/sched.c	/^static const int prio_to_weight[40] = {$/;"	v	file:
prio_to_wmult	kernel/sched.c	/^static const u32 prio_to_wmult[40] = {$/;"	v	file:
private	mm/vmalloc.c	/^	void *private;$/;"	m	struct:vmap_area	file:
probe_kernel_read	mm/maccess.c	/^EXPORT_SYMBOL_GPL(probe_kernel_read);$/;"	v
probe_kernel_write	mm/maccess.c	/^EXPORT_SYMBOL_GPL(probe_kernel_write);$/;"	v
probes	kernel/tracepoint.c	/^	void *probes[0];$/;"	m	struct:tp_probes	file:
problem	fs/compat_ioctl.c	/^	char problem;$/;"	m	struct:compat_sg_req_info	file:
proc_caches_init	kernel/fork.c	/^void __init proc_caches_init(void)$/;"	f
proc_cgroup_operations	kernel/cgroup.c	/^const struct file_operations proc_cgroup_operations = {$/;"	v	typeref:struct:file_operations
proc_cgroup_show	kernel/cgroup.c	/^static int proc_cgroup_show(struct seq_file *m, void *v)$/;"	f	file:
proc_cgroupstats_operations	kernel/cgroup.c	/^static const struct file_operations proc_cgroupstats_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_cgroupstats_operations	kernel/cgroup.c	/^static const struct file_operations proc_cgroupstats_operations;$/;"	v	typeref:struct:file_operations	file:
proc_cgroupstats_show	kernel/cgroup.c	/^static int proc_cgroupstats_show(struct seq_file *m, void *v)$/;"	f	file:
proc_cpuset_operations	kernel/cpuset.c	/^const struct file_operations proc_cpuset_operations = {$/;"	v	typeref:struct:file_operations
proc_cpuset_show	kernel/cpuset.c	/^static int proc_cpuset_show(struct seq_file *m, void *unused_v)$/;"	f	file:
proc_dma_init	kernel/dma.c	/^__initcall(proc_dma_init);$/;"	v
proc_dma_init	kernel/dma.c	/^static int __init proc_dma_init(void)$/;"	f	file:
proc_dma_open	kernel/dma.c	/^static int proc_dma_open(struct inode *inode, struct file *file)$/;"	f	file:
proc_dma_operations	kernel/dma.c	/^static const struct file_operations proc_dma_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_dma_show	kernel/dma.c	/^static int proc_dma_show(struct seq_file *m, void *v)$/;"	f	file:
proc_do_cad_pid	kernel/sysctl.c	/^static int proc_do_cad_pid(struct ctl_table *table, int write,$/;"	f	file:
proc_do_uts_string	kernel/utsname_sysctl.c	/^static int proc_do_uts_string(ctl_table *table, int write,$/;"	f	file:
proc_do_uts_string	kernel/utsname_sysctl.c	57;"	d	file:
proc_dohung_task_timeout_secs	kernel/hung_task.c	/^int proc_dohung_task_timeout_secs(struct ctl_table *table, int write,$/;"	f
proc_dointvec	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec);$/;"	v
proc_dointvec	kernel/sysctl.c	/^int proc_dointvec(struct ctl_table *table, int write,$/;"	f
proc_dointvec_jiffies	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_jiffies);$/;"	v
proc_dointvec_jiffies	kernel/sysctl.c	/^int proc_dointvec_jiffies(struct ctl_table *table, int write,$/;"	f
proc_dointvec_minmax	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_minmax);$/;"	v
proc_dointvec_minmax	kernel/sysctl.c	/^int proc_dointvec_minmax(struct ctl_table *table, int write,$/;"	f
proc_dointvec_ms_jiffies	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_ms_jiffies);$/;"	v
proc_dointvec_ms_jiffies	kernel/sysctl.c	/^int proc_dointvec_ms_jiffies(struct ctl_table *table, int write,$/;"	f
proc_dointvec_userhz_jiffies	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dointvec_userhz_jiffies);$/;"	v
proc_dointvec_userhz_jiffies	kernel/sysctl.c	/^int proc_dointvec_userhz_jiffies(struct ctl_table *table, int write,$/;"	f
proc_dosoftlockup_thresh	kernel/softlockup.c	/^int proc_dosoftlockup_thresh(struct ctl_table *table, int write,$/;"	f
proc_dostring	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_dostring);$/;"	v
proc_dostring	kernel/sysctl.c	/^int proc_dostring(struct ctl_table *table, int write,$/;"	f
proc_doulongvec_minmax	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_doulongvec_minmax);$/;"	v
proc_doulongvec_minmax	kernel/sysctl.c	/^int proc_doulongvec_minmax(struct ctl_table *table, int write,$/;"	f
proc_doulongvec_ms_jiffies_minmax	kernel/sysctl.c	/^EXPORT_SYMBOL(proc_doulongvec_ms_jiffies_minmax);$/;"	v
proc_doulongvec_ms_jiffies_minmax	kernel/sysctl.c	/^int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int write,$/;"	f
proc_execdomains_init	kernel/exec_domain.c	/^module_init(proc_execdomains_init);$/;"	v
proc_execdomains_init	kernel/exec_domain.c	/^static int __init proc_execdomains_init(void)$/;"	f	file:
proc_filesystems_init	fs/filesystems.c	/^module_init(proc_filesystems_init);$/;"	v
proc_filesystems_init	fs/filesystems.c	/^static int __init proc_filesystems_init(void)$/;"	f	file:
proc_fs_info	fs/namespace.c	/^struct proc_fs_info {$/;"	s	file:
proc_iomem_operations	kernel/resource.c	/^static const struct file_operations proc_iomem_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_ioports_operations	kernel/resource.c	/^static const struct file_operations proc_ioports_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lock_stat_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lock_stat_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lockdep_chains_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lockdep_chains_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lockdep_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lockdep_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_lockdep_stats_operations	kernel/lockdep_proc.c	/^static const struct file_operations proc_lockdep_stats_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_locks_init	fs/locks.c	/^module_init(proc_locks_init);$/;"	v
proc_locks_init	fs/locks.c	/^static int __init proc_locks_init(void)$/;"	f	file:
proc_locks_operations	fs/locks.c	/^static const struct file_operations proc_locks_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_modules_init	kernel/module.c	/^module_init(proc_modules_init);$/;"	v
proc_modules_init	kernel/module.c	/^static int __init proc_modules_init(void)$/;"	f	file:
proc_modules_operations	kernel/module.c	/^static const struct file_operations proc_modules_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_nr_files	fs/file_table.c	/^int proc_nr_files(ctl_table *table, int write,$/;"	f
proc_profile_operations	kernel/profile.c	/^static const struct file_operations proc_profile_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_sched_set_task	kernel/sched_debug.c	/^void proc_sched_set_task(struct task_struct *p)$/;"	f
proc_sched_show_task	kernel/sched_debug.c	/^void proc_sched_show_task(struct task_struct *p, struct seq_file *m)$/;"	f
proc_schedstat_init	kernel/sched_stats.h	/^module_init(proc_schedstat_init);$/;"	v
proc_schedstat_init	kernel/sched_stats.h	/^static int __init proc_schedstat_init(void)$/;"	f
proc_schedstat_operations	kernel/sched_stats.h	/^static const struct file_operations proc_schedstat_operations = {$/;"	v	typeref:struct:file_operations
proc_slabinfo_operations	mm/slab.c	/^static const struct file_operations proc_slabinfo_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_slabinfo_operations	mm/slub.c	/^static const struct file_operations proc_slabinfo_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_slabstats_operations	mm/slab.c	/^static const struct file_operations proc_slabstats_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_swaps_operations	mm/swapfile.c	/^static const struct file_operations proc_swaps_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_taint	kernel/sysctl.c	/^static int proc_taint(struct ctl_table *table, int write,$/;"	f	file:
proc_vmalloc_init	mm/vmalloc.c	/^module_init(proc_vmalloc_init);$/;"	v
proc_vmalloc_init	mm/vmalloc.c	/^static int __init proc_vmalloc_init(void)$/;"	f	file:
proc_vmalloc_operations	mm/vmalloc.c	/^static const struct file_operations proc_vmalloc_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_vmstat_file_operations	mm/vmstat.c	/^static const struct file_operations proc_vmstat_file_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_zoneinfo_file_operations	mm/vmstat.c	/^static const struct file_operations proc_zoneinfo_file_operations = {$/;"	v	typeref:struct:file_operations	file:
process_cpu_clock_get	kernel/posix-cpu-timers.c	/^static int process_cpu_clock_get(const clockid_t which_clock,$/;"	f	file:
process_cpu_clock_getres	kernel/posix-cpu-timers.c	/^static int process_cpu_clock_getres(const clockid_t which_clock,$/;"	f	file:
process_cpu_nsleep	kernel/posix-cpu-timers.c	/^static int process_cpu_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
process_cpu_nsleep_restart	kernel/posix-cpu-timers.c	/^static long process_cpu_nsleep_restart(struct restart_block *restart_block)$/;"	f	file:
process_cpu_timer_create	kernel/posix-cpu-timers.c	/^static int process_cpu_timer_create(struct k_itimer *timer)$/;"	f	file:
process_slab	mm/slub.c	/^static void process_slab(struct loc_track *t, struct kmem_cache *s,$/;"	f	file:
process_timeout	kernel/timer.c	/^static void process_timeout(unsigned long __data)$/;"	f	file:
process_zones	mm/page_alloc.c	/^static int __cpuinit process_zones(int cpu)$/;"	f	file:
procname	kernel/sysctl_binary.c	/^	const char		*procname;$/;"	m	struct:bin_table	file:
procs	kernel/compat.c	/^	u16 procs;$/;"	m	struct:compat_sysinfo	file:
procswaps_init	mm/swapfile.c	/^__initcall(procswaps_init);$/;"	v
procswaps_init	mm/swapfile.c	/^static int __init procswaps_init(void)$/;"	f	file:
prof_buffer	kernel/profile.c	/^static atomic_t *prof_buffer;$/;"	v	file:
prof_cpu_mask	kernel/profile.c	/^static cpumask_var_t prof_cpu_mask;$/;"	v	file:
prof_cpu_mask_proc_fops	kernel/profile.c	/^static const struct file_operations prof_cpu_mask_proc_fops = {$/;"	v	typeref:struct:file_operations	file:
prof_cpu_mask_proc_open	kernel/profile.c	/^static int prof_cpu_mask_proc_open(struct inode *inode, struct file *file)$/;"	f	file:
prof_cpu_mask_proc_show	kernel/profile.c	/^static int prof_cpu_mask_proc_show(struct seq_file *m, void *v)$/;"	f	file:
prof_cpu_mask_proc_write	kernel/profile.c	/^static ssize_t prof_cpu_mask_proc_write(struct file *file,$/;"	f	file:
prof_len	kernel/profile.c	/^static unsigned long prof_len, prof_shift;$/;"	v	file:
prof_on	kernel/profile.c	/^EXPORT_SYMBOL_GPL(prof_on);$/;"	v
prof_shift	kernel/profile.c	/^static unsigned long prof_len, prof_shift;$/;"	v	file:
prof_ticks	kernel/posix-cpu-timers.c	/^static inline cputime_t prof_ticks(struct task_struct *p)$/;"	f	file:
profile_cpu_callback	kernel/profile.c	/^static int __cpuinit profile_cpu_callback(struct notifier_block *info,$/;"	f	file:
profile_cpu_callback	kernel/profile.c	418;"	d	file:
profile_discard_flip_buffers	kernel/profile.c	/^static void profile_discard_flip_buffers(void)$/;"	f	file:
profile_discard_flip_buffers	kernel/profile.c	417;"	d	file:
profile_event_register	kernel/profile.c	/^EXPORT_SYMBOL_GPL(profile_event_register);$/;"	v
profile_event_register	kernel/profile.c	/^int profile_event_register(enum profile_type type, struct notifier_block *n)$/;"	f
profile_event_unregister	kernel/profile.c	/^EXPORT_SYMBOL_GPL(profile_event_unregister);$/;"	v
profile_event_unregister	kernel/profile.c	/^int profile_event_unregister(enum profile_type type, struct notifier_block *n)$/;"	f
profile_flip_buffers	kernel/profile.c	/^static void profile_flip_buffers(void)$/;"	f	file:
profile_flip_buffers	kernel/profile.c	416;"	d	file:
profile_handoff_task	kernel/profile.c	/^int profile_handoff_task(struct task_struct *task)$/;"	f
profile_hit	kernel/profile.c	/^struct profile_hit {$/;"	s	file:
profile_hits	kernel/profile.c	/^EXPORT_SYMBOL_GPL(profile_hits);$/;"	v
profile_hits	kernel/profile.c	/^void profile_hits(int type, void *__pc, unsigned int nr_hits)$/;"	f
profile_init	kernel/profile.c	/^int __ref profile_init(void)$/;"	f
profile_munmap	kernel/profile.c	/^void profile_munmap(unsigned long addr)$/;"	f
profile_nop	kernel/profile.c	/^static void profile_nop(void *unused)$/;"	f	file:
profile_setup	kernel/profile.c	/^int profile_setup(char *str)$/;"	f
profile_task_exit	kernel/profile.c	/^void profile_task_exit(struct task_struct *task)$/;"	f
profile_tick	kernel/profile.c	/^void profile_tick(int type)$/;"	f
profiling	kernel/ksysfs.c	/^KERNEL_ATTR_RW(profiling);$/;"	v
profiling_show	kernel/ksysfs.c	/^static ssize_t profiling_show(struct kobject *kobj,$/;"	f	file:
profiling_store	kernel/ksysfs.c	/^static ssize_t profiling_store(struct kobject *kobj,$/;"	f	file:
propagate_mnt	fs/pnode.c	/^int propagate_mnt(struct vfsmount *dest_mnt, struct dentry *dest_dentry,$/;"	f
propagate_mount_busy	fs/pnode.c	/^int propagate_mount_busy(struct vfsmount *mnt, int refcnt)$/;"	f
propagate_umount	fs/pnode.c	/^int propagate_umount(struct list_head *list)$/;"	f
propagation_next	fs/pnode.c	/^static struct vfsmount *propagation_next(struct vfsmount *m,$/;"	f	file:
protect_vma	mm/nommu.c	/^static void protect_vma(struct vm_area_struct *vma, unsigned long flags)$/;"	f	file:
protection_map	mm/mmap.c	/^pgprot_t protection_map[16] = {$/;"	v
proto	fs/compat.c	/^	compat_int_t proto;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
prove_locking	kernel/lockdep.c	/^int prove_locking = 1;$/;"	v
prove_locking	kernel/lockdep.c	58;"	d	file:
prstatus	fs/binfmt_elf.c	/^	struct elf_prstatus *prstatus;	\/* NT_PRSTATUS *\/$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::elf_prstatus	file:
prstatus	fs/binfmt_elf.c	/^	struct elf_prstatus prstatus;	\/* NT_PRSTATUS *\/$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::elf_prstatus	file:
prstatus	fs/binfmt_elf.c	/^	struct elf_prstatus prstatus;$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::elf_prstatus	file:
prstatus	fs/binfmt_elf_fdpic.c	/^	struct elf_prstatus prstatus;	\/* NT_PRSTATUS *\/$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::elf_prstatus	file:
prune_dcache	fs/dcache.c	/^static void prune_dcache(int count)$/;"	f	file:
prune_icache	fs/inode.c	/^static void prune_icache(int nr_to_scan)$/;"	f	file:
prune_one	kernel/audit_tree.c	/^static void prune_one(struct audit_tree *victim)$/;"	f	file:
prune_tree_thread	kernel/audit_tree.c	/^static int prune_tree_thread(void *unused)$/;"	f	file:
psinfo	fs/binfmt_elf.c	/^	struct elf_prpsinfo *psinfo;	\/* NT_PRPSINFO *\/$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::elf_prpsinfo	file:
psinfo	fs/binfmt_elf.c	/^	struct memelfnote psinfo;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::memelfnote	file:
pt	fs/eventpoll.c	/^	poll_table pt;$/;"	m	struct:ep_pqueue	file:
pte_unmap_same	mm/memory.c	/^static inline int pte_unmap_same(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
ptid	kernel/perf_event.c	/^		u32				ptid;$/;"	m	struct:perf_task_event::__anon37	file:
ptr	fs/compat_ioctl.c	/^	compat_caddr_t	ptr;$/;"	m	struct:ppp_option_data32	file:
ptr	mm/kmemleak.c	/^	const void *ptr;		\/* allocated\/freed memory block *\/$/;"	m	struct:early_log	file:
ptrace_attach	kernel/ptrace.c	/^int ptrace_attach(struct task_struct *task)$/;"	f
ptrace_check_attach	kernel/ptrace.c	/^int ptrace_check_attach(struct task_struct *child, int kill)$/;"	f
ptrace_detach	kernel/ptrace.c	/^int ptrace_detach(struct task_struct *child, unsigned int data)$/;"	f
ptrace_do_wait	kernel/exit.c	/^static int ptrace_do_wait(struct wait_opts *wo, struct task_struct *tsk)$/;"	f	file:
ptrace_get_task_struct	kernel/ptrace.c	/^static struct task_struct *ptrace_get_task_struct(pid_t pid)$/;"	f	file:
ptrace_getsiginfo	kernel/ptrace.c	/^static int ptrace_getsiginfo(struct task_struct *child, siginfo_t *info)$/;"	f	file:
ptrace_may_access	kernel/ptrace.c	/^bool ptrace_may_access(struct task_struct *task, unsigned int mode)$/;"	f
ptrace_notify	kernel/signal.c	/^void ptrace_notify(int exit_code)$/;"	f
ptrace_readdata	kernel/ptrace.c	/^int ptrace_readdata(struct task_struct *tsk, unsigned long src, char __user *dst, int len)$/;"	f
ptrace_request	kernel/ptrace.c	/^int ptrace_request(struct task_struct *child, long request,$/;"	f
ptrace_resume	kernel/ptrace.c	/^static int ptrace_resume(struct task_struct *child, long request, long data)$/;"	f	file:
ptrace_setoptions	kernel/ptrace.c	/^static int ptrace_setoptions(struct task_struct *child, long data)$/;"	f	file:
ptrace_setsiginfo	kernel/ptrace.c	/^static int ptrace_setsiginfo(struct task_struct *child, const siginfo_t *info)$/;"	f	file:
ptrace_signal	kernel/signal.c	/^static int ptrace_signal(int signr, siginfo_t *info,$/;"	f	file:
ptrace_stop	kernel/signal.c	/^static void ptrace_stop(int exit_code, int clear_code, siginfo_t *info)$/;"	f	file:
ptrace_traceme	kernel/ptrace.c	/^int ptrace_traceme(void)$/;"	f
ptrace_untrace	kernel/ptrace.c	/^static void ptrace_untrace(struct task_struct *child)$/;"	f	file:
ptrace_writedata	kernel/ptrace.c	/^int ptrace_writedata(struct task_struct *tsk, char __user *src, unsigned long dst, int len)$/;"	f
pud_clear_bad	mm/memory.c	/^void pud_clear_bad(pud_t *pud)$/;"	f
pull_rt_task	kernel/sched_rt.c	/^static int pull_rt_task(struct rq *this_rq)$/;"	f	file:
pull_task	kernel/sched.c	/^static void pull_task(struct rq *src_rq, struct task_struct *p,$/;"	f	file:
purge	mm/vmalloc.c	/^	struct list_head purge;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
purge_fragmented_blocks	mm/vmalloc.c	/^static void purge_fragmented_blocks(int cpu)$/;"	f	file:
purge_fragmented_blocks_allcpus	mm/vmalloc.c	/^static void purge_fragmented_blocks_allcpus(void)$/;"	f	file:
purge_fragmented_blocks_thiscpu	mm/vmalloc.c	/^static void purge_fragmented_blocks_thiscpu(void)$/;"	f	file:
purge_list	mm/vmalloc.c	/^	struct list_head purge_list;	\/* "lazy purge" list *\/$/;"	m	struct:vmap_area	typeref:struct:vmap_area::list_head	file:
purge_vmap_area_lazy	mm/vmalloc.c	/^static void purge_vmap_area_lazy(void)$/;"	f	file:
push_cpu	kernel/sched.c	/^	int push_cpu;$/;"	m	struct:rq	file:
push_rt_task	kernel/sched_rt.c	/^static int push_rt_task(struct rq *rq)$/;"	f	file:
push_rt_tasks	kernel/sched_rt.c	/^static void push_rt_tasks(struct rq *rq)$/;"	f	file:
pushable_tasks	kernel/sched.c	/^	struct plist_head pushable_tasks;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::plist_head	file:
put_aio_ring_event	fs/aio.c	203;"	d	file:
put_arg_page	fs/exec.c	/^static void put_arg_page(struct page *page)$/;"	f	file:
put_binfmt	fs/exec.c	/^static inline void put_binfmt(struct linux_binfmt * fmt)$/;"	f	file:
put_compat_flock	fs/compat.c	/^static int put_compat_flock(struct flock *kfl, struct compat_flock __user *ufl)$/;"	f	file:
put_compat_flock64	fs/compat.c	/^static int put_compat_flock64(struct flock *kfl, struct compat_flock64 __user *ufl)$/;"	f	file:
put_compat_itimerspec	kernel/compat.c	/^int put_compat_itimerspec(struct compat_itimerspec __user *dst,$/;"	f
put_compat_itimerval	kernel/compat.c	/^static inline long put_compat_itimerval(struct compat_itimerval __user *o,$/;"	f	file:
put_compat_rusage	kernel/compat.c	/^int put_compat_rusage(const struct rusage *r, struct compat_rusage __user *ru)$/;"	f
put_compat_statfs	fs/compat.c	/^static int put_compat_statfs(struct compat_statfs __user *ubuf, struct kstatfs *kbuf)$/;"	f	file:
put_compat_statfs64	fs/compat.c	/^static int put_compat_statfs64(struct compat_statfs64 __user *ubuf, struct kstatfs *kbuf)$/;"	f	file:
put_compat_timespec	kernel/compat.c	/^int put_compat_timespec(const struct timespec *ts, struct compat_timespec __user *cts)$/;"	f
put_compound_page	mm/swap.c	/^static void put_compound_page(struct page *page)$/;"	f	file:
put_count	kernel/auditsc.c	/^	int		    put_count;$/;"	m	struct:audit_context	file:
put_cred_rcu	kernel/cred.c	/^static void put_cred_rcu(struct rcu_head *rcu)$/;"	f	file:
put_css_set	kernel/cgroup.c	/^static inline void put_css_set(struct css_set *cg)$/;"	f	file:
put_css_set_taskexit	kernel/cgroup.c	/^static inline void put_css_set_taskexit(struct css_set *cg)$/;"	f	file:
put_ctx	kernel/perf_event.c	/^static void put_ctx(struct perf_event_context *ctx)$/;"	f	file:
put_files_struct	kernel/exit.c	/^void put_files_struct(struct files_struct *files)$/;"	f
put_filesystem	fs/filesystems.c	/^void put_filesystem(struct file_system_type *fs)$/;"	f
put_filp	fs/file_table.c	/^void put_filp(struct file *file)$/;"	f
put_futex_key	kernel/futex.c	/^void put_futex_key(int fshared, union futex_key *key)$/;"	f	file:
put_inotify_handle	fs/notify/inotify/inotify.c	/^static inline void put_inotify_handle(struct inotify_handle *ih)$/;"	f	file:
put_inotify_watch	fs/notify/inotify/inotify.c	/^EXPORT_SYMBOL_GPL(put_inotify_watch);$/;"	v
put_inotify_watch	fs/notify/inotify/inotify.c	/^void put_inotify_watch(struct inotify_watch *watch)$/;"	f
put_ioctx	fs/aio.c	245;"	d	file:
put_lock_stats	kernel/lockdep.c	/^static void put_lock_stats(struct lock_class_stats *stats)$/;"	f	file:
put_mnt_ns	fs/namespace.c	/^EXPORT_SYMBOL(put_mnt_ns);$/;"	v
put_mnt_ns	fs/namespace.c	/^void put_mnt_ns(struct mnt_namespace *ns)$/;"	f
put_nommu_region	mm/nommu.c	/^static void put_nommu_region(struct vm_region *region)$/;"	f	file:
put_object	mm/kmemleak.c	/^static void put_object(struct kmemleak_object *object)$/;"	f	file:
put_online_cpus	kernel/cpu.c	/^EXPORT_SYMBOL_GPL(put_online_cpus);$/;"	v
put_online_cpus	kernel/cpu.c	/^void put_online_cpus(void)$/;"	f
put_packet	kernel/kgdb.c	/^static void put_packet(char *buffer)$/;"	f	file:
put_page	mm/swap.c	/^EXPORT_SYMBOL(put_page);$/;"	v
put_page	mm/swap.c	/^void put_page(struct page *page)$/;"	f
put_page_bootmem	mm/memory_hotplug.c	/^void __ref put_page_bootmem(struct page *page)$/;"	f
put_pages_list	mm/swap.c	/^EXPORT_SYMBOL(put_pages_list);$/;"	v
put_pages_list	mm/swap.c	/^void put_pages_list(struct list_head *pages)$/;"	f
put_pid	kernel/pid.c	/^EXPORT_SYMBOL_GPL(put_pid);$/;"	v
put_pid	kernel/pid.c	/^void put_pid(struct pid *pid)$/;"	f
put_prev_entity	kernel/sched_fair.c	/^static void put_prev_entity(struct cfs_rq *cfs_rq, struct sched_entity *prev)$/;"	f	file:
put_prev_task	kernel/sched.c	/^static void put_prev_task(struct rq *rq, struct task_struct *prev)$/;"	f	file:
put_prev_task_fair	kernel/sched_fair.c	/^static void put_prev_task_fair(struct rq *rq, struct task_struct *prev)$/;"	f	file:
put_prev_task_idle	kernel/sched_idletask.c	/^static void put_prev_task_idle(struct rq *rq, struct task_struct *prev)$/;"	f	file:
put_prev_task_rt	kernel/sched_rt.c	/^static void put_prev_task_rt(struct rq *rq, struct task_struct *p)$/;"	f	file:
put_super	fs/super.c	/^void put_super(struct super_block *sb)$/;"	f
put_tree	kernel/audit_tree.c	/^static inline void put_tree(struct audit_tree *tree)$/;"	f	file:
put_tree_ref	kernel/auditsc.c	/^static int put_tree_ref(struct audit_context *ctx, struct audit_chunk *chunk)$/;"	f	file:
put_unused_fd	fs/open.c	/^EXPORT_SYMBOL(put_unused_fd);$/;"	v
put_unused_fd	fs/open.c	/^void put_unused_fd(unsigned int fd)$/;"	f
put_uts	kernel/utsname_sysctl.c	/^static void put_uts(ctl_table *table, int write, void *which)$/;"	f	file:
putback_lru_page	mm/vmscan.c	/^void putback_lru_page(struct page *page)$/;"	f
putback_lru_pages	mm/migrate.c	/^int putback_lru_pages(struct list_head *l)$/;"	f
putname	fs/namei.c	/^EXPORT_SYMBOL(putname);$/;"	v
putname	fs/namei.c	/^void putname(const char *name)$/;"	f
pvm_determine_end	mm/vmalloc.c	/^static unsigned long pvm_determine_end(struct vmap_area **pnext,$/;"	f	file:
pvm_find_next_prev	mm/vmalloc.c	/^static bool pvm_find_next_prev(unsigned long end,$/;"	f	file:
pwd	kernel/auditsc.c	/^	struct path	    pwd;$/;"	m	struct:audit_context	typeref:struct:audit_context::path	file:
pwqlist	fs/eventpoll.c	/^	struct list_head pwqlist;$/;"	m	struct:epitem	typeref:struct:epitem::list_head	file:
pwrite64	fs/read_write.c	/^SYSCALL_DEFINE(pwrite64)(unsigned int fd, const char __user *buf,$/;"	f
q	kernel/audit.h	/^	struct sk_buff_head q;$/;"	m	struct:audit_netlink_list	typeref:struct:audit_netlink_list::sk_buff_head
qbytes	kernel/auditsc.c	/^			unsigned long		qbytes;$/;"	m	struct:audit_context::__anon22::__anon24	file:
qhimark	kernel/rcutree.c	/^static int qhimark = 10000;	\/* If this many pending, ignore blimit. *\/$/;"	v	file:
qlen	kernel/rcutree.h	/^	long		qlen;		\/* # of queued callbacks *\/$/;"	m	struct:rcu_data
qlen_last_fqs_check	kernel/rcutree.h	/^	long		qlen_last_fqs_check;$/;"	m	struct:rcu_data
qlowmark	kernel/rcutree.c	/^static int qlowmark = 100;	\/* Once only this many pending, use blimit. *\/$/;"	v	file:
qs_pending	kernel/rcutree.h	/^	bool		qs_pending;	\/* Core waits for quiesc state. *\/$/;"	m	struct:rcu_data
qsmask	kernel/rcutree.h	/^	unsigned long qsmask;	\/* CPUs or groups that need to switch in *\/$/;"	m	struct:rcu_node
qsmaskinit	kernel/rcutree.h	/^	unsigned long qsmaskinit;$/;"	m	struct:rcu_node
queue	kernel/sched.c	/^	struct list_head queue[MAX_RT_PRIO];$/;"	m	struct:rt_prio_array	typeref:struct:rt_prio_array::list_head	file:
queue	kernel/smp.c	/^	struct list_head	queue;$/;"	m	struct:__anon45	typeref:struct:__anon45::list_head	file:
queue_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_delayed_work);$/;"	v
queue_delayed_work	kernel/workqueue.c	/^int queue_delayed_work(struct workqueue_struct *wq,$/;"	f
queue_delayed_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_delayed_work_on);$/;"	v
queue_delayed_work_on	kernel/workqueue.c	/^int queue_delayed_work_on(int cpu, struct workqueue_struct *wq,$/;"	f
queue_io	fs/fs-writeback.c	/^static void queue_io(struct bdi_writeback *wb, unsigned long *older_than_this)$/;"	f	file:
queue_lock	kernel/futex.c	/^static inline struct futex_hash_bucket *queue_lock(struct futex_q *q)$/;"	f	file:
queue_me	kernel/futex.c	/^static inline void queue_me(struct futex_q *q, struct futex_hash_bucket *hb)$/;"	f	file:
queue_unlock	kernel/futex.c	/^queue_unlock(struct futex_q *q, struct futex_hash_bucket *hb)$/;"	f	file:
queue_work	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_work);$/;"	v
queue_work	kernel/workqueue.c	/^int queue_work(struct workqueue_struct *wq, struct work_struct *work)$/;"	f
queue_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(queue_work_on);$/;"	v
queue_work_on	kernel/workqueue.c	/^queue_work_on(int cpu, struct workqueue_struct *wq, struct work_struct *work)$/;"	f
quicklist_total_size	mm/quicklist.c	/^unsigned long quicklist_total_size(void)$/;"	f
quicklist_trim	mm/quicklist.c	/^void quicklist_trim(int nr, void (*dtor)(void *),$/;"	f
quiet_cmd_ikconfiggz	kernel/Makefile	/^quiet_cmd_ikconfiggz = IKCFG   $@$/;"	m
quiet_cmd_timeconst	kernel/Makefile	/^quiet_cmd_timeconst  = TIMEC   $@$/;"	m
quiet_error	fs/buffer.c	/^static int quiet_error(struct buffer_head *bh)$/;"	f	file:
r_next	kernel/resource.c	/^static void *r_next(struct seq_file *m, void *v, loff_t *pos)$/;"	f	file:
r_show	kernel/resource.c	/^static int r_show(struct seq_file *m, void *v)$/;"	f	file:
ra_submit	mm/readahead.c	/^unsigned long ra_submit(struct file_ra_state *ra,$/;"	f
radix_tree_callback	lib/radix-tree.c	/^static int radix_tree_callback(struct notifier_block *nfb,$/;"	f	file:
radix_tree_delete	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_delete);$/;"	v
radix_tree_delete	lib/radix-tree.c	/^void *radix_tree_delete(struct radix_tree_root *root, unsigned long index)$/;"	f
radix_tree_extend	lib/radix-tree.c	/^static int radix_tree_extend(struct radix_tree_root *root, unsigned long index)$/;"	f	file:
radix_tree_gang_lookup	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup);$/;"	v
radix_tree_gang_lookup	lib/radix-tree.c	/^radix_tree_gang_lookup(struct radix_tree_root *root, void **results,$/;"	f
radix_tree_gang_lookup_slot	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup_slot);$/;"	v
radix_tree_gang_lookup_slot	lib/radix-tree.c	/^radix_tree_gang_lookup_slot(struct radix_tree_root *root, void ***results,$/;"	f
radix_tree_gang_lookup_tag	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup_tag);$/;"	v
radix_tree_gang_lookup_tag	lib/radix-tree.c	/^radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,$/;"	f
radix_tree_gang_lookup_tag_slot	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_gang_lookup_tag_slot);$/;"	v
radix_tree_gang_lookup_tag_slot	lib/radix-tree.c	/^radix_tree_gang_lookup_tag_slot(struct radix_tree_root *root, void ***results,$/;"	f
radix_tree_init	lib/radix-tree.c	/^void __init radix_tree_init(void)$/;"	f
radix_tree_init_maxindex	lib/radix-tree.c	/^static __init void radix_tree_init_maxindex(void)$/;"	f	file:
radix_tree_insert	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_insert);$/;"	v
radix_tree_insert	lib/radix-tree.c	/^int radix_tree_insert(struct radix_tree_root *root,$/;"	f
radix_tree_lookup	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_lookup);$/;"	v
radix_tree_lookup	lib/radix-tree.c	/^void *radix_tree_lookup(struct radix_tree_root *root, unsigned long index)$/;"	f
radix_tree_lookup_element	lib/radix-tree.c	/^static void *radix_tree_lookup_element(struct radix_tree_root *root,$/;"	f	file:
radix_tree_lookup_slot	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_lookup_slot);$/;"	v
radix_tree_lookup_slot	lib/radix-tree.c	/^void **radix_tree_lookup_slot(struct radix_tree_root *root, unsigned long index)$/;"	f
radix_tree_maxindex	lib/radix-tree.c	/^static inline unsigned long radix_tree_maxindex(unsigned int height)$/;"	f	file:
radix_tree_next_hole	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_next_hole);$/;"	v
radix_tree_next_hole	lib/radix-tree.c	/^unsigned long radix_tree_next_hole(struct radix_tree_root *root,$/;"	f
radix_tree_node	lib/radix-tree.c	/^struct radix_tree_node {$/;"	s	file:
radix_tree_node_alloc	lib/radix-tree.c	/^radix_tree_node_alloc(struct radix_tree_root *root)$/;"	f	file:
radix_tree_node_cachep	lib/radix-tree.c	/^static struct kmem_cache *radix_tree_node_cachep;$/;"	v	typeref:struct:kmem_cache	file:
radix_tree_node_ctor	lib/radix-tree.c	/^radix_tree_node_ctor(void *node)$/;"	f	file:
radix_tree_node_free	lib/radix-tree.c	/^radix_tree_node_free(struct radix_tree_node *node)$/;"	f	file:
radix_tree_node_rcu_free	lib/radix-tree.c	/^static void radix_tree_node_rcu_free(struct rcu_head *head)$/;"	f	file:
radix_tree_path	lib/radix-tree.c	/^struct radix_tree_path {$/;"	s	file:
radix_tree_preload	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_preload);$/;"	v
radix_tree_preload	lib/radix-tree.c	/^int radix_tree_preload(gfp_t gfp_mask)$/;"	f
radix_tree_preload	lib/radix-tree.c	/^struct radix_tree_preload {$/;"	s	file:
radix_tree_prev_hole	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_prev_hole);$/;"	v
radix_tree_prev_hole	lib/radix-tree.c	/^unsigned long radix_tree_prev_hole(struct radix_tree_root *root,$/;"	f
radix_tree_shrink	lib/radix-tree.c	/^static inline void radix_tree_shrink(struct radix_tree_root *root)$/;"	f	file:
radix_tree_tag_clear	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tag_clear);$/;"	v
radix_tree_tag_clear	lib/radix-tree.c	/^void *radix_tree_tag_clear(struct radix_tree_root *root,$/;"	f
radix_tree_tag_get	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tag_get);$/;"	v
radix_tree_tag_get	lib/radix-tree.c	/^int radix_tree_tag_get(struct radix_tree_root *root,$/;"	f
radix_tree_tag_set	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tag_set);$/;"	v
radix_tree_tag_set	lib/radix-tree.c	/^void *radix_tree_tag_set(struct radix_tree_root *root,$/;"	f
radix_tree_tagged	lib/radix-tree.c	/^EXPORT_SYMBOL(radix_tree_tagged);$/;"	v
radix_tree_tagged	lib/radix-tree.c	/^int radix_tree_tagged(struct radix_tree_root *root, unsigned int tag)$/;"	f
raise_softirq	kernel/softirq.c	/^void raise_softirq(unsigned int nr)$/;"	f
raise_softirq_irqoff	kernel/softirq.c	/^inline void raise_softirq_irqoff(unsigned int nr)$/;"	f
rand1	kernel/test_kprobes.c	/^static u32 rand1, preh_val, posth_val, jph_val;$/;"	v	file:
randomize_stack_top	fs/binfmt_elf.c	/^static unsigned long randomize_stack_top(unsigned long stack_top)$/;"	f	file:
range_cyclic	fs/fs-writeback.c	/^	int range_cyclic:1;$/;"	m	struct:wb_writeback_args	file:
ratelimit	fs/buffer.c	/^	int ratelimit;		\/* Limit cacheline bouncing *\/$/;"	m	struct:bh_accounting	file:
ratelimit_handler	mm/page-writeback.c	/^ratelimit_handler(struct notifier_block *self, unsigned long u, void *v)$/;"	f	file:
ratelimit_nb	mm/page-writeback.c	/^static struct notifier_block __cpuinitdata ratelimit_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
ratelimit_pages	mm/page-writeback.c	/^static long ratelimit_pages = 32;$/;"	v	file:
raw32_config_request	fs/compat_ioctl.c	/^struct raw32_config_request$/;"	s	file:
raw_ioctl	fs/compat_ioctl.c	/^static int raw_ioctl(unsigned fd, unsigned cmd,$/;"	f	file:
raw_minor	fs/compat_ioctl.c	/^        compat_int_t    raw_minor;$/;"	m	struct:raw32_config_request	file:
raw_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(raw_notifier_call_chain);$/;"	v
raw_notifier_call_chain	kernel/notifier.c	/^int raw_notifier_call_chain(struct raw_notifier_head *nh,$/;"	f
raw_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(raw_notifier_chain_register);$/;"	v
raw_notifier_chain_register	kernel/notifier.c	/^int raw_notifier_chain_register(struct raw_notifier_head *nh,$/;"	f
raw_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(raw_notifier_chain_unregister);$/;"	v
raw_notifier_chain_unregister	kernel/notifier.c	/^int raw_notifier_chain_unregister(struct raw_notifier_head *nh,$/;"	f
raw_read_can_lock	kernel/spinlock.c	35;"	d	file:
raw_rq	kernel/sched.c	662;"	d	file:
raw_spin_can_lock	include/linux/spinlock.h	250;"	d
raw_spin_is_contended	include/linux/spinlock.h	109;"	d
raw_spin_is_contended	include/linux/spinlock.h	113;"	d
raw_spin_is_contended	include/linux/spinlock.h	115;"	d
raw_spin_is_locked	include/linux/spinlock.h	106;"	d
raw_spin_lock	include/linux/spinlock.h	166;"	d
raw_spin_lock_bh	include/linux/spinlock.h	218;"	d
raw_spin_lock_init	include/linux/spinlock.h	102;"	d
raw_spin_lock_init	include/linux/spinlock.h	94;"	d
raw_spin_lock_irq	include/linux/spinlock.h	217;"	d
raw_spin_lock_irqsave	include/linux/spinlock.h	184;"	d
raw_spin_lock_irqsave	include/linux/spinlock.h	206;"	d
raw_spin_lock_irqsave_nested	include/linux/spinlock.h	191;"	d
raw_spin_lock_irqsave_nested	include/linux/spinlock.h	197;"	d
raw_spin_lock_irqsave_nested	include/linux/spinlock.h	212;"	d
raw_spin_lock_nest_lock	include/linux/spinlock.h	172;"	d
raw_spin_lock_nest_lock	include/linux/spinlock.h	179;"	d
raw_spin_lock_nested	include/linux/spinlock.h	169;"	d
raw_spin_lock_nested	include/linux/spinlock.h	178;"	d
raw_spin_trylock	include/linux/spinlock.h	164;"	d
raw_spin_trylock_bh	include/linux/spinlock.h	229;"	d
raw_spin_trylock_irq	include/linux/spinlock.h	232;"	d
raw_spin_trylock_irqsave	include/linux/spinlock.h	239;"	d
raw_spin_unlock	include/linux/spinlock.h	219;"	d
raw_spin_unlock_bh	include/linux/spinlock.h	227;"	d
raw_spin_unlock_irq	include/linux/spinlock.h	220;"	d
raw_spin_unlock_irqrestore	include/linux/spinlock.h	222;"	d
raw_spin_unlock_wait	include/linux/spinlock.h	128;"	d
raw_write_can_lock	kernel/spinlock.c	36;"	d	file:
rb_leftmost	kernel/sched.c	/^	struct rb_node *rb_leftmost;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::rb_node	file:
rb_node	mm/vmalloc.c	/^	struct rb_node rb_node;		\/* address sorted rbtree *\/$/;"	m	struct:vmap_area	typeref:struct:vmap_area::rb_node	file:
rb_root	mm/memcontrol.c	/^	struct rb_root rb_root;$/;"	m	struct:mem_cgroup_tree_per_zone	typeref:struct:mem_cgroup_tree_per_zone::rb_root	file:
rb_tree_per_node	mm/memcontrol.c	/^	struct mem_cgroup_tree_per_node *rb_tree_per_node[MAX_NUMNODES];$/;"	m	struct:mem_cgroup_tree	typeref:struct:mem_cgroup_tree::mem_cgroup_tree_per_node	file:
rb_tree_per_zone	mm/memcontrol.c	/^	struct mem_cgroup_tree_per_zone rb_tree_per_zone[MAX_NR_ZONES];$/;"	m	struct:mem_cgroup_tree_per_node	typeref:struct:mem_cgroup_tree_per_node::mem_cgroup_tree_per_zone	file:
rbn	fs/eventpoll.c	/^	struct rb_node rbn;$/;"	m	struct:epitem	typeref:struct:epitem::rb_node	file:
rbr	fs/eventpoll.c	/^	struct rb_root rbr;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::rb_root	file:
rchan_percpu_buf_dispatcher	kernel/relay.c	/^struct rchan_percpu_buf_dispatcher {$/;"	s	file:
rcu	kernel/audit.h	/^	struct rcu_head		rcu;$/;"	m	struct:audit_entry	typeref:struct:audit_entry::rcu_head
rcu	kernel/sched.c	/^	struct rcu_head rcu;$/;"	m	struct:task_group	typeref:struct:task_group::rcu_head	file:
rcu	kernel/tracepoint.c	/^		struct rcu_head rcu;$/;"	m	union:tp_probes::__anon47	typeref:struct:tp_probes::__anon47::rcu_head	file:
rcu	mm/kmemleak.c	/^	struct rcu_head rcu;		\/* object_list lockless traversal *\/$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::rcu_head	file:
rcu_adopt_orphan_cbs	kernel/rcutree.c	/^static void rcu_adopt_orphan_cbs(struct rcu_state *rsp)$/;"	f	file:
rcu_barrier	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_barrier);$/;"	v
rcu_barrier	kernel/rcutiny.c	/^void rcu_barrier(void)$/;"	f
rcu_barrier	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_barrier);$/;"	v
rcu_barrier	kernel/rcutree_plugin.h	/^void rcu_barrier(void)$/;"	f
rcu_barrier_bh	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_barrier_bh);$/;"	v
rcu_barrier_bh	kernel/rcutiny.c	/^void rcu_barrier_bh(void)$/;"	f
rcu_barrier_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_barrier_bh);$/;"	v
rcu_barrier_bh	kernel/rcutree.c	/^void rcu_barrier_bh(void)$/;"	f
rcu_barrier_callback	kernel/rcutree.c	/^static void rcu_barrier_callback(struct rcu_head *notused)$/;"	f	file:
rcu_barrier_completion	kernel/rcutree.c	/^static struct completion rcu_barrier_completion;$/;"	v	typeref:struct:completion	file:
rcu_barrier_cpu_count	kernel/rcutree.c	/^static atomic_t rcu_barrier_cpu_count;$/;"	v	file:
rcu_barrier_func	kernel/rcutree.c	/^static void rcu_barrier_func(void *type)$/;"	f	file:
rcu_barrier_sched	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(rcu_barrier_sched);$/;"	v
rcu_barrier_sched	kernel/rcutiny.c	/^void rcu_barrier_sched(void)$/;"	f
rcu_barrier_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_barrier_sched);$/;"	v
rcu_barrier_sched	kernel/rcutree.c	/^void rcu_barrier_sched(void)$/;"	f
rcu_batches_completed	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_batches_completed);$/;"	v
rcu_batches_completed	kernel/rcutree_plugin.h	/^long rcu_batches_completed(void)$/;"	f
rcu_batches_completed_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_batches_completed_bh);$/;"	v
rcu_batches_completed_bh	kernel/rcutree.c	/^long rcu_batches_completed_bh(void)$/;"	f
rcu_batches_completed_preempt	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(rcu_batches_completed_preempt);$/;"	v
rcu_batches_completed_preempt	kernel/rcutree_plugin.h	/^long rcu_batches_completed_preempt(void)$/;"	f
rcu_batches_completed_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(rcu_batches_completed_sched);$/;"	v
rcu_batches_completed_sched	kernel/rcutree.c	/^long rcu_batches_completed_sched(void)$/;"	f
rcu_bh_ctrlblk	kernel/rcutiny.c	/^static struct rcu_ctrlblk rcu_bh_ctrlblk = {$/;"	v	typeref:struct:rcu_ctrlblk	file:
rcu_bh_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_bh_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_bh_qs	kernel/rcutiny.c	/^void rcu_bh_qs(int cpu)$/;"	f
rcu_bh_qs	kernel/rcutree.c	/^void rcu_bh_qs(int cpu)$/;"	f
rcu_bh_state	kernel/rcutree.c	/^struct rcu_state rcu_bh_state = RCU_STATE_INITIALIZER(rcu_bh_state);$/;"	v	typeref:struct:rcu_state
rcu_bh_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_bh_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_bh_torture_completed	kernel/rcutorture.c	/^static int rcu_bh_torture_completed(void)$/;"	f	file:
rcu_bh_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_bh_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_bh_torture_synchronize	kernel/rcutorture.c	/^static void rcu_bh_torture_synchronize(void)$/;"	f	file:
rcu_bh_torture_synchronize	kernel/rcutorture.c	/^struct rcu_bh_torture_synchronize {$/;"	s	file:
rcu_bh_torture_wakeme_after_cb	kernel/rcutorture.c	/^static void rcu_bh_torture_wakeme_after_cb(struct rcu_head *head)$/;"	f	file:
rcu_boot_init_percpu_data	kernel/rcutree.c	/^rcu_boot_init_percpu_data(int cpu, struct rcu_state *rsp)$/;"	f	file:
rcu_bootup_announce	kernel/rcutree_plugin.h	/^static void __init rcu_bootup_announce(void)$/;"	f
rcu_check_callbacks	kernel/rcutiny.c	/^void rcu_check_callbacks(int cpu, int user)$/;"	f
rcu_check_callbacks	kernel/rcutree.c	/^void rcu_check_callbacks(int cpu, int user)$/;"	f
rcu_check_quiescent_state	kernel/rcutree.c	/^rcu_check_quiescent_state(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_cpu_notify	kernel/rcutree.c	/^static int __cpuinit rcu_cpu_notify(struct notifier_block *self,$/;"	f	file:
rcu_ctrlblk	kernel/rcutiny.c	/^static struct rcu_ctrlblk rcu_ctrlblk = {$/;"	v	typeref:struct:rcu_ctrlblk	file:
rcu_ctrlblk	kernel/rcutiny.c	/^struct rcu_ctrlblk {$/;"	s	file:
rcu_data	kernel/rcutree.h	/^struct rcu_data {$/;"	s
rcu_do_batch	kernel/rcutree.c	/^static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_dynticks	kernel/rcutree.h	/^struct rcu_dynticks {$/;"	s
rcu_dynticks_nesting	kernel/rcutiny.c	/^static long rcu_dynticks_nesting = 1;$/;"	v	file:
rcu_enter_nohz	kernel/rcutiny.c	/^void rcu_enter_nohz(void)$/;"	f
rcu_enter_nohz	kernel/rcutree.c	/^void rcu_enter_nohz(void)$/;"	f
rcu_exit_nohz	kernel/rcutiny.c	/^void rcu_exit_nohz(void)$/;"	f
rcu_exit_nohz	kernel/rcutree.c	/^void rcu_exit_nohz(void)$/;"	f
rcu_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_expedited_state	kernel/sched.c	/^static int rcu_expedited_state = RCU_EXPEDITED_STATE_IDLE;$/;"	v	file:
rcu_expedited_torture_stats	kernel/sched.c	/^EXPORT_SYMBOL_GPL(rcu_expedited_torture_stats);$/;"	v
rcu_expedited_torture_stats	kernel/sched.c	/^int rcu_expedited_torture_stats(char *page)$/;"	f
rcu_for_each_leaf_node	kernel/rcutree.h	150;"	d
rcu_for_each_node_breadth_first	kernel/rcutree.h	131;"	d
rcu_for_each_nonleaf_node_breadth_first	kernel/rcutree.h	140;"	d
rcu_free_old_probes	kernel/tracepoint.c	/^static void rcu_free_old_probes(struct rcu_head *head)$/;"	f	file:
rcu_free_slab	mm/slub.c	/^static void rcu_free_slab(struct rcu_head *h)$/;"	f	file:
rcu_free_va	mm/vmalloc.c	/^static void rcu_free_va(struct rcu_head *head)$/;"	f	file:
rcu_free_vb	mm/vmalloc.c	/^static void rcu_free_vb(struct rcu_head *head)$/;"	f	file:
rcu_get_root	kernel/rcutree.c	/^	__releases(rcu_get_root(rsp)->lock)$/;"	f
rcu_get_root	kernel/rcutree.c	/^static struct rcu_node *rcu_get_root(struct rcu_state *rsp)$/;"	f	file:
rcu_gp_in_progress	kernel/rcutree.c	/^static int rcu_gp_in_progress(struct rcu_state *rsp)$/;"	f	file:
rcu_head	fs/fs-writeback.c	/^	struct rcu_head rcu_head;	\/* for RCU free\/clear of work *\/$/;"	m	struct:bdi_work	typeref:struct:bdi_work::rcu_head	file:
rcu_head	kernel/cgroup.c	/^	struct rcu_head rcu_head;$/;"	m	struct:css_id	typeref:struct:css_id::rcu_head	file:
rcu_head	lib/radix-tree.c	/^	struct rcu_head	rcu_head;$/;"	m	struct:radix_tree_node	typeref:struct:radix_tree_node::rcu_head	file:
rcu_head	mm/vmalloc.c	/^	struct rcu_head rcu_head;$/;"	m	struct:vmap_area	typeref:struct:vmap_area::rcu_head	file:
rcu_head	mm/vmalloc.c	/^	struct rcu_head rcu_head;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::rcu_head	file:
rcu_idle_cpu	kernel/rcutorture.c	/^static int rcu_idle_cpu;	\/* Force all torture tasks off this CPU *\/$/;"	v	file:
rcu_implicit_dynticks_qs	kernel/rcutree.c	/^static int rcu_implicit_dynticks_qs(struct rcu_data *rdp)$/;"	f	file:
rcu_implicit_offline_qs	kernel/rcutree.c	/^static int rcu_implicit_offline_qs(struct rcu_data *rdp)$/;"	f	file:
rcu_init	kernel/rcutiny.c	/^void __init rcu_init(void)$/;"	f
rcu_init	kernel/rcutree.c	/^void __init rcu_init(void)$/;"	f
rcu_init_levelspread	kernel/rcutree.c	/^static void __init rcu_init_levelspread(struct rcu_state *rsp)$/;"	f	file:
rcu_init_one	kernel/rcutree.c	/^static void __init rcu_init_one(struct rcu_state *rsp)$/;"	f	file:
rcu_init_percpu_data	kernel/rcutree.c	/^rcu_init_percpu_data(int cpu, struct rcu_state *rsp, int preemptable)$/;"	f	file:
rcu_irq_enter	kernel/rcutree.c	/^void rcu_irq_enter(void)$/;"	f
rcu_irq_exit	kernel/rcutree.c	/^void rcu_irq_exit(void)$/;"	f
rcu_lock_break	kernel/hung_task.c	/^static void rcu_lock_break(struct task_struct *g, struct task_struct *t)$/;"	f	file:
rcu_lock_key	kernel/rcupdate.c	/^static struct lock_class_key rcu_lock_key;$/;"	v	typeref:struct:lock_class_key	file:
rcu_lock_map	kernel/rcupdate.c	/^EXPORT_SYMBOL_GPL(rcu_lock_map);$/;"	v
rcu_lock_map	kernel/rcupdate.c	/^struct lockdep_map rcu_lock_map =$/;"	v	typeref:struct:lockdep_map
rcu_needs_cpu	kernel/rcutree.c	/^int rcu_needs_cpu(int cpu)$/;"	f
rcu_nmi_enter	kernel/rcutree.c	/^void rcu_nmi_enter(void)$/;"	f
rcu_nmi_exit	kernel/rcutree.c	/^void rcu_nmi_exit(void)$/;"	f
rcu_no_completed	kernel/rcutorture.c	/^static int rcu_no_completed(void)$/;"	f	file:
rcu_node	kernel/rcutree.h	/^struct rcu_node {$/;"	s
rcu_node_class	kernel/rcutree.c	/^static struct lock_class_key rcu_node_class[NUM_RCU_LVLS];$/;"	v	typeref:struct:lock_class_key	file:
rcu_offline_cpu	kernel/rcutree.c	/^static void rcu_offline_cpu(int cpu)$/;"	f	file:
rcu_online_cpu	kernel/rcutree.c	/^static void __cpuinit rcu_online_cpu(int cpu)$/;"	f	file:
rcu_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_pending	kernel/rcutree.c	/^static int rcu_pending(int cpu)$/;"	f	file:
rcu_pending_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcu_pending_fops = {$/;"	v	typeref:struct:file_operations	file:
rcu_pending_open	kernel/rcutree_trace.c	/^static int rcu_pending_open(struct inode *inode, struct file *file)$/;"	f	file:
rcu_preempt_check_blocked_tasks	kernel/rcutree_plugin.h	/^static void rcu_preempt_check_blocked_tasks(struct rcu_node *rnp)$/;"	f
rcu_preempt_check_callbacks	kernel/rcutree_plugin.h	/^static void rcu_preempt_check_callbacks(int cpu)$/;"	f
rcu_preempt_init_percpu_data	kernel/rcutree_plugin.h	/^static void __cpuinit rcu_preempt_init_percpu_data(int cpu)$/;"	f
rcu_preempt_needs_cpu	kernel/rcutree_plugin.h	/^static int rcu_preempt_needs_cpu(int cpu)$/;"	f
rcu_preempt_note_context_switch	kernel/rcutree_plugin.h	/^static void rcu_preempt_note_context_switch(int cpu)$/;"	f
rcu_preempt_offline_cpu	kernel/rcutree_plugin.h	/^static void rcu_preempt_offline_cpu(int cpu)$/;"	f
rcu_preempt_offline_tasks	kernel/rcutree_plugin.h	/^static int rcu_preempt_offline_tasks(struct rcu_state *rsp,$/;"	f
rcu_preempt_pending	kernel/rcutree_plugin.h	/^static int rcu_preempt_pending(int cpu)$/;"	f
rcu_preempt_process_callbacks	kernel/rcutree_plugin.h	/^static void rcu_preempt_process_callbacks(void)$/;"	f
rcu_preempt_qs	kernel/rcutree_plugin.h	/^static void rcu_preempt_qs(int cpu)$/;"	f
rcu_preempt_send_cbs_to_orphanage	kernel/rcutree_plugin.h	/^static void rcu_preempt_send_cbs_to_orphanage(void)$/;"	f
rcu_preempt_state	kernel/rcutree_plugin.h	/^struct rcu_state rcu_preempt_state = RCU_STATE_INITIALIZER(rcu_preempt_state);$/;"	v	typeref:struct:rcu_state
rcu_preempted_readers	kernel/rcutree_plugin.h	/^static int rcu_preempted_readers(struct rcu_node *rnp)$/;"	f
rcu_preempted_readers_exp	kernel/rcutree_plugin.h	/^static int rcu_preempted_readers_exp(struct rcu_node *rnp)$/;"	f
rcu_print_task_stall	kernel/rcutree_plugin.h	/^static void rcu_print_task_stall(struct rcu_node *rnp)$/;"	f
rcu_process_callbacks	kernel/rcutiny.c	/^static void rcu_process_callbacks(struct softirq_action *unused)$/;"	f	file:
rcu_process_callbacks	kernel/rcutree.c	/^static void rcu_process_callbacks(struct softirq_action *unused)$/;"	f	file:
rcu_process_dyntick	kernel/rcutree.c	/^static int rcu_process_dyntick(struct rcu_state *rsp, long lastcomp,$/;"	f	file:
rcu_process_gp_end	kernel/rcutree.c	/^rcu_process_gp_end(struct rcu_state *rsp, struct rcu_data *rdp)$/;"	f	file:
rcu_qsctr_help	kernel/rcutiny.c	/^static int rcu_qsctr_help(struct rcu_ctrlblk *rcp)$/;"	f	file:
rcu_random	kernel/rcutorture.c	/^rcu_random(struct rcu_random_state *rrsp)$/;"	f	file:
rcu_random_state	kernel/rcutorture.c	/^struct rcu_random_state {$/;"	s	file:
rcu_read_delay	kernel/rcutorture.c	/^static void rcu_read_delay(struct rcu_random_state *rrsp)$/;"	f	file:
rcu_read_unlock_special	kernel/rcutree_plugin.h	/^static void rcu_read_unlock_special(struct task_struct *t)$/;"	f
rcu_report_exp_rnp	kernel/rcutree_plugin.h	/^static void rcu_report_exp_rnp(struct rcu_state *rsp, struct rcu_node *rnp)$/;"	f
rcu_report_qs_rdp	kernel/rcutree.c	/^rcu_report_qs_rdp(int cpu, struct rcu_state *rsp, struct rcu_data *rdp, long lastcomp)$/;"	f	file:
rcu_report_unblock_qs_rnp	kernel/rcutree_plugin.h	/^static void rcu_report_unblock_qs_rnp(struct rcu_node *rnp, unsigned long flags)$/;"	f
rcu_sched_qs	kernel/rcutiny.c	/^void rcu_sched_qs(int cpu)$/;"	f
rcu_sched_qs	kernel/rcutree.c	/^void rcu_sched_qs(int cpu)$/;"	f
rcu_sched_state	kernel/rcutree.c	/^struct rcu_state rcu_sched_state = RCU_STATE_INITIALIZER(rcu_sched_state);$/;"	v	typeref:struct:rcu_state
rcu_sched_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_sched_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_scheduler_starting	kernel/rcutree.c	/^void rcu_scheduler_starting(void)$/;"	f
rcu_send_cbs_to_orphanage	kernel/rcutree.c	/^static void rcu_send_cbs_to_orphanage(struct rcu_state *rsp)$/;"	f	file:
rcu_start_gp_per_cpu	kernel/rcutree.c	/^rcu_start_gp_per_cpu(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)$/;"	f	file:
rcu_state	kernel/rcutree.h	/^struct rcu_state {$/;"	s
rcu_stutter_wait	kernel/rcutorture.c	/^rcu_stutter_wait(char *title)$/;"	f	file:
rcu_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops rcu_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
rcu_sync_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_sync_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_sync_torture_init	kernel/rcutorture.c	/^static void rcu_sync_torture_init(void)$/;"	f	file:
rcu_torture	kernel/rcutorture.c	/^struct rcu_torture {$/;"	s	file:
rcu_torture_alloc	kernel/rcutorture.c	/^rcu_torture_alloc(void)$/;"	f	file:
rcu_torture_cb	kernel/rcutorture.c	/^rcu_torture_cb(struct rcu_head *p)$/;"	f	file:
rcu_torture_cleanup	kernel/rcutorture.c	/^module_exit(rcu_torture_cleanup);$/;"	v
rcu_torture_cleanup	kernel/rcutorture.c	/^rcu_torture_cleanup(void)$/;"	f	file:
rcu_torture_completed	kernel/rcutorture.c	/^static int rcu_torture_completed(void)$/;"	f	file:
rcu_torture_current	kernel/rcutorture.c	/^static struct rcu_torture *rcu_torture_current;$/;"	v	typeref:struct:rcu_torture	file:
rcu_torture_current_version	kernel/rcutorture.c	/^static long rcu_torture_current_version;$/;"	v	file:
rcu_torture_deferred_free	kernel/rcutorture.c	/^static void rcu_torture_deferred_free(struct rcu_torture *p)$/;"	f	file:
rcu_torture_fakewriter	kernel/rcutorture.c	/^rcu_torture_fakewriter(void *arg)$/;"	f	file:
rcu_torture_free	kernel/rcutorture.c	/^rcu_torture_free(struct rcu_torture *p)$/;"	f	file:
rcu_torture_init	kernel/rcutorture.c	/^module_init(rcu_torture_init);$/;"	v
rcu_torture_init	kernel/rcutorture.c	/^rcu_torture_init(void)$/;"	f	file:
rcu_torture_ops	kernel/rcutorture.c	/^struct rcu_torture_ops {$/;"	s	file:
rcu_torture_print_module_parms	kernel/rcutorture.c	/^rcu_torture_print_module_parms(char *tag)$/;"	f	file:
rcu_torture_printk	kernel/rcutorture.c	/^rcu_torture_printk(char *page)$/;"	f	file:
rcu_torture_reader	kernel/rcutorture.c	/^rcu_torture_reader(void *arg)$/;"	f	file:
rcu_torture_removed	kernel/rcutorture.c	/^static struct list_head rcu_torture_removed;$/;"	v	typeref:struct:list_head	file:
rcu_torture_shuffle	kernel/rcutorture.c	/^rcu_torture_shuffle(void *arg)$/;"	f	file:
rcu_torture_shuffle_tasks	kernel/rcutorture.c	/^static void rcu_torture_shuffle_tasks(void)$/;"	f	file:
rcu_torture_stats	kernel/rcutorture.c	/^rcu_torture_stats(void *arg)$/;"	f	file:
rcu_torture_stats_print	kernel/rcutorture.c	/^rcu_torture_stats_print(void)$/;"	f	file:
rcu_torture_stutter	kernel/rcutorture.c	/^rcu_torture_stutter(void *arg)$/;"	f	file:
rcu_torture_timer	kernel/rcutorture.c	/^static void rcu_torture_timer(unsigned long unused)$/;"	f	file:
rcu_torture_wcount	kernel/rcutorture.c	/^static atomic_t rcu_torture_wcount[RCU_TORTURE_PIPE_LEN + 1];$/;"	v	file:
rcu_torture_writer	kernel/rcutorture.c	/^rcu_torture_writer(void *arg)$/;"	f	file:
rcu_tortures	kernel/rcutorture.c	/^static struct rcu_torture rcu_tortures[10 * RCU_TORTURE_PIPE_LEN];$/;"	v	typeref:struct:rcu_torture	file:
rcucblist	kernel/rcutiny.c	/^	struct rcu_head *rcucblist;	\/* List of pending callbacks (CBs). *\/$/;"	m	struct:rcu_ctrlblk	typeref:struct:rcu_ctrlblk::rcu_head	file:
rcuclassic_trace_cleanup	kernel/rcutree_trace.c	/^module_exit(rcuclassic_trace_cleanup);$/;"	v
rcuclassic_trace_cleanup	kernel/rcutree_trace.c	/^static void __exit rcuclassic_trace_cleanup(void)$/;"	f	file:
rcuclassic_trace_init	kernel/rcutree_trace.c	/^module_init(rcuclassic_trace_init);$/;"	v
rcuclassic_trace_init	kernel/rcutree_trace.c	/^static int __init rcuclassic_trace_init(void)$/;"	f	file:
rcudata_csv_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcudata_csv_fops = {$/;"	v	typeref:struct:file_operations	file:
rcudata_csv_open	kernel/rcutree_trace.c	/^static int rcudata_csv_open(struct inode *inode, struct file *file)$/;"	f	file:
rcudata_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcudata_fops = {$/;"	v	typeref:struct:file_operations	file:
rcudata_open	kernel/rcutree_trace.c	/^static int rcudata_open(struct inode *inode, struct file *file)$/;"	f	file:
rcudir	kernel/rcutree_trace.c	/^static struct dentry *rcudir;$/;"	v	typeref:struct:dentry	file:
rcugp_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcugp_fops = {$/;"	v	typeref:struct:file_operations	file:
rcugp_open	kernel/rcutree_trace.c	/^static int rcugp_open(struct inode *inode, struct file *file)$/;"	f	file:
rcuhier_fops	kernel/rcutree_trace.c	/^static const struct file_operations rcuhier_fops = {$/;"	v	typeref:struct:file_operations	file:
rcuhier_open	kernel/rcutree_trace.c	/^static int rcuhier_open(struct inode *inode, struct file *file)$/;"	f	file:
rcutorture_nb	kernel/rcutorture.c	/^static struct notifier_block rcutorture_nb = {$/;"	v	typeref:struct:notifier_block	file:
rcutorture_runnable	kernel/rcutorture.c	/^int rcutorture_runnable = RCUTORTURE_RUNNABLE_INIT;$/;"	v
rcutorture_shutdown_absorb	kernel/rcutorture.c	/^static void rcutorture_shutdown_absorb(char *title)$/;"	f	file:
rcutorture_shutdown_notify	kernel/rcutorture.c	/^rcutorture_shutdown_notify(struct notifier_block *unused1,$/;"	f	file:
rd	kernel/sched.c	/^	struct root_domain	*rd;$/;"	m	struct:s_data	typeref:struct:s_data::root_domain	file:
rd	kernel/sched.c	/^	struct root_domain *rd;$/;"	m	struct:rq	typeref:struct:rq::root_domain	file:
rda	kernel/rcutree.h	/^	struct rcu_data *rda[NR_CPUS];		\/* array of rdp pointers. *\/$/;"	m	struct:rcu_state	typeref:struct:rcu_state::rcu_data
rdev	kernel/auditsc.c	/^	dev_t		rdev;$/;"	m	struct:audit_names	file:
rdllink	fs/eventpoll.c	/^	struct list_head rdllink;$/;"	m	struct:epitem	typeref:struct:epitem::list_head	file:
rdllist	fs/eventpoll.c	/^	struct list_head rdllist;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::list_head	file:
rdwr_pipefifo_fops	fs/pipe.c	/^const struct file_operations rdwr_pipefifo_fops = {$/;"	v	typeref:struct:file_operations
read_ahead_kb_store	mm/backing-dev.c	/^static ssize_t read_ahead_kb_store(struct device *dev,$/;"	f	file:
read_cache_page	mm/filemap.c	/^EXPORT_SYMBOL(read_cache_page);$/;"	v
read_cache_page	mm/filemap.c	/^struct page *read_cache_page(struct address_space *mapping,$/;"	f
read_cache_page_async	mm/filemap.c	/^EXPORT_SYMBOL(read_cache_page_async);$/;"	v
read_cache_page_async	mm/filemap.c	/^struct page *read_cache_page_async(struct address_space *mapping,$/;"	f
read_cache_page_gfp	mm/filemap.c	/^EXPORT_SYMBOL(read_cache_page_gfp);$/;"	v
read_cache_page_gfp	mm/filemap.c	/^struct page *read_cache_page_gfp(struct address_space *mapping,$/;"	f
read_cache_pages	mm/readahead.c	/^EXPORT_SYMBOL(read_cache_pages);$/;"	v
read_cache_pages	mm/readahead.c	/^int read_cache_pages(struct address_space *mapping, struct list_head *pages,$/;"	f
read_cache_pages_invalidate_page	mm/readahead.c	/^static void read_cache_pages_invalidate_page(struct address_space *mapping,$/;"	f	file:
read_cache_pages_invalidate_pages	mm/readahead.c	/^static void read_cache_pages_invalidate_pages(struct address_space *mapping,$/;"	f	file:
read_cred_subscribers	kernel/cred.c	/^static inline int read_cred_subscribers(const struct cred *cred)$/;"	f	file:
read_delay	kernel/rcutorture.c	/^	void (*read_delay)(struct rcu_random_state *rrsp);$/;"	m	struct:rcu_torture_ops	file:
read_enabled_file_bool	kernel/kprobes.c	/^static ssize_t read_enabled_file_bool(struct file *file,$/;"	f	file:
read_events	fs/aio.c	/^static int read_events(struct kioctx *ctx,$/;"	f	file:
read_mapping_page	include/linux/pagemap.h	/^static inline struct page *read_mapping_page(struct address_space *mapping,$/;"	f
read_mapping_page_async	include/linux/pagemap.h	/^static inline struct page *read_mapping_page_async($/;"	f
read_pages	mm/readahead.c	/^static int read_pages(struct address_space *mapping, struct file *filp,$/;"	f	file:
read_pipefifo_fops	fs/pipe.c	/^const struct file_operations read_pipefifo_fops = {$/;"	v	typeref:struct:file_operations
read_profile	kernel/profile.c	/^read_profile(struct file *file, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
read_scan_unevictable_node	mm/vmscan.c	/^static ssize_t read_scan_unevictable_node(struct sys_device *dev,$/;"	f	file:
read_swap_cache_async	mm/swap_state.c	/^struct page *read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
read_write	fs/compat_ioctl.c	/^	u8 read_write;$/;"	m	struct:i2c_smbus_ioctl_data32	file:
readahead	mm/filemap.c	/^SYSCALL_DEFINE(readahead)(int fd, loff_t offset, size_t count)$/;"	f
readdir_callback	fs/readdir.c	/^struct readdir_callback {$/;"	s	file:
reader_tasks	kernel/rcutorture.c	/^static struct task_struct **reader_tasks;$/;"	v	typeref:struct:task_struct	file:
readlock	kernel/rcutorture.c	/^	int (*readlock)(void);$/;"	m	struct:rcu_torture_ops	file:
readunlock	kernel/rcutorture.c	/^	void (*readunlock)(int idx);$/;"	m	struct:rcu_torture_ops	file:
really_put_req	fs/aio.c	/^static inline void really_put_req(struct kioctx *ctx, struct kiocb *req)$/;"	f	file:
reap_alien	mm/slab.c	/^static void reap_alien(struct kmem_cache *cachep, struct kmem_list3 *l3)$/;"	f	file:
reap_alien	mm/slab.c	945;"	d	file:
reap_counter	fs/direct-io.c	/^	int reap_counter;		\/* rate limit reaping *\/$/;"	m	struct:dio	file:
rear	kernel/lockdep.c	/^	unsigned int  front, rear;$/;"	m	struct:circular_queue	file:
rebalance_domains	kernel/sched.c	/^static void rebalance_domains(int cpu, enum cpu_idle_type idle)$/;"	f	file:
rebind	mm/mempolicy.c	/^	void (*rebind)(struct mempolicy *pol, const nodemask_t *nodes);$/;"	m	struct:mempolicy_operations	file:
rebind_subsystems	kernel/cgroup.c	/^static int rebind_subsystems(struct cgroupfs_root *root,$/;"	f	file:
reboot_notifier_list	kernel/notifier.c	/^BLOCKING_NOTIFIER_HEAD(reboot_notifier_list);$/;"	v
rebuild_sched_domains	kernel/cpuset.c	/^void rebuild_sched_domains(void)$/;"	f
recalc_bh_state	fs/buffer.c	/^static void recalc_bh_state(void)$/;"	f	file:
recalc_sigpending	kernel/signal.c	/^EXPORT_SYMBOL(recalc_sigpending);$/;"	v
recalc_sigpending	kernel/signal.c	/^void recalc_sigpending(void)$/;"	f
recalc_sigpending_and_wake	kernel/signal.c	/^void recalc_sigpending_and_wake(struct task_struct *t)$/;"	f
recalc_sigpending_tsk	kernel/signal.c	/^static int recalc_sigpending_tsk(struct task_struct *t)$/;"	f	file:
reclaim_account	mm/slub.c	/^SLAB_ATTR(reclaim_account);$/;"	v
reclaim_account_show	mm/slub.c	/^static ssize_t reclaim_account_show(struct kmem_cache *s, char *buf)$/;"	f	file:
reclaim_account_store	mm/slub.c	/^static ssize_t reclaim_account_store(struct kmem_cache *s,$/;"	f	file:
reclaim_param_lock	mm/memcontrol.c	/^	spinlock_t reclaim_param_lock;$/;"	m	struct:mem_cgroup	file:
reclaim_stat	mm/memcontrol.c	/^	struct zone_reclaim_stat reclaim_stat;$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::zone_reclaim_stat	file:
record_gp_stall_check_time	kernel/rcutree.c	/^static void record_gp_stall_check_time(struct rcu_state *rsp)$/;"	f	file:
record_last_oom	mm/memcontrol.c	/^static void record_last_oom(struct mem_cgroup *mem)$/;"	f	file:
record_last_oom_cb	mm/memcontrol.c	/^static int record_last_oom_cb(struct mem_cgroup *mem, void *data)$/;"	f	file:
recursion_bug	kernel/printk.c	/^static int recursion_bug;$/;"	v	file:
recursion_bug_msg	kernel/printk.c	/^static const char recursion_bug_msg [] =$/;"	v	file:
recv_idle	fs/compat_ioctl.c	/^	compat_time_t recv_idle;$/;"	m	struct:ppp_idle32	file:
recycle_rp_inst	kernel/kprobes.c	/^void __kprobes recycle_rp_inst(struct kretprobe_instance *ri,$/;"	f
red_zone	mm/slub.c	/^SLAB_ATTR(red_zone);$/;"	v
red_zone_show	mm/slub.c	/^static ssize_t red_zone_show(struct kmem_cache *s, char *buf)$/;"	f	file:
red_zone_store	mm/slub.c	/^static ssize_t red_zone_store(struct kmem_cache *s,$/;"	f	file:
redirty_page_for_writepage	mm/page-writeback.c	/^EXPORT_SYMBOL(redirty_page_for_writepage);$/;"	v
redirty_page_for_writepage	mm/page-writeback.c	/^int redirty_page_for_writepage(struct writeback_control *wbc, struct page *page)$/;"	f
redirty_tail	fs/fs-writeback.c	/^static void redirty_tail(struct inode *inode)$/;"	f	file:
redundant_hardirqs_off	kernel/lockdep.c	/^atomic_t redundant_hardirqs_off;$/;"	v
redundant_hardirqs_on	kernel/lockdep.c	/^atomic_t redundant_hardirqs_on;$/;"	v
redundant_softirqs_off	kernel/lockdep.c	/^atomic_t redundant_softirqs_off;$/;"	v
redundant_softirqs_on	kernel/lockdep.c	/^atomic_t redundant_softirqs_on;$/;"	v
refcnt	kernel/module.c	/^static struct module_attribute refcnt = {$/;"	v	typeref:struct:module_attribute	file:
refcnt	mm/memcontrol.c	/^	atomic_t	refcnt;$/;"	m	struct:mem_cgroup	file:
refcount	fs/direct-io.c	/^	unsigned long refcount;		\/* direct_io_worker() and bios *\/$/;"	m	struct:dio	file:
refcount	kernel/cpu.c	/^	int refcount;$/;"	m	struct:__anon32	file:
refcount	kernel/futex.c	/^	atomic_t refcount;$/;"	m	struct:futex_pi_state	file:
refcount	kernel/sched.c	/^	atomic_t refcount;$/;"	m	struct:root_domain	file:
refcount	kernel/stop_machine.c	/^static int refcount;$/;"	v	file:
refcount	kernel/tracepoint.c	/^	int refcount;	\/* Number of times armed. 0 if disarmed. *\/$/;"	m	struct:tracepoint_entry	file:
refill_pi_state_cache	kernel/futex.c	/^static int refill_pi_state_cache(void)$/;"	f	file:
refill_stock	mm/memcontrol.c	/^static void refill_stock(struct mem_cgroup *mem, int val)$/;"	f	file:
refresh_cpu_vm_stats	mm/vmstat.c	/^void refresh_cpu_vm_stats(int cpu)$/;"	f
refresh_zone_stat_thresholds	mm/vmstat.c	/^static void refresh_zone_stat_thresholds(void)$/;"	f	file:
refrigerator	kernel/freezer.c	/^EXPORT_SYMBOL(refrigerator);$/;"	v
refrigerator	kernel/freezer.c	/^void refrigerator(void)$/;"	f
refs	kernel/audit_tree.c	/^	atomic_long_t refs;$/;"	m	struct:audit_chunk	file:
refs	kernel/smp.c	/^	atomic_t		refs;$/;"	m	struct:call_function_data	file:
refs	mm/hugetlb.c	/^	struct kref refs;$/;"	m	struct:resv_map	typeref:struct:resv_map::kref	file:
refund_locked_memory	mm/mlock.c	/^void refund_locked_memory(struct mm_struct *mm, size_t size)$/;"	f
region_add	mm/hugetlb.c	/^static long region_add(struct list_head *head, long f, long t)$/;"	f	file:
region_chg	mm/hugetlb.c	/^static long region_chg(struct list_head *head, long f, long t)$/;"	f	file:
region_count	mm/hugetlb.c	/^static long region_count(struct list_head *head, long f, long t)$/;"	f	file:
region_devres	kernel/resource.c	/^struct region_devres {$/;"	s	file:
region_truncate	mm/hugetlb.c	/^static long region_truncate(struct list_head *head, long end)$/;"	f	file:
regions	mm/hugetlb.c	/^	struct list_head regions;$/;"	m	struct:resv_map	typeref:struct:resv_map::list_head	file:
register_aggr_kprobe	kernel/kprobes.c	/^static int __kprobes register_aggr_kprobe(struct kprobe *old_p,$/;"	f	file:
register_chrdev_region	fs/char_dev.c	/^EXPORT_SYMBOL(register_chrdev_region);$/;"	v
register_chrdev_region	fs/char_dev.c	/^int register_chrdev_region(dev_t from, unsigned count, const char *name)$/;"	f
register_console	kernel/printk.c	/^EXPORT_SYMBOL(register_console);$/;"	v
register_console	kernel/printk.c	/^void register_console(struct console *newcon)$/;"	f
register_cpu_notifier	kernel/cpu.c	/^EXPORT_SYMBOL(register_cpu_notifier);$/;"	v
register_cpu_notifier	kernel/cpu.c	/^int __ref register_cpu_notifier(struct notifier_block *nb)$/;"	f
register_die_notifier	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(register_die_notifier);$/;"	v
register_die_notifier	kernel/notifier.c	/^int register_die_notifier(struct notifier_block *nb)$/;"	f
register_exec_domain	kernel/exec_domain.c	/^EXPORT_SYMBOL(register_exec_domain);$/;"	v
register_exec_domain	kernel/exec_domain.c	/^register_exec_domain(struct exec_domain *ep)$/;"	f
register_fair_sched_group	kernel/sched.c	/^static inline void register_fair_sched_group(struct task_group *tg, int cpu)$/;"	f	file:
register_filesystem	fs/filesystems.c	/^EXPORT_SYMBOL(register_filesystem);$/;"	v
register_filesystem	fs/filesystems.c	/^int register_filesystem(struct file_system_type * fs)$/;"	f
register_jprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_jprobe);$/;"	v
register_jprobe	kernel/kprobes.c	/^int __kprobes register_jprobe(struct jprobe *jp)$/;"	f
register_jprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_jprobes);$/;"	v
register_jprobes	kernel/kprobes.c	/^int __kprobes register_jprobes(struct jprobe **jps, int num)$/;"	f
register_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kprobe);$/;"	v
register_kprobe	kernel/kprobes.c	/^int __kprobes register_kprobe(struct kprobe *p)$/;"	f
register_kprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kprobes);$/;"	v
register_kprobes	kernel/kprobes.c	/^int __kprobes register_kprobes(struct kprobe **kps, int num)$/;"	f
register_kretprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kretprobe);$/;"	v
register_kretprobe	kernel/kprobes.c	/^int __kprobes register_kretprobe(struct kretprobe *rp)$/;"	f
register_kretprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(register_kretprobes);$/;"	v
register_kretprobes	kernel/kprobes.c	/^int __kprobes register_kretprobes(struct kretprobe **rps, int num)$/;"	f
register_lock_class	kernel/lockdep.c	/^register_lock_class(struct lockdep_map *lock, unsigned int subclass, int force)$/;"	f	file:
register_memory_resource	mm/memory_hotplug.c	/^static struct resource *register_memory_resource(u64 start, u64 size)$/;"	f	file:
register_memsw_files	mm/memcontrol.c	/^static int register_memsw_files(struct cgroup *cont, struct cgroup_subsys *ss)$/;"	f	file:
register_module_notifier	kernel/module.c	/^EXPORT_SYMBOL(register_module_notifier);$/;"	v
register_module_notifier	kernel/module.c	/^int register_module_notifier(struct notifier_block * nb)$/;"	f
register_oom_notifier	mm/oom_kill.c	/^EXPORT_SYMBOL_GPL(register_oom_notifier);$/;"	v
register_oom_notifier	mm/oom_kill.c	/^int register_oom_notifier(struct notifier_block *nb)$/;"	f
register_page_bootmem_info_node	mm/memory_hotplug.c	/^void register_page_bootmem_info_node(struct pglist_data *pgdat)$/;"	f
register_page_bootmem_info_section	mm/memory_hotplug.c	/^static void register_page_bootmem_info_section(unsigned long start_pfn)$/;"	f	file:
register_perf_hw_breakpoint	kernel/hw_breakpoint.c	/^int register_perf_hw_breakpoint(struct perf_event *bp)$/;"	f
register_pm_qos_misc	kernel/pm_qos_params.c	/^static int register_pm_qos_misc(struct pm_qos_object *qos)$/;"	f	file:
register_posix_clock	kernel/posix-timers.c	/^EXPORT_SYMBOL_GPL(register_posix_clock);$/;"	v
register_posix_clock	kernel/posix-timers.c	/^void register_posix_clock(const clockid_t clock_id, struct k_clock *new_clock)$/;"	f
register_reboot_notifier	kernel/notifier.c	/^EXPORT_SYMBOL(register_reboot_notifier);$/;"	v
register_reboot_notifier	kernel/notifier.c	/^int register_reboot_notifier(struct notifier_block *nb)$/;"	f
register_rt_sched_group	kernel/sched.c	/^static inline void register_rt_sched_group(struct task_group *tg, int cpu)$/;"	f	file:
register_sched_domain_sysctl	kernel/sched.c	/^static void register_sched_domain_sysctl(void)$/;"	f	file:
register_shrinker	mm/vmscan.c	/^EXPORT_SYMBOL(register_shrinker);$/;"	v
register_shrinker	mm/vmscan.c	/^void register_shrinker(struct shrinker *shrinker)$/;"	f
register_sysctl_paths	kernel/sysctl.c	/^EXPORT_SYMBOL(register_sysctl_paths);$/;"	v
register_sysctl_paths	kernel/sysctl.c	/^struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,$/;"	f
register_sysctl_root	kernel/sysctl.c	/^void register_sysctl_root(struct ctl_table_root *root)$/;"	f
register_sysctl_table	kernel/sysctl.c	/^EXPORT_SYMBOL(register_sysctl_table);$/;"	v
register_sysctl_table	kernel/sysctl.c	/^struct ctl_table_header *register_sysctl_table(struct ctl_table * table)$/;"	f
register_sysctl_table	kernel/sysctl.c	/^struct ctl_table_header *register_sysctl_table(struct ctl_table *table)$/;"	f
register_timer_hook	kernel/profile.c	/^EXPORT_SYMBOL_GPL(register_timer_hook);$/;"	v
register_timer_hook	kernel/profile.c	/^int register_timer_hook(int (*hook)(struct pt_regs *))$/;"	f
register_user_hw_breakpoint	kernel/hw_breakpoint.c	/^EXPORT_SYMBOL_GPL(register_user_hw_breakpoint);$/;"	v
register_user_hw_breakpoint	kernel/hw_breakpoint.c	/^register_user_hw_breakpoint(struct perf_event_attr *attr,$/;"	f
register_wide_hw_breakpoint	kernel/hw_breakpoint.c	/^EXPORT_SYMBOL_GPL(register_wide_hw_breakpoint);$/;"	v
register_wide_hw_breakpoint	kernel/hw_breakpoint.c	/^register_wide_hw_breakpoint(struct perf_event_attr *attr,$/;"	f
relatime_need_update	fs/inode.c	/^static int relatime_need_update(struct vfsmount *mnt, struct inode *inode,$/;"	f	file:
relax_domain_level	kernel/cpuset.c	/^	int relax_domain_level;$/;"	m	struct:cpuset	file:
relay_alloc_buf	kernel/relay.c	/^static void *relay_alloc_buf(struct rchan_buf *buf, size_t *size)$/;"	f	file:
relay_alloc_page_array	kernel/relay.c	/^static struct page **relay_alloc_page_array(unsigned int n_pages)$/;"	f	file:
relay_buf_empty	kernel/relay.c	/^static int relay_buf_empty(struct rchan_buf *buf)$/;"	f	file:
relay_buf_fault	kernel/relay.c	/^static int relay_buf_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
relay_buf_full	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_buf_full);$/;"	v
relay_buf_full	kernel/relay.c	/^int relay_buf_full(struct rchan_buf *buf)$/;"	f
relay_close	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_close);$/;"	v
relay_close	kernel/relay.c	/^void relay_close(struct rchan *chan)$/;"	f
relay_close_buf	kernel/relay.c	/^static void relay_close_buf(struct rchan_buf *buf)$/;"	f	file:
relay_consume_bytes	kernel/relay.c	/^static void relay_consume_bytes(struct rchan_buf *rbuf, int bytes_consumed)$/;"	f	file:
relay_create_buf	kernel/relay.c	/^static struct rchan_buf *relay_create_buf(struct rchan *chan)$/;"	f	file:
relay_create_buf_file	kernel/relay.c	/^static struct dentry *relay_create_buf_file(struct rchan *chan,$/;"	f	file:
relay_destroy_buf	kernel/relay.c	/^static void relay_destroy_buf(struct rchan_buf *buf)$/;"	f	file:
relay_destroy_channel	kernel/relay.c	/^static void relay_destroy_channel(struct kref *kref)$/;"	f	file:
relay_file_mmap	kernel/relay.c	/^static int relay_file_mmap(struct file *filp, struct vm_area_struct *vma)$/;"	f	file:
relay_file_mmap_close	kernel/relay.c	/^static void relay_file_mmap_close(struct vm_area_struct *vma)$/;"	f	file:
relay_file_mmap_ops	kernel/relay.c	/^static const struct vm_operations_struct relay_file_mmap_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
relay_file_open	kernel/relay.c	/^static int relay_file_open(struct inode *inode, struct file *filp)$/;"	f	file:
relay_file_operations	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_file_operations);$/;"	v
relay_file_operations	kernel/relay.c	/^const struct file_operations relay_file_operations = {$/;"	v	typeref:struct:file_operations
relay_file_poll	kernel/relay.c	/^static unsigned int relay_file_poll(struct file *filp, poll_table *wait)$/;"	f	file:
relay_file_read	kernel/relay.c	/^static ssize_t relay_file_read(struct file *filp,$/;"	f	file:
relay_file_read_avail	kernel/relay.c	/^static int relay_file_read_avail(struct rchan_buf *buf, size_t read_pos)$/;"	f	file:
relay_file_read_consume	kernel/relay.c	/^static void relay_file_read_consume(struct rchan_buf *buf,$/;"	f	file:
relay_file_read_end_pos	kernel/relay.c	/^static size_t relay_file_read_end_pos(struct rchan_buf *buf,$/;"	f	file:
relay_file_read_start_pos	kernel/relay.c	/^static size_t relay_file_read_start_pos(size_t read_pos,$/;"	f	file:
relay_file_read_subbuf_avail	kernel/relay.c	/^static size_t relay_file_read_subbuf_avail(size_t read_pos,$/;"	f	file:
relay_file_read_subbufs	kernel/relay.c	/^static ssize_t relay_file_read_subbufs(struct file *filp, loff_t *ppos,$/;"	f	file:
relay_file_release	kernel/relay.c	/^static int relay_file_release(struct inode *inode, struct file *filp)$/;"	f	file:
relay_file_splice_read	kernel/relay.c	/^static ssize_t relay_file_splice_read(struct file *in,$/;"	f	file:
relay_flush	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_flush);$/;"	v
relay_flush	kernel/relay.c	/^void relay_flush(struct rchan *chan)$/;"	f
relay_free_page_array	kernel/relay.c	/^static void relay_free_page_array(struct page **array)$/;"	f	file:
relay_hotcpu_callback	kernel/relay.c	/^static int __cpuinit relay_hotcpu_callback(struct notifier_block *nb,$/;"	f	file:
relay_init	kernel/relay.c	/^early_initcall(relay_init);$/;"	v
relay_init	kernel/relay.c	/^static __init int relay_init(void)$/;"	f	file:
relay_late_setup_files	kernel/relay.c	/^int relay_late_setup_files(struct rchan *chan,$/;"	f
relay_mmap_buf	kernel/relay.c	/^static int relay_mmap_buf(struct rchan_buf *buf, struct vm_area_struct *vma)$/;"	f	file:
relay_open	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_open);$/;"	v
relay_open	kernel/relay.c	/^struct rchan *relay_open(const char *base_filename,$/;"	f
relay_open_buf	kernel/relay.c	/^static struct rchan_buf *relay_open_buf(struct rchan *chan, unsigned int cpu)$/;"	f	file:
relay_page_release	kernel/relay.c	/^static void relay_page_release(struct splice_pipe_desc *spd, unsigned int i)$/;"	f	file:
relay_pipe_buf_ops	kernel/relay.c	/^static const struct pipe_buf_operations relay_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
relay_pipe_buf_release	kernel/relay.c	/^static void relay_pipe_buf_release(struct pipe_inode_info *pipe,$/;"	f	file:
relay_remove_buf	kernel/relay.c	/^static void relay_remove_buf(struct kref *kref)$/;"	f	file:
relay_reset	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_reset);$/;"	v
relay_reset	kernel/relay.c	/^void relay_reset(struct rchan *chan)$/;"	f
relay_set_buf_dentry	kernel/relay.c	/^static inline void relay_set_buf_dentry(struct rchan_buf *buf,$/;"	f	file:
relay_subbufs_consumed	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_subbufs_consumed);$/;"	v
relay_subbufs_consumed	kernel/relay.c	/^void relay_subbufs_consumed(struct rchan *chan,$/;"	f
relay_switch_subbuf	kernel/relay.c	/^EXPORT_SYMBOL_GPL(relay_switch_subbuf);$/;"	v
relay_switch_subbuf	kernel/relay.c	/^size_t relay_switch_subbuf(struct rchan_buf *buf, size_t length)$/;"	f
releasable_read	kernel/cgroup.c	/^static u64 releasable_read(struct cgroup *cgrp, struct cftype *cft)$/;"	f	file:
release_agent	kernel/cgroup.c	/^	char *release_agent;$/;"	m	struct:cgroup_sb_opts	file:
release_agent_path	kernel/cgroup.c	/^	char release_agent_path[PATH_MAX];$/;"	m	struct:cgroupfs_root	file:
release_bp_slot	kernel/hw_breakpoint.c	/^void release_bp_slot(struct perf_event *bp)$/;"	f
release_console_sem	kernel/printk.c	/^EXPORT_SYMBOL(release_console_sem);$/;"	v
release_console_sem	kernel/printk.c	/^void release_console_sem(void)$/;"	f
release_memory_resource	mm/memory_hotplug.c	/^static void release_memory_resource(struct resource *res)$/;"	f	file:
release_mounts	fs/namespace.c	/^void release_mounts(struct list_head *head)$/;"	f
release_open_intent	fs/namei.c	/^void release_open_intent(struct nameidata *nd)$/;"	f
release_pages	mm/swap.c	/^void release_pages(struct page **pages, int nr, int cold)$/;"	f
release_posix_timer	kernel/posix-timers.c	/^static void release_posix_timer(struct k_itimer *tmr, int it_id_set)$/;"	f	file:
release_probes	kernel/tracepoint.c	/^static inline void release_probes(void *old)$/;"	f	file:
release_resource	kernel/resource.c	/^EXPORT_SYMBOL(release_resource);$/;"	v
release_resource	kernel/resource.c	/^int release_resource(struct resource *old)$/;"	f
release_task	kernel/exit.c	/^void release_task(struct task_struct * p)$/;"	f
release_tgcred	kernel/cred.c	/^static void release_tgcred(struct cred *cred)$/;"	f	file:
release_tgcred_rcu	kernel/cred.c	/^static void release_tgcred_rcu(struct rcu_head *rcu)$/;"	f	file:
remap_pfn_range	mm/memory.c	/^EXPORT_SYMBOL(remap_pfn_range);$/;"	v
remap_pfn_range	mm/memory.c	/^int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr,$/;"	f
remap_pfn_range	mm/nommu.c	/^EXPORT_SYMBOL(remap_pfn_range);$/;"	v
remap_pfn_range	mm/nommu.c	/^int remap_pfn_range(struct vm_area_struct *vma, unsigned long from,$/;"	f
remap_pmd_range	mm/memory.c	/^static inline int remap_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
remap_pte_range	mm/memory.c	/^static int remap_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
remap_pud_range	mm/memory.c	/^static inline int remap_pud_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
remap_vmalloc_range	mm/nommu.c	/^EXPORT_SYMBOL(remap_vmalloc_range);$/;"	v
remap_vmalloc_range	mm/nommu.c	/^int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,$/;"	f
remap_vmalloc_range	mm/vmalloc.c	/^EXPORT_SYMBOL(remap_vmalloc_range);$/;"	v
remap_vmalloc_range	mm/vmalloc.c	/^int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,$/;"	f
remcom_in_buffer	kernel/kgdb.c	/^static char			remcom_in_buffer[BUFMAX];$/;"	v	file:
remcom_out_buffer	kernel/kgdb.c	/^static char			remcom_out_buffer[BUFMAX];$/;"	v	file:
remote_node_defrag_ratio	mm/slub.c	/^SLAB_ATTR(remote_node_defrag_ratio);$/;"	v
remote_node_defrag_ratio_show	mm/slub.c	/^static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *s, char *buf)$/;"	f	file:
remote_node_defrag_ratio_store	mm/slub.c	/^static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *s,$/;"	f	file:
remote_softirq_cpu_notifier	kernel/softirq.c	/^static struct notifier_block __cpuinitdata remote_softirq_cpu_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
remote_softirq_cpu_notify	kernel/softirq.c	/^static int __cpuinit remote_softirq_cpu_notify(struct notifier_block *self,$/;"	f	file:
remote_softirq_receive	kernel/softirq.c	/^static void remote_softirq_receive(void *data)$/;"	f	file:
remove_active_range	mm/page_alloc.c	/^void __init remove_active_range(unsigned int nid, unsigned long start_pfn,$/;"	f
remove_all_active_ranges	mm/page_alloc.c	/^void __init remove_all_active_ranges(void)$/;"	f
remove_all_break	kernel/kgdb.c	/^static int remove_all_break(void)$/;"	f	file:
remove_arg_zero	fs/exec.c	/^EXPORT_SYMBOL(remove_arg_zero);$/;"	v
remove_arg_zero	fs/exec.c	/^int remove_arg_zero(struct linux_binprm *bprm)$/;"	f
remove_buf_file_default_callback	kernel/relay.c	/^static int remove_buf_file_default_callback(struct dentry *dentry)$/;"	f	file:
remove_dir	kernel/cgroup.c	/^static void remove_dir(struct dentry *d)$/;"	f	file:
remove_element	mm/mempool.c	/^static void *remove_element(mempool_t *pool)$/;"	f	file:
remove_from_page_cache	mm/filemap.c	/^void remove_from_page_cache(struct page *page)$/;"	f
remove_full	mm/slub.c	/^static void remove_full(struct kmem_cache *s, struct page *page)$/;"	f	file:
remove_hrtimer	kernel/hrtimer.c	/^remove_hrtimer(struct hrtimer *timer, struct hrtimer_clock_base *base)$/;"	f	file:
remove_inode_buffers	fs/buffer.c	/^int remove_inode_buffers(struct inode *inode)$/;"	f
remove_inode_hash	fs/inode.c	/^EXPORT_SYMBOL(remove_inode_hash);$/;"	v
remove_inode_hash	fs/inode.c	/^void remove_inode_hash(struct inode *inode)$/;"	f
remove_mapping	mm/vmscan.c	/^int remove_mapping(struct address_space *mapping, struct page *page)$/;"	f
remove_memory	mm/memory_hotplug.c	/^EXPORT_SYMBOL_GPL(remove_memory);$/;"	v
remove_memory	mm/memory_hotplug.c	/^int remove_memory(u64 start, u64 size)$/;"	f
remove_migration_pte	mm/migrate.c	/^static int remove_migration_pte(struct page *new, struct vm_area_struct *vma,$/;"	f	file:
remove_migration_ptes	mm/migrate.c	/^static void remove_migration_ptes(struct page *old, struct page *new)$/;"	f	file:
remove_node_from_stable_tree	mm/ksm.c	/^static void remove_node_from_stable_tree(struct stable_node *stable_node)$/;"	f	file:
remove_notes_attrs	kernel/module.c	/^static inline void remove_notes_attrs(struct module *mod)$/;"	f	file:
remove_notes_attrs	kernel/module.c	/^static void remove_notes_attrs(struct module *mod)$/;"	f	file:
remove_partial	mm/slub.c	/^static void remove_partial(struct kmem_cache *s, struct page *page)$/;"	f	file:
remove_rmap_item_from_tree	mm/ksm.c	/^static void remove_rmap_item_from_tree(struct rmap_item *rmap_item)$/;"	f	file:
remove_sect_attrs	kernel/module.c	/^static inline void remove_sect_attrs(struct module *mod)$/;"	f	file:
remove_sect_attrs	kernel/module.c	/^static void remove_sect_attrs(struct module *mod)$/;"	f	file:
remove_tasks_in_empty_cpuset	kernel/cpuset.c	/^static void remove_tasks_in_empty_cpuset(struct cpuset *cs)$/;"	f	file:
remove_tracepoint	kernel/tracepoint.c	/^static inline void remove_tracepoint(struct tracepoint_entry *e)$/;"	f	file:
remove_trailing_rmap_items	mm/ksm.c	/^static void remove_trailing_rmap_items(struct mm_slot *mm_slot,$/;"	f	file:
remove_vm_area	mm/vmalloc.c	/^struct vm_struct *remove_vm_area(const void *addr)$/;"	f
remove_vma	mm/mmap.c	/^static struct vm_area_struct *remove_vma(struct vm_area_struct *vma)$/;"	f	file:
remove_vma_list	mm/mmap.c	/^static void remove_vma_list(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
remove_wait_queue	kernel/wait.c	/^EXPORT_SYMBOL(remove_wait_queue);$/;"	v
remove_wait_queue	kernel/wait.c	/^void remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait)$/;"	f
remove_waiter	kernel/rtmutex.c	/^static void remove_waiter(struct rt_mutex *lock,$/;"	f	file:
remove_watch_no_event	fs/notify/inotify/inotify.c	/^static void remove_watch_no_event(struct inotify_watch *watch,$/;"	f	file:
removexattr	fs/xattr.c	/^removexattr(struct dentry *d, const char __user *name)$/;"	f	file:
reparent_leader	kernel/exit.c	/^static void reparent_leader(struct task_struct *father, struct task_struct *p,$/;"	f	file:
reparent_to_kthreadd	kernel/exit.c	/^static void reparent_to_kthreadd(void)$/;"	f	file:
replace_mount_options	fs/namespace.c	/^EXPORT_SYMBOL(replace_mount_options);$/;"	v
replace_mount_options	fs/namespace.c	/^void replace_mount_options(struct super_block *sb, char *options)$/;"	f
replace_page	mm/ksm.c	/^static int replace_page(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
report_hugepages	mm/hugetlb.c	/^static void __init report_hugepages(void)$/;"	f	file:
report_probe	kernel/kprobes.c	/^static void __kprobes report_probe(struct seq_file *pi, struct kprobe *p,$/;"	f	file:
req_state	fs/compat_ioctl.c	/^	char req_state;$/;"	m	struct:compat_sg_req_info	file:
request_dma	kernel/dma.c	/^EXPORT_SYMBOL(request_dma);$/;"	v
request_dma	kernel/dma.c	/^int request_dma(unsigned int dmanr, const char * device_id)$/;"	f
request_dma	kernel/dma.c	/^int request_dma(unsigned int dmanr, const char *device_id)$/;"	f
request_resource	kernel/resource.c	/^EXPORT_SYMBOL(request_resource);$/;"	v
request_resource	kernel/resource.c	/^int request_resource(struct resource *root, struct resource *new)$/;"	f
requeue_futex	kernel/futex.c	/^void requeue_futex(struct futex_q *q, struct futex_hash_bucket *hb1,$/;"	f	file:
requeue_io	fs/fs-writeback.c	/^static void requeue_io(struct inode *inode)$/;"	f	file:
requeue_pi_key	kernel/futex.c	/^	union futex_key *requeue_pi_key;$/;"	m	struct:futex_q	typeref:union:futex_q::futex_key	file:
requeue_pi_wake_futex	kernel/futex.c	/^void requeue_pi_wake_futex(struct futex_q *q, union futex_key *key,$/;"	f	file:
requeue_rt_entity	kernel/sched_rt.c	/^requeue_rt_entity(struct rt_rq *rt_rq, struct sched_rt_entity *rt_se, int head)$/;"	f	file:
requeue_task_rt	kernel/sched_rt.c	/^static void requeue_task_rt(struct rq *rq, struct task_struct *p, int head)$/;"	f	file:
required_kernelcore	mm/page_alloc.c	/^  static unsigned long __initdata required_kernelcore;$/;"	v	file:
required_movablecore	mm/page_alloc.c	/^  static unsigned long __initdata required_movablecore;$/;"	v	file:
requirement_list	kernel/pm_qos_params.c	/^struct requirement_list {$/;"	s	file:
requirements	kernel/pm_qos_params.c	/^	struct requirement_list requirements;$/;"	m	struct:pm_qos_object	typeref:struct:pm_qos_object::requirement_list	file:
res	mm/memcontrol.c	/^	struct res_counter res;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::res_counter	file:
res	mm/memory-failure.c	/^	unsigned long res;$/;"	m	struct:page_state	file:
res_counter_charge	kernel/res_counter.c	/^int res_counter_charge(struct res_counter *counter, unsigned long val,$/;"	f
res_counter_charge_locked	kernel/res_counter.c	/^int res_counter_charge_locked(struct res_counter *counter, unsigned long val)$/;"	f
res_counter_init	kernel/res_counter.c	/^void res_counter_init(struct res_counter *counter, struct res_counter *parent)$/;"	f
res_counter_member	kernel/res_counter.c	/^res_counter_member(struct res_counter *counter, int member)$/;"	f	file:
res_counter_memparse_write_strategy	kernel/res_counter.c	/^int res_counter_memparse_write_strategy(const char *buf,$/;"	f
res_counter_read	kernel/res_counter.c	/^ssize_t res_counter_read(struct res_counter *counter, int member,$/;"	f
res_counter_read_u64	kernel/res_counter.c	/^u64 res_counter_read_u64(struct res_counter *counter, int member)$/;"	f
res_counter_uncharge	kernel/res_counter.c	/^void res_counter_uncharge(struct res_counter *counter, unsigned long val)$/;"	f
res_counter_uncharge_locked	kernel/res_counter.c	/^void res_counter_uncharge_locked(struct res_counter *counter, unsigned long val)$/;"	f
res_counter_write	kernel/res_counter.c	/^int res_counter_write(struct res_counter *counter, int member,$/;"	f
resched_cpu	kernel/sched.c	/^static void resched_cpu(int cpu)$/;"	f	file:
resched_ipi	kernel/rcutree.h	/^	unsigned long resched_ipi;	\/* Sent a resched IPI. *\/$/;"	m	struct:rcu_data
resched_task	kernel/sched.c	/^static void resched_task(struct task_struct *p)$/;"	f	file:
reserve_bootmem	mm/bootmem.c	/^int __init reserve_bootmem(unsigned long addr, unsigned long size,$/;"	f
reserve_bootmem_node	mm/bootmem.c	/^int __init reserve_bootmem_node(pg_data_t *pgdat, unsigned long physaddr,$/;"	f
reserve_bp_slot	kernel/hw_breakpoint.c	/^int reserve_bp_slot(struct perf_event *bp)$/;"	f
reserve_region_with_split	kernel/resource.c	/^void __init reserve_region_with_split(struct resource *root,$/;"	f
reserve_setup	kernel/resource.c	/^static int __init reserve_setup(char *str)$/;"	f	file:
reserved	fs/compat_ioctl.c	/^        compat_int_t    reserved[1];$/;"	m	struct:serial_struct32	file:
reserved	mm/memory-failure.c	725;"	d	file:
reserved	mm/memory-failure.c	782;"	d	file:
reserved_char	fs/compat_ioctl.c	/^        char    reserved_char[1];$/;"	m	struct:serial_struct32	file:
reset_files_struct	kernel/exit.c	/^void reset_files_struct(struct files_struct *files)$/;"	f
reset_iter	kernel/kallsyms.c	/^static void reset_iter(struct kallsym_iter *iter, loff_t new_pos)$/;"	f	file:
reset_kprobe_instance	kernel/kprobes.c	/^static inline void reset_kprobe_instance(void)$/;"	f	file:
reset_vma_resv_huge_pages	mm/hugetlb.c	/^void reset_vma_resv_huge_pages(struct vm_area_struct *vma)$/;"	f
reset_vma_truncate_counts	mm/memory.c	/^static void reset_vma_truncate_counts(struct address_space *mapping)$/;"	f	file:
resid	fs/compat_ioctl.c	/^	compat_int_t resid;		\/* [o] dxfer_len - actual_transferred *\/$/;"	m	struct:sg_io_hdr32	file:
resiliency_test	mm/slub.c	/^static void resiliency_test(void) {};$/;"	f	file:
resiliency_test	mm/slub.c	/^static void resiliency_test(void)$/;"	f	file:
resolve_symbol	kernel/module.c	/^static const struct kernel_symbol *resolve_symbol(Elf_Shdr *sechdrs,$/;"	f	file:
resource_alignment	kernel/resource.c	/^resource_size_t resource_alignment(struct resource *res)$/;"	f
resource_op	kernel/resource.c	/^static const struct seq_operations resource_op = {$/;"	v	typeref:struct:seq_operations	file:
restore_bytes	mm/slub.c	/^static void restore_bytes(struct kmem_cache *s, char *message, u8 data,$/;"	f	file:
result	fs/compat.c	/^	int result;$/;"	m	struct:compat_readdir_callback	file:
result	fs/direct-io.c	/^	ssize_t result;                 \/* IO result *\/$/;"	m	struct:dio	file:
result	fs/readdir.c	/^	int result;$/;"	m	struct:readdir_callback	file:
result	kernel/kthread.c	/^	struct task_struct *result;$/;"	m	struct:kthread_create_info	typeref:struct:kthread_create_info::task_struct	file:
resume_console	kernel/printk.c	/^void resume_console(void)$/;"	f
resv_hugepages	mm/hugetlb.c	/^HSTATE_ATTR_RO(resv_hugepages);$/;"	v
resv_hugepages_show	mm/hugetlb.c	/^static ssize_t resv_hugepages_show(struct kobject *kobj,$/;"	f	file:
resv_map	mm/hugetlb.c	/^struct resv_map {$/;"	s	file:
resv_map_alloc	mm/hugetlb.c	/^static struct resv_map *resv_map_alloc(void)$/;"	f	file:
resv_map_release	mm/hugetlb.c	/^static void resv_map_release(struct kref *ref)$/;"	f	file:
ret	kernel/workqueue.c	/^	long ret;$/;"	m	struct:work_for_cpu	file:
retrans	fs/compat.c	/^	compat_int_t retrans;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
retrigger_next_event	kernel/hrtimer.c	/^static void retrigger_next_event(void *arg)$/;"	f	file:
retry_count	fs/compat.c	/^	compat_uint_t retry_count;$/;"	m	struct:compat_ncp_mount_data	file:
retry_count	fs/compat.c	/^	compat_uint_t retry_count;$/;"	m	struct:compat_ncp_mount_data_v4	file:
return_code	kernel/auditsc.c	/^	long		    return_code;\/* syscall return code *\/$/;"	m	struct:audit_context	file:
return_handler	kernel/test_kprobes.c	/^static int return_handler(struct kretprobe_instance *ri, struct pt_regs *regs)$/;"	f	file:
return_handler2	kernel/test_kprobes.c	/^static int return_handler2(struct kretprobe_instance *ri, struct pt_regs *regs)$/;"	f	file:
return_unused_surplus_pages	mm/hugetlb.c	/^static void return_unused_surplus_pages(struct hstate *h,$/;"	f	file:
return_valid	kernel/auditsc.c	/^	int		    return_valid; \/* return code is valid *\/$/;"	m	struct:audit_context	file:
retval	kernel/kmod.c	/^	int retval;$/;"	m	struct:subprocess_info	file:
reuse_swap_page	mm/swapfile.c	/^int reuse_swap_page(struct page *page)$/;"	f
revalidate_disk	fs/block_dev.c	/^EXPORT_SYMBOL(revalidate_disk);$/;"	v
revalidate_disk	fs/block_dev.c	/^int revalidate_disk(struct gendisk *disk)$/;"	f
revert_creds	kernel/cred.c	/^EXPORT_SYMBOL(revert_creds);$/;"	v
revert_creds	kernel/cred.c	/^void revert_creds(const struct cred *old)$/;"	f
rm_from_queue	kernel/signal.c	/^static int rm_from_queue(unsigned long mask, struct sigpending *s)$/;"	f	file:
rm_from_queue_full	kernel/signal.c	/^static int rm_from_queue_full(sigset_t *mask, struct sigpending *s)$/;"	f	file:
rmap_item	mm/ksm.c	/^struct rmap_item {$/;"	s	file:
rmap_item_cache	mm/ksm.c	/^static struct kmem_cache *rmap_item_cache;$/;"	v	typeref:struct:kmem_cache	file:
rmap_list	mm/ksm.c	/^	struct rmap_item **rmap_list;$/;"	m	struct:ksm_scan	typeref:struct:ksm_scan::rmap_item	file:
rmap_list	mm/ksm.c	/^	struct rmap_item *rmap_list;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::rmap_item	file:
rmap_list	mm/ksm.c	/^	struct rmap_item *rmap_list;$/;"	m	struct:rmap_item	typeref:struct:rmap_item::rmap_item	file:
rmap_walk	mm/rmap.c	/^int rmap_walk(struct page *page, int (*rmap_one)(struct page *,$/;"	f
rmap_walk_anon	mm/rmap.c	/^static int rmap_walk_anon(struct page *page, int (*rmap_one)(struct page *,$/;"	f	file:
rmap_walk_file	mm/rmap.c	/^static int rmap_walk_file(struct page *page, int (*rmap_one)(struct page *,$/;"	f	file:
rmap_walk_ksm	mm/ksm.c	/^int rmap_walk_ksm(struct page *page, int (*rmap_one)(struct page *,$/;"	f
rmqueue_bulk	mm/page_alloc.c	/^static int rmqueue_bulk(struct zone *zone, unsigned int order, $/;"	f	file:
rmv_page_order	mm/page_alloc.c	/^static inline void rmv_page_order(struct page *page)$/;"	f	file:
rollback_node_hotadd	mm/memory_hotplug.c	/^static void rollback_node_hotadd(int nid, pg_data_t *pgdat)$/;"	f	file:
root	kernel/audit_tree.c	/^	struct audit_chunk *root;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::audit_chunk	file:
root_count	kernel/cgroup.c	/^static int root_count;$/;"	v	file:
root_domain	kernel/sched.c	/^struct root_domain {$/;"	s	file:
root_gfp_mask	lib/radix-tree.c	/^static inline gfp_t root_gfp_mask(struct radix_tree_root *root)$/;"	f	file:
root_list	kernel/cgroup.c	/^	struct list_head root_list;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::list_head	file:
root_stable_tree	mm/ksm.c	/^static struct rb_root root_stable_tree = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
root_table	kernel/sysctl.c	/^static struct ctl_table root_table[] = {$/;"	v	typeref:struct:ctl_table	file:
root_table	kernel/sysctl.c	/^static struct ctl_table root_table[];$/;"	v	typeref:struct:ctl_table	file:
root_table_header	kernel/sysctl.c	/^static struct ctl_table_header root_table_header = {$/;"	v	typeref:struct:ctl_table_header	file:
root_tag_clear	lib/radix-tree.c	/^static inline void root_tag_clear(struct radix_tree_root *root, unsigned int tag)$/;"	f	file:
root_tag_clear_all	lib/radix-tree.c	/^static inline void root_tag_clear_all(struct radix_tree_root *root)$/;"	f	file:
root_tag_get	lib/radix-tree.c	/^static inline int root_tag_get(struct radix_tree_root *root, unsigned int tag)$/;"	f	file:
root_tag_set	lib/radix-tree.c	/^static inline void root_tag_set(struct radix_tree_root *root, unsigned int tag)$/;"	f	file:
root_task_group	kernel/sched.c	/^struct task_group root_task_group;$/;"	v	typeref:struct:task_group
root_task_group	kernel/sched.c	304;"	d	file:
root_task_group_empty	kernel/sched.c	/^static int root_task_group_empty(void)$/;"	f	file:
root_unstable_tree	mm/ksm.c	/^static struct rb_root root_unstable_tree = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
root_user	kernel/user.c	/^struct user_struct root_user = {$/;"	v	typeref:struct:user_struct
rootnode	kernel/cgroup.c	/^static struct cgroupfs_root rootnode;$/;"	v	typeref:struct:cgroupfs_root	file:
rotate_ctx	kernel/perf_event.c	/^static void rotate_ctx(struct perf_event_context *ctx)$/;"	f	file:
rotate_reclaimable_page	mm/swap.c	/^void  rotate_reclaimable_page(struct page *page)$/;"	f
round_jiffies	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies);$/;"	v
round_jiffies	kernel/timer.c	/^unsigned long round_jiffies(unsigned long j)$/;"	f
round_jiffies_common	kernel/timer.c	/^static unsigned long round_jiffies_common(unsigned long j, int cpu,$/;"	f	file:
round_jiffies_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies_relative);$/;"	v
round_jiffies_relative	kernel/timer.c	/^unsigned long round_jiffies_relative(unsigned long j)$/;"	f
round_jiffies_up	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies_up);$/;"	v
round_jiffies_up	kernel/timer.c	/^unsigned long round_jiffies_up(unsigned long j)$/;"	f
round_jiffies_up_relative	kernel/timer.c	/^EXPORT_SYMBOL_GPL(round_jiffies_up_relative);$/;"	v
round_jiffies_up_relative	kernel/timer.c	/^unsigned long round_jiffies_up_relative(unsigned long j)$/;"	f
rp	kernel/test_kprobes.c	/^static struct kretprobe rp = {$/;"	v	typeref:struct:kretprobe	file:
rp2	kernel/test_kprobes.c	/^static struct kretprobe rp2 = {$/;"	v	typeref:struct:kretprobe	file:
rq	kernel/sched.c	/^	struct rq *rq;	\/* cpu runqueue to which this cfs_rq is attached *\/$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::rq	file:
rq	kernel/sched.c	/^	struct rq *rq;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::rq	file:
rq	kernel/sched.c	/^struct rq {$/;"	s	file:
rq_attach_root	kernel/sched.c	/^static void rq_attach_root(struct rq *rq, struct root_domain *rd)$/;"	f	file:
rq_cpu_time	kernel/sched.c	/^	unsigned long long rq_cpu_time;$/;"	m	struct:rq	file:
rq_iterator	kernel/sched.c	/^struct rq_iterator {$/;"	s	file:
rq_of	kernel/sched_fair.c	/^static inline struct rq *rq_of(struct cfs_rq *cfs_rq)$/;"	f	file:
rq_of_rt_rq	kernel/sched_rt.c	/^static inline struct rq *rq_of_rt_rq(struct rt_rq *rt_rq)$/;"	f	file:
rq_offline_fair	kernel/sched_fair.c	/^static void rq_offline_fair(struct rq *rq)$/;"	f	file:
rq_offline_rt	kernel/sched_rt.c	/^static void rq_offline_rt(struct rq *rq)$/;"	f	file:
rq_online_fair	kernel/sched_fair.c	/^static void rq_online_fair(struct rq *rq)$/;"	f	file:
rq_online_rt	kernel/sched_rt.c	/^static void rq_online_rt(struct rq *rq)$/;"	f	file:
rq_sched_info	kernel/sched.c	/^	struct sched_info rq_sched_info;$/;"	m	struct:rq	typeref:struct:rq::sched_info	file:
rq_sched_info_arrive	kernel/sched_stats.h	/^rq_sched_info_arrive(struct rq *rq, unsigned long long delta)$/;"	f
rq_sched_info_depart	kernel/sched_stats.h	/^rq_sched_info_depart(struct rq *rq, unsigned long long delta)$/;"	f
rq_sched_info_dequeued	kernel/sched_stats.h	/^rq_sched_info_dequeued(struct rq *rq, unsigned long long delta)$/;"	f
rq_weight	kernel/sched.c	/^	unsigned long rq_weight;$/;"	m	struct:cfs_rq	file:
rrs_count	kernel/rcutorture.c	/^	long rrs_count;$/;"	m	struct:rcu_random_state	file:
rrs_state	kernel/rcutorture.c	/^	unsigned long rrs_state;$/;"	m	struct:rcu_random_state	file:
rsize	fs/compat.c	/^	compat_int_t rsize;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
rsize	fs/nfsctl.c	/^	char *name; int wsize; int rsize;$/;"	m	struct:__anon20	file:
rt	kernel/sched.c	/^	struct rt_rq rt;$/;"	m	struct:rq	typeref:struct:rq::rt_rq	file:
rt	kernel/workqueue.c	/^	int rt;$/;"	m	struct:workqueue_struct	file:
rt_avg	kernel/sched.c	/^	u64 rt_avg;$/;"	m	struct:rq	file:
rt_bandwidth	kernel/sched.c	/^	struct rt_bandwidth rt_bandwidth;$/;"	m	struct:task_group	typeref:struct:task_group::rt_bandwidth	file:
rt_bandwidth	kernel/sched.c	/^struct rt_bandwidth {$/;"	s	file:
rt_bandwidth_enabled	kernel/sched.c	/^static inline int rt_bandwidth_enabled(void)$/;"	f	file:
rt_clear_overload	kernel/sched_rt.c	/^static inline void rt_clear_overload(struct rq *rq)$/;"	f	file:
rt_entity_is_task	kernel/sched_rt.c	30;"	d	file:
rt_entity_is_task	kernel/sched_rt.c	8;"	d	file:
rt_mutex_adjust_pi	kernel/rtmutex.c	/^void rt_mutex_adjust_pi(struct task_struct *task)$/;"	f
rt_mutex_adjust_prio	kernel/rtmutex.c	/^static void rt_mutex_adjust_prio(struct task_struct *task)$/;"	f	file:
rt_mutex_adjust_prio_chain	kernel/rtmutex.c	/^static int rt_mutex_adjust_prio_chain(struct task_struct *task,$/;"	f	file:
rt_mutex_cmpxchg	kernel/rtmutex.c	82;"	d	file:
rt_mutex_cmpxchg	kernel/rtmutex.c	92;"	d	file:
rt_mutex_deadlock_account_lock	kernel/rtmutex-debug.c	/^rt_mutex_deadlock_account_lock(struct rt_mutex *lock, struct task_struct *task)$/;"	f
rt_mutex_deadlock_account_lock	kernel/rtmutex.h	14;"	d
rt_mutex_deadlock_account_unlock	kernel/rtmutex-debug.c	/^void rt_mutex_deadlock_account_unlock(struct task_struct *task)$/;"	f
rt_mutex_deadlock_account_unlock	kernel/rtmutex.h	15;"	d
rt_mutex_deadlock_check	kernel/rtmutex.h	13;"	d
rt_mutex_debug_task_free	kernel/rtmutex-debug.c	/^void rt_mutex_debug_task_free(struct task_struct *task)$/;"	f
rt_mutex_destroy	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_destroy);$/;"	v
rt_mutex_destroy	kernel/rtmutex.c	/^void rt_mutex_destroy(struct rt_mutex *lock)$/;"	f
rt_mutex_fastlock	kernel/rtmutex.c	/^rt_mutex_fastlock(struct rt_mutex *lock, int state,$/;"	f	file:
rt_mutex_fasttrylock	kernel/rtmutex.c	/^rt_mutex_fasttrylock(struct rt_mutex *lock,$/;"	f	file:
rt_mutex_fastunlock	kernel/rtmutex.c	/^rt_mutex_fastunlock(struct rt_mutex *lock,$/;"	f	file:
rt_mutex_finish_proxy_lock	kernel/rtmutex.c	/^int rt_mutex_finish_proxy_lock(struct rt_mutex *lock,$/;"	f
rt_mutex_getprio	kernel/rtmutex.c	/^int rt_mutex_getprio(struct task_struct *task)$/;"	f
rt_mutex_has_waiters	kernel/rtmutex_common.h	/^static inline int rt_mutex_has_waiters(struct rt_mutex *lock)$/;"	f
rt_mutex_init_proxy_locked	kernel/rtmutex.c	/^void rt_mutex_init_proxy_locked(struct rt_mutex *lock,$/;"	f
rt_mutex_init_task	kernel/fork.c	/^static void rt_mutex_init_task(struct task_struct *p)$/;"	f	file:
rt_mutex_lock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_lock);$/;"	v
rt_mutex_lock	kernel/rtmutex.c	/^void __sched rt_mutex_lock(struct rt_mutex *lock)$/;"	f
rt_mutex_lock_interruptible	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_lock_interruptible);$/;"	v
rt_mutex_lock_interruptible	kernel/rtmutex.c	/^int __sched rt_mutex_lock_interruptible(struct rt_mutex *lock,$/;"	f
rt_mutex_next_owner	kernel/rtmutex.c	/^struct task_struct *rt_mutex_next_owner(struct rt_mutex *lock)$/;"	f
rt_mutex_owner	kernel/rtmutex_common.h	/^static inline struct task_struct *rt_mutex_owner(struct rt_mutex *lock)$/;"	f
rt_mutex_owner_pending	kernel/rtmutex_common.h	/^static inline unsigned long rt_mutex_owner_pending(struct rt_mutex *lock)$/;"	f
rt_mutex_proxy_unlock	kernel/rtmutex.c	/^void rt_mutex_proxy_unlock(struct rt_mutex *lock,$/;"	f
rt_mutex_real_owner	kernel/rtmutex_common.h	/^static inline struct task_struct *rt_mutex_real_owner(struct rt_mutex *lock)$/;"	f
rt_mutex_set_owner	kernel/rtmutex.c	/^rt_mutex_set_owner(struct rt_mutex *lock, struct task_struct *owner,$/;"	f	file:
rt_mutex_setprio	kernel/sched.c	/^void rt_mutex_setprio(struct task_struct *p, int prio)$/;"	f
rt_mutex_slowlock	kernel/rtmutex.c	/^rt_mutex_slowlock(struct rt_mutex *lock, int state,$/;"	f	file:
rt_mutex_slowtrylock	kernel/rtmutex.c	/^rt_mutex_slowtrylock(struct rt_mutex *lock)$/;"	f	file:
rt_mutex_slowunlock	kernel/rtmutex.c	/^rt_mutex_slowunlock(struct rt_mutex *lock)$/;"	f	file:
rt_mutex_start_proxy_lock	kernel/rtmutex.c	/^int rt_mutex_start_proxy_lock(struct rt_mutex *lock,$/;"	f
rt_mutex_timed_fastlock	kernel/rtmutex.c	/^rt_mutex_timed_fastlock(struct rt_mutex *lock, int state,$/;"	f	file:
rt_mutex_timed_lock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_timed_lock);$/;"	v
rt_mutex_timed_lock	kernel/rtmutex.c	/^rt_mutex_timed_lock(struct rt_mutex *lock, struct hrtimer_sleeper *timeout,$/;"	f
rt_mutex_top_waiter	kernel/rtmutex_common.h	/^rt_mutex_top_waiter(struct rt_mutex *lock)$/;"	f
rt_mutex_trylock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_trylock);$/;"	v
rt_mutex_trylock	kernel/rtmutex.c	/^int __sched rt_mutex_trylock(struct rt_mutex *lock)$/;"	f
rt_mutex_unlock	kernel/rtmutex.c	/^EXPORT_SYMBOL_GPL(rt_mutex_unlock);$/;"	v
rt_mutex_unlock	kernel/rtmutex.c	/^void __sched rt_mutex_unlock(struct rt_mutex *lock)$/;"	f
rt_mutex_waiter	kernel/rtmutex_common.h	/^struct rt_mutex_waiter {$/;"	s
rt_nr_boosted	kernel/sched.c	/^	unsigned long rt_nr_boosted;$/;"	m	struct:rt_rq	file:
rt_nr_migratory	kernel/sched.c	/^	unsigned long rt_nr_migratory;$/;"	m	struct:rt_rq	file:
rt_nr_running	kernel/sched.c	/^	unsigned long rt_nr_running;$/;"	m	struct:rt_rq	file:
rt_nr_total	kernel/sched.c	/^	unsigned long rt_nr_total;$/;"	m	struct:rt_rq	file:
rt_overloaded	kernel/sched_rt.c	/^static inline int rt_overloaded(struct rq *rq)$/;"	f	file:
rt_period	kernel/sched.c	/^	ktime_t			rt_period;$/;"	m	struct:rt_bandwidth	file:
rt_period	kernel/sched.c	/^	u64 rt_period;$/;"	m	struct:rt_schedulable_data	file:
rt_period_timer	kernel/sched.c	/^	struct hrtimer		rt_period_timer;$/;"	m	struct:rt_bandwidth	typeref:struct:rt_bandwidth::hrtimer	file:
rt_policy	kernel/sched.c	/^static inline int rt_policy(int policy)$/;"	f	file:
rt_prio_array	kernel/sched.c	/^struct rt_prio_array {$/;"	s	file:
rt_rq	kernel/sched.c	/^	struct rt_rq **rt_rq;$/;"	m	struct:task_group	typeref:struct:task_group::rt_rq	file:
rt_rq	kernel/sched.c	/^struct rt_rq {$/;"	s	file:
rt_rq_of_se	kernel/sched_rt.c	/^static inline struct rt_rq *rt_rq_of_se(struct sched_rt_entity *rt_se)$/;"	f	file:
rt_rq_throttled	kernel/sched_rt.c	/^static inline int rt_rq_throttled(struct rt_rq *rt_rq)$/;"	f	file:
rt_runtime	kernel/sched.c	/^	u64			rt_runtime;$/;"	m	struct:rt_bandwidth	file:
rt_runtime	kernel/sched.c	/^	u64 rt_runtime;$/;"	m	struct:rt_rq	file:
rt_runtime	kernel/sched.c	/^	u64 rt_runtime;$/;"	m	struct:rt_schedulable_data	file:
rt_runtime_lock	kernel/sched.c	/^	raw_spinlock_t		rt_runtime_lock;$/;"	m	struct:rt_bandwidth	file:
rt_runtime_lock	kernel/sched.c	/^	raw_spinlock_t rt_runtime_lock;$/;"	m	struct:rt_rq	file:
rt_sched_class	kernel/sched_rt.c	/^static const struct sched_class rt_sched_class = {$/;"	v	typeref:struct:sched_class	file:
rt_schedulable_data	kernel/sched.c	/^struct rt_schedulable_data {$/;"	s	file:
rt_se	kernel/sched.c	/^	struct sched_rt_entity **rt_se;$/;"	m	struct:task_group	typeref:struct:task_group::sched_rt_entity	file:
rt_se	kernel/sched.c	/^	struct sched_rt_entity *rt_se;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::sched_rt_entity	file:
rt_se_boosted	kernel/sched_rt.c	/^static int rt_se_boosted(struct sched_rt_entity *rt_se)$/;"	f	file:
rt_se_prio	kernel/sched_rt.c	/^static inline int rt_se_prio(struct sched_rt_entity *rt_se)$/;"	f	file:
rt_set_overload	kernel/sched_rt.c	/^static inline void rt_set_overload(struct rq *rq)$/;"	f	file:
rt_task_of	kernel/sched_rt.c	/^static inline struct task_struct *rt_task_of(struct sched_rt_entity *rt_se)$/;"	f	file:
rt_throttled	kernel/sched.c	/^	int rt_throttled;$/;"	m	struct:rt_rq	file:
rt_time	kernel/sched.c	/^	u64 rt_time;$/;"	m	struct:rt_rq	file:
rt_trace_on	kernel/rtmutex-debug.c	/^static int rt_trace_on = 1;$/;"	v	file:
rt_waiter	kernel/futex.c	/^	struct rt_mutex_waiter *rt_waiter;$/;"	m	struct:futex_q	typeref:struct:futex_q::rt_mutex_waiter	file:
rtc_ioctl	fs/compat_ioctl.c	/^static int rtc_ioctl(unsigned fd, unsigned cmd, void __user *argp)$/;"	f	file:
rto_count	kernel/sched.c	/^	atomic_t rto_count;$/;"	m	struct:root_domain	file:
rto_mask	kernel/sched.c	/^	cpumask_var_t rto_mask;$/;"	m	struct:root_domain	file:
rtort_free	kernel/rcutorture.c	/^	struct list_head rtort_free;$/;"	m	struct:rcu_torture	typeref:struct:rcu_torture::list_head	file:
rtort_mbtest	kernel/rcutorture.c	/^	int rtort_mbtest;$/;"	m	struct:rcu_torture	file:
rtort_pipe_count	kernel/rcutorture.c	/^	int rtort_pipe_count;$/;"	m	struct:rcu_torture	file:
rtort_rcu	kernel/rcutorture.c	/^	struct rcu_head rtort_rcu;$/;"	m	struct:rcu_torture	typeref:struct:rcu_torture::rcu_head	file:
rtree_ih	kernel/audit_tree.c	/^static struct inotify_handle *rtree_ih;$/;"	v	typeref:struct:inotify_handle	file:
rtree_inotify_ops	kernel/audit_tree.c	/^static const struct inotify_operations rtree_inotify_ops = {$/;"	v	typeref:struct:inotify_operations	file:
rttest_event	kernel/rtmutex-tester.c	/^static atomic_t rttest_event;$/;"	v	file:
rttest_lock	kernel/rtmutex-tester.c	/^static spinlock_t rttest_lock;$/;"	v	file:
rttest_sysclass	kernel/rtmutex-tester.c	/^static struct sysdev_class rttest_sysclass = {$/;"	v	typeref:struct:sysdev_class	file:
rule	kernel/audit.h	/^	struct audit_krule	rule;$/;"	m	struct:audit_entry	typeref:struct:audit_entry::audit_krule
rules	kernel/audit_tree.c	/^	struct list_head rules;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
rules	kernel/audit_watch.c	/^	struct list_head	rules;	\/* associated rules *\/$/;"	m	struct:audit_watch	typeref:struct:audit_watch::list_head	file:
run	mm/ksm.c	/^KSM_ATTR(run);$/;"	v
run_hrtimer_softirq	kernel/hrtimer.c	/^static void run_hrtimer_softirq(struct softirq_action *h)$/;"	f	file:
run_ksoftirqd	kernel/softirq.c	/^static int run_ksoftirqd(void * __bind_cpu)$/;"	f	file:
run_local_timers	kernel/timer.c	/^void run_local_timers(void)$/;"	f
run_one_entry	kernel/async.c	/^static void run_one_entry(void)$/;"	f	file:
run_posix_cpu_timers	kernel/posix-cpu-timers.c	/^void run_posix_cpu_timers(struct task_struct *tsk)$/;"	f
run_rebalance_domains	kernel/sched.c	/^static void run_rebalance_domains(struct softirq_action *h)$/;"	f	file:
run_show	mm/ksm.c	/^static ssize_t run_show(struct kobject *kobj, struct kobj_attribute *attr,$/;"	f	file:
run_store	mm/ksm.c	/^static ssize_t run_store(struct kobject *kobj, struct kobj_attribute *attr,$/;"	f	file:
run_timer_softirq	kernel/timer.c	/^static void run_timer_softirq(struct softirq_action *h)$/;"	f	file:
run_workqueue	kernel/workqueue.c	/^static void run_workqueue(struct cpu_workqueue_struct *cwq)$/;"	f	file:
running	kernel/async.c	/^	struct list_head *running;$/;"	m	struct:async_entry	typeref:struct:async_entry::list_head	file:
running_helpers	kernel/kmod.c	/^static atomic_t running_helpers = ATOMIC_INIT(0);$/;"	v	file:
running_timer	kernel/timer.c	/^	struct timer_list *running_timer;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::timer_list	file:
runqueue_is_locked	kernel/sched.c	/^int runqueue_is_locked(int cpu)$/;"	f
rw	fs/direct-io.c	/^	int rw;$/;"	m	struct:dio	file:
rw_copy_check_uvector	fs/read_write.c	/^ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector,$/;"	f
rw_long	fs/compat_ioctl.c	/^static int rw_long(unsigned int fd, unsigned int cmd,$/;"	f	file:
rw_verify_area	fs/read_write.c	/^int rw_verify_area(int read_write, struct file *file, loff_t *ppos, size_t count)$/;"	f
rwsem_is_locked	lib/rwsem-spinlock.c	/^EXPORT_SYMBOL(rwsem_is_locked);$/;"	v
rwsem_is_locked	lib/rwsem-spinlock.c	/^int rwsem_is_locked(struct rw_semaphore *sem)$/;"	f
rwsem_waiter	lib/rwsem-spinlock.c	/^struct rwsem_waiter {$/;"	s	file:
s	mm/slub.c	/^	struct kmem_cache *s;$/;"	m	struct:saved_alias	typeref:struct:saved_alias::kmem_cache	file:
s_alloc	kernel/sched.c	/^enum s_alloc {$/;"	g	file:
s_data	kernel/sched.c	/^struct s_data {$/;"	s	file:
s_mem	mm/slab.c	/^	void *s_mem;		\/* including colour offset *\/$/;"	m	struct:slab	file:
s_next	kernel/kallsyms.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next	mm/slab.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next	mm/slub.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_next	mm/vmalloc.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_ops	fs/binfmt_misc.c	/^static const struct super_operations s_ops = {$/;"	v	typeref:struct:super_operations	file:
s_show	kernel/kallsyms.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_show	mm/slab.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_show	mm/slub.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_show	mm/vmalloc.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
s_start	kernel/kallsyms.c	/^static void *s_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
s_start	mm/slab.c	/^static void *s_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
s_start	mm/slub.c	/^static void *s_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
s_start	mm/vmalloc.c	/^static void *s_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
s_stop	kernel/kallsyms.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
s_stop	mm/slab.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
s_stop	mm/slub.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
s_stop	mm/vmalloc.c	/^static void s_stop(struct seq_file *m, void *p)$/;"	f	file:
sa_covered	kernel/sched.c	/^	sa_covered,$/;"	e	enum:s_alloc	file:
sa_domainspan	kernel/sched.c	/^	sa_domainspan,$/;"	e	enum:s_alloc	file:
sa_nodemask	kernel/sched.c	/^	sa_nodemask,$/;"	e	enum:s_alloc	file:
sa_none	kernel/sched.c	/^	sa_none,$/;"	e	enum:s_alloc	file:
sa_notcovered	kernel/sched.c	/^	sa_notcovered,$/;"	e	enum:s_alloc	file:
sa_rootdomain	kernel/sched.c	/^	sa_rootdomain,$/;"	e	enum:s_alloc	file:
sa_sched_group_nodes	kernel/sched.c	/^	sa_sched_group_nodes,$/;"	e	enum:s_alloc	file:
sa_sched_groups	kernel/sched.c	/^	sa_sched_groups = 0,$/;"	e	enum:s_alloc	file:
sa_send_covered	kernel/sched.c	/^	sa_send_covered,$/;"	e	enum:s_alloc	file:
sa_this_core_map	kernel/sched.c	/^	sa_this_core_map,$/;"	e	enum:s_alloc	file:
sa_this_sibling_map	kernel/sched.c	/^	sa_this_sibling_map,$/;"	e	enum:s_alloc	file:
sa_tmpmask	kernel/sched.c	/^	sa_tmpmask,$/;"	e	enum:s_alloc	file:
same_magic	kernel/module.c	/^static inline int same_magic(const char *amagic, const char *bmagic,$/;"	f	file:
same_root	kernel/audit_tree.c	/^	struct list_head same_root;$/;"	m	struct:audit_tree	typeref:struct:audit_tree::list_head	file:
sample_to_timespec	kernel/posix-cpu-timers.c	/^static void sample_to_timespec(const clockid_t which_clock,$/;"	f	file:
sanity_checks	mm/slub.c	/^SLAB_ATTR(sanity_checks);$/;"	v
sanity_checks_show	mm/slub.c	/^static ssize_t sanity_checks_show(struct kmem_cache *s, char *buf)$/;"	f	file:
sanity_checks_store	mm/slub.c	/^static ssize_t sanity_checks_store(struct kmem_cache *s,$/;"	f	file:
save_mount_options	fs/namespace.c	/^EXPORT_SYMBOL(save_mount_options);$/;"	v
save_mount_options	fs/namespace.c	/^void save_mount_options(struct super_block *sb, char *options)$/;"	f
save_stack_trace_tsk	kernel/stacktrace.c	/^save_stack_trace_tsk(struct task_struct *tsk, struct stack_trace *trace)$/;"	f
save_trace	kernel/lockdep.c	/^static int save_trace(struct stack_trace *trace)$/;"	f	file:
saved_alias	mm/slub.c	/^struct saved_alias {$/;"	s	file:
saved_console_loglevel	kernel/printk.c	/^static int saved_console_loglevel = -1;$/;"	v	file:
saved_max_pfn	mm/bootmem.c	/^unsigned long saved_max_pfn;$/;"	v
sb	fs/fs-writeback.c	/^	struct super_block *sb;$/;"	m	struct:wb_writeback_args	typeref:struct:wb_writeback_args::super_block	file:
sb	kernel/cgroup.c	/^	struct super_block *sb;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::super_block	file:
sb_is_blkdev_sb	fs/internal.h	/^static inline int sb_is_blkdev_sb(struct super_block *sb)$/;"	f
sb_len_wr	fs/compat_ioctl.c	/^	unsigned char sb_len_wr;		\/* [o] byte count actually written to sbp *\/$/;"	m	struct:sg_io_hdr32	file:
sb_lock	fs/super.c	/^DEFINE_SPINLOCK(sb_lock);$/;"	v
sb_min_blocksize	fs/block_dev.c	/^EXPORT_SYMBOL(sb_min_blocksize);$/;"	v
sb_min_blocksize	fs/block_dev.c	/^int sb_min_blocksize(struct super_block *sb, int size)$/;"	f
sb_set_blocksize	fs/block_dev.c	/^EXPORT_SYMBOL(sb_set_blocksize);$/;"	v
sb_set_blocksize	fs/block_dev.c	/^int sb_set_blocksize(struct super_block *sb, int size)$/;"	f
sbp	fs/compat_ioctl.c	/^	compat_uptr_t sbp;		\/* [i], [*o] points to sense_buffer memory *\/$/;"	m	struct:sg_io_hdr32	file:
sc	mm/memory-failure.c	715;"	d	file:
sc	mm/memory-failure.c	772;"	d	file:
scale_rt_power	kernel/sched.c	/^unsigned long scale_rt_power(int cpu)$/;"	f
scan_all_zones_unevictable_pages	mm/vmscan.c	/^static void scan_all_zones_unevictable_pages(void)$/;"	f	file:
scan_area_cache	mm/kmemleak.c	/^static struct kmem_cache *scan_area_cache;$/;"	v	typeref:struct:kmem_cache	file:
scan_block	mm/kmemleak.c	/^static void scan_block(void *_start, void *_end,$/;"	f	file:
scan_control	mm/vmscan.c	/^struct scan_control {$/;"	s	file:
scan_for_empty_cpusets	kernel/cpuset.c	/^static void scan_for_empty_cpusets(struct cpuset *root)$/;"	f	file:
scan_get_next_rmap_item	mm/ksm.c	/^static struct rmap_item *scan_get_next_rmap_item(struct page **page)$/;"	f	file:
scan_gray_list	mm/kmemleak.c	/^static void scan_gray_list(void)$/;"	f	file:
scan_lru_pages	mm/memory_hotplug.c	/^int scan_lru_pages(unsigned long start, unsigned long end)$/;"	f
scan_mapping_unevictable_pages	mm/vmscan.c	/^void scan_mapping_unevictable_pages(struct address_space *mapping)$/;"	f
scan_object	mm/kmemleak.c	/^static void scan_object(struct kmemleak_object *object)$/;"	f	file:
scan_should_stop	mm/kmemleak.c	/^static int scan_should_stop(void)$/;"	f	file:
scan_swap_map	mm/swapfile.c	/^static inline unsigned long scan_swap_map(struct swap_info_struct *si,$/;"	f	file:
scan_thread	mm/kmemleak.c	/^static struct task_struct *scan_thread;$/;"	v	typeref:struct:task_struct	file:
scan_unevictable_handler	mm/vmscan.c	/^int scan_unevictable_handler(struct ctl_table *table, int write,$/;"	f
scan_unevictable_pages	mm/vmscan.c	/^unsigned long scan_unevictable_pages;$/;"	v
scan_unevictable_register_node	mm/vmscan.c	/^int scan_unevictable_register_node(struct node *node)$/;"	f
scan_unevictable_unregister_node	mm/vmscan.c	/^void scan_unevictable_unregister_node(struct node *node)$/;"	f
scan_zone_unevictable_pages	mm/vmscan.c	/^static void scan_zone_unevictable_pages(struct zone *zone)$/;"	f	file:
scanarg	fs/binfmt_misc.c	/^static char *scanarg(char *s, char del)$/;"	f	file:
scanning_global_lru	mm/vmscan.c	136;"	d	file:
scanning_global_lru	mm/vmscan.c	138;"	d	file:
sched_avg_period	kernel/sched.c	/^static u64 sched_avg_period(void)$/;"	f	file:
sched_avg_update	kernel/sched.c	/^static void sched_avg_update(struct rq *rq)$/;"	f	file:
sched_class_highest	kernel/sched.c	1845;"	d	file:
sched_clock	kernel/sched_clock.c	/^unsigned long long __attribute__((weak)) sched_clock(void)$/;"	f
sched_clock_cpu	kernel/sched_clock.c	/^u64 sched_clock_cpu(int cpu)$/;"	f
sched_clock_data	kernel/sched_clock.c	/^struct sched_clock_data {$/;"	s	file:
sched_clock_idle_sleep_event	kernel/sched_clock.c	/^EXPORT_SYMBOL_GPL(sched_clock_idle_sleep_event);$/;"	v
sched_clock_idle_sleep_event	kernel/sched_clock.c	/^void sched_clock_idle_sleep_event(void)$/;"	f
sched_clock_idle_wakeup_event	kernel/sched_clock.c	/^EXPORT_SYMBOL_GPL(sched_clock_idle_wakeup_event);$/;"	v
sched_clock_idle_wakeup_event	kernel/sched_clock.c	/^void sched_clock_idle_wakeup_event(u64 delta_ns)$/;"	f
sched_clock_init	kernel/sched_clock.c	/^void sched_clock_init(void)$/;"	f
sched_clock_local	kernel/sched_clock.c	/^static u64 sched_clock_local(struct sched_clock_data *scd)$/;"	f	file:
sched_clock_remote	kernel/sched_clock.c	/^static u64 sched_clock_remote(struct sched_clock_data *scd)$/;"	f	file:
sched_clock_running	kernel/sched_clock.c	/^static __read_mostly int sched_clock_running;$/;"	v	file:
sched_clock_stable	kernel/sched_clock.c	/^__read_mostly int sched_clock_stable;$/;"	v
sched_clock_tick	kernel/sched_clock.c	/^void sched_clock_tick(void)$/;"	f
sched_count	kernel/sched.c	/^	unsigned int sched_count;$/;"	m	struct:rq	file:
sched_create_group	kernel/sched.c	/^struct task_group *sched_create_group(struct task_group *parent)$/;"	f
sched_create_sysfs_power_savings_entries	kernel/sched.c	/^int __init sched_create_sysfs_power_savings_entries(struct sysdev_class *cls)$/;"	f
sched_create_user	kernel/user.c	/^static int sched_create_user(struct user_struct *up) { return 0; }$/;"	f	file:
sched_create_user	kernel/user.c	/^static int sched_create_user(struct user_struct *up)$/;"	f	file:
sched_debug_fops	kernel/sched_debug.c	/^static const struct file_operations sched_debug_fops = {$/;"	v	typeref:struct:file_operations	file:
sched_debug_open	kernel/sched_debug.c	/^static int sched_debug_open(struct inode *inode, struct file *filp)$/;"	f	file:
sched_debug_show	kernel/sched_debug.c	/^static int sched_debug_show(struct seq_file *m, void *v)$/;"	f	file:
sched_destroy_group	kernel/sched.c	/^void sched_destroy_group(struct task_group *tg)$/;"	f
sched_destroy_user	kernel/user.c	/^static void sched_destroy_user(struct user_struct *up) { }$/;"	f	file:
sched_destroy_user	kernel/user.c	/^static void sched_destroy_user(struct user_struct *up)$/;"	f	file:
sched_domain_debug	kernel/sched.c	/^static void sched_domain_debug(struct sched_domain *sd, int cpu)$/;"	f	file:
sched_domain_debug	kernel/sched.c	7948;"	d	file:
sched_domain_debug_enabled	kernel/sched.c	/^static __read_mostly int sched_domain_debug_enabled;$/;"	v	file:
sched_domain_debug_one	kernel/sched.c	/^static int sched_domain_debug_one(struct sched_domain *sd, int cpu, int level,$/;"	f	file:
sched_domain_debug_setup	kernel/sched.c	/^static int __init sched_domain_debug_setup(char *str)$/;"	f	file:
sched_domain_node_span	kernel/sched.c	/^static void sched_domain_node_span(int node, struct cpumask *span)$/;"	f	file:
sched_exec	kernel/sched.c	/^void sched_exec(void)$/;"	f
sched_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops sched_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
sched_feat	kernel/sched.c	804;"	d	file:
sched_feat_fops	kernel/sched.c	/^static const struct file_operations sched_feat_fops = {$/;"	v	typeref:struct:file_operations	file:
sched_feat_names	kernel/sched.c	/^static __read_mostly char *sched_feat_names[] = {$/;"	v	file:
sched_feat_open	kernel/sched.c	/^static int sched_feat_open(struct inode *inode, struct file *filp)$/;"	f	file:
sched_feat_show	kernel/sched.c	/^static int sched_feat_show(struct seq_file *m, void *v)$/;"	f	file:
sched_feat_write	kernel/sched.c	/^sched_feat_write(struct file *filp, const char __user *ubuf,$/;"	f	file:
sched_fork	kernel/sched.c	/^void sched_fork(struct task_struct *p, int clone_flags)$/;"	f
sched_getaffinity	kernel/sched.c	/^long sched_getaffinity(pid_t pid, struct cpumask *mask)$/;"	f
sched_goidle	kernel/sched.c	/^	unsigned int sched_goidle;$/;"	m	struct:rq	file:
sched_group_nodes	kernel/sched.c	/^	struct sched_group	**sched_group_nodes;$/;"	m	struct:s_data	typeref:struct:s_data::sched_group	file:
sched_group_nodes_bycpu	kernel/sched.c	/^static struct sched_group ***sched_group_nodes_bycpu;$/;"	v	typeref:struct:sched_group	file:
sched_group_rt_period	kernel/sched.c	/^long sched_group_rt_period(struct task_group *tg)$/;"	f
sched_group_rt_runtime	kernel/sched.c	/^long sched_group_rt_runtime(struct task_group *tg)$/;"	f
sched_group_set_rt_period	kernel/sched.c	/^int sched_group_set_rt_period(struct task_group *tg, long rt_period_us)$/;"	f
sched_group_set_rt_runtime	kernel/sched.c	/^int sched_group_set_rt_runtime(struct task_group *tg, long rt_runtime_us)$/;"	f
sched_group_set_shares	kernel/sched.c	/^int sched_group_set_shares(struct task_group *tg, unsigned long shares)$/;"	f
sched_group_shares	kernel/sched.c	/^unsigned long sched_group_shares(struct task_group *tg)$/;"	f
sched_idle_next	kernel/sched.c	/^void sched_idle_next(void)$/;"	f
sched_info_arrive	kernel/sched_stats.h	/^static void sched_info_arrive(struct task_struct *t)$/;"	f
sched_info_depart	kernel/sched_stats.h	/^static inline void sched_info_depart(struct task_struct *t)$/;"	f
sched_info_dequeued	kernel/sched_stats.h	/^static inline void sched_info_dequeued(struct task_struct *t)$/;"	f
sched_info_dequeued	kernel/sched_stats.h	275;"	d
sched_info_queued	kernel/sched_stats.h	/^static inline void sched_info_queued(struct task_struct *t)$/;"	f
sched_info_queued	kernel/sched_stats.h	273;"	d
sched_info_reset_dequeued	kernel/sched_stats.h	/^static inline void sched_info_reset_dequeued(struct task_struct *t)$/;"	f
sched_info_reset_dequeued	kernel/sched_stats.h	274;"	d
sched_info_switch	kernel/sched_stats.h	/^sched_info_switch(struct task_struct *prev, struct task_struct *next)$/;"	f
sched_info_switch	kernel/sched_stats.h	276;"	d
sched_init	kernel/sched.c	/^void __init sched_init(void)$/;"	f
sched_init_debug	kernel/sched.c	/^late_initcall(sched_init_debug);$/;"	v
sched_init_debug	kernel/sched.c	/^static __init int sched_init_debug(void)$/;"	f	file:
sched_init_granularity	kernel/sched.c	/^static inline void sched_init_granularity(void)$/;"	f	file:
sched_init_smp	kernel/sched.c	/^void __init sched_init_smp(void)$/;"	f
sched_mc_power_savings	kernel/sched.c	/^int sched_smt_power_savings = 0, sched_mc_power_savings = 0;$/;"	v
sched_mc_power_savings_show	kernel/sched.c	/^static ssize_t sched_mc_power_savings_show(struct sysdev_class *class,$/;"	f	file:
sched_mc_power_savings_store	kernel/sched.c	/^static ssize_t sched_mc_power_savings_store(struct sysdev_class *class,$/;"	f	file:
sched_move_task	kernel/sched.c	/^void sched_move_task(struct task_struct *tsk)$/;"	f
sched_nr_latency	kernel/sched_fair.c	/^static unsigned int sched_nr_latency = 5;$/;"	v	file:
sched_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops sched_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
sched_power_savings_store	kernel/sched.c	/^static ssize_t sched_power_savings_store(const char *buf, size_t count, int smt)$/;"	f	file:
sched_proc_update_handler	kernel/sched_fair.c	/^int sched_proc_update_handler(struct ctl_table *table, int write,$/;"	f
sched_rt_avg_update	kernel/sched.c	/^static void sched_rt_avg_update(struct rq *rq, u64 rt_delta)$/;"	f	file:
sched_rt_bandwidth	kernel/sched_rt.c	/^static inline struct rt_bandwidth *sched_rt_bandwidth(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_can_attach	kernel/sched.c	/^int sched_rt_can_attach(struct task_group *tg, struct task_struct *tsk)$/;"	f
sched_rt_global_constraints	kernel/sched.c	/^static int sched_rt_global_constraints(void)$/;"	f	file:
sched_rt_handler	kernel/sched.c	/^int sched_rt_handler(struct ctl_table *table, int write,$/;"	f
sched_rt_period	kernel/sched_rt.c	/^static inline u64 sched_rt_period(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_period_mask	kernel/sched_rt.c	/^static inline const struct cpumask *sched_rt_period_mask(void)$/;"	f	file:
sched_rt_period_rt_rq	kernel/sched_rt.c	/^struct rt_rq *sched_rt_period_rt_rq(struct rt_bandwidth *rt_b, int cpu)$/;"	f	file:
sched_rt_period_timer	kernel/sched.c	/^static enum hrtimer_restart sched_rt_period_timer(struct hrtimer *timer)$/;"	f	file:
sched_rt_rq_dequeue	kernel/sched_rt.c	/^static inline void sched_rt_rq_dequeue(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_rq_dequeue	kernel/sched_rt.c	/^static void sched_rt_rq_dequeue(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_rq_enqueue	kernel/sched_rt.c	/^static inline void sched_rt_rq_enqueue(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_rq_enqueue	kernel/sched_rt.c	/^static void sched_rt_rq_enqueue(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_runtime	kernel/sched_rt.c	/^static inline u64 sched_rt_runtime(struct rt_rq *rt_rq)$/;"	f	file:
sched_rt_runtime_exceeded	kernel/sched_rt.c	/^static int sched_rt_runtime_exceeded(struct rt_rq *rt_rq)$/;"	f	file:
sched_setaffinity	kernel/sched.c	/^long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)$/;"	f
sched_setscheduler	kernel/sched.c	/^EXPORT_SYMBOL_GPL(sched_setscheduler);$/;"	v
sched_setscheduler	kernel/sched.c	/^int sched_setscheduler(struct task_struct *p, int policy,$/;"	f
sched_setscheduler_nocheck	kernel/sched.c	/^int sched_setscheduler_nocheck(struct task_struct *p, int policy,$/;"	f
sched_show_task	kernel/sched.c	/^void sched_show_task(struct task_struct *p)$/;"	f
sched_slice	kernel/sched_fair.c	/^static u64 sched_slice(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
sched_smt_power_savings	kernel/sched.c	/^int sched_smt_power_savings = 0, sched_mc_power_savings = 0;$/;"	v
sched_smt_power_savings_show	kernel/sched.c	/^static ssize_t sched_smt_power_savings_show(struct sysdev_class *dev,$/;"	f	file:
sched_smt_power_savings_store	kernel/sched.c	/^static ssize_t sched_smt_power_savings_store(struct sysdev_class *dev,$/;"	f	file:
sched_switch	kernel/sched.c	/^	unsigned int sched_switch;$/;"	m	struct:rq	file:
sched_switch_user	kernel/cred-internals.h	/^static inline void sched_switch_user(struct task_struct *p)$/;"	f
sched_sync_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops sched_sync_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
sched_torture_read_lock	kernel/rcutorture.c	/^static int sched_torture_read_lock(void)$/;"	f	file:
sched_torture_read_unlock	kernel/rcutorture.c	/^static void sched_torture_read_unlock(int idx)$/;"	f	file:
sched_torture_synchronize	kernel/rcutorture.c	/^static void sched_torture_synchronize(void)$/;"	f	file:
sched_tunable_scaling_names	kernel/sched_debug.c	/^static const char *sched_tunable_scaling_names[] = {$/;"	v	file:
sched_vslice	kernel/sched_fair.c	/^static u64 sched_vslice(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
schedstat_add	kernel/sched_stats.h	136;"	d
schedstat_add	kernel/sched_stats.h	149;"	d
schedstat_inc	kernel/sched_stats.h	135;"	d
schedstat_inc	kernel/sched_stats.h	148;"	d
schedstat_open	kernel/sched_stats.h	/^static int schedstat_open(struct inode *inode, struct file *file)$/;"	f
schedstat_set	kernel/sched_stats.h	137;"	d
schedstat_set	kernel/sched_stats.h	150;"	d
schedule	kernel/sched.c	/^EXPORT_SYMBOL(schedule);$/;"	v
schedule	kernel/sched.c	/^asmlinkage void __sched schedule(void)$/;"	f
schedule_debug	kernel/sched.c	/^static inline void schedule_debug(struct task_struct *prev)$/;"	f	file:
schedule_delayed_work	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_delayed_work);$/;"	v
schedule_delayed_work	kernel/workqueue.c	/^int schedule_delayed_work(struct delayed_work *dwork,$/;"	f
schedule_delayed_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_delayed_work_on);$/;"	v
schedule_delayed_work_on	kernel/workqueue.c	/^int schedule_delayed_work_on(int cpu,$/;"	f
schedule_hrtimeout	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(schedule_hrtimeout);$/;"	v
schedule_hrtimeout	kernel/hrtimer.c	/^int __sched schedule_hrtimeout(ktime_t *expires,$/;"	f
schedule_hrtimeout_range	kernel/hrtimer.c	/^EXPORT_SYMBOL_GPL(schedule_hrtimeout_range);$/;"	v
schedule_hrtimeout_range	kernel/hrtimer.c	/^int __sched schedule_hrtimeout_range(ktime_t *expires, unsigned long delta,$/;"	f
schedule_next_timer	kernel/posix-timers.c	/^static void schedule_next_timer(struct k_itimer *timr)$/;"	f	file:
schedule_on_each_cpu	kernel/workqueue.c	/^int schedule_on_each_cpu(work_func_t func)$/;"	f
schedule_rt_mutex	kernel/rtmutex_common.h	27;"	d
schedule_rt_mutex	kernel/rtmutex_common.h	36;"	d
schedule_rt_mutex_test	kernel/rtmutex-tester.c	/^void schedule_rt_mutex_test(struct rt_mutex *mutex)$/;"	f
schedule_timeout	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout);$/;"	v
schedule_timeout	kernel/timer.c	/^signed long __sched schedule_timeout(signed long timeout)$/;"	f
schedule_timeout_interruptible	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout_interruptible);$/;"	v
schedule_timeout_interruptible	kernel/timer.c	/^signed long __sched schedule_timeout_interruptible(signed long timeout)$/;"	f
schedule_timeout_killable	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout_killable);$/;"	v
schedule_timeout_killable	kernel/timer.c	/^signed long __sched schedule_timeout_killable(signed long timeout)$/;"	f
schedule_timeout_uninterruptible	kernel/timer.c	/^EXPORT_SYMBOL(schedule_timeout_uninterruptible);$/;"	v
schedule_timeout_uninterruptible	kernel/timer.c	/^signed long __sched schedule_timeout_uninterruptible(signed long timeout)$/;"	f
schedule_work	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_work);$/;"	v
schedule_work	kernel/workqueue.c	/^int schedule_work(struct work_struct *work)$/;"	f
schedule_work_on	kernel/workqueue.c	/^EXPORT_SYMBOL(schedule_work_on);$/;"	v
schedule_work_on	kernel/workqueue.c	/^int schedule_work_on(int cpu, struct work_struct *work)$/;"	f
scheduler_running	kernel/sched.c	/^static __read_mostly int scheduler_running;$/;"	v	file:
scheduler_tick	kernel/sched.c	/^void scheduler_tick(void)$/;"	f
script_format	fs/binfmt_script.c	/^static struct linux_binfmt script_format = {$/;"	v	typeref:struct:linux_binfmt	file:
sd	kernel/sched.c	/^	struct sched_domain *sd;$/;"	m	struct:rq	typeref:struct:rq::sched_domain	file:
sd	kernel/sched.c	/^	struct sched_domain sd;$/;"	m	struct:static_sched_domain	typeref:struct:static_sched_domain::sched_domain	file:
sd_allnodes	kernel/sched.c	/^	int			sd_allnodes;$/;"	m	struct:s_data	file:
sd_alloc_ctl_cpu_table	kernel/sched.c	/^static ctl_table *sd_alloc_ctl_cpu_table(int cpu)$/;"	f	file:
sd_alloc_ctl_domain_table	kernel/sched.c	/^sd_alloc_ctl_domain_table(struct sched_domain *sd)$/;"	f	file:
sd_alloc_ctl_entry	kernel/sched.c	/^static struct ctl_table *sd_alloc_ctl_entry(int n)$/;"	f	file:
sd_ctl_dir	kernel/sched.c	/^static struct ctl_table sd_ctl_dir[] = {$/;"	v	typeref:struct:ctl_table	file:
sd_ctl_root	kernel/sched.c	/^static struct ctl_table sd_ctl_root[] = {$/;"	v	typeref:struct:ctl_table	file:
sd_degenerate	kernel/sched.c	/^static int sd_degenerate(struct sched_domain *sd)$/;"	f	file:
sd_free_ctl_entry	kernel/sched.c	/^static void sd_free_ctl_entry(struct ctl_table **tablep)$/;"	f	file:
sd_lb_stats	kernel/sched.c	/^struct sd_lb_stats {$/;"	s	file:
sd_parent_degenerate	kernel/sched.c	/^sd_parent_degenerate(struct sched_domain *sd, struct sched_domain *parent)$/;"	f	file:
sd_sysctl_header	kernel/sched.c	/^static struct ctl_table_header *sd_sysctl_header;$/;"	v	typeref:struct:ctl_table_header	file:
sdev	fs/block_dev.c	/^	struct kobject *sdev;	\/* e.g. "\/block\/sda" *\/$/;"	m	struct:bd_holder	typeref:struct:bd_holder::kobject	file:
sdir	fs/block_dev.c	/^	struct kobject *sdir;	\/* holder object, e.g. "\/block\/dm-0\/slaves" *\/$/;"	m	struct:bd_holder	typeref:struct:bd_holder::kobject	file:
se	kernel/sched.c	/^	struct sched_entity **se;$/;"	m	struct:task_group	typeref:struct:task_group::sched_entity	file:
search_binary_handler	fs/exec.c	/^EXPORT_SYMBOL(search_binary_handler);$/;"	v
search_binary_handler	fs/exec.c	/^int search_binary_handler(struct linux_binprm *bprm,struct pt_regs *regs)$/;"	f
search_exception_tables	kernel/extable.c	/^const struct exception_table_entry *search_exception_tables(unsigned long addr)$/;"	f
search_module_extables	kernel/module.c	/^const struct exception_table_entry *search_module_extables(unsigned long addr)$/;"	f
sect_empty	kernel/module.c	/^static inline bool sect_empty(const Elf_Shdr *sect)$/;"	f	file:
section_addr	kernel/module.c	/^static void *section_addr(Elf_Ehdr *hdr, Elf_Shdr *shdrs,$/;"	f	file:
section_objs	kernel/module.c	/^static void *section_objs(Elf_Ehdr *hdr,$/;"	f	file:
seen	fs/fs-writeback.c	/^	unsigned long seen;		\/* threads that have seen this work *\/$/;"	m	struct:bdi_work	file:
select_bad_process	mm/oom_kill.c	/^static struct task_struct *select_bad_process(unsigned long *ppoints,$/;"	f	file:
select_fallback_rq	kernel/sched.c	/^static int select_fallback_rq(int cpu, struct task_struct *p)$/;"	f	file:
select_idle_sibling	kernel/sched_fair.c	/^select_idle_sibling(struct task_struct *p, struct sched_domain *sd, int target)$/;"	f	file:
select_nohz_load_balancer	kernel/sched.c	/^int select_nohz_load_balancer(int stop_tick)$/;"	f
select_parent	fs/dcache.c	/^static int select_parent(struct dentry * parent)$/;"	f	file:
select_submounts	fs/namespace.c	/^static int select_submounts(struct vfsmount *parent, struct list_head *graveyard)$/;"	f	file:
select_task_rq	kernel/sched.c	/^int select_task_rq(struct task_struct *p, int sd_flags, int wake_flags)$/;"	f	file:
select_task_rq_fair	kernel/sched_fair.c	/^static int select_task_rq_fair(struct task_struct *p, int sd_flag, int wake_flags)$/;"	f	file:
select_task_rq_idle	kernel/sched_idletask.c	/^static int select_task_rq_idle(struct task_struct *p, int sd_flag, int flags)$/;"	f	file:
select_task_rq_rt	kernel/sched_rt.c	/^static int select_task_rq_rt(struct task_struct *p, int sd_flag, int flags)$/;"	f	file:
selected_console	kernel/printk.c	/^static int selected_console = -1;$/;"	v	file:
sem	kernel/taskstats.c	/^	struct rw_semaphore sem;$/;"	m	struct:listener_list	typeref:struct:listener_list::rw_semaphore	file:
semaphore_waiter	kernel/semaphore.c	/^struct semaphore_waiter {$/;"	s	file:
send_covered	kernel/sched.c	/^	cpumask_var_t		send_covered;$/;"	m	struct:s_data	file:
send_cpu_listeners	kernel/taskstats.c	/^static void send_cpu_listeners(struct sk_buff *skb,$/;"	f	file:
send_remote_softirq	kernel/softirq.c	/^EXPORT_SYMBOL(send_remote_softirq);$/;"	v
send_remote_softirq	kernel/softirq.c	/^void send_remote_softirq(struct call_single_data *cp, int cpu, int softirq)$/;"	f
send_reply	kernel/taskstats.c	/^static int send_reply(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
send_sig	kernel/signal.c	/^EXPORT_SYMBOL(send_sig);$/;"	v
send_sig	kernel/signal.c	/^send_sig(int sig, struct task_struct *p, int priv)$/;"	f
send_sig_info	kernel/signal.c	/^EXPORT_SYMBOL(send_sig_info);$/;"	v
send_sig_info	kernel/signal.c	/^send_sig_info(int sig, struct siginfo *info, struct task_struct *p)$/;"	f
send_sigio	fs/fcntl.c	/^void send_sigio(struct fown_struct *fown, int fd, int band)$/;"	f
send_sigio_to_task	fs/fcntl.c	/^static void send_sigio_to_task(struct task_struct *p,$/;"	f	file:
send_signal	kernel/signal.c	/^static int send_signal(int sig, struct siginfo *info, struct task_struct *t,$/;"	f	file:
send_sigqueue	kernel/signal.c	/^int send_sigqueue(struct sigqueue *q, struct task_struct *t, int group)$/;"	f
send_sigurg	fs/fcntl.c	/^int send_sigurg(struct fown_struct *fown)$/;"	f
send_sigurg_to_task	fs/fcntl.c	/^static void send_sigurg_to_task(struct task_struct *p,$/;"	f	file:
separate_irq_context	kernel/lockdep.c	/^static inline int separate_irq_context(struct task_struct *curr,$/;"	f	file:
separate_irq_context	kernel/lockdep.c	/^static int separate_irq_context(struct task_struct *curr,$/;"	f	file:
seq_bitmap	fs/seq_file.c	/^EXPORT_SYMBOL(seq_bitmap);$/;"	v
seq_bitmap	fs/seq_file.c	/^int seq_bitmap(struct seq_file *m, const unsigned long *bits,$/;"	f
seq_bitmap_list	fs/seq_file.c	/^EXPORT_SYMBOL(seq_bitmap_list);$/;"	v
seq_bitmap_list	fs/seq_file.c	/^int seq_bitmap_list(struct seq_file *m, const unsigned long *bits,$/;"	f
seq_dentry	fs/seq_file.c	/^int seq_dentry(struct seq_file *m, struct dentry *dentry, char *esc)$/;"	f
seq_escape	fs/seq_file.c	/^EXPORT_SYMBOL(seq_escape);$/;"	v
seq_escape	fs/seq_file.c	/^int seq_escape(struct seq_file *m, const char *s, const char *esc)$/;"	f
seq_header	kernel/lockdep_proc.c	/^static void seq_header(struct seq_file *m)$/;"	f	file:
seq_line	kernel/lockdep_proc.c	/^static void seq_line(struct seq_file *m, char c, int offset, int length)$/;"	f	file:
seq_list_next	fs/seq_file.c	/^EXPORT_SYMBOL(seq_list_next);$/;"	v
seq_list_next	fs/seq_file.c	/^struct list_head *seq_list_next(void *v, struct list_head *head, loff_t *ppos)$/;"	f
seq_list_start	fs/seq_file.c	/^EXPORT_SYMBOL(seq_list_start);$/;"	v
seq_list_start	fs/seq_file.c	/^struct list_head *seq_list_start(struct list_head *head, loff_t pos)$/;"	f
seq_list_start_head	fs/seq_file.c	/^EXPORT_SYMBOL(seq_list_start_head);$/;"	v
seq_list_start_head	fs/seq_file.c	/^struct list_head *seq_list_start_head(struct list_head *head, loff_t pos)$/;"	f
seq_lock_time	kernel/lockdep_proc.c	/^static void seq_lock_time(struct seq_file *m, struct lock_time *lt)$/;"	f	file:
seq_lseek	fs/seq_file.c	/^EXPORT_SYMBOL(seq_lseek);$/;"	v
seq_lseek	fs/seq_file.c	/^loff_t seq_lseek(struct file *file, loff_t offset, int origin)$/;"	f
seq_open	fs/seq_file.c	/^EXPORT_SYMBOL(seq_open);$/;"	v
seq_open	fs/seq_file.c	/^int seq_open(struct file *file, const struct seq_operations *op)$/;"	f
seq_open_private	fs/seq_file.c	/^EXPORT_SYMBOL(seq_open_private);$/;"	v
seq_open_private	fs/seq_file.c	/^int seq_open_private(struct file *filp, const struct seq_operations *ops,$/;"	f
seq_path	fs/seq_file.c	/^EXPORT_SYMBOL(seq_path);$/;"	v
seq_path	fs/seq_file.c	/^int seq_path(struct seq_file *m, struct path *path, char *esc)$/;"	f
seq_path_root	fs/seq_file.c	/^int seq_path_root(struct seq_file *m, struct path *path, struct path *root,$/;"	f
seq_printf	fs/seq_file.c	/^EXPORT_SYMBOL(seq_printf);$/;"	v
seq_printf	fs/seq_file.c	/^int seq_printf(struct seq_file *m, const char *f, ...)$/;"	f
seq_putc	fs/seq_file.c	/^EXPORT_SYMBOL(seq_putc);$/;"	v
seq_putc	fs/seq_file.c	/^int seq_putc(struct seq_file *m, char c)$/;"	f
seq_puts	fs/seq_file.c	/^EXPORT_SYMBOL(seq_puts);$/;"	v
seq_puts	fs/seq_file.c	/^int seq_puts(struct seq_file *m, const char *s)$/;"	f
seq_read	fs/seq_file.c	/^EXPORT_SYMBOL(seq_read);$/;"	v
seq_read	fs/seq_file.c	/^ssize_t seq_read(struct file *file, char __user *buf, size_t size, loff_t *ppos)$/;"	f
seq_release	fs/seq_file.c	/^EXPORT_SYMBOL(seq_release);$/;"	v
seq_release	fs/seq_file.c	/^int seq_release(struct inode *inode, struct file *file)$/;"	f
seq_release_private	fs/seq_file.c	/^EXPORT_SYMBOL(seq_release_private);$/;"	v
seq_release_private	fs/seq_file.c	/^int seq_release_private(struct inode *inode, struct file *file)$/;"	f
seq_stats	kernel/lockdep_proc.c	/^static void seq_stats(struct seq_file *m, struct lock_stat_data *data)$/;"	f	file:
seq_time	kernel/lockdep_proc.c	/^static void seq_time(struct seq_file *m, s64 time)$/;"	f	file:
seq_write	fs/seq_file.c	/^EXPORT_SYMBOL(seq_write);$/;"	v
seq_write	fs/seq_file.c	/^int seq_write(struct seq_file *seq, const void *data, size_t len)$/;"	f
seqnr	mm/ksm.c	/^	unsigned long seqnr;$/;"	m	struct:ksm_scan	file:
serial	kernel/auditsc.c	/^	unsigned int	    serial;     \/* serial number for record *\/$/;"	m	struct:audit_context	file:
serial_struct32	fs/compat_ioctl.c	/^struct serial_struct32 {$/;"	s	file:
serial_struct_ioctl	fs/compat_ioctl.c	/^static int serial_struct_ioctl(unsigned fd, unsigned cmd,$/;"	f	file:
session_id	kernel/auditsc.c	/^static atomic_t session_id = ATOMIC_INIT(0);$/;"	v	file:
session_of_pgrp	kernel/exit.c	/^struct pid *session_of_pgrp(struct pid *pgrp)$/;"	f
set	fs/libfs.c	/^	int (*set)(void *, u64);$/;"	m	struct:simple_attr	file:
set_anon_super	fs/super.c	/^EXPORT_SYMBOL(set_anon_super);$/;"	v
set_anon_super	fs/super.c	/^int set_anon_super(struct super_block *s, void *data)$/;"	f
set_bdev_super	fs/super.c	/^static int set_bdev_super(struct super_block *s, void *data)$/;"	f	file:
set_bdi_congested	mm/backing-dev.c	/^EXPORT_SYMBOL(set_bdi_congested);$/;"	v
set_bdi_congested	mm/backing-dev.c	/^void set_bdi_congested(struct backing_dev_info *bdi, int sync)$/;"	f
set_bh_page	fs/buffer.c	/^EXPORT_SYMBOL(set_bh_page);$/;"	v
set_bh_page	fs/buffer.c	/^void set_bh_page(struct buffer_head *bh,$/;"	f
set_binfmt	fs/exec.c	/^EXPORT_SYMBOL(set_binfmt);$/;"	v
set_binfmt	fs/exec.c	/^void set_binfmt(struct linux_binfmt *new)$/;"	f
set_blocksize	fs/block_dev.c	/^EXPORT_SYMBOL(set_blocksize);$/;"	v
set_blocksize	fs/block_dev.c	/^int set_blocksize(struct block_device *bdev, int size)$/;"	f
set_brk	fs/binfmt_aout.c	/^static int set_brk(unsigned long start, unsigned long end)$/;"	f	file:
set_brk	fs/binfmt_elf.c	/^static int set_brk(unsigned long start, unsigned long end)$/;"	f	file:
set_buf	fs/libfs.c	/^	char set_buf[24];$/;"	m	struct:simple_attr	file:
set_close_on_exec	fs/fcntl.c	/^void set_close_on_exec(unsigned int fd, int flag)$/;"	f
set_cpu_active	kernel/cpu.c	/^void set_cpu_active(unsigned int cpu, bool active)$/;"	f
set_cpu_itimer	kernel/itimer.c	/^static void set_cpu_itimer(struct task_struct *tsk, unsigned int clock_id,$/;"	f	file:
set_cpu_online	kernel/cpu.c	/^void set_cpu_online(unsigned int cpu, bool online)$/;"	f
set_cpu_possible	kernel/cpu.c	/^void set_cpu_possible(unsigned int cpu, bool possible)$/;"	f
set_cpu_present	kernel/cpu.c	/^void set_cpu_present(unsigned int cpu, bool present)$/;"	f
set_cpus_allowed_ptr	kernel/sched.c	/^EXPORT_SYMBOL_GPL(set_cpus_allowed_ptr);$/;"	v
set_cpus_allowed_ptr	kernel/sched.c	/^int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask)$/;"	f
set_cpus_allowed_rt	kernel/sched_rt.c	/^static void set_cpus_allowed_rt(struct task_struct *p,$/;"	f	file:
set_create_files_as	kernel/cred.c	/^EXPORT_SYMBOL(set_create_files_as);$/;"	v
set_create_files_as	kernel/cred.c	/^int set_create_files_as(struct cred *new, struct inode *inode)$/;"	f
set_cred_subscribers	kernel/cred.c	/^static inline void set_cred_subscribers(struct cred *cred, int n)$/;"	f	file:
set_curr_task	kernel/sched.c	/^void set_curr_task(int cpu, struct task_struct *p)$/;"	f
set_curr_task_fair	kernel/sched_fair.c	/^static void set_curr_task_fair(struct rq *rq)$/;"	f	file:
set_curr_task_idle	kernel/sched_idletask.c	/^static void set_curr_task_idle(struct rq *rq)$/;"	f	file:
set_curr_task_rt	kernel/sched_rt.c	/^static void set_curr_task_rt(struct rq *rq)$/;"	f	file:
set_current_groups	kernel/groups.c	/^EXPORT_SYMBOL(set_current_groups);$/;"	v
set_current_groups	kernel/groups.c	/^int set_current_groups(struct group_info *group_info)$/;"	f
set_dentry_child_flags	fs/notify/inotify/inotify.c	/^static void set_dentry_child_flags(struct inode *inode, int watched)$/;"	f	file:
set_dhash_entries	fs/dcache.c	/^static int __init set_dhash_entries(char *str)$/;"	f	file:
set_dma_reserve	mm/page_alloc.c	/^void __init set_dma_reserve(unsigned long new_dma_reserve)$/;"	f
set_domain_attribute	kernel/sched.c	/^static void set_domain_attribute(struct sched_domain *sd,$/;"	f	file:
set_dumpable	fs/exec.c	/^void set_dumpable(struct mm_struct *mm, int value)$/;"	f
set_fail	kernel/sysctl_check.c	/^static void set_fail(const char **fail, struct ctl_table *table, const char *str)$/;"	f	file:
set_freepointer	mm/slub.c	/^static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)$/;"	f	file:
set_fs_pwd	fs/fs_struct.c	/^void set_fs_pwd(struct fs_struct *fs, struct path *path)$/;"	f
set_fs_root	fs/fs_struct.c	/^void set_fs_root(struct fs_struct *fs, struct path *path)$/;"	f
set_groups	kernel/groups.c	/^EXPORT_SYMBOL(set_groups);$/;"	v
set_groups	kernel/groups.c	/^int set_groups(struct cred *new, struct group_info *group_info)$/;"	f
set_hashdist	mm/page_alloc.c	/^static int __init set_hashdist(char *str)$/;"	f	file:
set_huge_ptep_writable	mm/hugetlb.c	/^static void set_huge_ptep_writable(struct vm_area_struct *vma,$/;"	f	file:
set_ihash_entries	fs/inode.c	/^static int __init set_ihash_entries(char *str)$/;"	f	file:
set_kprobe_instance	kernel/kprobes.c	/^static inline void set_kprobe_instance(struct kprobe *kp)$/;"	f	file:
set_last_buddy	kernel/sched_fair.c	/^static void set_last_buddy(struct sched_entity *se)$/;"	f	file:
set_license	kernel/module.c	/^static void set_license(struct module *mod, const char *license)$/;"	f	file:
set_load_weight	kernel/sched.c	/^static void set_load_weight(struct task_struct *p)$/;"	f	file:
set_max_huge_pages	mm/hugetlb.c	/^static unsigned long set_max_huge_pages(struct hstate *h, unsigned long count,$/;"	f	file:
set_migratetype_isolate	mm/page_alloc.c	/^int set_migratetype_isolate(struct page *page)$/;"	f
set_min_partial	mm/slub.c	/^static void set_min_partial(struct kmem_cache *s, unsigned long min)$/;"	f	file:
set_mminit_loglevel	mm/mm_init.c	/^static __init int set_mminit_loglevel(char *str)$/;"	f	file:
set_mnt_shared	fs/pnode.h	/^static inline void set_mnt_shared(struct vfsmount *mnt)$/;"	f
set_next_buddy	kernel/sched_fair.c	/^static void set_next_buddy(struct sched_entity *se)$/;"	f	file:
set_next_entity	kernel/sched_fair.c	/^set_next_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
set_normalized_timespec	kernel/time.c	/^EXPORT_SYMBOL(set_normalized_timespec);$/;"	v
set_normalized_timespec	kernel/time.c	/^void set_normalized_timespec(struct timespec *ts, time_t sec, s64 nsec)$/;"	f
set_one_prio	kernel/sys.c	/^static int set_one_prio(struct task_struct *p, int niceval, int error)$/;"	f	file:
set_page_address	mm/highmem.c	/^void set_page_address(struct page *page, void *virtual)$/;"	f
set_page_count	mm/internal.h	/^static inline void set_page_count(struct page *page, int v)$/;"	f
set_page_dirty	mm/page-writeback.c	/^EXPORT_SYMBOL(set_page_dirty);$/;"	v
set_page_dirty	mm/page-writeback.c	/^int set_page_dirty(struct page *page)$/;"	f
set_page_dirty_balance	mm/page-writeback.c	/^void set_page_dirty_balance(struct page *page, int page_mkwrite)$/;"	f
set_page_dirty_lock	mm/page-writeback.c	/^EXPORT_SYMBOL(set_page_dirty_lock);$/;"	v
set_page_dirty_lock	mm/page-writeback.c	/^int set_page_dirty_lock(struct page *page)$/;"	f
set_page_order	mm/page_alloc.c	/^static inline void set_page_order(struct page *page, int order)$/;"	f	file:
set_page_poison	mm/debug-pagealloc.c	/^static inline void set_page_poison(struct page *page)$/;"	f	file:
set_page_refcounted	mm/internal.h	/^static inline void set_page_refcounted(struct page *page)$/;"	f
set_pageblock_flags_group	mm/page_alloc.c	/^void set_pageblock_flags_group(struct page *page, unsigned long flags,$/;"	f
set_pageblock_migratetype	mm/page_alloc.c	/^static void set_pageblock_migratetype(struct page *page, int migratetype)$/;"	f	file:
set_pageblock_order	mm/page_alloc.c	/^static inline void __init set_pageblock_order(unsigned int order)$/;"	f	file:
set_pageblock_order	mm/page_alloc.c	3776;"	d	file:
set_process_cpu_timer	kernel/posix-cpu-timers.c	/^void set_process_cpu_timer(struct task_struct *tsk, unsigned int clock_idx,$/;"	f
set_raw32_request	fs/compat_ioctl.c	/^static int set_raw32_request(struct raw_config_request *req, struct raw32_config_request __user *user_req)$/;"	f	file:
set_root	fs/namei.c	/^static __always_inline void set_root(struct nameidata *nd)$/;"	f	file:
set_rq_offline	kernel/sched.c	/^static void set_rq_offline(struct rq *rq)$/;"	f	file:
set_rq_online	kernel/sched.c	/^static void set_rq_online(struct rq *rq)$/;"	f	file:
set_running_timer	kernel/timer.c	/^static inline void set_running_timer(struct tvec_base *base,$/;"	f	file:
set_se_shares	kernel/sched.c	/^static void set_se_shares(struct sched_entity *se, unsigned long shares)$/;"	f	file:
set_section_nid	mm/sparse.c	/^static inline void set_section_nid(unsigned long section_nr, int nid)$/;"	f	file:
set_section_nid	mm/sparse.c	/^static void set_section_nid(unsigned long section_nr, int nid)$/;"	f	file:
set_security_override	kernel/cred.c	/^EXPORT_SYMBOL(set_security_override);$/;"	v
set_security_override	kernel/cred.c	/^int set_security_override(struct cred *new, u32 secid)$/;"	f
set_security_override_from_ctx	kernel/cred.c	/^EXPORT_SYMBOL(set_security_override_from_ctx);$/;"	v
set_security_override_from_ctx	kernel/cred.c	/^int set_security_override_from_ctx(struct cred *new, const char *secctx)$/;"	f
set_slob	mm/slob.c	/^static void set_slob(slob_t *s, slobidx_t size, slob_t *next)$/;"	f	file:
set_slob_page	mm/slob.c	/^static inline void set_slob_page(struct slob_page *sp)$/;"	f	file:
set_slob_page_free	mm/slob.c	/^static void set_slob_page_free(struct slob_page *sp, struct list_head *list)$/;"	f	file:
set_special_pids	kernel/exit.c	/^static void set_special_pids(struct pid *pid)$/;"	f	file:
set_state	kernel/stop_machine.c	/^static void set_state(enum stopmachine_state newstate)$/;"	f	file:
set_table_entry	kernel/sched.c	/^set_table_entry(struct ctl_table *entry,$/;"	f	file:
set_task_comm	fs/exec.c	/^void set_task_comm(struct task_struct *tsk, char *buf)$/;"	f
set_task_cpu	kernel/sched.c	/^void set_task_cpu(struct task_struct *p, unsigned int new_cpu)$/;"	f
set_task_ioprio	fs/ioprio.c	/^EXPORT_SYMBOL_GPL(set_task_ioprio);$/;"	v
set_task_ioprio	fs/ioprio.c	/^int set_task_ioprio(struct task_struct *task, int ioprio)$/;"	f
set_task_rq	kernel/sched.c	/^static inline void set_task_rq(struct task_struct *p, unsigned int cpu) { }$/;"	f	file:
set_task_rq	kernel/sched.c	/^static inline void set_task_rq(struct task_struct *p, unsigned int cpu)$/;"	f	file:
set_tg_uid	kernel/sched.c	/^void set_tg_uid(struct user_struct *user)$/;"	f
set_timeout	fs/aio.c	/^static inline void set_timeout(long start_jiffies, struct aio_timeout *to,$/;"	f	file:
set_tracepoint	kernel/tracepoint.c	/^static void set_tracepoint(struct tracepoint_entry **entry,$/;"	f	file:
set_track	mm/slub.c	/^static void set_track(struct kmem_cache *s, void *object,$/;"	f	file:
set_up_list3s	mm/slab.c	/^static void __init set_up_list3s(struct kmem_cache *cachep, int index)$/;"	f	file:
set_user	kernel/sys.c	/^static int set_user(struct cred *new)$/;"	f	file:
set_user_nice	kernel/sched.c	/^EXPORT_SYMBOL(set_user_nice);$/;"	v
set_user_nice	kernel/sched.c	/^void set_user_nice(struct task_struct *p, long nice)$/;"	f
set_vma_private_data	mm/hugetlb.c	/^static void set_vma_private_data(struct vm_area_struct *vma,$/;"	f	file:
set_vma_resv_flags	mm/hugetlb.c	/^static void set_vma_resv_flags(struct vm_area_struct *vma, unsigned long flags)$/;"	f	file:
set_vma_resv_map	mm/hugetlb.c	/^static void set_vma_resv_map(struct vm_area_struct *vma, struct resv_map *map)$/;"	f	file:
set_wq_data	kernel/workqueue.c	/^static inline void set_wq_data(struct work_struct *work,$/;"	f	file:
set_zonelist_order	mm/page_alloc.c	/^static void set_zonelist_order(void)$/;"	f	file:
setfl	fs/fcntl.c	/^static int setfl(int fd, struct file * filp, unsigned long arg)$/;"	f	file:
setup_arg_pages	fs/exec.c	/^EXPORT_SYMBOL(setup_arg_pages);$/;"	v
setup_arg_pages	fs/exec.c	/^int setup_arg_pages(struct linux_binprm *bprm,$/;"	f
setup_callbacks	kernel/relay.c	/^static void setup_callbacks(struct rchan *chan,$/;"	f	file:
setup_cpu_cache	mm/slab.c	/^static int __init_refok setup_cpu_cache(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
setup_fail_page_alloc	mm/page_alloc.c	/^static int __init setup_fail_page_alloc(char *str)$/;"	f	file:
setup_failslab	mm/failslab.c	/^static int __init setup_failslab(char *str)$/;"	f	file:
setup_hrtimer_hres	kernel/hrtimer.c	/^static int __init setup_hrtimer_hres(char *str)$/;"	f	file:
setup_modinfo	kernel/module.c	/^static void setup_modinfo(struct module *mod, Elf_Shdr *sechdrs,$/;"	f	file:
setup_new_exec	fs/exec.c	/^EXPORT_SYMBOL(setup_new_exec);$/;"	v
setup_new_exec	fs/exec.c	/^void setup_new_exec(struct linux_binprm * bprm)$/;"	f
setup_nr_node_ids	mm/page_alloc.c	/^static inline void setup_nr_node_ids(void)$/;"	f	file:
setup_nr_node_ids	mm/page_alloc.c	/^static void __init setup_nr_node_ids(void)$/;"	f	file:
setup_numa_zonelist_order	mm/page_alloc.c	/^static __init int setup_numa_zonelist_order(char *s)$/;"	f	file:
setup_object	mm/slub.c	/^static void setup_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
setup_object_debug	mm/slub.c	/^static inline void setup_object_debug(struct kmem_cache *s,$/;"	f	file:
setup_object_debug	mm/slub.c	/^static void setup_object_debug(struct kmem_cache *s, struct page *page,$/;"	f	file:
setup_pagelist_highmark	mm/page_alloc.c	/^static void setup_pagelist_highmark(struct per_cpu_pageset *p,$/;"	f	file:
setup_pageset	mm/page_alloc.c	/^static void setup_pageset(struct per_cpu_pageset *p, unsigned long batch)$/;"	f	file:
setup_per_cpu_areas	mm/percpu.c	/^void __init setup_per_cpu_areas(void)$/;"	f
setup_per_cpu_pageset	mm/page_alloc.c	/^void __init setup_per_cpu_pageset(void)$/;"	f
setup_per_zone_inactive_ratio	mm/page_alloc.c	/^static void __init setup_per_zone_inactive_ratio(void)$/;"	f	file:
setup_per_zone_lowmem_reserve	mm/page_alloc.c	/^static void setup_per_zone_lowmem_reserve(void)$/;"	f	file:
setup_per_zone_wmarks	mm/page_alloc.c	/^void setup_per_zone_wmarks(void)$/;"	f
setup_print_fatal_signals	kernel/signal.c	/^static int __init setup_print_fatal_signals(char *str)$/;"	f	file:
setup_relax_domain_level	kernel/sched.c	/^static int __init setup_relax_domain_level(char *str)$/;"	f	file:
setup_slub_debug	mm/slub.c	/^static int __init setup_slub_debug(char *str)$/;"	f	file:
setup_slub_max_order	mm/slub.c	/^static int __init setup_slub_max_order(char *str)$/;"	f	file:
setup_slub_min_objects	mm/slub.c	/^static int __init setup_slub_min_objects(char *str)$/;"	f	file:
setup_slub_min_order	mm/slub.c	/^static int __init setup_slub_min_order(char *str)$/;"	f	file:
setup_slub_nomerge	mm/slub.c	/^static int __init setup_slub_nomerge(char *str)$/;"	f	file:
setup_swap_extents	mm/swapfile.c	/^static int setup_swap_extents(struct swap_info_struct *sis, sector_t *span)$/;"	f	file:
setup_sysctl_set	kernel/sysctl.c	/^void setup_sysctl_set(struct ctl_table_set *p,$/;"	f
setup_usemap	mm/page_alloc.c	/^static void __init setup_usemap(struct pglist_data *pgdat,$/;"	f	file:
setup_usemap	mm/page_alloc.c	/^static void inline setup_usemap(struct pglist_data *pgdat,$/;"	f	file:
setup_vmstat	mm/vmstat.c	/^static int __init setup_vmstat(void)$/;"	f	file:
setup_zone_migrate_reserve	mm/page_alloc.c	/^static void setup_zone_migrate_reserve(struct zone *zone)$/;"	f	file:
setxattr	fs/xattr.c	/^setxattr(struct dentry *d, const char __user *name, const void __user *value,$/;"	f	file:
sg	kernel/sched.c	/^	struct sched_group sg;$/;"	m	struct:static_sched_group	typeref:struct:static_sched_group::sched_group	file:
sg_build_iovec	fs/compat_ioctl.c	/^static int sg_build_iovec(sg_io_hdr_t __user *sgio, void __user *dxferp, u16 iovec_count)$/;"	f	file:
sg_grt_trans	fs/compat_ioctl.c	/^static int sg_grt_trans(unsigned int fd, unsigned int cmd, struct$/;"	f	file:
sg_io_hdr32	fs/compat_ioctl.c	/^typedef struct sg_io_hdr32 {$/;"	s	file:
sg_io_hdr32_t	fs/compat_ioctl.c	/^} sg_io_hdr32_t;  \/* 64 bytes long (on sparc32) *\/$/;"	t	typeref:struct:sg_io_hdr32	file:
sg_io_owned	fs/compat_ioctl.c	/^	char sg_io_owned;$/;"	m	struct:compat_sg_req_info	file:
sg_ioctl_trans	fs/compat_ioctl.c	/^static int sg_ioctl_trans(unsigned int fd, unsigned int cmd,$/;"	f	file:
sg_iovec32	fs/compat_ioctl.c	/^typedef struct sg_iovec32 {$/;"	s	file:
sg_iovec32_t	fs/compat_ioctl.c	/^} sg_iovec32_t;$/;"	t	typeref:struct:sg_iovec32	file:
sg_lb_stats	kernel/sched.c	/^struct sg_lb_stats {$/;"	s	file:
sget	fs/super.c	/^EXPORT_SYMBOL(sget);$/;"	v
sget	fs/super.c	/^struct super_block *sget(struct file_system_type *type,$/;"	f
sgid	kernel/auditsc.c	/^	gid_t		    gid, egid, sgid, fsgid;$/;"	m	struct:audit_context	file:
sgp_type	mm/shmem.c	/^enum sgp_type {$/;"	g	file:
sgvecs	fs/bio.c	/^	struct sg_iovec *sgvecs;$/;"	m	struct:bio_map_data	typeref:struct:bio_map_data::sg_iovec	file:
shadow_pid	kernel/kgdb.c	/^static inline int shadow_pid(int realpid)$/;"	f	file:
shake_page	mm/memory-failure.c	/^EXPORT_SYMBOL_GPL(shake_page);$/;"	v
shake_page	mm/memory-failure.c	/^void shake_page(struct page *p, int access)$/;"	f
shared	mm/slab.c	/^	struct array_cache *shared;	\/* shared per node *\/$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::array_cache	file:
shared_policy_replace	mm/mempolicy.c	/^static int shared_policy_replace(struct shared_policy *sp, unsigned long start,$/;"	f	file:
sharedram	kernel/compat.c	/^	u32 sharedram;$/;"	m	struct:compat_sysinfo	file:
shares	kernel/sched.c	/^	unsigned long shares;$/;"	m	struct:cfs_rq	file:
shares	kernel/sched.c	/^	unsigned long shares;$/;"	m	struct:task_group	file:
shift_arg_pages	fs/exec.c	/^static int shift_arg_pages(struct vm_area_struct *vma, unsigned long shift)$/;"	f	file:
shm_mnt	mm/shmem.c	/^static struct vfsmount *shm_mnt;$/;"	v	typeref:struct:vfsmount	file:
shmem_acct_block	mm/shmem.c	/^static inline int shmem_acct_block(unsigned long flags)$/;"	f	file:
shmem_acct_size	mm/shmem.c	/^static inline int shmem_acct_size(unsigned long flags, loff_t size)$/;"	f	file:
shmem_acct_size	mm/shmem.c	2615;"	d	file:
shmem_alloc_inode	mm/shmem.c	/^static struct inode *shmem_alloc_inode(struct super_block *sb)$/;"	f	file:
shmem_alloc_page	mm/shmem.c	/^static inline struct page *shmem_alloc_page(gfp_t gfp,$/;"	f	file:
shmem_alloc_page	mm/shmem.c	/^static struct page *shmem_alloc_page(gfp_t gfp,$/;"	f	file:
shmem_aops	mm/shmem.c	/^static const struct address_space_operations shmem_aops = {$/;"	v	typeref:struct:address_space_operations	file:
shmem_aops	mm/shmem.c	/^static const struct address_space_operations shmem_aops;$/;"	v	typeref:struct:address_space_operations	file:
shmem_create	mm/shmem.c	/^static int shmem_create(struct inode *dir, struct dentry *dentry, int mode,$/;"	f	file:
shmem_default_max_blocks	mm/shmem.c	/^static unsigned long shmem_default_max_blocks(void)$/;"	f	file:
shmem_default_max_inodes	mm/shmem.c	/^static unsigned long shmem_default_max_inodes(void)$/;"	f	file:
shmem_delete_inode	mm/shmem.c	/^static void shmem_delete_inode(struct inode *inode)$/;"	f	file:
shmem_destroy_inode	mm/shmem.c	/^static void shmem_destroy_inode(struct inode *inode)$/;"	f	file:
shmem_dir_alloc	mm/shmem.c	/^static inline struct page *shmem_dir_alloc(gfp_t gfp_mask)$/;"	f	file:
shmem_dir_free	mm/shmem.c	/^static inline void shmem_dir_free(struct page *page)$/;"	f	file:
shmem_dir_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_dir_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_dir_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_dir_map	mm/shmem.c	/^static struct page **shmem_dir_map(struct page *page)$/;"	f	file:
shmem_dir_unmap	mm/shmem.c	/^static inline void shmem_dir_unmap(struct page **dir)$/;"	f	file:
shmem_encode_fh	mm/shmem.c	/^static int shmem_encode_fh(struct dentry *dentry, __u32 *fh, int *len,$/;"	f	file:
shmem_export_ops	mm/shmem.c	/^static const struct export_operations shmem_export_ops = {$/;"	v	typeref:struct:export_operations	file:
shmem_fault	mm/shmem.c	/^static int shmem_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
shmem_fh_to_dentry	mm/shmem.c	/^static struct dentry *shmem_fh_to_dentry(struct super_block *sb,$/;"	f	file:
shmem_file_aio_read	mm/shmem.c	/^static ssize_t shmem_file_aio_read(struct kiocb *iocb,$/;"	f	file:
shmem_file_operations	mm/shmem.c	/^static const struct file_operations shmem_file_operations = {$/;"	v	typeref:struct:file_operations	file:
shmem_file_operations	mm/shmem.c	/^static const struct file_operations shmem_file_operations;$/;"	v	typeref:struct:file_operations	file:
shmem_file_operations	mm/shmem.c	2613;"	d	file:
shmem_file_setup	mm/shmem.c	/^EXPORT_SYMBOL_GPL(shmem_file_setup);$/;"	v
shmem_file_setup	mm/shmem.c	/^struct file *shmem_file_setup(const char *name, loff_t size, unsigned long flags)$/;"	f
shmem_fill_super	mm/shmem.c	/^int shmem_fill_super(struct super_block *sb, void *data, int silent)$/;"	f
shmem_find_swp	mm/shmem.c	/^static inline int shmem_find_swp(swp_entry_t entry, swp_entry_t *dir, swp_entry_t *edir)$/;"	f	file:
shmem_follow_link	mm/shmem.c	/^static void *shmem_follow_link(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
shmem_follow_link_inline	mm/shmem.c	/^static void *shmem_follow_link_inline(struct dentry *dentry, struct nameidata *nd)$/;"	f	file:
shmem_free_blocks	mm/shmem.c	/^static void shmem_free_blocks(struct inode *inode, long pages)$/;"	f	file:
shmem_free_inode	mm/shmem.c	/^static void shmem_free_inode(struct super_block *sb)$/;"	f	file:
shmem_free_pages	mm/shmem.c	/^static void shmem_free_pages(struct list_head *next)$/;"	f	file:
shmem_free_swp	mm/shmem.c	/^static int shmem_free_swp(swp_entry_t *dir, swp_entry_t *edir,$/;"	f	file:
shmem_get_inode	mm/shmem.c	/^static struct inode *shmem_get_inode(struct super_block *sb, int mode,$/;"	f	file:
shmem_get_inode	mm/shmem.c	2614;"	d	file:
shmem_get_parent	mm/shmem.c	/^static struct dentry *shmem_get_parent(struct dentry *child)$/;"	f	file:
shmem_get_policy	mm/shmem.c	/^static struct mempolicy *shmem_get_policy(struct vm_area_struct *vma,$/;"	f	file:
shmem_get_sb	mm/shmem.c	/^static int shmem_get_sb(struct file_system_type *fs_type,$/;"	f	file:
shmem_get_sbmpol	mm/shmem.c	/^static inline struct mempolicy *shmem_get_sbmpol(struct shmem_sb_info *sbinfo)$/;"	f	file:
shmem_get_sbmpol	mm/shmem.c	/^static struct mempolicy *shmem_get_sbmpol(struct shmem_sb_info *sbinfo)$/;"	f	file:
shmem_getpage	mm/shmem.c	/^static int shmem_getpage(struct inode *inode, unsigned long idx,$/;"	f	file:
shmem_inode_cachep	mm/shmem.c	/^static struct kmem_cache *shmem_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
shmem_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_link	mm/shmem.c	/^static int shmem_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_lock	mm/shmem.c	/^int shmem_lock(struct file *file, int lock, struct user_struct *user)$/;"	f
shmem_map_and_free_swp	mm/shmem.c	/^static int shmem_map_and_free_swp(struct page *subdir, int offset,$/;"	f	file:
shmem_match	mm/shmem.c	/^static int shmem_match(struct inode *ino, void *vfh)$/;"	f	file:
shmem_mkdir	mm/shmem.c	/^static int shmem_mkdir(struct inode *dir, struct dentry *dentry, int mode)$/;"	f	file:
shmem_mknod	mm/shmem.c	/^shmem_mknod(struct inode *dir, struct dentry *dentry, int mode, dev_t dev)$/;"	f	file:
shmem_mmap	mm/shmem.c	/^static int shmem_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
shmem_notify_change	mm/shmem.c	/^static int shmem_notify_change(struct dentry *dentry, struct iattr *attr)$/;"	f	file:
shmem_ops	mm/shmem.c	/^static const struct super_operations shmem_ops = {$/;"	v	typeref:struct:super_operations	file:
shmem_ops	mm/shmem.c	/^static const struct super_operations shmem_ops;$/;"	v	typeref:struct:super_operations	file:
shmem_parse_options	mm/shmem.c	/^static int shmem_parse_options(char *options, struct shmem_sb_info *sbinfo,$/;"	f	file:
shmem_put_link	mm/shmem.c	/^static void shmem_put_link(struct dentry *dentry, struct nameidata *nd, void *cookie)$/;"	f	file:
shmem_put_super	mm/shmem.c	/^static void shmem_put_super(struct super_block *sb)$/;"	f	file:
shmem_readpage	mm/shmem.c	/^static int shmem_readpage(struct file *file, struct page *page)$/;"	f	file:
shmem_recalc_inode	mm/shmem.c	/^static void shmem_recalc_inode(struct inode *inode)$/;"	f	file:
shmem_remount_fs	mm/shmem.c	/^static int shmem_remount_fs(struct super_block *sb, int *flags, char *data)$/;"	f	file:
shmem_rename	mm/shmem.c	/^static int shmem_rename(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)$/;"	f	file:
shmem_reserve_inode	mm/shmem.c	/^static int shmem_reserve_inode(struct super_block *sb)$/;"	f	file:
shmem_rmdir	mm/shmem.c	/^static int shmem_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_set_policy	mm/shmem.c	/^static int shmem_set_policy(struct vm_area_struct *vma, struct mempolicy *new)$/;"	f	file:
shmem_show_mpol	mm/shmem.c	/^static inline void shmem_show_mpol(struct seq_file *seq, struct mempolicy *p)$/;"	f	file:
shmem_show_mpol	mm/shmem.c	/^static void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)$/;"	f	file:
shmem_show_options	mm/shmem.c	/^static int shmem_show_options(struct seq_file *seq, struct vfsmount *vfs)$/;"	f	file:
shmem_special_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_special_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_special_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_special_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_statfs	mm/shmem.c	/^static int shmem_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
shmem_swapin	mm/shmem.c	/^static inline struct page *shmem_swapin(swp_entry_t entry, gfp_t gfp,$/;"	f	file:
shmem_swapin	mm/shmem.c	/^static struct page *shmem_swapin(swp_entry_t entry, gfp_t gfp,$/;"	f	file:
shmem_swp_alloc	mm/shmem.c	/^static swp_entry_t *shmem_swp_alloc(struct shmem_inode_info *info, unsigned long index, enum sgp_type sgp)$/;"	f	file:
shmem_swp_balance_unmap	mm/shmem.c	/^static inline void shmem_swp_balance_unmap(void)$/;"	f	file:
shmem_swp_entry	mm/shmem.c	/^static swp_entry_t *shmem_swp_entry(struct shmem_inode_info *info, unsigned long index, struct page **page)$/;"	f	file:
shmem_swp_map	mm/shmem.c	/^static swp_entry_t *shmem_swp_map(struct page *page)$/;"	f	file:
shmem_swp_set	mm/shmem.c	/^static void shmem_swp_set(struct shmem_inode_info *info, swp_entry_t *entry, unsigned long value)$/;"	f	file:
shmem_swp_unmap	mm/shmem.c	/^static inline void shmem_swp_unmap(swp_entry_t *entry)$/;"	f	file:
shmem_symlink	mm/shmem.c	/^static int shmem_symlink(struct inode *dir, struct dentry *dentry, const char *symname)$/;"	f	file:
shmem_symlink_inline_operations	mm/shmem.c	/^static const struct inode_operations shmem_symlink_inline_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_symlink_inline_operations	mm/shmem.c	/^static const struct inode_operations shmem_symlink_inline_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_symlink_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_symlink_inode_operations	mm/shmem.c	/^static const struct inode_operations shmem_symlink_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_truncate	mm/shmem.c	/^static void shmem_truncate(struct inode *inode)$/;"	f	file:
shmem_truncate_range	mm/shmem.c	/^static void shmem_truncate_range(struct inode *inode, loff_t start, loff_t end)$/;"	f	file:
shmem_unacct_blocks	mm/shmem.c	/^static inline void shmem_unacct_blocks(unsigned long flags, long pages)$/;"	f	file:
shmem_unacct_size	mm/shmem.c	/^static inline void shmem_unacct_size(unsigned long flags, loff_t size)$/;"	f	file:
shmem_unacct_size	mm/shmem.c	2616;"	d	file:
shmem_unlink	mm/shmem.c	/^static int shmem_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_unuse	mm/shmem.c	/^int shmem_unuse(swp_entry_t entry, struct page *page)$/;"	f
shmem_unuse_inode	mm/shmem.c	/^static int shmem_unuse_inode(struct shmem_inode_info *info, swp_entry_t entry, struct page *page)$/;"	f	file:
shmem_vm_ops	mm/shmem.c	/^static const struct vm_operations_struct shmem_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
shmem_vm_ops	mm/shmem.c	/^static const struct vm_operations_struct shmem_vm_ops;$/;"	v	typeref:struct:vm_operations_struct	file:
shmem_vm_ops	mm/shmem.c	2612;"	d	file:
shmem_write_begin	mm/shmem.c	/^shmem_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
shmem_write_end	mm/shmem.c	/^shmem_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
shmem_writepage	mm/shmem.c	/^static int shmem_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
shmem_xattr_handlers	mm/shmem.c	/^static struct xattr_handler *shmem_xattr_handlers[] = {$/;"	v	typeref:struct:xattr_handler	file:
shmem_xattr_security_get	mm/shmem.c	/^static int shmem_xattr_security_get(struct dentry *dentry, const char *name,$/;"	f	file:
shmem_xattr_security_handler	mm/shmem.c	/^static struct xattr_handler shmem_xattr_security_handler = {$/;"	v	typeref:struct:xattr_handler	file:
shmem_xattr_security_list	mm/shmem.c	/^static size_t shmem_xattr_security_list(struct dentry *dentry, char *list,$/;"	f	file:
shmem_xattr_security_set	mm/shmem.c	/^static int shmem_xattr_security_set(struct dentry *dentry, const char *name,$/;"	f	file:
shmem_zero_setup	mm/shmem.c	/^int shmem_zero_setup(struct vm_area_struct *vma)$/;"	f
should_alloc_retry	mm/page_alloc.c	/^should_alloc_retry(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
should_fail_alloc_page	mm/page_alloc.c	/^static inline int should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
should_fail_alloc_page	mm/page_alloc.c	/^static int should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
should_failslab	mm/failslab.c	/^bool should_failslab(size_t size, gfp_t gfpflags)$/;"	f
should_remove_suid	mm/filemap.c	/^EXPORT_SYMBOL(should_remove_suid);$/;"	v
should_remove_suid	mm/filemap.c	/^int should_remove_suid(struct dentry *dentry)$/;"	f
should_resched	kernel/sched.c	/^static inline int should_resched(void)$/;"	f	file:
should_stop	kernel/kthread.c	/^	int should_stop;$/;"	m	struct:kthread	file:
show	mm/slub.c	/^	ssize_t (*show)(struct kmem_cache *s, char *buf);$/;"	m	struct:slab_attribute	file:
show_free_areas	mm/page_alloc.c	/^void show_free_areas(void)$/;"	f
show_initstate	kernel/module.c	/^static ssize_t show_initstate(struct module_attribute *mattr,$/;"	f	file:
show_kprobe_addr	kernel/kprobes.c	/^static int __kprobes show_kprobe_addr(struct seq_file *pi, void *v)$/;"	f	file:
show_mnt_opts	fs/namespace.c	/^static void show_mnt_opts(struct seq_file *m, struct vfsmount *mnt)$/;"	f	file:
show_mountinfo	fs/namespace.c	/^static int show_mountinfo(struct seq_file *m, void *v)$/;"	f	file:
show_node	mm/page_alloc.c	/^static inline void show_node(struct zone *zone)$/;"	f	file:
show_numa_info	mm/vmalloc.c	/^static void show_numa_info(struct seq_file *m, struct vm_struct *v)$/;"	f	file:
show_numa_map	mm/mempolicy.c	/^int show_numa_map(struct seq_file *m, void *v)$/;"	f
show_pools	mm/dmapool.c	/^show_pools(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
show_rcu_pending	kernel/rcutree_trace.c	/^static int show_rcu_pending(struct seq_file *m, void *unused)$/;"	f	file:
show_rcudata	kernel/rcutree_trace.c	/^static int show_rcudata(struct seq_file *m, void *unused)$/;"	f	file:
show_rcudata_csv	kernel/rcutree_trace.c	/^static int show_rcudata_csv(struct seq_file *m, void *unused)$/;"	f	file:
show_rcugp	kernel/rcutree_trace.c	/^static int show_rcugp(struct seq_file *m, void *unused)$/;"	f	file:
show_rcuhier	kernel/rcutree_trace.c	/^static int show_rcuhier(struct seq_file *m, void *unused)$/;"	f	file:
show_refcnt	kernel/module.c	/^static ssize_t show_refcnt(struct module_attribute *mattr,$/;"	f	file:
show_sb_opts	fs/namespace.c	/^static int show_sb_opts(struct seq_file *m, struct super_block *sb)$/;"	f	file:
show_schedstat	kernel/sched_stats.h	/^static int show_schedstat(struct seq_file *seq, void *v)$/;"	f
show_slab_objects	mm/slub.c	/^static ssize_t show_slab_objects(struct kmem_cache *s,$/;"	f	file:
show_special	kernel/auditsc.c	/^static void show_special(struct audit_context *context, int *call_panic)$/;"	f	file:
show_stat	mm/slub.c	/^static int show_stat(struct kmem_cache *s, char *buf, enum stat_item si)$/;"	f	file:
show_state_filter	kernel/sched.c	/^void show_state_filter(unsigned long state_filter)$/;"	f
show_swap_cache_info	mm/swap_state.c	/^void show_swap_cache_info(void)$/;"	f
show_symbol	mm/slab.c	/^static void show_symbol(struct seq_file *m, unsigned long address)$/;"	f	file:
show_type	fs/namespace.c	/^static void show_type(struct seq_file *m, struct super_block *sb)$/;"	f	file:
show_vfsmnt	fs/namespace.c	/^static int show_vfsmnt(struct seq_file *m, void *v)$/;"	f	file:
show_vfsstat	fs/namespace.c	/^static int show_vfsstat(struct seq_file *m, void *v)$/;"	f	file:
shrink	mm/slub.c	/^SLAB_ATTR(shrink);$/;"	v
shrink_active_list	mm/vmscan.c	/^static void shrink_active_list(unsigned long nr_pages, struct zone *zone,$/;"	f	file:
shrink_all_memory	mm/vmscan.c	/^unsigned long shrink_all_memory(unsigned long nr_to_reclaim)$/;"	f
shrink_dcache_for_umount	fs/dcache.c	/^void shrink_dcache_for_umount(struct super_block *sb)$/;"	f
shrink_dcache_for_umount_subtree	fs/dcache.c	/^static void shrink_dcache_for_umount_subtree(struct dentry *dentry)$/;"	f	file:
shrink_dcache_memory	fs/dcache.c	/^static int shrink_dcache_memory(int nr, gfp_t gfp_mask)$/;"	f	file:
shrink_dcache_parent	fs/dcache.c	/^EXPORT_SYMBOL(shrink_dcache_parent);$/;"	v
shrink_dcache_parent	fs/dcache.c	/^void shrink_dcache_parent(struct dentry * parent)$/;"	f
shrink_dcache_sb	fs/dcache.c	/^EXPORT_SYMBOL(shrink_dcache_sb);$/;"	v
shrink_dcache_sb	fs/dcache.c	/^void shrink_dcache_sb(struct super_block * sb)$/;"	f
shrink_icache_memory	fs/inode.c	/^static int shrink_icache_memory(int nr, gfp_t gfp_mask)$/;"	f	file:
shrink_inactive_list	mm/vmscan.c	/^static unsigned long shrink_inactive_list(unsigned long max_scan,$/;"	f	file:
shrink_list	mm/vmscan.c	/^static unsigned long shrink_list(enum lru_list lru, unsigned long nr_to_scan,$/;"	f	file:
shrink_page_list	mm/vmscan.c	/^static unsigned long shrink_page_list(struct list_head *page_list,$/;"	f	file:
shrink_readahead_size_eio	mm/filemap.c	/^static void shrink_readahead_size_eio(struct file *filp,$/;"	f	file:
shrink_show	mm/slub.c	/^static ssize_t shrink_show(struct kmem_cache *s, char *buf)$/;"	f	file:
shrink_slab	mm/vmscan.c	/^unsigned long shrink_slab(unsigned long scanned, gfp_t gfp_mask,$/;"	f
shrink_store	mm/slub.c	/^static ssize_t shrink_store(struct kmem_cache *s,$/;"	f	file:
shrink_submounts	fs/namespace.c	/^static void shrink_submounts(struct vfsmount *mnt, struct list_head *umounts)$/;"	f	file:
shrink_vma	mm/nommu.c	/^static int shrink_vma(struct mm_struct *mm,$/;"	f	file:
shrink_zone	mm/vmscan.c	/^static void shrink_zone(int priority, struct zone *zone,$/;"	f	file:
shrink_zones	mm/vmscan.c	/^static void shrink_zones(int priority, struct zonelist *zonelist,$/;"	f	file:
shuffle_interval	kernel/rcutorture.c	/^static int shuffle_interval = 3; \/* Interval between shuffles (in sec)*\/$/;"	v	file:
shuffle_tmp_mask	kernel/rcutorture.c	/^static cpumask_var_t shuffle_tmp_mask;$/;"	v	file:
shuffler_task	kernel/rcutorture.c	/^static struct task_struct *shuffler_task;$/;"	v	typeref:struct:task_struct	file:
si_fromuser	kernel/signal.c	/^static inline bool si_fromuser(const struct siginfo *info)$/;"	f	file:
si_meminfo	mm/page_alloc.c	/^EXPORT_SYMBOL(si_meminfo);$/;"	v
si_meminfo	mm/page_alloc.c	/^void si_meminfo(struct sysinfo *val)$/;"	f
si_meminfo_node	mm/page_alloc.c	/^void si_meminfo_node(struct sysinfo *val, int nid)$/;"	f
si_swapinfo	mm/swapfile.c	/^void si_swapinfo(struct sysinfo *val)$/;"	f
siblings	kernel/sched.c	/^	struct list_head siblings;$/;"	m	struct:task_group	typeref:struct:task_group::list_head	file:
sig_handler	kernel/signal.c	/^static void __user *sig_handler(struct task_struct *t, int sig)$/;"	f	file:
sig_handler_ignored	kernel/signal.c	/^static int sig_handler_ignored(void __user *handler, int sig)$/;"	f	file:
sig_ignored	kernel/signal.c	/^static int sig_ignored(struct task_struct *t, int sig, int from_ancestor_ns)$/;"	f	file:
sig_task_ignored	kernel/signal.c	/^static int sig_task_ignored(struct task_struct *t, int sig,$/;"	f	file:
sigev_signo	kernel/auditsc.c	/^			int			sigev_signo;$/;"	m	struct:audit_context::__anon22::__anon26	file:
sighand_cachep	kernel/fork.c	/^struct kmem_cache *sighand_cachep;$/;"	v	typeref:struct:kmem_cache
sighand_ctor	kernel/fork.c	/^static void sighand_ctor(void *data)$/;"	f	file:
sigio_perm	fs/fcntl.c	/^static inline int sigio_perm(struct task_struct *p,$/;"	f	file:
sigkill_pending	kernel/signal.c	/^static int sigkill_pending(struct task_struct *tsk)$/;"	f	file:
sigmask	fs/signalfd.c	/^	sigset_t sigmask;$/;"	m	struct:signalfd_ctx	file:
signal_cachep	kernel/fork.c	/^static struct kmem_cache *signal_cachep;$/;"	v	typeref:struct:kmem_cache	file:
signal_wake_up	kernel/signal.c	/^void signal_wake_up(struct task_struct *t, int resume)$/;"	f
signalfd_copyinfo	fs/signalfd.c	/^static int signalfd_copyinfo(struct signalfd_siginfo __user *uinfo,$/;"	f	file:
signalfd_ctx	fs/signalfd.c	/^struct signalfd_ctx {$/;"	s	file:
signalfd_dequeue	fs/signalfd.c	/^static ssize_t signalfd_dequeue(struct signalfd_ctx *ctx, siginfo_t *info,$/;"	f	file:
signalfd_fops	fs/signalfd.c	/^static const struct file_operations signalfd_fops = {$/;"	v	typeref:struct:file_operations	file:
signalfd_poll	fs/signalfd.c	/^static unsigned int signalfd_poll(struct file *file, poll_table *wait)$/;"	f	file:
signalfd_read	fs/signalfd.c	/^static ssize_t signalfd_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
signalfd_release	fs/signalfd.c	/^static int signalfd_release(struct inode *inode, struct file *file)$/;"	f	file:
signals_init	kernel/signal.c	/^void __init signals_init(void)$/;"	f
signo	kernel/kgdb.c	/^	int			signo;$/;"	m	struct:kgdb_state	file:
sigprocmask	kernel/signal.c	/^EXPORT_SYMBOL(sigprocmask);$/;"	v
sigprocmask	kernel/signal.c	/^int sigprocmask(int how, sigset_t *set, sigset_t *oldset)$/;"	f
sigqueue_alloc	kernel/signal.c	/^struct sigqueue *sigqueue_alloc(void)$/;"	f
sigqueue_cachep	kernel/signal.c	/^static struct kmem_cache *sigqueue_cachep;$/;"	v	typeref:struct:kmem_cache	file:
sigqueue_free	kernel/signal.c	/^void sigqueue_free(struct sigqueue *q)$/;"	f
sigset_from_compat	kernel/compat.c	/^sigset_from_compat (sigset_t *set, compat_sigset_t *compat)$/;"	f
simple_attr	fs/libfs.c	/^struct simple_attr {$/;"	s	file:
simple_attr_open	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_open);$/;"	v
simple_attr_open	fs/libfs.c	/^int simple_attr_open(struct inode *inode, struct file *file,$/;"	f
simple_attr_read	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_read);$/;"	v
simple_attr_read	fs/libfs.c	/^ssize_t simple_attr_read(struct file *file, char __user *buf,$/;"	f
simple_attr_release	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_release);$/;"	v
simple_attr_release	fs/libfs.c	/^int simple_attr_release(struct inode *inode, struct file *file)$/;"	f
simple_attr_write	fs/libfs.c	/^EXPORT_SYMBOL_GPL(simple_attr_write);$/;"	v
simple_attr_write	fs/libfs.c	/^ssize_t simple_attr_write(struct file *file, const char __user *buf,$/;"	f
simple_commit_write	fs/libfs.c	/^static int simple_commit_write(struct file *file, struct page *page,$/;"	f	file:
simple_delete_dentry	fs/libfs.c	/^static int simple_delete_dentry(struct dentry *dentry)$/;"	f	file:
simple_dir_inode_operations	fs/libfs.c	/^EXPORT_SYMBOL(simple_dir_inode_operations);$/;"	v
simple_dir_inode_operations	fs/libfs.c	/^const struct inode_operations simple_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations
simple_dir_operations	fs/libfs.c	/^EXPORT_SYMBOL(simple_dir_operations);$/;"	v
simple_dir_operations	fs/libfs.c	/^const struct file_operations simple_dir_operations = {$/;"	v	typeref:struct:file_operations
simple_empty	fs/libfs.c	/^EXPORT_SYMBOL(simple_empty);$/;"	v
simple_empty	fs/libfs.c	/^int simple_empty(struct dentry *dentry)$/;"	f
simple_fill_super	fs/libfs.c	/^EXPORT_SYMBOL(simple_fill_super);$/;"	v
simple_fill_super	fs/libfs.c	/^int simple_fill_super(struct super_block *s, int magic, struct tree_descr *files)$/;"	f
simple_fsync	fs/libfs.c	/^EXPORT_SYMBOL(simple_fsync);$/;"	v
simple_fsync	fs/libfs.c	/^int simple_fsync(struct file *file, struct dentry *dentry, int datasync)$/;"	f
simple_getattr	fs/libfs.c	/^EXPORT_SYMBOL(simple_getattr);$/;"	v
simple_getattr	fs/libfs.c	/^int simple_getattr(struct vfsmount *mnt, struct dentry *dentry,$/;"	f
simple_link	fs/libfs.c	/^EXPORT_SYMBOL(simple_link);$/;"	v
simple_link	fs/libfs.c	/^int simple_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)$/;"	f
simple_lookup	fs/libfs.c	/^EXPORT_SYMBOL(simple_lookup);$/;"	v
simple_lookup	fs/libfs.c	/^struct dentry *simple_lookup(struct inode *dir, struct dentry *dentry, struct nameidata *nd)$/;"	f
simple_pin_fs	fs/libfs.c	/^EXPORT_SYMBOL(simple_pin_fs);$/;"	v
simple_pin_fs	fs/libfs.c	/^int simple_pin_fs(struct file_system_type *type, struct vfsmount **mount, int *count)$/;"	f
simple_positive	fs/libfs.c	/^static inline int simple_positive(struct dentry *dentry)$/;"	f	file:
simple_prepare_write	fs/libfs.c	/^EXPORT_UNUSED_SYMBOL(simple_prepare_write);$/;"	v
simple_prepare_write	fs/libfs.c	/^int simple_prepare_write(struct file *file, struct page *page,$/;"	f
simple_read_from_buffer	fs/libfs.c	/^EXPORT_SYMBOL(simple_read_from_buffer);$/;"	v
simple_read_from_buffer	fs/libfs.c	/^ssize_t simple_read_from_buffer(void __user *to, size_t count, loff_t *ppos,$/;"	f
simple_readpage	fs/libfs.c	/^EXPORT_SYMBOL(simple_readpage);$/;"	v
simple_readpage	fs/libfs.c	/^int simple_readpage(struct file *file, struct page *page)$/;"	f
simple_release_fs	fs/libfs.c	/^EXPORT_SYMBOL(simple_release_fs);$/;"	v
simple_release_fs	fs/libfs.c	/^void simple_release_fs(struct vfsmount **mount, int *count)$/;"	f
simple_rename	fs/libfs.c	/^EXPORT_SYMBOL(simple_rename);$/;"	v
simple_rename	fs/libfs.c	/^int simple_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f
simple_rmdir	fs/libfs.c	/^EXPORT_SYMBOL(simple_rmdir);$/;"	v
simple_rmdir	fs/libfs.c	/^int simple_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f
simple_set_mnt	fs/namespace.c	/^EXPORT_SYMBOL(simple_set_mnt);$/;"	v
simple_set_mnt	fs/namespace.c	/^void simple_set_mnt(struct vfsmount *mnt, struct super_block *sb)$/;"	f
simple_statfs	fs/libfs.c	/^EXPORT_SYMBOL(simple_statfs);$/;"	v
simple_statfs	fs/libfs.c	/^int simple_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f
simple_super_operations	fs/libfs.c	/^static const struct super_operations simple_super_operations = {$/;"	v	typeref:struct:super_operations	file:
simple_sync_file	fs/libfs.c	/^EXPORT_SYMBOL(simple_sync_file);$/;"	v
simple_sync_file	fs/libfs.c	/^int simple_sync_file(struct file * file, struct dentry *dentry, int datasync)$/;"	f
simple_transaction_get	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_get);$/;"	v
simple_transaction_get	fs/libfs.c	/^char *simple_transaction_get(struct file *file, const char __user *buf, size_t size)$/;"	f
simple_transaction_read	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_read);$/;"	v
simple_transaction_read	fs/libfs.c	/^ssize_t simple_transaction_read(struct file *file, char __user *buf, size_t size, loff_t *pos)$/;"	f
simple_transaction_release	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_release);$/;"	v
simple_transaction_release	fs/libfs.c	/^int simple_transaction_release(struct inode *inode, struct file *file)$/;"	f
simple_transaction_set	fs/libfs.c	/^EXPORT_SYMBOL(simple_transaction_set);$/;"	v
simple_transaction_set	fs/libfs.c	/^void simple_transaction_set(struct file *file, size_t n)$/;"	f
simple_unlink	fs/libfs.c	/^EXPORT_SYMBOL(simple_unlink);$/;"	v
simple_unlink	fs/libfs.c	/^int simple_unlink(struct inode *dir, struct dentry *dentry)$/;"	f
simple_write_begin	fs/libfs.c	/^EXPORT_SYMBOL(simple_write_begin);$/;"	v
simple_write_begin	fs/libfs.c	/^int simple_write_begin(struct file *file, struct address_space *mapping,$/;"	f
simple_write_end	fs/libfs.c	/^EXPORT_SYMBOL(simple_write_end);$/;"	v
simple_write_end	fs/libfs.c	/^int simple_write_end(struct file *file, struct address_space *mapping,$/;"	f
simplify_symbols	kernel/module.c	/^static int simplify_symbols(Elf_Shdr *sechdrs,$/;"	f	file:
single_bit_flip	mm/debug-pagealloc.c	/^static bool single_bit_flip(unsigned char a, unsigned char b)$/;"	f	file:
single_next	fs/seq_file.c	/^static void *single_next(struct seq_file *p, void *v, loff_t *pos)$/;"	f	file:
single_open	fs/seq_file.c	/^EXPORT_SYMBOL(single_open);$/;"	v
single_open	fs/seq_file.c	/^int single_open(struct file *file, int (*show)(struct seq_file *, void *),$/;"	f
single_release	fs/seq_file.c	/^EXPORT_SYMBOL(single_release);$/;"	v
single_release	fs/seq_file.c	/^int single_release(struct inode *inode, struct file *file)$/;"	f
single_start	fs/seq_file.c	/^static void *single_start(struct seq_file *p, loff_t *pos)$/;"	f	file:
single_stop	fs/seq_file.c	/^static void single_stop(struct seq_file *p, void *v)$/;"	f	file:
singlethread	kernel/workqueue.c	/^	int singlethread;$/;"	m	struct:workqueue_struct	file:
sixty	kernel/sysctl.c	/^static int sixty = 60;$/;"	v	file:
size	fs/binfmt_elf.c	/^	size_t size;$/;"	m	struct:elf_note_info	file:
size	fs/binfmt_misc.c	/^	int size;			\/* size of magic\/mask *\/$/;"	m	struct:__anon16	file:
size	fs/compat_ioctl.c	/^	        video_size_t size;$/;"	m	union:compat_video_event::__anon18	file:
size	fs/compat_ioctl.c	/^	u32 size;$/;"	m	struct:i2c_smbus_ioctl_data32	file:
size	fs/compat_ioctl.c	/^        int32_t size;$/;"	m	struct:compat_video_still_picture	file:
size	fs/direct-io.c	/^	size_t	size;			\/* total request size (doesn't change)*\/$/;"	m	struct:dio	file:
size	mm/dmapool.c	/^	size_t size;$/;"	m	struct:dma_pool	file:
size	mm/kmemleak.c	/^	size_t size;			\/* memory block size *\/$/;"	m	struct:early_log	file:
size	mm/kmemleak.c	/^	size_t size;$/;"	m	struct:kmemleak_object	file:
size	mm/kmemleak.c	/^	size_t size;$/;"	m	struct:kmemleak_scan_area	file:
size	mm/slob.c	/^	int size;$/;"	m	struct:slob_rcu	file:
size	mm/slob.c	/^	unsigned int size, align;$/;"	m	struct:kmem_cache	file:
size_index	mm/slub.c	/^static s8 size_index[24] = {$/;"	v	file:
size_index_elem	mm/slub.c	/^static inline int size_index_elem(size_t bytes)$/;"	f	file:
size_to_hstate	mm/hugetlb.c	/^struct hstate *size_to_hstate(unsigned long size)$/;"	f
skb	kernel/audit.c	/^	struct sk_buff       *skb;	\/* formatted skb ready to send *\/$/;"	m	struct:audit_buffer	typeref:struct:audit_buffer::sk_buff	file:
skb	kernel/audit.c	/^	struct sk_buff *skb;$/;"	m	struct:audit_reply	typeref:struct:audit_reply::sk_buff	file:
skip_mnt_tree	fs/namespace.c	/^static struct vfsmount *skip_mnt_tree(struct vfsmount *p)$/;"	f	file:
skip_spaces	lib/string.c	/^EXPORT_SYMBOL(skip_spaces);$/;"	v
skip_spaces	lib/string.c	/^char *skip_spaces(const char *str)$/;"	f
slab	fs/bio-integrity.c	/^	struct kmem_cache *slab;$/;"	m	struct:integrity_slab	typeref:struct:integrity_slab::kmem_cache	file:
slab	fs/bio.c	/^	struct kmem_cache *slab;$/;"	m	struct:bio_slab	typeref:struct:bio_slab::kmem_cache	file:
slab	mm/memory-failure.c	724;"	d	file:
slab	mm/memory-failure.c	781;"	d	file:
slab	mm/slab.c	/^struct slab {$/;"	s	file:
slab_alloc	mm/slub.c	/^static __always_inline void *slab_alloc(struct kmem_cache *s,$/;"	f	file:
slab_attr_group	mm/slub.c	/^static struct attribute_group slab_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
slab_attr_show	mm/slub.c	/^static ssize_t slab_attr_show(struct kobject *kobj,$/;"	f	file:
slab_attr_store	mm/slub.c	/^static ssize_t slab_attr_store(struct kobject *kobj,$/;"	f	file:
slab_attribute	mm/slub.c	/^struct slab_attribute {$/;"	s	file:
slab_attrs	mm/slub.c	/^static struct attribute *slab_attrs[] = {$/;"	v	typeref:struct:attribute	file:
slab_break_gfp_order	mm/slab.c	/^static int slab_break_gfp_order = BREAK_GFP_ORDER_LO;$/;"	v	file:
slab_bufctl	mm/slab.c	/^static inline kmem_bufctl_t *slab_bufctl(struct slab *slabp)$/;"	f	file:
slab_buffer_size	mm/slab.c	/^EXPORT_SYMBOL(slab_buffer_size);$/;"	v
slab_buffer_size	mm/slab.c	/^size_t slab_buffer_size(struct kmem_cache *cachep)$/;"	f
slab_bug	mm/slub.c	/^static void slab_bug(struct kmem_cache *s, char *fmt, ...)$/;"	f	file:
slab_cpuup_callback	mm/slub.c	/^static int __cpuinit slab_cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
slab_destroy	mm/slab.c	/^static void slab_destroy(struct kmem_cache *cachep, struct slab *slabp)$/;"	f	file:
slab_destroy_debugcheck	mm/slab.c	/^static void slab_destroy_debugcheck(struct kmem_cache *cachep, struct slab *slabp)$/;"	f	file:
slab_early_init	mm/slab.c	/^static int slab_early_init = 1;$/;"	v	file:
slab_err	mm/slub.c	/^static void slab_err(struct kmem_cache *s, struct page *page, char *fmt, ...)$/;"	f	file:
slab_error	mm/slab.c	808;"	d	file:
slab_fix	mm/slub.c	/^static void slab_fix(struct kmem_cache *s, char *fmt, ...)$/;"	f	file:
slab_free	mm/slub.c	/^static __always_inline void slab_free(struct kmem_cache *s,$/;"	f	file:
slab_get_obj	mm/slab.c	/^static void *slab_get_obj(struct kmem_cache *cachep, struct slab *slabp,$/;"	f	file:
slab_index	mm/slub.c	/^static inline int slab_index(void *p, struct kmem_cache *s, void *addr)$/;"	f	file:
slab_is_available	mm/slab.c	/^int slab_is_available(void)$/;"	f
slab_is_available	mm/slob.c	/^int slab_is_available(void)$/;"	f
slab_is_available	mm/slub.c	/^int slab_is_available(void)$/;"	f
slab_kset	mm/slub.c	/^static struct kset *slab_kset;$/;"	v	typeref:struct:kset	file:
slab_ktype	mm/slub.c	/^static struct kobj_type slab_ktype = {$/;"	v	typeref:struct:kobj_type	file:
slab_lock	mm/slub.c	/^static __always_inline void slab_lock(struct page *page)$/;"	f	file:
slab_map_pages	mm/slab.c	/^static void slab_map_pages(struct kmem_cache *cache, struct slab *slab,$/;"	f	file:
slab_mem_going_offline_callback	mm/slub.c	/^static int slab_mem_going_offline_callback(void *arg)$/;"	f	file:
slab_mem_going_online_callback	mm/slub.c	/^static int slab_mem_going_online_callback(void *arg)$/;"	f	file:
slab_mem_offline_callback	mm/slub.c	/^static void slab_mem_offline_callback(void *arg)$/;"	f	file:
slab_memory_callback	mm/slub.c	/^static int slab_memory_callback(struct notifier_block *self,$/;"	f	file:
slab_mgmt_size	mm/slab.c	/^static size_t slab_mgmt_size(size_t nr_objs, size_t align)$/;"	f	file:
slab_node	mm/mempolicy.c	/^unsigned slab_node(struct mempolicy *policy)$/;"	f
slab_notifier	mm/slub.c	/^static struct notifier_block __cpuinitdata slab_notifier = {$/;"	v	typeref:struct:__cpuinitdata	file:
slab_notifier	mm/slub.c	/^static struct notifier_block slab_notifier;$/;"	v	typeref:struct:notifier_block	file:
slab_order	mm/slub.c	/^static inline int slab_order(int size, int min_objects,$/;"	f	file:
slab_out_of_memory	mm/slub.c	/^slab_out_of_memory(struct kmem_cache *s, gfp_t gfpflags, int nid)$/;"	f	file:
slab_pad_check	mm/slub.c	/^static inline int slab_pad_check(struct kmem_cache *s, struct page *page)$/;"	f	file:
slab_pad_check	mm/slub.c	/^static int slab_pad_check(struct kmem_cache *s, struct page *page)$/;"	f	file:
slab_proc_init	mm/slab.c	/^module_init(slab_proc_init);$/;"	v
slab_proc_init	mm/slab.c	/^static int __init slab_proc_init(void)$/;"	f	file:
slab_proc_init	mm/slub.c	/^module_init(slab_proc_init);$/;"	v
slab_proc_init	mm/slub.c	/^static int __init slab_proc_init(void)$/;"	f	file:
slab_put_obj	mm/slab.c	/^static void slab_put_obj(struct kmem_cache *cachep, struct slab *slabp,$/;"	f	file:
slab_rcu	mm/slab.c	/^struct slab_rcu {$/;"	s	file:
slab_ref	fs/bio.c	/^	unsigned int slab_ref;$/;"	m	struct:bio_slab	file:
slab_should_failslab	mm/slab.c	/^static bool slab_should_failslab(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
slab_size	fs/bio.c	/^	unsigned int slab_size;$/;"	m	struct:bio_slab	file:
slab_size	mm/slub.c	/^SLAB_ATTR_RO(slab_size);$/;"	v
slab_size_show	mm/slub.c	/^static ssize_t slab_size_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slab_stat_type	mm/slub.c	/^enum slab_stat_type {$/;"	g	file:
slab_state	mm/slub.c	/^} slab_state = DOWN;$/;"	v	typeref:enum:__anon10	file:
slab_sysfs_init	mm/slub.c	/^__initcall(slab_sysfs_init);$/;"	v
slab_sysfs_init	mm/slub.c	/^static int __init slab_sysfs_init(void)$/;"	f	file:
slab_sysfs_ops	mm/slub.c	/^static struct sysfs_ops slab_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
slab_trylock	mm/slub.c	/^static __always_inline int slab_trylock(struct page *page)$/;"	f	file:
slab_uevent_ops	mm/slub.c	/^static struct kset_uevent_ops slab_uevent_ops = {$/;"	v	typeref:struct:kset_uevent_ops	file:
slab_unlock	mm/slub.c	/^static __always_inline void slab_unlock(struct page *page)$/;"	f	file:
slab_unmergeable	mm/slub.c	/^static int slab_unmergeable(struct kmem_cache *s)$/;"	f	file:
slabinfo_op	mm/slab.c	/^static const struct seq_operations slabinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
slabinfo_op	mm/slub.c	/^static const struct seq_operations slabinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
slabinfo_open	mm/slab.c	/^static int slabinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
slabinfo_open	mm/slub.c	/^static int slabinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
slabinfo_write	mm/slab.c	/^ssize_t slabinfo_write(struct file *file, const char __user * buffer,$/;"	f
slabs	mm/slub.c	/^SLAB_ATTR_RO(slabs);$/;"	v
slabs_free	mm/slab.c	/^	struct list_head slabs_free;$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::list_head	file:
slabs_full	mm/slab.c	/^	struct list_head slabs_full;$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::list_head	file:
slabs_node	mm/slub.c	/^static inline unsigned long slabs_node(struct kmem_cache *s, int node)$/;"	f	file:
slabs_partial	mm/slab.c	/^	struct list_head slabs_partial;	\/* partial list first, better asm code *\/$/;"	m	struct:kmem_list3	typeref:struct:kmem_list3::list_head	file:
slabs_show	mm/slub.c	/^static ssize_t slabs_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slabstats_op	mm/slab.c	/^static const struct seq_operations slabstats_op = {$/;"	v	typeref:struct:seq_operations	file:
slabstats_open	mm/slab.c	/^static int slabstats_open(struct inode *inode, struct file *file)$/;"	f	file:
sleep_millisecs	mm/ksm.c	/^KSM_ATTR(sleep_millisecs);$/;"	v
sleep_millisecs_show	mm/ksm.c	/^static ssize_t sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
sleep_millisecs_store	mm/ksm.c	/^static ssize_t sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
sleep_on	kernel/sched.c	/^EXPORT_SYMBOL(sleep_on);$/;"	v
sleep_on	kernel/sched.c	/^void __sched sleep_on(wait_queue_head_t *q)$/;"	f
sleep_on_common	kernel/sched.c	/^sleep_on_common(wait_queue_head_t *q, int state, long timeout)$/;"	f	file:
sleep_on_timeout	kernel/sched.c	/^EXPORT_SYMBOL(sleep_on_timeout);$/;"	v
sleep_on_timeout	kernel/sched.c	/^long __sched sleep_on_timeout(wait_queue_head_t *q, long timeout)$/;"	f
sleeping_prematurely	mm/vmscan.c	/^static int sleeping_prematurely(pg_data_t *pgdat, int order, long remaining)$/;"	f	file:
slob_alloc	mm/slob.c	/^static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)$/;"	f	file:
slob_block	mm/slob.c	/^struct slob_block {$/;"	s	file:
slob_free	mm/slob.c	/^static void slob_free(void *block, int size)$/;"	f	file:
slob_free_pages	mm/slob.c	/^static void slob_free_pages(void *b, int order)$/;"	f	file:
slob_last	mm/slob.c	/^static int slob_last(slob_t *s)$/;"	f	file:
slob_new_pages	mm/slob.c	/^static void *slob_new_pages(gfp_t gfp, int order, int node)$/;"	f	file:
slob_next	mm/slob.c	/^static slob_t *slob_next(slob_t *s)$/;"	f	file:
slob_page	mm/slob.c	/^static inline struct slob_page *slob_page(const void *addr)$/;"	f	file:
slob_page	mm/slob.c	/^struct slob_page {$/;"	s	file:
slob_page_alloc	mm/slob.c	/^static void *slob_page_alloc(struct slob_page *sp, size_t size, int align)$/;"	f	file:
slob_page_free	mm/slob.c	/^static inline int slob_page_free(struct slob_page *sp)$/;"	f	file:
slob_rcu	mm/slob.c	/^struct slob_rcu {$/;"	s	file:
slob_t	mm/slob.c	/^typedef struct slob_block slob_t;$/;"	t	typeref:struct:slob_block	file:
slob_units	mm/slob.c	/^static slobidx_t slob_units(slob_t *s)$/;"	f	file:
slobidx_t	mm/slob.c	/^typedef s16 slobidx_t;$/;"	t	file:
slobidx_t	mm/slob.c	/^typedef s32 slobidx_t;$/;"	t	file:
slot_used	kernel/kprobes.c	/^	char slot_used[INSNS_PER_PAGE];$/;"	m	struct:kprobe_insn_page	file:
slots	lib/radix-tree.c	/^	void		*slots[RADIX_TREE_MAP_SIZE];$/;"	m	struct:radix_tree_node	file:
slow_work_available	kernel/slow-work.c	/^static inline bool slow_work_available(int vsmax)$/;"	f	file:
slow_work_begin_exec	kernel/slow-work.h	/^static inline void slow_work_begin_exec(int id, struct slow_work *work)$/;"	f
slow_work_calc_vsmax	kernel/slow-work.c	/^static unsigned slow_work_calc_vsmax(void)$/;"	f	file:
slow_work_cancel	kernel/slow-work.c	/^EXPORT_SYMBOL(slow_work_cancel);$/;"	v
slow_work_cancel	kernel/slow-work.c	/^void slow_work_cancel(struct slow_work *work)$/;"	f
slow_work_clear_thread_processing	kernel/slow-work.c	/^static void slow_work_clear_thread_processing(int id) {}$/;"	f	file:
slow_work_clear_thread_processing	kernel/slow-work.c	/^static void slow_work_clear_thread_processing(int id)$/;"	f	file:
slow_work_cull	kernel/slow-work.c	/^static bool slow_work_cull; \/* cull a thread due to lack of activity *\/$/;"	v	file:
slow_work_cull_thread	kernel/slow-work.c	/^static bool slow_work_cull_thread(void)$/;"	f	file:
slow_work_cull_timeout	kernel/slow-work.c	/^static void slow_work_cull_timeout(unsigned long data)$/;"	f	file:
slow_work_done_thread_processing	kernel/slow-work.c	/^static void slow_work_done_thread_processing(int id, struct slow_work *work) {}$/;"	f	file:
slow_work_done_thread_processing	kernel/slow-work.c	/^static void slow_work_done_thread_processing(int id, struct slow_work *work)$/;"	f	file:
slow_work_end_exec	kernel/slow-work.h	/^static inline void slow_work_end_exec(int id, struct slow_work *work)$/;"	f
slow_work_enqueue	kernel/slow-work.c	/^EXPORT_SYMBOL(slow_work_enqueue);$/;"	v
slow_work_enqueue	kernel/slow-work.c	/^int slow_work_enqueue(struct slow_work *work)$/;"	f
slow_work_execs	kernel/slow-work.c	/^struct slow_work *slow_work_execs[SLOW_WORK_THREAD_LIMIT];$/;"	v	typeref:struct:slow_work
slow_work_execs_lock	kernel/slow-work.c	/^DEFINE_RWLOCK(slow_work_execs_lock);$/;"	v
slow_work_execute	kernel/slow-work.c	/^static noinline bool slow_work_execute(int id)$/;"	f	file:
slow_work_get_ref	kernel/slow-work.c	/^static inline int slow_work_get_ref(struct slow_work *work)$/;"	f	file:
slow_work_mark_time	kernel/slow-work.h	/^static inline void slow_work_mark_time(struct slow_work *work)$/;"	f
slow_work_max_max_threads	kernel/slow-work.c	/^static int slow_work_max_max_threads = SLOW_WORK_THREAD_LIMIT;$/;"	v	file:
slow_work_max_threads	kernel/slow-work.c	/^static unsigned slow_work_max_threads = 4;$/;"	v	file:
slow_work_max_threads_sysctl	kernel/slow-work.c	/^static int slow_work_max_threads_sysctl(struct ctl_table *table, int write,$/;"	f	file:
slow_work_max_vslow	kernel/slow-work.c	/^static const int slow_work_max_vslow = 99;$/;"	v	file:
slow_work_may_not_start_new_thread	kernel/slow-work.c	/^static bool slow_work_may_not_start_new_thread;$/;"	v	file:
slow_work_min_min_threads	kernel/slow-work.c	/^static const int slow_work_min_min_threads = 2;$/;"	v	file:
slow_work_min_threads	kernel/slow-work.c	/^static unsigned slow_work_min_threads = 2;$/;"	v	file:
slow_work_min_threads_sysctl	kernel/slow-work.c	/^static int slow_work_min_threads_sysctl(struct ctl_table *table, int write,$/;"	f	file:
slow_work_min_vslow	kernel/slow-work.c	/^static const int slow_work_min_vslow = 1;$/;"	v	file:
slow_work_new_thread	kernel/slow-work.c	/^static struct slow_work slow_work_new_thread; \/* new thread starter *\/$/;"	v	typeref:struct:slow_work	file:
slow_work_new_thread_desc	kernel/slow-work-debugfs.c	/^void slow_work_new_thread_desc(struct slow_work *work, struct seq_file *m)$/;"	f
slow_work_new_thread_execute	kernel/slow-work.c	/^static void slow_work_new_thread_execute(struct slow_work *work)$/;"	f	file:
slow_work_new_thread_ops	kernel/slow-work.c	/^static const struct slow_work_ops slow_work_new_thread_ops = {$/;"	v	typeref:struct:slow_work_ops	file:
slow_work_oom_timeout	kernel/slow-work.c	/^static void slow_work_oom_timeout(unsigned long data)$/;"	f	file:
slow_work_pids	kernel/slow-work.c	/^pid_t slow_work_pids[SLOW_WORK_THREAD_LIMIT];$/;"	v
slow_work_print_mark	kernel/slow-work-debugfs.c	/^static void slow_work_print_mark(struct seq_file *m, struct slow_work *work)$/;"	f	file:
slow_work_put_ref	kernel/slow-work.c	/^static inline void slow_work_put_ref(struct slow_work *work)$/;"	f	file:
slow_work_queue	kernel/slow-work.c	/^LIST_HEAD(slow_work_queue);$/;"	v
slow_work_queue_lock	kernel/slow-work.c	/^DEFINE_SPINLOCK(slow_work_queue_lock);$/;"	v
slow_work_register_user	kernel/slow-work.c	/^EXPORT_SYMBOL(slow_work_register_user);$/;"	v
slow_work_register_user	kernel/slow-work.c	/^int slow_work_register_user(struct module *module)$/;"	f
slow_work_runqueue_fops	kernel/slow-work-debugfs.c	/^const struct file_operations slow_work_runqueue_fops = {$/;"	v	typeref:struct:file_operations
slow_work_runqueue_index	kernel/slow-work-debugfs.c	/^static void *slow_work_runqueue_index(struct seq_file *m, loff_t *_pos)$/;"	f	file:
slow_work_runqueue_next	kernel/slow-work-debugfs.c	/^static void *slow_work_runqueue_next(struct seq_file *m, void *v, loff_t *_pos)$/;"	f	file:
slow_work_runqueue_open	kernel/slow-work-debugfs.c	/^static int slow_work_runqueue_open(struct inode *inode, struct file *file)$/;"	f	file:
slow_work_runqueue_ops	kernel/slow-work-debugfs.c	/^static const struct seq_operations slow_work_runqueue_ops = {$/;"	v	typeref:struct:seq_operations	file:
slow_work_runqueue_show	kernel/slow-work-debugfs.c	/^static int slow_work_runqueue_show(struct seq_file *m, void *v)$/;"	f	file:
slow_work_runqueue_start	kernel/slow-work-debugfs.c	/^static void *slow_work_runqueue_start(struct seq_file *m, loff_t *_pos)$/;"	f	file:
slow_work_runqueue_stop	kernel/slow-work-debugfs.c	/^static void slow_work_runqueue_stop(struct seq_file *m, void *v)$/;"	f	file:
slow_work_schedule_cull	kernel/slow-work.c	/^static void slow_work_schedule_cull(void)$/;"	f	file:
slow_work_set_thread_pid	kernel/slow-work.h	/^static inline void slow_work_set_thread_pid(int id, pid_t pid)$/;"	f
slow_work_set_thread_processing	kernel/slow-work.c	/^static void slow_work_set_thread_processing(int id, struct slow_work *work) {}$/;"	f	file:
slow_work_set_thread_processing	kernel/slow-work.c	/^static void slow_work_set_thread_processing(int id, struct slow_work *work)$/;"	f	file:
slow_work_sleep_till_thread_needed	kernel/slow-work.c	/^EXPORT_SYMBOL(slow_work_sleep_till_thread_needed);$/;"	v
slow_work_sleep_till_thread_needed	kernel/slow-work.c	/^bool slow_work_sleep_till_thread_needed(struct slow_work *work,$/;"	f
slow_work_sysctls	kernel/slow-work.c	/^ctl_table slow_work_sysctls[] = {$/;"	v
slow_work_thread	kernel/slow-work.c	/^static int slow_work_thread(void *_data)$/;"	f	file:
slow_work_thread_count	kernel/slow-work.c	/^static atomic_t slow_work_thread_count;$/;"	v	file:
slow_work_thread_processing	kernel/slow-work.c	/^static struct module *slow_work_thread_processing[SLOW_WORK_THREAD_LIMIT];$/;"	v	typeref:struct:module	file:
slow_work_threads_should_exit	kernel/slow-work.c	/^static bool slow_work_threads_should_exit;$/;"	v	file:
slow_work_unreg_module	kernel/slow-work.c	/^static struct module *slow_work_unreg_module;$/;"	v	typeref:struct:module	file:
slow_work_unreg_work_item	kernel/slow-work.c	/^static struct slow_work *slow_work_unreg_work_item;$/;"	v	typeref:struct:slow_work	file:
slow_work_unregister_user	kernel/slow-work.c	/^EXPORT_SYMBOL(slow_work_unregister_user);$/;"	v
slow_work_unregister_user	kernel/slow-work.c	/^void slow_work_unregister_user(struct module *module)$/;"	f
slow_work_user_count	kernel/slow-work.c	/^static int slow_work_user_count;$/;"	v	file:
slow_work_wait	kernel/slow-work.c	/^static int slow_work_wait(void *word)$/;"	f	file:
slow_work_wait_for_items	kernel/slow-work.c	/^static void slow_work_wait_for_items(struct module *module)$/;"	f	file:
slowpath_args	kernel/panic.c	/^struct slowpath_args {$/;"	s	file:
slub_debug	mm/slub.c	/^static int slub_debug = DEBUG_DEFAULT_FLAGS;$/;"	v	file:
slub_debug	mm/slub.c	/^static int slub_debug;$/;"	v	file:
slub_debug	mm/slub.c	1072;"	d	file:
slub_debug_slabs	mm/slub.c	/^static char *slub_debug_slabs;$/;"	v	file:
slub_max_order	mm/slub.c	/^static int slub_max_order = PAGE_ALLOC_COSTLY_ORDER;$/;"	v	file:
slub_min_objects	mm/slub.c	/^static int slub_min_objects;$/;"	v	file:
slub_min_order	mm/slub.c	/^static int slub_min_order;$/;"	v	file:
slub_nomerge	mm/slub.c	/^static int slub_nomerge;$/;"	v	file:
smp_call_function	kernel/smp.c	/^EXPORT_SYMBOL(smp_call_function);$/;"	v
smp_call_function	kernel/smp.c	/^int smp_call_function(void (*func)(void *), void *info, int wait)$/;"	f
smp_call_function_any	kernel/smp.c	/^EXPORT_SYMBOL_GPL(smp_call_function_any);$/;"	v
smp_call_function_any	kernel/smp.c	/^int smp_call_function_any(const struct cpumask *mask,$/;"	f
smp_call_function_many	kernel/smp.c	/^EXPORT_SYMBOL(smp_call_function_many);$/;"	v
smp_call_function_many	kernel/smp.c	/^void smp_call_function_many(const struct cpumask *mask,$/;"	f
smp_call_function_single	kernel/smp.c	/^EXPORT_SYMBOL(smp_call_function_single);$/;"	v
smp_call_function_single	kernel/smp.c	/^int smp_call_function_single(int cpu, void (*func) (void *info), void *info,$/;"	f
smp_call_function_single	kernel/up.c	/^EXPORT_SYMBOL(smp_call_function_single);$/;"	v
smp_call_function_single	kernel/up.c	/^int smp_call_function_single(int cpu, void (*func) (void *info), void *info,$/;"	f
smp_mb__after_lock	include/linux/spinlock.h	/^static inline void smp_mb__after_lock(void) { smp_mb(); }$/;"	f
sn_cache	mm/mempolicy.c	/^static struct kmem_cache *sn_cache;$/;"	v	typeref:struct:kmem_cache	file:
snprint_time	kernel/lockdep_proc.c	/^static void snprint_time(char *buf, size_t bufsiz, s64 nr)$/;"	f	file:
sock_fprog32	fs/compat_ioctl.c	/^struct sock_fprog32 {$/;"	s	file:
sockaddr	kernel/auditsc.c	/^	struct sockaddr_storage *sockaddr;$/;"	m	struct:audit_context	typeref:struct:audit_context::sockaddr_storage	file:
sockaddr_len	kernel/auditsc.c	/^	size_t sockaddr_len;$/;"	m	struct:audit_context	file:
socketcall	kernel/auditsc.c	/^		} socketcall;$/;"	m	union:audit_context::__anon22	typeref:struct:audit_context::__anon22::__anon23	file:
soft_limit_tree_from_page	mm/memcontrol.c	/^soft_limit_tree_from_page(struct page *page)$/;"	f	file:
soft_limit_tree_node_zone	mm/memcontrol.c	/^soft_limit_tree_node_zone(int nid, int zid)$/;"	f	file:
soft_offline_page	mm/memory-failure.c	/^int soft_offline_page(struct page *page, int flags)$/;"	f
softirq_init	kernel/softirq.c	/^void __init softirq_init(void)$/;"	f
softirq_to_name	kernel/softirq.c	/^char *softirq_to_name[NR_SOFTIRQS] = {$/;"	v
softirq_work_list	kernel/softirq.c	/^EXPORT_PER_CPU_SYMBOL(softirq_work_list);$/;"	v
softirqs_off_events	kernel/lockdep.c	/^atomic_t softirqs_off_events;$/;"	v
softirqs_on_events	kernel/lockdep.c	/^atomic_t softirqs_on_events;$/;"	v
softlock_panic	kernel/softlockup.c	/^softlock_panic(struct notifier_block *this, unsigned long event, void *ptr)$/;"	f	file:
softlockup_panic	kernel/softlockup.c	/^unsigned int __read_mostly softlockup_panic =$/;"	v
softlockup_panic_setup	kernel/softlockup.c	/^static int __init softlockup_panic_setup(char *str)$/;"	f	file:
softlockup_thresh	kernel/softlockup.c	/^int __read_mostly softlockup_thresh = 60;$/;"	v
softlockup_tick	kernel/softlockup.c	/^void softlockup_tick(void)$/;"	f
som_core_dump	fs/binfmt_som.c	48;"	d	file:
som_format	fs/binfmt_som.c	/^static struct linux_binfmt som_format = {$/;"	v	typeref:struct:linux_binfmt	file:
sort_main_extable	kernel/extable.c	/^void __init sort_main_extable(void)$/;"	f
sort_node_map	mm/page_alloc.c	/^void __init sort_node_map(void)$/;"	f
source_load	kernel/sched.c	/^static unsigned long source_load(int cpu, int type)$/;"	f	file:
sp_alloc	mm/mempolicy.c	/^static struct sp_node *sp_alloc(unsigned long start, unsigned long end,$/;"	f	file:
sp_delete	mm/mempolicy.c	/^static void sp_delete(struct shared_policy *sp, struct sp_node *n)$/;"	f	file:
sp_insert	mm/mempolicy.c	/^static void sp_insert(struct shared_policy *sp, struct sp_node *new)$/;"	f	file:
sp_lookup	mm/mempolicy.c	/^sp_lookup(struct shared_policy *sp, unsigned long start, unsigned long end)$/;"	f	file:
space_resv_32	fs/compat_ioctl.c	/^struct space_resv_32 {$/;"	s	file:
span	kernel/sched.c	/^	cpumask_var_t span;$/;"	m	struct:root_domain	file:
sparse_add_one_section	mm/sparse.c	/^int __meminit sparse_add_one_section(struct zone *zone, unsigned long start_pfn,$/;"	f
sparse_decode_mem_map	mm/sparse.c	/^struct page *sparse_decode_mem_map(unsigned long coded_mem_map, unsigned long pnum)$/;"	f
sparse_early_mem_map_alloc	mm/sparse.c	/^static struct page __init *sparse_early_mem_map_alloc(unsigned long pnum)$/;"	f	file:
sparse_early_nid	mm/sparse.c	/^static inline int sparse_early_nid(struct mem_section *section)$/;"	f	file:
sparse_early_usemap_alloc	mm/sparse.c	/^static unsigned long *__init sparse_early_usemap_alloc(unsigned long pnum)$/;"	f	file:
sparse_early_usemap_alloc_pgdat_section	mm/sparse.c	/^sparse_early_usemap_alloc_pgdat_section(struct pglist_data *pgdat)$/;"	f	file:
sparse_encode_early_nid	mm/sparse.c	/^static inline unsigned long sparse_encode_early_nid(int nid)$/;"	f	file:
sparse_encode_mem_map	mm/sparse.c	/^static unsigned long sparse_encode_mem_map(struct page *mem_map, unsigned long pnum)$/;"	f	file:
sparse_index_alloc	mm/sparse.c	/^static struct mem_section noinline __init_refok *sparse_index_alloc(int nid)$/;"	f	file:
sparse_index_init	mm/sparse.c	/^static inline int sparse_index_init(unsigned long section_nr, int nid)$/;"	f	file:
sparse_index_init	mm/sparse.c	/^static int __meminit sparse_index_init(unsigned long section_nr, int nid)$/;"	f	file:
sparse_init	mm/sparse.c	/^void __init sparse_init(void)$/;"	f
sparse_init_one_section	mm/sparse.c	/^static int __meminit sparse_init_one_section(struct mem_section *ms,$/;"	f	file:
sparse_mem_map_populate	mm/sparse-vmemmap.c	/^struct page * __meminit sparse_mem_map_populate(unsigned long pnum, int nid)$/;"	f
sparse_mem_map_populate	mm/sparse.c	/^struct page __init *sparse_mem_map_populate(unsigned long pnum, int nid)$/;"	f
sparse_memory_present_with_active_regions	mm/page_alloc.c	/^void __init sparse_memory_present_with_active_regions(int nid)$/;"	f
sparse_remove_one_section	mm/sparse.c	/^void sparse_remove_one_section(struct zone *zone, struct mem_section *ms)$/;"	f
spawn_ksoftirqd	kernel/softirq.c	/^early_initcall(spawn_ksoftirqd);$/;"	v
spawn_ksoftirqd	kernel/softirq.c	/^static __init int spawn_ksoftirqd(void)$/;"	f	file:
spawn_softlockup_task	kernel/softlockup.c	/^early_initcall(spawn_softlockup_task);$/;"	v
spawn_softlockup_task	kernel/softlockup.c	/^static int __init spawn_softlockup_task(void)$/;"	f	file:
spd_release_page	fs/splice.c	/^static void spd_release_page(struct splice_pipe_desc *spd, unsigned int i)$/;"	f	file:
special_mapping_close	mm/mmap.c	/^static void special_mapping_close(struct vm_area_struct *vma)$/;"	f	file:
special_mapping_fault	mm/mmap.c	/^static int special_mapping_fault(struct vm_area_struct *vma,$/;"	f	file:
special_mapping_vmops	mm/mmap.c	/^static const struct vm_operations_struct special_mapping_vmops = {$/;"	v	typeref:struct:vm_operations_struct	file:
specific_send_sig_info	kernel/signal.c	/^specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t)$/;"	f	file:
spin_can_lock	include/linux/spinlock.h	/^static inline int spin_can_lock(spinlock_t *lock)$/;"	f
spin_is_contended	include/linux/spinlock.h	/^static inline int spin_is_contended(spinlock_t *lock)$/;"	f
spin_is_locked	include/linux/spinlock.h	/^static inline int spin_is_locked(spinlock_t *lock)$/;"	f
spin_lock	include/linux/spinlock.h	/^static inline void spin_lock(spinlock_t *lock)$/;"	f
spin_lock_bh	include/linux/spinlock.h	/^static inline void spin_lock_bh(spinlock_t *lock)$/;"	f
spin_lock_init	include/linux/spinlock.h	273;"	d
spin_lock_irq	include/linux/spinlock.h	/^static inline void spin_lock_irq(spinlock_t *lock)$/;"	f
spin_lock_irqsave	include/linux/spinlock.h	309;"	d
spin_lock_irqsave_nested	include/linux/spinlock.h	314;"	d
spin_lock_mutex	kernel/mutex-debug.h	40;"	d
spin_lock_mutex	kernel/mutex.h	12;"	d
spin_lock_nest_lock	include/linux/spinlock.h	299;"	d
spin_lock_nested	include/linux/spinlock.h	294;"	d
spin_msec	kernel/panic.c	/^static void spin_msec(int msecs)$/;"	f	file:
spin_trylock	include/linux/spinlock.h	/^static inline int spin_trylock(spinlock_t *lock)$/;"	f
spin_trylock_bh	include/linux/spinlock.h	/^static inline int spin_trylock_bh(spinlock_t *lock)$/;"	f
spin_trylock_irq	include/linux/spinlock.h	/^static inline int spin_trylock_irq(spinlock_t *lock)$/;"	f
spin_trylock_irqsave	include/linux/spinlock.h	349;"	d
spin_unlock	include/linux/spinlock.h	/^static inline void spin_unlock(spinlock_t *lock)$/;"	f
spin_unlock_bh	include/linux/spinlock.h	/^static inline void spin_unlock_bh(spinlock_t *lock)$/;"	f
spin_unlock_irq	include/linux/spinlock.h	/^static inline void spin_unlock_irq(spinlock_t *lock)$/;"	f
spin_unlock_irqrestore	include/linux/spinlock.h	/^static inline void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)$/;"	f
spin_unlock_mutex	kernel/mutex-debug.h	50;"	d
spin_unlock_mutex	kernel/mutex.h	14;"	d
spin_unlock_wait	include/linux/spinlock.h	/^static inline void spin_unlock_wait(spinlock_t *lock)$/;"	f
spinlock_check	include/linux/spinlock.h	/^static inline raw_spinlock_t *spinlock_check(spinlock_t *lock)$/;"	f
splice_direct_to_actor	fs/splice.c	/^EXPORT_SYMBOL(splice_direct_to_actor);$/;"	v
splice_direct_to_actor	fs/splice.c	/^ssize_t splice_direct_to_actor(struct file *in, struct splice_desc *sd,$/;"	f
splice_from_pipe	fs/splice.c	/^ssize_t splice_from_pipe(struct pipe_inode_info *pipe, struct file *out,$/;"	f
splice_from_pipe_begin	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_begin);$/;"	v
splice_from_pipe_begin	fs/splice.c	/^void splice_from_pipe_begin(struct splice_desc *sd)$/;"	f
splice_from_pipe_end	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_end);$/;"	v
splice_from_pipe_end	fs/splice.c	/^void splice_from_pipe_end(struct pipe_inode_info *pipe, struct splice_desc *sd)$/;"	f
splice_from_pipe_feed	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_feed);$/;"	v
splice_from_pipe_feed	fs/splice.c	/^int splice_from_pipe_feed(struct pipe_inode_info *pipe, struct splice_desc *sd,$/;"	f
splice_from_pipe_next	fs/splice.c	/^EXPORT_SYMBOL(splice_from_pipe_next);$/;"	v
splice_from_pipe_next	fs/splice.c	/^int splice_from_pipe_next(struct pipe_inode_info *pipe, struct splice_desc *sd)$/;"	f
splice_pipe_to_pipe	fs/splice.c	/^static int splice_pipe_to_pipe(struct pipe_inode_info *ipipe,$/;"	f	file:
splice_to_pipe	fs/splice.c	/^ssize_t splice_to_pipe(struct pipe_inode_info *pipe,$/;"	f
split_page	mm/page_alloc.c	/^void split_page(struct page *page, unsigned int order)$/;"	f
split_vma	mm/mmap.c	/^int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
split_vma	mm/nommu.c	/^int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
sprint_symbol	kernel/kallsyms.c	/^EXPORT_SYMBOL_GPL(sprint_symbol);$/;"	v
sprint_symbol	kernel/kallsyms.c	/^int sprint_symbol(char *buffer, unsigned long address)$/;"	f
srcu_batches_completed	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(srcu_batches_completed);$/;"	v
srcu_batches_completed	kernel/srcu.c	/^long srcu_batches_completed(struct srcu_struct *sp)$/;"	f
srcu_ctl	kernel/rcutorture.c	/^static struct srcu_struct srcu_ctl;$/;"	v	typeref:struct:srcu_struct	file:
srcu_expedited_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_expedited_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_init_notifier_head	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_init_notifier_head);$/;"	v
srcu_init_notifier_head	kernel/notifier.c	/^void srcu_init_notifier_head(struct srcu_notifier_head *nh)$/;"	f
srcu_notifier_call_chain	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_notifier_call_chain);$/;"	v
srcu_notifier_call_chain	kernel/notifier.c	/^int srcu_notifier_call_chain(struct srcu_notifier_head *nh,$/;"	f
srcu_notifier_chain_register	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_notifier_chain_register);$/;"	v
srcu_notifier_chain_register	kernel/notifier.c	/^int srcu_notifier_chain_register(struct srcu_notifier_head *nh,$/;"	f
srcu_notifier_chain_unregister	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(srcu_notifier_chain_unregister);$/;"	v
srcu_notifier_chain_unregister	kernel/notifier.c	/^int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,$/;"	f
srcu_ops	kernel/rcutorture.c	/^static struct rcu_torture_ops srcu_ops = {$/;"	v	typeref:struct:rcu_torture_ops	file:
srcu_read_delay	kernel/rcutorture.c	/^static void srcu_read_delay(struct rcu_random_state *rrsp)$/;"	f	file:
srcu_read_lock	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(srcu_read_lock);$/;"	v
srcu_read_lock	kernel/srcu.c	/^int srcu_read_lock(struct srcu_struct *sp)$/;"	f
srcu_read_unlock	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(srcu_read_unlock);$/;"	v
srcu_read_unlock	kernel/srcu.c	/^void srcu_read_unlock(struct srcu_struct *sp, int idx)$/;"	f
srcu_readers_active	kernel/srcu.c	/^static int srcu_readers_active(struct srcu_struct *sp)$/;"	f	file:
srcu_readers_active_idx	kernel/srcu.c	/^static int srcu_readers_active_idx(struct srcu_struct *sp, int idx)$/;"	f	file:
srcu_torture_cleanup	kernel/rcutorture.c	/^static void srcu_torture_cleanup(void)$/;"	f	file:
srcu_torture_completed	kernel/rcutorture.c	/^static int srcu_torture_completed(void)$/;"	f	file:
srcu_torture_init	kernel/rcutorture.c	/^static void srcu_torture_init(void)$/;"	f	file:
srcu_torture_stats	kernel/rcutorture.c	/^static int srcu_torture_stats(char *page)$/;"	f	file:
srcu_torture_synchronize	kernel/rcutorture.c	/^static void srcu_torture_synchronize(void)$/;"	f	file:
srcu_torture_synchronize_expedited	kernel/rcutorture.c	/^static void srcu_torture_synchronize_expedited(void)$/;"	f	file:
srcversion	kernel/module.c	/^MODINFO_ATTR(srcversion);$/;"	v
stable_node	mm/ksm.c	/^struct stable_node {$/;"	s	file:
stable_node_cache	mm/ksm.c	/^static struct kmem_cache *stable_node_cache;$/;"	v	typeref:struct:kmem_cache	file:
stable_tree_append	mm/ksm.c	/^static void stable_tree_append(struct rmap_item *rmap_item,$/;"	f	file:
stable_tree_insert	mm/ksm.c	/^static struct stable_node *stable_tree_insert(struct page *kpage)$/;"	f	file:
stable_tree_search	mm/ksm.c	/^static struct page *stable_tree_search(struct page *page)$/;"	f	file:
stack	kernel/cgroup.c	/^	unsigned short stack[0]; \/* Array of Length (depth+1) *\/$/;"	m	struct:css_id	file:
stack_list	kernel/cpuset.c	/^	struct list_head stack_list;$/;"	m	struct:cpuset	typeref:struct:cpuset::list_head	file:
stack_trace	kernel/lockdep.c	/^static unsigned long stack_trace[MAX_STACK_TRACE_ENTRIES];$/;"	v	file:
start	kernel/perf_event.c	/^		u64				start;$/;"	m	struct:perf_mmap_event::__anon39	file:
start	kernel/resource.c	/^	resource_size_t start;$/;"	m	struct:region_devres	file:
start	kernel/sched.c	/^	struct task_struct *(*start)(void *);$/;"	m	struct:rq_iterator	typeref:struct:rq_iterator::start	file:
start	mm/kmemleak.c	/^	unsigned long start;$/;"	m	struct:kmemleak_scan_area	file:
start_brk	fs/binfmt_flat.c	/^		unsigned long start_brk;		\/* End of data segment *\/$/;"	m	struct:lib_info::__anon13	file:
start_code	fs/binfmt_flat.c	/^		unsigned long start_code;		\/* Start of text segment *\/$/;"	m	struct:lib_info::__anon13	file:
start_cpu_timer	mm/slab.c	/^static void __cpuinit start_cpu_timer(int cpu)$/;"	f	file:
start_cpu_timer	mm/vmstat.c	/^static void __cpuinit start_cpu_timer(int cpu)$/;"	f	file:
start_data	fs/binfmt_flat.c	/^		unsigned long start_data;		\/* Start of data segment *\/$/;"	m	struct:lib_info::__anon13	file:
start_isolate_page_range	mm/page_isolation.c	/^start_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
start_rt_bandwidth	kernel/sched.c	/^static void start_rt_bandwidth(struct rt_bandwidth *rt_b)$/;"	f	file:
start_scan_thread	mm/kmemleak.c	/^static void start_scan_thread(void)$/;"	f	file:
start_thread	fs/compat_binfmt_elf.c	108;"	d	file:
start_thread	fs/compat_binfmt_elf.c	109;"	d	file:
start_unregistering	kernel/sysctl.c	/^static void start_unregistering(struct ctl_table_header *p)$/;"	f	file:
start_workqueue_thread	kernel/workqueue.c	/^static void start_workqueue_thread(struct cpu_workqueue_struct *cwq, int cpu)$/;"	f	file:
start_zero_done	fs/direct-io.c	/^	unsigned start_zero_done;	\/* flag: sub-blocksize zeroing has$/;"	m	struct:dio	file:
started_after	kernel/cgroup.c	/^static inline int started_after(void *p1, void *p2)$/;"	f	file:
started_after_time	kernel/cgroup.c	/^static inline int started_after_time(struct task_struct *t1,$/;"	f	file:
stat	mm/memcontrol.c	/^	s64 stat[NR_MCS_STAT];$/;"	m	struct:mcs_total_stat	file:
stat	mm/memcontrol.c	/^	struct mem_cgroup_stat stat;$/;"	m	struct:mem_cgroup	typeref:struct:mem_cgroup::mem_cgroup_stat	file:
stat	mm/slub.c	/^static inline void stat(struct kmem_cache_cpu *c, enum stat_item si)$/;"	f	file:
stat_interval	kernel/rcutorture.c	/^static int stat_interval;	\/* Interval between stats, in seconds. *\/$/;"	v	file:
stat_nam	kernel/sched.c	/^static const char stat_nam[] = TASK_STATE_TO_CHAR_STR;$/;"	v	file:
state	fs/fs-writeback.c	/^	unsigned long state;		\/* flag bits, see WS_* *\/$/;"	m	struct:bdi_work	file:
state	kernel/auditsc.c	/^	enum audit_state    state, current_state;$/;"	m	struct:audit_context	typeref:enum:audit_context::audit_state	file:
state	kernel/cgroup_freezer.c	/^	enum freezer_state state;$/;"	m	struct:freezer	typeref:enum:freezer::freezer_state	file:
state	kernel/stop_machine.c	/^static enum stopmachine_state state;$/;"	v	typeref:enum:stopmachine_state	file:
state_name	kernel/lockdep.c	/^static inline const char *state_name(enum lock_usage_bit bit)$/;"	f	file:
state_names	kernel/lockdep.c	/^static const char *state_names[] = {$/;"	v	file:
state_rnames	kernel/lockdep.c	/^static const char *state_rnames[] = {$/;"	v	file:
state_verbose	kernel/lockdep.c	/^static inline int state_verbose(enum lock_usage_bit bit,$/;"	f	file:
state_verbose_f	kernel/lockdep.c	/^static int (*state_verbose_f[])(struct lock_class *class) = {$/;"	v	file:
static_obj	kernel/lockdep.c	/^static int static_obj(void *obj)$/;"	f	file:
static_sched_domain	kernel/sched.c	/^struct static_sched_domain {$/;"	s	file:
static_sched_group	kernel/sched.c	/^struct static_sched_group {$/;"	s	file:
stats	kernel/lockdep_proc.c	/^	struct lock_class_stats stats;$/;"	m	struct:lock_stat_data	typeref:struct:lock_stat_data::lock_class_stats	file:
stats	kernel/lockdep_proc.c	/^	struct lock_stat_data stats[MAX_LOCKDEP_KEYS];$/;"	m	struct:lock_stat_seq	typeref:struct:lock_stat_seq::lock_stat_data	file:
stats	kernel/rcutorture.c	/^	int (*stats)(char *page);$/;"	m	struct:rcu_torture_ops	file:
stats_task	kernel/rcutorture.c	/^static struct task_struct *stats_task;$/;"	v	typeref:struct:task_struct	file:
status	fs/compat_ioctl.c	/^	unsigned char status;		\/* [o] scsi status *\/$/;"	m	struct:sg_io_hdr32	file:
status	mm/migrate.c	/^	int status;$/;"	m	struct:page_to_node	file:
stdin	kernel/kmod.c	/^	struct file *stdin;$/;"	m	struct:subprocess_info	typeref:struct:subprocess_info::file	file:
stop_cpu	kernel/stop_machine.c	/^static void stop_cpu(struct work_struct *unused)$/;"	f	file:
stop_machine	kernel/stop_machine.c	/^EXPORT_SYMBOL_GPL(stop_machine);$/;"	v
stop_machine	kernel/stop_machine.c	/^int stop_machine(int (*fn)(void *), void *data, const struct cpumask *cpus)$/;"	f
stop_machine_create	kernel/stop_machine.c	/^EXPORT_SYMBOL_GPL(stop_machine_create);$/;"	v
stop_machine_create	kernel/stop_machine.c	/^int stop_machine_create(void)$/;"	f
stop_machine_data	kernel/stop_machine.c	/^struct stop_machine_data {$/;"	s	file:
stop_machine_destroy	kernel/stop_machine.c	/^EXPORT_SYMBOL_GPL(stop_machine_destroy);$/;"	v
stop_machine_destroy	kernel/stop_machine.c	/^void stop_machine_destroy(void)$/;"	f
stop_machine_work	kernel/stop_machine.c	/^static void *stop_machine_work;$/;"	v	file:
stop_machine_wq	kernel/stop_machine.c	/^static struct workqueue_struct *stop_machine_wq;$/;"	v	typeref:struct:workqueue_struct	file:
stop_process_timers	kernel/posix-cpu-timers.c	/^static void stop_process_timers(struct task_struct *tsk)$/;"	f	file:
stop_scan_thread	mm/kmemleak.c	/^static void stop_scan_thread(void)$/;"	f	file:
stopmachine_state	kernel/stop_machine.c	/^enum stopmachine_state {$/;"	g	file:
stopref	kernel/module.c	/^struct stopref$/;"	s	file:
store	mm/slub.c	/^	ssize_t (*store)(struct kmem_cache *s, const char *x, size_t count);$/;"	m	struct:slab_attribute	file:
store_stackinfo	mm/slab.c	/^static void store_stackinfo(struct kmem_cache *cachep, unsigned long *addr,$/;"	f	file:
store_stacktrace	kernel/latencytop.c	/^static inline void store_stacktrace(struct task_struct *tsk,$/;"	f	file:
store_user	mm/slub.c	/^SLAB_ATTR(store_user);$/;"	v
store_user_show	mm/slub.c	/^static ssize_t store_user_show(struct kmem_cache *s, char *buf)$/;"	f	file:
store_user_store	mm/slub.c	/^static ssize_t store_user_store(struct kmem_cache *s,$/;"	f	file:
str	fs/namespace.c	/^	const char *str;$/;"	m	struct:proc_fs_info	file:
strcasecmp	lib/string.c	/^EXPORT_SYMBOL(strcasecmp);$/;"	v
strcasecmp	lib/string.c	/^int strcasecmp(const char *s1, const char *s2)$/;"	f
strcat	lib/string.c	/^EXPORT_SYMBOL(strcat);$/;"	v
strcat	lib/string.c	/^char *strcat(char *dest, const char *src)$/;"	f
strcat	lib/string.c	170;"	d	file:
strchr	lib/string.c	/^EXPORT_SYMBOL(strchr);$/;"	v
strchr	lib/string.c	/^char *strchr(const char *s, int c)$/;"	f
strcmp	lib/string.c	/^EXPORT_SYMBOL(strcmp);$/;"	v
strcmp	lib/string.c	/^int strcmp(const char *cs, const char *ct)$/;"	f
strcmp	lib/string.c	246;"	d	file:
strcmp_prefix	fs/xattr.c	/^strcmp_prefix(const char *a, const char *a_prefix)$/;"	f	file:
strcpy	lib/string.c	/^EXPORT_SYMBOL(strcpy);$/;"	v
strcpy	lib/string.c	/^char *strcpy(char *dest, const char *src)$/;"	f
strcpy	lib/string.c	97;"	d	file:
strcspn	lib/string.c	/^EXPORT_SYMBOL(strcspn);$/;"	v
strcspn	lib/string.c	/^size_t strcspn(const char *s, const char *reject)$/;"	f
strict_iomem	kernel/resource.c	/^static int __init strict_iomem(char *str)$/;"	f	file:
strict_iomem_checks	kernel/resource.c	/^static int strict_iomem_checks = 1;$/;"	v	file:
strict_iomem_checks	kernel/resource.c	/^static int strict_iomem_checks;$/;"	v	file:
strim	lib/string.c	/^EXPORT_SYMBOL(strim);$/;"	v
strim	lib/string.c	/^char *strim(char *s)$/;"	f
strlcat	lib/string.c	/^EXPORT_SYMBOL(strlcat);$/;"	v
strlcat	lib/string.c	/^size_t strlcat(char *dest, const char *src, size_t count)$/;"	f
strlcpy	lib/string.c	/^EXPORT_SYMBOL(strlcpy);$/;"	v
strlcpy	lib/string.c	/^size_t strlcpy(char *dest, const char *src, size_t size)$/;"	f
strlen	lib/string.c	/^EXPORT_SYMBOL(strlen);$/;"	v
strlen	lib/string.c	/^size_t strlen(const char *s)$/;"	f
strncasecmp	lib/string.c	/^EXPORT_SYMBOL(strncasecmp);$/;"	v
strncasecmp	lib/string.c	/^int strncasecmp(const char *s1, const char *s2, size_t n)$/;"	f
strncat	lib/string.c	/^EXPORT_SYMBOL(strncat);$/;"	v
strncat	lib/string.c	/^char *strncat(char *dest, const char *src, size_t count)$/;"	f
strnchr	lib/string.c	/^EXPORT_SYMBOL(strnchr);$/;"	v
strnchr	lib/string.c	/^char *strnchr(const char *s, size_t count, int c)$/;"	f
strncmp	lib/string.c	/^EXPORT_SYMBOL(strncmp);$/;"	v
strncmp	lib/string.c	/^int strncmp(const char *cs, const char *ct, size_t count)$/;"	f
strncpy	lib/string.c	/^EXPORT_SYMBOL(strncpy);$/;"	v
strncpy	lib/string.c	/^char *strncpy(char *dest, const char *src, size_t count)$/;"	f
strndup_user	mm/util.c	/^EXPORT_SYMBOL(strndup_user);$/;"	v
strndup_user	mm/util.c	/^char *strndup_user(const char __user *s, long n)$/;"	f
strnicmp	lib/string.c	/^EXPORT_SYMBOL(strnicmp);$/;"	v
strnicmp	lib/string.c	/^int strnicmp(const char *s1, const char *s2, size_t len)$/;"	f
strnlen	lib/string.c	/^EXPORT_SYMBOL(strnlen);$/;"	v
strnlen	lib/string.c	/^size_t strnlen(const char *s, size_t count)$/;"	f
strnstr	lib/string.c	/^EXPORT_SYMBOL(strnstr);$/;"	v
strnstr	lib/string.c	/^char *strnstr(const char *s1, const char *s2, size_t len)$/;"	f
strong_try_module_get	kernel/module.c	/^static inline int strong_try_module_get(struct module *mod)$/;"	f	file:
strpbrk	lib/string.c	/^EXPORT_SYMBOL(strpbrk);$/;"	v
strpbrk	lib/string.c	/^char *strpbrk(const char *cs, const char *ct)$/;"	f
strrchr	lib/string.c	/^EXPORT_SYMBOL(strrchr);$/;"	v
strrchr	lib/string.c	/^char *strrchr(const char *s, int c)$/;"	f
strsep	lib/string.c	/^EXPORT_SYMBOL(strsep);$/;"	v
strsep	lib/string.c	/^char *strsep(char **s, const char *ct)$/;"	f
strspn	lib/string.c	/^EXPORT_SYMBOL(strspn);$/;"	v
strspn	lib/string.c	/^size_t strspn(const char *s, const char *accept)$/;"	f
strstr	lib/string.c	/^EXPORT_SYMBOL(strstr);$/;"	v
strstr	lib/string.c	/^char *strstr(const char *s1, const char *s2)$/;"	f
struct_slob_page_wrong_size	mm/slob.c	/^static inline void struct_slob_page_wrong_size(void)$/;"	f	file:
stutter	kernel/rcutorture.c	/^static int stutter = 5;		\/* Start\/stop testing interval (in sec) *\/$/;"	v	file:
stutter_pause_test	kernel/rcutorture.c	/^static int stutter_pause_test;$/;"	v	file:
stutter_task	kernel/rcutorture.c	/^static struct task_struct *stutter_task;$/;"	v	typeref:struct:task_struct	file:
sub_preempt_count	kernel/sched.c	/^EXPORT_SYMBOL(sub_preempt_count);$/;"	v
sub_preempt_count	kernel/sched.c	/^void __kprobes sub_preempt_count(int val)$/;"	f
subbuf_actor_t	kernel/relay.c	/^typedef int (*subbuf_actor_t) (size_t read_start,$/;"	t	file:
subbuf_read_actor	kernel/relay.c	/^static int subbuf_read_actor(size_t read_start,$/;"	f	file:
subbuf_splice_actor	kernel/relay.c	/^static int subbuf_splice_actor(struct file *in,$/;"	f	file:
subbuf_start_default_callback	kernel/relay.c	/^static int subbuf_start_default_callback (struct rchan_buf *buf,$/;"	f	file:
submit_bh	fs/buffer.c	/^EXPORT_SYMBOL(submit_bh);$/;"	v
submit_bh	fs/buffer.c	/^int submit_bh(int rw, struct buffer_head * bh)$/;"	f
submit_page_section	fs/direct-io.c	/^submit_page_section(struct dio *dio, struct page *page,$/;"	f	file:
subprocess_info	kernel/kmod.c	/^struct subprocess_info {$/;"	s	file:
subsys	kernel/cgroup.c	/^static struct cgroup_subsys *subsys[] = {$/;"	v	typeref:struct:cgroup_subsys	file:
subsys_bits	kernel/cgroup.c	/^	unsigned long subsys_bits;$/;"	m	struct:cgroup_sb_opts	file:
subsys_bits	kernel/cgroup.c	/^	unsigned long subsys_bits;$/;"	m	struct:cgroupfs_root	file:
subsys_list	kernel/cgroup.c	/^	struct list_head subsys_list;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::list_head	file:
suid	kernel/auditsc.c	/^	uid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
suid_dumpable	fs/exec.c	/^int suid_dumpable = 0;$/;"	v
sum_nr_running	kernel/sched.c	/^	unsigned long sum_nr_running; \/* Nr tasks running in the group *\/$/;"	m	struct:sg_lb_stats	file:
sum_time	mm/slub.c	/^	long long sum_time;$/;"	m	struct:location	file:
sum_vm_events	mm/vmstat.c	/^static void sum_vm_events(unsigned long *ret, const struct cpumask *cpumask)$/;"	f	file:
sum_weighted_load	kernel/sched.c	/^	unsigned long sum_weighted_load; \/* Weighted load of group's tasks *\/$/;"	m	struct:sg_lb_stats	file:
super_blocks	fs/super.c	/^LIST_HEAD(super_blocks);$/;"	v
surplus_hugepages	mm/hugetlb.c	/^HSTATE_ATTR_RO(surplus_hugepages);$/;"	v
surplus_hugepages_show	mm/hugetlb.c	/^static ssize_t surplus_hugepages_show(struct kobject *kobj,$/;"	f	file:
suspend_console	kernel/printk.c	/^void suspend_console(void)$/;"	f
svc32_nthreads	fs/compat.c	/^	s32			svc32_nthreads;$/;"	m	struct:compat_nfsctl_svc	file:
svc32_port	fs/compat.c	/^	u16			svc32_port;$/;"	m	struct:compat_nfsctl_svc	file:
sw_perf_event_destroy	kernel/perf_event.c	/^static void sw_perf_event_destroy(struct perf_event *event)$/;"	f	file:
sw_perf_event_init	kernel/perf_event.c	/^static const struct pmu *sw_perf_event_init(struct perf_event *event)$/;"	f	file:
swap_aops	mm/swap_state.c	/^static const struct address_space_operations swap_aops = {$/;"	v	typeref:struct:address_space_operations	file:
swap_backing_dev_info	mm/swap_state.c	/^static struct backing_dev_info swap_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info	file:
swap_cache_info	mm/swap_state.c	/^} swap_cache_info;$/;"	v	typeref:struct:__anon11	file:
swap_cgroup	mm/page_cgroup.c	/^struct swap_cgroup {$/;"	s	file:
swap_cgroup_ctrl	mm/page_cgroup.c	/^struct swap_cgroup_ctrl swap_cgroup_ctrl[MAX_SWAPFILES];$/;"	v	typeref:struct:swap_cgroup_ctrl
swap_cgroup_ctrl	mm/page_cgroup.c	/^struct swap_cgroup_ctrl {$/;"	s	file:
swap_cgroup_prepare	mm/page_cgroup.c	/^static int swap_cgroup_prepare(int type)$/;"	f	file:
swap_cgroup_record	mm/page_cgroup.c	/^unsigned short swap_cgroup_record(swp_entry_t ent, unsigned short id)$/;"	f
swap_cgroup_swapoff	mm/page_cgroup.c	/^void swap_cgroup_swapoff(int type)$/;"	f
swap_cgroup_swapon	mm/page_cgroup.c	/^int swap_cgroup_swapon(int type, unsigned long max_pages)$/;"	f
swap_count	mm/swapfile.c	/^static inline unsigned char swap_count(unsigned char ent)$/;"	f	file:
swap_count_continued	mm/swapfile.c	/^static bool swap_count_continued(struct swap_info_struct *si,$/;"	f	file:
swap_duplicate	mm/swapfile.c	/^int swap_duplicate(swp_entry_t entry)$/;"	f
swap_entry_free	mm/swapfile.c	/^static unsigned char swap_entry_free(struct swap_info_struct *p,$/;"	f	file:
swap_free	mm/swapfile.c	/^void swap_free(swp_entry_t entry)$/;"	f
swap_info	mm/swapfile.c	/^static struct swap_info_struct *swap_info[MAX_SWAPFILES];$/;"	v	typeref:struct:swap_info_struct	file:
swap_info_get	mm/swapfile.c	/^static struct swap_info_struct *swap_info_get(swp_entry_t entry)$/;"	f	file:
swap_list	mm/swapfile.c	/^static struct swap_list_t swap_list = {-1, -1};$/;"	v	typeref:struct:swap_list_t	file:
swap_next	mm/swapfile.c	/^static void *swap_next(struct seq_file *swap, void *v, loff_t *pos)$/;"	f	file:
swap_readpage	mm/page_io.c	/^int swap_readpage(struct page *page)$/;"	f
swap_setup	mm/swap.c	/^void __init swap_setup(void)$/;"	f
swap_shmem_alloc	mm/swapfile.c	/^void swap_shmem_alloc(swp_entry_t entry)$/;"	f
swap_show	mm/swapfile.c	/^static int swap_show(struct seq_file *swap, void *v)$/;"	f	file:
swap_start	mm/swapfile.c	/^static void *swap_start(struct seq_file *swap, loff_t *pos)$/;"	f	file:
swap_stop	mm/swapfile.c	/^static void swap_stop(struct seq_file *swap, void *v)$/;"	f	file:
swap_token_mm	mm/thrash.c	/^struct mm_struct *swap_token_mm;$/;"	v	typeref:struct:mm_struct
swap_type_of	mm/swapfile.c	/^int swap_type_of(dev_t device, sector_t offset, struct block_device **bdev_p)$/;"	f
swap_unplug_io_fn	mm/nommu.c	/^void swap_unplug_io_fn(struct backing_dev_info *bdi, struct page *page)$/;"	f
swap_unplug_io_fn	mm/swapfile.c	/^void swap_unplug_io_fn(struct backing_dev_info *unused_bdi, struct page *page)$/;"	f
swap_writepage	mm/page_io.c	/^int swap_writepage(struct page *page, struct writeback_control *wbc)$/;"	f
swapbacked	mm/memory-failure.c	720;"	d	file:
swapbacked	mm/memory-failure.c	777;"	d	file:
swapcache	mm/mempolicy.c	/^	unsigned long swapcache;$/;"	m	struct:numa_maps	file:
swapcache_free	mm/swapfile.c	/^void swapcache_free(swp_entry_t entry, struct page *page)$/;"	f
swapcache_prepare	mm/swapfile.c	/^int swapcache_prepare(swp_entry_t entry)$/;"	f
swapdev_block	mm/swapfile.c	/^sector_t swapdev_block(int type, pgoff_t offset)$/;"	f
swapin_readahead	mm/swap_state.c	/^struct page *swapin_readahead(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
swapper_space	mm/swap_state.c	/^struct address_space swapper_space = {$/;"	v	typeref:struct:address_space
swappiness	mm/memcontrol.c	/^	unsigned int	swappiness;$/;"	m	struct:mem_cgroup	file:
swappiness	mm/vmscan.c	/^	int swappiness;$/;"	m	struct:scan_control	file:
swaps_op	mm/swapfile.c	/^static const struct seq_operations swaps_op = {$/;"	v	typeref:struct:seq_operations	file:
swaps_open	mm/swapfile.c	/^static int swaps_open(struct inode *inode, struct file *file)$/;"	f	file:
switch_hrtimer_base	kernel/hrtimer.c	/^switch_hrtimer_base(struct hrtimer *timer, struct hrtimer_clock_base *base,$/;"	f	file:
switch_hrtimer_base	kernel/hrtimer.c	238;"	d	file:
switch_names	fs/dcache.c	/^static void switch_names(struct dentry *dentry, struct dentry *target)$/;"	f	file:
switch_task_namespaces	kernel/nsproxy.c	/^void switch_task_namespaces(struct task_struct *p, struct nsproxy *new)$/;"	f
switched_from_rt	kernel/sched_rt.c	/^static void switched_from_rt(struct rq *rq, struct task_struct *p,$/;"	f	file:
switched_to_fair	kernel/sched_fair.c	/^static void switched_to_fair(struct rq *rq, struct task_struct *p,$/;"	f	file:
switched_to_idle	kernel/sched_idletask.c	/^static void switched_to_idle(struct rq *rq, struct task_struct *p,$/;"	f	file:
switched_to_rt	kernel/sched_rt.c	/^static void switched_to_rt(struct rq *rq, struct task_struct *p,$/;"	f	file:
sym	kernel/module.c	/^	const struct kernel_symbol *sym;$/;"	m	struct:find_symbol_arg	typeref:struct:find_symbol_arg::kernel_symbol	file:
symbol_put_addr	kernel/module.c	/^EXPORT_SYMBOL_GPL(symbol_put_addr);$/;"	v
symbol_put_addr	kernel/module.c	/^void symbol_put_addr(void *addr)$/;"	f
symversion	kernel/module.c	196;"	d	file:
symversion	kernel/module.c	198;"	d	file:
sync	kernel/rcutorture.c	/^	void (*sync)(void);$/;"	m	struct:rcu_torture_ops	file:
sync_blockdev	fs/block_dev.c	/^EXPORT_SYMBOL(sync_blockdev);$/;"	v
sync_blockdev	fs/block_dev.c	/^int sync_blockdev(struct block_device *bdev)$/;"	f
sync_buffer	fs/buffer.c	/^static int sync_buffer(void *word)$/;"	f	file:
sync_child_event	kernel/perf_event.c	/^static void sync_child_event(struct perf_event *child_event,$/;"	f	file:
sync_dirty_buffer	fs/buffer.c	/^EXPORT_SYMBOL(sync_dirty_buffer);$/;"	v
sync_dirty_buffer	fs/buffer.c	/^int sync_dirty_buffer(struct buffer_head *bh)$/;"	f
sync_file_range	fs/sync.c	/^SYSCALL_DEFINE(sync_file_range)(int fd, loff_t offset, loff_t nbytes,$/;"	f
sync_file_range2	fs/sync.c	/^SYSCALL_DEFINE(sync_file_range2)(int fd, unsigned int flags,$/;"	f
sync_filesystem	fs/sync.c	/^EXPORT_SYMBOL_GPL(sync_filesystem);$/;"	v
sync_filesystem	fs/sync.c	/^int sync_filesystem(struct super_block *sb)$/;"	f
sync_filesystems	fs/sync.c	/^static void sync_filesystems(int wait)$/;"	f	file:
sync_inode	fs/fs-writeback.c	/^EXPORT_SYMBOL(sync_inode);$/;"	v
sync_inode	fs/fs-writeback.c	/^int sync_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f
sync_inodes_sb	fs/fs-writeback.c	/^EXPORT_SYMBOL(sync_inodes_sb);$/;"	v
sync_inodes_sb	fs/fs-writeback.c	/^void sync_inodes_sb(struct super_block *sb)$/;"	f
sync_mapping_buffers	fs/buffer.c	/^EXPORT_SYMBOL(sync_mapping_buffers);$/;"	v
sync_mapping_buffers	fs/buffer.c	/^int sync_mapping_buffers(struct address_space *mapping)$/;"	f
sync_mode	fs/fs-writeback.c	/^	enum writeback_sync_modes sync_mode;$/;"	m	struct:wb_writeback_args	typeref:enum:wb_writeback_args::writeback_sync_modes	file:
sync_page	mm/filemap.c	/^static int sync_page(void *word)$/;"	f	file:
sync_page_killable	mm/filemap.c	/^static int sync_page_killable(void *word)$/;"	f	file:
sync_rcu_preempt_exp_count	kernel/rcutree_plugin.h	/^static long sync_rcu_preempt_exp_count;$/;"	v
sync_rcu_preempt_exp_done	kernel/rcutree_plugin.h	/^static int sync_rcu_preempt_exp_done(struct rcu_node *rnp)$/;"	f
sync_rcu_preempt_exp_init	kernel/rcutree_plugin.h	/^sync_rcu_preempt_exp_init(struct rcu_state *rsp, struct rcu_node *rnp)$/;"	f
sync_supers	fs/super.c	/^void sync_supers(void)$/;"	f
sync_supers_timer	mm/backing-dev.c	/^static struct timer_list sync_supers_timer;$/;"	v	typeref:struct:timer_list	file:
sync_supers_timer_fn	mm/backing-dev.c	/^static void sync_supers_timer_fn(unsigned long unused)$/;"	f	file:
sync_supers_tsk	mm/backing-dev.c	/^static struct task_struct *sync_supers_tsk;$/;"	v	typeref:struct:task_struct	file:
sync_writeback_pages	mm/page-writeback.c	/^static inline long sync_writeback_pages(unsigned long dirtied)$/;"	f	file:
synchronize_rcu	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(synchronize_rcu);$/;"	v
synchronize_rcu	kernel/rcutree_plugin.h	/^void synchronize_rcu(void)$/;"	f
synchronize_rcu_bh	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(synchronize_rcu_bh);$/;"	v
synchronize_rcu_bh	kernel/rcutiny.c	/^void synchronize_rcu_bh(void)$/;"	f
synchronize_rcu_bh	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(synchronize_rcu_bh);$/;"	v
synchronize_rcu_bh	kernel/rcutree.c	/^void synchronize_rcu_bh(void)$/;"	f
synchronize_rcu_expedited	kernel/rcutree_plugin.h	/^EXPORT_SYMBOL_GPL(synchronize_rcu_expedited);$/;"	v
synchronize_rcu_expedited	kernel/rcutree_plugin.h	/^void synchronize_rcu_expedited(void)$/;"	f
synchronize_sched	kernel/rcutiny.c	/^EXPORT_SYMBOL_GPL(synchronize_sched);$/;"	v
synchronize_sched	kernel/rcutiny.c	/^void synchronize_sched(void)$/;"	f
synchronize_sched	kernel/rcutree.c	/^EXPORT_SYMBOL_GPL(synchronize_sched);$/;"	v
synchronize_sched	kernel/rcutree.c	/^void synchronize_sched(void)$/;"	f
synchronize_sched_expedited	kernel/sched.c	/^EXPORT_SYMBOL_GPL(synchronize_sched_expedited);$/;"	v
synchronize_sched_expedited	kernel/sched.c	/^void synchronize_sched_expedited(void)$/;"	f
synchronize_sched_expedited_count	kernel/sched.c	/^static long synchronize_sched_expedited_count;$/;"	v	file:
synchronize_srcu	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(synchronize_srcu);$/;"	v
synchronize_srcu	kernel/srcu.c	/^void synchronize_srcu(struct srcu_struct *sp)$/;"	f
synchronize_srcu_expedited	kernel/srcu.c	/^EXPORT_SYMBOL_GPL(synchronize_srcu_expedited);$/;"	v
synchronize_srcu_expedited	kernel/srcu.c	/^void synchronize_srcu_expedited(struct srcu_struct *sp)$/;"	f
sys32_ipc	kernel/sys_ni.c	/^cond_syscall(sys32_ipc);$/;"	v
sys32_quotactl	kernel/sys_ni.c	/^cond_syscall(sys32_quotactl);$/;"	v
sys_accept	kernel/sys_ni.c	/^cond_syscall(sys_accept);$/;"	v
sys_accept4	kernel/sys_ni.c	/^cond_syscall(sys_accept4);$/;"	v
sys_acct	kernel/sys_ni.c	/^cond_syscall(sys_acct);$/;"	v
sys_add_key	kernel/sys_ni.c	/^cond_syscall(sys_add_key);$/;"	v
sys_bdflush	kernel/sys_ni.c	/^cond_syscall(sys_bdflush);$/;"	v
sys_bind	kernel/sys_ni.c	/^cond_syscall(sys_bind);$/;"	v
sys_chown16	kernel/sys_ni.c	/^cond_syscall(sys_chown16);$/;"	v
sys_close	fs/open.c	/^EXPORT_SYMBOL(sys_close);$/;"	v
sys_connect	kernel/sys_ni.c	/^cond_syscall(sys_connect);$/;"	v
sys_delete_module	kernel/sys_ni.c	/^cond_syscall(sys_delete_module);$/;"	v
sys_epoll_create	kernel/sys_ni.c	/^cond_syscall(sys_epoll_create);$/;"	v
sys_epoll_create1	kernel/sys_ni.c	/^cond_syscall(sys_epoll_create1);$/;"	v
sys_epoll_ctl	kernel/sys_ni.c	/^cond_syscall(sys_epoll_ctl);$/;"	v
sys_epoll_pwait	kernel/sys_ni.c	/^cond_syscall(sys_epoll_pwait);$/;"	v
sys_epoll_wait	kernel/sys_ni.c	/^cond_syscall(sys_epoll_wait);$/;"	v
sys_eventfd	kernel/sys_ni.c	/^cond_syscall(sys_eventfd);$/;"	v
sys_eventfd2	kernel/sys_ni.c	/^cond_syscall(sys_eventfd2);$/;"	v
sys_fchown16	kernel/sys_ni.c	/^cond_syscall(sys_fchown16);$/;"	v
sys_flock	kernel/sys_ni.c	/^cond_syscall(sys_flock);$/;"	v
sys_futex	kernel/sys_ni.c	/^cond_syscall(sys_futex);$/;"	v
sys_get_mempolicy	kernel/sys_ni.c	/^cond_syscall(sys_get_mempolicy);$/;"	v
sys_get_robust_list	kernel/sys_ni.c	/^cond_syscall(sys_get_robust_list);$/;"	v
sys_getegid16	kernel/sys_ni.c	/^cond_syscall(sys_getegid16);$/;"	v
sys_geteuid16	kernel/sys_ni.c	/^cond_syscall(sys_geteuid16);$/;"	v
sys_getgid16	kernel/sys_ni.c	/^cond_syscall(sys_getgid16);$/;"	v
sys_getgroups16	kernel/sys_ni.c	/^cond_syscall(sys_getgroups16);$/;"	v
sys_getpeername	kernel/sys_ni.c	/^cond_syscall(sys_getpeername);$/;"	v
sys_getresgid16	kernel/sys_ni.c	/^cond_syscall(sys_getresgid16);$/;"	v
sys_getresuid16	kernel/sys_ni.c	/^cond_syscall(sys_getresuid16);$/;"	v
sys_getsockname	kernel/sys_ni.c	/^cond_syscall(sys_getsockname);$/;"	v
sys_getsockopt	kernel/sys_ni.c	/^cond_syscall(sys_getsockopt);$/;"	v
sys_getuid16	kernel/sys_ni.c	/^cond_syscall(sys_getuid16);$/;"	v
sys_init_module	kernel/sys_ni.c	/^cond_syscall(sys_init_module);$/;"	v
sys_inotify_add_watch	kernel/sys_ni.c	/^cond_syscall(sys_inotify_add_watch);$/;"	v
sys_inotify_init	kernel/sys_ni.c	/^cond_syscall(sys_inotify_init);$/;"	v
sys_inotify_init1	kernel/sys_ni.c	/^cond_syscall(sys_inotify_init1);$/;"	v
sys_inotify_rm_watch	kernel/sys_ni.c	/^cond_syscall(sys_inotify_rm_watch);$/;"	v
sys_io_cancel	kernel/sys_ni.c	/^cond_syscall(sys_io_cancel);$/;"	v
sys_io_destroy	kernel/sys_ni.c	/^cond_syscall(sys_io_destroy);$/;"	v
sys_io_getevents	kernel/sys_ni.c	/^cond_syscall(sys_io_getevents);$/;"	v
sys_io_setup	kernel/sys_ni.c	/^cond_syscall(sys_io_setup);$/;"	v
sys_io_submit	kernel/sys_ni.c	/^cond_syscall(sys_io_submit);$/;"	v
sys_ioprio_get	kernel/sys_ni.c	/^cond_syscall(sys_ioprio_get);$/;"	v
sys_ioprio_set	kernel/sys_ni.c	/^cond_syscall(sys_ioprio_set);$/;"	v
sys_kexec_load	kernel/sys_ni.c	/^cond_syscall(sys_kexec_load);$/;"	v
sys_keyctl	kernel/sys_ni.c	/^cond_syscall(sys_keyctl);$/;"	v
sys_lchown16	kernel/sys_ni.c	/^cond_syscall(sys_lchown16);$/;"	v
sys_listen	kernel/sys_ni.c	/^cond_syscall(sys_listen);$/;"	v
sys_lookup_dcookie	kernel/sys_ni.c	/^cond_syscall(sys_lookup_dcookie);$/;"	v
sys_madvise	kernel/sys_ni.c	/^cond_syscall(sys_madvise);$/;"	v
sys_mbind	kernel/sys_ni.c	/^cond_syscall(sys_mbind);$/;"	v
sys_migrate_pages	kernel/sys_ni.c	/^cond_syscall(sys_migrate_pages);$/;"	v
sys_mincore	kernel/sys_ni.c	/^cond_syscall(sys_mincore);$/;"	v
sys_mlock	kernel/sys_ni.c	/^cond_syscall(sys_mlock);$/;"	v
sys_mlockall	kernel/sys_ni.c	/^cond_syscall(sys_mlockall);$/;"	v
sys_move_pages	kernel/sys_ni.c	/^cond_syscall(sys_move_pages);$/;"	v
sys_mprotect	kernel/sys_ni.c	/^cond_syscall(sys_mprotect);$/;"	v
sys_mq_getsetattr	kernel/sys_ni.c	/^cond_syscall(sys_mq_getsetattr);$/;"	v
sys_mq_notify	kernel/sys_ni.c	/^cond_syscall(sys_mq_notify);$/;"	v
sys_mq_open	kernel/sys_ni.c	/^cond_syscall(sys_mq_open);$/;"	v
sys_mq_timedreceive	kernel/sys_ni.c	/^cond_syscall(sys_mq_timedreceive);$/;"	v
sys_mq_timedsend	kernel/sys_ni.c	/^cond_syscall(sys_mq_timedsend);$/;"	v
sys_mq_unlink	kernel/sys_ni.c	/^cond_syscall(sys_mq_unlink);$/;"	v
sys_mremap	kernel/sys_ni.c	/^cond_syscall(sys_mremap);$/;"	v
sys_msgctl	kernel/sys_ni.c	/^cond_syscall(sys_msgctl);$/;"	v
sys_msgget	kernel/sys_ni.c	/^cond_syscall(sys_msgget);$/;"	v
sys_msgrcv	kernel/sys_ni.c	/^cond_syscall(sys_msgrcv);$/;"	v
sys_msgsnd	kernel/sys_ni.c	/^cond_syscall(sys_msgsnd);$/;"	v
sys_msync	kernel/sys_ni.c	/^cond_syscall(sys_msync);$/;"	v
sys_munlock	kernel/sys_ni.c	/^cond_syscall(sys_munlock);$/;"	v
sys_munlockall	kernel/sys_ni.c	/^cond_syscall(sys_munlockall);$/;"	v
sys_nfsservctl	kernel/sys_ni.c	/^cond_syscall(sys_nfsservctl);$/;"	v
sys_ni_syscall	kernel/sys_ni.c	/^asmlinkage long sys_ni_syscall(void)$/;"	f
sys_pciconfig_iobase	kernel/sys_ni.c	/^cond_syscall(sys_pciconfig_iobase);$/;"	v
sys_pciconfig_read	kernel/sys_ni.c	/^cond_syscall(sys_pciconfig_read);$/;"	v
sys_pciconfig_write	kernel/sys_ni.c	/^cond_syscall(sys_pciconfig_write);$/;"	v
sys_perf_event_open	kernel/sys_ni.c	/^cond_syscall(sys_perf_event_open);$/;"	v
sys_quotactl	kernel/sys_ni.c	/^cond_syscall(sys_quotactl);$/;"	v
sys_recv	kernel/sys_ni.c	/^cond_syscall(sys_recv);$/;"	v
sys_recvfrom	kernel/sys_ni.c	/^cond_syscall(sys_recvfrom);$/;"	v
sys_recvmmsg	kernel/sys_ni.c	/^cond_syscall(sys_recvmmsg);$/;"	v
sys_recvmsg	kernel/sys_ni.c	/^cond_syscall(sys_recvmsg);$/;"	v
sys_remap_file_pages	kernel/sys_ni.c	/^cond_syscall(sys_remap_file_pages);$/;"	v
sys_request_key	kernel/sys_ni.c	/^cond_syscall(sys_request_key);$/;"	v
sys_semctl	kernel/sys_ni.c	/^cond_syscall(sys_semctl);$/;"	v
sys_semget	kernel/sys_ni.c	/^cond_syscall(sys_semget);$/;"	v
sys_semop	kernel/sys_ni.c	/^cond_syscall(sys_semop);$/;"	v
sys_semtimedop	kernel/sys_ni.c	/^cond_syscall(sys_semtimedop);$/;"	v
sys_send	kernel/sys_ni.c	/^cond_syscall(sys_send);$/;"	v
sys_sendmsg	kernel/sys_ni.c	/^cond_syscall(sys_sendmsg);$/;"	v
sys_sendto	kernel/sys_ni.c	/^cond_syscall(sys_sendto);$/;"	v
sys_set_mempolicy	kernel/sys_ni.c	/^cond_syscall(sys_set_mempolicy);$/;"	v
sys_set_robust_list	kernel/sys_ni.c	/^cond_syscall(sys_set_robust_list);$/;"	v
sys_setfsgid16	kernel/sys_ni.c	/^cond_syscall(sys_setfsgid16);$/;"	v
sys_setfsuid16	kernel/sys_ni.c	/^cond_syscall(sys_setfsuid16);$/;"	v
sys_setgid16	kernel/sys_ni.c	/^cond_syscall(sys_setgid16);$/;"	v
sys_setgroups16	kernel/sys_ni.c	/^cond_syscall(sys_setgroups16);$/;"	v
sys_setregid16	kernel/sys_ni.c	/^cond_syscall(sys_setregid16);$/;"	v
sys_setresgid16	kernel/sys_ni.c	/^cond_syscall(sys_setresgid16);$/;"	v
sys_setresuid16	kernel/sys_ni.c	/^cond_syscall(sys_setresuid16);$/;"	v
sys_setreuid16	kernel/sys_ni.c	/^cond_syscall(sys_setreuid16);$/;"	v
sys_setsockopt	kernel/sys_ni.c	/^cond_syscall(sys_setsockopt);$/;"	v
sys_setuid16	kernel/sys_ni.c	/^cond_syscall(sys_setuid16);$/;"	v
sys_shmat	kernel/sys_ni.c	/^cond_syscall(sys_shmat);$/;"	v
sys_shmctl	kernel/sys_ni.c	/^cond_syscall(sys_shmctl);$/;"	v
sys_shmdt	kernel/sys_ni.c	/^cond_syscall(sys_shmdt);$/;"	v
sys_shmget	kernel/sys_ni.c	/^cond_syscall(sys_shmget);$/;"	v
sys_shutdown	kernel/sys_ni.c	/^cond_syscall(sys_shutdown);$/;"	v
sys_signalfd	kernel/sys_ni.c	/^cond_syscall(sys_signalfd);$/;"	v
sys_signalfd4	kernel/sys_ni.c	/^cond_syscall(sys_signalfd4);$/;"	v
sys_socket	kernel/sys_ni.c	/^cond_syscall(sys_socket);$/;"	v
sys_socketcall	kernel/sys_ni.c	/^cond_syscall(sys_socketcall);$/;"	v
sys_socketpair	kernel/sys_ni.c	/^cond_syscall(sys_socketpair);$/;"	v
sys_spu_create	kernel/sys_ni.c	/^cond_syscall(sys_spu_create);$/;"	v
sys_spu_run	kernel/sys_ni.c	/^cond_syscall(sys_spu_run);$/;"	v
sys_subpage_prot	kernel/sys_ni.c	/^cond_syscall(sys_subpage_prot);$/;"	v
sys_swapoff	kernel/sys_ni.c	/^cond_syscall(sys_swapoff);$/;"	v
sys_swapon	kernel/sys_ni.c	/^cond_syscall(sys_swapon);$/;"	v
sys_syslog	kernel/sys_ni.c	/^cond_syscall(sys_syslog);$/;"	v
sys_timerfd_create	kernel/sys_ni.c	/^cond_syscall(sys_timerfd_create);$/;"	v
sys_timerfd_gettime	kernel/sys_ni.c	/^cond_syscall(sys_timerfd_gettime);$/;"	v
sys_timerfd_settime	kernel/sys_ni.c	/^cond_syscall(sys_timerfd_settime);$/;"	v
sys_tracepoint_refcount	kernel/tracepoint.c	/^static int sys_tracepoint_refcount;$/;"	v	file:
sys_tz	kernel/time.c	/^EXPORT_SYMBOL(sys_tz);$/;"	v
sys_tz	kernel/time.c	/^struct timezone sys_tz;$/;"	v	typeref:struct:timezone
sys_vm86	kernel/sys_ni.c	/^cond_syscall(sys_vm86);$/;"	v
sys_vm86old	kernel/sys_ni.c	/^cond_syscall(sys_vm86old);$/;"	v
syscall_regfunc	kernel/tracepoint.c	/^void syscall_regfunc(void)$/;"	f
syscall_unregfunc	kernel/tracepoint.c	/^void syscall_unregfunc(void)$/;"	f
sysctl_check_leaf	kernel/sysctl_check.c	/^static void sysctl_check_leaf(struct nsproxy *namespaces,$/;"	f	file:
sysctl_check_lookup	kernel/sysctl_check.c	/^static struct ctl_table *sysctl_check_lookup(struct nsproxy *namespaces,$/;"	f	file:
sysctl_check_table	kernel/sysctl_check.c	/^int sysctl_check_table(struct nsproxy *namespaces, struct ctl_table *table)$/;"	f
sysctl_depth	kernel/sysctl_check.c	/^static int sysctl_depth(struct ctl_table *table)$/;"	f	file:
sysctl_drop_caches	fs/drop_caches.c	/^int sysctl_drop_caches;$/;"	v
sysctl_getname	kernel/sysctl_binary.c	/^static char *sysctl_getname(const int *name, int nlen, const struct bin_table **tablep)$/;"	f	file:
sysctl_head_finish	kernel/sysctl.c	/^void sysctl_head_finish(struct ctl_table_header *head)$/;"	f
sysctl_head_get	kernel/sysctl.c	/^void sysctl_head_get(struct ctl_table_header *head)$/;"	f
sysctl_head_grab	kernel/sysctl.c	/^struct ctl_table_header *sysctl_head_grab(struct ctl_table_header *head)$/;"	f
sysctl_head_next	kernel/sysctl.c	/^struct ctl_table_header *sysctl_head_next(struct ctl_table_header *prev)$/;"	f
sysctl_head_put	kernel/sysctl.c	/^void sysctl_head_put(struct ctl_table_header *head)$/;"	f
sysctl_hung_task_check_count	kernel/hung_task.c	/^unsigned long __read_mostly sysctl_hung_task_check_count = PID_MAX_LIMIT;$/;"	v
sysctl_hung_task_panic	kernel/hung_task.c	/^unsigned int __read_mostly sysctl_hung_task_panic =$/;"	v
sysctl_hung_task_timeout_secs	kernel/hung_task.c	/^unsigned long __read_mostly sysctl_hung_task_timeout_secs = 120;$/;"	v
sysctl_hung_task_warnings	kernel/hung_task.c	/^unsigned long __read_mostly sysctl_hung_task_warnings = 10;$/;"	v
sysctl_init	kernel/sysctl.c	/^core_initcall(sysctl_init);$/;"	v
sysctl_init	kernel/sysctl.c	/^static __init int sysctl_init(void)$/;"	f	file:
sysctl_is_seen	kernel/sysctl.c	/^int sysctl_is_seen(struct ctl_table_header *p)$/;"	f
sysctl_legacy_va_layout	kernel/sysctl.c	/^int sysctl_legacy_va_layout;$/;"	v
sysctl_lowmem_reserve_ratio	mm/page_alloc.c	/^int sysctl_lowmem_reserve_ratio[MAX_NR_ZONES-1] = {$/;"	v
sysctl_max_map_count	mm/nommu.c	/^int sysctl_max_map_count = DEFAULT_MAX_MAP_COUNT;$/;"	v
sysctl_min_slab_ratio	mm/vmscan.c	/^int sysctl_min_slab_ratio = 5;$/;"	v
sysctl_min_slab_ratio_sysctl_handler	mm/page_alloc.c	/^int sysctl_min_slab_ratio_sysctl_handler(ctl_table *table, int write,$/;"	f
sysctl_min_unmapped_ratio	mm/vmscan.c	/^int sysctl_min_unmapped_ratio = 1;$/;"	v
sysctl_min_unmapped_ratio_sysctl_handler	mm/page_alloc.c	/^int sysctl_min_unmapped_ratio_sysctl_handler(ctl_table *table, int write,$/;"	f
sysctl_nr_open_max	fs/file.c	/^int sysctl_nr_open_max = 1024 * 1024; \/* raised later *\/$/;"	v
sysctl_nr_open_min	fs/file.c	/^int sysctl_nr_open_min = BITS_PER_LONG;$/;"	v
sysctl_nr_trim_pages	mm/nommu.c	/^int sysctl_nr_trim_pages = CONFIG_NOMMU_INITIAL_TRIM_EXCESS;$/;"	v
sysctl_oom_dump_tasks	mm/oom_kill.c	/^int sysctl_oom_dump_tasks;$/;"	v
sysctl_oom_kill_allocating_task	mm/oom_kill.c	/^int sysctl_oom_kill_allocating_task;$/;"	v
sysctl_overcommit_memory	mm/mmap.c	/^int sysctl_overcommit_memory = OVERCOMMIT_GUESS;  \/* heuristic overcommit *\/$/;"	v
sysctl_overcommit_memory	mm/nommu.c	/^int sysctl_overcommit_memory = OVERCOMMIT_GUESS; \/* heuristic overcommit *\/$/;"	v
sysctl_overcommit_ratio	mm/mmap.c	/^int sysctl_overcommit_ratio = 50;	\/* default is 50% *\/$/;"	v
sysctl_overcommit_ratio	mm/nommu.c	/^int sysctl_overcommit_ratio = 50; \/* default is 50% *\/$/;"	v
sysctl_panic_on_oom	mm/oom_kill.c	/^int sysctl_panic_on_oom;$/;"	v
sysctl_parent	kernel/sysctl_check.c	/^static struct ctl_table *sysctl_parent(struct ctl_table *table, int n)$/;"	f	file:
sysctl_perm	kernel/sysctl.c	/^int sysctl_perm(struct ctl_table_root *root, struct ctl_table *table, int op)$/;"	f
sysctl_print_path	kernel/sysctl_check.c	/^static void sysctl_print_path(struct ctl_table *table)$/;"	f	file:
sysctl_sched_compat_yield	kernel/sched_fair.c	/^unsigned int __read_mostly sysctl_sched_compat_yield;$/;"	v
sysctl_sched_features	kernel/sched.c	/^const_debug unsigned int sysctl_sched_features =$/;"	v
sysctl_sched_latency	kernel/sched_fair.c	/^unsigned int sysctl_sched_latency = 5000000ULL;$/;"	v
sysctl_sched_migration_cost	kernel/sched_fair.c	/^const_debug unsigned int sysctl_sched_migration_cost = 500000UL;$/;"	v
sysctl_sched_min_granularity	kernel/sched_fair.c	/^unsigned int sysctl_sched_min_granularity = 1000000ULL;$/;"	v
sysctl_sched_nr_migrate	kernel/sched.c	/^const_debug unsigned int sysctl_sched_nr_migrate = 32;$/;"	v
sysctl_sched_rt_period	kernel/sched.c	/^unsigned int sysctl_sched_rt_period = 1000000;$/;"	v
sysctl_sched_rt_runtime	kernel/sched.c	/^int sysctl_sched_rt_runtime = 950000;$/;"	v
sysctl_sched_shares_ratelimit	kernel/sched.c	/^unsigned int sysctl_sched_shares_ratelimit = 250000;$/;"	v
sysctl_sched_shares_thresh	kernel/sched.c	/^unsigned int sysctl_sched_shares_thresh = 4;$/;"	v
sysctl_sched_time_avg	kernel/sched.c	/^const_debug unsigned int sysctl_sched_time_avg = MSEC_PER_SEC;$/;"	v
sysctl_sched_tunable_scaling	kernel/sched_fair.c	/^enum sched_tunable_scaling sysctl_sched_tunable_scaling$/;"	v	typeref:enum:sched_tunable_scaling
sysctl_sched_wakeup_granularity	kernel/sched_fair.c	/^unsigned int sysctl_sched_wakeup_granularity = 1000000UL;$/;"	v
sysctl_set_parent	kernel/sysctl.c	/^static void sysctl_set_parent(struct ctl_table *parent, struct ctl_table *table)$/;"	f	file:
sysctl_table_root	kernel/sysctl.c	/^static struct ctl_table_root sysctl_table_root = {$/;"	v	typeref:struct:ctl_table_root	file:
sysctl_table_root	kernel/sysctl.c	/^static struct ctl_table_root sysctl_table_root;$/;"	v	typeref:struct:ctl_table_root	file:
sysctl_timer_migration	kernel/sched.c	/^const_debug unsigned int sysctl_timer_migration = 1;$/;"	v
sysctl_vfs_cache_pressure	fs/dcache.c	/^EXPORT_SYMBOL_GPL(sysctl_vfs_cache_pressure);$/;"	v
sysdev	kernel/rtmutex-tester.c	/^	struct sys_device	sysdev;$/;"	m	struct:test_thread_data	typeref:struct:test_thread_data::sys_device	file:
sysfs_add_func	mm/slub.c	/^static void sysfs_add_func(struct work_struct *w)$/;"	f	file:
sysfs_slab_add	mm/slub.c	/^static inline int sysfs_slab_add(struct kmem_cache *s) { return 0; }$/;"	f	file:
sysfs_slab_add	mm/slub.c	/^static int sysfs_slab_add(struct kmem_cache *s)$/;"	f	file:
sysfs_slab_alias	mm/slub.c	/^static inline int sysfs_slab_alias(struct kmem_cache *s, const char *p)$/;"	f	file:
sysfs_slab_alias	mm/slub.c	/^static int sysfs_slab_alias(struct kmem_cache *s, const char *name)$/;"	f	file:
sysfs_slab_remove	mm/slub.c	/^static inline void sysfs_slab_remove(struct kmem_cache *s)$/;"	f	file:
sysfs_slab_remove	mm/slub.c	/^static void sysfs_slab_remove(struct kmem_cache *s)$/;"	f	file:
sysfs_streq	lib/string.c	/^EXPORT_SYMBOL(sysfs_streq);$/;"	v
sysfs_streq	lib/string.c	/^bool sysfs_streq(const char *s1, const char *s2)$/;"	f
sysfs_test_command	kernel/rtmutex-tester.c	/^static ssize_t sysfs_test_command(struct sys_device *dev, struct sysdev_attribute *attr,$/;"	f	file:
sysfs_test_status	kernel/rtmutex-tester.c	/^static ssize_t sysfs_test_status(struct sys_device *dev, struct sysdev_attribute *attr,$/;"	f	file:
sysrq_gdb_op	kernel/kgdb.c	/^static struct sysrq_key_op sysrq_gdb_op = {$/;"	v	typeref:struct:sysrq_key_op	file:
sysrq_handle_gdb	kernel/kgdb.c	/^static void sysrq_handle_gdb(int key, struct tty_struct *tty)$/;"	f	file:
sysrq_sched_debug_show	kernel/sched_debug.c	/^static void sysrq_sched_debug_show(void)$/;"	f	file:
tag_chunk	kernel/audit_tree.c	/^static int tag_chunk(struct inode *inode, struct audit_tree *tree)$/;"	f	file:
tag_clear	lib/radix-tree.c	/^static inline void tag_clear(struct radix_tree_node *node, unsigned int tag,$/;"	f	file:
tag_get	lib/radix-tree.c	/^static inline int tag_get(struct radix_tree_node *node, unsigned int tag,$/;"	f	file:
tag_set	lib/radix-tree.c	/^static inline void tag_set(struct radix_tree_node *node, unsigned int tag,$/;"	f	file:
tags	lib/radix-tree.c	/^	unsigned long	tags[RADIX_TREE_MAX_TAGS][RADIX_TREE_TAG_LONGS];$/;"	m	struct:radix_tree_node	file:
tail	fs/direct-io.c	/^	unsigned tail;			\/* last valid page + 1 *\/$/;"	m	struct:dio	file:
tail	kernel/softirq.c	/^	struct tasklet_struct **tail;$/;"	m	struct:tasklet_head	typeref:struct:tasklet_head::tasklet_struct	file:
tail	mm/memory-failure.c	722;"	d	file:
tail	mm/memory-failure.c	779;"	d	file:
tainted_mask	kernel/panic.c	/^static unsigned long tainted_mask;$/;"	v	file:
take_cpu_down	kernel/cpu.c	/^static int __ref take_cpu_down(void *_param)$/;"	f	file:
take_cpu_down_param	kernel/cpu.c	/^struct take_cpu_down_param {$/;"	s	file:
takeover_tasklets	kernel/softirq.c	/^static void takeover_tasklets(unsigned int cpu)$/;"	f	file:
target	kernel/test_kprobes.c	/^static u32 (*target)(u32 value);$/;"	v	file:
target2	kernel/test_kprobes.c	/^static u32 (*target2)(u32 value);$/;"	v	file:
target_auid	kernel/auditsc.c	/^	uid_t			target_auid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_auid	kernel/auditsc.c	/^	uid_t		    target_auid;$/;"	m	struct:audit_context	file:
target_comm	kernel/auditsc.c	/^	char		    target_comm[TASK_COMM_LEN];$/;"	m	struct:audit_context	file:
target_comm	kernel/auditsc.c	/^	char 			target_comm[AUDIT_AUX_PIDS][TASK_COMM_LEN];$/;"	m	struct:audit_aux_data_pids	file:
target_load	kernel/sched.c	/^static unsigned long target_load(int cpu, int type)$/;"	f	file:
target_pid	kernel/auditsc.c	/^	pid_t			target_pid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_pid	kernel/auditsc.c	/^	pid_t		    target_pid;$/;"	m	struct:audit_context	file:
target_sessionid	kernel/auditsc.c	/^	unsigned int		target_sessionid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_sessionid	kernel/auditsc.c	/^	unsigned int	    target_sessionid;$/;"	m	struct:audit_context	file:
target_sid	kernel/auditsc.c	/^	u32			target_sid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_sid	kernel/auditsc.c	/^	u32		    target_sid;$/;"	m	struct:audit_context	file:
target_uid	kernel/auditsc.c	/^	uid_t			target_uid[AUDIT_AUX_PIDS];$/;"	m	struct:audit_aux_data_pids	file:
target_uid	kernel/auditsc.c	/^	uid_t		    target_uid;$/;"	m	struct:audit_context	file:
target_value	kernel/pm_qos_params.c	/^	atomic_t target_value;$/;"	m	struct:pm_qos_object	file:
task	fs/binfmt_elf.c	/^	struct task_struct *task;$/;"	m	struct:elf_thread_core_info	typeref:struct:elf_thread_core_info::task_struct	file:
task	kernel/futex.c	/^	struct task_struct *task;$/;"	m	struct:futex_q	typeref:struct:futex_q::task_struct	file:
task	kernel/kgdb.c	/^	struct task_struct	*task;$/;"	m	struct:debuggerinfo_struct	typeref:struct:debuggerinfo_struct::task_struct	file:
task	kernel/perf_event.c	/^	struct task_struct		*task;$/;"	m	struct:perf_task_event	typeref:struct:perf_task_event::task_struct	file:
task	kernel/perf_event.c	/^	struct task_struct	*task;$/;"	m	struct:perf_comm_event	typeref:struct:perf_comm_event::task_struct	file:
task	kernel/rtmutex_common.h	/^	struct task_struct	*task;$/;"	m	struct:rt_mutex_waiter	typeref:struct:rt_mutex_waiter::task_struct
task	kernel/sched.c	/^	struct task_struct *task;$/;"	m	struct:migration_req	typeref:struct:migration_req::task_struct	file:
task	kernel/semaphore.c	/^	struct task_struct *task;$/;"	m	struct:semaphore_waiter	typeref:struct:semaphore_waiter::task_struct	file:
task	lib/rwsem-spinlock.c	/^	struct task_struct *task;$/;"	m	struct:rwsem_waiter	typeref:struct:rwsem_waiter::task_struct	file:
task_active_pid_ns	kernel/pid.c	/^EXPORT_SYMBOL_GPL(task_active_pid_ns);$/;"	v
task_active_pid_ns	kernel/pid.c	/^struct pid_namespace *task_active_pid_ns(struct task_struct *tsk)$/;"	f
task_blocks_on_rt_mutex	kernel/rtmutex.c	/^static int task_blocks_on_rt_mutex(struct rt_mutex *lock,$/;"	f	file:
task_bp_pinned	kernel/hw_breakpoint.c	/^static int task_bp_pinned(struct task_struct *tsk)$/;"	f	file:
task_ca	kernel/sched.c	/^static inline struct cpuacct *task_ca(struct task_struct *tsk)$/;"	f	file:
task_can_switch_user	kernel/user.c	/^int task_can_switch_user(struct user_struct *up, struct task_struct *tsk)$/;"	f
task_cfs_rq	kernel/sched_fair.c	/^static inline struct cfs_rq *task_cfs_rq(struct task_struct *p)$/;"	f	file:
task_cgroup_from_root	kernel/cgroup.c	/^static struct cgroup *task_cgroup_from_root(struct task_struct *task,$/;"	f	file:
task_clock_perf_event_disable	kernel/perf_event.c	/^static void task_clock_perf_event_disable(struct perf_event *event)$/;"	f	file:
task_clock_perf_event_enable	kernel/perf_event.c	/^static int task_clock_perf_event_enable(struct perf_event *event)$/;"	f	file:
task_clock_perf_event_read	kernel/perf_event.c	/^static void task_clock_perf_event_read(struct perf_event *event)$/;"	f	file:
task_clock_perf_event_update	kernel/perf_event.c	/^static void task_clock_perf_event_update(struct perf_event *event, u64 now)$/;"	f	file:
task_cputime_expired	kernel/posix-cpu-timers.c	/^static inline int task_cputime_expired(const struct task_cputime *sample,$/;"	f	file:
task_cputime_zero	kernel/posix-cpu-timers.c	/^static inline int task_cputime_zero(const struct task_cputime *cputime)$/;"	f	file:
task_cs	kernel/cpuset.c	/^static inline struct cpuset *task_cs(struct task_struct *task)$/;"	f	file:
task_ctx	kernel/perf_event.c	/^	struct perf_event_context	*task_ctx;$/;"	m	struct:perf_task_event	typeref:struct:perf_task_event::perf_event_context	file:
task_curr	kernel/sched.c	/^inline int task_curr(const struct task_struct *p)$/;"	f
task_current	kernel/sched.c	/^static inline int task_current(struct rq *rq, struct task_struct *p)$/;"	f	file:
task_delta_exec	kernel/sched.c	/^unsigned long long task_delta_exec(struct task_struct *p)$/;"	f
task_dirties_fraction	mm/page-writeback.c	/^static inline void task_dirties_fraction(struct task_struct *tsk,$/;"	f	file:
task_dirty_inc	mm/page-writeback.c	/^void task_dirty_inc(struct task_struct *tsk)$/;"	f
task_dirty_limit	mm/page-writeback.c	/^static void task_dirty_limit(struct task_struct *tsk, unsigned long *pdirty)$/;"	f	file:
task_early_kill	mm/memory-failure.c	/^static int task_early_kill(struct task_struct *tsk)$/;"	f	file:
task_fork_fair	kernel/sched_fair.c	/^static void task_fork_fair(struct task_struct *p)$/;"	f	file:
task_freezer	kernel/cgroup_freezer.c	/^static inline struct freezer *task_freezer(struct task_struct *task)$/;"	f	file:
task_group	kernel/sched.c	/^static inline struct task_group *task_group(struct task_struct *p)$/;"	f	file:
task_group	kernel/sched.c	/^struct task_group {$/;"	s	file:
task_group_path	kernel/sched_debug.c	/^static void task_group_path(struct task_group *tg, char *buf, int buflen)$/;"	f	file:
task_handoff_register	kernel/profile.c	/^EXPORT_SYMBOL_GPL(task_handoff_register);$/;"	v
task_handoff_register	kernel/profile.c	/^int task_handoff_register(struct notifier_block *n)$/;"	f
task_handoff_unregister	kernel/profile.c	/^EXPORT_SYMBOL_GPL(task_handoff_unregister);$/;"	v
task_handoff_unregister	kernel/profile.c	/^int task_handoff_unregister(struct notifier_block *n)$/;"	f
task_has_pi_waiters	kernel/rtmutex_common.h	/^static inline int task_has_pi_waiters(struct task_struct *p)$/;"	f
task_has_rt_policy	kernel/sched.c	/^static inline int task_has_rt_policy(struct task_struct *p)$/;"	f	file:
task_hot	kernel/sched.c	/^task_hot(struct task_struct *p, u64 now, struct sched_domain *sd)$/;"	f	file:
task_in_mem_cgroup	mm/memcontrol.c	/^int task_in_mem_cgroup(struct task_struct *task, const struct mem_cgroup *mem)$/;"	f
task_nice	kernel/sched.c	/^EXPORT_SYMBOL(task_nice);$/;"	v
task_nice	kernel/sched.c	/^int task_nice(const struct task_struct *p)$/;"	f
task_of	kernel/sched_fair.c	/^static inline struct task_struct *task_of(struct sched_entity *se)$/;"	f	file:
task_oncpu_function_call	kernel/sched.c	/^void task_oncpu_function_call(struct task_struct *p,$/;"	f
task_pid_type	kernel/exit.c	/^struct pid *task_pid_type(struct task_struct *task, enum pid_type type)$/;"	f	file:
task_prio	kernel/sched.c	/^int task_prio(const struct task_struct *p)$/;"	f
task_rq	kernel/sched.c	660;"	d	file:
task_rq_unlock_wait	kernel/sched.c	/^void task_rq_unlock_wait(struct task_struct *p)$/;"	f
task_running	kernel/sched.c	/^static inline int task_running(struct rq *rq, struct task_struct *p)$/;"	f	file:
task_sched_runtime	kernel/sched.c	/^unsigned long long task_sched_runtime(struct task_struct *p)$/;"	f
task_stopped_code	kernel/exit.c	/^static int *task_stopped_code(struct task_struct *p, bool ptrace)$/;"	f	file:
task_struct_cachep	kernel/fork.c	/^static struct kmem_cache *task_struct_cachep;$/;"	v	typeref:struct:kmem_cache	file:
task_tgid_nr_ns	kernel/pid.c	/^EXPORT_SYMBOL(task_tgid_nr_ns);$/;"	v
task_tgid_nr_ns	kernel/pid.c	/^pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)$/;"	f
task_tick_fair	kernel/sched_fair.c	/^static void task_tick_fair(struct rq *rq, struct task_struct *curr, int queued)$/;"	f	file:
task_tick_idle	kernel/sched_idletask.c	/^static void task_tick_idle(struct rq *rq, struct task_struct *curr, int queued)$/;"	f	file:
task_tick_rt	kernel/sched_rt.c	/^static void task_tick_rt(struct rq *rq, struct task_struct *p, int queued)$/;"	f	file:
task_times	kernel/sched.c	/^void task_times(struct task_struct *p, cputime_t *ut, cputime_t *st)$/;"	f
task_top_pi_waiter	kernel/rtmutex_common.h	/^task_top_pi_waiter(struct task_struct *p)$/;"	f
task_waking_fair	kernel/sched_fair.c	/^static void task_waking_fair(struct rq *rq, struct task_struct *p)$/;"	f	file:
task_weight	kernel/sched.c	/^	unsigned long task_weight;$/;"	m	struct:cfs_rq	file:
task_woken_rt	kernel/sched_rt.c	/^static void task_woken_rt(struct rq *rq, struct task_struct *p)$/;"	f	file:
tasklet_action	kernel/softirq.c	/^static void tasklet_action(struct softirq_action *a)$/;"	f	file:
tasklet_head	kernel/softirq.c	/^struct tasklet_head$/;"	s	file:
tasklet_hi_action	kernel/softirq.c	/^static void tasklet_hi_action(struct softirq_action *a)$/;"	f	file:
tasklet_hrtimer_init	kernel/softirq.c	/^EXPORT_SYMBOL_GPL(tasklet_hrtimer_init);$/;"	v
tasklet_hrtimer_init	kernel/softirq.c	/^void tasklet_hrtimer_init(struct tasklet_hrtimer *ttimer,$/;"	f
tasklet_init	kernel/softirq.c	/^EXPORT_SYMBOL(tasklet_init);$/;"	v
tasklet_init	kernel/softirq.c	/^void tasklet_init(struct tasklet_struct *t,$/;"	f
tasklet_kill	kernel/softirq.c	/^EXPORT_SYMBOL(tasklet_kill);$/;"	v
tasklet_kill	kernel/softirq.c	/^void tasklet_kill(struct tasklet_struct *t)$/;"	f
tasklet_kill_immediate	kernel/softirq.c	/^void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu)$/;"	f
tasks	kernel/sched.c	/^	struct list_head tasks;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::list_head	file:
tasks_call_list	fs/eventpoll.c	/^	struct list_head tasks_call_list;$/;"	m	struct:nested_calls	typeref:struct:nested_calls::list_head	file:
tasks_timeline	kernel/sched.c	/^	struct rb_root tasks_timeline;$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::rb_root	file:
taskstats_cache	kernel/taskstats.c	/^struct kmem_cache *taskstats_cache;$/;"	v	typeref:struct:kmem_cache
taskstats_exit	kernel/taskstats.c	/^void taskstats_exit(struct task_struct *tsk, int group_dead)$/;"	f
taskstats_init	kernel/taskstats.c	/^late_initcall(taskstats_init);$/;"	v
taskstats_init	kernel/taskstats.c	/^static int __init taskstats_init(void)$/;"	f	file:
taskstats_init_early	kernel/taskstats.c	/^void __init taskstats_init_early(void)$/;"	f
taskstats_ops	kernel/taskstats.c	/^static struct genl_ops taskstats_ops = {$/;"	v	typeref:struct:genl_ops	file:
taskstats_tgid_alloc	kernel/taskstats.c	/^static struct taskstats *taskstats_tgid_alloc(struct task_struct *tsk)$/;"	f	file:
taskstats_user_cmd	kernel/taskstats.c	/^static int taskstats_user_cmd(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
tbase_get_base	kernel/timer.c	/^static inline struct tvec_base *tbase_get_base(struct tvec_base *base)$/;"	f	file:
tbase_get_deferrable	kernel/timer.c	/^static inline unsigned int tbase_get_deferrable(struct tvec_base *base)$/;"	f	file:
ten_thousand	kernel/sysctl.c	/^static int ten_thousand = 10000;$/;"	v	file:
test_bdev_super	fs/super.c	/^static int test_bdev_super(struct super_block *s, void *data)$/;"	f	file:
test_clear_page_writeback	mm/page-writeback.c	/^int test_clear_page_writeback(struct page *page)$/;"	f
test_func	kernel/rtmutex-tester.c	/^static int test_func(void *data)$/;"	f	file:
test_jprobe	kernel/test_kprobes.c	/^static int test_jprobe(void)$/;"	f	file:
test_jprobes	kernel/test_kprobes.c	/^static int test_jprobes(void)$/;"	f	file:
test_kprobe	kernel/test_kprobes.c	/^static int test_kprobe(void)$/;"	f	file:
test_kprobes	kernel/test_kprobes.c	/^static int test_kprobes(void)$/;"	f	file:
test_kretprobe	kernel/test_kprobes.c	/^static int test_kretprobe(void)$/;"	f	file:
test_kretprobes	kernel/test_kprobes.c	/^static int test_kretprobes(void)$/;"	f	file:
test_no_idle_hz	kernel/rcutorture.c	/^static int test_no_idle_hz;	\/* Test RCU's support for tickless idle CPUs. *\/$/;"	v	file:
test_node	mm/kmemleak-test.c	/^struct test_node {$/;"	s	file:
test_opcodes	kernel/rtmutex-tester.c	/^enum test_opcodes {$/;"	g	file:
test_pages_in_a_zone	mm/memory_hotplug.c	/^static int test_pages_in_a_zone(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
test_pages_isolated	mm/page_isolation.c	/^int test_pages_isolated(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
test_perm	kernel/sysctl.c	/^static int test_perm(int mode, int op)$/;"	f	file:
test_set_page_writeback	mm/page-writeback.c	/^EXPORT_SYMBOL(test_set_page_writeback);$/;"	v
test_set_page_writeback	mm/page-writeback.c	/^int test_set_page_writeback(struct page *page)$/;"	f
test_taint	kernel/panic.c	/^EXPORT_SYMBOL(test_taint);$/;"	v
test_taint	kernel/panic.c	/^int test_taint(unsigned flag)$/;"	f
test_thread_data	kernel/rtmutex-tester.c	/^struct test_thread_data {$/;"	s	file:
text_len	fs/binfmt_flat.c	/^		unsigned long text_len;			\/* Length of text segment *\/$/;"	m	struct:lib_info::__anon13	file:
text_mutex	kernel/extable.c	/^DEFINE_MUTEX(text_mutex);$/;"	v
tg	kernel/sched.c	/^	struct task_group *tg;	\/* group that "owns" this runqueue *\/$/;"	m	struct:cfs_rq	typeref:struct:cfs_rq::task_group	file:
tg	kernel/sched.c	/^	struct task_group *tg;$/;"	m	struct:rt_rq	typeref:struct:rt_rq::task_group	file:
tg	kernel/sched.c	/^	struct task_group *tg;$/;"	m	struct:rt_schedulable_data	typeref:struct:rt_schedulable_data::task_group	file:
tg_has_rt_tasks	kernel/sched.c	/^static inline int tg_has_rt_tasks(struct task_group *tg)$/;"	f	file:
tg_load_down	kernel/sched.c	/^static int tg_load_down(struct task_group *tg, void *data)$/;"	f	file:
tg_nop	kernel/sched.c	/^static int tg_nop(struct task_group *tg, void *data)$/;"	f	file:
tg_schedulable	kernel/sched.c	/^static int tg_schedulable(struct task_group *tg, void *data)$/;"	f	file:
tg_set_bandwidth	kernel/sched.c	/^static int tg_set_bandwidth(struct task_group *tg,$/;"	f	file:
tg_shares_up	kernel/sched.c	/^static int tg_shares_up(struct task_group *tg, void *data)$/;"	f	file:
tg_visitor	kernel/sched.c	/^typedef int (*tg_visitor)(struct task_group *, void *);$/;"	t	file:
thaw_bdev	fs/block_dev.c	/^EXPORT_SYMBOL(thaw_bdev);$/;"	v
thaw_bdev	fs/block_dev.c	/^int thaw_bdev(struct block_device *bdev, struct super_block *sb)$/;"	f
thaw_process	kernel/freezer.c	/^EXPORT_SYMBOL(thaw_process);$/;"	v
thaw_process	kernel/freezer.c	/^int thaw_process(struct task_struct *p)$/;"	f
this	kernel/sched.c	/^	struct sched_group *this;  \/* Local group in this sd *\/$/;"	m	struct:sd_lb_stats	typeref:struct:sd_lb_stats::sched_group	file:
this_core_map	kernel/sched.c	/^	cpumask_var_t		this_core_map;$/;"	m	struct:s_data	file:
this_cpu_load	kernel/sched.c	/^unsigned long this_cpu_load(void)$/;"	f
this_load	kernel/sched.c	/^	unsigned long this_load;$/;"	m	struct:sd_lb_stats	file:
this_load_per_task	kernel/sched.c	/^	unsigned long this_load_per_task;$/;"	m	struct:sd_lb_stats	file:
this_nr_running	kernel/sched.c	/^	unsigned long this_nr_running;$/;"	m	struct:sd_lb_stats	file:
this_rq	kernel/sched.c	659;"	d	file:
this_scd	kernel/sched_clock.c	/^static inline struct sched_clock_data *this_scd(void)$/;"	f	file:
this_sibling_map	kernel/sched.c	/^	cpumask_var_t		this_sibling_map;$/;"	m	struct:s_data	file:
thr_query	kernel/kgdb.c	/^	unsigned long		thr_query;$/;"	m	struct:kgdb_state	file:
thread	fs/binfmt_elf.c	/^	struct elf_thread_core_info *thread;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::elf_thread_core_info	file:
thread	fs/binfmt_elf.c	/^	struct task_struct *thread;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::task_struct	file:
thread	fs/binfmt_elf_fdpic.c	/^	struct task_struct *thread;$/;"	m	struct:elf_thread_status	typeref:struct:elf_thread_status::task_struct	file:
thread	kernel/workqueue.c	/^	struct task_struct *thread;$/;"	m	struct:cpu_workqueue_struct	typeref:struct:cpu_workqueue_struct::task_struct	file:
thread_ack	kernel/stop_machine.c	/^static atomic_t thread_ack;$/;"	v	file:
thread_count	kernel/async.c	/^static atomic_t thread_count;$/;"	v	file:
thread_cpu_clock_get	kernel/posix-cpu-timers.c	/^static int thread_cpu_clock_get(const clockid_t which_clock,$/;"	f	file:
thread_cpu_clock_getres	kernel/posix-cpu-timers.c	/^static int thread_cpu_clock_getres(const clockid_t which_clock,$/;"	f	file:
thread_cpu_nsleep	kernel/posix-cpu-timers.c	/^static int thread_cpu_nsleep(const clockid_t which_clock, int flags,$/;"	f	file:
thread_cpu_nsleep_restart	kernel/posix-cpu-timers.c	/^static long thread_cpu_nsleep_restart(struct restart_block *restart_block)$/;"	f	file:
thread_cpu_timer_create	kernel/posix-cpu-timers.c	/^static int thread_cpu_timer_create(struct k_itimer *timer)$/;"	f	file:
thread_data	kernel/rtmutex-tester.c	/^static struct test_thread_data thread_data[MAX_RT_TEST_THREADS];$/;"	v	typeref:struct:test_thread_data	file:
thread_group_cputime	kernel/posix-cpu-timers.c	/^void thread_group_cputime(struct task_struct *tsk, struct task_cputime *times)$/;"	f
thread_group_cputimer	kernel/posix-cpu-timers.c	/^void thread_group_cputimer(struct task_struct *tsk, struct task_cputime *times)$/;"	f
thread_group_sched_runtime	kernel/sched.c	/^unsigned long long thread_group_sched_runtime(struct task_struct *p)$/;"	f
thread_group_times	kernel/sched.c	/^void thread_group_times(struct task_struct *p, cputime_t *ut, cputime_t *st)$/;"	f
thread_list	fs/binfmt_elf.c	/^	struct list_head thread_list;$/;"	m	struct:elf_note_info	typeref:struct:elf_note_info::list_head	file:
thread_notes	fs/binfmt_elf.c	/^	int thread_notes;$/;"	m	struct:elf_note_info	file:
thread_status_size	fs/binfmt_elf.c	/^	int thread_status_size;$/;"	m	struct:elf_note_info	file:
threadfn	kernel/kthread.c	/^	int (*threadfn)(void *data);$/;"	m	struct:kthread_create_info	file:
threadid	kernel/kgdb.c	/^	unsigned long		threadid;$/;"	m	struct:kgdb_state	file:
threads	kernel/rtmutex-tester.c	/^static struct task_struct *threads[MAX_RT_TEST_THREADS];$/;"	v	typeref:struct:task_struct	file:
throttle_vm_writeout	mm/page-writeback.c	/^void throttle_vm_writeout(gfp_t gfp_mask)$/;"	f
tick_gtod	kernel/sched_clock.c	/^	u64			tick_gtod;$/;"	m	struct:sched_clock_data	file:
tick_raw	kernel/sched_clock.c	/^	u64			tick_raw;$/;"	m	struct:sched_clock_data	file:
ticks	fs/timerfd.c	/^	u64 ticks;$/;"	m	struct:timerfd_ctx	file:
tid	kernel/perf_event.c	/^		u32				tid;$/;"	m	struct:perf_comm_event::__anon38	file:
tid	kernel/perf_event.c	/^		u32				tid;$/;"	m	struct:perf_mmap_event::__anon39	file:
tid	kernel/perf_event.c	/^		u32				tid;$/;"	m	struct:perf_task_event::__anon37	file:
tid	kernel/perf_event.c	/^	u32				tid;$/;"	m	struct:perf_read_event	file:
time	kernel/cpuset.c	/^	time_t time;		\/* clock (secs) when val computed *\/$/;"	m	struct:fmeter	file:
time	kernel/perf_event.c	/^		u64				time;$/;"	m	struct:perf_task_event::__anon37	file:
time_out	fs/compat.c	/^	compat_uint_t time_out;$/;"	m	struct:compat_ncp_mount_data	file:
time_out	fs/compat.c	/^	compat_uint_t time_out;$/;"	m	struct:compat_ncp_mount_data_v4	file:
time_out_leases	fs/locks.c	/^static void time_out_leases(struct inode *inode)$/;"	f	file:
timed_out	fs/aio.c	/^	int			timed_out;$/;"	m	struct:aio_timeout	file:
timeo	fs/compat.c	/^	compat_int_t timeo;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
timeout	fs/compat_ioctl.c	/^	compat_uint_t timeout;		\/* [i] MAX_UINT->no timeout (unit: millisec) *\/$/;"	m	struct:sg_io_hdr32	file:
timeout_func	fs/aio.c	/^static void timeout_func(unsigned long data)$/;"	f	file:
timeout_jiffies	kernel/hung_task.c	/^static unsigned long timeout_jiffies(unsigned long timeout)$/;"	f	file:
timer	fs/aio.c	/^	struct timer_list	timer;$/;"	m	struct:aio_timeout	typeref:struct:aio_timeout::timer_list	file:
timer	kernel/acct.c	/^	struct timer_list	timer;$/;"	m	struct:bsd_acct_struct	typeref:struct:bsd_acct_struct::timer_list	file:
timer_cpu_notify	kernel/timer.c	/^static int __cpuinit timer_cpu_notify(struct notifier_block *self,$/;"	f	file:
timer_debug_descr	kernel/timer.c	/^static struct debug_obj_descr timer_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr	file:
timer_debug_descr	kernel/timer.c	/^static struct debug_obj_descr timer_debug_descr;$/;"	v	typeref:struct:debug_obj_descr	file:
timer_delete_hook	kernel/posix-timers.c	/^static inline int timer_delete_hook(struct k_itimer *timer)$/;"	f	file:
timer_fixup_activate	kernel/timer.c	/^static int timer_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_fixup_free	kernel/timer.c	/^static int timer_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_fixup_init	kernel/timer.c	/^static int timer_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
timer_jiffies	kernel/timer.c	/^	unsigned long timer_jiffies;$/;"	m	struct:tvec_base	file:
timer_set_base	kernel/timer.c	/^timer_set_base(struct timer_list *timer, struct tvec_base *new_base)$/;"	f	file:
timer_set_deferrable	kernel/timer.c	/^static inline void timer_set_deferrable(struct timer_list *timer)$/;"	f	file:
timer_stats_account_hrtimer	kernel/hrtimer.c	/^static inline void timer_stats_account_hrtimer(struct hrtimer *timer)$/;"	f	file:
timer_stats_account_timer	kernel/timer.c	/^static void timer_stats_account_timer(struct timer_list *timer) {}$/;"	f	file:
timer_stats_account_timer	kernel/timer.c	/^static void timer_stats_account_timer(struct timer_list *timer)$/;"	f	file:
timer_stats_hrtimer_clear_start_info	kernel/hrtimer.c	/^static inline void timer_stats_hrtimer_clear_start_info(struct hrtimer *timer)$/;"	f	file:
timer_stats_hrtimer_set_start_info	kernel/hrtimer.c	/^static inline void timer_stats_hrtimer_set_start_info(struct hrtimer *timer)$/;"	f	file:
timerfd_ctx	fs/timerfd.c	/^struct timerfd_ctx {$/;"	s	file:
timerfd_fget	fs/timerfd.c	/^static struct file *timerfd_fget(int fd)$/;"	f	file:
timerfd_fops	fs/timerfd.c	/^static const struct file_operations timerfd_fops = {$/;"	v	typeref:struct:file_operations	file:
timerfd_get_remaining	fs/timerfd.c	/^static ktime_t timerfd_get_remaining(struct timerfd_ctx *ctx)$/;"	f	file:
timerfd_poll	fs/timerfd.c	/^static unsigned int timerfd_poll(struct file *file, poll_table *wait)$/;"	f	file:
timerfd_read	fs/timerfd.c	/^static ssize_t timerfd_read(struct file *file, char __user *buf, size_t count,$/;"	f	file:
timerfd_release	fs/timerfd.c	/^static int timerfd_release(struct inode *inode, struct file *file)$/;"	f	file:
timerfd_setup	fs/timerfd.c	/^static void timerfd_setup(struct timerfd_ctx *ctx, int flags,$/;"	f	file:
timerfd_tmrproc	fs/timerfd.c	/^static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *htmr)$/;"	f	file:
timers_nb	kernel/timer.c	/^static struct notifier_block __cpuinitdata timers_nb = {$/;"	v	typeref:struct:__cpuinitdata	file:
timespec_add_safe	kernel/time.c	/^struct timespec timespec_add_safe(const struct timespec lhs,$/;"	f
timespec_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(timespec_to_jiffies);$/;"	v
timespec_to_jiffies	kernel/time.c	/^timespec_to_jiffies(const struct timespec *value)$/;"	f
timespec_to_sample	kernel/posix-cpu-timers.c	/^timespec_to_sample(const clockid_t which_clock, const struct timespec *tp)$/;"	f	file:
timespec_trunc	kernel/time.c	/^EXPORT_SYMBOL(timespec_trunc);$/;"	v
timespec_trunc	kernel/time.c	/^struct timespec timespec_trunc(struct timespec t, unsigned gran)$/;"	f
timestamp	fs/compat_ioctl.c	/^	compat_time_t	timestamp;$/;"	m	struct:compat_video_event	file:
timeval_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(timeval_to_jiffies);$/;"	v
timeval_to_jiffies	kernel/time.c	/^timeval_to_jiffies(const struct timeval *value)$/;"	f
timeval_valid	kernel/itimer.c	188;"	d	file:
tintv	fs/timerfd.c	/^	ktime_t tintv;$/;"	m	struct:timerfd_ctx	file:
tmpfs_fs_type	mm/shmem.c	/^static struct file_system_type tmpfs_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
tmpmask	kernel/sched.c	/^	cpumask_var_t		tmpmask;$/;"	m	struct:s_data	file:
tmr	fs/timerfd.c	/^	struct hrtimer tmr;$/;"	m	struct:timerfd_ctx	typeref:struct:timerfd_ctx::hrtimer	file:
tnt	kernel/panic.c	/^struct tnt {$/;"	s	file:
tnts	kernel/panic.c	/^static const struct tnt tnts[] = {$/;"	v	typeref:struct:tnt	file:
to	mm/hugetlb.c	/^	long to;$/;"	m	struct:file_region	file:
to_kill	mm/memory-failure.c	/^struct to_kill {$/;"	s	file:
to_kthread	kernel/kthread.c	41;"	d	file:
to_module_attr	kernel/params.c	405;"	d	file:
to_module_kobject	kernel/params.c	406;"	d	file:
to_param_attr	kernel/params.c	424;"	d	file:
to_ratio	kernel/sched.c	/^static unsigned long to_ratio(u64 period, u64 runtime)$/;"	f	file:
to_slab	mm/slub.c	4009;"	d	file:
to_slab_attr	mm/slub.c	4008;"	d	file:
toggle_bp_slot	kernel/hw_breakpoint.c	/^static void toggle_bp_slot(struct perf_event *bp, bool enable)$/;"	f	file:
toggle_bp_task_slot	kernel/hw_breakpoint.c	/^static void toggle_bp_task_slot(struct task_struct *tsk, int cpu, bool enable)$/;"	f	file:
too_many_isolated	mm/vmscan.c	/^static int too_many_isolated(struct zone *zone, int file,$/;"	f	file:
top_cgroup	kernel/cgroup.c	/^	struct cgroup top_cgroup;$/;"	m	struct:cgroupfs_root	typeref:struct:cgroupfs_root::cgroup	file:
top_cpuset	kernel/cpuset.c	/^static struct cpuset top_cpuset = {$/;"	v	typeref:struct:cpuset	file:
torture_type	kernel/rcutorture.c	/^static char *torture_type = "rcu"; \/* What RCU implementation to torture. *\/$/;"	v	file:
total_forks	kernel/fork.c	/^unsigned long total_forks;	\/* Handle normal Linux uptimes. *\/$/;"	v
total_load	kernel/sched.c	/^	unsigned long total_load;  \/* Total load of all groups in sd *\/$/;"	m	struct:sd_lb_stats	file:
total_mapping_size	fs/binfmt_elf.c	/^static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr)$/;"	f	file:
total_name	mm/memcontrol.c	/^	char *total_name;$/;"	m	struct:__anon6	file:
total_objects	mm/slub.c	/^SLAB_ATTR_RO(total_objects);$/;"	v
total_objects_show	mm/slub.c	/^static ssize_t total_objects_show(struct kmem_cache *s, char *buf)$/;"	f	file:
total_pages	fs/direct-io.c	/^	int total_pages;		\/* doesn't change *\/$/;"	m	struct:dio	file:
total_pwr	kernel/sched.c	/^	unsigned long total_pwr;   \/*	Total power of all groups in sd *\/$/;"	m	struct:sd_lb_stats	file:
total_swap_pages	mm/swapfile.c	/^long total_swap_pages;$/;"	v
total_usage	mm/page_cgroup.c	/^static unsigned long total_usage;$/;"	v	file:
totalhigh	kernel/compat.c	/^	u32 totalhigh;$/;"	m	struct:compat_sysinfo	file:
totalhigh_pages	mm/highmem.c	/^EXPORT_SYMBOL(totalhigh_pages);$/;"	v
totalram	kernel/compat.c	/^	u32 totalram;$/;"	m	struct:compat_sysinfo	file:
totalram_pages	mm/page_alloc.c	/^EXPORT_SYMBOL(totalram_pages);$/;"	v
totalswap	kernel/compat.c	/^	u32 totalswap;$/;"	m	struct:compat_sysinfo	file:
touch_all_softlockup_watchdogs	kernel/softlockup.c	/^EXPORT_SYMBOL(touch_all_softlockup_watchdogs);$/;"	v
touch_all_softlockup_watchdogs	kernel/softlockup.c	/^void touch_all_softlockup_watchdogs(void)$/;"	f
touch_atime	fs/inode.c	/^EXPORT_SYMBOL(touch_atime);$/;"	v
touch_atime	fs/inode.c	/^void touch_atime(struct vfsmount *mnt, struct dentry *dentry)$/;"	f
touch_mnt_namespace	fs/namespace.c	/^static void touch_mnt_namespace(struct mnt_namespace *ns)$/;"	f	file:
touch_softlockup_watchdog	kernel/softlockup.c	/^EXPORT_SYMBOL(touch_softlockup_watchdog);$/;"	v
touch_softlockup_watchdog	kernel/softlockup.c	/^void touch_softlockup_watchdog(void)$/;"	f
touch_softlockup_watchdog_sync	kernel/softlockup.c	/^void touch_softlockup_watchdog_sync(void)$/;"	f
touched	mm/slab.c	/^	unsigned int touched;$/;"	m	struct:array_cache	file:
tp_perf_event_destroy	kernel/perf_event.c	/^static void tp_perf_event_destroy(struct perf_event *event)$/;"	f	file:
tp_perf_event_init	kernel/perf_event.c	/^static const struct pmu *tp_perf_event_init(struct perf_event *event)$/;"	f	file:
tp_probes	kernel/tracepoint.c	/^struct tp_probes {$/;"	s	file:
trace	mm/kmemleak.c	/^	unsigned long trace[MAX_TRACE];	\/* stack trace *\/$/;"	m	struct:early_log	file:
trace	mm/kmemleak.c	/^	unsigned long trace[MAX_TRACE];$/;"	m	struct:kmemleak_object	file:
trace	mm/slub.c	/^SLAB_ATTR(trace);$/;"	v
trace	mm/slub.c	/^static void trace(struct kmem_cache *s, struct page *page, void *object,$/;"	f	file:
trace_hardirqs_off	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_off);$/;"	v
trace_hardirqs_off	kernel/lockdep.c	/^void trace_hardirqs_off(void)$/;"	f
trace_hardirqs_off_caller	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_off_caller);$/;"	v
trace_hardirqs_off_caller	kernel/lockdep.c	/^void trace_hardirqs_off_caller(unsigned long ip)$/;"	f
trace_hardirqs_on	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_on);$/;"	v
trace_hardirqs_on	kernel/lockdep.c	/^void trace_hardirqs_on(void)$/;"	f
trace_hardirqs_on_caller	kernel/lockdep.c	/^EXPORT_SYMBOL(trace_hardirqs_on_caller);$/;"	v
trace_hardirqs_on_caller	kernel/lockdep.c	/^void trace_hardirqs_on_caller(unsigned long ip)$/;"	f
trace_len	mm/kmemleak.c	/^	unsigned int trace_len;		\/* stack trace length *\/$/;"	m	struct:early_log	file:
trace_len	mm/kmemleak.c	/^	unsigned int trace_len;$/;"	m	struct:kmemleak_object	file:
trace_show	mm/slub.c	/^static ssize_t trace_show(struct kmem_cache *s, char *buf)$/;"	f	file:
trace_softirqs_off	kernel/lockdep.c	/^void trace_softirqs_off(unsigned long ip)$/;"	f
trace_softirqs_on	kernel/lockdep.c	/^void trace_softirqs_on(unsigned long ip)$/;"	f
trace_store	mm/slub.c	/^static ssize_t trace_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
tracepoint_add_old_probes	kernel/tracepoint.c	/^static void tracepoint_add_old_probes(void *old)$/;"	f	file:
tracepoint_add_probe	kernel/tracepoint.c	/^static void *tracepoint_add_probe(const char *name, void *probe)$/;"	f	file:
tracepoint_debug	kernel/tracepoint.c	/^static const int tracepoint_debug;$/;"	v	file:
tracepoint_entry	kernel/tracepoint.c	/^struct tracepoint_entry {$/;"	s	file:
tracepoint_entry_add_probe	kernel/tracepoint.c	/^tracepoint_entry_add_probe(struct tracepoint_entry *entry, void *probe)$/;"	f	file:
tracepoint_entry_remove_probe	kernel/tracepoint.c	/^tracepoint_entry_remove_probe(struct tracepoint_entry *entry, void *probe)$/;"	f	file:
tracepoint_get_iter	kernel/tracepoint.c	/^static void tracepoint_get_iter(struct tracepoint_iter *iter)$/;"	f	file:
tracepoint_get_iter_range	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_get_iter_range);$/;"	v
tracepoint_get_iter_range	kernel/tracepoint.c	/^int tracepoint_get_iter_range(struct tracepoint **tracepoint,$/;"	f
tracepoint_iter_next	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_next);$/;"	v
tracepoint_iter_next	kernel/tracepoint.c	/^void tracepoint_iter_next(struct tracepoint_iter *iter)$/;"	f
tracepoint_iter_reset	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_reset);$/;"	v
tracepoint_iter_reset	kernel/tracepoint.c	/^void tracepoint_iter_reset(struct tracepoint_iter *iter)$/;"	f
tracepoint_iter_start	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_start);$/;"	v
tracepoint_iter_start	kernel/tracepoint.c	/^void tracepoint_iter_start(struct tracepoint_iter *iter)$/;"	f
tracepoint_iter_stop	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_iter_stop);$/;"	v
tracepoint_iter_stop	kernel/tracepoint.c	/^void tracepoint_iter_stop(struct tracepoint_iter *iter)$/;"	f
tracepoint_module_nb	kernel/tracepoint.c	/^struct notifier_block tracepoint_module_nb = {$/;"	v	typeref:struct:notifier_block
tracepoint_module_notify	kernel/tracepoint.c	/^int tracepoint_module_notify(struct notifier_block *self,$/;"	f
tracepoint_probe_register	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_register);$/;"	v
tracepoint_probe_register	kernel/tracepoint.c	/^int tracepoint_probe_register(const char *name, void *probe)$/;"	f
tracepoint_probe_register_noupdate	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_register_noupdate);$/;"	v
tracepoint_probe_register_noupdate	kernel/tracepoint.c	/^int tracepoint_probe_register_noupdate(const char *name, void *probe)$/;"	f
tracepoint_probe_unregister	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_unregister);$/;"	v
tracepoint_probe_unregister	kernel/tracepoint.c	/^int tracepoint_probe_unregister(const char *name, void *probe)$/;"	f
tracepoint_probe_unregister_noupdate	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_unregister_noupdate);$/;"	v
tracepoint_probe_unregister_noupdate	kernel/tracepoint.c	/^int tracepoint_probe_unregister_noupdate(const char *name, void *probe)$/;"	f
tracepoint_probe_update_all	kernel/tracepoint.c	/^EXPORT_SYMBOL_GPL(tracepoint_probe_update_all);$/;"	v
tracepoint_probe_update_all	kernel/tracepoint.c	/^void tracepoint_probe_update_all(void)$/;"	f
tracepoint_remove_probe	kernel/tracepoint.c	/^static void *tracepoint_remove_probe(const char *name, void *probe)$/;"	f	file:
tracepoint_table	kernel/tracepoint.c	/^static struct hlist_head tracepoint_table[TRACEPOINT_TABLE_SIZE];$/;"	v	typeref:struct:hlist_head	file:
tracepoint_update_probe_range	kernel/tracepoint.c	/^tracepoint_update_probe_range(struct tracepoint *begin, struct tracepoint *end)$/;"	f
tracepoint_update_probes	kernel/tracepoint.c	/^static void tracepoint_update_probes(void)$/;"	f	file:
track	mm/slub.c	/^struct track {$/;"	s	file:
track_item	mm/slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	g	file:
transfer_objects	mm/slab.c	/^static int transfer_objects(struct array_cache *to,$/;"	f	file:
transfer_pid	kernel/pid.c	/^void transfer_pid(struct task_struct *old, struct task_struct *new,$/;"	f
transmit	fs/compat_ioctl.c	/^	compat_int_t		transmit;$/;"	m	struct:ppp_option_data32	file:
traverse	fs/seq_file.c	/^static int traverse(struct seq_file *m, loff_t offset)$/;"	f	file:
tree_contains_unbindable	fs/namespace.c	/^static inline int tree_contains_unbindable(struct vfsmount *mnt)$/;"	f	file:
tree_count	kernel/auditsc.c	/^	int tree_count;$/;"	m	struct:audit_context	file:
tree_node	mm/kmemleak.c	/^	struct prio_tree_node tree_node;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::prio_tree_node	file:
tree_node	mm/memcontrol.c	/^	struct rb_node		tree_node;	\/* RB tree node *\/$/;"	m	struct:mem_cgroup_per_zone	typeref:struct:mem_cgroup_per_zone::rb_node	file:
trees	kernel/audit_tree.c	/^	struct list_head trees;		\/* with root here *\/$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::list_head	file:
trees	kernel/auditsc.c	/^	struct audit_tree_refs *trees, *first_trees;$/;"	m	struct:audit_context	typeref:struct:audit_context::audit_tree_refs	file:
trigger_load_balance	kernel/sched.c	/^static inline void trigger_load_balance(struct rq *rq, int cpu)$/;"	f	file:
trim_marked	kernel/audit_tree.c	/^static void trim_marked(struct audit_tree *tree)$/;"	f	file:
true	kernel/panic.c	/^	char	true;$/;"	m	struct:tnt	file:
truncate64	fs/open.c	/^SYSCALL_DEFINE(truncate64)(const char __user * path, loff_t length)$/;"	f
truncate_complete_page	mm/truncate.c	/^truncate_complete_page(struct address_space *mapping, struct page *page)$/;"	f	file:
truncate_inode_page	mm/truncate.c	/^int truncate_inode_page(struct address_space *mapping, struct page *page)$/;"	f
truncate_inode_pages	mm/truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages);$/;"	v
truncate_inode_pages	mm/truncate.c	/^void truncate_inode_pages(struct address_space *mapping, loff_t lstart)$/;"	f
truncate_inode_pages_range	mm/truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages_range);$/;"	v
truncate_inode_pages_range	mm/truncate.c	/^void truncate_inode_pages_range(struct address_space *mapping,$/;"	f
truncate_pagecache	mm/truncate.c	/^EXPORT_SYMBOL(truncate_pagecache);$/;"	v
truncate_pagecache	mm/truncate.c	/^void truncate_pagecache(struct inode *inode, loff_t old, loff_t new)$/;"	f
truncate_partial_page	mm/truncate.c	/^static inline void truncate_partial_page(struct page *page, unsigned partial)$/;"	f	file:
try_acquire_console_sem	kernel/printk.c	/^EXPORT_SYMBOL(try_acquire_console_sem);$/;"	v
try_acquire_console_sem	kernel/printk.c	/^int try_acquire_console_sem(void)$/;"	f
try_attach	kernel/sysctl.c	/^static void try_attach(struct ctl_table_header *p, struct ctl_table_header *q)$/;"	f	file:
try_context_readahead	mm/readahead.c	/^static int try_context_readahead(struct address_space *mapping,$/;"	f	file:
try_force_unload	kernel/module.c	/^static inline int try_force_unload(unsigned int flags)$/;"	f	file:
try_get_mem_cgroup_from_mm	mm/memcontrol.c	/^static struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm)$/;"	f	file:
try_get_mem_cgroup_from_page	mm/memcontrol.c	/^struct mem_cgroup *try_get_mem_cgroup_from_page(struct page *page)$/;"	f
try_purge_vmap_area_lazy	mm/vmalloc.c	/^static void try_purge_vmap_area_lazy(void)$/;"	f	file:
try_queue_kicked_iocb	fs/aio.c	/^static void try_queue_kicked_iocb(struct kiocb *iocb)$/;"	f	file:
try_set_zone_oom	mm/oom_kill.c	/^int try_set_zone_oom(struct zonelist *zonelist, gfp_t gfp_mask)$/;"	f
try_stop_module	kernel/module.c	/^static int try_stop_module(struct module *mod, int flags, int *forced)$/;"	f	file:
try_to_del_timer_sync	kernel/timer.c	/^EXPORT_SYMBOL(try_to_del_timer_sync);$/;"	v
try_to_del_timer_sync	kernel/timer.c	/^int try_to_del_timer_sync(struct timer_list *timer)$/;"	f
try_to_disable_aggr_kprobe	kernel/kprobes.c	/^static int __kprobes try_to_disable_aggr_kprobe(struct kprobe *p)$/;"	f	file:
try_to_force_load	kernel/module.c	/^static int try_to_force_load(struct module *mod, const char *reason)$/;"	f	file:
try_to_free_buffers	fs/buffer.c	/^EXPORT_SYMBOL(try_to_free_buffers);$/;"	v
try_to_free_buffers	fs/buffer.c	/^int try_to_free_buffers(struct page *page)$/;"	f
try_to_free_low	mm/hugetlb.c	/^static inline void try_to_free_low(struct hstate *h, unsigned long count,$/;"	f	file:
try_to_free_low	mm/hugetlb.c	/^static void try_to_free_low(struct hstate *h, unsigned long count,$/;"	f	file:
try_to_free_mem_cgroup_pages	mm/vmscan.c	/^unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *mem_cont,$/;"	f
try_to_free_pages	mm/vmscan.c	/^unsigned long try_to_free_pages(struct zonelist *zonelist, int order,$/;"	f
try_to_free_swap	mm/swapfile.c	/^int try_to_free_swap(struct page *page)$/;"	f
try_to_freeze_cgroup	kernel/cgroup_freezer.c	/^static int try_to_freeze_cgroup(struct cgroup *cgroup, struct freezer *freezer)$/;"	f	file:
try_to_grab_pending	kernel/workqueue.c	/^static int try_to_grab_pending(struct work_struct *work)$/;"	f	file:
try_to_merge_one_page	mm/ksm.c	/^static int try_to_merge_one_page(struct vm_area_struct *vma,$/;"	f	file:
try_to_merge_two_pages	mm/ksm.c	/^static struct page *try_to_merge_two_pages(struct rmap_item *rmap_item,$/;"	f	file:
try_to_merge_with_ksm_page	mm/ksm.c	/^static int try_to_merge_with_ksm_page(struct rmap_item *rmap_item,$/;"	f	file:
try_to_munlock	mm/rmap.c	/^int try_to_munlock(struct page *page)$/;"	f
try_to_release_page	mm/filemap.c	/^EXPORT_SYMBOL(try_to_release_page);$/;"	v
try_to_release_page	mm/filemap.c	/^int try_to_release_page(struct page *page, gfp_t gfp_mask)$/;"	f
try_to_steal_lock	kernel/rtmutex.c	/^static inline int try_to_steal_lock(struct rt_mutex *lock,$/;"	f	file:
try_to_take_rt_mutex	kernel/rtmutex.c	/^static int try_to_take_rt_mutex(struct rt_mutex *lock)$/;"	f	file:
try_to_unmap	mm/rmap.c	/^int try_to_unmap(struct page *page, enum ttu_flags flags)$/;"	f
try_to_unmap_anon	mm/rmap.c	/^static int try_to_unmap_anon(struct page *page, enum ttu_flags flags)$/;"	f	file:
try_to_unmap_cluster	mm/rmap.c	/^static int try_to_unmap_cluster(unsigned long cursor, unsigned int *mapcount,$/;"	f	file:
try_to_unmap_file	mm/rmap.c	/^static int try_to_unmap_file(struct page *page, enum ttu_flags flags)$/;"	f	file:
try_to_unmap_ksm	mm/ksm.c	/^int try_to_unmap_ksm(struct page *page, enum ttu_flags flags)$/;"	f
try_to_unmap_one	mm/rmap.c	/^int try_to_unmap_one(struct page *page, struct vm_area_struct *vma,$/;"	f
try_to_unuse	mm/swapfile.c	/^static int try_to_unuse(unsigned int type)$/;"	f	file:
try_to_wake_up	kernel/sched.c	/^static int try_to_wake_up(struct task_struct *p, unsigned int state,$/;"	f	file:
try_wait_for_completion	kernel/sched.c	/^EXPORT_SYMBOL(try_wait_for_completion);$/;"	v
try_wait_for_completion	kernel/sched.c	/^bool try_wait_for_completion(struct completion *x)$/;"	f
trylock_page	include/linux/pagemap.h	/^static inline int trylock_page(struct page *page)$/;"	f
tsk	mm/memory-failure.c	/^	struct task_struct *tsk;$/;"	m	struct:to_kill	typeref:struct:to_kill::task_struct	file:
tsk_is_polling	kernel/sched.c	1175;"	d	file:
ttwu_count	kernel/sched.c	/^	unsigned int ttwu_count;$/;"	m	struct:rq	file:
ttwu_local	kernel/sched.c	/^	unsigned int ttwu_local;$/;"	m	struct:rq	file:
tv1	kernel/timer.c	/^	struct tvec_root tv1;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec_root	file:
tv2	kernel/timer.c	/^	struct tvec tv2;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tv3	kernel/timer.c	/^	struct tvec tv3;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tv4	kernel/timer.c	/^	struct tvec tv4;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tv5	kernel/timer.c	/^	struct tvec tv5;$/;"	m	struct:tvec_base	typeref:struct:tvec_base::tvec	file:
tvec	kernel/timer.c	/^struct tvec {$/;"	s	file:
tvec_base	kernel/timer.c	/^struct tvec_base {$/;"	s	file:
tvec_root	kernel/timer.c	/^struct tvec_root {$/;"	s	file:
two	kernel/sysctl.c	/^static int __maybe_unused two = 2;$/;"	v	file:
type	fs/binfmt_elf.c	/^	int type;$/;"	m	struct:memelfnote	file:
type	fs/binfmt_elf_fdpic.c	/^	int type;$/;"	m	struct:memelfnote	file:
type	fs/compat_ioctl.c	/^	int32_t		type;$/;"	m	struct:compat_video_event	file:
type	fs/compat_ioctl.c	/^        compat_int_t    type;$/;"	m	struct:serial_struct32	file:
type	kernel/auditsc.c	/^	int			type;$/;"	m	struct:audit_aux_data	file:
type	kernel/auditsc.c	/^	int type;$/;"	m	struct:audit_context	file:
type	kernel/kallsyms.c	/^	char type;$/;"	m	struct:kallsym_iter	file:
u	fs/compat.c	/^	} u;$/;"	m	struct:compat_nfsctl_arg	typeref:union:compat_nfsctl_arg::__anon17	file:
u	fs/compat_ioctl.c	/^	} u;$/;"	m	struct:compat_video_event	typeref:union:compat_video_event::__anon18	file:
u	kernel/tracepoint.c	/^	} u;$/;"	m	struct:tp_probes	typeref:union:tp_probes::__anon47	file:
u32_client	fs/compat.c	/^		struct compat_nfsctl_client	u32_client;$/;"	m	union:compat_nfsctl_arg::__anon17	typeref:struct:compat_nfsctl_arg::__anon17::compat_nfsctl_client	file:
u32_export	fs/compat.c	/^		struct compat_nfsctl_export	u32_export;$/;"	m	union:compat_nfsctl_arg::__anon17	typeref:struct:compat_nfsctl_arg::__anon17::compat_nfsctl_export	file:
u32_getfd	fs/compat.c	/^		struct compat_nfsctl_fdparm	u32_getfd;$/;"	m	union:compat_nfsctl_arg::__anon17	typeref:struct:compat_nfsctl_arg::__anon17::compat_nfsctl_fdparm	file:
u32_getfs	fs/compat.c	/^		struct compat_nfsctl_fsparm	u32_getfs;$/;"	m	union:compat_nfsctl_arg::__anon17	typeref:struct:compat_nfsctl_arg::__anon17::compat_nfsctl_fsparm	file:
u32_svc	fs/compat.c	/^		struct compat_nfsctl_svc	u32_svc;$/;"	m	union:compat_nfsctl_arg::__anon17	typeref:struct:compat_nfsctl_arg::__anon17::compat_nfsctl_svc	file:
uevent_filter	kernel/params.c	/^static int uevent_filter(struct kset *kset, struct kobject *kobj)$/;"	f	file:
uevent_filter	mm/slub.c	/^static int uevent_filter(struct kset *kset, struct kobject *kobj)$/;"	f	file:
uevent_helper	kernel/ksysfs.c	/^KERNEL_ATTR_RW(uevent_helper);$/;"	v
uevent_helper_show	kernel/ksysfs.c	/^static ssize_t uevent_helper_show(struct kobject *kobj,$/;"	f	file:
uevent_helper_store	kernel/ksysfs.c	/^static ssize_t uevent_helper_store(struct kobject *kobj,$/;"	f	file:
uevent_seqnum	kernel/ksysfs.c	/^KERNEL_ATTR_RO(uevent_seqnum);$/;"	v
uevent_seqnum_show	kernel/ksysfs.c	/^static ssize_t uevent_seqnum_show(struct kobject *kobj,$/;"	f	file:
uid	fs/compat.c	/^	__compat_uid_t uid;$/;"	m	struct:compat_ncp_mount_data	file:
uid	fs/compat.c	/^	__compat_uid_t uid;$/;"	m	struct:compat_smb_mount_data	file:
uid	fs/compat.c	/^	compat_ulong_t uid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
uid	kernel/auditsc.c	/^			uid_t			uid;$/;"	m	struct:audit_context::__anon22::__anon24	file:
uid	kernel/auditsc.c	/^	uid_t		    uid, euid, suid, fsuid;$/;"	m	struct:audit_context	file:
uid	kernel/auditsc.c	/^	uid_t		uid;$/;"	m	struct:audit_names	file:
uid	kernel/sched.c	/^	uid_t uid;$/;"	m	struct:task_group	file:
uid_cache_init	kernel/user.c	/^module_init(uid_cache_init);$/;"	v
uid_cache_init	kernel/user.c	/^static int __init uid_cache_init(void)$/;"	f	file:
uid_cachep	kernel/user.c	/^static struct kmem_cache *uid_cachep;$/;"	v	typeref:struct:kmem_cache	file:
uid_hash_find	kernel/user.c	/^static struct user_struct *uid_hash_find(uid_t uid, struct hlist_head *hashent)$/;"	f	file:
uid_hash_insert	kernel/user.c	/^static void uid_hash_insert(struct user_struct *up, struct hlist_head *hashent)$/;"	f	file:
uid_hash_remove	kernel/user.c	/^static void uid_hash_remove(struct user_struct *up)$/;"	f	file:
uidhashentry	kernel/user.c	36;"	d	file:
uids_attributes	kernel/user.c	/^static struct attribute *uids_attributes[] = {$/;"	v	typeref:struct:attribute	file:
uids_kset	kernel/user.c	/^static struct kset *uids_kset; \/* represents the \/sys\/kernel\/uids\/ directory *\/$/;"	v	typeref:struct:kset	file:
uids_ktype	kernel/user.c	/^static struct kobj_type uids_ktype = {$/;"	v	typeref:struct:kobj_type	file:
uids_mutex_lock	kernel/user.c	/^static inline void uids_mutex_lock(void) { }$/;"	f	file:
uids_mutex_lock	kernel/user.c	/^static inline void uids_mutex_lock(void)$/;"	f	file:
uids_mutex_unlock	kernel/user.c	/^static inline void uids_mutex_unlock(void) { }$/;"	f	file:
uids_mutex_unlock	kernel/user.c	/^static inline void uids_mutex_unlock(void)$/;"	f	file:
uids_release	kernel/user.c	/^static void uids_release(struct kobject *kobj)$/;"	f	file:
uids_sysfs_init	kernel/user.c	/^int __init uids_sysfs_init(void)$/;"	f
uids_sysfs_init	kernel/user.c	/^int uids_sysfs_init(void) { return 0; }$/;"	f
uids_user_create	kernel/user.c	/^static inline int uids_user_create(struct user_struct *up) { return 0; }$/;"	f	file:
uids_user_create	kernel/user.c	/^static int uids_user_create(struct user_struct *up)$/;"	f	file:
umount_tree	fs/namespace.c	/^void umount_tree(struct vfsmount *mnt, int propagate, struct list_head *kill)$/;"	f
unblock_all_signals	kernel/signal.c	/^EXPORT_SYMBOL(unblock_all_signals);$/;"	v
unblock_all_signals	kernel/signal.c	/^unblock_all_signals(void)$/;"	f
unclone_ctx	kernel/perf_event.c	/^static void unclone_ctx(struct perf_event_context *ctx)$/;"	f	file:
undo_isolate_page_range	mm/page_isolation.c	/^undo_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
unevict	mm/memory-failure.c	716;"	d	file:
unevict	mm/memory-failure.c	773;"	d	file:
unfreeze_cgroup	kernel/cgroup_freezer.c	/^static void unfreeze_cgroup(struct cgroup *cgroup, struct freezer *freezer)$/;"	f	file:
unfreeze_slab	mm/slub.c	/^static void unfreeze_slab(struct kmem_cache *s, struct page *page, int tail)$/;"	f	file:
unhandled_signal	kernel/signal.c	/^int unhandled_signal(struct task_struct *tsk, int sig)$/;"	f
units	mm/slob.c	/^			slobidx_t units;	\/* free units left in page *\/$/;"	m	struct:slob_page::__anon8::__anon9	file:
units	mm/slob.c	/^	slobidx_t units;$/;"	m	struct:slob_block	file:
unlink_file_vma	mm/mmap.c	/^void unlink_file_vma(struct vm_area_struct *vma)$/;"	f
unlock_buffer	fs/buffer.c	/^EXPORT_SYMBOL(unlock_buffer);$/;"	v
unlock_buffer	fs/buffer.c	/^void unlock_buffer(struct buffer_head *bh)$/;"	f
unlock_futex_pi	kernel/futex.c	/^static int unlock_futex_pi(u32 __user *uaddr, u32 uval)$/;"	f	file:
unlock_hrtimer_base	kernel/hrtimer.c	/^void unlock_hrtimer_base(const struct hrtimer *timer, unsigned long *flags)$/;"	f	file:
unlock_kmap	mm/highmem.c	76;"	d	file:
unlock_kmap	mm/highmem.c	81;"	d	file:
unlock_kmap_any	mm/highmem.c	78;"	d	file:
unlock_kmap_any	mm/highmem.c	84;"	d	file:
unlock_new_inode	fs/inode.c	/^EXPORT_SYMBOL(unlock_new_inode);$/;"	v
unlock_new_inode	fs/inode.c	/^void unlock_new_inode(struct inode *inode)$/;"	f
unlock_page	mm/filemap.c	/^EXPORT_SYMBOL(unlock_page);$/;"	v
unlock_page	mm/filemap.c	/^void unlock_page(struct page *page)$/;"	f
unlock_rename	fs/namei.c	/^EXPORT_SYMBOL(unlock_rename);$/;"	v
unlock_rename	fs/namei.c	/^void unlock_rename(struct dentry *p1, struct dentry *p2)$/;"	f
unlock_super	fs/super.c	/^EXPORT_SYMBOL(unlock_super);$/;"	v
unlock_super	fs/super.c	/^void unlock_super(struct super_block * sb)$/;"	f
unlock_timer	kernel/posix-timers.c	/^static inline void unlock_timer(struct k_itimer *timr, unsigned long flags)$/;"	f	file:
unmap_and_move	mm/migrate.c	/^static int unmap_and_move(new_page_t get_new_page, unsigned long private,$/;"	f	file:
unmap_hugepage_range	mm/hugetlb.c	/^void unmap_hugepage_range(struct vm_area_struct *vma, unsigned long start,$/;"	f
unmap_kernel_range	mm/vmalloc.c	/^void unmap_kernel_range(unsigned long addr, unsigned long size)$/;"	f
unmap_kernel_range_noflush	mm/vmalloc.c	/^void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)$/;"	f
unmap_mapping_range	mm/memory.c	/^EXPORT_SYMBOL(unmap_mapping_range);$/;"	v
unmap_mapping_range	mm/memory.c	/^void unmap_mapping_range(struct address_space *mapping,$/;"	f
unmap_mapping_range	mm/nommu.c	/^EXPORT_SYMBOL(unmap_mapping_range);$/;"	v
unmap_mapping_range	mm/nommu.c	/^void unmap_mapping_range(struct address_space *mapping,$/;"	f
unmap_mapping_range_list	mm/memory.c	/^static inline void unmap_mapping_range_list(struct list_head *head,$/;"	f	file:
unmap_mapping_range_tree	mm/memory.c	/^static inline void unmap_mapping_range_tree(struct prio_tree_root *root,$/;"	f	file:
unmap_mapping_range_vma	mm/memory.c	/^static int unmap_mapping_range_vma(struct vm_area_struct *vma,$/;"	f	file:
unmap_page_range	mm/memory.c	/^static unsigned long unmap_page_range(struct mmu_gather *tlb,$/;"	f	file:
unmap_ref_private	mm/hugetlb.c	/^static int unmap_ref_private(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
unmap_region	mm/mmap.c	/^static void unmap_region(struct mm_struct *mm,$/;"	f	file:
unmap_underlying_metadata	fs/buffer.c	/^EXPORT_SYMBOL(unmap_underlying_metadata);$/;"	v
unmap_underlying_metadata	fs/buffer.c	/^void unmap_underlying_metadata(struct block_device *bdev, sector_t block)$/;"	f
unmap_vmap_area	mm/vmalloc.c	/^static void unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
unmap_vmas	mm/memory.c	/^unsigned long unmap_vmas(struct mmu_gather **tlbp,$/;"	f
unmerge_and_remove_all_rmap_items	mm/ksm.c	/^static int unmerge_and_remove_all_rmap_items(void)$/;"	f	file:
unmerge_ksm_pages	mm/ksm.c	/^static int unmerge_ksm_pages(struct vm_area_struct *vma,$/;"	f	file:
unnamed_dev_start	fs/super.c	/^static int unnamed_dev_start = 0; \/* don't bother trying below it *\/$/;"	v	file:
unpin_and_kill	fs/notify/inotify/inotify.c	/^static void unpin_and_kill(struct inotify_watch *watch, int how)$/;"	f	file:
unpin_inotify_watch	fs/notify/inotify/inotify.c	/^void unpin_inotify_watch(struct inotify_watch *watch)$/;"	f
unpin_sb_for_writeback	fs/fs-writeback.c	/^static void unpin_sb_for_writeback(struct super_block **psb)$/;"	f	file:
unpoison_highpage	mm/debug-pagealloc.c	/^static void unpoison_highpage(struct page *page)$/;"	f	file:
unpoison_memory	mm/memory-failure.c	/^EXPORT_SYMBOL(unpoison_memory);$/;"	v
unpoison_memory	mm/memory-failure.c	/^int unpoison_memory(unsigned long pfn)$/;"	f
unpoison_page	mm/debug-pagealloc.c	/^static void unpoison_page(struct page *page)$/;"	f	file:
unpoison_pages	mm/debug-pagealloc.c	/^static void unpoison_pages(struct page *page, int n)$/;"	f	file:
unqueue_me	kernel/futex.c	/^static int unqueue_me(struct futex_q *q)$/;"	f	file:
unqueue_me_pi	kernel/futex.c	/^static void unqueue_me_pi(struct futex_q *q)$/;"	f	file:
unquote	fs/binfmt_misc.c	/^static int unquote(char *from)$/;"	f	file:
unreferenced_object	mm/kmemleak.c	/^static bool unreferenced_object(struct kmemleak_object *object)$/;"	f	file:
unregister_binfmt	fs/exec.c	/^EXPORT_SYMBOL(unregister_binfmt);$/;"	v
unregister_binfmt	fs/exec.c	/^void unregister_binfmt(struct linux_binfmt * fmt)$/;"	f
unregister_chrdev_region	fs/char_dev.c	/^EXPORT_SYMBOL(unregister_chrdev_region);$/;"	v
unregister_chrdev_region	fs/char_dev.c	/^void unregister_chrdev_region(dev_t from, unsigned count)$/;"	f
unregister_console	kernel/printk.c	/^EXPORT_SYMBOL(unregister_console);$/;"	v
unregister_console	kernel/printk.c	/^int unregister_console(struct console *console)$/;"	f
unregister_cpu_notifier	kernel/cpu.c	/^EXPORT_SYMBOL(unregister_cpu_notifier);$/;"	v
unregister_cpu_notifier	kernel/cpu.c	/^void __ref unregister_cpu_notifier(struct notifier_block *nb)$/;"	f
unregister_die_notifier	kernel/notifier.c	/^EXPORT_SYMBOL_GPL(unregister_die_notifier);$/;"	v
unregister_die_notifier	kernel/notifier.c	/^int unregister_die_notifier(struct notifier_block *nb)$/;"	f
unregister_exec_domain	kernel/exec_domain.c	/^EXPORT_SYMBOL(unregister_exec_domain);$/;"	v
unregister_exec_domain	kernel/exec_domain.c	/^unregister_exec_domain(struct exec_domain *ep)$/;"	f
unregister_fair_sched_group	kernel/sched.c	/^static inline void unregister_fair_sched_group(struct task_group *tg, int cpu)$/;"	f	file:
unregister_filesystem	fs/filesystems.c	/^EXPORT_SYMBOL(unregister_filesystem);$/;"	v
unregister_filesystem	fs/filesystems.c	/^int unregister_filesystem(struct file_system_type * fs)$/;"	f
unregister_hw_breakpoint	kernel/hw_breakpoint.c	/^EXPORT_SYMBOL_GPL(unregister_hw_breakpoint);$/;"	v
unregister_hw_breakpoint	kernel/hw_breakpoint.c	/^void unregister_hw_breakpoint(struct perf_event *bp)$/;"	f
unregister_jprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_jprobe);$/;"	v
unregister_jprobe	kernel/kprobes.c	/^void __kprobes unregister_jprobe(struct jprobe *jp)$/;"	f
unregister_jprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_jprobes);$/;"	v
unregister_jprobes	kernel/kprobes.c	/^void __kprobes unregister_jprobes(struct jprobe **jps, int num)$/;"	f
unregister_kprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kprobe);$/;"	v
unregister_kprobe	kernel/kprobes.c	/^void __kprobes unregister_kprobe(struct kprobe *p)$/;"	f
unregister_kprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kprobes);$/;"	v
unregister_kprobes	kernel/kprobes.c	/^void __kprobes unregister_kprobes(struct kprobe **kps, int num)$/;"	f
unregister_kretprobe	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kretprobe);$/;"	v
unregister_kretprobe	kernel/kprobes.c	/^void __kprobes unregister_kretprobe(struct kretprobe *rp)$/;"	f
unregister_kretprobes	kernel/kprobes.c	/^EXPORT_SYMBOL_GPL(unregister_kretprobes);$/;"	v
unregister_kretprobes	kernel/kprobes.c	/^void __kprobes unregister_kretprobes(struct kretprobe **rps, int num)$/;"	f
unregister_module_notifier	kernel/module.c	/^EXPORT_SYMBOL(unregister_module_notifier);$/;"	v
unregister_module_notifier	kernel/module.c	/^int unregister_module_notifier(struct notifier_block * nb)$/;"	f
unregister_oom_notifier	mm/oom_kill.c	/^EXPORT_SYMBOL_GPL(unregister_oom_notifier);$/;"	v
unregister_oom_notifier	mm/oom_kill.c	/^int unregister_oom_notifier(struct notifier_block *nb)$/;"	f
unregister_reboot_notifier	kernel/notifier.c	/^EXPORT_SYMBOL(unregister_reboot_notifier);$/;"	v
unregister_reboot_notifier	kernel/notifier.c	/^int unregister_reboot_notifier(struct notifier_block *nb)$/;"	f
unregister_rt_sched_group	kernel/sched.c	/^static inline void unregister_rt_sched_group(struct task_group *tg, int cpu)$/;"	f	file:
unregister_sched_domain_sysctl	kernel/sched.c	/^static void unregister_sched_domain_sysctl(void)$/;"	f	file:
unregister_shrinker	mm/vmscan.c	/^EXPORT_SYMBOL(unregister_shrinker);$/;"	v
unregister_shrinker	mm/vmscan.c	/^void unregister_shrinker(struct shrinker *shrinker)$/;"	f
unregister_sysctl_table	kernel/sysctl.c	/^EXPORT_SYMBOL(unregister_sysctl_table);$/;"	v
unregister_sysctl_table	kernel/sysctl.c	/^void unregister_sysctl_table(struct ctl_table_header * header)$/;"	f
unregister_sysctl_table	kernel/sysctl.c	/^void unregister_sysctl_table(struct ctl_table_header * table)$/;"	f
unregister_timer_hook	kernel/profile.c	/^EXPORT_SYMBOL_GPL(unregister_timer_hook);$/;"	v
unregister_timer_hook	kernel/profile.c	/^void unregister_timer_hook(int (*hook)(struct pt_regs *))$/;"	f
unregister_wide_hw_breakpoint	kernel/hw_breakpoint.c	/^EXPORT_SYMBOL_GPL(unregister_wide_hw_breakpoint);$/;"	v
unregister_wide_hw_breakpoint	kernel/hw_breakpoint.c	/^void unregister_wide_hw_breakpoint(struct perf_event **cpu_events)$/;"	f
unroll_tree_refs	kernel/auditsc.c	/^static void unroll_tree_refs(struct audit_context *ctx,$/;"	f	file:
unset_migratetype_isolate	mm/page_alloc.c	/^void unset_migratetype_isolate(struct page *page)$/;"	f
unshare_fd	kernel/fork.c	/^static int unshare_fd(unsigned long unshare_flags, struct files_struct **new_fdp)$/;"	f	file:
unshare_files	kernel/fork.c	/^int unshare_files(struct files_struct **displaced)$/;"	f
unshare_fs	kernel/fork.c	/^static int unshare_fs(unsigned long unshare_flags, struct fs_struct **new_fsp)$/;"	f	file:
unshare_fs_struct	fs/fs_struct.c	/^EXPORT_SYMBOL_GPL(unshare_fs_struct);$/;"	v
unshare_fs_struct	fs/fs_struct.c	/^int unshare_fs_struct(void)$/;"	f
unshare_nsproxy_namespaces	kernel/nsproxy.c	/^int unshare_nsproxy_namespaces(unsigned long unshare_flags,$/;"	f
unshare_sighand	kernel/fork.c	/^static int unshare_sighand(unsigned long unshare_flags, struct sighand_struct **new_sighp)$/;"	f	file:
unshare_thread	kernel/fork.c	/^static int unshare_thread(unsigned long unshare_flags)$/;"	f	file:
unshare_vm	kernel/fork.c	/^static int unshare_vm(unsigned long unshare_flags, struct mm_struct **new_mmp)$/;"	f	file:
unstable_tree_search_insert	mm/ksm.c	/^struct rmap_item *unstable_tree_search_insert(struct rmap_item *rmap_item,$/;"	f	file:
untag_chunk	kernel/audit_tree.c	/^static void untag_chunk(struct node *p)$/;"	f	file:
unuse_mm	mm/mmu_context.c	/^void unuse_mm(struct mm_struct *mm)$/;"	f
unuse_mm	mm/swapfile.c	/^static int unuse_mm(struct mm_struct *mm,$/;"	f	file:
unuse_pmd_range	mm/swapfile.c	/^static inline int unuse_pmd_range(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
unuse_pte	mm/swapfile.c	/^static int unuse_pte(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
unuse_pte_range	mm/swapfile.c	/^static int unuse_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
unuse_pud_range	mm/swapfile.c	/^static inline int unuse_pud_range(struct vm_area_struct *vma, pgd_t *pgd,$/;"	f	file:
unuse_table	kernel/sysctl.c	/^static void unuse_table(struct ctl_table_header *p)$/;"	f	file:
unuse_vma	mm/swapfile.c	/^static int unuse_vma(struct vm_area_struct *vma,$/;"	f	file:
unused	fs/compat_ioctl.c	/^	int unused;$/;"	m	struct:compat_sg_req_info	file:
up	kernel/semaphore.c	/^	int up;$/;"	m	struct:semaphore_waiter	file:
up	kernel/semaphore.c	/^EXPORT_SYMBOL(up);$/;"	v
up	kernel/semaphore.c	/^void up(struct semaphore *sem)$/;"	f
up_read	kernel/rwsem.c	/^EXPORT_SYMBOL(up_read);$/;"	v
up_read	kernel/rwsem.c	/^void up_read(struct rw_semaphore *sem)$/;"	f
up_read_non_owner	kernel/rwsem.c	/^EXPORT_SYMBOL(up_read_non_owner);$/;"	v
up_read_non_owner	kernel/rwsem.c	/^void up_read_non_owner(struct rw_semaphore *sem)$/;"	f
up_write	kernel/rwsem.c	/^EXPORT_SYMBOL(up_write);$/;"	v
up_write	kernel/rwsem.c	/^void up_write(struct rw_semaphore *sem)$/;"	f
update_and_free_page	mm/hugetlb.c	/^static void update_and_free_page(struct hstate *h, struct page *page)$/;"	f	file:
update_avg	kernel/sched.c	/^static void update_avg(u64 *avg, u64 sample)$/;"	f	file:
update_checksum	mm/kmemleak.c	/^static bool update_checksum(struct kmemleak_object *object)$/;"	f	file:
update_completion_period	mm/page-writeback.c	/^static void update_completion_period(void)$/;"	f	file:
update_console_cmdline	kernel/printk.c	/^int update_console_cmdline(char *name, int idx, char *name_new, int idx_new, char *options)$/;"	f
update_context_time	kernel/perf_event.c	/^static void update_context_time(struct perf_event_context *ctx)$/;"	f	file:
update_cpu_load	kernel/sched.c	/^static void update_cpu_load(struct rq *this_rq)$/;"	f	file:
update_cpu_power	kernel/sched.c	/^static void update_cpu_power(struct sched_domain *sd, int cpu)$/;"	f	file:
update_cpumask	kernel/cpuset.c	/^static int update_cpumask(struct cpuset *cs, struct cpuset *trialcs,$/;"	f	file:
update_curr	kernel/sched_fair.c	/^static void update_curr(struct cfs_rq *cfs_rq)$/;"	f	file:
update_curr_rt	kernel/sched_rt.c	/^static void update_curr_rt(struct rq *rq)$/;"	f	file:
update_domain_attr	kernel/cpuset.c	/^update_domain_attr(struct sched_domain_attr *dattr, struct cpuset *c)$/;"	f	file:
update_domain_attr_tree	kernel/cpuset.c	/^update_domain_attr_tree(struct sched_domain_attr *dattr, struct cpuset *c)$/;"	f	file:
update_event_times	kernel/perf_event.c	/^static void update_event_times(struct perf_event *event)$/;"	f	file:
update_flag	kernel/cpuset.c	/^static int update_flag(cpuset_flagbits_t bit, struct cpuset *cs,$/;"	f	file:
update_freezer_state	kernel/cgroup_freezer.c	/^static void update_freezer_state(struct cgroup *cgroup,$/;"	f	file:
update_group_power	kernel/sched.c	/^static void update_group_power(struct sched_domain *sd, int cpu)$/;"	f	file:
update_group_shares_cpu	kernel/sched.c	/^static void update_group_shares_cpu(struct task_group *tg, int cpu,$/;"	f	file:
update_group_times	kernel/perf_event.c	/^static void update_group_times(struct perf_event *leader)$/;"	f	file:
update_gt_cputime	kernel/posix-cpu-timers.c	/^static void update_gt_cputime(struct task_cputime *a, struct task_cputime *b)$/;"	f	file:
update_h_load	kernel/sched.c	/^static void update_h_load(long cpu)$/;"	f	file:
update_iter	kernel/kallsyms.c	/^static int update_iter(struct kallsym_iter *iter, loff_t pos)$/;"	f	file:
update_load_add	kernel/sched.c	/^static inline void update_load_add(struct load_weight *lw, unsigned long inc)$/;"	f	file:
update_load_sub	kernel/sched.c	/^static inline void update_load_sub(struct load_weight *lw, unsigned long dec)$/;"	f	file:
update_lsm_rule	kernel/auditfilter.c	/^static int update_lsm_rule(struct audit_krule *r)$/;"	f	file:
update_min_vruntime	kernel/sched_fair.c	/^static void update_min_vruntime(struct cfs_rq *cfs_rq)$/;"	f	file:
update_nodemask	kernel/cpuset.c	/^static int update_nodemask(struct cpuset *cs, struct cpuset *trialcs,$/;"	f	file:
update_page_reclaim_stat	mm/swap.c	/^static void update_page_reclaim_stat(struct zone *zone, struct page *page,$/;"	f	file:
update_process_times	kernel/timer.c	/^void update_process_times(int user_tick)$/;"	f
update_relax_domain_level	kernel/cpuset.c	/^static int update_relax_domain_level(struct cpuset *cs, s64 val)$/;"	f	file:
update_rlimit_cpu	kernel/posix-cpu-timers.c	/^void update_rlimit_cpu(unsigned long rlim_new)$/;"	f
update_rmtp	kernel/hrtimer.c	/^static int update_rmtp(struct hrtimer *timer, struct timespec __user *rmtp)$/;"	f	file:
update_rq_clock	kernel/sched.c	/^inline void update_rq_clock(struct rq *rq)$/;"	f
update_rt_migration	kernel/sched_rt.c	/^static void update_rt_migration(struct rt_rq *rt_rq)$/;"	f	file:
update_runtime	kernel/sched.c	/^static int update_runtime(struct notifier_block *nfb,$/;"	f	file:
update_sched_domains	kernel/sched.c	/^static int update_sched_domains(struct notifier_block *nfb,$/;"	f	file:
update_sd_lb_stats	kernel/sched.c	/^static inline void update_sd_lb_stats(struct sched_domain *sd, int this_cpu,$/;"	f	file:
update_sd_power_savings_stats	kernel/sched.c	/^static inline void update_sd_power_savings_stats(struct sched_group *group,$/;"	f	file:
update_sg_lb_stats	kernel/sched.c	/^static inline void update_sg_lb_stats(struct sched_domain *sd,$/;"	f	file:
update_shares	kernel/sched.c	/^static inline void update_shares(struct sched_domain *sd)$/;"	f	file:
update_shares	kernel/sched.c	/^static void update_shares(struct sched_domain *sd)$/;"	f	file:
update_shares_data	kernel/sched.c	/^static __read_mostly unsigned long *update_shares_data;$/;"	v	file:
update_shares_locked	kernel/sched.c	/^static inline void update_shares_locked(struct rq *rq, struct sched_domain *sd)$/;"	f	file:
update_shares_locked	kernel/sched.c	/^static void update_shares_locked(struct rq *rq, struct sched_domain *sd)$/;"	f	file:
update_stats_curr_start	kernel/sched_fair.c	/^update_stats_curr_start(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
update_stats_dequeue	kernel/sched_fair.c	/^update_stats_dequeue(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
update_stats_enqueue	kernel/sched_fair.c	/^static void update_stats_enqueue(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
update_stats_wait_end	kernel/sched_fair.c	/^update_stats_wait_end(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
update_stats_wait_start	kernel/sched_fair.c	/^update_stats_wait_start(struct cfs_rq *cfs_rq, struct sched_entity *se)$/;"	f	file:
update_sysctl	kernel/sched.c	/^static void update_sysctl(void)$/;"	f	file:
update_target	kernel/pm_qos_params.c	/^static void update_target(int target)$/;"	f	file:
update_tasks_cpumask	kernel/cpuset.c	/^static void update_tasks_cpumask(struct cpuset *cs, struct ptr_heap *heap)$/;"	f	file:
update_tasks_flags	kernel/cpuset.c	/^static void update_tasks_flags(struct cpuset *cs, struct ptr_heap *heap)$/;"	f	file:
update_tasks_nodemask	kernel/cpuset.c	/^static void update_tasks_nodemask(struct cpuset *cs, const nodemask_t *oldmem,$/;"	f	file:
uptime	kernel/compat.c	/^	s32 uptime;$/;"	m	struct:compat_sysinfo	file:
usage_in_excess	mm/memcontrol.c	/^	unsigned long long	usage_in_excess;\/* Set to the value by which *\/$/;"	m	struct:mem_cgroup_per_zone	file:
usage_match	kernel/lockdep.c	/^static inline int usage_match(struct lock_list *entry, void *bit)$/;"	f	file:
usage_str	kernel/lockdep.c	/^static const char *usage_str[] =$/;"	v	file:
use_bip_pool	fs/bio-integrity.c	/^static inline int use_bip_pool(unsigned int idx)$/;"	f	file:
use_count	mm/kmemleak.c	/^	atomic_t use_count;$/;"	m	struct:kmemleak_object	file:
use_hierarchy	mm/memcontrol.c	/^	bool use_hierarchy;$/;"	m	struct:mem_cgroup	file:
use_mm	mm/mmu_context.c	/^void use_mm(struct mm_struct *mm)$/;"	f
use_module	kernel/module.c	/^EXPORT_SYMBOL_GPL(use_module);$/;"	v
use_module	kernel/module.c	/^int use_module(struct module *a, struct module *b)$/;"	f
use_table	kernel/sysctl.c	/^static int use_table(struct ctl_table_header *p)$/;"	f	file:
use_writepage	fs/mpage.c	/^	unsigned use_writepage;$/;"	m	struct:mpage_data	file:
usec	kernel/pm_qos_params.c	/^		s32 usec;$/;"	m	union:requirement_list::__anon40	file:
usecs_to_jiffies	kernel/time.c	/^EXPORT_SYMBOL(usecs_to_jiffies);$/;"	v
usecs_to_jiffies	kernel/time.c	/^unsigned long usecs_to_jiffies(const unsigned int u)$/;"	f
usemap_size	mm/page_alloc.c	/^static unsigned long __init usemap_size(unsigned long zonesize)$/;"	f	file:
usemap_size	mm/sparse.c	/^unsigned long usemap_size(void)$/;"	f
user	fs/eventpoll.c	/^	struct user_struct *user;$/;"	m	struct:eventpoll	typeref:struct:eventpoll::user_struct	file:
user_get_super	fs/super.c	/^struct super_block * user_get_super(dev_t dev)$/;"	f
user_page_pipe_buf_ops	fs/splice.c	/^static const struct pipe_buf_operations user_page_pipe_buf_ops = {$/;"	v	typeref:struct:pipe_buf_operations	file:
user_page_pipe_buf_steal	fs/splice.c	/^static int user_page_pipe_buf_steal(struct pipe_inode_info *pipe,$/;"	f	file:
user_path_at	fs/namei.c	/^EXPORT_SYMBOL(user_path_at);$/;"	v
user_path_at	fs/namei.c	/^int user_path_at(int dfd, const char __user *name, unsigned flags,$/;"	f
user_path_parent	fs/namei.c	/^static int user_path_parent(int dfd, const char __user *path,$/;"	f	file:
user_return_notifier_register	kernel/user-return-notifier.c	/^EXPORT_SYMBOL_GPL(user_return_notifier_register);$/;"	v
user_return_notifier_register	kernel/user-return-notifier.c	/^void user_return_notifier_register(struct user_return_notifier *urn)$/;"	f
user_return_notifier_unregister	kernel/user-return-notifier.c	/^EXPORT_SYMBOL_GPL(user_return_notifier_unregister);$/;"	v
user_return_notifier_unregister	kernel/user-return-notifier.c	/^void user_return_notifier_unregister(struct user_return_notifier *urn)$/;"	f
user_shm_lock	mm/mlock.c	/^int user_shm_lock(size_t size, struct user_struct *user)$/;"	f
user_shm_unlock	mm/mlock.c	/^void user_shm_unlock(size_t size, struct user_struct *user)$/;"	f
user_zonelist_order	mm/page_alloc.c	/^static int user_zonelist_order = ZONELIST_ORDER_DEFAULT;$/;"	v	file:
usermodehelper_disable	kernel/kmod.c	/^int usermodehelper_disable(void)$/;"	f
usermodehelper_disabled	kernel/kmod.c	/^static int usermodehelper_disabled;$/;"	v	file:
usermodehelper_disabled	kernel/kmod.c	350;"	d	file:
usermodehelper_enable	kernel/kmod.c	/^void usermodehelper_enable(void)$/;"	f
usermodehelper_init	kernel/kmod.c	/^void __init usermodehelper_init(void)$/;"	f
usr_ptr	fs/compat_ioctl.c	/^	compat_uptr_t usr_ptr;		\/* [i->o] unused internally *\/$/;"	m	struct:sg_io_hdr32	file:
usr_ptr	fs/compat_ioctl.c	/^	compat_uptr_t usr_ptr;$/;"	m	struct:compat_sg_req_info	file:
utimes_common	fs/utimes.c	/^static int utimes_common(struct path *path, struct timespec *times)$/;"	f	file:
uts_kern_table	kernel/utsname_sysctl.c	/^static struct ctl_table uts_kern_table[] = {$/;"	v	typeref:struct:ctl_table	file:
uts_root_table	kernel/utsname_sysctl.c	/^static struct ctl_table uts_root_table[] = {$/;"	v	typeref:struct:ctl_table	file:
uts_sem	kernel/sys.c	/^DECLARE_RWSEM(uts_sem);$/;"	v
utsname_sysctl_init	kernel/utsname_sysctl.c	/^__initcall(utsname_sysctl_init);$/;"	v
utsname_sysctl_init	kernel/utsname_sysctl.c	/^static int __init utsname_sysctl_init(void)$/;"	f	file:
va	mm/vmalloc.c	/^	struct vmap_area *va;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_area	file:
va_end	mm/vmalloc.c	/^	unsigned long va_end;$/;"	m	struct:vmap_area	file:
va_start	mm/vmalloc.c	/^	unsigned long va_start;$/;"	m	struct:vmap_area	file:
vaddr	mm/dmapool.c	/^	void *vaddr;$/;"	m	struct:dma_page	file:
val	kernel/cpuset.c	/^	int val;		\/* most recent output value *\/$/;"	m	struct:fmeter	file:
val	mm/memcontrol.c	/^	s64 val;$/;"	m	struct:mem_cgroup_idx_data	file:
valid	kernel/taskstats.c	/^	char valid;$/;"	m	struct:listener	file:
valid_arg_len	fs/exec.c	/^static bool valid_arg_len(struct linux_binprm *bprm, long len)$/;"	f	file:
valid_state	kernel/lockdep.c	/^valid_state(struct task_struct *curr, struct held_lock *this,$/;"	f	file:
valid_swaphandles	mm/swapfile.c	/^int valid_swaphandles(swp_entry_t entry, unsigned long *offset)$/;"	f
validate	mm/slub.c	/^SLAB_ATTR(validate);$/;"	v
validate_chain	kernel/lockdep.c	/^static inline int validate_chain(struct task_struct *curr,$/;"	f	file:
validate_chain	kernel/lockdep.c	/^static int validate_chain(struct task_struct *curr, struct lockdep_map *lock,$/;"	f	file:
validate_change	kernel/cpuset.c	/^static int validate_change(const struct cpuset *cur, const struct cpuset *trial)$/;"	f	file:
validate_creds_for_do_exit	kernel/cred.c	/^void validate_creds_for_do_exit(struct task_struct *tsk)$/;"	f
validate_mm	mm/mmap.c	/^void validate_mm(struct mm_struct *mm)$/;"	f
validate_mm	mm/mmap.c	347;"	d	file:
validate_mmap_request	mm/nommu.c	/^static int validate_mmap_request(struct file *file,$/;"	f	file:
validate_nommu_regions	mm/nommu.c	/^static noinline void validate_nommu_regions(void)$/;"	f	file:
validate_nommu_regions	mm/nommu.c	/^static void validate_nommu_regions(void)$/;"	f	file:
validate_show	mm/slub.c	/^static ssize_t validate_show(struct kmem_cache *s, char *buf)$/;"	f	file:
validate_slab	mm/slub.c	/^static int validate_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
validate_slab_cache	mm/slub.c	/^static long validate_slab_cache(struct kmem_cache *s)$/;"	f	file:
validate_slab_node	mm/slub.c	/^static int validate_slab_node(struct kmem_cache *s,$/;"	f	file:
validate_slab_slab	mm/slub.c	/^static void validate_slab_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
validate_store	mm/slub.c	/^static ssize_t validate_store(struct kmem_cache *s,$/;"	f	file:
value	kernel/kallsyms.c	/^	unsigned long value;$/;"	m	struct:kallsym_iter	file:
value	kernel/pm_qos_params.c	/^		s32 value;$/;"	m	union:requirement_list::__anon40	file:
vb_alloc	mm/vmalloc.c	/^static void *vb_alloc(unsigned long size, gfp_t gfp_mask)$/;"	f	file:
vb_free	mm/vmalloc.c	/^static void vb_free(const void *addr, unsigned long size)$/;"	f	file:
vbq	mm/vmalloc.c	/^	struct vmap_block_queue *vbq;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_block_queue	file:
vec	kernel/timer.c	/^	struct list_head vec[TVN_SIZE];$/;"	m	struct:tvec	typeref:struct:tvec::list_head	file:
vec	kernel/timer.c	/^	struct list_head vec[TVR_SIZE];$/;"	m	struct:tvec_root	typeref:struct:tvec_root::list_head	file:
vecs_to_idx	fs/bio-integrity.c	/^static inline unsigned int vecs_to_idx(unsigned int nr)$/;"	f	file:
verbose	kernel/lockdep.c	/^static int verbose(struct lock_class *class)$/;"	f	file:
verbose	kernel/rcutorture.c	/^static int verbose;		\/* Print more debug info. *\/$/;"	v	file:
verify_export_symbols	kernel/module.c	/^static int verify_export_symbols(struct module *mod)$/;"	f	file:
verify_mm_writelocked	mm/mmap.c	/^static inline void verify_mm_writelocked(struct mm_struct *mm)$/;"	f	file:
verify_redzone_free	mm/slab.c	/^static inline void verify_redzone_free(struct kmem_cache *cache, void *obj)$/;"	f	file:
vermagic	kernel/module.c	/^static const char vermagic[] = VERMAGIC_STRING;$/;"	v	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_ncp_mount_data	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_ncp_mount_data_v4	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
version	fs/compat.c	/^	compat_int_t version;$/;"	m	struct:compat_smb_mount_data	file:
version	kernel/module.c	/^MODINFO_ATTR(version);$/;"	v
very_verbose	kernel/lockdep.c	/^static int very_verbose(struct lock_class *class)$/;"	f	file:
vfree	mm/nommu.c	/^EXPORT_SYMBOL(vfree);$/;"	v
vfree	mm/nommu.c	/^void vfree(const void *addr)$/;"	f
vfree	mm/vmalloc.c	/^EXPORT_SYMBOL(vfree);$/;"	v
vfree	mm/vmalloc.c	/^void vfree(const void *addr)$/;"	f
vfs_caches_init	fs/dcache.c	/^void __init vfs_caches_init(unsigned long mempages)$/;"	f
vfs_caches_init_early	fs/dcache.c	/^void __init vfs_caches_init_early(void)$/;"	f
vfs_cancel_lock	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_cancel_lock);$/;"	v
vfs_cancel_lock	fs/locks.c	/^int vfs_cancel_lock(struct file *filp, struct file_lock *fl)$/;"	f
vfs_create	fs/namei.c	/^EXPORT_SYMBOL(vfs_create);$/;"	v
vfs_create	fs/namei.c	/^int vfs_create(struct inode *dir, struct dentry *dentry, int mode,$/;"	f
vfs_follow_link	fs/namei.c	/^EXPORT_SYMBOL(vfs_follow_link);$/;"	v
vfs_follow_link	fs/namei.c	/^int vfs_follow_link(struct nameidata *nd, const char *link)$/;"	f
vfs_fstat	fs/stat.c	/^EXPORT_SYMBOL(vfs_fstat);$/;"	v
vfs_fstat	fs/stat.c	/^int vfs_fstat(unsigned int fd, struct kstat *stat)$/;"	f
vfs_fstatat	fs/stat.c	/^EXPORT_SYMBOL(vfs_fstatat);$/;"	v
vfs_fstatat	fs/stat.c	/^int vfs_fstatat(int dfd, char __user *filename, struct kstat *stat, int flag)$/;"	f
vfs_fsync	fs/sync.c	/^EXPORT_SYMBOL(vfs_fsync);$/;"	v
vfs_fsync	fs/sync.c	/^int vfs_fsync(struct file *file, struct dentry *dentry, int datasync)$/;"	f
vfs_fsync_range	fs/sync.c	/^EXPORT_SYMBOL(vfs_fsync_range);$/;"	v
vfs_fsync_range	fs/sync.c	/^int vfs_fsync_range(struct file *file, struct dentry *dentry, loff_t start,$/;"	f
vfs_getattr	fs/stat.c	/^EXPORT_SYMBOL(vfs_getattr);$/;"	v
vfs_getattr	fs/stat.c	/^int vfs_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat)$/;"	f
vfs_getxattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_getxattr);$/;"	v
vfs_getxattr	fs/xattr.c	/^vfs_getxattr(struct dentry *dentry, const char *name, void *value, size_t size)$/;"	f
vfs_inode	fs/block_dev.c	/^	struct inode vfs_inode;$/;"	m	struct:bdev_inode	typeref:struct:bdev_inode::inode	file:
vfs_ioctl	fs/ioctl.c	/^static long vfs_ioctl(struct file *filp, unsigned int cmd,$/;"	f	file:
vfs_kern_mount	fs/super.c	/^EXPORT_SYMBOL_GPL(vfs_kern_mount);$/;"	v
vfs_kern_mount	fs/super.c	/^vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void *data)$/;"	f
vfs_link	fs/namei.c	/^EXPORT_SYMBOL(vfs_link);$/;"	v
vfs_link	fs/namei.c	/^int vfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *new_dentry)$/;"	f
vfs_listxattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_listxattr);$/;"	v
vfs_listxattr	fs/xattr.c	/^vfs_listxattr(struct dentry *d, char *list, size_t size)$/;"	f
vfs_llseek	fs/read_write.c	/^EXPORT_SYMBOL(vfs_llseek);$/;"	v
vfs_llseek	fs/read_write.c	/^loff_t vfs_llseek(struct file *file, loff_t offset, int origin)$/;"	f
vfs_lock_file	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_lock_file);$/;"	v
vfs_lock_file	fs/locks.c	/^int vfs_lock_file(struct file *filp, unsigned int cmd, struct file_lock *fl, struct file_lock *conf)$/;"	f
vfs_lstat	fs/stat.c	/^EXPORT_SYMBOL(vfs_lstat);$/;"	v
vfs_lstat	fs/stat.c	/^int vfs_lstat(char __user *name, struct kstat *stat)$/;"	f
vfs_mkdir	fs/namei.c	/^EXPORT_SYMBOL(vfs_mkdir);$/;"	v
vfs_mkdir	fs/namei.c	/^int vfs_mkdir(struct inode *dir, struct dentry *dentry, int mode)$/;"	f
vfs_mknod	fs/namei.c	/^EXPORT_SYMBOL(vfs_mknod);$/;"	v
vfs_mknod	fs/namei.c	/^int vfs_mknod(struct inode *dir, struct dentry *dentry, int mode, dev_t dev)$/;"	f
vfs_path_lookup	fs/namei.c	/^EXPORT_SYMBOL(vfs_path_lookup);$/;"	v
vfs_path_lookup	fs/namei.c	/^int vfs_path_lookup(struct dentry *dentry, struct vfsmount *mnt,$/;"	f
vfs_read	fs/read_write.c	/^EXPORT_SYMBOL(vfs_read);$/;"	v
vfs_read	fs/read_write.c	/^ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)$/;"	f
vfs_readdir	fs/readdir.c	/^EXPORT_SYMBOL(vfs_readdir);$/;"	v
vfs_readdir	fs/readdir.c	/^int vfs_readdir(struct file *file, filldir_t filler, void *buf)$/;"	f
vfs_readlink	fs/namei.c	/^EXPORT_SYMBOL(vfs_readlink);$/;"	v
vfs_readlink	fs/namei.c	/^int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen, const char *link)$/;"	f
vfs_readv	fs/read_write.c	/^EXPORT_SYMBOL(vfs_readv);$/;"	v
vfs_readv	fs/read_write.c	/^ssize_t vfs_readv(struct file *file, const struct iovec __user *vec,$/;"	f
vfs_removexattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_removexattr);$/;"	v
vfs_removexattr	fs/xattr.c	/^vfs_removexattr(struct dentry *dentry, const char *name)$/;"	f
vfs_rename	fs/namei.c	/^EXPORT_SYMBOL(vfs_rename);$/;"	v
vfs_rename	fs/namei.c	/^int vfs_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f
vfs_rename_dir	fs/namei.c	/^static int vfs_rename_dir(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
vfs_rename_other	fs/namei.c	/^static int vfs_rename_other(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
vfs_rmdir	fs/namei.c	/^EXPORT_SYMBOL(vfs_rmdir);$/;"	v
vfs_rmdir	fs/namei.c	/^int vfs_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f
vfs_setlease	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_setlease);$/;"	v
vfs_setlease	fs/locks.c	/^int vfs_setlease(struct file *filp, long arg, struct file_lock **lease)$/;"	f
vfs_setxattr	fs/xattr.c	/^EXPORT_SYMBOL_GPL(vfs_setxattr);$/;"	v
vfs_setxattr	fs/xattr.c	/^vfs_setxattr(struct dentry *dentry, const char *name, const void *value,$/;"	f
vfs_stat	fs/stat.c	/^EXPORT_SYMBOL(vfs_stat);$/;"	v
vfs_stat	fs/stat.c	/^int vfs_stat(char __user *name, struct kstat *stat)$/;"	f
vfs_statfs	fs/open.c	/^EXPORT_SYMBOL(vfs_statfs);$/;"	v
vfs_statfs	fs/open.c	/^int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f
vfs_statfs64	fs/open.c	/^static int vfs_statfs64(struct dentry *dentry, struct statfs64 *buf)$/;"	f	file:
vfs_statfs_native	fs/open.c	/^static int vfs_statfs_native(struct dentry *dentry, struct statfs *buf)$/;"	f	file:
vfs_symlink	fs/namei.c	/^EXPORT_SYMBOL(vfs_symlink);$/;"	v
vfs_symlink	fs/namei.c	/^int vfs_symlink(struct inode *dir, struct dentry *dentry, const char *oldname)$/;"	f
vfs_test_lock	fs/locks.c	/^EXPORT_SYMBOL_GPL(vfs_test_lock);$/;"	v
vfs_test_lock	fs/locks.c	/^int vfs_test_lock(struct file *filp, struct file_lock *fl)$/;"	f
vfs_unlink	fs/namei.c	/^EXPORT_SYMBOL(vfs_unlink);$/;"	v
vfs_unlink	fs/namei.c	/^int vfs_unlink(struct inode *dir, struct dentry *dentry)$/;"	f
vfs_write	fs/read_write.c	/^EXPORT_SYMBOL(vfs_write);$/;"	v
vfs_write	fs/read_write.c	/^ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_t *pos)$/;"	f
vfs_writev	fs/read_write.c	/^EXPORT_SYMBOL(vfs_writev);$/;"	v
vfs_writev	fs/read_write.c	/^ssize_t vfs_writev(struct file *file, const struct iovec __user *vec,$/;"	f
virt_ticks	kernel/posix-cpu-timers.c	/^static inline cputime_t virt_ticks(struct task_struct *p)$/;"	f	file:
virt_to_cache	mm/slab.c	/^static inline struct kmem_cache *virt_to_cache(const void *obj)$/;"	f	file:
virt_to_slab	mm/slab.c	/^static inline struct slab *virt_to_slab(const void *obj)$/;"	f	file:
virtual	mm/highmem.c	/^	void *virtual;$/;"	m	struct:page_address_map	file:
vm_area_cachep	kernel/fork.c	/^struct kmem_cache *vm_area_cachep;$/;"	v	typeref:struct:kmem_cache
vm_area_register_early	mm/vmalloc.c	/^void __init vm_area_register_early(struct vm_struct *vm, size_t align)$/;"	f
vm_committed_as	mm/mmap.c	/^struct percpu_counter vm_committed_as;$/;"	v	typeref:struct:percpu_counter
vm_committed_as	mm/nommu.c	/^struct percpu_counter vm_committed_as;$/;"	v	typeref:struct:percpu_counter
vm_completions	mm/page-writeback.c	/^static struct prop_descriptor vm_completions;$/;"	v	typeref:struct:prop_descriptor	file:
vm_dirties	mm/page-writeback.c	/^static struct prop_descriptor vm_dirties;$/;"	v	typeref:struct:prop_descriptor	file:
vm_dirty_bytes	mm/page-writeback.c	/^unsigned long vm_dirty_bytes;$/;"	v
vm_dirty_ratio	mm/page-writeback.c	/^int vm_dirty_ratio = 20;$/;"	v
vm_event_states	mm/vmstat.c	/^EXPORT_PER_CPU_SYMBOL(vm_event_states);$/;"	v
vm_events_fold_cpu	mm/vmstat.c	/^void vm_events_fold_cpu(int cpu)$/;"	f
vm_get_page_prot	mm/mmap.c	/^EXPORT_SYMBOL(vm_get_page_prot);$/;"	v
vm_get_page_prot	mm/mmap.c	/^pgprot_t vm_get_page_prot(unsigned long vm_flags)$/;"	f
vm_highmem_is_dirtyable	mm/page-writeback.c	/^int vm_highmem_is_dirtyable;$/;"	v
vm_insert_mixed	mm/memory.c	/^EXPORT_SYMBOL(vm_insert_mixed);$/;"	v
vm_insert_mixed	mm/memory.c	/^int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_page	mm/memory.c	/^EXPORT_SYMBOL(vm_insert_page);$/;"	v
vm_insert_page	mm/memory.c	/^int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_page	mm/nommu.c	/^EXPORT_SYMBOL(vm_insert_page);$/;"	v
vm_insert_page	mm/nommu.c	/^int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_pfn	mm/memory.c	/^EXPORT_SYMBOL(vm_insert_pfn);$/;"	v
vm_insert_pfn	mm/memory.c	/^int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_lock_anon_vma	mm/mmap.c	/^static void vm_lock_anon_vma(struct mm_struct *mm, struct anon_vma *anon_vma)$/;"	f	file:
vm_lock_mapping	mm/mmap.c	/^static void vm_lock_mapping(struct mm_struct *mm, struct address_space *mapping)$/;"	f	file:
vm_map_ram	mm/nommu.c	/^EXPORT_SYMBOL(vm_map_ram);$/;"	v
vm_map_ram	mm/nommu.c	/^void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)$/;"	f
vm_map_ram	mm/vmalloc.c	/^EXPORT_SYMBOL(vm_map_ram);$/;"	v
vm_map_ram	mm/vmalloc.c	/^void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)$/;"	f
vm_normal_page	mm/memory.c	/^struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_region_jar	mm/nommu.c	/^static struct kmem_cache *vm_region_jar;$/;"	v	typeref:struct:kmem_cache	file:
vm_stat	mm/vmstat.c	/^EXPORT_SYMBOL(vm_stat);$/;"	v
vm_stat	mm/vmstat.c	/^atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];$/;"	v
vm_stat_account	mm/mmap.c	/^void vm_stat_account(struct mm_struct *mm, unsigned long flags,$/;"	f
vm_swappiness	mm/vmscan.c	/^int vm_swappiness = 60;$/;"	v
vm_table	kernel/sysctl.c	/^static struct ctl_table vm_table[] = {$/;"	v	typeref:struct:ctl_table	file:
vm_table	kernel/sysctl.c	/^static struct ctl_table vm_table[];$/;"	v	typeref:struct:ctl_table	file:
vm_total_pages	mm/vmscan.c	/^long vm_total_pages;	\/* The total number of pages which the VM controls *\/$/;"	v
vm_unlock_anon_vma	mm/mmap.c	/^static void vm_unlock_anon_vma(struct anon_vma *anon_vma)$/;"	f	file:
vm_unlock_mapping	mm/mmap.c	/^static void vm_unlock_mapping(struct address_space *mapping)$/;"	f	file:
vm_unmap_aliases	mm/nommu.c	/^EXPORT_SYMBOL_GPL(vm_unmap_aliases);$/;"	v
vm_unmap_aliases	mm/nommu.c	/^void vm_unmap_aliases(void)$/;"	f
vm_unmap_aliases	mm/vmalloc.c	/^EXPORT_SYMBOL_GPL(vm_unmap_aliases);$/;"	v
vm_unmap_aliases	mm/vmalloc.c	/^void vm_unmap_aliases(void)$/;"	f
vm_unmap_ram	mm/nommu.c	/^EXPORT_SYMBOL(vm_unmap_ram);$/;"	v
vm_unmap_ram	mm/nommu.c	/^void vm_unmap_ram(const void *mem, unsigned int count)$/;"	f
vm_unmap_ram	mm/vmalloc.c	/^EXPORT_SYMBOL(vm_unmap_ram);$/;"	v
vm_unmap_ram	mm/vmalloc.c	/^void vm_unmap_ram(const void *mem, unsigned int count)$/;"	f
vma	kernel/perf_event.c	/^	struct vm_area_struct	*vma;$/;"	m	struct:perf_mmap_event	typeref:struct:perf_mmap_event::vm_area_struct	file:
vma_address	mm/rmap.c	/^vma_address(struct page *page, struct vm_area_struct *vma)$/;"	f	file:
vma_adjust	mm/mmap.c	/^void vma_adjust(struct vm_area_struct *vma, unsigned long start,$/;"	f
vma_commit_reservation	mm/hugetlb.c	/^static void vma_commit_reservation(struct hstate *h,$/;"	f	file:
vma_dump_size	fs/binfmt_elf.c	/^static unsigned long vma_dump_size(struct vm_area_struct *vma,$/;"	f	file:
vma_expandable	mm/mremap.c	/^static int vma_expandable(struct vm_area_struct *vma, unsigned long delta)$/;"	f	file:
vma_has_reserves	mm/hugetlb.c	/^static int vma_has_reserves(struct vm_area_struct *vma)$/;"	f	file:
vma_hugecache_offset	mm/hugetlb.c	/^static pgoff_t vma_hugecache_offset(struct hstate *h,$/;"	f	file:
vma_kernel_pagesize	mm/hugetlb.c	/^EXPORT_SYMBOL_GPL(vma_kernel_pagesize);$/;"	v
vma_kernel_pagesize	mm/hugetlb.c	/^unsigned long vma_kernel_pagesize(struct vm_area_struct *vma)$/;"	f
vma_link	mm/mmap.c	/^static void vma_link(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
vma_merge	mm/mmap.c	/^struct vm_area_struct *vma_merge(struct mm_struct *mm,$/;"	f
vma_mmu_pagesize	mm/hugetlb.c	/^unsigned long vma_mmu_pagesize(struct vm_area_struct *vma)$/;"	f
vma_needs_reservation	mm/hugetlb.c	/^static long vma_needs_reservation(struct hstate *h,$/;"	f	file:
vma_prio_tree_add	mm/prio_tree.c	/^void vma_prio_tree_add(struct vm_area_struct *vma, struct vm_area_struct *old)$/;"	f
vma_prio_tree_insert	mm/prio_tree.c	/^void vma_prio_tree_insert(struct vm_area_struct *vma,$/;"	f
vma_prio_tree_next	mm/prio_tree.c	/^struct vm_area_struct *vma_prio_tree_next(struct vm_area_struct *vma,$/;"	f
vma_prio_tree_remove	mm/prio_tree.c	/^void vma_prio_tree_remove(struct vm_area_struct *vma,$/;"	f
vma_resv_map	mm/hugetlb.c	/^static struct resv_map *vma_resv_map(struct vm_area_struct *vma)$/;"	f	file:
vma_to_resize	mm/mremap.c	/^static struct vm_area_struct *vma_to_resize(unsigned long addr,$/;"	f	file:
vma_wants_writenotify	mm/mmap.c	/^int vma_wants_writenotify(struct vm_area_struct *vma)$/;"	f
vmalloc	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc);$/;"	v
vmalloc	mm/nommu.c	/^void *vmalloc(unsigned long size)$/;"	f
vmalloc	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc);$/;"	v
vmalloc	mm/vmalloc.c	/^void *vmalloc(unsigned long size)$/;"	f
vmalloc_32	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_32);$/;"	v
vmalloc_32	mm/nommu.c	/^void *vmalloc_32(unsigned long size)$/;"	f
vmalloc_32	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_32);$/;"	v
vmalloc_32	mm/vmalloc.c	/^void *vmalloc_32(unsigned long size)$/;"	f
vmalloc_32_user	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_32_user);$/;"	v
vmalloc_32_user	mm/nommu.c	/^void *vmalloc_32_user(unsigned long size)$/;"	f
vmalloc_32_user	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_32_user);$/;"	v
vmalloc_32_user	mm/vmalloc.c	/^void *vmalloc_32_user(unsigned long size)$/;"	f
vmalloc_exec	mm/nommu.c	/^void *vmalloc_exec(unsigned long size)$/;"	f
vmalloc_exec	mm/vmalloc.c	/^void *vmalloc_exec(unsigned long size)$/;"	f
vmalloc_init	mm/vmalloc.c	/^void __init vmalloc_init(void)$/;"	f
vmalloc_node	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_node);$/;"	v
vmalloc_node	mm/nommu.c	/^void *vmalloc_node(unsigned long size, int node)$/;"	f
vmalloc_node	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_node);$/;"	v
vmalloc_node	mm/vmalloc.c	/^void *vmalloc_node(unsigned long size, int node)$/;"	f
vmalloc_op	mm/vmalloc.c	/^static const struct seq_operations vmalloc_op = {$/;"	v	typeref:struct:seq_operations	file:
vmalloc_open	mm/vmalloc.c	/^static int vmalloc_open(struct inode *inode, struct file *file)$/;"	f	file:
vmalloc_sync_all	mm/nommu.c	/^void  __attribute__((weak)) vmalloc_sync_all(void)$/;"	f
vmalloc_sync_all	mm/vmalloc.c	/^void  __attribute__((weak)) vmalloc_sync_all(void)$/;"	f
vmalloc_to_page	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_to_page);$/;"	v
vmalloc_to_page	mm/nommu.c	/^struct page *vmalloc_to_page(const void *addr)$/;"	f
vmalloc_to_page	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_to_page);$/;"	v
vmalloc_to_page	mm/vmalloc.c	/^struct page *vmalloc_to_page(const void *vmalloc_addr)$/;"	f
vmalloc_to_pfn	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_to_pfn);$/;"	v
vmalloc_to_pfn	mm/nommu.c	/^unsigned long vmalloc_to_pfn(const void *addr)$/;"	f
vmalloc_to_pfn	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_to_pfn);$/;"	v
vmalloc_to_pfn	mm/vmalloc.c	/^unsigned long vmalloc_to_pfn(const void *vmalloc_addr)$/;"	f
vmalloc_user	mm/nommu.c	/^EXPORT_SYMBOL(vmalloc_user);$/;"	v
vmalloc_user	mm/nommu.c	/^void *vmalloc_user(unsigned long size)$/;"	f
vmalloc_user	mm/vmalloc.c	/^EXPORT_SYMBOL(vmalloc_user);$/;"	v
vmalloc_user	mm/vmalloc.c	/^void *vmalloc_user(unsigned long size)$/;"	f
vmap	mm/nommu.c	/^EXPORT_SYMBOL(vmap);$/;"	v
vmap	mm/nommu.c	/^void *vmap(struct page **pages, unsigned int count, unsigned long flags, pgprot_t prot)$/;"	f
vmap	mm/vmalloc.c	/^EXPORT_SYMBOL(vmap);$/;"	v
vmap	mm/vmalloc.c	/^void *vmap(struct page **pages, unsigned int count,$/;"	f
vmap_area	mm/vmalloc.c	/^struct vmap_area {$/;"	s	file:
vmap_area_pcpu_hole	mm/vmalloc.c	/^static unsigned long vmap_area_pcpu_hole;$/;"	v	file:
vmap_area_root	mm/vmalloc.c	/^static struct rb_root vmap_area_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
vmap_block	mm/vmalloc.c	/^struct vmap_block {$/;"	s	file:
vmap_block_queue	mm/vmalloc.c	/^struct vmap_block_queue {$/;"	s	file:
vmap_debug_free_range	mm/vmalloc.c	/^static void vmap_debug_free_range(unsigned long start, unsigned long end)$/;"	f	file:
vmap_lazy_nr	mm/vmalloc.c	/^static atomic_t vmap_lazy_nr = ATOMIC_INIT(0);$/;"	v	file:
vmap_page_range	mm/vmalloc.c	/^static int vmap_page_range(unsigned long start, unsigned long end,$/;"	f	file:
vmap_page_range_noflush	mm/vmalloc.c	/^static int vmap_page_range_noflush(unsigned long start, unsigned long end,$/;"	f	file:
vmap_pmd_range	mm/vmalloc.c	/^static int vmap_pmd_range(pud_t *pud, unsigned long addr,$/;"	f	file:
vmap_pte_range	mm/vmalloc.c	/^static int vmap_pte_range(pmd_t *pmd, unsigned long addr,$/;"	f	file:
vmap_pud_range	mm/vmalloc.c	/^static int vmap_pud_range(pgd_t *pgd, unsigned long addr,$/;"	f	file:
vmcoreinfo	kernel/ksysfs.c	/^KERNEL_ATTR_RO(vmcoreinfo);$/;"	v
vmcoreinfo_append_str	kernel/kexec.c	/^void vmcoreinfo_append_str(const char *fmt, ...)$/;"	f
vmcoreinfo_data	kernel/kexec.c	/^static unsigned char vmcoreinfo_data[VMCOREINFO_BYTES];$/;"	v	file:
vmcoreinfo_max_size	kernel/kexec.c	/^size_t vmcoreinfo_max_size = sizeof(vmcoreinfo_data);$/;"	v
vmcoreinfo_note	kernel/kexec.c	/^u32 vmcoreinfo_note[VMCOREINFO_NOTE_SIZE\/4];$/;"	v
vmcoreinfo_show	kernel/ksysfs.c	/^static ssize_t vmcoreinfo_show(struct kobject *kobj,$/;"	f	file:
vmcoreinfo_size	kernel/kexec.c	/^size_t vmcoreinfo_size;$/;"	v
vmemmap_alloc_block	mm/sparse-vmemmap.c	/^void * __meminit vmemmap_alloc_block(unsigned long size, int node)$/;"	f
vmemmap_pgd_populate	mm/sparse-vmemmap.c	/^pgd_t * __meminit vmemmap_pgd_populate(unsigned long addr, int node)$/;"	f
vmemmap_pmd_populate	mm/sparse-vmemmap.c	/^pmd_t * __meminit vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node)$/;"	f
vmemmap_populate_basepages	mm/sparse-vmemmap.c	/^int __meminit vmemmap_populate_basepages(struct page *start_page,$/;"	f
vmemmap_populate_print_last	mm/sparse.c	/^void __attribute__((weak)) __meminit vmemmap_populate_print_last(void)$/;"	f
vmemmap_pte_populate	mm/sparse-vmemmap.c	/^pte_t * __meminit vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node)$/;"	f
vmemmap_pud_populate	mm/sparse-vmemmap.c	/^pud_t * __meminit vmemmap_pud_populate(pgd_t *pgd, unsigned long addr, int node)$/;"	f
vmemmap_verify	mm/sparse-vmemmap.c	/^void __meminit vmemmap_verify(pte_t *pte, int node,$/;"	f
vmlist	mm/nommu.c	/^struct vm_struct *vmlist;$/;"	v	typeref:struct:vm_struct
vmlist	mm/vmalloc.c	/^struct vm_struct *vmlist;$/;"	v	typeref:struct:vm_struct
vmlist_lock	mm/nommu.c	/^DEFINE_RWLOCK(vmlist_lock);$/;"	v
vmlist_lock	mm/vmalloc.c	/^DEFINE_RWLOCK(vmlist_lock);$/;"	v
vms	mm/percpu.c	/^	struct vm_struct	**vms;		\/* mapped vmalloc regions *\/$/;"	m	struct:pcpu_chunk	typeref:struct:pcpu_chunk::vm_struct	file:
vmsplice_to_pipe	fs/splice.c	/^static long vmsplice_to_pipe(struct file *file, const struct iovec __user *iov,$/;"	f	file:
vmsplice_to_user	fs/splice.c	/^static long vmsplice_to_user(struct file *file, const struct iovec __user *iov,$/;"	f	file:
vmstat_cpuup_callback	mm/vmstat.c	/^static int __cpuinit vmstat_cpuup_callback(struct notifier_block *nfb,$/;"	f	file:
vmstat_next	mm/vmstat.c	/^static void *vmstat_next(struct seq_file *m, void *arg, loff_t *pos)$/;"	f	file:
vmstat_notifier	mm/vmstat.c	/^static struct notifier_block __cpuinitdata vmstat_notifier =$/;"	v	typeref:struct:__cpuinitdata	file:
vmstat_op	mm/vmstat.c	/^static const struct seq_operations vmstat_op = {$/;"	v	typeref:struct:seq_operations	file:
vmstat_open	mm/vmstat.c	/^static int vmstat_open(struct inode *inode, struct file *file)$/;"	f	file:
vmstat_show	mm/vmstat.c	/^static int vmstat_show(struct seq_file *m, void *arg)$/;"	f	file:
vmstat_start	mm/vmstat.c	/^static void *vmstat_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
vmstat_stop	mm/vmstat.c	/^static void vmstat_stop(struct seq_file *m, void *arg)$/;"	f	file:
vmstat_text	mm/vmstat.c	/^static const char * const vmstat_text[] = {$/;"	v	file:
vmstat_update	mm/vmstat.c	/^static void vmstat_update(struct work_struct *w)$/;"	f	file:
vmtruncate	mm/truncate.c	/^EXPORT_SYMBOL(vmtruncate);$/;"	v
vmtruncate	mm/truncate.c	/^int vmtruncate(struct inode *inode, loff_t offset)$/;"	f
vmtruncate_range	mm/memory.c	/^int vmtruncate_range(struct inode *inode, loff_t offset, loff_t end)$/;"	f
vprintk	kernel/printk.c	/^EXPORT_SYMBOL(vprintk);$/;"	v
vprintk	kernel/printk.c	/^asmlinkage int vprintk(const char *fmt, va_list args)$/;"	f
vread	mm/nommu.c	/^long vread(char *buf, char *addr, unsigned long count)$/;"	f
vread	mm/vmalloc.c	/^long vread(char *buf, char *addr, unsigned long count)$/;"	f
vrfy_dir	fs/read_write.c	543;"	d	file:
vslow_work_executing_count	kernel/slow-work.c	/^static atomic_t vslow_work_executing_count;$/;"	v	file:
vslow_work_proportion	kernel/slow-work.c	/^static unsigned vslow_work_proportion = 50; \/* % of threads that may process$/;"	v	file:
vslow_work_queue	kernel/slow-work.c	/^LIST_HEAD(vslow_work_queue);$/;"	v
vunmap	mm/nommu.c	/^EXPORT_SYMBOL(vunmap);$/;"	v
vunmap	mm/nommu.c	/^void vunmap(const void *addr)$/;"	f
vunmap	mm/vmalloc.c	/^EXPORT_SYMBOL(vunmap);$/;"	v
vunmap	mm/vmalloc.c	/^void vunmap(const void *addr)$/;"	f
vunmap_page_range	mm/vmalloc.c	/^static void vunmap_page_range(unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pmd_range	mm/vmalloc.c	/^static void vunmap_pmd_range(pud_t *pud, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pte_range	mm/vmalloc.c	/^static void vunmap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pud_range	mm/vmalloc.c	/^static void vunmap_pud_range(pgd_t *pgd, unsigned long addr, unsigned long end)$/;"	f	file:
vwrite	mm/nommu.c	/^long vwrite(char *buf, char *addr, unsigned long count)$/;"	f
vwrite	mm/vmalloc.c	/^long vwrite(char *buf, char *addr, unsigned long count)$/;"	f
w_long	fs/compat_ioctl.c	/^static int w_long(unsigned int fd, unsigned int cmd,$/;"	f	file:
wait	fs/eventpoll.c	/^	wait_queue_t wait;$/;"	m	struct:eppoll_entry	file:
wait	kernel/kmod.c	/^	enum umh_wait wait;$/;"	m	struct:subprocess_info	typeref:enum:subprocess_info::umh_wait	file:
wait_consider_task	kernel/exit.c	/^static int wait_consider_task(struct wait_opts *wo, int ptrace,$/;"	f	file:
wait_for_all_aios	fs/aio.c	/^static void wait_for_all_aios(struct kioctx *ctx)$/;"	f	file:
wait_for_common	kernel/sched.c	/^wait_for_common(struct completion *x, long timeout, int state)$/;"	f	file:
wait_for_completion	kernel/sched.c	/^EXPORT_SYMBOL(wait_for_completion);$/;"	v
wait_for_completion	kernel/sched.c	/^void __sched wait_for_completion(struct completion *x)$/;"	f
wait_for_completion_interruptible	kernel/sched.c	/^EXPORT_SYMBOL(wait_for_completion_interruptible);$/;"	v
wait_for_completion_interruptible	kernel/sched.c	/^int __sched wait_for_completion_interruptible(struct completion *x)$/;"	f
wait_for_completion_interruptible_timeout	kernel/sched.c	/^EXPORT_SYMBOL(wait_for_completion_interruptible_timeout);$/;"	v
wait_for_completion_interruptible_timeout	kernel/sched.c	/^wait_for_completion_interruptible_timeout(struct completion *x,$/;"	f
wait_for_completion_killable	kernel/sched.c	/^EXPORT_SYMBOL(wait_for_completion_killable);$/;"	v
wait_for_completion_killable	kernel/sched.c	/^int __sched wait_for_completion_killable(struct completion *x)$/;"	f
wait_for_completion_timeout	kernel/sched.c	/^EXPORT_SYMBOL(wait_for_completion_timeout);$/;"	v
wait_for_completion_timeout	kernel/sched.c	/^wait_for_completion_timeout(struct completion *x, unsigned long timeout)$/;"	f
wait_for_discard	mm/swapfile.c	/^static int wait_for_discard(void *word)$/;"	f	file:
wait_for_dump_helpers	fs/exec.c	/^static void wait_for_dump_helpers(struct file *file)$/;"	f	file:
wait_for_helper	kernel/kmod.c	/^static int wait_for_helper(void *data)$/;"	f	file:
wait_for_partner	fs/fifo.c	/^static void wait_for_partner(struct inode* inode, unsigned int *cnt)$/;"	f	file:
wait_for_zero_refcount	kernel/module.c	/^static void wait_for_zero_refcount(struct module *mod)$/;"	f	file:
wait_key_set	fs/select.c	/^static inline void wait_key_set(poll_table *wait, unsigned long in,$/;"	f	file:
wait_noreap_copyout	kernel/exit.c	/^static int wait_noreap_copyout(struct wait_opts *wo, struct task_struct *p,$/;"	f	file:
wait_on_cpu_work	kernel/workqueue.c	/^static void wait_on_cpu_work(struct cpu_workqueue_struct *cwq,$/;"	f	file:
wait_on_page_bit	mm/filemap.c	/^EXPORT_SYMBOL(wait_on_page_bit);$/;"	v
wait_on_page_bit	mm/filemap.c	/^void wait_on_page_bit(struct page *page, int bit_nr)$/;"	f
wait_on_page_locked	include/linux/pagemap.h	/^static inline void wait_on_page_locked(struct page *page)$/;"	f
wait_on_page_read	mm/filemap.c	/^static struct page *wait_on_page_read(struct page *page)$/;"	f	file:
wait_on_page_writeback	include/linux/pagemap.h	/^static inline void wait_on_page_writeback(struct page *page)$/;"	f
wait_on_retry_sync_kiocb	fs/read_write.c	/^static void wait_on_retry_sync_kiocb(struct kiocb *iocb)$/;"	f	file:
wait_on_sync_kiocb	fs/aio.c	/^EXPORT_SYMBOL(wait_on_sync_kiocb);$/;"	v
wait_on_sync_kiocb	fs/aio.c	/^ssize_t wait_on_sync_kiocb(struct kiocb *iocb)$/;"	f
wait_on_work	kernel/workqueue.c	/^static void wait_on_work(struct work_struct *work)$/;"	f	file:
wait_opts	kernel/exit.c	/^struct wait_opts {$/;"	s	file:
wait_sb_inodes	fs/fs-writeback.c	/^static void wait_sb_inodes(struct super_block *sb)$/;"	f	file:
wait_table_bits	mm/page_alloc.c	/^static inline unsigned long wait_table_bits(unsigned long size)$/;"	f	file:
wait_table_hash_nr_entries	mm/page_alloc.c	/^static inline unsigned long wait_table_hash_nr_entries(unsigned long pages)$/;"	f	file:
wait_task_context_switch	kernel/sched.c	/^void wait_task_context_switch(struct task_struct *p)$/;"	f
wait_task_continued	kernel/exit.c	/^static int wait_task_continued(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
wait_task_inactive	kernel/sched.c	/^unsigned long wait_task_inactive(struct task_struct *p, long match_state)$/;"	f
wait_task_stopped	kernel/exit.c	/^static int wait_task_stopped(struct wait_opts *wo,$/;"	f	file:
wait_task_zombie	kernel/exit.c	/^static int wait_task_zombie(struct wait_opts *wo, struct task_struct *p)$/;"	f	file:
waiter	fs/direct-io.c	/^	struct task_struct *waiter;	\/* waiting task (NULL if none) *\/$/;"	m	struct:dio	typeref:struct:dio::task_struct	file:
waitq	mm/dmapool.c	/^	wait_queue_head_t waitq;$/;"	m	struct:dma_pool	file:
wake_affine	kernel/sched_fair.c	/^static int wake_affine(struct sched_domain *sd, struct task_struct *p, int sync)$/;"	f	file:
wake_all_kswapd	mm/page_alloc.c	/^void wake_all_kswapd(unsigned int order, struct zonelist *zonelist,$/;"	f	file:
wake_bit_function	kernel/wait.c	/^EXPORT_SYMBOL(wake_bit_function);$/;"	v
wake_bit_function	kernel/wait.c	/^int wake_bit_function(wait_queue_t *wait, unsigned mode, int sync, void *arg)$/;"	f
wake_futex	kernel/futex.c	/^static void wake_futex(struct futex_q *q)$/;"	f	file:
wake_futex_pi	kernel/futex.c	/^static int wake_futex_pi(u32 __user *uaddr, u32 uval, struct futex_q *this)$/;"	f	file:
wake_up_bit	kernel/wait.c	/^EXPORT_SYMBOL(wake_up_bit);$/;"	v
wake_up_bit	kernel/wait.c	/^void wake_up_bit(void *word, int bit)$/;"	f
wake_up_idle_cpu	kernel/sched.c	/^void wake_up_idle_cpu(int cpu)$/;"	f
wake_up_inode	fs/inode.c	/^static void wake_up_inode(struct inode *inode)$/;"	f	file:
wake_up_klogd	kernel/printk.c	/^void wake_up_klogd(void)$/;"	f
wake_up_new_task	kernel/sched.c	/^void wake_up_new_task(struct task_struct *p, unsigned long clone_flags)$/;"	f
wake_up_page	mm/filemap.c	/^static inline void wake_up_page(struct page *page, int bit)$/;"	f	file:
wake_up_partner	fs/fifo.c	/^static void wake_up_partner(struct inode* inode)$/;"	f	file:
wake_up_process	kernel/sched.c	/^EXPORT_SYMBOL(wake_up_process);$/;"	v
wake_up_process	kernel/sched.c	/^int wake_up_process(struct task_struct *p)$/;"	f
wake_up_state	kernel/sched.c	/^int wake_up_state(struct task_struct *p, unsigned int state)$/;"	f
wakeme_after_rcu	kernel/rcupdate.c	/^void wakeme_after_rcu(struct rcu_head  *head)$/;"	f
wakeup_flusher_threads	fs/fs-writeback.c	/^void wakeup_flusher_threads(long nr_pages)$/;"	f
wakeup_gran	kernel/sched_fair.c	/^wakeup_gran(struct sched_entity *curr, struct sched_entity *se)$/;"	f	file:
wakeup_kswapd	mm/vmscan.c	/^void wakeup_kswapd(struct zone *zone, int order)$/;"	f
wakeup_next_waiter	kernel/rtmutex.c	/^static void wakeup_next_waiter(struct rt_mutex *lock)$/;"	f	file:
wakeup_pipe_writers	fs/splice.c	/^static void wakeup_pipe_writers(struct pipe_inode_info *pipe)$/;"	f	file:
wakeup_preempt_entity	kernel/sched_fair.c	/^wakeup_preempt_entity(struct sched_entity *curr, struct sched_entity *se)$/;"	f	file:
wakeup_readers	kernel/relay.c	/^static void wakeup_readers(unsigned long data)$/;"	f	file:
wakeup_softirqd	kernel/softirq.c	/^void wakeup_softirqd(void)$/;"	f
walk_page_range	mm/pagewalk.c	/^int walk_page_range(unsigned long addr, unsigned long end,$/;"	f
walk_pmd_range	mm/pagewalk.c	/^static int walk_pmd_range(pud_t *pud, unsigned long addr, unsigned long end,$/;"	f	file:
walk_pte_range	mm/pagewalk.c	/^static int walk_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,$/;"	f	file:
walk_pud_range	mm/pagewalk.c	/^static int walk_pud_range(pgd_t *pgd, unsigned long addr, unsigned long end,$/;"	f	file:
walk_system_ram_range	kernel/resource.c	/^int walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,$/;"	f
walk_tg_tree	kernel/sched.c	/^static int walk_tg_tree(tg_visitor down, tg_visitor up, void *data)$/;"	f	file:
walk_zones_in_node	mm/vmstat.c	/^static void walk_zones_in_node(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
wants_signal	kernel/signal.c	/^static inline int wants_signal(int sig, struct task_struct *p)$/;"	f	file:
warn	kernel/module.c	/^	bool warn;$/;"	m	struct:find_symbol_arg	file:
warn_deprecated_v2	kernel/capability.c	/^static void warn_deprecated_v2(void)$/;"	f	file:
warn_legacy_capability_use	kernel/capability.c	/^static void warn_legacy_capability_use(void)$/;"	f	file:
warn_on_bintable	kernel/sysctl_binary.c	/^static void warn_on_bintable(const int *name, int nlen)$/;"	f	file:
warn_slowpath_common	kernel/panic.c	/^static void warn_slowpath_common(const char *file, int line, void *caller, struct slowpath_args *args)$/;"	f	file:
warn_slowpath_fmt	kernel/panic.c	/^EXPORT_SYMBOL(warn_slowpath_fmt);$/;"	v
warn_slowpath_fmt	kernel/panic.c	/^void warn_slowpath_fmt(const char *file, int line, const char *fmt, ...)$/;"	f
warn_slowpath_null	kernel/panic.c	/^EXPORT_SYMBOL(warn_slowpath_null);$/;"	v
warn_slowpath_null	kernel/panic.c	/^void warn_slowpath_null(const char *file, int line)$/;"	f
warp_clock	kernel/time.c	/^static inline void warp_clock(void)$/;"	f	file:
watch	kernel/audit_tree.c	/^	struct inotify_watch watch;$/;"	m	struct:audit_chunk	typeref:struct:audit_chunk::inotify_watch	file:
watchdog	kernel/hung_task.c	/^static int watchdog(void *dummy)$/;"	f	file:
watchdog	kernel/sched_rt.c	/^static void watchdog(struct rq *rq, struct task_struct *p)$/;"	f	file:
watchdog	kernel/softlockup.c	/^static int watchdog(void *__bind_cpu)$/;"	f	file:
watchdog_task	kernel/hung_task.c	/^static struct task_struct *watchdog_task;$/;"	v	typeref:struct:task_struct	file:
watches	fs/notify/inotify/inotify.c	/^	struct list_head	watches;	\/* list of watches *\/$/;"	m	struct:inotify_handle	typeref:struct:inotify_handle::list_head	file:
watches	kernel/audit_watch.c	/^	struct list_head	watches; \/* associated watches *\/$/;"	m	struct:audit_parent	typeref:struct:audit_parent::list_head	file:
wb_check_old_data_flush	fs/fs-writeback.c	/^static long wb_check_old_data_flush(struct bdi_writeback *wb)$/;"	f	file:
wb_clear_pending	fs/fs-writeback.c	/^static void wb_clear_pending(struct bdi_writeback *wb, struct bdi_work *work)$/;"	f	file:
wb_do_writeback	fs/fs-writeback.c	/^long wb_do_writeback(struct bdi_writeback *wb, int force_wait)$/;"	f
wb_work_complete	fs/fs-writeback.c	/^static void wb_work_complete(struct bdi_work *work)$/;"	f	file:
wb_writeback	fs/fs-writeback.c	/^static long wb_writeback(struct bdi_writeback *wb,$/;"	f	file:
wb_writeback_args	fs/fs-writeback.c	/^struct wb_writeback_args {$/;"	s	file:
wdata	kernel/audit_watch.c	/^	struct inotify_watch	wdata;	\/* inotify watch data *\/$/;"	m	struct:audit_parent	typeref:struct:audit_parent::inotify_watch	file:
wdog_pid	fs/compat.c	/^	compat_long_t wdog_pid;$/;"	m	struct:compat_ncp_mount_data_v4	file:
wdog_pid	fs/compat.c	/^	compat_pid_t wdog_pid;$/;"	m	struct:compat_ncp_mount_data	file:
weighted_cpuload	kernel/sched.c	/^static unsigned long weighted_cpuload(const int cpu)$/;"	f	file:
what_owner_is_waiting_for	fs/locks.c	/^static struct file_lock *what_owner_is_waiting_for(struct file_lock *block_fl)$/;"	f	file:
whead	fs/eventpoll.c	/^	wait_queue_head_t *whead;$/;"	m	struct:eppoll_entry	file:
when	mm/slub.c	/^	unsigned long when;	\/* When did the operation occur *\/$/;"	m	struct:track	file:
will_become_orphaned_pgrp	kernel/exit.c	/^static int will_become_orphaned_pgrp(struct pid *pgrp, struct task_struct *ignored_task)$/;"	f	file:
within	kernel/lockdep.c	/^static inline int within(const void *addr, void *start, unsigned long size)$/;"	f	file:
within	kernel/module.c	/^static inline int within(unsigned long addr, void *start, unsigned long size)$/;"	f	file:
wlist	kernel/audit_watch.c	/^	struct list_head	wlist;	\/* entry in parent->watches list *\/$/;"	m	struct:audit_watch	typeref:struct:audit_watch::list_head	file:
wo_flags	kernel/exit.c	/^	int			wo_flags;$/;"	m	struct:wait_opts	file:
wo_info	kernel/exit.c	/^	struct siginfo __user	*wo_info;$/;"	m	struct:wait_opts	typeref:struct:wait_opts::__user	file:
wo_pid	kernel/exit.c	/^	struct pid		*wo_pid;$/;"	m	struct:wait_opts	typeref:struct:wait_opts::pid	file:
wo_rusage	kernel/exit.c	/^	struct rusage __user	*wo_rusage;$/;"	m	struct:wait_opts	typeref:struct:wait_opts::__user	file:
wo_stat	kernel/exit.c	/^	int __user		*wo_stat;$/;"	m	struct:wait_opts	file:
wo_type	kernel/exit.c	/^	enum pid_type		wo_type;$/;"	m	struct:wait_opts	typeref:enum:wait_opts::pid_type	file:
work	kernel/kmod.c	/^	struct work_struct work;$/;"	m	struct:subprocess_info	typeref:struct:subprocess_info::work_struct	file:
work	kernel/workqueue.c	/^	struct work_struct	work;$/;"	m	struct:wq_barrier	typeref:struct:wq_barrier::work_struct	file:
work	mm/memcontrol.c	/^	struct work_struct work;$/;"	m	struct:memcg_stock_pcp	typeref:struct:memcg_stock_pcp::work_struct	file:
work_debug_descr	kernel/workqueue.c	/^static struct debug_obj_descr work_debug_descr = {$/;"	v	typeref:struct:debug_obj_descr	file:
work_debug_descr	kernel/workqueue.c	/^static struct debug_obj_descr work_debug_descr;$/;"	v	typeref:struct:debug_obj_descr	file:
work_fixup_activate	kernel/workqueue.c	/^static int work_fixup_activate(void *addr, enum debug_obj_state state)$/;"	f	file:
work_fixup_free	kernel/workqueue.c	/^static int work_fixup_free(void *addr, enum debug_obj_state state)$/;"	f	file:
work_fixup_init	kernel/workqueue.c	/^static int work_fixup_init(void *addr, enum debug_obj_state state)$/;"	f	file:
work_for_cpu	kernel/workqueue.c	/^struct work_for_cpu {$/;"	s	file:
work_on_cpu	kernel/workqueue.c	/^EXPORT_SYMBOL_GPL(work_on_cpu);$/;"	v
work_on_cpu	kernel/workqueue.c	/^long work_on_cpu(unsigned int cpu, long (*fn)(void *), void *arg)$/;"	f
work_with_active_regions	mm/page_alloc.c	/^void __init work_with_active_regions(int nid, work_fn_t work_fn, void *data)$/;"	f
worker_thread	kernel/workqueue.c	/^static int worker_thread(void *__cwq)$/;"	f	file:
worklist	kernel/workqueue.c	/^	struct list_head worklist;$/;"	m	struct:cpu_workqueue_struct	typeref:struct:cpu_workqueue_struct::list_head	file:
workqueue_cpu_callback	kernel/workqueue.c	/^static int __devinit workqueue_cpu_callback(struct notifier_block *nfb,$/;"	f	file:
workqueue_struct	kernel/workqueue.c	/^struct workqueue_struct {$/;"	s	file:
wq	fs/eventpoll.c	/^	wait_queue_head_t wq;$/;"	m	struct:eventpoll	file:
wq	fs/file.c	/^	struct work_struct wq;$/;"	m	struct:fdtable_defer	typeref:struct:fdtable_defer::work_struct	file:
wq	kernel/workqueue.c	/^	struct workqueue_struct *wq;$/;"	m	struct:cpu_workqueue_struct	typeref:struct:cpu_workqueue_struct::workqueue_struct	file:
wq_barrier	kernel/workqueue.c	/^struct wq_barrier {$/;"	s	file:
wq_barrier_func	kernel/workqueue.c	/^static void wq_barrier_func(struct work_struct *work)$/;"	f	file:
wq_cpu_map	kernel/workqueue.c	/^static const struct cpumask *wq_cpu_map(struct workqueue_struct *wq)$/;"	f	file:
wq_per_cpu	kernel/workqueue.c	/^struct cpu_workqueue_struct *wq_per_cpu(struct workqueue_struct *wq, int cpu)$/;"	f	file:
wqh	fs/eventfd.c	/^	wait_queue_head_t wqh;$/;"	m	struct:eventfd_ctx	file:
wqh	fs/timerfd.c	/^	wait_queue_head_t wqh;$/;"	m	struct:timerfd_ctx	file:
wrap_max	kernel/sched_clock.c	/^static inline u64 wrap_max(u64 x, u64 y)$/;"	f	file:
wrap_min	kernel/sched_clock.c	/^static inline u64 wrap_min(u64 x, u64 y)$/;"	f	file:
write_boundary_block	fs/buffer.c	/^void write_boundary_block(struct block_device *bdev,$/;"	f
write_cache_pages	mm/page-writeback.c	/^EXPORT_SYMBOL(write_cache_pages);$/;"	v
write_cache_pages	mm/page-writeback.c	/^int write_cache_pages(struct address_space *mapping,$/;"	f
write_enabled_file_bool	kernel/kprobes.c	/^static ssize_t write_enabled_file_bool(struct file *file,$/;"	f	file:
write_inode	fs/fs-writeback.c	/^static int write_inode(struct inode *inode, int sync)$/;"	f	file:
write_inode_now	fs/fs-writeback.c	/^EXPORT_SYMBOL(write_inode_now);$/;"	v
write_inode_now	fs/fs-writeback.c	/^int write_inode_now(struct inode *inode, int sync)$/;"	f
write_mem_msg	kernel/kgdb.c	/^static int write_mem_msg(int binary)$/;"	f	file:
write_note_info	fs/binfmt_elf.c	/^static int write_note_info(struct elf_note_info *info,$/;"	f	file:
write_one_page	mm/page-writeback.c	/^EXPORT_SYMBOL(write_one_page);$/;"	v
write_one_page	mm/page-writeback.c	/^int write_one_page(struct page *page, int wait)$/;"	f
write_pipe_buf	fs/splice.c	/^static int write_pipe_buf(struct pipe_inode_info *pipe, struct pipe_buffer *buf,$/;"	f	file:
write_pipefifo_fops	fs/pipe.c	/^const struct file_operations write_pipefifo_fops = {$/;"	v	typeref:struct:file_operations
write_profile	kernel/profile.c	/^static ssize_t write_profile(struct file *file, const char __user *buf,$/;"	f	file:
write_protect_page	mm/ksm.c	/^static int write_protect_page(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
write_scan_unevictable_node	mm/vmscan.c	/^static ssize_t write_scan_unevictable_node(struct sys_device *dev,$/;"	f	file:
writeback	mm/memory-failure.c	718;"	d	file:
writeback	mm/memory-failure.c	775;"	d	file:
writeback	mm/mempolicy.c	/^	unsigned long writeback;$/;"	m	struct:numa_maps	file:
writeback_in_progress	fs/fs-writeback.c	/^int writeback_in_progress(struct backing_dev_info *bdi)$/;"	f
writeback_inodes_sb	fs/fs-writeback.c	/^EXPORT_SYMBOL(writeback_inodes_sb);$/;"	v
writeback_inodes_sb	fs/fs-writeback.c	/^void writeback_inodes_sb(struct super_block *sb)$/;"	f
writeback_inodes_sb_if_idle	fs/fs-writeback.c	/^EXPORT_SYMBOL(writeback_inodes_sb_if_idle);$/;"	v
writeback_inodes_sb_if_idle	fs/fs-writeback.c	/^int writeback_inodes_sb_if_idle(struct super_block *sb)$/;"	f
writeback_inodes_wb	fs/fs-writeback.c	/^static void writeback_inodes_wb(struct bdi_writeback *wb,$/;"	f	file:
writeback_inodes_wbc	fs/fs-writeback.c	/^void writeback_inodes_wbc(struct writeback_control *wbc)$/;"	f
writeback_set_ratelimit	mm/page-writeback.c	/^void writeback_set_ratelimit(void)$/;"	f
writeback_single_inode	fs/fs-writeback.c	/^writeback_single_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f	file:
writenote	fs/binfmt_elf.c	/^static int writenote(struct memelfnote *men, struct file *file,$/;"	f	file:
writenote	fs/binfmt_elf_fdpic.c	/^static int writenote(struct memelfnote *men, struct file *file)$/;"	f	file:
writeout	mm/migrate.c	/^static int writeout(struct address_space *mapping, struct page *page)$/;"	f	file:
writer_task	kernel/rcutorture.c	/^static struct task_struct *writer_task;$/;"	v	typeref:struct:task_struct	file:
wsize	fs/compat.c	/^	compat_int_t wsize;$/;"	m	struct:compat_nfs4_mount_data_v1	file:
wsize	fs/nfsctl.c	/^	char *name; int wsize; int rsize;$/;"	m	struct:__anon20	file:
xacct_add_tsk	kernel/tsacct.c	/^void xacct_add_tsk(struct taskstats *stats, struct task_struct *p)$/;"	f
xattr_getsecurity	fs/xattr.c	/^EXPORT_SYMBOL_GPL(xattr_getsecurity);$/;"	v
xattr_getsecurity	fs/xattr.c	/^xattr_getsecurity(struct inode *inode, const char *name, void *value,$/;"	f
xattr_permission	fs/xattr.c	/^xattr_permission(struct inode *inode, const char *name, int mask)$/;"	f	file:
xattr_resolve_name	fs/xattr.c	/^xattr_resolve_name(struct xattr_handler **handlers, const char **name)$/;"	f	file:
xfpu	fs/binfmt_elf.c	/^	elf_fpxregset_t *xfpu;$/;"	m	struct:elf_note_info	file:
xfpu	fs/binfmt_elf.c	/^	elf_fpxregset_t xfpu;		\/* ELF_CORE_XFPREG_TYPE *\/$/;"	m	struct:elf_thread_status	file:
xfpu	fs/binfmt_elf_fdpic.c	/^	elf_fpxregset_t xfpu;		\/* ELF_CORE_XFPREG_TYPE *\/$/;"	m	struct:elf_thread_status	file:
xip_file_fault	mm/filemap_xip.c	/^static int xip_file_fault(struct vm_area_struct *vma, struct vm_fault *vmf)$/;"	f	file:
xip_file_mmap	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_file_mmap);$/;"	v
xip_file_mmap	mm/filemap_xip.c	/^int xip_file_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
xip_file_read	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_file_read);$/;"	v
xip_file_read	mm/filemap_xip.c	/^xip_file_read(struct file *filp, char __user *buf, size_t len, loff_t *ppos)$/;"	f
xip_file_vm_ops	mm/filemap_xip.c	/^static const struct vm_operations_struct xip_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
xip_file_write	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_file_write);$/;"	v
xip_file_write	mm/filemap_xip.c	/^xip_file_write(struct file *filp, const char __user *buf, size_t len,$/;"	f
xip_sparse_page	mm/filemap_xip.c	/^static struct page *xip_sparse_page(void)$/;"	f	file:
xip_sparse_seq	mm/filemap_xip.c	/^static seqcount_t xip_sparse_seq = SEQCNT_ZERO;$/;"	v	file:
xip_truncate_page	mm/filemap_xip.c	/^EXPORT_SYMBOL_GPL(xip_truncate_page);$/;"	v
xip_truncate_page	mm/filemap_xip.c	/^xip_truncate_page(struct address_space *mapping, loff_t from)$/;"	f
xmit_fifo_size	fs/compat_ioctl.c	/^        compat_int_t    xmit_fifo_size;$/;"	m	struct:serial_struct32	file:
xmit_idle	fs/compat_ioctl.c	/^	compat_time_t xmit_idle;$/;"	m	struct:ppp_idle32	file:
yield	kernel/sched.c	/^EXPORT_SYMBOL(yield);$/;"	v
yield	kernel/sched.c	/^void __sched yield(void)$/;"	f
yield_task_fair	kernel/sched_fair.c	/^static void yield_task_fair(struct rq *rq)$/;"	f	file:
yield_task_rt	kernel/sched_rt.c	/^static void yield_task_rt(struct rq *rq)$/;"	f	file:
yld_count	kernel/sched.c	/^	unsigned int yld_count;$/;"	m	struct:rq	file:
zap_class	kernel/lockdep.c	/^static void zap_class(struct lock_class *class)$/;"	f	file:
zap_locks	kernel/printk.c	/^static void zap_locks(void)$/;"	f	file:
zap_other_threads	kernel/signal.c	/^void zap_other_threads(struct task_struct *p)$/;"	f
zap_page_range	mm/memory.c	/^unsigned long zap_page_range(struct vm_area_struct *vma, unsigned long address,$/;"	f
zap_pid_ns_processes	kernel/pid_namespace.c	/^void zap_pid_ns_processes(struct pid_namespace *pid_ns)$/;"	f
zap_pmd_range	mm/memory.c	/^static inline unsigned long zap_pmd_range(struct mmu_gather *tlb,$/;"	f	file:
zap_process	fs/exec.c	/^static int zap_process(struct task_struct *start)$/;"	f	file:
zap_pte	mm/fremap.c	/^static void zap_pte(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
zap_pte_range	mm/memory.c	/^static unsigned long zap_pte_range(struct mmu_gather *tlb,$/;"	f	file:
zap_pud_range	mm/memory.c	/^static inline unsigned long zap_pud_range(struct mmu_gather *tlb,$/;"	f	file:
zap_threads	fs/exec.c	/^static inline int zap_threads(struct task_struct *tsk, struct mm_struct *mm,$/;"	f	file:
zap_vma_ptes	mm/memory.c	/^EXPORT_SYMBOL_GPL(zap_vma_ptes);$/;"	v
zap_vma_ptes	mm/memory.c	/^int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,$/;"	f
zero	fs/eventpoll.c	/^static int zero;$/;"	v	file:
zero	kernel/sysctl.c	/^static int zero;$/;"	v	file:
zero_fill_bio	fs/bio.c	/^EXPORT_SYMBOL(zero_fill_bio);$/;"	v
zero_fill_bio	fs/bio.c	/^void zero_fill_bio(struct bio *bio)$/;"	f
zlc_mark_zone_full	mm/page_alloc.c	/^static void zlc_mark_zone_full(struct zonelist *zonelist, struct zoneref *z)$/;"	f	file:
zlc_setup	mm/page_alloc.c	/^static nodemask_t *zlc_setup(struct zonelist *zonelist, int alloc_flags)$/;"	f	file:
zlc_zone_worth_trying	mm/page_alloc.c	/^static int zlc_zone_worth_trying(struct zonelist *zonelist, struct zoneref *z,$/;"	f	file:
zone_absent_pages_in_node	mm/page_alloc.c	/^static inline unsigned long __meminit zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_absent_pages_in_node	mm/page_alloc.c	/^static unsigned long __meminit zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_batchsize	mm/page_alloc.c	/^static int zone_batchsize(struct zone *zone)$/;"	f	file:
zone_init_free_lists	mm/page_alloc.c	/^static void __meminit zone_init_free_lists(struct zone *zone)$/;"	f	file:
zone_movable_pfn	mm/page_alloc.c	/^  static unsigned long __meminitdata zone_movable_pfn[MAX_NUMNODES];$/;"	v	file:
zone_names	mm/page_alloc.c	/^static char * const zone_names[MAX_NR_ZONES] = {$/;"	v	file:
zone_nr_lru_pages	mm/vmscan.c	/^static unsigned long zone_nr_lru_pages(struct zone *zone,$/;"	f	file:
zone_pagecache_reclaimable	mm/vmscan.c	/^static long zone_pagecache_reclaimable(struct zone *zone)$/;"	f	file:
zone_pcp_init	mm/page_alloc.c	/^static __meminit void zone_pcp_init(struct zone *zone)$/;"	f	file:
zone_pcp_update	mm/page_alloc.c	/^void zone_pcp_update(struct zone *zone)$/;"	f
zone_reclaim	mm/vmscan.c	/^int zone_reclaim(struct zone *zone, gfp_t gfp_mask, unsigned int order)$/;"	f
zone_reclaimable_pages	mm/vmscan.c	/^unsigned long zone_reclaimable_pages(struct zone *zone)$/;"	f
zone_spanned_pages_in_node	mm/page_alloc.c	/^static inline unsigned long __meminit zone_spanned_pages_in_node(int nid,$/;"	f	file:
zone_spanned_pages_in_node	mm/page_alloc.c	/^static unsigned long __meminit zone_spanned_pages_in_node(int nid,$/;"	f	file:
zone_statistics	mm/vmstat.c	/^void zone_statistics(struct zone *preferred_zone, struct zone *z)$/;"	f
zone_unmapped_file_pages	mm/vmscan.c	/^static inline unsigned long zone_unmapped_file_pages(struct zone *zone)$/;"	f	file:
zone_wait_table_init	mm/page_alloc.c	/^int zone_wait_table_init(struct zone *zone, unsigned long zone_size_pages)$/;"	f	file:
zone_watermark_ok	mm/page_alloc.c	/^int zone_watermark_ok(struct zone *z, int order, unsigned long mark,$/;"	f
zoneinfo	mm/memcontrol.c	/^	struct mem_cgroup_per_zone zoneinfo[MAX_NR_ZONES];$/;"	m	struct:mem_cgroup_per_node	typeref:struct:mem_cgroup_per_node::mem_cgroup_per_zone	file:
zoneinfo_op	mm/vmstat.c	/^static const struct seq_operations zoneinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
zoneinfo_open	mm/vmstat.c	/^static int zoneinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
zoneinfo_show	mm/vmstat.c	/^static int zoneinfo_show(struct seq_file *m, void *arg)$/;"	f	file:
zoneinfo_show_print	mm/vmstat.c	/^static void zoneinfo_show_print(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
zonelist_order_name	mm/page_alloc.c	/^static char zonelist_order_name[3][8] = {"Default", "Node", "Zone"};$/;"	v	file:
zoneref_set_zone	mm/page_alloc.c	/^static void zoneref_set_zone(struct zone *zone, struct zoneref *zoneref)$/;"	f	file:
zref_in_nodemask	mm/mmzone.c	/^static inline int zref_in_nodemask(struct zoneref *zref, nodemask_t *nodes)$/;"	f	file:
