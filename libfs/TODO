-superblock container
  - filesystem
  - free bitmaps

-DPO
  - implement protocol for transition between hierarchical and flat locks 
  - implement read-only transactional concurrency control

-rename
  - port remame to DPO

-RPC
  - integrate Venkat's fast RPC

-Mnemosyne
  - integrate Mnemosyne's PCM model
  - integrate Mnemosyne's primitives: including the RAWL which we probably 
    have to re-write as the log manager code-base is crappy

===================================================================================
===================================================================================
-concurrent namespace operations (mkdir, rmdir, link, unlink, rename)
-generic namemap: to be used by directory inodes and mount point pseudo-inodes
  - parameterized using a hashfunction (functor)
  - extend the hashtable interface to take the result of the hash-function as a hint 
    and verify that the hash is correct. is it cheaper to verify?
-readdir
-files
-journal


Optimizations:
==============

// TODO: optimize immutable inodes (e.g. for lookup)
// check ino if in cache otherwise return immutable
// if ino in cache then return mutable
// how about race: someone gets immutable but someone gets mutable
// and modifies. other doesn't see the modification.
// you should provide an easy way to check whether immutable inode
// is still valid. Here is a quick check that should work nicely in
// absence of contention (design point case):
//
// For example, GetInode should:
// -If asked for immutable inode then user should provide an Inode to wrap it in.
// -If asked for immutable inode then a mutable one exists in my cache then I won't provide it to you 
// -If asked for mutable inode then I will provide you with an Inode, which I will
//  also be responsible for deallocating when its refcount drops to 0


mfs/client/dir_inode.c
// TODO: perhaps it makes sense to cache persistent entries to avoid
// the second lookup (persistent inode lookup) for entries that have
// already been looked up in the past. But the benefit might not be much because
// it further slows down lookups as we need to insert an entry in the cache. 
 
client/namespace.cc
//TODO: Optimization: When resolving a pathname (Namex), use LookupFast API 
// instead of Lookup and revert to Lookup only when the inode is mutated
//TODO: optimization: when namex uses immutable for lookup, nameiparent should be able
//to ask for a mutable inode


InodeMap
//TODO: USe a timestamp counter to signal to clients that an
// immutable inode mapping they hold may be invalid (because someone
// inserted a mutable one)
	

