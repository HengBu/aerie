from unit_test import addUnitTest
from unit_test import addUnitTestFilter
from unit_test import addUnitTestSuite
from unit_test import addUnitTestList
from unit_test import runUnitTests
import re, os, sys, string
sys.path.append('%s/library' % (Dir('#').abspath))


Import('mainEnv')
testEnv = mainEnv.Clone()
testEnv.Append(CPPPATH = ['#', '#src', '#test'])

# For correct and complete compilation.
testEnv.AddMethod(addUnitTest, "addUnitTest")
testEnv.AddMethod(addUnitTestFilter, "addUnitTestFilter")
testEnv.AddMethod(addUnitTestSuite, "addUnitTestSuite")
testEnv.AddMethod(addUnitTestList, "addUnitTestList")
testEnv['UNIT_TEST_CMDS'] = []
testEnv['TEST_FILTER'] = GetOption('test_filter')
Export('testEnv')

thedir = os.path.join(Dir('#').abspath, 'test/unit')
dirs = [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]

Import('fscLibrary')
Import('mfsLibrary')
Import('commonLibrary')
Import('chunkstoreLibrary')
Import('ipcClientLibrary')
depLibs = [mfsLibrary, fscLibrary, ipcClientLibrary, chunkstoreLibrary, commonLibrary]

source = [Glob('*/*.test.cc'), Glob('*/*.fixture.cc'), Glob('*/*.helper.cc'), 'main.cc']
source += [Glob('*/*/*.test.cc'), Glob('*/*/*.fixture.cc'), Glob('*/*/*.helper.cc')]
test = testEnv.Program('test', source, LIBS=['pthread', 'rt', 'UnitTest++']+depLibs)

if testEnv['TEST_FILTER']:
	try:
		os.remove(os.path.join(Dir('#').abspath, 'build/test/unit/test.filter.passed'))
	except OSError:
		# just ignore the exception; it is most likely raised because the file 
		# does not exist
		pass
	runtests = testEnv.Command("test.filter.passed", ['test', mfsLibrary], runUnitTests)
else:
	runtests = testEnv.Command("test.passed", ['test', mfsLibrary], runUnitTests)

testEnv.addUnitTestFilter(test[0].path, testEnv['TEST_FILTER'])
