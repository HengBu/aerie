import os
import sys
import string
import testfw
import copy
from integration_test import runIntegrationTests

Import('mainEnv', 'testEnv')
myTestEnv = testEnv.Clone()

Import('fscLibrary')
Import('fssLibrary')
Import('mfsClientLibrary')
Import('mfsServerLibrary')
Import('commonLibrary')
Import('spaLibrary')
Import('ssaClientLibrary')
Import('ssaServerLibrary')
Import('ipcClientLibrary')
Import('ipcServerLibrary')
clientDepLibs = [mfsClientLibrary, fscLibrary, ipcClientLibrary, ssaClientLibrary, spaLibrary, commonLibrary]
serverDepLibs = [mfsServerLibrary, fssLibrary, ipcServerLibrary, ssaServerLibrary, spaLibrary, commonLibrary]
objects = myTestEnv['OBJECTS']

testProgram = myTestEnv.Program('test', source = [Glob('*.test.cc'), Glob('*.fixture.cc'), Glob('*.helper.cc'), objects], LIBS=['UnitTest++', 'pthread', 'rt']+clientDepLibs)
serverProgram = myTestEnv.Program('smain', source = myTestEnv['SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
runtests = myTestEnv.Command("test.passed", ['test', fscLibrary], runIntegrationTests)


###############################################################################
# INTEGRATION TEST SCHEDULES
############################################################################### 

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'IPC:TestServerIsAlive',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/init.sh'),
    testfw = testProgram, server = serverProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'IPC:TestServerIsAlive')])
    },
    rendezvous = []
))
