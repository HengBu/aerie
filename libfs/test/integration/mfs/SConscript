import os
import re
import sys
import string
import testfw
import copy
from integration_test import runIntegrationTests

Import('mainEnv', 'testEnv')
myTestEnv = testEnv.Clone()

Import('fscLibrary')
Import('fssLibrary')
Import('mfsLibrary')
Import('commonLibrary')
Import('chunkstoreLibrary')
Import('rpcLibrary')
depLibs = [mfsLibrary, fscLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
serverDepLibs = [fssLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
objects = myTestEnv['OBJECTS']

lockServerProgram = myTestEnv.Program('smain', \
	source = myTestEnv['SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
hlockServerProgram = myTestEnv.Program('smain-hlock', \
	source = myTestEnv['HLOCK_SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
testProgram = myTestEnv.Program('test', \
	source = [Glob('*.test.cc'), Glob('*.fixture.cc'), Glob('*.helper.cc'), objects], \
	LIBS=['UnitTest++', 'pthread', 'rt']+depLibs)
runtests = myTestEnv.Command("test.passed", ['test', fscLibrary], runIntegrationTests)



###############################################################################
# INTEGRATION TEST SCHEDULES
############################################################################### 

#
# NAMESPACE TESTS
#

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFS:TestMkfs',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Namespace:TestMkfs')])
    },
    rendezvous = []
))

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFS:TestMkfsMountSingle',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Namespace:TestMkfsMount')])
    },
    rendezvous = []
))

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFS:TestMkfsMountConcurrent',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Namespace:TestMkfs')]),
        'C2': ( testProgram, [('T1', 'Namespace:TestMount')])
    },
    rendezvous = [('C1:T1:MkfsAfter:block', 'C2:T1:MountBefore:block')]
))

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFS:TestMkdirRmdirConcurrent',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Namespace:TestMkfsMkdir')]),
        'C2': ( testProgram, [('T1', 'Namespace:TestRmdir')])
    },
    rendezvous = [('C1:T1:E2:block', 'C2:T1:E1:block'), 
                  ('C1:T1:E3:block', 'C2:T1:E3:block')]
))


#
# DIRECTORY INODE TESTS (SINGLE CLIENT)
#


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSDirInode:TestLink',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSDirInode:TestLink')])
    },
    rendezvous = []
))

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSDirInode:TestUnlink',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSDirInode:TestUnlink')])
    },
    rendezvous = []
))


#
# DIRECTORY INODE TESTS (MULTIPLE CLIENTS)
#


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSDirInode:TestLinkConcurrent1',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSDirInode:TestLink1_publisher')]),
        'C2': ( testProgram, [('T1', 'MFSDirInode:TestLink1_consumer')])
    },
    rendezvous = [
                  ('C1:T1:AfterMapObjects:block', 'C2:T1:BeforeMapObjects:block'),
                  ('C1:T1:AfterLock:block', 'C2:T1:BeforeLock:block'),
                  ('C1:T1:End:block', 'C2:T1:End:block'),
    ]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSDirInode:TestLinkConcurrent2',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSDirInode:TestLink2_publisher')]),
        'C2': ( testProgram, [('T1', 'MFSDirInode:TestLink2_consumer')])
    },
    rendezvous = [
                  ('C1:T1:AfterMapObjects:block', 'C2:T1:BeforeMapObjects:block'),
                  ('C1:T1:AfterLock:block', 'C2:T1:BeforeLock:block'),
                  ('C1:T1:End:block', 'C2:T1:End:block'),
    ]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSDirInode:TestUnlinkConcurrent1',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSDirInode:TestUnlink1_publisher')]),
        'C2': ( testProgram, [('T1', 'MFSDirInode:TestUnlink1_consumer')])
    },
    rendezvous = [
                  ('C1:T1:AfterMapObjects:block', 'C2:T1:BeforeMapObjects:block'),
                  ('C1:T1:AfterLock:block', 'C2:T1:BeforeLock:block'),
                  ('C1:T1:End:block', 'C2:T1:End:block'),
    ]
))



#
# FILE INODE TESTS (SINGLE CLIENT)
#

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSFileInode:TestWriteReadSingle1',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSFileInode:TestWrite1')])
    },
    rendezvous = []
))


#
# FILE INODE TESTS (MULTIPLE CLIENTS)
#


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'MFSFileInode:TestWriteReadConcurrent1',
    init_script = os.path.join(Dir('#').abspath, 'test/integration/mfs/init.sh'),
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'MFSFileInode:TestWrite1')]),
        'C2': ( testProgram, [('T1', 'MFSFileInode:TestRead1')])
    },
    rendezvous = [
                  ('C1:T1:AfterMapObjects:block', 'C2:T1:BeforeMapObjects:block'),
                  ('C1:T1:AfterLock:block', 'C2:T1:BeforeLock:block'),
                  ('C1:T1:End:block', 'C2:T1:End:block'),
    ]
))


