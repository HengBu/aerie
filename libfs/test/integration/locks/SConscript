import os
import re
import sys
import string
import testfw
import copy
from integration_test import runIntegrationTests

Import('mainEnv', 'testEnv')
myTestEnv = testEnv.Clone()

Import('fscLibrary')
Import('fssLibrary')
Import('mfsLibrary')
Import('commonLibrary')
Import('chunkstoreLibrary')
Import('rpcLibrary')
depLibs = [mfsLibrary, fscLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
serverDepLibs = [fssLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
objects = myTestEnv['OBJECTS']

lockServerProgram = myTestEnv.Program('smain', source = myTestEnv['SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
hlockServerProgram = myTestEnv.Program('smain-hlock', source = myTestEnv['HLOCK_SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
testProgram = myTestEnv.Program('test', source = [Glob('*.test.cc'), Glob('*.fixture.cc'), Glob('*.helper.cc'), objects], LIBS=['UnitTest++', 'pthread', 'rt']+depLibs)
runtests = myTestEnv.Command("test.passed", ['test', fscLibrary], runIntegrationTests)


def addIntegrationTest(env, suite_str, test_list, server_program, test_program):
	test_program_abspath = os.path.join(os.getcwd(), str(test_program[0]))
	server_program_abspath = os.path.join(os.getcwd(), str(server_program[0]))
	for test in test_list:
		test_str = test[0]
		num_clients = test[1]
		test_obj = testfw.integration_test.IntegrationTest(suite_str, test_str, timeout=5000)
		test_obj.setPreTest(test_program_abspath, '-T,-init,-numclients=%d' % (num_clients), {})
		test_obj.addTest(None, 'S', server_program_abspath, '-p 10000', {}, False)
		for i in range(num_clients):
			test_obj.addTest(None, 'C%d' % (i+1), test_program_abspath, '-T,-suite=%s,-test=%s,-host=10000' % (suite_str, test_str), {})
		env.addIntegrationTest(test_obj)

# Integration tests

lock_test_list = [
                  ('TestLockUnlockSingleClient1', 1),
                  ('TestLockUnlockSingleClient2', 1),
                  ('TestLockUnlockConcurrentClients1', 2),
                  ('TestLockUnlockConcurrentClients2', 2),
                  ('TestLockUnlockConcurrentClients3', 2),
                  ('TestLockUnlockConcurrentClients4', 2),
                  ('TestLockConvert1', 2),
                  ('TestLockConvert2', 2),
                  ('TestLockCancel1', 2),
                  ('TestLockCancel2', 2),
                  ('TestSharedLockUnlockConcurrentClients1', 2),
                  ('TestSharedLockUnlockConcurrentClients2', 2),
	         ]

hlock_test_list = [
                   ('TestLockUnlockSingleClient1', 1),
                   ('TestLockUnlockConcurrentClient1', 2),
                   ('TestLockUnlockConcurrentClient2', 2),
	          ]


addIntegrationTest(myTestEnv, 'Lock', lock_test_list, lockServerProgram, testProgram)
addIntegrationTest(myTestEnv, 'HLock', hlock_test_list, hlockServerProgram, testProgram)
