import os
import sys
import string
import testfw
import copy
from integration_test import runIntegrationTests

Import('mainEnv', 'testEnv')
myTestEnv = testEnv.Clone()

Import('fscLibrary')
Import('mfsLibrary')
Import('commonLibrary')
Import('chunkstoreLibrary')
Import('rpcLibrary')
Import('serverProgram')
depLibs = [mfsLibrary, fscLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
objects = myTestEnv['OBJECTS']

testProgram = myTestEnv.Program('test', source = [Glob('*.test.cxx'), Glob('*.fixture.cxx'), Glob('*.helper.cxx'), objects], LIBS=['UnitTest++', 'pthread', 'rt']+depLibs)
runtests = myTestEnv.Command("test.passed", ['test', fscLibrary], runIntegrationTests)
testProgramAbspath = os.path.join(os.getcwd(), str(testProgram[0]))
serverProgramAbspath = str(serverProgram[0])


# Integration tests

test_list = [
             ('TestLockUnlockSingleClient1', 1),
             ('TestLockUnlockSingleClient2', 1),
             ('TestLockUnlockConcurrentClients1', 2),
             ('TestLockUnlockConcurrentClients2', 2),
             ('TestLockUnlockConcurrentClients3', 2),
             ('TestLockUnlockConcurrentClients4', 2),
             ('TestSharedLockUnlockConcurrentClients1', 2),
             ('TestSharedLockUnlockConcurrentClients2', 2),
             ('TestLockConvert1', 2),
             ('TestLockConvert2', 2),
	    ]

for test in test_list:
	testStr = test[0]
	test_obj = testfw.integration_test.IntegrationTest(testStr, timeout=5)
	test_obj.setPreTest(testProgramAbspath, '-T,-init,-numclients=%d' % (test[1]), {})
	test_obj.addTest(None, 'S', serverProgramAbspath, '-p 10000', {}, False)
	for i in range(test[1]):
		test_obj.addTest(None, 'C%d' % (i+1), testProgramAbspath, '-T,-test=%s,-host=10000' % testStr, {})
	myTestEnv.addIntegrationTest(test_obj)
