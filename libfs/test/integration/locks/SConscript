import os
import re
import sys
import string
import testfw
import copy
from integration_test import runIntegrationTests

Import('mainEnv', 'testEnv')
myTestEnv = testEnv.Clone()

Import('fscLibrary')
Import('fssLibrary')
Import('mfsLibrary')
Import('commonLibrary')
Import('chunkstoreLibrary')
Import('rpcLibrary')
depLibs = [mfsLibrary, fscLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
serverDepLibs = [fssLibrary, rpcLibrary, chunkstoreLibrary, commonLibrary]
objects = myTestEnv['OBJECTS']

lockServerProgram = myTestEnv.Program('smain', \
	source = myTestEnv['SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
hlockServerProgram = myTestEnv.Program('smain-hlock', \
	source = myTestEnv['HLOCK_SERVER_OBJECTS'], LIBS=['pthread', 'rt']+serverDepLibs)
testProgram = myTestEnv.Program('test', \
	source = [Glob('*.test.cc'), Glob('*.fixture.cc'), Glob('*.helper.cc'), objects], \
	LIBS=['UnitTest++', 'pthread', 'rt']+depLibs)
runtests = myTestEnv.Command("test.passed", ['test', fscLibrary], runIntegrationTests)



###############################################################################
# INTEGRATION TEST SCHEDULES
############################################################################### 

hlock_test_list = [
                   ('TestLockUnlockSingleClient1', 1),
                   ('TestLockUnlockConcurrentClient1', 2),
                   ('TestLockUnlockConcurrentClient2', 2),
	          ]

#
# BASE LOCKS TESTS
#

myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockUnlockSingle',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockUnlock')])
    },
    rendezvous = []
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockUnlockConcurrent1',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockUnlock')]),
        'C2': ( testProgram, [('T1', 'Lock:TestLockUnlock')])
    },
    rendezvous = [('C1:T1:E2', 'C2:T1:E1'), 
                  ('C2:T1:E3', 'C1:T1:E3')]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockUnlockMultipleTimesConcurrent1',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockUnlockMultipleTimes')]),
        'C2': ( testProgram, [('T1', 'Lock:TestLockUnlockMultipleTimes')])
    },
    rendezvous = [('C1:T1:E1:block', 'C2:T1:E1:block')]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockUnlockMultipleTimesConcurrent2',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockUnlockMultipleTimes')]),
        'C2': ( testProgram, [('T1', 'Lock:TestLockUnlockMultipleTimes')])
    },
    rendezvous = [
                  ('C1:T1:E1:block', 'C2:T1:E1:block'),
                  ('C1:T1:E3:block', 'C2:T1:E2:block'),
                  ('C1:T1:E4:block', 'C2:T1:E4:block')
    
    ]
))


# checks that a client that grabs a cached lock is serialized
# with respect to another client trying to acquire the same lock
myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockUnlockMultipleTimesConcurrent3',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockUnlockTwoTimes')]),
        'C2': ( testProgram, [('T1', 'Lock:TestLockUnlock')])
    },
    rendezvous = [
                  ('C1:T1:E3:block', 'C2:T1:E1:block'),
                  ('C1:T1:E4:block', 'C2:T1:E3:block')
    ]
))


# asynchronous conversion
# a client acquires a lock in XL and then tries to convert it in SL
# a second client tries to acquire the lock in SL between the two events 
myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockConvert1',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockXLConvertSL')]),
        'C2': ( testProgram, [('T1', 'Lock:TestLockSL')])
    },
    rendezvous = [
                  ('C1:T1:E2:block', 'C2:T1:E1:block'),
                  ('C1:T1:E3:block', 'C2:T1:E2:block')
    ]
))


# synchronous conversion
# a client acquires a lock in XL and then tries to convert it in SL
# a second client tries to acquire the lock in SL between the two events 
myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestLockConvert2',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestLockXLConvertSLsynchronous')]),
        'C2': ( testProgram, [('T1', 'Lock:TestLockSL')])
    },
    rendezvous = [
                  ('C1:T1:E2:block', 'C2:T1:E1:block'),
                  ('C1:T1:E3:block', 'C2:T1:E2:block')
    ]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestSharedLockUnlockConcurrentClients1',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestSharedLockUnlock')]),
        'C2': ( testProgram, [('T1', 'Lock:TestSharedLockUnlock')])
    },
    rendezvous = [
                  ('C1:T1:E2:block', 'C2:T1:E2:block')
    ]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'Lock:TestSharedLockUnlockConcurrentClients1',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'Lock:TestSharedLockXLUnlockLockSLUnlock')]),
        'C2': ( testProgram, [('T1', 'Lock:TestSharedLockXLUnlockLockSLUnlock')])
    },
    rendezvous = [
                  ('C1:T1:E3:block', 'C2:T1:E3:block'),
                  ('C1:T1:E4:block', 'C2:T1:E4:block')
    ]
))


#
# HIERARCHICAL LOCK TESTS
#


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'HLock:TestLockUnlockSingleClient',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'HLock:TestLockIXLockXRUnlock')])
    },
    rendezvous = [
    ]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'HLock:TestLockUnlockConcurrentClient1',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'HLock:TestLockIXLockXLUnlock')]),
        'C2': ( testProgram, [('T1', 'HLock:TestLockIXLockXLUnlock')])
    },
    rendezvous = [
                  ('C1:T1:E1:block', 'C2:T1:E1:block'),
                  ('C1:T1:E2:block', 'C2:T1:E2:block')
    ]
))


myTestEnv.addIntegrationTest(testfw.integration_test.IntegrationTest(
    name = 'HLock:TestLockUnlockConcurrentClient2',
    testfw = testProgram, server = lockServerProgram,
    clients = { 
        'C1': ( testProgram, [('T1', 'HLock:TestLockISLockSLUnlock')]),
        'C2': ( testProgram, [('T1', 'HLock:TestLockISLockSLUnlock')])
    },
    rendezvous = [
                  ('C1:T1:E1:block', 'C2:T1:E1:block'),
                  ('C1:T1:E2:block', 'C2:T1:E2:block'),
                  ('C1:T1:E3:block', 'C2:T1:E3:block')
    ]
))
